{"doi":"10.1109\/ICICS.2003.1292643","coreId":"102480","oai":"oai:epubs.surrey.ac.uk:1943","identifiers":["oai:epubs.surrey.ac.uk:1943","10.1109\/ICICS.2003.1292643"],"title":"An efficient digital image-in-image watermarking algorithm using the integer discrete cosine transform (IntDCT)","authors":["Zhang, Jing","Ho, Anthony T. S."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2003-12-15","abstract":"<p>In this paper, a robust and efficient watermarking algorithm is proposed for copyright protection of digital images. The proposed algorithm can also be extended to video sequences. Based on Ho et al.'s image-in-image watermarking algorithm A.T.S. Ho, et al. (2002), the proposed algorithm uses an integer discrete cosine transform (IntDCT) (2003). It is based on the IntDCT transform used in the state-of-the-art video compression standard H.264 (2002), rather than the conventional DCT used in the prior video standards. The most significant advantage of this transform is that it is free from any floating-point or fixed-point multiplication required by the original DCT and all operations can be carried out with integer arithmetic, without loss of accuracy. The proposed algorithm can embed a small image such as a company's trademark into the original cover images. The algorithm's performance is evaluated using StirMark 4.0. Experimental results show that this proposed algorithm can survive attacks such as scaling, additive noise, line removal as well as JPEG compression. The simplicity of the integer DCT transform also offers a significant advantage in shorter processing time and ease of hardware implementation than commonly used DCT techniques. <\/p","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:epubs.surrey.ac.uk:1943<\/identifier><datestamp>\n      2017-10-31T14:03:44Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><setSpec>\n      6469766973696F6E733D656E67616E64706879736963616C736369656E636573:436F6D707574696E67<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/epubs.surrey.ac.uk\/1943\/<\/dc:relation><dc:title>\n        An efficient digital image-in-image watermarking algorithm using the integer discrete cosine transform (IntDCT)<\/dc:title><dc:creator>\n        Zhang, Jing<\/dc:creator><dc:creator>\n        Ho, Anthony T. S.<\/dc:creator><dc:description>\n        <p>In this paper, a robust and efficient watermarking algorithm is proposed for copyright protection of digital images. The proposed algorithm can also be extended to video sequences. Based on Ho et al.'s image-in-image watermarking algorithm A.T.S. Ho, et al. (2002), the proposed algorithm uses an integer discrete cosine transform (IntDCT) (2003). It is based on the IntDCT transform used in the state-of-the-art video compression standard H.264 (2002), rather than the conventional DCT used in the prior video standards. The most significant advantage of this transform is that it is free from any floating-point or fixed-point multiplication required by the original DCT and all operations can be carried out with integer arithmetic, without loss of accuracy. The proposed algorithm can embed a small image such as a company's trademark into the original cover images. The algorithm's performance is evaluated using StirMark 4.0. Experimental results show that this proposed algorithm can survive attacks such as scaling, additive noise, line removal as well as JPEG compression. The simplicity of the integer DCT transform also offers a significant advantage in shorter processing time and ease of hardware implementation than commonly used DCT techniques. <\/p><\/dc:description><dc:date>\n        2003-12-15<\/dc:date><dc:type>\n        Conference or Workshop Item<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/epubs.surrey.ac.uk\/1943\/1\/fulltext.pdf<\/dc:identifier><dc:identifier>\n          Zhang, Jing and Ho, Anthony T. S.  (2003) An efficient digital image-in-image watermarking algorithm using the integer discrete cosine transform (IntDCT)  In: Fourth International Conference on Information, Communications and Signal Processing, 2003 and the Fourth Pacific Rim Conference on Multimedia. Proceedings of the 2003 Joint.     <\/dc:identifier><dc:relation>\n        10.1109\/ICICS.2003.1292643<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/epubs.surrey.ac.uk\/1943\/","10.1109\/ICICS.2003.1292643"],"year":2003,"topics":[],"subject":["Conference or Workshop Item","PeerReviewed"],"fullText":"ICICS-PCM 2003 \n15-18 DOWILUXZOOJ \nSineapne \n2C2.4 \nAn Efficient Digital Image-in-Image Watermarking Algorithm Using \nthe Integer Discrete Cosine Transform (IntDCT) \nJ. Zhang, Anthony T. S. Ho \nDivision of Information Engineering \nSchool of Electrical and Electronic Engineering \nNanyang Technological University \nNanyang Avenue, Singapore 639798 \nE-mail JingZhanp~,pmail.ntuedu.sg \nAbstract \nIo this paper, a robust and efficient watermarking \nalgorithm is proposed for copyright protection of \ndigital images. The proposed algorithm can also be \nextended to video sequences. Based on Eo et al.'s \nimage-in-image watermarking algorithm [I], the \nproposed algorithm uses an integer discrete cosine \ntransform (IntDCT) [q. It is based on the IotDCT \ntransform used in the state-of-the-art video \ncompression standard H.264 [q, rather than the \nconventional DCT used in the prior video standards. \nThe most signiticaut advantage of this transform is that \nit is free from any Uoatiug-point or fixed-point \nmultiplication required by the original DCT and all \noperations can be carried out with integer arithmetic, \nwithout loss of accuracy. \nThe proposed algorithm can embed a small image such \nas a company's trademark into the original cover \nimages. The algorithm's performance is evaluated \nusing StirMark 4.0 [lo]. Experimental results show \nthat this proposed algorithm can survive attacks such \nas scaling, additive noise, Line removal as well as JPEG \ncompression. The simplicity of the integer DCT \ntransform also offers a significant advantage in shorter \nprocessing time aud ease of hardware implementation \nthan commonly used DCT techniques. \n1. Introduction \nUsage of digital multimedia has witnessed a tremendous \np w t h  during the last decade as a result of their notable \nbenefits in efficient storage, ease of manipulation and \nhmsmission. Unfortunately, the very nature of the digital \nmedia makes the work of pirates and hackers easier, since it \nenables perfect copies with no loss of value. One solution \nthat is gaining popularity in protecting digital contents for \ncopyright owners is digital watermarking. Digital \nwatermarking can hide copyright information (watermark) \ninto the \"essence\" of the multimedia object. And the hidden \ninformation should be imperceptible and robust against \nmalicious attacks. \nDigital image watermarking can be performed in both \nspatial and transform domains. In spatial domain techniques, \none of the simplest methods of inserting a digital watermark \nin a still image is called Least-Significant-Bit (LSB) \nWatermarking [2]. However, this technique has relatively \nlow information hiding capacity and can be easily erased by \nlossy image compressioa Techniques like superimposing a \nwatermark image over an area of image to be watermarked \n[3] and signal-adaptive addition [4] are used to embed \nwatermarks in the spatial domain. Watermarks can also be \ninserted in the frequency domain by applying transforms \nlike Fast Fourier Transform (FFT) [5] and Discrete Cosine \nTransform (DCT) [6], and then altering the values of \nselected transform coefficients to store the watermark in \nstill images. However, the main problem of these \ntechniques is that their algorithms are complicated for both \nsoftware and hardware implementations. \nThe proposed algorithm is based on Ho et al.'s imagein- \nimage watermarking algorithm [l]. This algorithm applied \nthe block Fast Hadamard Transform with the size of 8x8. \nThe proposed algorithm uses a smaller transform IntDCT \nwhich is the essential transform of the newly developed \nvideo compression standard H.264 [7]. The H.264 standard \nis currently the most efficient and network-friendly video \ncoding standard. This standard has already achieved a \nsignificant improvement especially in the ratedistortion \nefficiency, providing a factor of two in bit-rate savings \nwhen compared with existing standards such as MPEG-2 \n[ 111. It is now the responsibility of a newly formed Joint \nVideo Team between ITU-T VCEG and ISOEC MPEG. \nThis paper is organized as follows: the derivation and main \nproperties of the IntDCT transform are described in \nSection 2. The image watermarking algorithm is presented \nin Section 3. Experimental results are analyzed in Section 4 \nand conclusion is given in Section 5. \n2. Integer Discrete Cosine Transform \nThe proposed watermarking algorithm uses the integer \nDCT (IntDCT) which is used in H.264 video standard [7]. \nH.264 uses this new 4x4 transform to help reduce blocking \n0-7803-8185-8\/03\/$17.00 8 2003 IEEE 1163 \nartifacts caused by existing video cdmg standards by using \n8x8 DCT. IntDCT basically has the same propexties as the \noriginal DCT. But there are some fundamental differences. \nFirst of all, it is an integer transform. AU operations can be \ncarried out with integer arithmetic, without loss of \naccuracy. The core pan of the transform is 6ee 6om \nmultiplications. It only requires additions and shifts. It does \nnot need floating-point and fixed-point multiplications \nrequired by DCT. This reduces the computational \ncomplexity and it is much easier for hardware \nimplementation. \nTo develop this integer DCT, let us examine the 4x4 DCT \nof a 4x4 matrix X: \nT a a a  a a a a  a 1_;6 a - a  -1 - a  jx*[ a - a  -;- a  (1) \nc - b  c - b  \nWhere \na=IIZ, b = & m  (R\/8), ==&U6 (3R18) \nThe matrix multiplication can be factorized to the following \nequivalent form: \nY = (B* x B \u2019 ) @ Q  (2) \nWhere [: -: - 1 ] , ~ = 1  a\u2019 ab6\u2018 ab \u2019 *; \nI - I  - I  I a\u2019 ab a\u2019 46 \nd - I  I - d  ab b\u2019 ab b\u2019 \nB =  \nB * P P  is a \u201ccore\u201d 2-D transform. Q is a matrix of scaling \nfactors and the symbol \u20188 indicates that each element of \nB * P d  is multiplied by the scaling factor in the same \nposition in matrix Q. d is c\/b (approximately 0.414). \nTo simplify the implementation of the transform, d is \napproximated by 0.5. To ensure that the transform remains \northogonal. b also needs to be moditied so that: \na = 1 I 2, b = fi, d = 1 I 2 \nThe 2\u201d\u2019 and 4* rows of matrix B and the and 4& columns \nof matrix d a r e  scaled by a factor of 2 and the post-scaling \nmatrix Q is scaled down for compensation. This avoids \nmultiplications by 1\/2 in the core transform B*X*$, which \nwould result in loss of accuracy using integer arithmetic. \nThe final forward 4x4 IntDCT becomes: \nY=(B,.:X*B\/T) @ Qj (3) \nWhere \na2 ab\/2 a2 ab12 \nab12 b2\/4 ab\/2 b2\/4 \nat ab\/2 a\u2019 ab\/2 \nab12 b2\/4 ab\/2 b2\/4 \nThis transform is an approximation to the 4x4 DCT. In the \ncontext of the H.264 CODEC, it has almost identical \ncompression performance to DCT and has a number of \nimportant advantages. The core part of the transform can be \ncarried out with integer arithmetic using only additions, \nsubtractions and shifts (to implement a multiplication by 2). \nThe inverse transform is given by: \nx \u2019 = E ; * (   re^, ) * E ,  (4) \nb2 ab b2 1 1\/2 -U2 - I  \nob b2 ab b2 1\/2 - I  1 -1\/z \nThe matrix Y is pre-scaled by multiplying each coefficient \nby the appropriate weighting factor fiom matrix Q,. +\/- \n(1\/2) in the matrices B, and in its transposed matrix can be \nimplemented by a right-shifl without a sisnifrcant loss of \naccuracy because the coefficients Y are pre-scaled. In \nIt264 scaling matrices Q, and Q, are combined into \nquantization. \nFor transform performance comparison, we also applied \nother approximate transforms: Cham [9]\u2019s 8-bit ICT and \nLiang et al. [SI\u2019S 418-bit BinDCT. Cham [9] developed a \nseries of 8x8 Integer Cosine Transforms (ICTs) based on \nthe principle of dyadic symmetry. He claimed that the \nimplementation complexity of an ICT depends on the \nnumber of bits required to represent the magnitude of its \nkernel components. Liang et al. [8] designed several \nfamilies of fast multiplication-less approximations of DCT \nwith the lifting scheme, named the BinDCT. It can support \n3 different block sizes: 4x4,SxS and 16x16. \nA performance comparison of accuracy and speed is \nperformed among three 4x4 transforms, IntDCT, BinDCT \nand DCT. Fmt a 4x4 input matrix is generated by randomly \nselecting its elements 60m 0 to 255. The input is forward \nand inverse transformed by the three transforms. This \nprocedure is run 1000 times. The average speed of IntDCT \n(1.2519 timeslms) is approximately 5.6% faster than DCT \n(1.1860 timeslms), while the speed of BinDCT (1.1902 \ntimeslms) is approximately the same as that of DCT, with \nno significant speed improvement. The reconstructed \nmatrix by IntDCT is exactly the same as the input with the \n1164 \nnormalized correlation value of 1. However, the outputs of \nDCT and BinDCT both have very little differences \ncompared to the input, with the correlation value of 0.9999. \nThese results show that IntDCT can perform faster than \nDCT, without loss of accuracy. \n3. Watermarking in IntDCT domain \nIn this section we present an image-in-image watermarking \nalgorithm using spatial masking. The embedding procedure \nis implemented in the following five steps: 1) Cover image \ndecomposition and block selection; 2) Watermark image \ndecomposition; 3) Forward IntDCT and watermark \nrearrangement; 4) Watermark strengtb control using spatial \nmasking and embedding; 5 )  Inverse IntDCT. \nThe original cover image f(x,y) is f~ decomposed into \nnon-overlapping blocks of 4x4, denoted by fk(x'.y'), k=O, \n1, ..., K-1, where the subscript k denotes the index of \nblocks and K denotes the total number of blocks. That is \nf ( X , Y )  =Uf,(x',y?, 0 2 x',Y 3 (5 )  \nk \nWe applied an M-sequence to pseudwandomly select the \nrelevant blocks f&',y') for watermark insertion among \nf y ' )  k4,l,...JGl. Tlis process can help to solve the \ninformation is spread aronnd the image. It is st i l l  possible to \nretrieve some of the watermark information, even when \nsome other information may have been lost during the \nattacks. The starting number is generated using a true \nrandom seed and is stored in a watermark key. \nThe watermark image w(x,y) is also decomposed into non- \noverlapping blocks of 4 x 4 ,  denoted by wk(x',y'), k=O, 1, ..., \nL-I. \nw(x,y) = uwk(x',y?,  0 s x'$s 3 \npro 9l lem of regional processing and attacks. The bidden bits \n(6) \nk \nEVeQ'fk(X ',y ') and W& ',y ') are IntDCT transformed \nF ', (u,v) = htDCT{f ', (x ', y I)}, 0 2 U ,  v 2 3 \nW, (U ,  v )  = IntDCT{w,(x ', y 31, 0 < U ,  v 2 3 \nAll the Sequency coefficients within every transformed \nwatermark block W&,v) are scanned in a zigzag fashion \nand arranged in a one-dimensional sequence, denoted by m,, \ni=O,. . .,I-1 \nWitbin every transformed cover image block F'&,v), only \nseveral middle frequencies x, of AC components are used, \ni=O ,..., N-1. The watermark strength factor is denoted by a .  \nThe embedding formula is : \n(7) \nx,* = a * m. (8) \nThe original coefficient x, is replaced by the watermarked \nxt*. After that, the cover image block is substituted by the \nnew 4x4 matrix of IntDCT coefficients. The watermarked \ncover image block is denoted by F';(u,v). \nWatermark strengtb a control is based on the edge- \ndetecting mask shown in the following equation: \na = P * m a s k  ( j , k )  (9) \nwhere p is the scalmg factor, and j and k indicate tbe \npositions of the blocks. \nThe visual mask masklr;k) is adaptively obtained based on \nedge point density of the cover image by using the Canny \nEdge Detection algorithm in the spatial domain. Small \nvalues of mmk(i,k) indicate that the corresponding block is \nsmoothly textured. Larger values indicate that the block \ncontains outstanding edges. \nThe watermarked cover image blocks are transformed by \ninverse IntDCT. \nf\" , (x ' , y ' )=In tDCT-~(F\". (u , v ) iO2x ' , y '~3  (10) \nA watermark key containing a number of relevant data for \nprivate watermarking is then generated. These data include \nthe sues of the cover image and the watermark image, \ntogether with the seed and the starting number of M- \nsequence for pseudorandom selection of embedding \nlocation. \nThe extraction process of watermark from the attacked and \nwatermarked cover image is relatively similar to the \nembedding procedure and can be implemented by the \nfollowing four steps: 1) Cover image decomposition and \nblocks selection; 2) Forward IntDCT; 3) Extraction and \nwatermark strength control; 4) Watermark rearrangement \nand inverse IntDCT. AU the data stored in the key file \nduring embedding is needed in the blind extraction \nprocedure without any reference to the original cover image. \nThe watermark information is extracted i3om the middle \niiyuency components. These components are denoted by \nx, , and the retrieved watermark IntDCT coefficients are \ndenoted by mz', i=O ,..., 1-1. The watermark extraction \nformula is given as: \nrn!=xs*' la (11) \nInverse zigzag scanning is then performed on these \nwatermark IntDCT coefficients to obtain a set of 4x4 \ncoefficients matrices. The exhcted watermark image \nw'(x,y), can be obtained by applying inverse IntDCT to the \nwatermark blocks. \n1165 \n4. Results and discussions \nThe results of the proposed image-in-image alg?rithm \nusing IntDCT are shown in Figure 4 (original 512x512 \ncover images 1ena.bmp and baboon.bmp m k e d  with \n32 x 32 watermark image dmtbmp). The PSNR are as high \nas 38.7dB and 39.2dB, respectively. \nTable 1 Results of Some StirMark Tests for Lena \nDifferent transforms were evaluated based on the same \nimage watermarking scheme with fxed PSNR value of \nwatermarked cover images- These transforms are classified \ninto two categories accordmg to the transfozming block sue. \nThe group with the size 4 x 4  is consisted of IntDCT, \nBinDCT and DCT. Another group with the size 8x8 is \nconsisted of DCT, BinDCT and ICT. When 8 x 8 \ntransforms were used in the scheme, the sue of \ndecomposed blocks was changed accordingly. For this \nevaluation the watermark image dmt.bmp was embedded in \nthe cover image 1ena.bmp using the same feature exhaetion \nprocess. Standard correlations of different extracted \nwatermarks are computed for comparison. \n(a) Additive Noise \n(b) Line Removal \nFigure 2 Performance Comparisons among Different DCT \nTransforms using cover image Lena \nFigure 2 shows the comparison results under typical \nadditive uniform noise and line removal attacks. For the \nimage Lena, the IntDCT transform can survive additive \nnoise as well as 4x4 DCT for additive noise factors lower \n1166 \nthan 3. The average standard correlation of IntDCT is 1.8% \nhigher than that of 4x4 DCT, and 1.7% than that of \nBinDCT. \nSince IntDCT is designed by using integer values to \napproximate the floating-point magnitude of the \nconventional DCT\u2019s kernel components, all operations can \nbe carried out by integer arithmetic with only binary shifts \nand additions. If these operations are followed correctly, \nmismatch between the input and output after going through \nforward and inverse transforms should not occur. \nFrom Figure 2 (b), we can see that IntDCT shows higher \nrobusmess than 4x4 DCT with 2.6% correlation increase. \nAnd it has better robustness than 8x8 transforms at factors \nSuch as 30,40 and 60 respectively. However, at factor 80 \nfor example, these 4x4 transforms have lower robustness \nthan 8x8 transforms. \nThe 4x4 IntDCT is designed with a small block size to help \nin reducing blockiag artifacts caused by the prior video \ncoding standards using the 8x8 DCT transform, as well as \nincreasing compression efficiency. Some drawbacks of \nusing the 4x4 IntDCT are its relatively poor performances \nagainst some powerful fdtering and up-down-sampling \nattacks. This is because that for a larger 8x8 DCT matrix, \none filtered frequency only possesses approximately 1.5% \nof all the ikquency cwlponents. Therefore, there is still \nsufficient information which can be retrieved from the \nremaining 98.5% of all frequency coefficients. While for a \n4x4 IntDCT matrix, if one frequency is filtered, \napproximately 6.3% tlequency information is lost. The \nmall block size becomes the limitation of IntDCT for \nthese powerful Gltering and up\/down-samplmg attacks, \nsuch as Median Filtering 4x4. \n5. Conclusion \nThis paper bas presented an image-in-image watermarking \ntechnique based on the Integer Discrete Cosine Transform \n(IntDCT) that is used in the state-of-the-art video \ncompression standard H.264. The proposed algorithm could \nsurvive such as additive noise, rescaling, line removal \nattacks and JPEG compression well. For JPEG compression, \nthe watermark was still recognizable even at the low \nquanriZaton factor of 30. Moreover, the simplicity of the \ninteger DCT transform offered a significant advantage in \nshorter processing t h e  and ease of hardware \nimplementation than commonly used DCT techniques. \nComparison results among IntDCT, DCT and other integer \nDCTs have also been presented. For future work, the \nproposed watermarking algorithm using the IntDCT \nmsform will be extended to video watermarking based on \nthe It264 standard. \nReferences \n[1] A.T.S. Ho, J. Shen, and S. H. Tan, \u201c Digital imagein- \nimage watermarking for copyrigbt protection of satellite \nimages using the fast hadamard transform,\u201d IGAKSS02\u2019, \nTomto, Canada, June 16-24,2002. \n[2] R G. van Scbyndel, A. 2. Tirkel, and C. F. Shamoon, \n\u201cSecure spread specbum watermarking for multimedia,\u201d \nIEEE Trans. Image Processing, vol. 6, pp. 1673-1687, Dec. \n1997. \n[3] C. Langelaar, J. C. A. Vea der Lubbe, and R L. \nLagendijk, \u201cRobust labeling method for copy protection of \nimages,\u201d Proceedings of SPWIS&T Electronic lmaging, \nSan Jose, CA, vol. 3022, pp. 298-309, Feb. 1997. \n[4] M. Bami, F. Bartolini, V. Cappelhi, and A. F\u2019iva, \u201cA \nDCTdomian system for robust image watermarking,\u201d \nSignal Processing (Special Issue on Watermarking), vol. \n66, no. 3, pp. 357-372, May 1998. \n[ 5 ]  C.-W. Tang and EL-M. Hang \u201cA feature-based robust \ndigital image watermarking scheme,\u201d IEFE Transactions \non Signal Processing, vol. 51, no. 4, pp. 950-959, Apr. \n2003. \n[6] M. Bami, F. Bartolini, V. Cappellini, and A. Piva, \u201cA \nDCT-domian system for robust ima&e watemwking,\u201d \nSignal Processing (Special Issue on Watermarking), vol. \n66, no. 3, pp. 357-372, May 1998. \n[7] \u201cH.264mEG-4 Part 10 Transform & quantization,\u201d \nITU-T Kec. H264fiSOAEC 11496-10, Final Committee \nDraft, Document JTV-F100, Dec. 2002. (Latest version \nmoditied an 19.03.2003) [ W e ]  Available: \nhttp:\/\/www.vcodex.fsnet.co.ukm264.html \n[SI J. Liang, T. D. Tran and P. Topiwala, \u201cFastVDO\u2019s \nunified 16-Bit trausfomdquantization approach,\u201d JVT- \nBOlS.doc, 2nd Meeting of JVT of ISOEC MPEG & ITU- \nT VCTEG, Geneva, CH, 29 Januaq-1 Feb. 2002. \n[9] W. K. Cham and P. C. Yip, \u201cInteger sinusoidal \ntransforms for image processing,\u201d International Journal of \nElectronics, vol. 70, no. 6, pp. 1015-1030, Jun. 1991. \n[IO] [online] Available: \nhttp:\/\/www.cl.cam.ac.ukl-fapp2\/waterm~in~st~~~ \n[ I l l  R Scbafer, T. Wiegand, and H. Schwarz, \u201cThe \nemerging H.264\/AVC standard,\u201d EBU Technical Review, \nAudioNideo Coding, Jan. 2003. \ni c \n. \nI167 \n"}