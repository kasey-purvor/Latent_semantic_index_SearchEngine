{"doi":"10.1109\/ICWS.2011.73","coreId":"197439","oai":"oai:lra.le.ac.uk:2381\/9687","identifiers":["oai:lra.le.ac.uk:2381\/9687","10.1109\/ICWS.2011.73"],"title":"Modeling business process of web services with an Extended STRIPS Operations to detection feature interaction problems runtime","authors":["Xu, Jiuyun","Chen, Kun","Duan, Youxiang","Reiff-Marganiec, Stephan"],"enrichments":{"references":[{"id":43708710,"title":"Detecting Race Conditions in Web Services,","authors":[],"date":"2006","doi":"10.1109\/aict-iciw.2006.82","raw":"Zhang, J., Su, S., and Yang, F. Detecting Race Conditions in Web Services, In Proceedings of the International Conference on Internet and Web Applications and Services (ICIW'06), 2006.","cites":null},{"id":43708702,"title":"Detecting the Web Services Feature Interactions.","authors":[],"date":"2006","doi":"10.1007\/11912873_19","raw":"Zhang, J., Yang, F., and Su, S. Detecting the Web Services Feature Interactions. In K. Aberer et al. (Eds.): WISE 2006, LNCS 4255, pp. 169-174, 2006.","cites":null},{"id":43708699,"title":"Feature Interaction Outside a Telecom Domain. In:","authors":[],"date":"2001","doi":null,"raw":"Blair, L., Blair, G., Pang, J., and Efstratiou, C. Feature Interaction Outside a Telecom Domain. In: Proceedings of the Workshop on Feature Interactions in Composed Systems (ECOOP'2001) 15-20, 2001.","cites":null},{"id":43708701,"title":"Feature interaction: a critical review and considered forecast.","authors":[],"date":"2003","doi":"10.1016\/s1389-1286(02)00352-3","raw":"Calder, M., Kolberg, M., Magill, E.H. and Reiff-Marganiec, S. Feature interaction: a critical review and considered forecast. International Journal of Computer Networks. 41: pp. 115-141, 2003.","cites":null},{"id":43708703,"title":"Feature Interactions: Old Hat or Deadly New Menace? In:","authors":[],"date":"2004","doi":"10.1002\/0470020504.ch13","raw":"Magill, E.H.. Feature Interactions: Old Hat or Deadly New Menace? In: K. Turner, E. Magill and D. Marples (Eds.), Service Provision: Technologies for Next Generation Communications, Wiley, pp. 235-252, 2004.","cites":null},{"id":43708708,"title":"Formalising Web Services. In:","authors":[],"date":"2005","doi":"10.1007\/11562436_34","raw":"Turner, K.J. Formalising Web Services. In: Proceeding of Formal Techniques for Networked and Distributed Systems (FORTE XVIII), LNCS 3731, 473-488, 2005.","cites":null},{"id":43708700,"title":"Guest Editorial: Directions in Feature Interaction Research. In:","authors":[],"date":"2004","doi":"10.1016\/j.comnet.2004.03.024","raw":"Amyot, D. and Logrippo, L. Guest Editorial: Directions in Feature Interaction Research. In: Computer Networks, Special Issue on Feature Interactions in Emerging Application Domains 45 5, 563-567, 2004.","cites":null},{"id":43708712,"title":"Immune-Inspired Online Method for Service Interactions Detection.","authors":[],"date":"2007","doi":"10.1007\/978-3-540-69507-3_70","raw":"Zhang, J., Yang, F., Shuang, K., and Su, S. Immune-Inspired Online Method for Service Interactions Detection. In Jan van Leeuwen et al. (Eds.): SOFSEM 2007, LNCS 4362, pp. 808-818, 2007.","cites":null},{"id":43708720,"title":"Information and Network Dynamics Lab Semantic Web Agents Project,","authors":[],"date":null,"doi":null,"raw":"MINDSWAP: Maryland Information and Network Dynamics Lab Semantic Web Agents Project, OWL-S API. http:\/\/www.mindswap.org\/2004\/owl-s\/api\/.","cites":null},{"id":43708736,"title":"Katia Sycara, Specify and Monitoring Composite Events for Semantic Web Services, in Web Services,","authors":[],"date":"2007","doi":"10.1109\/ecows.2007.29","raw":"Roman Vaculin, Katia Sycara, Specify and Monitoring Composite Events for Semantic Web Services, in Web Services, 2007. ECOWS '07. Fifth European Conference on. 2007.","cites":null},{"id":43708728,"title":"Keep It Small, Keep It Real: Efficient Run-Time Verification of Web Service Compositions. In: FMOODS\/FORTE","authors":[],"date":"2009","doi":"10.1007\/978-3-642-02138-1_2","raw":"Luciano Baresi, Domenico Bianculli, Sam Guinea, Paola Spoletini, Keep It Small, Keep It Real: Efficient Run-Time Verification of Web Service Compositions. In: FMOODS\/FORTE 2009, pp.26-40.","cites":null},{"id":43708704,"title":"On Feature Interactions among Web Services. In:","authors":[],"date":"2004","doi":"10.1109\/icws.2004.1314727","raw":"Weiss, M. and Esfandiari, B. On Feature Interactions among Web Services. In: Proceedings of the International Conference on Web Services (ICWS), IEEE, 2004.","cites":null},{"id":43708716,"title":"OWL rules: A proposal and prototype implementation.","authors":[],"date":"2005","doi":"10.1016\/j.websem.2005.05.003","raw":"Horrocks, I., Patel-Schneider, P.F., Bechhofer, S. and Tsarkov, D.: OWL rules: A proposal and prototype implementation. J. of Web Semantics 3 (2005), pp.23-40.","cites":null},{"id":43708718,"title":"OWL-S Atomic Services Composition with SWRL Rules.","authors":[],"date":"2008","doi":"10.1007\/978-3-540-68123-6_66","raw":"Redavid, D., Iannone, L., Payne, T. and Semeraro, G. OWL-S Atomic Services Composition with SWRL Rules. Lecture Notes in Computer Science: Foundations of Intelligent Systems, vol. 4994, pp. 605-611, 2008.","cites":null},{"id":43708714,"title":"OWL-S: Semantic Markup for Web Services,","authors":[],"date":null,"doi":"10.1201\/9781584889342.ch5","raw":"OWL-S: Semantic Markup for Web Services, http:\/\/www.w3.org\/Submission\/OWL-S\/.","cites":null},{"id":43708734,"title":"Policies and Aspects for the Supervision of BPEL Processes. CAiSE","authors":[],"date":"2007","doi":"10.1007\/978-3-540-72988-4_24","raw":"Luciano Baresi, Sam Guinea, Pierluigi Plebani, Policies and Aspects for the Supervision of BPEL Processes. CAiSE 2007, pp.340-354.","cites":null},{"id":43708724,"title":"Policy Support for Call Control.","authors":[],"date":"2006","doi":"10.1016\/j.csi.2005.05.004","raw":"Turner, K.J., Reiff-Marganiec, S., Blair, L., Pang, J., Gray, T., Perry, P. and Ireland, J. Policy Support for Call Control. Computer Standards and Interfaces, vol 28\/6 pp 635-649, 2006.","cites":null},{"id":43708735,"title":"Roman Vaculin, Process Mediation, Execution Monitoring and Recovery for Semantic Web Services.","authors":[],"date":"2008","doi":"10.1504\/ijaose.2009.022945","raw":"Katia Sycara, Roman Vaculin, Process Mediation, Execution Monitoring and Recovery for Semantic Web Services. IEEE Data Engineering Bulletin 31(3), pp.13-17, 2008.","cites":null},{"id":43708730,"title":"Sam Guinea, Marco Piistore, Michele Trainotti, Dynamo+Astro: An Integrated Approach for BPEL Monitoring. ICWS","authors":[],"date":"2009","doi":"10.1109\/icws.2009.67","raw":"Luciano Baresi, Sam Guinea, Marco Piistore, Michele Trainotti, Dynamo+Astro: An Integrated Approach for BPEL Monitoring. ICWS 2009, pp. 230-237.","cites":null},{"id":43708732,"title":"Sam Guinea, Raman Kazhamiakin, Marco Pistore, An Integrated Approach for the Run-Time Monitoring of BPEL Orchestrations. ServiceWare","authors":[],"date":"2008","doi":"10.1007\/978-3-540-89897-9_1","raw":"Luciano Baresi, Sam Guinea, Raman Kazhamiakin, Marco Pistore, An Integrated Approach for the Run-Time Monitoring of BPEL Orchestrations. ServiceWare 2008, pp.1-12.","cites":null},{"id":43708726,"title":"Sam Guinea, Run-Time Monitoring in ServiceOriented Architectures. In: Test and Analysis of Web Services","authors":[],"date":"2007","doi":"10.1007\/978-3-540-72912-9_9","raw":"Carlo Ghezzi, Sam Guinea, Run-Time Monitoring in ServiceOriented Architectures. In: Test and Analysis of Web Services 2007 , pp. 237-264.","cites":null},{"id":43708705,"title":"Towards a Classification of Web Service Feature Interactions, In:","authors":[],"date":"2005","doi":"10.1007\/11596141_9","raw":"Weiss, M., Esfandiari, B., and Luo, Y. Towards a Classification of Web Service Feature Interactions, In: Proceedings of the Third International Conference on Service Oriented Computing (ICSOC05), Amsterdam, Netherlands , 2005.","cites":null},{"id":43708722,"title":"Web Service Feature Interaction Detection based on Situation Calculus, In: Service\u2019","authors":[],"date":"2010","doi":"10.1109\/services.2010.27","raw":"Xu, J., Yu W., Chen K., Reiff-Marganiec, S., Web Service Feature Interaction Detection based on Situation Calculus, In: Service\u2019 2010.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2011","abstract":"This paper was presented at the ICWS 2011, IEEE 9th International Conference on Web Services, 4\u20139 July 2011, Washington DC, USA and published in the proceedings.Service-Oriented Computing achieves its full potential when services interoperate. Current service-oriented computing research is concerned with the low level interoperation among services, such as service discovery, service composition etc. However, a high level research issue in form of the feature interaction problem is challenging the interoperation of services. Traditional feature interaction methods are focused on the service design phase using formal methods or pragmatic software engineering analysis. Autonomy and distribution of service development and deployment create needs for runtime detection and resolution of feature interactions in SOC. This paper investigates the detection of feature interactions in web services at runtime and proposes ESTRIPs, an extended STRIPS operation to ensure conflict-free services are identified to populate business processes, using a combination of OWL-S, SWRL and runtime data extracted from SOAP messages. First, we define the feature interaction problem in business process during their execution and then introduce the ESTRIPS method. The implementation of a prototype is illustrated and a real world scenario shows the plausibility of our method for detecting feature interactions in business processes.Peer-reviewedPost-prin","downloadUrl":"http:\/\/hdl.handle.net\/2381\/9687","fullTextIdentifier":"https:\/\/lra.le.ac.uk\/bitstream\/2381\/9687\/1\/2011-3.pdf","pdfHashValue":"59036ce20fc1e37cbd96e52fdb50ec70da886ceb","publisher":"Institute of Electrical and Electronics Engineers (IEEE)","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/9687<\/identifier><datestamp>\n                2011-10-03T10:35:17Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_4072<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nModeling business process of web services with an Extended STRIPS Operations to detection feature interaction problems runtime<\/dc:title><dc:creator>\nXu, Jiuyun<\/dc:creator><dc:creator>\nChen, Kun<\/dc:creator><dc:creator>\nDuan, Youxiang<\/dc:creator><dc:creator>\nReiff-Marganiec, Stephan<\/dc:creator><dc:subject>\nFeature Interaction<\/dc:subject><dc:subject>\nWeb services<\/dc:subject><dc:subject>\nExtended STRIPS Operation<\/dc:subject><dc:subject>\nOWL-S<\/dc:subject><dc:subject>\nSOAP Message<\/dc:subject><dc:description>\nThis paper was presented at the ICWS 2011, IEEE 9th International Conference on Web Services, 4\u20139 July 2011, Washington DC, USA and published in the proceedings.<\/dc:description><dc:description>\nService-Oriented Computing achieves its full potential when services interoperate. Current service-oriented computing research is concerned with the low level interoperation among services, such as service discovery, service composition etc. However, a high level research issue in form of the feature interaction problem is challenging the interoperation of services. Traditional feature interaction methods are focused on the service design phase using formal methods or pragmatic software engineering analysis. Autonomy and distribution of service development and deployment create needs for runtime detection and resolution of feature interactions in SOC. This paper investigates the detection of feature interactions in web services at runtime and proposes ESTRIPs, an extended STRIPS operation to ensure conflict-free services are identified to populate business processes, using a combination of OWL-S, SWRL and runtime data extracted from SOAP messages. First, we define the feature interaction problem in business process during their execution and then introduce the ESTRIPS method. The implementation of a prototype is illustrated and a real world scenario shows the plausibility of our method for detecting feature interactions in business processes.<\/dc:description><dc:description>\nPeer-reviewed<\/dc:description><dc:description>\nPost-print<\/dc:description><dc:date>\n2011-09-13T15:19:30Z<\/dc:date><dc:date>\n2011-09-13T15:19:30Z<\/dc:date><dc:date>\n2011<\/dc:date><dc:type>\nConference paper<\/dc:type><dc:identifier>\nXu, Jiuyun; Chen, Kun; Duan, Youxiang and Reiff-Marganiec, Stephan, 'Modeling business process of web services with an Extended STRIPS Operations to detection feature interaction problems runtime', Web Services (ICWS), 2011 IEEE International Conference on, pp. 516-523<\/dc:identifier><dc:identifier>\n978-0-7695-4463-2<\/dc:identifier><dc:identifier>\nhttp:\/\/ieeexplore.ieee.org\/xpls\/abs_all.jsp?tp=&arnumber=6009432&tag=1<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/9687<\/dc:identifier><dc:identifier>\n10.1109\/ICWS.2011.73<\/dc:identifier><dc:language>\nen<\/dc:language><dc:rights>\n\u00a9 2011 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other users, including reprinting\/ republishing this material for advertising or promotional purposes, creating new collective works for resale or redistribution to servers or lists, or reuse of any copyrighted components of this work in other works.<\/dc:rights><dc:publisher>\nInstitute of Electrical and Electronics Engineers (IEEE)<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2011,"topics":["Feature Interaction","Web services","Extended STRIPS Operation","OWL-S","SOAP Message"],"subject":["Conference paper"],"fullText":"Modeling business process of  web services with an Extended STRIPS Operations to \ndetection feature interaction problems runtime \nJiuyun Xu,  Kun Chen, Youxiang Duan \nSchool of Computer & Communication Engineering \nChina University of Petroleum \nDongying, China \nEmail: jiuyun.xu@computer.org ; ck@126.com; \nyxduan@upc.edu.cn \nStephan Reiff-Marganiec \nDepartment of Computer Science \nUniversity of Leicester \nLeicester, UK \nEmail: srm13@leicester.ac.uk \n \nAbstract \u2014 Service-Oriented Computing achieves its full \npotential when services interoperate. Current service-oriented \ncomputing research is concerned with the low level \ninteroperation among services, such as service discovery, \nservice composition etc. However, a high level research issue in \nform of the feature interaction problem is challenging the \ninteroperation of services. Traditional feature interaction \nmethods are focused on the service design phase using formal \nmethods or pragmatic software engineering analysis. \nAutonomy and distribution of service development and \ndeployment create needs for runtime detection and resolution \nof feature interactions in SOC. This paper investigates the \ndetection of feature interactions in web services at runtime and \nproposes ESTRIPs, an extended STRIPS operation to ensure \nconflict-free services are identified to populate business \nprocesses, using a combination of OWL-S, SWRL and runtime \ndata extracted from SOAP messages. First, we define the \nfeature interaction problem in business process during their \nexecution and then introduce the ESTRIPS method. The \nimplementation of a prototype is illustrated and a real world \nscenario shows the plausibility of our method for detecting \nfeature interactions in business processes. \nKeywords: Feature Interaction; Web services; Extended \nSTRIPS Operation; OWL-S;  SOAP Message \nI.  INTRODUCTION  \nService-oriented computing is as buzzword implying \namongst others flexible interoperation. Much research work \nhas focused on flexible, dynamic web service discovery, \ninvocation and composition at low-level. The importance of \nreliability and security of business process is critical for \nservice customers from the industrial viewpoint. Feature \ninteraction, which is an obstacle for the deployment of \ntelecom service in the large scale, also affects the \ndeployment of web services in the service-oriented \ncomputing domain. In the telecommunications research \ncommunity, features as well as services, are units of \nfunctionality which are correct on their own, but when used \nin combination they might influence their behavior in \nundesired ways. This problem has been known as Feature \nInteraction, a term coined by Bellcore in the late 1980s. The \nFeature Interaction (FI) problem [1, 2, 3] has become one of \nthe important bottlenecks for the deployment of new \nservices. FI is not a bug in the implementation of individual \nservices, but an emergent behavior if features are used in \nconjunction.  \nService-oriented architecture (SOA) holds the promise \nfor businesses of allowing for quick adaptation of systems. \nWeb services are a way of encapsulating application \nfunctionality in a location and implementation transparent \nmanner. However, if services are composed the potential \nfeature interaction arises. Akin to FI, Web services may \ninteract with each other in unexpected and often undesirable \nways negatively affecting service quality and user \nsatisfaction. [4] describes this as Web Services Feature \nInteraction (WSFI) problem. Other research has focused on \nfeature interactions in service-oriented computing, e.g. [6, 8]. \nIn previous work [15], we have categorized two types feature \ninteraction, which are the side-effects of a business process. \nFeature interaction in web services means that one of the \nservices is leading to undesirable behavior for the business \ncustomer while the business process is executing, although \nthe web service is behaving as expected in isolation. \nGenerally, feature interaction is not a fault of a service but \nrather a result of emergent interaction between services. As \ntelecoms markets have traditionally been closed and tightly \ncontrolled, the FI problem was manageable due to in house \ndesign knowledge, small numbers of features and good \navailability of working details [5]. As the telecoms market \nbecame more open, the need for solutions to FI increased and \nnew challenges were posed. The Web services market has \nalways been open, with many people providing services that \nare supposed to work seamlessly together. Hence lessons \nlearned in telecoms, should be considered in the context of \nthe WSFI problem. Predominately, the detection and \nresolution of WSFIs will become important to foster rapid \ndeployment of new services and robustness of composite \nservices. \nThere has been plenty of work on the prevention, \ndetection and resolution of FI in telecommunication systems \n[3], but the traditional detection methods are not suitable for \nthe problem in Web services as: (1) web services are not \ncentrally controlled and there is no global understanding of \nside effects and the operations of the services, and (2) FI in \nWeb services is based on undesirable side effects such as an \ninconsistent states, or data inaccuracies rather than \ninconsistent events as is often the case in telecoms. However, \nweb services provide a number of opportunities, most \nnotably that if considering Semantic Web Services a range of \ninformation is available that provides insight into the desired \nactions of web services accessible to all and not just to \ndomain experts. \nHence there is a need for methods that operate at runtime \nto detect interactions which are caused by services \nencountering each other in their operation and producing \ndata based side effects that can lead to inconsistencies and \nviolation of assumptions while a service composition is \nbeing executed \u2013 in some way monitoring interactions with \nthe opportunity to interfere before things go wrong if \nproblems are detected.  \nThe rest of this paper is organized as follows: section 2 \nintroduces related work. Then section 3 provides background \non OWL-S and introduces the categories of feature \ninteraction that can occur in web service composition. \nSection 4 describes our online detection method in detail, \nincluding the implementation with some case studies. In \nsections 5 and 6, we discuss our method and conclude the \npaper. \nII. BACKGROUND \nOur detection method is based on the use of logical \nreasoning and OWL-S. We provide a concise introduction to \nOWL-S, more information can be found in [13]. \nOWL-S is the major description language for semantic \nweb services. It is based on an ontology of service concepts \nthat supply a Web service designer with a core for describing \nthe properties and capabilities of a Web service in an \nunambiguous computer-interpretable form.  \nOWL-S organizes a service description into four parts: \nthe process model, the profile, the grounding, and the \nservice. The OWL-S process model is most useful for the \nwork presented here, as it provides the required metadata \nabout the Web services. \nIn our method, we firstly transform process descriptions \n(mainly              ,              and        ) into \nsets of rules expressed in an ontology-aware rule language, \nnamely the Semantic Web Rule Language (SWRL) [13]. \nThis is based on the method presented in [15]. Then we \ndefine relevant predicates using the rules to express the \ncomposite Web services. \nIn the web service composition environment, two types \nof feature interactions are considered. We give the \ndescription of two types of feature interaction in detail as \nfollows. \nDissatisfaction of Precondition in the workflow. This \ntype of feature interaction occurs during web service \ncomposition execution. The precondition of one web service \nin the composition is very sensitive to the data of the service \nexecution context. Whenever part of the predicates becomes \nfalse due to some previous service\u2019s execution changing \nsome value relevant to the input parameters. Generally, this \ncategory of feature interaction is occurring during the \nexecution of world altering web services. With logical \nreasoning, this type of feature interaction can be detected by \ncalculating the precondition of services before they execute. \nConflict among InConditions of web services. This type \nof feature interaction refers to a conflict between two web \nservices in the workflow caused by interaction of some \nsensitive data, which business process requesters are \nconsidering as almost opposite requirements. For instance, in \nthe telecommunication domain, some value-added services \nwere implemented as with open APIs, such as the Parlay \nAPIs.  The feature interaction between Originating Call \nScreening (OCS) and Call Forwarding (CF) is an example. \nWhen user A registers with the OCS service forbidding \ncalling user C, but permitting to call user B. User B registers \nwith the CF service which forwards all calls to user C. In this \ncontext, there is an             conflict between these two \nservices. This is also occurring in business processes. For \ninstance, the logistical service needs the address of \ncustomers, while some customers do not leave their address \nto service providers as they see this is privacy violation. This \ncase does not involve all customers but just some of them. \nSo, this kind of feature interaction must be detected during \nthe execution of the web service composition. \nWe will next illustrate our method to handle the two \ntypes of feature interaction during execution of composite \nweb services in detail, but would like to reinforce a \ndifference between this work and planning a web service \ncomposition. Clearly when deciding on which services to \ncompose the static description and the semantic description \nof the Effects and Preconditions is studied. A composition is \nthen planned such that it seems that each service satisfies the \nrequirements of the next in the chain. This planning cannot \ntake into account the runtime interactions mentioned above \nas these depend on instance data (from the service \ninvocations) rather than on the generic behavior of the \nservices.  \nIII. THE METHOD \nOur method is used to detect Web service feature \ninteractions during the execution of the service composition. \nIn this section, we present an overview of the architecture \nand describe the detection process in detail.  A real world \nscenario shows the example for the detection of the conflict \ntype that exist (the lack of resources to complete a latter part \nof a workflow and the attempt to invoke a service whose \npreconditions are not met anymore after an earlier service \nexecution) and are detected.  \nA. Service Interaction Detection Algorithms \nAt the beginning, the composite service is in the initial \nstate. After each atomic service within the composite service \nis executed, we get a new service state, and so on. If the \nformer state is inconsistent with the latter one, or some \npredicate becomes false we have identified a feature \ninteraction. Figure 1 outlines the detection of feature \ninteractions based on logic reasoning.  \nFigure 1 provides an overview of the detection process, \nwhich consists of six steps as follows: \nStep 1. In the first step the SOAP request or SOAP \nresponse message of the current service in the workflow \nexecution engine is intercepted, processing is put on hold \nuntil a reply message is injected in the system. \nStep 2. We extract              ,              and \n        from the OWL-S document using Mindswap \nOWL-S API [16], which can conveniently read or write \nOWL-S document. This task is performed by the Feature \nInteraction Rules Manager. The required data to invoke the \nfunctions is available in the SOAP message as described \nearlier and is transmitted in this step.  \nFormer_state_pool\u00acS0 \nLatter_state_pool \u00ac S1.\nFetch OWL-S Attributes of atomic service from Workflow.\nGet SOAP request and SOAP response message.\n Extract Preconditions, InConditions, Effects, Input data \nand Output data.\n S0 \u00ac f; S1 \u00ac f\nUse Input and Precondition to generate Facts with predicates form.\nUse InConditions to generate Rules\nAdd Facts to S0.Use Rules and Output to change the state.\n Predicates whose value turn to be false are put into Deletelist, \nnew predicates whose value turn to be true are put into Addlist.\nDelete each predicate from S0 which is the same as the predicate in Deletelist.\nAdd all the predicates in S0 to S1. Add all the predicates in Addlist to S1.\nFetch one predicate from S0, denoted as P(x1,x2,\u2026,xn).\n$(xj,xk,\u2026,xm) \u00d8P(x1,x2,\u2026,xn)\u00ceS1 ?\nOr $(xj,xk,\u2026,xm) \n\u00d8P(x1,x2,\u2026,xn)\u00aeR1(X)\u00aeR2(X)\u00ae\u2026\u00aeRn(X)\u00aeQ(x1,x2,\u2026,\nxn) \u00d9 Q(x1,x2,\u2026,xn)\u00ceS1 ?\nOr $(xj,xk,\u2026,xm) Q(x1,x2,\u2026,xn)\u00ceS1 \u00d9 \nQ(x1,\u2026)\u00aeQ1(X)\u00ae\u2026\u00aeQn(X)\u00ae\u00d8P(x1,\u2026) ?\nEnd\nN\no\nAre there any Predicates in \nS0?\nN\no\nAll of service is executed?\nY\nes\nNormal\nNo Reset Addlist, Deletelist.\nEnd\nStart\nYes\nYes\nInput satisfy \nPrecondition ?\nType 1 \nConflict\nEnd\nYes\nNo\nType 2 \nConflict\n Fig.1. an overview of the detection process \nStep 3. This is the first key step in the detection process \nas it builds the service state information and prepares the \nextracted data and obtained rules for the detection phase. In \nmore detail, we require two state pools, a \n                  and a                 . The former \ndenotes the state before the execution of the current service. \nThe latter contains information of the state after executing \nthe service. Before the service is executed, Preconditions and \ninput data from the SOAP request message generate facts \n(predicates whose values are definitely true); these are put \ninto the                  . We also maintain two lists, \ncalled         and            for storing the new predicates \nduring the execution process of the service. The new \npredicates whose values are definitely true are put into \nAddlist, the predicates whose values change from true to \nfalse are put into           .              is used to \ngenerate FI rules. After the service is executed, FI rules \naffect the service state and the state is changed according to \nEffects and the output data from the SOAP response \nmessage. In particular, we delete each predicate that occurs \nin both the            and the                   from \nthe latter. Then all remaining predicates from the \n                  and all the predicates from the         \nare added to the                 . The two state pools now \nrepresent two states during the execution process of the \nservice composition which will be evaluated in step 4.   \nStep 4. In this step we determine whether a Web service \nfeature interaction occurs. There are two cases that can lead \nto feature interaction (the two types of interaction mentioned \nearlier). One is that the                   doesn\u2019t satisfy \nthe               of the current service. The other is that \nthere is a conflict between two atomic predicates in the \n                  and                 . Using the \nKnowledge Base and the Inference Engine, we identify \nwhether either of the two cases will occur. \nStep 5. In this step information on newly detected \ninteractions is recorded in the Interaction Information Base, \nand the events are recorded to the log. This data helps with \nfuture detection. \nStep 6. If an interaction is detected, the conflict resolver \nwill be queried to provide a solution. This step will lead to \ntransmitting progress information to the workflow execution \nengine and allow for the processing of the workflow to \ncontinue. \nB. Critical Processes \nIn our method, some information will be extracted from \nweb services during their execution. Combining every OWL-\nS file of every service with parameters coming from SOAP \nmessages, which are including SOAP request and SOAP \nresponse messages, we can obtain the predicates that make \nup the Prolog file. The detail of process is presented as \nfollows:  \nDuring the execution of a composite web service, the \nsystem extracts the information from the execution context to \ndetect the two types of feature interaction at runtime.  \nFirstly, we add predicates in the Prolog file from \nprecondition with the instantiation of parameters from the \nSOAP request message; If the current web service to be \nexecuted is not the first one, we should query the predicates \nas goal to find whether there is an invalidation of \npreconditions before the current service execution; this \ninvalidation is the first type of feature interaction. \nSecondly, we also add predicates in the query Prolog file \nfrom the effect with the instantiation of the parameters from \nthe SOAP response message after one of the web services \nfinishes its execution. In this step, we will add the predicates \nof the head part of effect rules but delete the predicates of the \nbody part of the effect rules which exist in the Prolog file as \nout-of-date state. Thirdly, using Prolog querying, we can \ndetect type 1 conflicts by solving a goal. Considering the \ndetection of this type of feature interaction, we need to \nextract rules from SWRL and parts of OWL-S files \nautomatically, but also require some common knowledge \nrules which will have been added by experts to reason about \nconflicts. If a conflict is detected, a solution will be found to \nresolve this type of feature interaction; if there is no conflict, \nwe will update the Prolog file by merging the query Prolog \nfile with the composite service execution context. \nIV. PROTOTYPE IMPLEMENTATION AND CASE STUDY  \nIn this section we present the implementation of our \nmethod and the case study will be given. \nA. The implementation \nWe have implemented a prototype system as proof of \nconcept. To focus on the key issue, we assume that we can \nobtain the OWL-S document with SWRL of the services, \nand that we can intercept the request and response SOAP \nmessages of these services during their execution. The \nprototype is written in Java with Eclipse development \nenvironment, and uses Prolog (through the SWI-prolog plug-\nin) for reasoning. \nB. The Real world Commercial Scenario \nWe will illustrate our method through a concrete e-\ncommerce example: online shopping. The scenario involves \ntwo roles: (1) A Customer who wants to buy products online \nand provides the basic information about products and some \nadditional personal information. (2) Service providers \nproviding services for online shopping in five categories, \nwhich are sales platform, shops, banks, payment \nintermediation and express logistics. The sales platform \nservices manage the deal between shop and customer, \nkeeping the state of the transaction and support credit \nassessment. Shop services provide all kinds of products and \nmake a deal with customers. Banks and payment \nintermediation services all are payment organizations, with \npayment intermediation services managing and coordinating \npayments among multilateral participants. Express logistics \nservices provide delivery. \n \nThe customers\u2019 and service providers\u2019 operations can be \ncontrolled and coordinated by an intelligent agent, which \nimplements services composition and services execution. \nSupposing that a customer wants to buy a digital camera \nonline and has several requirements which include the brand \nand model (Canon IXUS85), the price (lower than 1400\uffe5), \nand the place of delivery (economic development zone of \nQingdao). Many feasible plans can be found through service \ncomposition based on these conditions and the available \nservices. An example of services composition plans is shown \nin Fig. 2. There are six plans satisfying the customer\u2019s \nrequirements and the second plan marked by bold lines is \noptimal and hence the default execution plan.  \nstart end\n\u2026\u2026\nTaobao\neBay\nAmazon\nDangDang\nShop_1\nShop_4\nShop_3\nShop_2\nShop_5\nShop_7\nShop_6\n\u2026\u2026\n\u2026\u2026\n\u2026\u2026\nBank_ICB\nC\nBank_CCB\nBank_ABC\nBank_CM\nB\nBank_BOC\nAlipay\nPaypal\n\u2026\u2026\n\u2026\u2026\n\u2026\u2026\n\u2026\u2026\nEMS\nExpress_STO\nExpress_YT\nO\nExpress_ZJS\n\u2026\u2026\n\u2026\u2026\nsales \nplatform \nshops \nexpress \nlogistics \nbanks\npayment \nintermediation \nComposition \nplans\ncurrent execution plan candidate  plan\nFig. 2. Example services compositions for the case study \n \nIn this example, the two types of feature interaction can \noccur in the following instantiations: there is insufficient \nmoney to get the last service Express Logistics Service and \nthere is a conflict of customer\u2019s personal address information \nthat is available in the Banking Service becoming available \nto the Express Logistics Service. These interactions belong \nto type 1 and type 2 respectively. Our prototype detects both \ninteractions based on rules extracted from the OWL-S file \nand the SOAP request message enhanced with some \ncommon knowledge. One step of feature interaction \ndetection process is shown in Fig. 3. And with the \nimplementation of Java and Prolog programming language, \nthe two screen-shots (Fig 4. and Fig 5.) present a snapshot of \nthe detection of the type 2 feature interaction. In particular \nthese shots show the execution of the service chain (at the \ntop) with the incoming and outgoing data (in the center part). \nMost crucially, the encircled statement at the bottom shows \nwhether a conflict has been detected or not during the \nexecution of the last step. \nV. RELATED WORK \nMethods to address the feature interaction problem \ninclude offline method and online methods. Offline methods \nare applied during design time or for web services \ncomposition time of services, online method are applied \nwhile the features or services are being executed. Offline \nmethods typically depend on the internal service logic \n(modeled at some level of abstraction). Online methods \neither use negotiation or feature interaction managers (FIM). \nNegotiation based approaches regard the components of the \nnetworks (user, terminal and value-added service, etc.) \n \n \nWS WS\nProlog file:\nconditionTextNotNull(  X  )\nsetResearchResult(X,Y)\nShop platform \nservice\nPreconditions:\nconditionTextNotNull(X):-...\nEffects:\nsetResearchResult(X,Y):-...1-1\nSoap_In Soap_Out\nShop service\n2-2\nQuery Prolog file :\nsetResearchResult(X,Y)\nServices execution\nConflicts detection\n3-3\n4-4\n5-5. Query Confilcts(type 1)\nFrom the service \nOWL-S file\n6-6\nQuery results\nFalse: conflict\nTrue or \nException(Predicate \nnot exist): no conflict\nOperation means:\n1- Add predicate in prolog file from precondition\n2- Instantiate parameters by soap require message\n3- Add predicate in query prolog file from effect with extract rules from \nswrl part\n4- Instantiate parameters by soap response message\n5- query type 1 conflicts (after a service execute)\n6- conflict (find solutions) or no conflict (update prolog file by merging \nquery prolog file)\n7- Add predicate in query prolog file from precondition\n8- query type 2 conflicts (before a service execute)\n9- add common knowledge by experts mannully\n10- update prolog file by merging rule file\nQuery Prolog file :\nisnumbercontain(X,Y)\nispaywaycontain(X,Y)\nhasenoughmoney(X,Y)\nPreconditions:\nisnumbercontain(X,Y) :- X<=Y.\nIspaywaycontain(X,Y):- ...\nhasenoughmoney(X,Y) :- X>=Y.\nEffects:\nIsreserve(X,Y):- ...\n7-7\nSoap_In\n8-3\n9-8. Query Confilcts(type 2)\nProlog file:\nconditionTextNotNull(  X  )\nsetResearchResult(X,Y)\nisnumbercontain(X,Y)\nispaywaycontain(X,Y)\nhasenoughmoney(X,Y)\n  isnumbercontain(X\uff0cY) :- X<=Y.\n  hasenoughmoney(X\uff0cY) :- X>=Y.\nSoap_Out\n10-6\nOrder- Operation 9-8: 9 means the step 9 is executing operation 8.\n\u2026\u2026\nRule file:\n  isnumbercontain(X\uff0cY) :-  Hasenoughmoney(X\uff0cY).\n  \u2026\nDomain experts\n11-9\n12-10\nMidInstitute \nservice\nEMS service\nProlog file:\nconditionTextNotNull(...).\nsetResearchResult(...,...).\nprivate(John).                          \nuserIdentitySet(John,private).\n     \nisnumbercontain(X\uff0cY) :- X<=Y.\nhasenoughmoney(X\uff0cY) :- X>=Y.\nuserIdentity(X,Y) :- serIdentitySet(X,Y).\nprivate(X) :- userIdentity(X,private).\nprivate(X) :- not( userIdentity(X,public) ).\nPreconditions:\nEffects:\nuserIdentitySet(John,public)\nQuery\nReasoning: public(John) && private(John)  \nConflict (type 1)\nAnother conflicts can be:  \n(money is not enough problem)\nConflict (type 2)\n \nFig.3. The Snapshot of feature interaction process with the real world scenario\nas different intelligent entities and detect and resolve FI by \nexchanging intentions of those entities.  The FIM method \nadds a FIM into the network to detect and resolve FI. A more \ndetailed overview of FI methods can be found in [3].  \n \n \nFig. 4. The 1\nst\n picture of Series of snapshot of detection \n \n \nFig. 5. The 2\nnd\n picture of Series of snapshot of detection \n \nIn the existing work on feature interaction in Web \nservices some investigations have been conducted into \noffline methods and have yielded some results. Weiss et al. \n[6] presents a goal-oriented approach for detecting feature \ninteractions among Web services. The authors also \ndistinguish explicitly between functional and non-functional \nfeature interactions. In [7] this is extended with emphasis on \nthe classification of feature interactions. Moreover, they \nanalyze different types of potential WSFI in a scenario.  \nTurner [8] extends the feature notation CRESS to \ngraphically and formally describe Web services and service \ncomposition. He discusses WSFI detection using CRESS and \na scenario notation called MUSTARD.  \nZhang et al. [9] propose a Petri net-based method to \ndetect race conditions, which can be seen as one type of \nfunctional feature interactions. Moreover, in [4] they propose \na multi-layer WSFI detection system.  \nSuch offline methods require insight into the internal \nservice logic, details of which might not be publically \navailable; furthermore they require knowledge of all \navailable services and cannot consider interactions that occur \nbecause of run-time data. We have shown that some types of \ninteraction cannot be caught by offline methods. Moreover, \nin the Web service area the number of available services is \nvery large, growing rapidly and services are offered by a \nlarge number of providers (a very open market), which does \nnot lend itself to offline methods.  \nThere is much research about the verification of web \nservices properties through runtime monitoring [16-22]. \nMost of them [17-21] focus on the verification of properties \nof web services such as safety and liveness. While others \n[22-23] focus on monitoring exceptions at runtime.  They \ndefine the possible erroneous states.  In this paper, we focus \non the conflicts of the side effects among the different web \nservices used together in one business process and leading to \nemergent behavior despite each service running to full users\u2019 \nsatisfaction in isolation. \nIn our previous work, we have considered the web \nservice feature interaction detection based on situation \ncalculus [15]. In this paper, we have proposed a runtime \nfeature interaction detection method, ESTRIPS, which is an \nextended STRIPS method using reasoning with OWL-S and \nSWRL to detect FI in the Web services area to address above \nmentioned issues. Our method analyses the semantics of the \ninteracting messages rather than utilizing the internal \ninformation of service logic in atomic services. The \nnecessary details are obtained from OWL-S service \ndescriptions and observed SOAP messages. \nVI. DISCUSSION \nAn effective method for detecting Web service feature \ninteraction is capable of dynamically detecting all kinds of \nspecific known and unknown feature interactions, in a \nuniform manner. We presented a logical reasoning based \ndetection method. The method overcomes the drawbacks of \nstatic detection methods mostly employed in current research \nand the limitation of classification-based approaches [6] \nwhich only allow for detecting interactions that are known a-\npriori. Our approach has the following beneficial properties: \n  1) The method presented is a runtime method for WSFI \ndetection. Being a runtime method it has several advantages, \none of which is that it works in an environment where new \nservices might arrive and where there is no real potential for \nstatically checking all possible combinations. So, this \nmethod will also work if the executed services in the \nworkflow are dynamically identified and bound to. The \nactual service execution data is being used in the expression \nof service states.  \n  2) The presented method is especially effective for \nfeature interactions based on instance data of the effects, \nwhich could include interactions related to security and \nprivacy concerns. Such feature interactions cannot be \ndetected by static methods as the occurrence of the \ninteraction depends on instance data. As our method detects \ninteractions by finding inconsistencies in the service state, \ndata sensitive interactions can easily be detected as long as \nthe service profile specifies the preconditions and effects of \nan individual service correctly. \n  3) The method avoids full exploration of large state \nspaces as it only considers services that are actually invoked \ntogether rather than all possible combinations of services and \nfurthermore only looks at inconsistency of the service state. \nIn that way, independent of the number of atomic services \ninvolved in the service composition, we only need to \nconsider two states: one state before an atomic service is \nbeing executed and the state after that execution. The \nrespective state pools might contain a large number of terms \nfor each instance, but that data would need to be considered \nanyhow; however the state pools are renewed after each \ndetection step, meaning that the information considered is \nlocal to the services of current interest.  \n     As far as feature interaction is concerned there is a \ngeneral perception that approaches in feature interaction \nattempt to statically determine the absence of a feature \ninteraction. However, as shown in [3], the field of feature \ninteraction research is quite wide and there exist run-time \napproaches that attempt to deal with the problem by \ndetecting interactions and resolving them during system \nexecution time. These approaches have inspired this work, as \nthey are particularly adept at dealing with large numbers of \nservices from different providers that might encounter each \nother for the first time when the system is running. \nVII. CONCLUSION AND FUTURE WORK \nWith the rapid development of Web services and \ngrowing use of composite services Web service feature \ninteraction will become a growing obstacle. While some \nresearchers have started to address feature interaction in the \nweb services domain, results are still very limited. By using \nthe semantics of Web services and inspiration from logical \nreasoning, we proposed a novel framework and method to \ndetect and allow for resolution of feature interactions in web \nservices at execution time.  \nIn future work, we intend to investigate how to \ndecentralize the detection system. We also will test our \nsystem against more complex case studies to better evaluate \nefficiency and accuracy of the method. As this paper focused \nmostly on the feasibility of the approach in terms of \ndetecting interactions, we are planning a more detailed \nevaluation of performance \u2013 clearly an important \nconsideration for a run-time approach. \nREFERENCES \n[1] Blair, L., Blair, G., Pang, J., and Efstratiou, C. Feature Interaction \nOutside a Telecom Domain. In: Proceedings of the Workshop on \nFeature Interactions in Composed Systems (ECOOP'2001) 15-20, \n2001. \n[2] Amyot, D. and Logrippo, L. Guest Editorial: Directions in Feature \nInteraction Research. In: Computer Networks, Special Issue on \nFeature Interactions in Emerging Application Domains 45 5, 563-567, \n2004. \n[3] Calder, M., Kolberg, M., Magill, E.H. and Reiff-Marganiec, S. \nFeature interaction: a critical review and considered forecast. \nInternational Journal of Computer Networks. 41: pp. 115-141, 2003. \n[4] Zhang, J., Yang, F., and Su, S. Detecting the Web Services Feature \nInteractions. In K. Aberer et al. (Eds.): WISE 2006, LNCS 4255, pp. \n169-174, 2006. \n[5] Magill, E.H.. Feature Interactions: Old Hat or Deadly New Menace? \nIn: K. Turner, E. Magill and D. Marples (Eds.), Service Provision: \nTechnologies for Next Generation Communications, Wiley, pp. 235-\n252, 2004. \n[6] Weiss, M. and Esfandiari, B. On Feature Interactions among Web \nServices. In: Proceedings of the International Conference on Web \nServices (ICWS), IEEE, 2004. \n[7] Weiss, M., Esfandiari, B., and Luo, Y. Towards a Classification of \nWeb Service Feature Interactions, In: Proceedings of the Third \nInternational Conference on Service Oriented Computing (ICSOC05), \nAmsterdam, Netherlands , 2005. \n[8] Turner, K.J. Formalising Web Services. In: Proceeding of Formal \nTechniques for Networked and Distributed Systems (FORTE XVIII), \nLNCS 3731, 473-488, 2005. \n[9] Zhang, J., Su, S., and Yang, F. Detecting Race Conditions in Web \nServices, In Proceedings of the International Conference on Internet \nand Web Applications and Services (ICIW'06), 2006. \n[10] Zhang, J., Yang, F., Shuang, K., and Su, S. Immune-Inspired Online \nMethod for Service Interactions Detection. In Jan van Leeuwen et al. \n(Eds.): SOFSEM 2007, LNCS 4362, pp. 808-818, 2007. \n[11] OWL-S: Semantic Markup for Web Services, \nhttp:\/\/www.w3.org\/Submission\/OWL-S\/. \n[12] Horrocks, I., Patel-Schneider, P.F., Bechhofer, S. and Tsarkov, D.: \nOWL rules: A proposal and prototype implementation. J. of Web \nSemantics 3 (2005), pp.23-40. \n[13] Redavid, D., Iannone, L., Payne, T. and Semeraro, G. OWL-S Atomic \nServices Composition with SWRL Rules. Lecture Notes in Computer \nScience: Foundations of Intelligent Systems, vol. 4994, pp. 605-611, \n2008.  \n[14] MINDSWAP: Maryland Information and Network Dynamics Lab \nSemantic Web Agents Project, OWL-S API. \nhttp:\/\/www.mindswap.org\/2004\/owl-s\/api\/. \n[15] Xu, J., Yu W., Chen K., Reiff-Marganiec, S., Web Service Feature \nInteraction Detection based on Situation Calculus, In: Service\u2019 2010. \n[16] Turner, K.J., Reiff-Marganiec, S., Blair, L., Pang, J., Gray, T., Perry, \nP. and Ireland, J. Policy Support for Call Control. Computer \nStandards and Interfaces, vol 28\/6 pp 635-649, 2006. \n[17] Carlo  Ghezzi, Sam Guinea, Run-Time Monitoring in Service-\nOriented Architectures. In: Test and Analysis of Web Services 2007 , \npp. 237-264. \n[18] Luciano Baresi, Domenico Bianculli, Sam Guinea, Paola Spoletini, \nKeep It Small, Keep It Real: Efficient Run-Time Verification of Web \nService Compositions. In: FMOODS\/FORTE 2009, pp.26-40. \n[19] Luciano Baresi, Sam Guinea, Marco Piistore, Michele Trainotti, \nDynamo+Astro: An Integrated Approach for BPEL Monitoring. \nICWS 2009, pp. 230-237. \n[20] Luciano Baresi, Sam Guinea, Raman Kazhamiakin, Marco Pistore, \nAn Integrated Approach for the Run-Time Monitoring of BPEL \nOrchestrations. ServiceWare 2008, pp.1-12. \n[21] Luciano Baresi, Sam Guinea, Pierluigi Plebani, Policies and Aspects \nfor the Supervision of BPEL Processes. CAiSE 2007,  pp.340-354. \n[22]  Katia Sycara, Roman Vaculin, Process Mediation, Execution \nMonitoring and Recovery for Semantic Web Services. IEEE Data \nEngineering Bulletin 31(3), pp.13-17, 2008. \n[23] Roman Vaculin, Katia Sycara, Specify and Monitoring Composite \nEvents for Semantic Web Services, in Web Services, 2007. ECOWS \n'07. Fifth European Conference on. 2007. \n"}