{"doi":"10.1016\/j.jcss.2011.05.010","coreId":"219831","oai":"oai:eprints.lse.ac.uk:36892","identifiers":["oai:eprints.lse.ac.uk:36892","10.1016\/j.jcss.2011.05.010"],"title":"A universally fastest algorithm for Max 2-Sat, Max 2-CSP, and everything in between","authors":["Gaspers, Serge","Sorkin, Gregory B."],"enrichments":{"references":[],"documentType":{"type":null}},"contributors":[],"datePublished":"2011","abstract":"In this paper we introduce \"hybrid\" Max 2-CSP formulas consisting of \"simple clauses\", namely conjunctions and disjunctions of pairs of variables, and general 2-variable clauses, which can be any integer-valued functions of pairs of boolean variables. This allows an algorithm to use both efficient reductions specific to AND and OR clauses, and other powerful reductions that require the general CSP setting. We use new reductions introduced here, and recent reductions such as \"clause-learning\" and \"2-reductions\" generalized to our setting's mixture of simple and general clauses. We parametrize a hybrid instance by the fraction p of non-simple clauses. We give an exact, exponential-time but polynomial-space algorithm that is the fastest known for p = 0, which includes the well-studied Max 2-Sat problem but also instances with arbitrary mixtures of AND and OR clauses; for an m-clause instance it runs in time O{star operator} (2m \/ 6.321). The same algorithm is tied for fastest for general Max 2-CSP (p = 1), with running time O{star operator} (2m \/ 5.263). The algorithm is the only one to treat mixtures of AND, OR, and general integer-valued clauses more efficiently than the general case, with intermediate running time bounds depending on the value of p. Since even a pure Max 2-Sat input instance may be transformed to a hybrid instance in the course of solving it, the algorithm's efficiency and generality go hand in hand. Our algorithm analysis and optimization use the familiar measure-and-conquer approach, but in a variation resulting in mathematical programs that are convex rather than quasi-convex, and can be solved efficiently and with a certificate of optimality. We produce a family of running-time upper-bound formulas, each optimized for instances with a particular value of p but valid for all instances","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Academic Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lse.ac.uk:36892<\/identifier><datestamp>\n      2012-06-06T17:16:50Z<\/datestamp><setSpec>\n      74797065733D43454E54524553:4C53455F52435F4D616E5F536369<\/setSpec><setSpec>\n      74797065733D4445505453:4C53452D4D414E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.lse.ac.uk\/36892\/<\/dc:relation><dc:title>\n        A universally fastest algorithm for Max 2-Sat, Max 2-CSP, and everything in between<\/dc:title><dc:creator>\n        Gaspers, Serge<\/dc:creator><dc:creator>\n        Sorkin, Gregory B.<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        In this paper we introduce \"hybrid\" Max 2-CSP formulas consisting of \"simple clauses\", namely conjunctions and disjunctions of pairs of variables, and general 2-variable clauses, which can be any integer-valued functions of pairs of boolean variables. This allows an algorithm to use both efficient reductions specific to AND and OR clauses, and other powerful reductions that require the general CSP setting. We use new reductions introduced here, and recent reductions such as \"clause-learning\" and \"2-reductions\" generalized to our setting's mixture of simple and general clauses. We parametrize a hybrid instance by the fraction p of non-simple clauses. We give an exact, exponential-time but polynomial-space algorithm that is the fastest known for p = 0, which includes the well-studied Max 2-Sat problem but also instances with arbitrary mixtures of AND and OR clauses; for an m-clause instance it runs in time O{star operator} (2m \/ 6.321). The same algorithm is tied for fastest for general Max 2-CSP (p = 1), with running time O{star operator} (2m \/ 5.263). The algorithm is the only one to treat mixtures of AND, OR, and general integer-valued clauses more efficiently than the general case, with intermediate running time bounds depending on the value of p. Since even a pure Max 2-Sat input instance may be transformed to a hybrid instance in the course of solving it, the algorithm's efficiency and generality go hand in hand. Our algorithm analysis and optimization use the familiar measure-and-conquer approach, but in a variation resulting in mathematical programs that are convex rather than quasi-convex, and can be solved efficiently and with a certificate of optimality. We produce a family of running-time upper-bound formulas, each optimized for instances with a particular value of p but valid for all instances.<\/dc:description><dc:publisher>\n        Academic Press<\/dc:publisher><dc:date>\n        2011<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n          Gaspers, Serge and Sorkin, Gregory B.  (2011) A universally fastest algorithm for Max 2-Sat, Max 2-CSP, and everything in between.  Journal of Computer and System Sciences, 78 (1).  pp. 305-335.  ISSN 0022-0000     <\/dc:identifier><dc:relation>\n        http:\/\/www.elsevier.com\/wps\/find\/journaldescription.cws_home\/622867\/description<\/dc:relation><dc:relation>\n        10.1016\/j.jcss.2011.05.010<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":null,"relations":["http:\/\/eprints.lse.ac.uk\/36892\/","http:\/\/www.elsevier.com\/wps\/find\/journaldescription.cws_home\/622867\/description","10.1016\/j.jcss.2011.05.010"],"year":2011,"topics":["QA75 Electronic computers. Computer science"],"subject":["Article","PeerReviewed"],"fullText":null}