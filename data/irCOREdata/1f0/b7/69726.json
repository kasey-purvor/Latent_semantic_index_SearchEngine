{"doi":"10.1109\/CCNC.2006.1593189","coreId":"69726","oai":"oai:eprints.lancs.ac.uk:22940","identifiers":["oai:eprints.lancs.ac.uk:22940","10.1109\/CCNC.2006.1593189"],"title":"Converging computer and home entertainment devices in the consumer media network environment.","authors":["Gilbertson, Paul","Edwards, Reuben","Coulton, Paul"],"enrichments":{"references":[{"id":1021317,"title":"High-Quality Media Distribution in the Digital Home\u201d,","authors":[],"date":"2002","doi":null,"raw":null,"cites":null},{"id":1021272,"title":"Home Media Center and Media Clients for Multi-room Audio and Video Applications\u201d,","authors":[],"date":"2005","doi":null,"raw":null,"cites":null},{"id":1021556,"title":"Microsoft Windows XP: Fast and Easy:","authors":[],"date":"2003","doi":null,"raw":null,"cites":null},{"id":1021837,"title":"Microsoft Windows XP: Fast and Easy: Media Center Edition, Course Technology,","authors":[],"date":"2003","doi":null,"raw":null,"cites":null}],"documentType":{"type":null}},"contributors":[],"datePublished":"2006-01","abstract":"Devices that enable video and audio media stored on a home computer to be viewed on a television located elsewhere in the house have achieved only marginal penetration into the home market. Interoperability between devices and software systems is seen as a barrier to broader adoption. Three main areas of concern: media library index sharing; network protocols; and media encoding were identified whilst developing server software to allow a third party device to access Microsoft Windows XP Media Center Edition functionality. This paper introduces a generic software infrastructure to facilitate multiple different devices to access media server functionality. The infrastructure comprises of a driver based interface to multimedia devices, a DirectShow based transcoder, and an interface to media library index. This infrastructure tackled successfully the identified issues","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:22940<\/identifier><datestamp>\n      2018-01-24T02:08:53Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413736<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Converging computer and home entertainment devices in the consumer media network environment.<\/dc:title><dc:creator>\n        Gilbertson, Paul<\/dc:creator><dc:creator>\n        Edwards, Reuben<\/dc:creator><dc:creator>\n        Coulton, Paul<\/dc:creator><dc:subject>\n        QA76 Computer software<\/dc:subject><dc:description>\n        Devices that enable video and audio media stored on a home computer to be viewed on a television located elsewhere in the house have achieved only marginal penetration into the home market. Interoperability between devices and software systems is seen as a barrier to broader adoption. Three main areas of concern: media library index sharing; network protocols; and media encoding were identified whilst developing server software to allow a third party device to access Microsoft Windows XP Media Center Edition functionality. This paper introduces a generic software infrastructure to facilitate multiple different devices to access media server functionality. The infrastructure comprises of a driver based interface to multimedia devices, a DirectShow based transcoder, and an interface to media library index. This infrastructure tackled successfully the identified issues.<\/dc:description><dc:publisher>\n        IEEE<\/dc:publisher><dc:date>\n        2006-01<\/dc:date><dc:type>\n        Contribution in Book\/Report\/Proceedings<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:relation>\n        http:\/\/dx.doi.org\/10.1109\/CCNC.2006.1593189<\/dc:relation><dc:identifier>\n        Gilbertson, Paul and Edwards, Reuben and Coulton, Paul (2006) Converging computer and home entertainment devices in the consumer media network environment. In: Consumer Communications and Networking Conference, 2006. CCNC 2006. 3rd IEEE. IEEE, pp. 1003-1007. ISBN 1-4244-0085-6<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/22940\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1109\/CCNC.2006.1593189","http:\/\/eprints.lancs.ac.uk\/22940\/"],"year":2006,"topics":["QA76 Computer software"],"subject":["Contribution in Book\/Report\/Proceedings","NonPeerReviewed"],"fullText":"Converging computer and home entertainment devices in the consumer media \nnetwork environment \n \n \nPaul Gilbertson, Reuben Edwards, Paul Coulton \nDepartment of Communications Systems, Lancaster University \np.gilbertson@lancs.ac.uk, r.edwards@lancs.ac.uk, p.coulton@lancs.ac.uk \n \n \nAbstract \n \nDevices that enable video and audio media stored \non a home computer to be viewed on a television \nlocated elsewhere in the house have achieved only \nmarginal penetration into the home market. \nInteroperability between devices and software systems \nis seen as a barrier to broader adoption. Three main \nareas of concern: media library index sharing; \nnetwork protocols; and media encoding were identified \nwhilst developing server software to allow a third \nparty device to access Microsoft Windows XP Media \nCenter Edition functionality. This paper introduces a \ngeneric software infrastructure to facilitate multiple \ndifferent devices to access media server functionality. \nThe infrastructure comprises of a driver based \ninterface to multimedia devices, a DirectShow based \ntranscoder, and an interface to media library index. \nThis infrastructure tackled successfully the identified \nissues \n \n1. Introduction \n \nOver the past 5 years, a number of manufacturers \nhave produced devices that enable video and audio \nmedia, stored on a home computer, to be viewed on a \ntelevision located elsewhere in the house [0]. These \nnetworked multimedia devices have had varying levels \nof success in penetrating the home market. \nInteroperability, where consumers [1] expect media \nstored on one device to be accessible seamlessly and \nintuitively from any other networked device, is the \nmain issue blocking the penetration of consumer \nnetworked multimedia devices into the domestic \nmarket. When this issue is not met, the technology is \noften seen by the consumer as being too complex or \ntoo difficult and results in slow down in the acceptance \nof this technology. \nThis paper investigates the interoperability issues \nencountered through a specific scenario of enabling \naccess to Microsoft Windows XP Media Center \nEdition (MCE) 2005 content from a third-party \nmanufacturer\u2019s device to further illustrate the general \nissues. Three main issues were encountered which lead \nto the development of a software infrastructure to \nallow interaction between computer based media \nstorage and recording and consumer networked \ndevices.  \nIn section 2, we discuss the issues that must be \nconsidered when connecting consumer media devices, \nwith specific reference to the use of Windows Media \nCentre Edition (MCE) [2] as the consumer media \nnetwork controller, and a KiSS Technologies DVD [3] \nplayer as the media network client.  In section 3 we \ndiscuss the problem of maintaining a media library that \ncan be interpreted by each of the media network \nmachines, and in section 4, the problem of transferring \nmedia content to thin client devices which generally \nhave a limited range of media compatibility.  In section \n5, we discuss the choices a system designer must make \nwhen deciding on media formats to be used within the \nconsumer media network and look at transcoder design \nwith Microsoft\u2019s DirectShow. Legal issues are \nexamined in section 6, before some general \nconclusions are drawn in section 7. \n \n2. Interoperability Issues \n \nThere are three major areas of difficulty in allowing \nconsumer devices to interact with computer based \nmedia storage. \nFirstly, the desired media needs to be selected from \na library of available media. Secondly, the device \nneeds to receive the media data. Thirdly, this media \ndata needs to be encoded in a fashion that the device \nunderstands. \nOur example scenario which allows a KiSS \nTechnologies DP-500 network-enabled DVD player to \naccess Microsoft Windows XP Media Center Edition \n1003\nThis full text paper was peer reviewed at the direction of IEEE Communications Society subject matter experts for publication in the IEEE CCNC 2006 proceedings. \n1-4244-0086-4\/05\/$20.00 \u00a92005 IEEE.\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 11:17 from IEEE Xplore.  Restrictions apply.\nTranscoder\nMedia Library\nCore Device DriverMedia File Device\nMedia LibraryMedia Library\n \n Figure 1. Data-flow within the proposed software infrastructure \n \n2005 functionality encounters these issues. By \nenabling access to the media store, and in particular \nRecorded TV, we have extended the functionality of \nboth the Media Center server and KiSS device to \ninclude the watching of recorded television throughout \nthe home. \nMCE utilizes a library system for [4] the selection \nof media for playback; a protocol for allowing \nspecially designed Media Center Extenders to access \nMCE functionality; and a unique codec (DVR-MS) for \nthe storage of recorded TV.  All three of these issues \nneeded to be overcome when the software was \ndeveloped. \nMCE supports the transfer of media data to \nspecially designed media devices, called Media Center \nExtenders. These Extenders support most of the \nfunctionality of MCE, and are required to present an \ninterface to the end user that is similar to the interface \nprovided by the MCE software. Whilst this solution \ncould provide a way forward, it fails to address the \nissue of consumers who already own existing devices, \nor future devices with smaller functionality sets. Such \ndevices often are significantly cheaper than their MCE \ncounterparts, and lower cost should drive home \nadoption. \nAs MCE itself utilizes Microsoft\u2019s .NET and \nexports a number of APIs in that environment, our \nexample system is implemented in C#. The design \ndiscussed below reflects this .NET bias, but can be \neasily ported to other environments. The diagram \nshown in Figure 1 illustrates the structure of our \nproposed generic software infrastructure for seamlessly \nsupporting multiple third party devices using a media \nstorage server. \n \n3. Media Library Access \n \nTo enable the selection of media files, the consumer \ndevices first need to access a list of available media \nstored on the server. Currently, each device \nmanufacturer provides its own software for installation \non the computer intended to act as a server. Inevitably \neach manufacturer\u2019s software contains its own library \nindex that does not synchronize with other \nmanufacturers\u2019 software or other library indexes \nalready available on the computer. This leads to the \nundesirable situation of media being available to one \nsystem but not to another without manual intervention. \nThe library facilities used need to be either in a \ncommon centralized format, or have the property of \nbeing able to easily and automatically synchronize \nbetween themselves. Currently this does not happen \nbetween software installed on the same machine, with \neach program trying to take over the duties of playing \nall media without loading existing library data. Given \nthis level of incompatibility, remote devices have little \nchance of knowing the full list of media stored on a \nserver. \nMCE uses the Windows Media Player 10 library \nfunctionality for its media index. The Library class \nimplements a simple request to Windows Media Player \n10\u2019s exposed API to retrieve a list of available media. \nThis media set is sorted into a tree of music and video \nfiles indexed by varying methodologies.  \nThe dataset is exposed to the device driver via the \nIServer interface. This ensures that all media available \nwithin MCE is available to the device. \nWith the addition further classes to interact with the \nlibraries of other systems, like WinAmp or RealMedia, \n1004\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 11:17 from IEEE Xplore.  Restrictions apply.\n  \nDeviceDriver\nIDevice\nSystem Core\nIServer\n \nFigure 2. LongCast to Device Driver Interface \n \nand classes to facilitate the automatic location of media \nfiles a full list of available media can be provided. \nDuplicate entries can be easily removed by filename \nmatching. \n \n4. Media Data Transfer \n \nThe media dataset needs to be transferred from the \nhost computer to the consumer device in a method that \nthe device understands. Most device manufacturers use \ntheir own protocol for streaming the media over the \nnetwork. These protocols are incompatible and closed, \nand they are the main reason that manufacturers \nprovide their own server software. \nInstead of developing an open protocol for device \nmanufacturers to use (which is effectively what \nMicrosoft has done with its Media Center Extender \nscheme), it is easier to develop a device driver system \nto support different media transfer protocols and levels \nof functionality. Each Device Driver contains three \ncomponents that implement the interface between the \nsystem and the device. The DeviceFactory component \nreceives messages that inform it when the driver is \nloaded and unloaded, so the driver can perform \ninitialization routines, and start the DeviceServer. \nTypically the DeviceServer consists of a TCP or UDP \nsocket in \u2018listen\u2019 mode waiting for incoming \nconnections from the device. When such a connection \nis received it is passed to the DeviceClient for \nprocessing.  \nFigure 2 shows the interactions between the system \ncore and device driver. The system core exposes \nfunctionality for the DeviceClient class to utilize via \nthe IServer interface described in Figure 3. \n \n+GetMajorVersion() : int\n+GetMinorVersion() : int\n+GetNewThread(out thread) : bool\n+GetMediaLibrary(out media) : bool\n+GetMediaFile(in filename, out stream) : bool\n+LogMessage(in message) : bool\n\u00abinterface\u00bb\nIServer\n \nFigure 3. UML Diagram for Server to Device \nDriver Interface \n \nThe core loads, unloads, and enumerates available \ndevice drivers via the IDevice interface implemented \nwith the DeviceFactory component and described in \nFigure 4. \n \n+GetDriverName() : string\n+GetDriverMajorVersion() : int\n+GetDriverMinorVersion() : int\n+GetSupportedCodecs(out codecArray) : bool\n+StartDriver(in server : IServer) : bool\n+StopDriver() : bool\n\u00abinterface\u00bb\nIDevice\n \nFigure 4. UML Diagram for Device Driver to \nServer Interface \n \n5. Media Data Format \n \nMedia that is stored on the serving computer is \npotentially encoded in a wide variety formats. Most \ndevices are only able to play media files encoded in a \nsmall subset of formats. This is a problem especially \nfor video data, where a wide variety of competing \ncodecs exist without one dominating standard. With \nthe recent eruption of DRM-based audio codecs that \nare reducing the market share of MP3, this problem \ncan only be expected to get worse for music files as \nwell. \nNo device is able to render every form of audio and \nvideo encoding that currently exists. In addition new \nalgorithms, encoding methods, and storage systems are \nin development. DirectShow was developed by \nMicrosoft to combat these issues, allowing their \nmultimedia products, and third-party applications, to \nbe continually given new capabilities. \nMCE can play any media file that it has access to a \nDirectShow decoder for. MCE also records TV using \nthe DVR-MS format. The KiSS DP-500 device, like \nmost third party devices, only supports a subset of the \ntotal codecs available to MCE, and importantly, not the \nDVR-MS format. \n1005\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 11:17 from IEEE Xplore.  Restrictions apply.\n \nFigure 5. DirectShow graph for transcoding a DVR-MS file to MPEG2 \n \nThe transcoder leverages DirectShow\u2019s \nfunctionality to create a graph capable of transforming \nmedia from the source format to a destination format \nacceptable to the device. There are a number of \nchallenges involved in this process.  \nFirst, the destination format needs to be streamable. \nAs an example can be used a situation where the \ndestination format requires data to be read from the end \nof the stream during the early stages of playback. This \ndata would not be available until the entire stream has \nbeen transcoded. For a large video file this could take \nhours and creates a clearly unacceptable scenario. \nSecond, the system needs to be responsive. Most \nthird party devices wait at the most only a few seconds \nafter the request for a file for the resulting data to be \nreceived, and throw an error when the above occurs. \nThe transcoder must therefore be quick to initialize and \nbegin processing data. \nThird, the transcoder needs to be robust. The \nunderlying system needs to be able to cope with new \nmedia formats and unusual encoding methods found in \na large collection of media files. \nDirectShow is an API that contains two main \nconcepts. Firstly a DirectShow filter is a COM object \nthat exports preset interfaces that allow DirectShow to \ninterface with it. A filter falls into one of three \ncategories. Source filters represent data sources, either \nhardware, software, or raw data from a file. These \nprimarily have output pins only. Transform filters take \ndata in and perform certain tasks on that data before \npassing it further down the graph. These filters have \nboth input and output pins. Render filters take data in \nand display, save, or sink the data. They are the final \nstage of the graph and only have input pins. \nSecondly, a filter graph is a collection DirectShow \nfilters that are connected, output pin to input pin, to \nperform an operation. Many small multimedia tools are \nmerely wrappers around a DirectShow graph.  \nThe most innovative part of DirectShow is a feature \ncalled Intelligent Connect. Each pin on each filter \ncontains information on what types of data it either \nemits or can take. When an instruction is passed to  \n \nDirectShow to connect two pins, these data types are  \nchecked. If they are incompatible, DirectShow checks \nfor one or more intermediate transform filters that can \nprovide the necessary intermediate transformations. It \nthen adds these filters to the graph and connects them \nin the right order. \nFigure 5 shows a DirectShow graph detailing the \nmajor filters used in transcoding video. The first step is \nto decode the input file into uncompressed audio and \nvideo data. This is achieved using Intelligent Connect \nto insert the correct decoding filters. The audio data is \nthen passed through a MPEG Layer 3 encoder whilst \nvideo data is encoded using a MPEG-2 video encoder. \nBoth data streams are multiplexed using a MPEG-2 \nmultiplexer which outputs a MPEG-2 file stream. \nThe stream is pulled out of DirectShow and through \nthe server software by using the SampleGrabber filter \nand interface. This filter passes every data block passed \nto it through a callback interface. The stream is then \ndisposed of using a null render filter. \nMPEG-2 is chosen as the output data format as it is \nstreamable. Data from the DirectShow graph can be \nimmediately passed to the device. Issues still remain \nwith both startup time and problems with connecting \nfilters in a robust manner. \n \n6. Legal Issues \n \nThere are potential severe legal issues with the \nsoftware produced for the transcoder. The largest legal \nroadblock is the Inducing Copyright Infringement Act, \ncommonly referred to as the INDUCE Act. This piece \nof legislation, as proposed by Senators Hatch and \nOrrin, is currently passing through Congress. The very \nact of providing technology that could be used in \ncopyright infringement makes the provider equally \nliable to any infringement performed using the \ntechnology. This includes technology that has other \nlegitimate purposes. \nThe transcoder could, theoretically, be used for such \npurposes. These include transmitting live TV signal \nfrom a TV card, or DVD video data. \n \n1006\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 11:17 from IEEE Xplore.  Restrictions apply.\n7. Conclusions \n \nThis paper has considered the issues surrounding \nconsumer networked multimedia devices and their \nbarriers to widespread adoption in the home \nenvironment. We have discussed three areas of \ndifficulty for the designer: media discovery and library \nindexing, incompatible protocols, and translation from \nunsupported media data formats. \nThe proposed software infrastructure overcomes the \nfundamental problems of getting current and near-\nfuture third-party devices to interoperate seamlessly \nwith MCE or other media storage systems. Third-party \nmanufacturers would not be required to revise existing \ndesigns, or make significant changes to their product \nline up, as most difficulties can be solved within the \ndriver design.  \nDirectShow provides a firm base from which a \nversatile transcoder can be created. However, there are \nissues of available processing power to perform the \ndecoding and encoding steps without causing media \nperformance degradation and synchronization issues. \nLower end machines will not be able to handle the \nprocessing load, and will cause stutters and \nsynchronization issues. \nOverall the design successfully provides a firm \nbasis for the development of consumer media network \nintegration solutions. Broader applications may include \nthe support of handheld and mobile phone devices as \ndestinations for digital media, and for the transfer of \nmedia streams from TV cards or Camcorders to other \ncomputers. \nHowever, all the technological progress in \nintegration that could be gained from this system are \novershadowed by the possible legal problems. Whilst \nthe technology itself is not directly designed to infringe \non Copyright protections, it may be possible to subvert \nthe technology. \n \n8. Further Work \n \nThe current design presumes a single centralized \nmedia store. The future development and proliferation \nof TiVo-like devices may cause this assumption to be \ninvalid. A means of integrating remote media libraries \nand marshalling requests to multiple sources \nsimultaneously needs to be developed. \nThe transcoder needs more work to overcome \nstability issues. The number of possible combinations \nof encodings present in AVI files is large, and growing \nwith each new codec released. The transcoder needs to \nhandle problems better and more robustly. Speed and \nsynchronization issues will improve as computing \ntechnology continues to follow Moore\u2019s Law.  \nAdditionally, the current media dataset that is \nutilized by the core system and passed on to drivers \nshould support better querying for subsets of data \ninstead of only providing all the results in a pre-\ndesigned tree. Support for SQL queries, via an \nADO.NET interface in the specific case, is the next \nstage in development. \nFurther work on this area is hampered by legal \nissues. Some of these can be mitigated by transmitting \nthe data over the network in an encrypted fashion. \nInput types could also be limited during the transcoder \nsetup and thus stop more troublesome infringing \nactivities. \n \n \n8. References \n \n[0] G. Jun, \u201cHome Media Center and Media Clients for \nMulti-room Audio and Video Applications\u201d, IEEE \nConsumer Communications and Networking \nConference 2005, IEEE, 3RD January 2005 \n \n[1] Y. Rasheed, J. Ritchie, \u201cHigh-Quality Media \nDistribution in the Digital Home\u201d, Intel Technology \nJournal Vol. 6, Issue 4, 2002, Intel, pp 17 - 29 \n \n[2] Eric Grebler, Microsoft Windows XP: Fast and \nEasy: Media Center Edition, Course Technology, June \n26th 2003   \n \n[3] KiSS Technologies, KiSS DP-500 Product \nBrochure, KiSS Technologies A\/G, Link: \nhttp:\/\/www.kiss-technology.com\/files\/brochures\/DP-\n500_eng.pdf \n \n[4] Eric Grebler, Microsoft Windows XP: Fast and \nEasy: Media Center Edition, Course Technology, June \n26th 2003   \n \n \n1007\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 11:17 from IEEE Xplore.  Restrictions apply.\n"}