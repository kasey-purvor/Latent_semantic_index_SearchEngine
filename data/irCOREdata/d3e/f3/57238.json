{"doi":"10.1145\/1029997.1030007","coreId":"57238","oai":"oai:eprints.lincoln.ac.uk:28","identifiers":["oai:eprints.lincoln.ac.uk:28","10.1145\/1029997.1030007"],"title":"Software, architecture, and participatory design","authors":["Rank, Stephen","O'Coill, Carl","Boldyreff, Cornelia","Doughty, Mark"],"enrichments":{"references":[{"id":18433471,"title":"A Pattern Language: Towns{Buildings{Construction.","authors":[],"date":"1977","doi":null,"raw":"C. Alexander, S. Ishikawa, M. Silverstein, M. Jacobson, I. Fiksdahl-King, and S. Angel. A Pattern Language: Towns{Buildings{Construction. Open University Press, 1977.","cites":null},{"id":18433475,"title":"Ethnographic  methods and their relation to design.","authors":[],"date":null,"doi":null,"raw":"J. Blomberg, J. Giacomi, A. Mosher, and P. Swenton-Wall. Ethnographic eld methods and their relation to design. In Schuler and Namioka [33], pages 123{154.","cites":null},{"id":18433474,"title":"Extreme Programming Explained: Embrace Change.","authors":[],"date":"1999","doi":"10.1109\/2.796139","raw":"K. Beck. Extreme Programming Explained: Embrace Change. Addison-Wesley Professional, 1999.","cites":null},{"id":18433472,"title":"Models in planning: Technological imperatives and changing roles.","authors":[],"date":"2001","doi":"10.1016\/s0303-2434(01)85032-7","raw":"M. Batty. Models in planning: Technological imperatives and changing roles. Journal of Applied Earth Observation and Geoinformation, 3(3):252{266, 2001.","cites":null},{"id":18433470,"title":"Notes on the Synthesis of Form.","authors":[],"date":"1972","doi":"10.2307\/1573476","raw":"C. Alexander. Notes on the Synthesis of Form. Harvard University Press, 1972.","cites":null},{"id":18433476,"title":"Setting the stage for design as action.","authors":[],"date":null,"doi":null,"raw":"S. Bdker, J. Greenbaum, and M. Kyng. Setting the stage for design as action. In J. Greenbaum and M. Kyng, editors, Design at Work: CooperativeSoftware Architects Physical Architects Concerned with structure Concerned with appearance Aim to reuse Aim to be original Patterns considered valuable Patterns not always considered helpful End result invisible to users End result's appearance very important Cost important Cost important End-user input important End-user input important","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-11","abstract":"Much work in software architecture has been inspired by work in physical architecture, in particular Alexander's work on `design patterns'. By contrast, Alexander's work is little-used in town planning and architecture. In this paper, we examine some of the reasons that this is so, describe some parallels and differences between the fields of physical and software architecture, and identify areas in which future collaboration may be fruitful. The notion of `participatory design' is important in software engineering and in urban regeneration, but the participatory mechanisms in each field are quite different","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/57238.pdf","fullTextIdentifier":"http:\/\/eprints.lincoln.ac.uk\/28\/1\/f18-rank.pdf","pdfHashValue":"db8716f634ef8b5c5787e8d53b516a6e37401c47","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lincoln.ac.uk:28<\/identifier><datestamp>\n      2013-03-13T08:21:39Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D6A6163735F47:6A6163735F47363130<\/setSpec><setSpec>\n      7375626A656374733D6A6163735F47:6A6163735F47363030<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.lincoln.ac.uk\/28\/<\/dc:relation><dc:title>\n        Software, architecture, and participatory design<\/dc:title><dc:creator>\n        Rank, Stephen<\/dc:creator><dc:creator>\n        O'Coill, Carl<\/dc:creator><dc:creator>\n        Boldyreff, Cornelia<\/dc:creator><dc:creator>\n        Doughty, Mark<\/dc:creator><dc:subject>\n        G610 Software Design<\/dc:subject><dc:subject>\n        G600 Software Engineering<\/dc:subject><dc:description>\n        Much work in software architecture has been inspired by work in physical architecture, in particular Alexander's work on `design patterns'. By contrast, Alexander's work is little-used in town planning and architecture. In this paper, we examine some of the reasons that this is so, describe some parallels and differences between the fields of physical and software architecture, and identify areas in which future collaboration may be fruitful. The notion of `participatory design' is important in software engineering and in urban regeneration, but the participatory mechanisms in each field are quite different.<\/dc:description><dc:date>\n        2004-11<\/dc:date><dc:type>\n        Conference or Workshop contribution<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/28\/1\/f18-rank.pdf<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/28\/2\/WISER2004-talk.pdf<\/dc:identifier><dc:identifier>\n          Rank, Stephen and O'Coill, Carl and Boldyreff, Cornelia and Doughty, Mark  (2004) Software, architecture, and participatory design.  In: SIGSOFT 2004\/FSE-12 Workshop on Interdisciplinary Software Engineering Research (WISER), 5 Nov 2004, Newport Beach, California, USA.  <\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1145\/1029997.1030007<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.lincoln.ac.uk\/28\/","http:\/\/dx.doi.org\/10.1145\/1029997.1030007"],"year":2004,"topics":["G610 Software Design","G600 Software Engineering"],"subject":["Conference or Workshop contribution","PeerReviewed"],"fullText":"Software, Architecture,\nand Participatory Design\nStephen Rank\nFaculty of Applied Computing Sciences\nUniversity of Lincoln\nsrank@lincoln.ac.uk\nCarl O\u2019Coill\nSchool of Architecture\nUniversity of Lincoln\ncocoill@lincoln.ac.uk\nCornelia Boldyreff\nFaculty of Applied Computing Sciences\nUniversity of Lincoln\ncboldyreff@lincoln.ac.uk\nMark Doughty\nFaculty of Applied Computing Sciences\nUniversity of Lincoln\nmdoughty@lincoln.ac.uk\nABSTRACT\nMuch work in software architecture has been inspired by\nwork in physical architecture, in particular Alexander\u2019s work\non \u2018design patterns\u2019. By contrast, Alexander\u2019s work is little-\nused in town planning and architecture. In this paper, we\nexamine some of the reasons that this is so, describe some\nparallels and differences between the fields of physical and\nsoftware architecture, and identify areas in which future col-\nlaboration may be fruitful. The notion of \u2018participatory de-\nsign\u2019 is important in software engineering and in urban re-\ngeneration, but the participatory mechanisms in each field\nare quite different.\nCategories and Subject Descriptors\nD.2 [Software]: Software Engineering; D.2.10 [Software]:\nSoftware Engineering\u2014Design; D.2.11 [Software]: Software\nEngineering\u2014Software Architectures; K.4.2 [Computing Mi-\nlieux]: Computers and Society\u2014Social Issues\nGeneral Terms\nDesign, Human Factors\nKeywords\nSoftware architecture, participatory design, physical archi-\ntecture\n1. INTRODUCTION\nResearchers at Lincoln University\u2019s Faculty of Applied\nComputing Sciences and the Lincoln School of Architecture\nPermission to make digital or hard copies of all or part of this work for\npersonal or classroom use is granted without fee provided that copies are\nnot made or distributed for profit or commercial advantage and that copies\nbear this notice and the full citation on the first page. To copy otherwise, to\nrepublish, to post on servers or to redistribute to lists, requires prior specific\npermission and\/or a fee.\nWISER\u201904, November 5, 2004, Newport Beach, California, USA.\nCopyright 2004 ACM 1-58113-988-8\/04\/0011 ...$5.00.\nhave been engaged in a two-level application of participa-\ntory design; software engineers are working with architects\nto design collaborative systems that architects can apply in\nparticipatory design exercises with their user communities.\nThe first such system involved the use of computer game\nsoftware to help residents in Hull, UK, to visualise and in-\nteract with a design proposal for a \u2018Home Zone\u2019 in their\nneighbourhood [29]. In this paper, we examine some of the\nways in which architecture and software engineering are re-\nlated, and describe important differences between the fields\nthat are often ignored.\n2. PARALLELS AND DIFFERENCES\nIn principle, software is technically easier to evolve than\nbuildings; software is not constrained by physical laws in\nthe same way that physical artefacts are. However, software\nevolution is a very hard problem, as physical constraints\nare far from the only forces acting on a software project;\nbusiness and social forces are more important in software\nengineering. Faced with the problems of evolving software,\nsoftware engineers continue to look outside their field for in-\nspiration. Software components, like buildings, are situated\nwithin and have a direct effect upon an environment; the\nnotion of co-evolution of the software with its environment\nhas been explored [21, 20]. Evolution of buildings is, by\nits nature, an activity that requires many disciplines: archi-\ntecture, civil\/structural engineering, construction, etc; soft-\nware evolution is similarly interdisciplinary, requiring not\nonly software engineering skills, but also business knowl-\nedge, social informatics and human factors and other skills.\nThe area of overlap between architecture and software en-\ngineering most frequently referred to by software engineers\nis concerned with theory, to be precise, the writings of the\narchitect Christopher Alexander [1, 2]. Alexander\u2019s work\nin \u2018design patterns\u2019 has inspired considerable interest in the\nsoftware engineering community. Design patterns provide\na succinct means of documenting stereotypical design solu-\ntions and are particularly relevant in solving design prob-\nlems that arise repeatedly. In software engineering, the field\nof design patterns is large with a rapidly expanding commu-\nnity [17, 12, 3]. In contrast, Alexander\u2019s ideas have not been\naccepted with anything like the same degree of enthusiasm\nby his architectural peers; his work is little-read in UK or\nUS architecture schools today. Why has Alexander found\nfavour outside his own profession rather than within? This\nquestion brings to light some key differences between the\ngoals of software engineers and building architects.\nFor the architect, artistic creativity and invention are core\nattributes of the design process. Originality in building\nform, fabric and programme is seen as highly praiseworthy.\nThink of the convoluted, curvaceous forms of Frank Gehry\u2019s\nGuggenheim Museum in Bilbao, or the \u2018gherkin shaped\u2019 new\nSwiss Re building in the City of London by Norman Foster\nand Partners. In contrast, Alexander\u2019s design patterns en-\ncourage the reproduction of established architectural forms\nand spatial arrangements found repeatedly in vernacular ar-\nchitecture, a supposedly \u2018timeless way of building\u2019. Conse-\nquently, his writings and buildings are thought of badly by\nmany architects. As William Saunders, editor of the Har-\nvard Design Magazine points out:\n[Alexander] has little \u2018cultural capital\u2019, par-\nticularly in architecture schools in which new-\nness, art, and complexity are valued, and belief\nin timeless and universal human needs is consid-\nered na\u00a8\u0131ve [32].\nConversely in the software patterns community, the reuse\nof ideas in software design is an explicit goal. The aesthetic\nqualities of the design of a piece of software are never (di-\nrectly) perceived by the end-user, while the opposite is true\nof the design of a building or urban area. Software archi-\ntects and designers aim to produce software that functions\ncorrectly, is easy and cheap to create and modify. Ensuring\nusability and determining softwares appearance are not nor-\nmally considered part of the software architect\u2019s role, while\nthese are important aspects of a building architect\u2019s job.\nSome might argue that the architectural profession has\nbeen too quick to dismiss Alexander\u2019s ideas, that there are\nvaluable lessons to be learned from vernacular building tra-\nditions and that ceaseless innovation is not appropriate in all\ncircumstances. However, Alexander\u2019s work has been criti-\ncised on a more fundamental level. His pattern language\nseems to offer a basis for a social analysis of the built envi-\nronment, yet he provides no coherent theoretical foundation\nfor his interpretation of built form.\nAlexander began his research at a time when structural-\nism was most prevalent in academia and, on a superficial\nlevel at least, his quest to uncover deep-seated, timeless\ntruths underlying society\u2019s relationship with architecture is\ncomparable to the semiotic analyses of the English architec-\ntural academic Geoffrey Broadbent [10] or the architectural\nanthropology of Amos Rapoport [30]. As such, his work\nexhibits many of the same shortcomings that contemporary\npost-structuralist and post-modern authors have highlighted\nin relation to structuralist theory in general. The concern\nwith supposedly timeless patterns betrays a view of society\nas static or unchanging rather than dynamic. It also offers\nvery little scope for conflict, the possibility that users might\ndisagree with each other or the author over what consti-\ntutes an acceptable design pattern. This failure to theorise\nconflict is further reflected in Alexander\u2019s na\u00a8\u0131vety regarding\nthe political and economic constraints to implementing the\nrecommendations he makes.\nWhile Alexander\u2019s work has attracted several criticisms\nat a theoretical level from physical architects, there is lit-\ntle (if any) software engineering literature which takes this\nviewpoint. In fact, there is little (though non-zero) criticism\nof the design pattern movement in general. Contemporary\nresearch is concerned with expanding the range of software\ndesign patterns to more abstract software architecture and\nmore concrete implementation patterns.\n3. PARTICIPATION\nParticipatory design is another area where there are some\nparallels between architecture and software engineering. It\nis a growing practice that has been adopted by practitioners\nin both fields [33, 36, 31, 37]. In both cases, it is particularly\nrelevant in projects with a large public user base. In software\nengineering, web development is one such area, particularly\nweb-based collaborative environments and publicly-funded\nweb applications. In architecture, community buildings and\narea-based urban regeneration initiatives are the main are-\nnas of participatory design practice. Participatory design\npractitioners aim to ensure that the community who will in-\nhabit a new building or neighbourhood improvement scheme\nare properly represented during the design process. This is\ndone in various ways, using tools and techniques that en-\nable non-architects to become directly involved in decision\nmaking about architectural problems. In the past most of\nthe techniques used were manual, such as drawings, physi-\ncal models, or interactive displays, and were used in \u2018face-to-\nface\u2019 situations such as workshops and exhibitions. However,\nrecently, academics and practitioners have begun to explore\napplications of digital media to participatory design, looking\nat interactive websites and geographic information systems\n(GIS) in particular [19, 4]. The application of virtual reality\nand computer game technology to design collaboration in ar-\nchitecture and urban design is an interesting and relatively\nnew development [16, 23, 29].\nThere has been a long tradition of encouraging end-user-\nparticipation in the design of software systems, particularly\nwithin the Computer-Supported Cooperative Work (CSCW)\ncommunity [8, 9, 6, 7]. This dates from the early partici-\npation of Scandinavian workers in the design of computer\nsystems introduced into their work places. With the possi-\nbility of more universal human computer interaction, usabil-\nity studies have become a common practice within computer\nsystem design [25], especially in the design of web-based sys-\ntems [26]. This focus on the needs of the potential end-users\nrather than customers [27] marks a radical change from ear-\nlier system development where the commissioning customers\nwere often the end users, or their direct representatives.\nThe theory and practice of participatory design is also\nwell established in the architectural profession, dating back\nto the 1960s and 70s when pioneers like John Turner, Lucien\nKroll, Rod Hackney and Ralph Erskine first began to extol\nthe benefits of user involvement in the design process [37].\nAfter a period of decline in the late 1980s and early 90s, the\nfield has been given new impetus by changes in UK urban\npolicy endorsing the notion of community involvement in the\nphysical renewal of cities. Many architectural practices have\ncapitalised upon this new trend and are now offering a range\nof community consultation services to public and voluntary\nsector clients alongside more standard architectural services.\nIn addition, there is a growing body of literature examining\ntools and techniques that can be used to promote public\nparticipation in architecture, urban design and planning [18,\n24, 38, 36, 31, 14]\nIn software engineering, there are some comparable ideas\nand these are receiving increasing recognition. The most re-\ncent edition of Sommerville\u2019s Software Engineering includes\na new chapter on the socio-technical systems which empha-\nsises the fact that software is often part of a much larger\nsystem involving many engineering disciplines as well as hu-\nman, social and organisational factors [34]. Within the agile\nsoftware development community, software development is\nconsidered as a co-operative game of invention and com-\nmunication involving developers and customers where work\nproducts of the team should be measured for their suffi-\nciency with respect to communicating with the target group\nof users [13]. The most widely-known agile software de-\nvelopment method, XP, explicitly advocates having a cus-\ntomer always on the developers\u2019 site [5]. Nielsen recom-\nmends that usability studies are carried out with represen-\ntative users [25].\nOne important barrier to non-specialists\u2019 participation in\neither field is the language and conventions that define the\nprofessions. In architecture, non-professionals often find\npaper-based plans and technical drawings difficult to under-\nstand. Virtual reality can be used to help participants visu-\nalise design proposals in three dimensions, either in the form\nof video-based animations of digital models or interactive\n3-D models based on computer game technology [29]. How-\never, buildings have an obvious representation (their physi-\ncal form), whereas no such visualisation exists for software,\nwhich is \u2018inherently unvisualizable\u2019 [11]. Languages such as\nUML have been used to communicate with non-specialist\nusers, but these are of limited value to non-technical users.\nProfessional attitudes can also act as a barrier to user par-\nticipation. \u2018High\u2019 architecture is often seen as a closed pro-\nfessional community, not interested in input from outsiders.\nWhile all architectural activity is necessarily a product of\ninter-professional collaboration and teamwork, the field is\nrigidly hierarchical, underpinned by a system of peer eval-\nuation which gives the impression that the most significant\nbuildings are designed by individual geniuses or \u2018star archi-\ntects\u2019 [35]. Participatory Design is opposed to this mode\nof thinking. Consequently, it is often viewed with suspicion\nby architects, represented as an adulteration of the design\nprocess and of lower-status than more \u2018artistic\u2019 architectural\nendeavours.\nCorrespondingly, in software engineering, open source soft-\nware engineering is often criticised for its lack of rigour and\nmature processes. It too has the potential to be more demo-\ncratic, involving more stakeholders in its design, develop-\nment, and evolution. Currently, however, users are often re-\nstricted to the highly technically literate, and there is little\ninvolvement of non-programming users in many open-source\nprojects. There are a small number of exceptions, but there\nis currently no clear way that an open-source project can\neasily take advantage of the expertise of non-technical users.\nMost open-source software projects (indeed, most software\nprojects of whatever kind) are unsuccessful, and there are\nstill no silver bullets guaranteeing success.\nAttempts to involve stakeholders in design (of software\nand of the built environment) give rise to conflicts. In archi-\ntecture, participatory design practitioners have developed\ntechniques to make conflicting user needs visible to partici-\npants, to encourage dialogue and to build consensus between\nusers. In software, conflicts are often resolved in shorter or-\nder, though there is increasing recognition that consensus\namongst stakeholders is not automatic, and must be strived\nfor, particularly at early stages in the lifecycle. Using tools\nto support detection and management of inconsistencies is\nbecoming more common, along with the acceptance that\ninconsistency is a reality in any large software system [22,\n28], and it has been recognised that \u201can important part\nof the requirements engineering task is facilitating collab-\norative work, consensus building and negotiation between\nstakeholders\u201d [15]. There is potential here for software en-\ngineers to learn from architects with experience in partici-\npatory design.\n4. CONCLUSIONS\nThere are many parallels between the fields of physical\narchitecture and software architecture, though there is not\na simple 1:1 correspondence between them. This paper has\nidentified some areas for collaboration, and some differences,\nbetween the two fields. Table 1 summarises the main simi-\nlarities and differences between work in the two fields.\nCollaboration between architecture and computer science\nin Lincoln is being taken forward with work in the design of\ncollaborative environments to support participatory design\nin urban regeneration. We aim to develop software simula-\ntors which will enable non-experts to gain an understanding\nof proposed architectural designs for urban areas which are\nbeing regenerated. These simulators will use 3-D visualisa-\ntions of urban areas to present users with proposed designs.\nThe simulators will be embedded within collaborative en-\nvironment allowing potential users to communicate directly\nwith the architects involved in the design, thus facilitating\ntheir further participation in the design process.\n5. REFERENCES\n[1] C. Alexander. Notes on the Synthesis of Form.\nHarvard University Press, 1972.\n[2] C. Alexander, S. Ishikawa, M. Silverstein,\nM. Jacobson, I. Fiksdahl-King, and S. Angel. A\nPattern Language: Towns\u2013Buildings\u2013Construction.\nOpen University Press, 1977.\n[3] L. Bass, P. Clements, and R. Kazman. Software\nArchitecture in Practice. S.E.I. Series in Software\nEngineering. Addison-Wesley, 1998.\n[4] M. Batty. Models in planning: Technological\nimperatives and changing roles. Journal of Applied\nEarth Observation and Geoinformation, 3(3):252\u2013266,\n2001.\n[5] K. Beck. Extreme Programming Explained: Embrace\nChange. Addison-Wesley Professional, 1999.\n[6] J. Blomberg, J. Giacomi, A. Mosher, and\nP. Swenton-Wall. Ethnographic field methods and\ntheir relation to design. In Schuler and Namioka [33],\npages 123\u2013154.\n[7] J. Blomberg, F. Kensing, and E. Dykstra-Erickson,\neditors. PDC\u201996: Proceedings of the Participatory\nDesign Conference. Palo Alto, CA: Computer\nProfessionals for Social Responsibility, 1996.\n[8] S. B\u00f8dker, J. Greenbaum, and M. Kyng. Setting the\nstage for design as action. In J. Greenbaum and\nM. Kyng, editors, Design at Work: Cooperative\nSoftware Architects Physical Architects\nConcerned with structure Concerned with appearance\nAim to reuse Aim to be original\nPatterns considered valuable Patterns not always considered helpful\nEnd result invisible to users End result\u2019s appearance very important\nCost important Cost important\nEnd-user input important End-user input important\nTable 1: Comparisons: Software and Physical Architecture\nDesign of Computer Systems. Lawrence Erlbaum\nAssociates, Hillsdale, NJ, 1991.\n[9] S. B\u00f8dker, K. Gr\u00f8nb\u00e6k, and M. Kyng. Cooperative\ndesign: Techniques and experiences from the\nScandinavian scene. In Schuler and Namioka [33],\npages 157\u2013175.\n[10] G. Broadbent, editor. Signs, Symbols and\nArchitecture. David Fulton Publishers, 1980.\n[11] F. P. Brooks. No silver bullet: Essence and accidents\nof software engineering. IEEE Computer, 20(4):10\u201319,\nApr. 1987.\n[12] F. Buschmann, R. Meunier, H. Rohnert,\nP. Sommerlad, and M. Stal. Pattern-Oriented Software\nArchitecture: A System of Patterns. Wiley, 1996.\n[13] A. Cockburn. Agile Software Development. Addison\nWesley, 2001.\n[14] D. Driskell. Creating Better Cities with Children and\nYouth: A Manual for Participation. Earthscan,\nLondon, 2002.\n[15] A. Finkelstein. Requirements engineering: a review\nand research agenda. In 1st Asian-Pacific Software\nEngineering Conference, 1994.\n[16] T. Fukuda, R. Nagahama, A. Kaga, and T. Sasada.\nCollaborative support system for city plans or\ncommunity designs based on VR\/CG technology.\nInternational Journal of Architectural Computing,\n1(4):461\u2013469, 2003.\n[17] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.\nDesign Patterns: Elements of Reusable\nObject-Oriented Software. Addison-Wesley, 1995.\n[18] T. Gibson. The real planning for real. Town and\nCountry Planning, pages 187\u2013189, July 1995.\n[19] R. Kingston, S. Carver, A. Evans, and I. Turton.\nWeb-based public participation geographical\ninformation sustems: An aid to local environmental\ndecision-making. Computers, Environment and Urban\nSystems, 24:109\u2013125, 2000.\n[20] M. M. Lehman. Feedback in the software process.\nPosition Paper at the SEA Workshop: Research\nDirections in Software Engineering, Imperial College,\nLondon, Apr.14\u201315 1997.\n[21] M. M. Lehman and L. A. Belady. Program Evolution:\nProcesses of Software Change. Number 27 in APIC\nStudies in Data Processing. Academic Press, 1985.\n[22] W. Liu, S. M. Easterbrook, and J. Mylopoulos.\nRule-based detection of inconsistency in UML models.\nIn Proceedings of the Workshop on Consistency\nProblems in UML-Based Software Development, Fifth\nInternational Conference on the Unified Modeling\nLanguage, Dresden, 2002.\n[23] C. Lou, A. Kaga, and T. Sasada. Environmental\ndesign with huge landscape in real-time simulation\nsystem. Automation in Construction, 12(5):481\u2013485,\n2003.\n[24] New Economics Foundation. Participation Works: 21\nTechniques of Community Participation for the 21st\nCentury. New Economics Foundation, London, 1998.\n[25] J. Nielsen. Usability Engineering. Academic Press,\n1994.\n[26] J. Nielsen. Designing Web Usability: The Practice of\nSimplicity. New Riders, 2000.\n[27] D. A. Norman. The Invisible Computer. MIT Press,\n1999.\n[28] B. Nuseibeh, S. Easterbrook, and A. Russo. Making\ninconsistency respectable in software development.\nJournal of Systems and Software, 58(2):171\u2013180,\nSeptember 2001.\n[29] C. O\u2019Coill and M. Doughty. Computer game\ntechnology as a tool for participatory design. In\nProceedings of the eCAADe 2004 22nd conference:\nArchitecture in the Network Society, Copenhagen,\nDenmark, September 2004.\n[30] A. Rapoport. The Meaning of the Built Environment:\nA Nonverbal Communication Approach. Sage\nPublications, London, 1992.\n[31] H. Sannof. Community Participation Methods in\nDesign and Planning. John Wiley, London, 2000.\n[32] W. Saunders. Pattern language. Harvard Design\nMagazine, 16, 2002. Winter\/Spring.\n[33] D. Schuler and A. Namioka, editors. Participatory\nDesign: Principles and Practices. Lawrence Erlbaum\nAssociates, Hillsdale, New Jersey, 1993.\n[34] I. Sommerville. Software Engineering, chapter 2:\nSocio-technical systems, pages 20\u201342. Pearson\nEducation, Harlow, UK, seventh edition, 2004.\n[35] G. Stevens. The Favoured Circle: The Social\nFoundations of Architectural Distinction. MIT Press,\nCambridge, Massachusetts, 1998.\n[36] The Architecture Foundation. Creative spaces: a\ntoolkit for participatory urban designers. The\nArchitecture Foundation, London, 2000.\n[37] G. Towers. Building Democracy: Community\nArchitecture in the Inner Cities. UCL Press, London,\n1995.\n[38] N. Wates. The Community Planning Handbook.\nEarthscan, 2000.\n"}