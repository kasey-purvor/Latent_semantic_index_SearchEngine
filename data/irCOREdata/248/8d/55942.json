{"doi":"10.1007\/978-3-540-68073-4","coreId":"55942","oai":"oai:eprints.lincoln.ac.uk:1621","identifiers":["oai:eprints.lincoln.ac.uk:1621","10.1007\/978-3-540-68073-4"],"title":"Identifying and improving reusability based on coupling patterns","authors":["Capiluppi, Andrea","Boldyreff, Cornelia"],"enrichments":{"references":[{"id":18439666,"title":"Dynamic Coupling Measurement for ObjectOriented Software.","authors":[],"date":"2004","doi":"10.1109\/tse.2004.41","raw":"Arisholm, E., Briand L.C. and Foyen, A.: Dynamic Coupling Measurement for ObjectOriented Software. IEEE Transactions on Software Engineering, 30(8):491\u2013506, 2004.","cites":null},{"id":18439667,"title":"A case study of the evolution of jun: an object-oriented open-source 3d multimedia library.","authors":[],"date":"2001","doi":"10.1109\/icse.2001.919127","raw":"Aoki, A., Hayashi, K., Kishida, K., Nakakoji K., Nishinaka Y., Reeves B., Takashima A., and Yamamoto, Y.: A case study of the evolution of jun: an object-oriented open-source 3d multimedia library. In Proceedings of the 23rd International Conference on Software Engineering, pages 524\u2013533, Toronto, Canada, 2001. ICSE.","cites":null},{"id":18439668,"title":"Support for Comprehensive Reuse.","authors":[],"date":"1991","doi":"10.1049\/sej.1991.0032","raw":"Basili, V.R. and Rombach, H.D.: Support for Comprehensive Reuse. IEEE Software Engineering Journal, 6(5):303\u2013316, 1991.","cites":null},{"id":18439669,"title":"Evolutionary Success of Open Source Software: an Investigation into Exogenous Drivers.","authors":[],"date":"2007","doi":null,"raw":"Beecher, K., Boldyreff, C., Capiluppi, A., and Rank, S.: Evolutionary Success of Open Source Software: an Investigation into Exogenous Drivers. Electronic Communications of the EASST: ERCIM Symposium on Software Evolution, 17(8), 2007.","cites":null},{"id":18439670,"title":"Property-based Software Engineering Measurement.","authors":[],"date":"1996","doi":"10.1109\/32.481535","raw":"Briand, L.C., Morasca, S. and Basili, V.R.: Property-based Software Engineering Measurement. IEEE Transactions on Software Engineering, 22(1):68\u201386, 1996.","cites":null},{"id":18439674,"title":"Models for the Evolution of OS Projects.","authors":[],"date":"2003","doi":"10.1109\/icsm.2003.1235407","raw":"Capiluppi, A: Models for the Evolution of OS Projects. In Proceedings of the International Conference on Software Maintenance, 65\u201374, Amsterdam, Netherlands, 2003.","cites":null},{"id":18439676,"title":"Evidences in the Evolution of OS Projects Through Changelog Analyses.","authors":[],"date":"2003","doi":null,"raw":"Capiluppi, A., Lago, P. and Morisio, M.: Evidences in the Evolution of OS Projects Through Changelog Analyses. In Proceedings of the 3rd Workshop on Open Source Software Engineering, Portland, OR, USA, 2003. ICSE.","cites":null},{"id":18439678,"title":"Structural Analysis of Open Source Systems.","authors":[],"date":"2006","doi":"10.1002\/0470871822.ch10","raw":"Capiluppi, A., Morisio, M., and Ramil, J.F.: Structural Analysis of Open Source Systems. In N. H. Madhavji, J. F. Ramil, and D. Perry, editors, Software Evolution and Feedback: Theory and Practice, pages 207\u2013222. Wiley, 2006.","cites":null},{"id":18439680,"title":"The Evolution of Source Folder Structure in Actively Evolved Open Source Systems.","authors":[],"date":"2004","doi":"10.1109\/metric.2004.1357886","raw":"Capiluppi, A., Morisio, M. and Ramil, J.F.: The Evolution of Source Folder Structure in Actively Evolved Open Source Systems. In Proceedings of the 10th International Software Metrics Symposium, pages 2\u201313, 2004.","cites":null},{"id":18439682,"title":"Assembling Large Systems from COTS Components: Opportunities, Cautions, and Complexities.","authors":[],"date":"1997","doi":null,"raw":"Carney, D.: Assembling Large Systems from COTS Components: Opportunities, Cautions, and Complexities. Technical report, SEI Monographs on the Use of Commercial Software in Government Systems, 1997.","cites":null},{"id":18439684,"title":"Butter\ufb02ies: A visual Approach to Characterize Packages.","authors":[],"date":"2005","doi":"10.1109\/metrics.2005.15","raw":"Ducasse, S., Lanza, M. and Ponisio, L.: Butter\ufb02ies: A visual Approach to Characterize Packages. In Proceedings of the 11th International Software Metrics Symposium, 2005.","cites":null},{"id":18439686,"title":"Open Source Graph Drawing Tools,","authors":[],"date":"2002","doi":"10.1007\/3-540-45848-4_57","raw":"Ellson, J., Gansner, E., Koutso\ufb01os, L., North, S.C. and Woodhull G.: Graphviz, Open Source Graph Drawing Tools, 2002.","cites":null},{"id":18439688,"title":"Software Metrics: a Practical and Rigorous Approach.","authors":[],"date":"1996","doi":null,"raw":"Fenton N.E. and P\ufb02eeger, S.L.: Software Metrics: a Practical and Rigorous Approach. Thomson, 1996.","cites":null},{"id":18439689,"title":"Cooperation and Coordination","authors":[],"date":null,"doi":null,"raw":"Koch, S. and Schneider, G.: Effort, Cooperation and Coordination in an Open Source Software Project: GNOME. Information Systems Journal, 12(1):27\u201342, 2002.11","cites":null},{"id":18439691,"title":"Using Software Trails to Reconstruct the Evolution of Software.","authors":[],"date":"2004","doi":"10.1002\/smr.301","raw":"German., D. M.: Using Software Trails to Reconstruct the Evolution of Software. Journal of Software Maintenance and Evolution: Research and Practice, 16(6):367\u2013384, 2004.","cites":null},{"id":18439693,"title":"Evolution in Open Source Software: A Case Study.","authors":[],"date":"2000","doi":"10.1109\/icsm.2000.883030","raw":"Godfrey, M.W. and Tu, Q.: Evolution in Open Source Software: A Case Study. In Proceedings of the International Conference on Software Maintenance, pages 131\u2013142, San Jose, CA, USA, 2000.","cites":null},{"id":18439694,"title":"Tool Support for Just-In-Time Architecture Reconstruction and Evaluation: an Experience Report.","authors":[],"date":"2005","doi":"10.1109\/icse.2005.1553597","raw":"Gorton I., and Zhu, L.: Tool Support for Just-In-Time Architecture Reconstruction and Evaluation: an Experience Report. In Proceedings of the 27th international conference on Software engineering, pages 514\u2013523, 2005.","cites":null},{"id":18439695,"title":"Applied Software Architecture.","authors":[],"date":null,"doi":"10.1007\/978-0-387-35563-4_9","raw":"Hofmeister, C., Nord, R. and Soni, D.: Applied Software Architecture. AddisonWesley,","cites":null},{"id":18439696,"title":"The 4+1 View Model of Architecture.","authors":[],"date":"1995","doi":"10.1109\/52.469759","raw":"Kruchten, P.: The 4+1 View Model of Architecture. IEEE Software, 12(5):88\u201393, 1995.","cites":null},{"id":18439697,"title":"Object-oriented Metrics that Predict Maintainability.","authors":[],"date":"1993","doi":"10.1016\/0164-1212(93)90077-b","raw":"Li, W. and Henry, S.: Object-oriented Metrics that Predict Maintainability. Journal of Systems and Software, 23(2):111\u2013122, 1993.","cites":null},{"id":18439698,"title":"Incremental Software Reuse.","authors":[],"date":"2006","doi":"10.1007\/11763864_29","raw":"Llorens, J., Fuentes, J., and Astudillo, H.: Incremental Software Reuse. In Proceedings of the International Conference on Software Reuse, Torino, Italy, 2006. ICSR.","cites":null},{"id":18439699,"title":"Package Patterns for Visual Architecture Recovery.","authors":[],"date":"2006","doi":"10.1109\/csmr.2006.39","raw":"Lungu, M., Lanza, M. and Girba, T.: Package Patterns for Visual Architecture Recovery. In Proceedings of the Conference on Software Maintenance and Reengineering, 32\u201341, 2006.","cites":null},{"id":18439700,"title":"Agile Software Development, Principles, Patterns, and Practices.","authors":[],"date":"2002","doi":"10.1002\/pfi.21408","raw":"Martin, R.C.: Agile Software Development, Principles, Patterns, and Practices. Prentice Hall, October 2002.","cites":null},{"id":18439701,"title":"Some Experience in Promoting Reusable Software Presentation in Higher Abstraction Levels.","authors":[],"date":"2004","doi":"10.1109\/tse.1984.5010274","raw":"Matsumoto, Y.: Some Experience in Promoting Reusable Software Presentation in Higher Abstraction Levels. IEEE Transactions on Software Engineering, 12(1):43\u201360, 2004.","cites":null},{"id":18439702,"title":"Software Reuse Techniques.","authors":[],"date":"1997","doi":"10.1007\/978-1-4471-1511-3_2","raw":"McClure, C.: Software Reuse Techniques. Prentice-Hall, 1997.","cites":null},{"id":18439703,"title":"UsingSoftware Evolution to Focus Architectural Recovery.","authors":[],"date":"2006","doi":"10.1007\/s10515-006-7737-5","raw":"Medvidovic, N.and Jakobac, V.: UsingSoftware Evolution to Focus Architectural Recovery. Automated Software Engineering, 13(2):225\u2013256, 2006.","cites":null},{"id":18439704,"title":"Two Case Studies of Open Source Software Development: Apache and Mozilla.","authors":[],"date":"2002","doi":"10.1145\/567793.567795","raw":"Mockus, A., Fielding, R. T. and Herbsleb, J. D.: Two Case Studies of Open Source Software Development: Apache and Mozilla. ACM Transactions on Software Engineering and Methodology, 11(3):309\u2013346, 2002.","cites":null},{"id":18439705,"title":"Different Aspects of Product Family Adoption.","authors":[],"date":"2003","doi":"10.1007\/978-3-540-24667-1_32","raw":"Mohagheghi, P. and Conradi, R.: Different Aspects of Product Family Adoption. In Proceedings of 5th International Workshop on Product Family Evolution, pages 429\u2013434, 2003.","cites":null},{"id":18439706,"title":"Success and Failure Factors in Software Reuse.","authors":[],"date":"2002","doi":"10.1109\/tse.2002.995420","raw":"Morisio, M., Ezran, M. and Tully, C.: Success and Failure Factors in Software Reuse. IEEE Transactions on Software Engineering, 28(4):340\u2013357, 2002.","cites":null},{"id":18439707,"title":"Investigating and Improving a COTS-based Software Development.","authors":[],"date":"2000","doi":"10.1109\/icse.2000.870394","raw":"Morisio, M., Seaman, C.B., Parra, A.T., Basili, V.R., Kraft, S.E. and Condon, S.E.: Investigating and Improving a COTS-based Software Development. In Proceedings of International Conference on Software Engineering, pages 32\u201341, 2000.","cites":null},{"id":18439708,"title":"Measuring Software Reuse: Principles, Practices, and Economic Models.","authors":[],"date":"1996","doi":null,"raw":"Poulin, J.S.: Measuring Software Reuse: Principles, Practices, and Economic Models. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1996.","cites":null},{"id":18439709,"title":"Software Engineering: a Practitioner\u2019s Approach (2nd ed.).","authors":[],"date":"1986","doi":null,"raw":"Pressman R.S.: Software Engineering: a Practitioner\u2019s Approach (2nd ed.). McGraw-Hill, Inc., New York, NY, USA, 1986.","cites":null},{"id":18439711,"title":"How to Have a Successful Free Software Project.","authors":[],"date":"2004","doi":"10.1109\/apsec.2004.58","raw":"Senyard, A. and Michlmayr, M.: How to Have a Successful Free Software Project. In Proceedings of the 11th Asia-Paci\ufb01c Software Engineering Conference, pages 84\u201391, Busan, Korea, 2004. IEEE Computer Society.","cites":null},{"id":18439712,"title":"Code Quality Analysis in OpenSource Software Development.","authors":[],"date":"2002","doi":"10.1046\/j.1365-2575.2002.00117.x","raw":"Stamelos, I., Angelis, L., Oikonomou, A., and Bleris, G. L.: Code Quality Analysis in OpenSource Software Development. Information Systems Journal, 12(1):43\u201360, 2002.","cites":null},{"id":18439713,"title":"Structured Design.","authors":[],"date":"1974","doi":"10.1147\/sj.132.0115","raw":"Stevens, W.P., Myers, G.J. and Constantine, L.L.: Structured Design. IBM Systems Journal, 13:115\u2013139, 1974.","cites":null},{"id":18439714,"title":"Overlooked Aspects of COTS-based Development.","authors":[],"date":null,"doi":"10.1109\/ms.2004.1270770","raw":"Torchiano, M. and Morisio, M.: Overlooked Aspects of COTS-based Development. IEEE Software, 21(2):88\u201393, 2004.12","cites":null},{"id":18439715,"title":"The Build-Time Software Architecture View.","authors":[],"date":null,"doi":"10.1109\/icsm.2001.972753","raw":"Tu, Q. and Godfrey, W. M.: The Build-Time Software Architecture View. In Proceedings of 2001 International Conference on Software Maintenance, pages 65\u201374, Florence, Italy,","cites":null},{"id":18439716,"title":"Categorization of Common Coupling and Its Application to the Maintainability of the Linux Kernel.","authors":[],"date":"2004","doi":"10.1109\/tse.2004.58","raw":"Yu, L., Schach, S.R., Chen, K. and Offutt J.: Categorization of Common Coupling and Its Application to the Maintainability of the Linux Kernel. IEEE Transactions on Software Engineering, 30(10):43\u201360, 2004. Folder I E wCe wCa Calls to self Calls to libc Description False positive Arla project \u2013 reusable folders root\/lib\/roken","cites":null},{"id":18439717,"title":"Library handling missing or broken parts yes root\/rx 0.03 33 13*111 53*1042 495 141 Library implementing the rx protocol no Gaim project \u2013 reusable folders root\/src","authors":[],"date":null,"doi":null,"raw":"01 145 11*73 71*1326 395 367 Library handling missing or broken parts yes root\/rx 0.03 33 13*111 53*1042 495 141 Library implementing the rx protocol no Gaim project \u2013 reusable folders root\/src 0.030 139 12*1117 30*14462 9437 868 Common source \ufb01les of the Gaim system yes MPlayer project \u2013 reusable folders root\/liba52 0.02 23 2*21 9*230 196 15 ATSC A\/52 stream decoder no root\/libavcodec","cites":null},{"id":18439718,"title":"Library for coding and decoding video and audio streams no root\/libaf","authors":[],"date":null,"doi":null,"raw":"03 154 22*155 27*4493 3780 168 Library for coding and decoding video and audio streams no root\/libaf 0.03 38 7*52 25*464 294 112 Audio \ufb01lter layer library no root\/libfaad2","cites":null},{"id":18439720,"title":"Demultiplexer Library for MPEG, ASF, AVI formats no root\/tremor 0.045 29 4*17 4*363 372 34 Tremor integer-only Ogg Vorbis audio codec no root\/loader","authors":[],"date":null,"doi":null,"raw":"06 136 21*257 28*2852 2740 353 Demultiplexer Library for MPEG, ASF, AVI formats no root\/tremor 0.045 29 4*17 4*363 372 34 Tremor integer-only Ogg Vorbis audio codec no root\/loader 0.054 27 8*203 24*1192 688 75 N\/A yes root\/osdep 0.066 25 6*47 23*174 17 54 N\/A yes root\/loader\/ wine","cites":null},{"id":18439722,"title":"Header \ufb01les for the Microsoft Windows compatibility yes XMMS project \u2013 reusable folders root\/libxmms","authors":[],"date":null,"doi":null,"raw":"138 27 5*142 14*318 83 11 Header \ufb01les for the Microsoft Windows compatibility yes XMMS project \u2013 reusable folders root\/libxmms","cites":null},{"id":18439724,"title":"86 Generic library for the XMMS project no root\/xmms","authors":[],"date":null,"doi":null,"raw":"003 19 4*20 25*1081 416 86 Generic library for the XMMS project no root\/xmms 0.091 87 20*277 26*2121 2157 121 Common source \ufb01les of the XMMS system yes","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2008-07-29","abstract":"Open Source Software (OSS) communities have not yet taken full advantage of reuse mechanisms. Typically many OSS projects which share the same application domain and topic, duplicate effort and code, without fully leveraging the vast amounts of available code.\\ud\nThis study proposes the empirical evaluation of source code folders of OSS projects in order to determine their actual internal reuse and their potential as shareable, fine-grained and externally reusable software components by future projects.\\ud\nThis paper empirically analyzes four OSS systems, identifies which components (in the form of folders) are currently being reused internally and studies their coupling characteristics. Stable components (i.e., those which act as service providers rather than service consumers) are shown to be more likely to be reusable. As a means of supporting replication of these successful instances of OSS reuse, source folders with similar patterns are extracted from the studied systems, and identified as externally reusable components","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/55942.pdf","fullTextIdentifier":"http:\/\/eprints.lincoln.ac.uk\/1621\/1\/icsr2008.pdf","pdfHashValue":"0fd3077e56f2725f74cf9670a5d1b3f18ee7a38f","publisher":"Springer","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lincoln.ac.uk:1621<\/identifier><datestamp>\n      2013-04-30T08:49:26Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D6A6163735F47:6A6163735F47363030<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.lincoln.ac.uk\/1621\/<\/dc:relation><dc:title>\n        Identifying and improving reusability based on coupling patterns<\/dc:title><dc:creator>\n        Capiluppi, Andrea<\/dc:creator><dc:creator>\n        Boldyreff, Cornelia<\/dc:creator><dc:subject>\n        G600 Software Engineering<\/dc:subject><dc:description>\n        Open Source Software (OSS) communities have not yet taken full advantage of reuse mechanisms. Typically many OSS projects which share the same application domain and topic, duplicate effort and code, without fully leveraging the vast amounts of available code.\\ud\nThis study proposes the empirical evaluation of source code folders of OSS projects in order to determine their actual internal reuse and their potential as shareable, fine-grained and externally reusable software components by future projects.\\ud\nThis paper empirically analyzes four OSS systems, identifies which components (in the form of folders) are currently being reused internally and studies their coupling characteristics. Stable components (i.e., those which act as service providers rather than service consumers) are shown to be more likely to be reusable. As a means of supporting replication of these successful instances of OSS reuse, source folders with similar patterns are extracted from the studied systems, and identified as externally reusable components.<\/dc:description><dc:publisher>\n        Springer<\/dc:publisher><dc:date>\n        2008-07-29<\/dc:date><dc:type>\n        Book Section<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/1621\/1\/icsr2008.pdf<\/dc:identifier><dc:identifier>\n          Capiluppi, Andrea and Boldyreff, Cornelia  (2008) Identifying and improving reusability based on coupling patterns.   In:  High confidence software reuse in large systems.   Lecture notes in computer science, 5030\/2 .  Springer, Berlin \/ Heidelberg, pp. 282-293.  ISBN 9783540680628  <\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1007\/978-3-540-68073-4<\/dc:relation><dc:relation>\n        10.1007\/978-3-540-68073-4<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.lincoln.ac.uk\/1621\/","http:\/\/dx.doi.org\/10.1007\/978-3-540-68073-4","10.1007\/978-3-540-68073-4"],"year":2008,"topics":["G600 Software Engineering"],"subject":["Book Section","PeerReviewed"],"fullText":"Identifying and Improving Reusability Based on\nCoupling Patterns\nAndrea Capiluppi and Cornelia Boldyreff\nCentre of Research on Open Source Software \u2013 CROSS\nDepartment of Computing and Informatics\nUniversity of Lincoln\n{acapiluppi,cboldyreff}@lincoln.ac.uk\nAbstract. Open Source Software (OSS) communities have not yet taken full ad-\nvantage of reuse mechanisms. Typically many OSS projects which share the same\napplication domain and topic, duplicate effort and code, without fully leveraging\nthe vast amounts of available code.\nThis study proposes the empirical evaluation of source code folders of OSS projects\nin order to determine their actual internal reuse and their potential as shareable,\nfine-grained and externally reusable software components by future projects.\nThis paper empirically analyses four OSS systems, identifies which components\n(in the form of folders) are currently being reused internally and studies their cou-\npling characteristics. Stable components (i.e., those which act as service providers\nrather than service consumers) are shown to be more likely to be reusable. As\na means of supporting replication of these successful instances of OSS reuse,\nsource folders with similar patterns are extracted from the studied systems, and\nidentified as externally reusable components. The intended users are members of\nthe OSS development community.\nBased on the empirical study of the OSS systems and observations made dur-\ning the study, four practical courses of action are recommended in order to en-\nhance the reusability of current folders that have not been identified as potentially\nreusable, both from an internal and external standpoint.\n1 Introduction\nReuse of software components is one of the biggest promises of software engineer-\ning [3]. Enhanced productivity, increased quality and improved business performance\nare often pinpointed as the main benefits of developing software from a stock of reusable\nbuilding blocks [33].\nRecently, practical approaches to commercial software reuse have included both\nin-house and COTS-based approaches. Many companies have already successfully pro-\nduced and reused in-house components, in the forms of documentation, system and\ncomponents design, source code, and so on, which are kept as valuable assets and not\nmade available elsewhere [25, 29]. One of the most critical aspects of successful in-\nhouse reuse is the long-term commitment of the management [30].\nReuse of small scale compoments, e.g. functions of programming language libraries,\neither in-house or externally produced has been common practice since high level lan-\nguages have been in use. A new possibility for reusability of external components has\n2arisen through the exploitation of both COTS and OSS in what can termed \"whole\nsystem reuse\". New products can be developed based on existing systems, either on a\nclosed-source basis (e.g., commercially available COTS [31]), or by reusing entire OSS\nsystems, such as web-server Apache, the MySQL database management system, or the\nPHP language [37]. In the latter case, OSS systems also provide the source code under-\nlying the system, and the code can be modified before reuse. One of the drawbacks of\nthis approach is that entire systems are reused, even though only a subset of their func-\ntionalities may be required in the new system. Commercial companies must address\nthese issues in order to take advantage of the proprietary-COTS shift: whether to use\nCOTS, how to use COTS, and what to modify in their in-house systems to cope with\nCOTS [10] and the same questions apply in the selection of OSS component reuse.\nAlthough much attention has already been focused on the study of reusable COTS,\nincluding OSS components in corporate software production, the reusability of software\n\u201cfrom\u201d OSS projects \u201cin\u201d other OSS projects has only started to draw the attention\nof researchers and practitioners in OSS communities [20]. While a huge amount of\ncode is daily created, modified and stored in OSS repositories, software reuse is rarely\nperceived by OSS developers as a critical factor in their projects, nor is the source code\nof other projects considered as a potential way to build new OSS systems upon existing\nones. For different and composite reasons [34], briefly recounted here in the following\nSections, several OSS projects typically address the same software need independently.\nFor example, a search for the \u201cemail client\u201d topic on the SourceForge site will result\nin more than 500 different projects being listed, each implementing some features of\nthe same topic. Duplication of coding effort therefore is currently producing similar\nproducts with little sharing of the basic building blocks or the larger subsystems. In\norder to address this missing \u201creuse\u201d link in OSS projects, the objective of this paper\nis to provide OSS communities with a technique for identifying and benefiting from\nreusable components (under a \u201cdesign with reuse\u201d perspective [26]).\n2 Definitions and Approach\nThe terminology and definitions used in this paper are extracted from similar stud-\nies in the literature, for example, the definition of coupling (intended for both object-\noriented [1, 21] and procedural [13] languages) and the notion of instability of source\npackages [17]. In this section an overview of these terms is given, as they will be used\nthroughout this work.\n\u2013 Source function: basic unit of source code; this term is used to refer to procedures,\nsubroutines, but also OO methods.\n\u2013 Source file: any file with at least one source function.\n\u2013 Source folder: any folder containing at least one source file [9]. The term module is\nused to refer to source code functions, files and folders.\n\u2013 Folder structure: from the perspective of file naming, code organisation and storage,\nthis is the tree structure composed of elementary components (source files, source\nfolders). The root of the tree is represented by the parent folder [9, 8].\n\u2013 Extensibility of a source folder: following Martin[24] who defines extensibility as\nthe number of concrete and abstract classes in a package, we define the number of\n3source files contained in a folder as the extensibility of that folder. This attribute\nserves to characterise the potential usefulness of a source folder. Ideally, one would\nwant to reuse folders with large extensibility, i.e., with a large number of similarly\nscoped functionalities (in the forms of files or functions), rather than a number of\nrelated smaller folders.\n\u2013 Coupling: this is a measure of interconnection among modules in a software struc-\nture [33]. In this study, three types of coupling are extracted, based on the defini-\ntions of common coupling [36]:\ni. The dependency relationship is based on source files, and describes, for each\nfile, how many and which other files are currently including it.\nii. The include relationship is also based on source files, and describes the number\nof external files that a specific source file includes in its declarations.\niii. The function call relationship is based on source functions, and describes the\nrelationship among functions or procedures. It produces as a result the represen-\ntation of calls within functions. These couplings were extracted via the Doxygen\nengine, and, albeit related, they represent different metrics for the links among mod-\nules.\n\u2013 The number of Afferent Couplings (Ca, or in-bound coupling) of a source folder\nrepresents the sum of other source folders that depend on it, and it is an indicator of\nthe its responsibility. [17] used this metrics for OO languages and specifically for\npackages. In the following, the focus is on source folders as packages of a system,\neven if the system is written in procedural languages.\n\u2013 The number of Efferent Couplings (Ce, or out-bound coupling) of a module repre-\nsents how many other modules it depends on, and it is an indicator of the folder\u2019s\nindependence [17].\n\u2013 The Instability (I) of a module is the ratio of efferent coupling (Ce) to total cou-\npling (Ce + Ca) such that I = Ce\n(Ca + Ce)\n. This metric is an indicator of the\nfolder\u2019s resilience to change [17]. The range for this metric is 0 to 1, with I = 0\nindicating the lowest instability for a folder and I = 1 indicating a completely un-\nstable folder [17]. Since Ca and Ce are measured at the folder level, and couplings\namong folders may greatly vary due to larger or smaller amount of calls, weighted\ninstability factors will be introduced below, termed wCa and wCe.\n3 Case Studies \u2013 Evolutionary Analysis\nThe first part of this study has been performed over all the public releases of four large\nOSS projects, and is specifically targeted at understanding the structural relationships\namong source folders. It can be observed that both MPlayer and XMMS share the same\nfunctionalities, yet they are developed by independent teams of developers. This is not\nan isolated case in the OSS environment; there are several small projects (such as kftp,\ngftp, sftp, among others, which are all dealing with the File Transfer Protocol man-\nagement) and large projects (such as the desktop GUIs, KDE and GNOME) which are\nbeing developed in parallel, without sharing or reusing code of other similar-scoped\nprojects. The reasons discovered by past works [34] are enough for developers to start\ntheir own project and duplicate efforts. This could mean also that the reuse of code\n4written by others has to overcome similar obstacles, apart from the technical ones, as\nalready evaluated by [20].\nIn terms of activity and code released, it was observed that the Arla project spans\nsome 8 years of development, Gaim approximately 6.5 years, MPlayer 4.5, while XMMS\n5 years. In terms of productivity, a high frequency of releases was visible for the Gaim\nand MPlayer projects (on average, more than one release per month), while it is lower\nin the case of Arla (less than one per month). The XMMS case finally shows that a new\nrelease has been available on average every two months. This general productivity trend\nhas had a repercussion on size achieved (in LOCs) and overall number of source folders\nfound in the latest observed release.\nIn terms of developers, it was observed that the MPlayer project was the most suc-\ncessful in forming an OSS community providing code patches, new functionalities and\nbug fixes (210 developers). A direct link between the community formed and the size\nachieved was also detected in the overall size at the latest observed release: in the cases\nof the 4 projects studied here, larger communities usually achieve larger systems, apart\nfrom the Gaim case (25 developers, 235 kLOCs), where a smaller community has\nachieved a larger system than those developed by other, larger communities (Arla \u2013\nwith 83 developers, 215 kLOCs \u2013 and XMMS \u2013 43 developers, 110 kLOCs).\nThe last row of table 1 shows which folders are already successfully reused across\nthe selected OSS systems. The most notably folders are the following:\n1. libraries of the C language (libc): they provide generic functionalities, like the I\/O\noutput (the module \u201cstdio.h\u201d), or the stub functions for socket communication (con-\ntained in \u201csocket.h\u201d). In this work, all the connections involving calls to elements\nof the generic libc libraries are, for simplicity, redirected to a generic \u201clibc\u201d folder;\n2. localisation\/international folder: the code contained in this specific subsystem trans-\nlates the messages, or the interfaces, of the application in the local language of the\nuser. OSS projects using code of this subsystem typically include it in a folder\nnamed \u201cintl\u201d.\n3.1 Source Folders as Reusable Units\nEmpirical findings reported in [23] demonstrate that object-oriented packages show four\nbasic patterns (\u201cpure client\u201d, \u201cpure server\u201d, \u201chybrid\u201d and \u201csilent\u201d), based on whether\nthey mostly require, or are called by, other packages. Albeit the cited work deals with\nJava packages and creates a taxonomy of components, the present work expands these\nfindings in two ways:\n1. it considers the folders of procedural languages as modules: when asked, the de-\nvelopers of the XMMS case study confirmed that source folders serve to them as\nplace-holders for \u201csimilar-scoped\u201d source files1. The \u201cwav\u201d folder, for instance,\nkeeps all the source files for the wav audio file format.\n2. it evaluates coupling among folders to build an instability index: folders with lowest\ninstability index are identified as candidates for reuse.\n1 Reported from conversations, email correspondence and private communication\n5In all the case studies apart Arla (see below), an initial value of at least 80% of all\nthe couplings are contained inside the same source folder. Considering only the \u201cfunc-\ntion calls\u201d coupling, this value is at least 90%. On a parallel level, all the analysed\nsystems show an initial pattern of growth in number of source folders, and a decreas-\ning coupling pattern: the overall amount of intra-folder couplings decreases while the\nsystem increases in size. This recalls the results of architectural erosion mentioned in\n[27]; as systems depart from the \u201cinitial architecture\u2019s intent and conceptual integrity\u201d,\ncouplings connect many other folders, and the whole architecture becomes much harder\nto understand and maintain.\nThe Arla case is an outlier, and shows a complex and intertwined system already\nfrom its initial releases, where half of the couplings affect two or more source folders.\nAll the other factors being equal, this system is going to experience less externally\nreusable folders, since most of the existing folders are already linked into a complex\nnetwork of couplings.\nThis initial result shows that, on average, OSS developers actively use source fold-\ners as containers of similar-scoped elements, and prefer linking elements in the same\nfolder rather than coupling different folders. However, this result should not be used\nto statically judge a software system; the Arla system is not inherently worse than the\nothers analysed, but on average its source folders are more instable, as per the definition\ngiven. Based on that, it is likely that selecting reusable folders from this system will be\nmore difficult.\n3.2 Evaluation of Reuse and Architectural Properties \u2013 Gaim\nThe trend of Gaim\u2019s folders growth has a stabilisation phase only in the middle part of\nits lifecycle. It is possible to conclude that MPlayer has achieved a mature status similar\nto XMMS, while Gaim is still on a fully development stage. The key findings in the case\nof Gaim are as follows:\n1. External libraries: this folder in the latest release of Gaim has an afferent coupling\nof 26 (out of 32 overall) folders, but no efferent coupling. This confirms that, from\na coupling perspective, the \u201clibc\u201d folders is highly reusable, and its instability is\nminimum.\n2. International folder: Gaim incorporates the \u201cintl\u201d folder, albeit not from the first\nrelease, and this folder behaves in a similar way to that observed below in the\nXMMS system. Again, this confirms it as a reusable asset, based on a coupling\nperspective.\n3.3 Identifying Reusable Folders \u2013 Dynamic Analysis\nIn this section, the data gathered in the evolutionary exploration of the four case studies\nwill be used to extract reusable folders. In particular, the coupling patterns of the \u201clibc\u201d\nand the \u201cInternational\u201d folders will be looked for in other folders. Low values in the\ninstabilities will trigger the definition of reusability of the folder, and a preference will\nbe given to folders with larger extensibility. Tentatively, two thresholds were set: the\n6joint combination of an instability lower than 0.2, and an extensibility larger than 10,\nhighlight a folder as reusable.\nIn table 1, a list of reusable folders per project is given, based on the instability and\nextensibility factors, defined above. The following points are relevant to interpreting the\ncolumns of the table:\n1. Each project has a set of rows, pointing at reusable folders (second column) found\nin that project. In each set, folders with a small instability (3rd column) and con-\ntaining a larger amount of source files (i.e. higher extensibility, 4th column) are\npreferred as potential reusable folders.\n2. Efferent coupling (5th column) has been evaluated via the product of the number\nof efferent folders and the number of total efferent calls. Afferent coupling (6th\ncolumn) is given by a similar product, but involving afferent folders and calls. Intra-\nfolder calls are summarised by the \u201cCalls to self\u201d column, while links to the \u201cLibc\u201d\nfolder are shown in the \u201cCalls to libc\u201d column. In many cases, the amount of intra-\nfolder calls are much more than the amount of efferent calls, which confirms the\nlowest instability of these folders.\n3. A description of each folder (last column of table 1) has been determined either\nfrom the description files contained in the folder, or by browsing the documentation.\nThis task is of key importance in order to describe a folder to potential reuses, and\nit has not been possible to automate this task.\nValidation of the predictors \u2013 Instability and Extensibility As stated above, and con-\nsidering the relatively few empirical studies focused on the reuse of OSS components,\nthe practice of reuse of OSS components is not widespread, and it needs further in-\nvestigation. The implemented algorithm selects folders which are being actively reused\nby these systems (the \u201crx\u201d folder, third row, provided by IBM, reused in the Arla sys-\ntem; the folder \u201ctremor\u201d in the MPlayer system). In terms of validation of the proposed\nmetrics as predictors of external reusability, the following lists the approach used:\n\u2013 Detecting reused folders: the list of reusable folders, as listed in table 1, has been\nprocessed in a semi-automatical way, through various engines: the main Source-\nForge site 2, the Krugle code search engine 3, and the FLOSSmole repository 4\nhave been searched against each of these folders. The SourceForge site has been\nsearched manually, browsing for the names of each folder, and analysing whether\nnew projects exist as a spin-off from that folder, or if existing projects include\nthe requested fodler; the Krugle engine has also been manually searched, and the\nexisting OSS projects that include the requested fodler have been detected; the\nFLOSSMole repository has been automatically searched for matching names of\nnew projects with the name of the requested folder.\n\u2013 Detection of actual reuse: the folders found in any of the information sources have\nbeen detected as such. No further analysis has been performed to check whether\n2 http:\/\/sourceforge.net\/\n3 http:\/\/www.krugle.com\/\n4 http:\/\/ossmole.sourceforge.net\/\n7their current coupling interaction, or their extensibility, has changed overtime as\nthe original case studies.\nBased on the approach above, it was found that some of the highlighted folders are\ncurrently distributed as independent OSS projects:\n\u2013 the \u201cliba52\u201d folder of MPlayer (7th row of table 1, and\n\u2013 the \u201clibxmms\u201d folder of XMMS (12th row of table 1).\nIn terms of \u201cexternal\u201d reusability [32], it was also found that some of the folders in\nthe MPlayer project are reused in various OSS projects:\n\u2013 the \u201cliba52\u201d folder is currently reused by the \u201cgst-ffmpeg\u201d project;\n\u2013 the \u201clibavcodec\u201d folder is currently reused by several other OSS projects (\u201cgst-ffmpeg\u201d,\n\u201cxmovie\u201d, \u201cquicktime4linux\u201d, \u201cmythtv\u201d among others);\n\u2013 the \u201clibfaad2\u201d folder is reused by the \u201caudacious-plugins\u201d project;\n\u2013 the \u201clibmpdemux\u201d folder is reused by the \u201cnmm\u201d project.\nFalse Positives The algorithm as illustrated above is subject to detect false positive,\ni.e. targetting folders as reusable but never reused. Based on the given thresholds (Insta-\nbility <= 0.2; Extensibility >= 10), the latest analysed releases of the analysed projects\npresented the false positives listed in the last column of table 1. One could gather these\nfalse positives into two main categories, the first contains those folders which currently\nrepresent most of the functionalities of the system (e.g. the \u201croot\/src\u201d folder in Gaim,\nand the \u201croot\/xmms\u201d in the XMMS system). These cases are typically large-grained\ncomponents, and in terms of reusability, they should be split into other components be-\nfore being reusable. The second category contains those other folders which present a\nreusability potential, but currently are not reused. It is the opinion of the authors that\nthese false positives represent missed reuse opportunities.\n4 Related Work\nThis work is related to various research areas: reuse of components, empirical studies\non software systems, graphic visualizations, software couplings, and software architec-\ntures. Since this work is in a larger research context, related to the study of the evolution\nof OSS systems, from which the case studies presented in this paper have been taken,\nempirical studies of OSS are also relevant to this research. In the following Section, an\noverview of the related works is presented, and consideration is given to determining\nhow this work expands upon the related work.\nThe research with the closest scope to the present work is presented in [20], where\na framework is proposed for the reuse of components in the OSS environment. It points\nout some key aspects to consider carefully, and which could impede its implementation,\nsuch as the license types, the ego-boosting problems or the programming languages;\nthese social aspects were previously stressed also in [34]. The technical aspects of in-\ncorporating external code are also mentioned, but no in-depth analysis is provided. The\n8present work studies some of the technical details of selecting reusable folders, but the\nmentioned aspects are all key points which should be given consideration as well.\nAs mentioned above, many reuse research studies (and a set of specific conferences\non the topic of \u201cSoftware Reuse\u201d) have been devoted to developing techniques [22, 37]\nand frameworks for globally enhancing reuse [3], establishing state-of-the-art and crit-\nical aspects of reuse [25, 30]. This present work has been conceived as having the OSS\ndevelopment communities as its main recipients and beneficiaries in order that results\nand techniques of this academic research can be fed back to the OSS communities and\nadvance the development of their systems.\nThis work is also related to the study of software architectures: previous works\n([18, 19, 38]) have defined and used different views of architecture of a software sys-\ntem. For example, [19] refers to a \u201c4+1\u201d view model to describe a system involving\nlogical, process, physical, development views, and user scenarios. This model defines\ndifferent perspectives for different stakeholders; the present work uses the concepts of\nlogical (\u201chierarchical\u201d) and process (\u201ccoupling\u201d) views to establish a comparison be-\ntween them. Similarly, [18] defines four architectural views of software systems, which\nin turn focus on coarser degrees of granularity (conceptual, or the abstract design level;\nmodule, or the concrete design level; code, or components level; and execution level).\nAs stated above, the present research focuses on the views which are closer to the work\nof software developers, as, for instance, the folder or the file level. In the selection of\nattributes, the limit is on those that it is possible to derive from projects found in exist-\ning OSS repositories with a reasonable effort. Hierarchical (\u201cabstract design level\u201d) and\ncoupling (\u201ccomponent level\u201d) views can both provide insight into how developers deal\nwith macro and micro-components of software systems, respectively.\nRecently, it has been realized that empirical data for OSS systems is more widely\navailable than that for proprietary systems. A general distinction can be drawn among\nthese studies. In part, research studies are based \u201con\u201d OSS systems \u201cfor\u201d advancing\nthe Open Source Software Engineering body of knowledge; other studies access OSS\nprojects for generating boundary crossing conclusions on software systems in general.\nRecent studies of the first kind include those examining single OSS projects [2, 15, 16]\n[14, 35], or those examining several OSS projects [6, 7, 28]. This work is intended as\na means to directly inform OSS developers of the availability of existing potentially\nreusable folders upon which they can build new applications.\nAs previously reported, recent work [11, 23] has been focused on OO package anal-\nysis, in order to characterise the roles of specific folders. This work is greatly inspired\nby these research studies, and focuses the \u201csource folder\u201d as the fundamental unit in\na network of couplings. The advances presented in this paper are based on consider-\ning interaction coupling within procedural languages as the most representative in an\nOSS context [7], on providing an evolutionary perspective of these interactions, and on\nfocusing the analysis on the reusability of folders based on their couplings.\nRecent work on code couplings in OSS has been reported in [1, 39], where the\nanalysis used the definition of common coupling; two or more modules are commonly\ncoupled when they share a reference to the same variable. Our approach is slightly dif-\nferent, since the source code (mostly C with some C++) is analysed by considering three\ndifferent couplings (dependency, and include coupling, and calls among functions). We\n9consider their relevance from the point of view of two different visualizations, in order\nto define a relationship between code coupling and what we define as the folder struc-\nture of a software system at a given stage of its evolution. The definitions of coupling, as\nused throughout this paper are mirrored in those presented in [36]; specifically, the com-\nmon coupling (in this paper calculated as file dependencies), and the control coupling\n(in this paper calculated as function calls).\n5 Conclusions, Further Work and Threats to Validity\nThis paper has presented an approach to evaluate the source folders of a software system\nas potentially reusable and shareable fine-grained components. The current state of the\nart in terms of reusability are two-fold: the commercial internal reuse, which is typically\nnot shared, and the COTS approach, which reuses \u201cblack-box\u201d components.\nThis paper focused its reuse approach on smaller components, the folders (or di-\nrectories) of a software system. Building on the vast amount of OSS knowledge and\nthe OSS code base, specific source folders were observed as successfully reused across\nOSS systems. An analysis of the coupling (i.e., the interactions among various other\nfolders) was carried out in order to characterise these specific folders based on patterns\nof interaction. The approach described above had two objectives. The first objective\nwas to look for similar coupling patterns in other folders in order to identify potential\ncandidates for reuse in other OSS projects. The second was to identify actions that de-\nvelopers should consider in order to improve the reusability of folders of their project\nfor other OSS projects.\nRegarding the first objective, the empirical results are based on literature defini-\ntions. It was found that successfully reused folders have a low instability index, i.e.,\nthey provide more services to other folders than they ask for from other folders. In a\nservice-based terminology, these folders act mostly as servers for other folders. This\ncoupling pattern was searched for in other source folders, and a list of folders with a\nsimilar behaviour was provided in table 1; these folders represent potentially reusable\ncomponents. In terms of external reusability, the algorithm identified some source fold-\ners which are already being reused in the OSS community as side projects of existing\nOSS systems.\nVarious areas are being evaluated as further work: a key aspect of this research\nthat should be enhanced is the extraction of information to characterise the potentially\nreusable source folders; this should be made automatic and non-invasive. Then, as ex-\nposed above, other types of coupling (dynamic and data couplings, inheritance etc.)\nhave been identified in previous works, and should be considered to provide a more\ncomplete picture. Finally, it is planned to use a tooling technique to bind and\/or resolve\nexternal dependencies: we wish to explore whether even modules with many dependen-\ncies could be highly reusable.\nThreats to validity have been identified in the following aspects:\n1. The usage of instability and extensibility alone could not be enough to categorize a\nsource folder as reusable. Due to transitive dependencies, developing a new module\nusing others, it will automatically becomes less reusable than the ones that were\n10\nreused (because Ce increases), unless it was manage to create many dependencies\nto the new module (such that Ca increase as well).\n2. Only the dependency, inclusion and function calls couplings are studied. Other\ntypes such as data coupling [5], or dynamic coupling, [1]), are not considered.\nFurther works will enhance our analysis to consider these types, and could bring\nmore insights into these types of coupling.\n3. Other characteristics determine whether a module should be reused in another sys-\ntem. Apart from those already cited by [20], there could be inherent reasons for not\nreusing a specific module, even if its instability is low at the coupling level. It could\nbe that it is too small, or that it is very complex (in terms of cyclomatic complexity,\nfor instance).\nReferences\n1. Arisholm, E., Briand L.C. and Foyen, A.: Dynamic Coupling Measurement for Object-\nOriented Software. IEEE Transactions on Software Engineering, 30(8):491\u2013506, 2004.\n2. Aoki, A., Hayashi, K., Kishida, K., Nakakoji K., Nishinaka Y., Reeves B., Takashima A.,\nand Yamamoto, Y.: A case study of the evolution of jun: an object-oriented open-source\n3d multimedia library. In Proceedings of the 23rd International Conference on Software\nEngineering, pages 524\u2013533, Toronto, Canada, 2001. ICSE.\n3. Basili, V.R. and Rombach, H.D.: Support for Comprehensive Reuse. IEEE Software Engi-\nneering Journal, 6(5):303\u2013316, 1991.\n4. Beecher, K., Boldyreff, C., Capiluppi, A., and Rank, S.: Evolutionary Success of Open\nSource Software: an Investigation into Exogenous Drivers. Electronic Communications of\nthe EASST: ERCIM Symposium on Software Evolution, 17(8), 2007.\n5. Briand, L.C., Morasca, S. and Basili, V.R.: Property-based Software Engineering Measure-\nment. IEEE Transactions on Software Engineering, 22(1):68\u201386, 1996.\n6. Capiluppi, A: Models for the Evolution of OS Projects. In Proceedings of the International\nConference on Software Maintenance, 65\u201374, Amsterdam, Netherlands, 2003.\n7. Capiluppi, A., Lago, P. and Morisio, M.: Evidences in the Evolution of OS Projects Through\nChangelog Analyses. In Proceedings of the 3rd Workshop on Open Source Software Engi-\nneering, Portland, OR, USA, 2003. ICSE.\n8. Capiluppi, A., Morisio, M., and Ramil, J.F.: Structural Analysis of Open Source Systems.\nIn N. H. Madhavji, J. F. Ramil, and D. Perry, editors, Software Evolution and Feedback:\nTheory and Practice, pages 207\u2013222. Wiley, 2006.\n9. Capiluppi, A., Morisio, M. and Ramil, J.F.: The Evolution of Source Folder Structure in\nActively Evolved Open Source Systems. In Proceedings of the 10th International Software\nMetrics Symposium, pages 2\u201313, 2004.\n10. Carney, D.: Assembling Large Systems from COTS Components: Opportunities, Cautions,\nand Complexities. Technical report, SEI Monographs on the Use of Commercial Software\nin Government Systems, 1997.\n11. Ducasse, S., Lanza, M. and Ponisio, L.: Butterflies: A visual Approach to Characterize Pack-\nages. In Proceedings of the 11th International Software Metrics Symposium, 2005.\n12. Ellson, J., Gansner, E., Koutsofios, L., North, S.C. and Woodhull G.: Graphviz, Open Source\nGraph Drawing Tools, 2002.\n13. Fenton N.E. and Pfleeger, S.L.: Software Metrics: a Practical and Rigorous Approach.\nThomson, 1996.\n14. Koch, S. and Schneider, G.: Effort, Cooperation and Coordination in an Open Source Soft-\nware Project: GNOME. Information Systems Journal, 12(1):27\u201342, 2002.\n11\n15. German., D. M.: Using Software Trails to Reconstruct the Evolution of Software. Journal of\nSoftware Maintenance and Evolution: Research and Practice, 16(6):367\u2013384, 2004.\n16. Godfrey, M.W. and Tu, Q.: Evolution in Open Source Software: A Case Study. In Proceed-\nings of the International Conference on Software Maintenance, pages 131\u2013142, San Jose,\nCA, USA, 2000.\n17. Gorton I., and Zhu, L.: Tool Support for Just-In-Time Architecture Reconstruction and Eval-\nuation: an Experience Report. In Proceedings of the 27th international conference on Soft-\nware engineering, pages 514\u2013523, 2005.\n18. Hofmeister, C., Nord, R. and Soni, D.: Applied Software Architecture. AddisonWesley,\n2000.\n19. Kruchten, P.: The 4+1 View Model of Architecture. IEEE Software, 12(5):88\u201393, 1995.\n20. Lang, B., Abramatic, J.F., Gonzalez-Barahona, J.M., Gomez, P., Pedersen, M.K.: Free\nand Proprietary Software in COTS-Based Software. Lecture Notes in Computer Science,\n34(12):2, 2005.\n21. Li, W. and Henry, S.: Object-oriented Metrics that Predict Maintainability. Journal of Sys-\ntems and Software, 23(2):111\u2013122, 1993.\n22. Llorens, J., Fuentes, J., and Astudillo, H.: Incremental Software Reuse. In Proceedings of\nthe International Conference on Software Reuse, Torino, Italy, 2006. ICSR.\n23. Lungu, M., Lanza, M. and Girba, T.: Package Patterns for Visual Architecture Recovery. In\nProceedings of the Conference on Software Maintenance and Reengineering, 32\u201341, 2006.\n24. Martin, R.C.: Agile Software Development, Principles, Patterns, and Practices. Prentice\nHall, October 2002.\n25. Matsumoto, Y.: Some Experience in Promoting Reusable Software Presentation in Higher\nAbstraction Levels. IEEE Transactions on Software Engineering, 12(1):43\u201360, 2004.\n26. McClure, C.: Software Reuse Techniques. Prentice-Hall, 1997.\n27. Medvidovic, N. and Jakobac, V.: Using Software Evolution to Focus Architectural Recovery.\nAutomated Software Engineering, 13(2):225\u2013256, 2006.\n28. Mockus, A., Fielding, R. T. and Herbsleb, J. D.: Two Case Studies of Open Source Soft-\nware Development: Apache and Mozilla. ACM Transactions on Software Engineering and\nMethodology, 11(3):309\u2013346, 2002.\n29. Mohagheghi, P. and Conradi, R.: Different Aspects of Product Family Adoption. In Proceed-\nings of 5th International Workshop on Product Family Evolution, pages 429\u2013434, 2003.\n30. Morisio, M., Ezran, M. and Tully, C.: Success and Failure Factors in Software Reuse. IEEE\nTransactions on Software Engineering, 28(4):340\u2013357, 2002.\n31. Morisio, M., Seaman, C.B., Parra, A.T., Basili, V.R., Kraft, S.E. and Condon, S.E.: Investi-\ngating and Improving a COTS-based Software Development. In Proceedings of International\nConference on Software Engineering, pages 32\u201341, 2000.\n32. Poulin, J.S.: Measuring Software Reuse: Principles, Practices, and Economic Models.\nAddison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1996.\n33. Pressman R.S.: Software Engineering: a Practitioner\u2019s Approach (2nd ed.). McGraw-Hill,\nInc., New York, NY, USA, 1986.\n34. Senyard, A. and Michlmayr, M.: How to Have a Successful Free Software Project. In Pro-\nceedings of the 11th Asia-Pacific Software Engineering Conference, pages 84\u201391, Busan,\nKorea, 2004. IEEE Computer Society.\n35. Stamelos, I., Angelis, L., Oikonomou, A., and Bleris, G. L.: Code Quality Analysis in Open-\nSource Software Development. Information Systems Journal, 12(1):43\u201360, 2002.\n36. Stevens, W.P., Myers, G.J. and Constantine, L.L.: Structured Design. IBM Systems Journal,\n13:115\u2013139, 1974.\n37. Torchiano, M. and Morisio, M.: Overlooked Aspects of COTS-based Development. IEEE\nSoftware, 21(2):88\u201393, 2004.\n12\n38. Tu, Q. and Godfrey, W. M.: The Build-Time Software Architecture View. In Proceedings\nof 2001 International Conference on Software Maintenance, pages 65\u201374, Florence, Italy,\n2001. IEEE.\n39. Yu, L., Schach, S.R., Chen, K. and Offutt J.: Categorization of Common Coupling and Its\nApplication to the Maintainability of the Linux Kernel. IEEE Transactions on Software En-\ngineering, 30(10):43\u201360, 2004.\nFolder I E wCe wCa Calls\nto self\nCalls\nto libc\nDescription False\npositive\nArla project \u2013 reusable folders\nroot\/lib\/ro-\nken\n0.01 145 11*73 71*1326 395 367 Library handling missing or broken\nparts\nyes\nroot\/rx 0.03 33 13*111 53*1042 495 141 Library implementing the rx proto-\ncol\nno\nGaim project \u2013 reusable folders\nroot\/src 0.030 139 12*1117 30*14462 9437 868 Common source files of the Gaim\nsystem\nyes\nMPlayer project \u2013 reusable folders\nroot\/liba52 0.02 23 2*21 9*230 196 15 ATSC A\/52 stream decoder no\nroot\/libav-\ncodec\n0.03 154 22*155 27*4493 3780 168 Library for coding and decoding\nvideo and audio streams\nno\nroot\/libaf 0.03 38 7*52 25*464 294 112 Audio filter layer library no\nroot\/lib-\nfaad2\n0.06 86 6*23 2*1063 1096 37 Decoding library for AAC formats no\nroot\/libmp-\ndemux\n0.06 136 21*257 28*2852 2740 353 Demultiplexer Library for MPEG,\nASF, AVI formats\nno\nroot\/tremor 0.045 29 4*17 4*363 372 34 Tremor integer-only Ogg Vorbis au-\ndio codec\nno\nroot\/loader 0.054 27 8*203 24*1192 688 75 N\/A yes\nroot\/osdep 0.066 25 6*47 23*174 17 54 N\/A yes\nroot\/loader\/\nwine\n0.138 27 5*142 14*318 83 11 Header files for the Microsoft Win-\ndows compatibility\nyes\nXMMS project \u2013 reusable folders\nroot\/lib-\nxmms\n0.003 19 4*20 25*1081 416 86 Generic library for the XMMS\nproject\nno\nroot\/xmms 0.091 87 20*277 26*2121 2157 121 Common source files of the XMMS\nsystem\nyes\nTable 1. Reusable folders detected via the coupling analysis: wCe refers to the product \u201cEfferent\nfolders * Efferent calls\u201d, while wCa refers to a similar product of afferent folders and calls\n"}