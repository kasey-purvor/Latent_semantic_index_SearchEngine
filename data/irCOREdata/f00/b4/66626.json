{"doi":"10.1109\/SFCS.2001.959896","coreId":"66626","oai":"oai:dro.dur.ac.uk.OAI2:670","identifiers":["oai:dro.dur.ac.uk.OAI2:670","10.1109\/SFCS.2001.959896"],"title":"Planar tautologies hard for resolution.","authors":["Dantchev, S.","Riis, S."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2001-10","abstract":"We prove exponential lower bounds on the resolution proofs of some tautologies, based on rectangular grid graphs. More specifically, we show a 2\/sup \/spl Omega\/(n)\/ lower bound for any resolution proof of the mutilated chessboard problem on a 2n\/spl times\/2n chessboard as well as for the Tseitin tautology (G. Tseitin, 1968) based on the n\/spl times\/n rectangular grid graph. The former result answers a 35 year old conjecture by J. McCarthy (1964)","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66626.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/670\/1\/670.pdf","pdfHashValue":"5d5df74fd48c3058174e2b9ad51ed502097375e7","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:670<\/identifier><datestamp>\n      2010-11-01T15:13:43Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Planar tautologies hard for resolution.<\/dc:title><dc:creator>\n        Dantchev, S.<\/dc:creator><dc:creator>\n        Riis, S.<\/dc:creator><dc:description>\n        We prove exponential lower bounds on the resolution proofs of some tautologies, based on rectangular grid graphs. More specifically, we show a 2\/sup \/spl Omega\/(n)\/ lower bound for any resolution proof of the mutilated chessboard problem on a 2n\/spl times\/2n chessboard as well as for the Tseitin tautology (G. Tseitin, 1968) based on the n\/spl times\/n rectangular grid graph. The former result answers a 35 year old conjecture by J. McCarthy (1964). <\/dc:description><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n         42nd IEEE Symposium on Foundations of Computer Science, FOCS 2001, 14-17 October 2001, Las Vegas, Nevada ; proceedings. New York: IEEE, pp. 220-229<\/dc:source><dc:date>\n        2001-10<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:670<\/dc:identifier><dc:identifier>\n        doi:10.1109\/SFCS.2001.959896<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/670\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/SFCS.2001.959896<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/670\/1\/670.pdf<\/dc:identifier><dc:rights>\n        \u00a9 2001 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2001,"topics":[],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n01 November 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nDantchev, S. and Riis, S. (2001) \u2019Planar tautologies hard for resolution.\u2019, in 42nd IEEE Symposium on\nFoundations of Computer Science, FOCS 2001, 14-17 October 2001, Las Vegas, Nevada ; proceedings. New\nYork: IEEE, pp. 220-229.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/SFCS.2001.959896\nPublisher\u2019s copyright statement:\n2001 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for\nadvertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists,\nor to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n\u201cPlanar\u201d tautologies hard for Resolution\nStefan Dantchev1;2\n1BRICS\u0003, Dept. of Computer Science\nUniversity of Aarhus\n540 Ny Munkegade\nDK-8000 Aarhus C, Denmark\ndantchev@dcs.qmw.ac.uk\nS\u00f8ren Riis2\n2Dept. of Computer Science\nQueen Mary, University of London\nMile End Road\nLondon E1 4NS, UK\nsmriis@dcs.qmw.ac.uk\nAbstract\nWe prove exponential lower bounds on the resolution\nproofs of some tautologies, based on rectangular grid\ngraphs. More specifically, we show a 2\n(n) lower bound for\nany resolution proof of the mutilated chessboard problem\non a 2n\u0002 2n chessboard as well as for the Tseitin tautolo-\ngy based on the n\u0002 n rectangular grid graph. The former\nresult answers a 35 year old conjecture by McCarthy.\n1 Introduction\nIn the paper, we prove an exponential lower bound for\nany resolution proof of the mutilated chessboard problem\nas well as for the Tseitin tautologies on a rectangular grid\ngraph.\nExponential lower bounds for resolution are known for\nmatching problems based on the complete bipartite graph\nK\nn+1;n\nas well as for a special class of graphs, namely ex-\npanders (see [4], [8], [3]). Exponential lower bounds for T-\nseitin tautologies are also known for expander graphs only\n[7]. In the recent paper [2], a common framework is given\nthat generalises and simplifies all the known proofs. Unfor-\ntunately, it does not work for tautologies based on planar\ngraphs.\nThus our main contribution is that we obtain exponen-\ntial lower bounds for tautologies, based on grid graphs. The\nmain tool, we use in our proofs, is the representation of res-\nolution proofs as Prover-Adversary games. It is introduced\nby Pudlak in his recent paper [6]. On a technical level, our\ncontribution is a new way to introduce randomness in Ad-\nversary\u2019s strategy (although Pudlak, himself, speaks about\n\u201csuper-strategy\u201d rather than \u201crandomised strategy\u201d). In do-\ning so, we introduce the concept of tiling games. It turns out\n\u0003Basic Research In Computer Science, Centre of the Danish National\nResearch Foundation\nthat the combination of our reduction of the original prob-\nlems to tiling games and Pudlak\u2019s idea of considering proofs\nas games gives very \u201cclean\u201d proofs of the lower bounds.\nThe paper is organised as follows. First, we define the\ntwo problems and explain briefly Pudlak\u2019s idea of consid-\nering resolution proofs as games. We then introduce tiling\ngames and prove lower bounds for them. Finally, we show\nthe reduction from the original problems to tiling games.\nd\nu\nr\nd\nu\nl l r\nFigure 1. The two original problems\nMutilated chessboard This problem has the distinction\nto be the earliest proposed hard problem for theorem prover-\ns [5]. The problem is the following: given a 2n\u0002 2n chess-\nboard with two diagonally opposite squares missing (see the\nleft side of Fig. 1), prove that it cannot be covered with\ndominoes. We can consider it as a matching problem (the\nleft part of Fig. 2): squares are vertices of the graph, and\nthere is an edge between every two neighbouring squares.\nThus one component of the bipartite graph consists of black\nsquares and the other consists of white ones. Two miss-\ning squares are of the same colour which implies one of the\ncomponents in the graph has two more vertices than the oth-\ner. That is why there is no perfect matching, i.e., dominoes\ntiling of the mutilated chessboard.\nThe formalisation of the problem as a set of clauses is\nas follows. For every square, we introduce (at most) four\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \nvariables u; r; d; l corresponding to the four possible ways\nof covering a square by a domino. We then write down\nthe following clauses, saying that every square is covered\nexactly once:\n1. fu; r; d; lg\n2. fu; rg,\n\b\nu ;d\n\t\n,\n\b\nu ;l\n\t\n,\n\b\nr; d\n\t\n,\n\b\nr; l\n\t\n,\n\b\nd; l\n\t\nWhenever a variable does not make sense, i.e., a domino,\ngoing outside the chessboard, we replace the corresponding\nvariable by \u201cfalse\u201d.\nFigure 2. The \u201creverse\u201d formulations\nTseitin tautologies on grid graphs The definition of the\nproblem is as follows. Given a undirected graph, we at-\ntach a propositional variable to every edge. We also selec-\nt one vertex and label it by \u201ctrue\u201d, all others are labelled\nby \u201cfalse\u201d. We require the exclusive-or of all the adjacent\nedges of every vertex to be equal to its label. Obviously, this\nis impossible as every variable occurs exactly twice in the\nexclusive-or part of these equations, but the exclusive-or of\nall the labels is \u201ctrue\u201d.\nOn a n \u0002 n rectangular grid graph, we colour white one\nof the corners, and all the other vertices are black (see the\nright side of Fig. 1). We then write the following set of\nclauses:\nu\b r \b d\b l =\n\u001a\nfalse for all the black vertices\ntrue for the only white vertex\n\u000f fu; r; d; lg, fu; r; d; lg,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu ;r; d; l\n\t\nfor a\nblack vertex\n\u000f fu; r; d; lg, fu; r; d; lg,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d; l\n\t\n,\n\b\nu; r; d ;l\n\t\n,\n\b\nu; r; d; l\n\t\nfor\nthe white vertex\nAgain, all the variables that do not make sense are replaced\nby \u201cfalse\u201d.\nThere is another, chessboard-style formulation of the\nproblem. Given a chessboard, tile it by dominoes, such that\nevery square is covered by even number of tiles and one of\nthe corners is covered by odd number of tiles. The formula-\ntion is illustrated on the right side of Fig. 2.\n2 Preliminaries\nResolution We first give some definitions. A literal is ei-\nther a propositional variable or the negation of propositional\nvariable. A clause is a set of literals. It is satisfied by a truth\nassignment if at least one of its literals is true under this\nassignment. A set of clauses is satisfiable if there exists a\ntruth assignment satisfying all the clauses.\nResolution is a proof system designed to refute given set\nof clauses, i.e., to prove that it is unsatisfiable. This is done\nby means of the resolution rule\nC\n1\nS\nfvg C\n1\nS\nf:vg\nC\n1\nS\nC\n2\n;\ni.e., we can derive a new clause from two clauses that con-\ntain a variable and its negation respectively. The goal is to\nderive the empty clause from the initial ones. For technical\nreasons only, we use the weakening rule\nC\nC\nS\nfvg\n;\neven though its use is not essential and can be avoided.\nAnywhere we say we prove some proposition, we mean\nthat first we take its negation in a clausal form and then use\nresolution to refute these clauses.\nThere is an obvious way to represent every resolution\nrefutation as a directed acyclic graph whose nodes are la-\nbelled by clauses. The sources, i.e., the vertices with no\nincoming edges, are the initial clauses, and the only sink,\ni.e., the vertex with no outgoing edges, is the empty clause.\nIf we reverse the directions of the edges, and consider the\nsink as a root and the sources as leaves we get a branching\nprogram. It is easy to see that it solves the following search\nproblem, associated with the given set of unsatisfiable claus-\nes: given an assignment, find a clause that falsifies it. Un-\nfortunately, the reverse is not true, that is we cannot convert\nany branching program, solving the search problem, into a\nresolution proof.\nAs a matter of fact, there are polynomial-size branching\nprograms, solving both problems from the paper. Of course,\nthis does not contradict to our main result, as it shows that\nthese branching programs cannot be transformed into reso-\nlution proofs.\nIn our proof we essentially use a representation of resolu-\ntion proofs as Prover-Adversary games, called further Res-\nolution Games. This approach is introduced by Pudlak in\n[6]. A brief description follows.\nProofs as Games There are two players, named Prover\nand Adversary. An unsatisfiable set of clauses is given. Ad-\nversary claims wrongly that there is a satisfying assignment.\nProver\u2019s task is to convict him in lying. A position in the\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \ngame is a partial assignment of the propositional variables.\nThe game start from the empty position. Prover has two\nkind of moves:\n1. She queries a variable, whose value is unknown in the\ncurrent position. Adversary answers, and the position\nthen is extended with the answer.\n2. She forgets a value of a variable, which is known. The\ncurrent position is then reduced, i.e., the variable value\nbecomes unknown.\nThe game is over, when the current partial assignment fal-\nsifies one of the clauses. Prover then wins, having shown a\ncontradiction.\nAs she can always win, simply querying consecutive-\nly all the variables and not forgetting anything, Adver-\nsary\u2019s task is to force Prover to use big memory, \u201cbig\u201d\nmeaning exponential in the number of variables. We as-\nsume that she keeps her strategy as a list of ordered pairs\n(position; move), where \u201cposition\u201d and \u201cmove\u201d have their\nnatural meaning. Thus, it is enough for Adversary to use\na strategy, which ensures big number of different possible\npositions, no matter how Prover plays.\nThe reduction from a resolution proof to Resolution\nGame should now be clear. Although trivial, we will not\nexplain it here and refer to [6] for all the details. We should\nhowever note that a deterministic Adversary\u2019s strategy cor-\nresponds to a single path in the proof\u2019s graph. Therefore, he\nhas to use a randomised strategy (called \u201csuper-strategy\u201d in\nPudlak\u2019s paper) in order to enforce a big enough subgraph.\nIt is very important to make the following convention-\ns: Every time we say \u201cProver\u2019s strategy\u201d, we mean wining\nstrategy, as only a wining strategy corresponds to a resolu-\ntion proof. Every time we say \u201cProver ... in order to win\u201d\nwe also mean wining strategy, i.e., Prover is not interest-\ned in wining a single game, but any game, no matter how\nAdversary plays.\nWe can finally state the main results and explain infor-\nmally the main ideas behind the proofs.\nMain results and outline of the proofs. We prove the\nfollowing two theorems:\nTheorem 2.1 Any resolution proof of the Mutilated Chess-\nboard problem is of size 2\n(n).\nA weaker version of the above theorem, with\np\nn in the\nexponent, is proven independently in [1].\nTheorem 2.2 Any resolution proof of Tseitin tautologies,\nbased on n\u0002 n rectangular grid graph, is of size 2\n(n).\nThe general idea of the proofs is following:\nWe consider Resolution game. Clearly, Prover\u2019s queries\nare pairs of neighbouring squares, and Adversary\u2019s answers\nare dominoes, covering these pairs. A domino can be ei-\nther \u201cyes\u201d or \u201cno\u201d, with the natural meaning. We divide\nthe chessboard into non-overlapping constant-size squares\ncalled zones. During the game every zone is either com-\npletely empty or completely covered by dominoes by Ad-\nversary. Here \u201ccompletely\u201d means the entire zone, excep-\nt possibly few squares on the borders. In the first, ran-\ndomised, phase of his strategy, Adversary first construct-\ns many covers of the zone, depending on all the possible\nshapes of its neighbouring zones, and he then picks one\nof them at random and remembers it. These covers satisfy\ncertain conditions that will be explained later in the paper,\nwhen proving the results. The second, deterministic, phase\nis the real game. When Prover queries a variable, i.e., a\ndomino, inside an empty zone, Adversary puts the cover, al-\nready chosen in the first phase. He does not however reveal\nthe cover to Prover, but only answer the question consistent-\nly with the cover. If Prover forgets all the queried variables\ninside a covered zone, Adversary removes the cover, so that\nthe zone becomes empty again. Thus a zone is nonempty if\nand only if it contains at least one \u201csignificant\u201d variable (the\nexact meaning of this is given in the detailed proof), whose\nvalue is kept by Prover. There are two main points in our\nproof:\n1. Prover has to remember \n (n) variable values at some\npoint in the game in order to win. That is in any reso-\nlution proof we have a clause, containing linear in n\nnumber of variables. This can be proven on some-\nwhat higher level, depending on the connection be-\ntween zones, but not on their specific covers or partic-\nular shapes. A nice abstraction of that is Tiling Games.\nThey are considered in a separate section.\n2. Every two values, kept by Prover and belonging to dif-\nferent zones are independent of each other. Moreover,\ngiven any value, kept by Prover, there is a constant\nprobability, bounded away from 0 and 1, that the value\nagrees with the first, randomised phase. These prop-\nerties depend on randomised phase only, and on some\nspecific properties of the zone covers, designed there.\nThis can be thought as a reduction of Tilling Game to\nResolution Game.\nIt is not hard to see that these two conditions imply an ex-\nponential lower bound on Provers\u2019s memory, and therefore\non any resolution proof of the corresponding problem.\nThe rest of the paper is organised as follows. We first\nintroduce Tiling Games. They allow us to work on the level\nof zones only, when proving the first main claim. We also\nprove an exponential lower bound for these games. After\nthat, we show a reduction between Resolution Games and\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \nTiling Games that preserves the lower bound. This proves\nthe second main point.\n3 Tiling games\nIn this section, we introduce tiling games and prove some\nresults about their complexity.\nDefinition of a general tiling game. The board of the\ngame consists of m \u0002 m squares. Any of them is a per-\nfect square, except the bottommost right one that has a dent\non its right side. The board is shown on the left of Figure\n3. The tiles of the game are squares. Their sides are of\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0000\u0000\u0000\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0001\u0001\u0001\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\nThe board\nA B C\nShapes of the tiles\nFigure 3. The tiling games\nthree kinds: \u201cflat wall\u201d, \u201chump\u201d, and \u201cdent\u201d, as shown on\nthe right of Figure 3, pictures A, B, and C, respectively. A-\npart from its shape, every tile has also a colour, either red\nor blue. When we say a general tiling game, we mean a\ngame where any set of shapes is allowed, whereas to get a\nparticular tiling game, we fix this set. Thus, a (particular)\ntiling game is completely determined by its set of tiles. In\nboth cases, every colour, either red or blue, is allowed for\nevery shape.\nIn what follows, we will however consider only sets of\ntiles, having the property that they cannot completely cov-\ner the board. In particular, we put the restriction that the\ndifference between the number of dents and the number of\nhumps has to be even for any tile from the set. A trivial\nparity argument then implies the impossibility of tiling the\nboard. We can also note that there are 41 such tiles, and\ntherefore 241 possible tiling games, as any subset of tiles\ndefines a different one. We will however be interested in\nonly two of them.\nThere are two players, whose names are Prover and Ad-\nversary. Adversary claims that there is a tiling of the board.\nProver\u2019s task therefore is to force a clear contradiction, i.e.,\na tile on the board, which is inconsistent with one of it-\ns neighbours. In that case, she wins the game, which is\nplayed as follows: At the beginning the table is empty. At\nany round Prover starts by doing one of the following two:\n1. She asks Adversary to put a tile on a particular square.\nHe does so, and the round is over. We assume that\nProver has infinite number of tiles of any kind (that is\nany allowed shape and any colour).\n2. She removes any tile, already on the board. Adversary\ndoes not do anything, and the round is over.\nThe game is over, when Adversary is not able to play in the\nfirst case. That is, there is no tile, whose shape is consis-\ntent with the tiles, already on the board (note that the colour\ndoes not play any role here). Prover can always win by sim-\nply asking about all the squares and not removing anything.\nAdversary, knowing this, does not hope to play forever. His\ntask instead is to force Prover to use big memory, no matter\nwhat she does.\nTherefore, we need finally to explain how Prover \u201cmem-\norises\u201d her strategy: The strategy is kept again as a list of or-\ndered pairs (position; move), where \u201cposition\u201d and \u201cmove\u201d\nhave their natural meaning. It is now clear how Prover\nplays: In the beginning, she finds a pair, having its position-\npart empty. She then makes the move-part of the pair. A\nnew position appears. Prover finds a pair, having the new\nposition in its position part, and then makes the move-part,\nand so on... We need also the restriction, that every two\npairs from Prover\u2019s list have to have different position-parts,\nthat is Prover\u2019s strategy is deterministic.\nWe can now explain how Adversary enforces the use of\nbig memory.\nAdversary\u2019s strategy and general lower bounds. First\nof all, let us note, that Adversary\u2019s strategy cannot be deter-\nministic, as Prover can query about all the squares in some\nfixed order, never removing anything from the board, thus\nwining the game in m2 memory.\nWe will now describe a randomised strategy, which is\noptimal against any Prover\u2019s strategy.\nThe first, randomised, part is very simple. It involves\nthe colours only. We choose the colour for all the squares\nindependently, at random, with equal probabilities of 1=2.\nDuring the game, when asked to put a tile on a particular\nsquare, Adversary always uses the initially chosen colour.\nThe second part is completely deterministic. It involves\nthe shapes of the tiles only. To explain it, we need some\ndefinitions.\nDefinition 3.1 Given a position, a bad square (for this po-\nsition) is a square, such that the board, except this square,\ncan be tiled. The bad region is the set of all the bad squares.\nIn general, it is not even clear that a bad square exists for\nany position. From now on, we shall however consider only\ntiling games, which satisfy the following\nProperty 1 The bad region for the starting position, i.e., an\nempty board, is the entire board, itself.\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \nInformally speaking, we would like to be able to move\nthe \u201cproblematic\u201d square from the south-eastern corner to\nany other position. We can make the following trivial ob-\nservation:\nProposition 3.2 Given a position where the bad region\nconsists of two or more squares, Prover cannot win imme-\ndiately, i.e., at this round.\nThe next observation, although simple, is essentially the\nsecond part of Adversary\u2019s strategy.\nProposition 3.3 Adversary can play in such a way, that the\nsize of the bad component decreases by at most a constant\nfactor after every round.\nProof Let us denote the bad region by B. If Prover re-\nmoves a tile from the board, the size of B remains the\nsame or increases. Let us suppose now that Prover asks\nAdversary to put a tile on the empty square s. Adversary\nthen tries all possible tiles t\n1\n; t\n2\n: : : t\nk\n, i.e., shapes consis-\ntent with the non-empty neighbours of s, as the colour has\nalready been decided in the first part of the strategy. For\neach of these k possibilities, we denote the new bad region\nby B\n1\n; B\n2\n: : : B\nk\n. Let us now observe that any bad square\nfor the initial position, b, has either to be s (if it is bad it-\nself) or to belong to some B\nj\n. The latter holds, because in\ntiling the entire board except b, there is a tile among the t\nj\ns,\nput on s, and then b certainly is in the corresponding B\nj\n.\nTherefore, we have\njB\n1\nj+ jB\n2\nj+ : : :+ jB\nk\nj \u0015 jBj \u0000 1:\nIt is now clear that Adversary has to take the most natural\ndecision, that is to maximise the size of the new bad region.\nIn this case\njB\nnew\nj \u0015\njBj \u0000 1\nk\n\u0015\njBj\n2k\n:\nThis completes the proof, as k is less or equal to the number\nof all possible shapes of tiles, which is a constant (at most\n41, as already mentioned). 2\nAn important consequence is the following fact.\nProposition 3.4 In any play of a tiling game there has to be\na point, when the bad region area is \u000bm2 for some constant\n\u000b, strictly between 0 and 1. At the same round the border\nof the bad area has to be of length \fm for some positive\nconstant \f depending on \u000b.\nInformally speaking, there must be a point, when the bad\nregion is \u201cbig\u201d, i.e., quadratic in m. Naturally, in order to\n\u201csurround\u201d such a big area, we need a \u201cbig\u201d, i.e., linear in\nm, border. Of course, we need first to rigorously define\nthe concepts mentioned in the statement, even though their\nmeaning is intuitively clear.\nTwo squares on the board are neighbours if they have\na common side. A region is an arbitrary set of squares.\nThe border and the complement of the region R, @ (R) and\nco (R), are defined as follows: @ (R) is the set of squares,\nhaving the property that each element in-there has a neigh-\nbour in R. co (R) is all the rest, i.e., it contains every\nsquare that is in neither R nor @ (R). The closure of R\nis R = R [ @ (R). When we say \u201carea\u201d and \u201clength\u201d, we\nreally mean \u201cnumber of squares\u201d.\nWe can now prove the proposition, itself.\nProof Let us observe that the area of the bad region goes\nfrom its initial valuem2 to 0 at the end, as it is a wining play\nfor Prover (Proposition 3.2). Consider the first round, after\nwhich the area drops belowm2=2. After that round, it has to\nbe bigger than m2= (2\u0002 2\u0002 41), according to Proposition\n3.3. This proves the first part, with \u000b 2 [1=164; 1=2].\nFor the second part, we will use the following lemma\nwhose proof is omitted, because of the space restriction.\nLemma 3.5 For any region R, j@ (R)j2 \u0015\nmin\nn\n\f\n\f\nR\n\f\n\f\n;\n\f\n\f\n\f\nco (R)\n\f\n\f\n\f\no\n.\nClearly, it implies the second claim in the proposition, with\n\f = min\n\b\np\n\u000b;\np\n1\u0000 \u000b\n\t\n. In our special case \f =\np\n\u000b, as\n\u000b \u0014 1=2. 2\nLet us summarise what has been done so far: We have\nconsidered a general tiling game, under the only (rather\nweak) assumption that the bad region is the entire board\nat the starting position. We have proven that in any game\nplayed, there is a point, when the bad region has to have a\nborder linear in m . We can note that we have not used the\ncolours of the tiles in any way.\nWe can now formulate our second assumption.\nProperty 2 In any position in the game, the number of tiles\non the board is linear in the length of the border of the bad\ncomponent.\nAdding this general, though still weak, assumption, to\nthe first one, we can easily prove an exponential in m lower\nbound on Prover\u2019s memory.\nTheorem 3.6 In a tiling game, satisfying properties 1 and\n2, any Prover\u2019s wining strategy is of size 2\n(m).\nProof According to Lemma 3.4, there is a point in the game,\nwhen the bad area is of size quadratic in m. At the same\npoint, the border has to be of size\n (m). By Property 2,\nthe number of tiles on the board is \n (m), too. The prob-\nability, that this position is consistent with the first part of\nAdversary\u2019s strategy, random colouring, is 1=2\n(m). There-\nfore Prover has to have at least 2\n(m) different position in\nthe memory, as otherwise, there would be a choice of the\ncolours, for which she does not win.2\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \nAt the end, let us note that our two lower bounds on the\nsize of both a position in the game (linear) and Prover\u2019s\nmemory (exponential) are tight. A simple divide-and-\nconquer algorithm yields upper bounds of O (m) for the\nsize of the position at any time and 2O(m) for the memory\nProver needs.\nWhat remains to be done is to prove that our two assump-\ntions are indeed correct for the concrete tiling games we are\ninterested in.\nLength lower bounds for particular games We shal-\nl first define the two games.\n1. Tseitin is the tiling game, having as a set of tile-shapes\nall the shapes for which the difference between the\nnumber of dents and the number of humps is even.\n2. Mutilated Chessboard is the tiling game, having as a\nset of tile-shapes all the shapes for which the number\nof dents equals the number of humps.\nClearly, Mutilated Chessboard game is a restricted version\nof Tseitin game. Thus, every lower bound for the former\ngame applies to the latter, too. On the other hand, one could\nexpect that proving lower bounds for Mutilated Chessboard\ngame would be much harder. It is indeed the case, as the\nreader will see. This is the reason, we spend most of the\nrest of the paper on Mutilated Chessboard game rather than\non Tseitin one.\nFirst of all, let us observe that both games trivially fulfill\nthe first assumption, saying that initially, the bad region is\nthe entire board.\nThus only the second assumption, namely that at any\nround, the number of tiles on the board is linear in the\nborder-length of the bad region, is to be checked.\nWe start with the easier, Tseitin, tiling game. In this case,\nthe deterministic part of Adversary\u2019s strategy can be simpli-\nfied. The key observation is that we can always keep the bad\nregion isolated.\nDefinition 3.7 The bad region is isolated iff it is separated\nby tiles from any other region of the board, consisting of\nempty squares. In other words, a neighbour of a bad square\nis either another bad square or a tile, but never a square,\nwhich is not bad.\nIn general, we need to consider all the connected com-\nponents of empty squares. We can keep the following in-\nvariant: exactly one of them is bad and the others are good,\ni.e., they can be tiled. It can be easily proven that the on-\nly component having one more dent that humps is the bad\none, and moreover any component, having equal number of\ndents and humps, is good. When Prover asks a question, she\nmay disconnect the component, where the question is, into\n(at most four) other components. Conversely, if Prover re-\nmoves a tile from the board, she may join some previously\ndisconnected components into a new one. Adversary need-\ns to be careful only in the case when the Prover\u2019s question\ndisconnects the current bad component. If so, Adversary\nanswers in such a way that the biggest of the new obtained\ncomponents becomes bad and the rest become good. It is\neasy to see that Adversary can always do that by a tile, con-\nsistent with the neighbours of the queried square. After any\nround of the game, the bad component can decrease by a\nfactor of four at most, thus Proposition 3.3 holds, and so\ndoes Proposition 3.4 with \u000b 2 [1=16; 1=2] and \f = 1=4. As\nthe bad region is always isolated, its border consists of tiled\nsquares only. Therefore the second assumption is fulfilled,\nand Theorem 3.6 then applies, giving us the following:\nLemma 3.8 Prover needs at least 2m4 memory cells in or-\nder to win Tseitin tiling game.\nLet us now consider the other tiling game, Mutilated\nchessboard one. It is now not so easy as before, as the bad\nregion does not need to be isolated. This is illustrated on\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0000\u0000\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\n\u0001\u0001\nFigure 4. Tiling to flow correspondence\nFigure 4. Black squares are the tiled ones. We call them also\nmarked squares. The bad region is shown in gray. Its bor-\nder contains not only marked squares, but also some empty\nsquares, which are shown dashed. One could, in general,\nthink that it is possible, in some clever way, to \u201csurround\u201d\na \u201cbig\u201d bad area, using only \u201cfew\u201d tiles. Our intuition how-\never tells us, that it should be impossible. If the border of\nthe bad region is coarse, it would be possible to \u201cpush\u201d a\nproblematic square through it, thus \u201cextending\u201d the bad re-\ngion, which is impossible by its definition. The following\nargument formalises the intuition.\nWe shall first explain the connection between of a po-\nsition in the Mutilated Chessboard game to max\u2013flow in a\ngraph. The vertices of the graph are the empty squares and\nthere is an edge between any two neighbours. We call a\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \nsource an empty square such that there are more dents in-\nside it than the dents in the neighbours, adjacent to the con-\nsidered square, i.e., the humps of the square if it were tiled.\nThe difference between the number of these two number-\ns is the capacity of the source. On the picture, there are\nfour sources of capacity one and one source of capacity t-\nwo. They are the squares with outgoing arrows only. In\ngeneral, when counting them, we take into account the ca-\npacity, so that we can say that there are six sources on the\npicture. If we exchange \u201cdents\u201d by \u201chumps\u201d and vice versa\nin the above definition, we get the definition of a sink. There\nare five sinks on the picture that are exactly the squares with\nincoming edges only. Obviously, the number of sources is\nalways greater by exactly one than the number of sinks dur-\ning the game. It is clear that the bad squares and only they\nhave the following property: if we choose one of them as\na sink, so that the number of sources equals the number of\nsinks, there is a max\u2013flow of capacity equal to the num-\nber of sources. An example is given on Figure 4, where\nthe crossed square is chosen and a max\u2013flow (of value 6) is\nshown by the arrows. It is also straightforward to convert\nthe flow into the corresponding tiling an vice versa.\nProposition 3.9 In any position of Mutilated Chessboard\ntiling game, the number of empty border squares is a con-\nstant fraction of the total number of border squares.\nProof We now consider the border of the bad region. What\nwe need to prove first is that the empty squares, belonging to\nit, are not \u201ctoo many\u201d, namely they are less than the number\nof sources.\nThe proof uses a max\u2013flow - min\u2013cut argument. Let\nus introduce a new, artificial vertex A, and a directed edge\nfrom every empty border square to A. Let us put the new\nvertex as a sink of capacity one, and denote the number of\nsources by k. We now claim that there is no flow of value\nk in the new graph. Suppose there were. Then it had to go\ntrough one of the new edges. But then we could \u201cstop\u201d it\nin the corresponding border squares that would imply this\nsquare is bad - a contradiction.\nSince the max\u2013flow equals the min\u2013cut, there has to be\na cut of size less than k. Let us take one such cut, and call\nthe sources side \u201cright\u201d and the sinks side \u201cleft\u201d.\nWe first need to show that the artificial vertex A is not\ncontained in the cut1 (note that a cut can, in general, contain\nnot only edges but also vertices, having capacities). Sup-\npose that the cut contained A. Consider the part of the cut\nwhen restricted to the original graph, i.e., before adding A\nand the edges from any empty border square to A. This part\nof the cut must be of capacity at least k \u0000 1 as it separates\nthe k sources from k \u0000 1 sinks, and there is a max\u2013flow of\n1We thank Mikhail Alekhnovitch for pointing out that we have forgot-\nten to include this part of the argument in an earlier version of the paper.\nvalue k\u00001 in the original graph. Therefore any cut contain-\ning A is of capacity at least k. This implies that it cannot be\nminimal as there is no flow of value k in the new, containing\nA graph.\nWe can now see that all the bad squares are on the right\nside. Suppose there were at least one on the other side. But\nthis implies that the size of the cut is greater or equal to k,\nbecause there is a flow of size k if a bad square is taken as a\nsink - a contradiction.\nLet us denote the sets of border squares on the left\/right\nside by L\/R respectively. What we have proven so far is\nshown on Fig. 5. We should however note that there are\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\nk sinks k+1 sources\nborder L\nborder R\nbad area\nmin\u2212cut\nA\nFigure 5. Max\u2013flow - min\u2013cut argument\ntwo properties, which we \u201cignore\u201d in our proof, because we\ndo not need them. First, as a matter of fact, it can be proven\nthat all the border squares are on the left side of the cut.\nTherefore, R = ;, and the cut contains no artificial edges.\nSecond, it can be shown that the bad area is connected.\nThe cut we consider contains at least the following\nedges: exactly one edge from every vertex in R to the new\nvertex and at least one edge from every vertex in L to some\nbad vertex (as every vertex in L is on the border of the bad\narea). This implies that jLj+ jRj < k, that is the number of\nborder squares is less than the number of sources.\nWe can finally prove that the second property, saying that\nat any round, the number of tiles on the board is linear in the\nborder-length of the bad region, is fulfilled. Given a position\non the board, denote the border-length of the bad region by\nl. Suppose the number of sources is at most l=2. There are\nthen at most that many empty squares on the border, thus\nthe number of marked squares, that is the number of tiles\non the board, is at least l=2. Suppose now the opposite, the\nnumber of sources is at least l=2 + 1. Observe now that\nevery marked square generates at most two sources, as any\ntile has at most two humps. Thus, there have to be at least\nl=4 tiles on the board. This completes the argument.2\nAs proven before, the above proposition implies\nLemma 3.10 Prover needs 2\n(m) memory cells in order to\nwin Mutilated Chessboard tiling game.\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \n4 Reduction\nIn this section, we show how to reduce Resolution game,\nplayed on a chessboard, into Tiling game. To understand\nwhat \u201creduction\u201d really means in this context, we need to\nlook at Fig. 6.\nPR AR=PT AT\nResolution Game Tiling Game\nReducer\n1. PR\u2019s move, 2. transformed into PT\u2019s move.\n3. AT\u2019s reply.4. AR\u2019s reply, derived from\nnoyes\nFigure 6. The general schema of the reduction\nThe resolution game is played by Prover Resolution (PR)\nand Adversary Resolution (AR), while the tiling game is\nplayed by Prover Tiling (PT) and Adversary Tiling (AT). We\nthink of AR and PT as a single person, named Reducer, who\ncarries the reduction. As shown on the figure, he first looks\nat the PR\u2019s move in the resolution game. He then trans-\nforms it into PT\u2019s move in the resolution game and plays it\nthere. After having got AT\u2019s reply, Reducer transforms it\ninto AR\u2019s move and replies by it to the initial PR\u2019s move in\nthe resolution game.\nThus, one can think that the real game is played be-\ntween PR and AT. We already have a particular AT\u2019s strat-\negy which forces an exponential lower bound on any PT\u2019s\nstrategy. We will prove, that this important property can be\ncarried trough the reduction, that is to imply an exponential\nlower bound on any PR\u2019s strategy, too. We will only consid-\ner the reduction of Mutilated Chessboard problem, which is\ntechnically harder. That is why, we describe it in full detail,\nleaving the reduction for Tseitin tautologies to the reader.\nMutilated chessboard As we mentioned before, we first\ndivide the chessboard into non-overlapping constant-size\nsquares, called further zones. In our rigorous proof, we use\n48 \u0002 48 squares. A zone in Mutilated Chessboard prob-\nlem corresponds to a square in Mutilated Chessboard tiling\ngame. We also \u201cmove\u201d one of the missing squares near to\nthe other as shown on Fig. 7 for a (48n+ 2) \u0002 (48n+ 2)\nchessboard. We first define what a zone is. It is a \u201cbig\u201d,\n48\u0002 48, square, with \u201cfew\u201d small squares cut off. We need\nto explain how the missing squares can exactly appear.\n=\nFigure 7. The reduction: zones, correspond-\ning to tiles\nWe divide a zone into 12 \u0002 12 smaller, 4 \u0002 4, squares,\nfurther called sub-zones, as done in the middle of Figure\n7. Missing squares can only appear on the sides of a zone,\ninside the four dashed \u201cbands\u201d which are the border part of\nthe four gray five-sub-zone areas. Moreover, there are only\nthe following possible shapes:\n1. No missing squares (Fig. 8A). This corresponds to a\nflat wall, in the tiling game.\n2. Two neighbours, of different colour, belonging to a\nsub-zone, and not being the two middle squares (Fig.\n8B). In the tiling game, this corresponds to a flat wall,\nsimilar to the previous case.\n3. Two squares of the same colour, belonging to sub-\nzones, that are a sub-zone away from each other (Fig.\n8C). Two black missing squares correspond to a hump\nin the tiling game, whereas two white missing squares\ncorrespond to a dent.\n4. Four missing squares, that are a combination of the\nprevious two cases, and, moreover, no two mutilated\nsub-zones can be neighbours (Fig. 8D). Again, if two\nmore white squares than black ones are missing, this is\na dent in the tiling game. The symmetric case, i.e., two\nmore blacks, corresponds to a hump.\nFigure 8 shows all possible shapes of a zone border. They\nimply all possible connections between two neighbouring\nzones. In particular, two neighbours can have only 0, 2 or 4\ndominoes in common, and, moreover, these can only appear\nas explained above.\nWe are now almost ready to explain the essence of the\nsection, namely Reducer\u2019s algorithm. The last, but the most\nimportant concepts, we need, are the different kind of ques-\ntions we have in Resolution Game. At any round in the\ngame, we have a partial tiling of the chessboard. The tiling\nsatisfies the condition that any zone is either completely\nempty or completely covered by dominoes from Adversary\u2019s\npoint of view. There are the following three kind of Prover\u2019s\nquestions:\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \n1 A B\n2 C D\nFigure 8. The reduction: possible shapes of\nzones and connections between them\nDefinition 4.1 Dummy question is a question about a\ndomino, connecting two neighbouring zones, and within 3\nsub-zones (that is 12 squares) from one of the two common\ncorners of the zones.\nThe answer to an impossible question is always \u201cno\u201d, so\nwe can assume Prover gets them for free, and she never asks\nsuch a question.\nDefinition 4.2 Forced question is a question, which is not\ndummy, but the domino involved affects the current partial\ntiling.\nThe answer clearly depends on the current tiling.\nDefinition 4.3 Open question is a question, which is nei-\nther dummy nor forced.\nThat is, an open question is about a domino:\n1. The domino does not intersect the current (partial) cov-\ner.\n2. It either is completely inside an empty zone or connects\ntwo empty neighbouring zones. In the latter case, the\ndomino is also 12 squares away from any zone corner.\nWe should note that \u201cdummy\u201d is a static concept, i.e., it\ndoes not depend on the current partial tiling, whereas the\nconcepts \u201cforced\u201d and \u201copen\u201dare dynamic.\nWe should also note that a forced\/open question may be\nassigned to any of two neighbouring zones. Sometimes, we\nwill need to assign a question to a particular zone. We will\nthen use the following deterministic rules:\n1. If the question is open, we associate it to either the\nright zone (if the border is vertical) or the bottom one\n(if the border is horizontal).\n2. If the question is forced, we associate it to the zone,\nwhich has been covered first, starting from the last\npoint in the game, when both zones were empty. In\nthis way we ensure that the question was open to its\nzone at that time.\nWe can now describe\nReducer\u2019s algorithm\nThe randomised phase. For any zone, further called\n\u201ccurrent\u201d, we do the following: For any possible shape of\nany combination of its nonempty neighbours and any pos-\nsible connection to its empty neighbours, either dent, hump\nor flat wall, we design a set of tilings of the current zone.\nThese tilings have to have the property that not all of them\nagree on any open question associated to the current zone.\nIt is very important to note, that the number of all the tilings\nis a constant. Adversary then chooses one of the tilings u-\nniformly at random and remembers the choice through the\nentire Resolution Game. What remains to be proven is that\na set of tilings, having the desired properties exists. The\nproof is a long case analysis, omitted because of the space\nrestriction.\nThe deterministic phase. We should first note that at\nany round in Resolution Game, there are some \u201cyes\u201d and\/or\n\u201cno\u201d dominoes on the mutilated chessboard. These are visi-\nble to both Prover Resolution and Reducer, who is also Ad-\nversary Resolution. Apart from them, there is a partial tiling\nof the board, which is visible only to Reducer. This tiling\nis consistent with all the \u201cyes\u201d\/\u201dno\u201d dominoes until the end\nof the game, when Reducer gives up. In Tiling Game, there\nare some tiles on the board. Moreover, there is a correspon-\ndence between any tile and the corresponding zone in Res-\nolution Game, as explained at the beginning of the section.\nLet us now consider the four stages of the reduction for\nthe two possible Prover Resolution\u2019s moves, either asking a\nquestion or forgetting:\n1. Asking a question about a domino.\n(a) Prover Resolution asks a question in Resolution\nGame.\ni. The question is forced. Reducer answers im-\nmediately, without going to the next stage.\nii. The question is open, and therefore it is the\nfirst one such question about the considered\nempty zone. Reducer switches from Adver-\nsary Resolution to Prover Tiling, thus going\nto the stage (b)\n(b) Prover Tiling asks a question in Tiling Game.\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \n(c) Adversary Tiling puts a tile on the board.\n(d) Given that tile and the neighbouring zones, Re-\nducer gets the already chosen (in the randomised\nphase) cover of the zone and puts it on the mu-\ntilated chessboard, not revealing it to Resolution\nProver. Reducer then switches back to Adversary\nResolution and answers to Prover Resolution\u2019s\nquestion consistently with the cover just put.\n2. Forgetting a domino, which is already on the mutilated\nchessboard.\n(a) Prover Resolution forgets a domino, already on\nthe chessboard.\ni. The domino is not the only \u201cyes\u201d\/\u201dno\u201d\ndomino inside the corresponding zone. Re-\nducer does not do anything else.\nii. The domino is the only \u201cyes\u201d\/\u201dno\u201d domino\ninside that zone. Reducer goes to stage (b).\n(b) Reducer, acting as Prover Tiling, removes the\ncorresponding tile in the tiling game. After that,\nacting as Adversary Resolution, he forgets the\ncover of the zone, so that it becomes empty a-\ngain.\nThe important lemma, that follows from our construction is\nthe following:\nLemma 4.4 At any round of Resolution Game, we can take\na set of \u201cyes\u201d\/\u201dno\u201d tiles, no two of them belonging to the\nsame zone. They are independent and the probability that\neach of them agrees with the randomised phase is a con-\nstant, bounded away from both 0 and 1.\nProof Because of the way we associate a question to a zone\nat the time when the zone was covered, the question was\nopen for it. We can now use the fact, that the cover was\nchosen at random, among the set of covers, such that not all\nof them agree on any open question.2\nThat is enough to ensure that Theorem 3.6 applies, with\nthe two colours, corresponding to the two possible answers\nto the chosen questions. The probabilities now are not 1=2\nand 1=2, but some (small) constants, different from 0 and 1.\nThis however does not affect the argument, so that the ex-\nponential lower bound is carried from Tiling Game through\nthe reduction to Resolution Game.\nAcknowledgements We would like to thank Mikhail\nAlekhnovich for finding the missing point already men-\ntioned.\nReferences\n[1] M. Alekhnovich. Mutilated chessboard is exponentially hard\nfor resolution. Manuscript, 2000.\n[2] E. Ben-Sasson and A. Wigderson. Short proofs are narrow -\nresolution made simple. In Symposiom on Theory Of Com-\nputing, pages 517\u2013526, 1999.\n[3] S. Buss and G. Tura\u00b4n. Resolution proofs of generalized pi-\ngeonhole principles. Theoretical Computer Science, 62:311\u2013\n317, 1988.\n[4] A. Haken. The intractability of resolution. Theoretical Com-\nputer Science, 39:297\u2013308, 1985.\n[5] J. McCarthy. A tough nut for proof procdures. Stanford Ar-\ntifical Intelligence Project Memo 16, July 1964.\n[6] P. Pudla\u00b4k. Proofs as games. American Mathematical Monthly,\nJune\u2013July 2000.\n[7] G. Tseitin. On the complexity of derivation in the proposition-\nal calculus. Studies in Constructive Mathematics and Mathe-\nmatical Logic, Part II, 1968.\n[8] A. Urquhart. Resolution proofs of matching principles.\nManuscript, 1998.\nProceedings of the 42nd IEEE Symposium on Foundations of Computer Science  (FOCS\u009201) \n0-7695-1390-5\/02 $17.00 \u00a9 2002 \u0001 IEEE \n"}