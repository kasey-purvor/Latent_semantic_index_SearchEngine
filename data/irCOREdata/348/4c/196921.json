{"doi":"10.1109\/ICWS.2009.43","coreId":"196921","oai":"oai:lra.le.ac.uk:2381\/9133","identifiers":["oai:lra.le.ac.uk:2381\/9133","10.1109\/ICWS.2009.43"],"title":"Markov-HTN Planning Approach to Enhance Flexibility of Automatic Web Services Composition","authors":["Reiff-Marganiec, Stephan","Chen, Kun","Xu, Jiuyun"],"enrichments":{"references":[{"id":43676115,"title":"A Dynamic Web Services Selection Algorithm with QoS Global Optimal in Web Services Composition,&quot;","authors":[],"date":"2007","doi":"10.1360\/jos180646","raw":"LIU Shu-Lei, LIU Yun-Xiang, ZHANG Fan, TANG Gui-Fen, JING Ning, &quot;A Dynamic Web Services Selection Algorithm with QoS Global Optimal in Web Services Composition,&quot; Journal of Software, vol. 18, 2007, pp. 648-656.","cites":null},{"id":43676107,"title":"A Framework for Intelligent Web Services: Combined HTN and CSP Approach,&quot;","authors":[],"date":"2006","doi":"10.1109\/icws.2006.6","raw":"Incheon Paik, Daisuke Maruyama, M. N. Huhns, &quot;A Framework for Intelligent Web Services: Combined HTN and CSP Approach,&quot; IEEE International Conference on Web Services (ICWS'06), 2006.","cites":null},{"id":43676114,"title":"An Approach for QoS-aware Service Composition based on Genetic Algorithms,&quot; Genetic and Evolutionary Computation Conference(ACM),","authors":[],"date":"2005","doi":"10.1145\/1068009.1068189","raw":"Gerardo Canfora, Massimiliano Di Penta, Raffaele Esposito, M. L. Villani, &quot;An Approach for QoS-aware Service Composition based on Genetic Algorithms,&quot; Genetic and Evolutionary Computation Conference(ACM), 2005.","cites":null},{"id":43676117,"title":"Applied Markov Decision Process,&quot; Beijing:Tsinghua University publication,","authors":[],"date":"2004","doi":null,"raw":"Liu Ke, &quot;Applied Markov Decision Process,&quot; Beijing:Tsinghua University publication, 2004, pp. 38-40.","cites":null},{"id":43676106,"title":"Automated Planning in a Service-Oriented Architecture,&quot;","authors":[],"date":"2004","doi":"10.1109\/enabl.2004.16","raw":"Hilmar Schuschel,M. Weske, &quot;Automated Planning in a Service-Oriented Architecture,&quot; Proceedings of the 13th IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises, 2004.","cites":null},{"id":43676120,"title":"Dynamic Workflow Composition using Markov Decision Processes,&quot;","authors":[],"date":"2004","doi":"10.4018\/jwsr.2005010101","raw":"Prashant Doshi, Richard Goodwin,R. Akkiraju, &quot;Dynamic Workflow Composition using Markov Decision Processes,&quot; IEEE International Conference on Web Services (ICWS'04), 2004.","cites":null},{"id":43676109,"title":"HTN planning for Web Service composition using SHOP2,&quot; Web Semantics: Science, Services and Agents on the World Wide Web","authors":[],"date":"2004","doi":"10.1016\/j.websem.2004.06.005","raw":"Evren Sirin, Bijan Parsia, Dan Wu, James Hendler, D. Nau, &quot;HTN planning for Web Service composition using SHOP2,&quot; Web Semantics: Science, Services and Agents on the World Wide Web 2004, pp. 377-396.","cites":null},{"id":43676118,"title":"Improved HTN Planning Approach for Service Composition,&quot;","authors":[],"date":"2004","doi":"10.1109\/scc.2004.1358075","raw":"Zhang Jianhong, Zhang Shensheng ,M. Y. Cao Jian, &quot;Improved HTN Planning Approach for Service Composition,&quot; Proceedings of the 2004 IEEE International Conference on Services Computing (SCC\u201904) 2004.","cites":null},{"id":43676112,"title":"Information gathering during planning for Web Service composition,&quot; Web Semantics: Science,","authors":[],"date":"2005","doi":"10.1016\/j.websem.2005.07.001","raw":"Ugur Kuter, Evren Sirin, Bijan Parsia, Dana Nau,J. Hendler, &quot;Information gathering during planning for Web Service composition,&quot; Web Semantics: Science, Services and Agents on the World Wide Web, vol. 3, 2005, pp. 183-205.","cites":null},{"id":43676116,"title":"Semantics-enriched QoS policies for web service interactions,&quot;","authors":[],"date":"2006","doi":"10.1145\/1186595.1186601","raw":"Diego Zuquim Guimar\u00e3es Garcia, M. B. F. d. Toledo, &quot;Semantics-enriched QoS policies for web service interactions,&quot; Proceedings of the 12th Brazilian symposium on Multimedia and the web(ACM), 2006, pp. 35-44.","cites":null},{"id":43676108,"title":"SEMAPLAN: Combining Planning with Semantic Matching to Achieve Web Service Composition,&quot;","authors":[],"date":"2006","doi":"10.1109\/icws.2006.119","raw":"Rama Akkiraju, Biplav Srivastava, Anca-Andreea Ivan, Richard Goodwin,T. Syeda-Mahmood, &quot;SEMAPLAN: Combining Planning with Semantic Matching to Achieve Web Service Composition,&quot; IEEE International Conference on Web Services (ICWS'06), 2006.","cites":null},{"id":43676111,"title":"SHOP2\uff1a An HTN planning system,&quot;","authors":[],"date":"2003","doi":"10.1109\/mis.2005.20","raw":"Dana Nau, Tsz-Chiu Au, Okhtay Ilghami, Ugur Kuter, J. William Murdock, Dan Wu,F. Yaman, &quot;SHOP2\uff1a An HTN planning system,&quot; Journal of Artfficial Intelligence Research, vol. 20, 2003, pp. 379-404.","cites":null},{"id":43676110,"title":"Towards a classification of web service feature interactions,&quot;","authors":[],"date":"2007","doi":"10.1016\/j.comnet.2006.08.003","raw":"M. Weiss, B. Esfandiari, Y. Luo, &quot;Towards a classification of web service feature interactions,&quot; Computer Networks, vol.51, 2007, pp.359-381.","cites":null},{"id":43676119,"title":"Towards Efficient Selection of Web Services with Reinforcement Learning Process,&quot;","authors":[],"date":"2005","doi":"10.1109\/ictai.2005.122","raw":"Dongjun Cai, Zongwei Luo, Kun Qian,Y. Gao, &quot;Towards Efficient Selection of Web Services with Reinforcement Learning Process,&quot; Proceedings of the 17th IEEE International Conference on Tools with Artificial Intelligence, 2005, pp. 372-376.","cites":null},{"id":43676113,"title":"Web Service Composition via Problem Decomposition Across Multiple Ontologies,&quot;","authors":[],"date":"2007","doi":"10.1109\/services.2007.70","raw":"Naiwen Lin, Ugur Kuter, James Hendler, &quot;Web Service Composition via Problem Decomposition Across Multiple Ontologies,&quot; 2007 IEEE Congress on Services (SERVICES 2007), 2007.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2009","abstract":"Automatic Web services composition can be\\ud\nachieved by using AI planning techniques. HTN\\ud\nplanning has been adopted to handle the OWL-S Web\\ud\nservice composition problem. However, existing\\ud\ncomposition methods based on HTN planning have not\\ud\nconsidered the choice of decompositions available to a\\ud\nproblem which can lead to a variety of valid solutions.\\ud\nIn this paper, we propose a model of combining a\\ud\nMarkov decision process model and HTN planning to\\ud\naddress Web services composition. In the model, HTN\\ud\nplanning is enhanced to decompose a task in multiple\\ud\nways and hence be able to find more than one plan,\\ud\ntaking both functional and non-functional properties\\ud\ninto account. Furthermore, an evaluation method to\\ud\nchoose the optimal plan and some experimental results\\ud\nillustrate that the proposed approach works effectively","downloadUrl":"http:\/\/www.ieee.org\/index.html","fullTextIdentifier":"https:\/\/lra.le.ac.uk\/bitstream\/2381\/9133\/3\/ICWS.pdf","pdfHashValue":"3dcffc3825a98980df57305d2066afe3752c8df9","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/9133<\/identifier><datestamp>\n                2016-04-06T08:41:15Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_4072<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nMarkov-HTN Planning Approach to Enhance Flexibility of Automatic Web Services Composition<\/dc:title><dc:creator>\nReiff-Marganiec, Stephan<\/dc:creator><dc:creator>\nChen, Kun<\/dc:creator><dc:creator>\nXu, Jiuyun<\/dc:creator><dc:description>\nAutomatic Web services composition can be\\ud\nachieved by using AI planning techniques. HTN\\ud\nplanning has been adopted to handle the OWL-S Web\\ud\nservice composition problem. However, existing\\ud\ncomposition methods based on HTN planning have not\\ud\nconsidered the choice of decompositions available to a\\ud\nproblem which can lead to a variety of valid solutions.\\ud\nIn this paper, we propose a model of combining a\\ud\nMarkov decision process model and HTN planning to\\ud\naddress Web services composition. In the model, HTN\\ud\nplanning is enhanced to decompose a task in multiple\\ud\nways and hence be able to find more than one plan,\\ud\ntaking both functional and non-functional properties\\ud\ninto account. Furthermore, an evaluation method to\\ud\nchoose the optimal plan and some experimental results\\ud\nillustrate that the proposed approach works effectively.<\/dc:description><dc:date>\n2011-03-04T10:58:55Z<\/dc:date><dc:date>\n2011-03-04T10:58:55Z<\/dc:date><dc:date>\n2009<\/dc:date><dc:type>\nConference paper<\/dc:type><dc:identifier>\nIEEE International conference on Web services, 2009. ICWS, 2009. 6-10 July 2009, Los Angeles, CA, pp.9-16.<\/dc:identifier><dc:identifier>\n978-0-7695-3709-2<\/dc:identifier><dc:identifier>\nhttp:\/\/ieeexplore.ieee.org\/xpl\/articleDetails.jsp?arnumber=5175801<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/9133<\/dc:identifier><dc:identifier>\n10.1109\/ICWS.2009.43<\/dc:identifier><dc:language>\nen<\/dc:language><dc:rights>\nThis is the authors' final draft (accepted version), \u00a92009 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other users, including reprinting\/ republishing this material for advertising or promotional purposes, creating new collective works for resale or redistribution to servers or lists, or reuse of any copyrighted components of this work in other works. The original published version can be found on the publisher's website at: http:\/\/www.ieee.org\/index.html ; DOI: 10.1109\/ICWS.2009.43<\/dc:rights><dc:publisher>\nIEEE<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2009,"topics":[],"subject":["Conference paper"],"fullText":"Markov-HTN Planning Approach to Enhance Flexibility of Automatic Web \nServices Composition \n \n \nKun Chen, Jiuyun Xu \nSchool of Computer & Communication \nEngineering \nChina University of Petroleum \nChina, 257061 \nck_star@126.com;  \nxujy@mail.hdpu.edu.cn \nStephan Reiff-Marganiec \nDepartment of Computer Science \nUniversity of Leicester \nUniversity Road, \nLeicester, LE1 7RH \nUnited Kingdom \nsrm13@le.ac.uk \n \n \n \nAbstract \n \nAutomatic Web services composition can be \nachieved by using AI planning techniques. HTN \nplanning has been adopted to handle the OWL-S Web \nservice composition problem. However, existing \ncomposition methods based on HTN planning have not \nconsidered the choice of decompositions available to a \nproblem which can lead to a variety of valid solutions. \nIn this paper, we propose a model of combining a \nMarkov decision process model and HTN planning to \naddress Web services composition. In the model, HTN \nplanning is enhanced to decompose a task in multiple \nways and hence be able to find more than one plan, \ntaking both functional and non-functional properties \ninto account. Furthermore, an evaluation method to \nchoose the optimal plan and some experimental results \nillustrate that the proposed approach works effectively. \n \n1. Introduction \n \nWeb services are defined as software systems \nwhich are described with functional and non-\nfunctional capabilities and can enable improved \ncoordination among multiple computing platforms, \napplications, and business partners. Because a single \nWeb service usually can not fulfil the requirements of \nusers, Web service composition provides a mechanism \nto combine different services together to handle \nbusiness process. Automated Web service composition \nis valuable in many domains, typical of e-commerce. \nHowever, with the rapid increase of Web services and \nmore complex requirement of business process in the \nreal world, automatic service composition requires a \nmore flexible mechanism to deal with unexpected \nexceptions. AI planning for automated Web services \ncomposition has been adopted, as exemplified by the \nmethods presented in [1-4] to handle this issue. \nIn [4], an HTN planning method has been \nsuggested to handle automatic Web services \ncomposition. This method translates OWL-S Web \nservice descriptions to a SHOP2 domain and then a \nbusiness plan is achieved by decomposing complex \ntasks. Considering the procedure of task \ndecomposition, this method mainly is concerned with \nthe feasibility of task decomposition; that is can one \nplan be found? However, a plan may fail for various \nreasons, such as a service instance no longer exists or \nfeature interaction in Web services [5]. In the real \nworld, there usually are several possible plans which \ncan solve one specific high-level business process. For \ninstance, a user wants to attend an exhibition in \nanother city in a few days. On the condition of \nsatisfying user\u2019s requirements, he can make a choice of \ntaking a flight or a train to the city and then attend the \nexhibition. In this situation, the user always wants to \nknow what options he has and which is of the best \nquality (that is satisfying his non-functional criteria \nsuch as cost considerations). \nThis paper addresses the aspect of finding multiple \ncomposition plans and then selecting the most \nappropriate for a user.  We propose an enhanced \napproach for Web services composition based on the \ncombination of HTN planning and a Markov decision \nprocess model. With this approach, several highly \nsuitable Web service plans will be obtained providing \ndifferent solutions to a business process using Web \nservices composition and hence offering  a much more \nflexible solution to the customer. To make sure these \nplans are indeed some of the best solutions available \nwe use an evaluation mechanism to illustrate the \noptimal solution amongst those multiple solutions \nusing a Markovian decision process. In this way, the \noptimal solution not only meets the requirements of the \nbusiness process in its functional aspects, but also \nsatisfied the expectations that the solution is of the best \nquality based on requirements considering non-\nfunctional aspects. \nThe rest of the paper is organized as follows: in \nsection 2, an overview of Web services composition \nusing HTN planning is introduced. section 3 gives an \noverview of the composition model and section 4 \ndetails the process of model solving. In section 5 a \ncase study is introduced and experimental results are \npresented. Finally, we conclude and provide an outline \nof further research. \n \n2. An Overview of Web services \nComposition using HTN Planning \n \nHTN (Hierarchical Task Network) is a technique \nof AI planning based on control knowledge with a \nclosed world assumption (informally, that means that \nall \u201cbuilding blocks\u201d are known a-priori). HTN \nplanning provides hierarchical abstraction with a \npowerful strategy to deal with the complexity of large \nand complicated real world planning domains. The \npurpose of an HTN planner is to produce a sequence of \nactions that perform some activity or task. \nConsidering composing Web services using HTN \nplanning, generally the planning domain, planning \nproblem and the process of planning are to be \ndescribed within the Web service domain. The \ndescription of a planning domain includes a set of \noperators (which will be web service operations), and \nalso a set of methods, each of which is a prescription \nfor how to decompose a task into its subtasks (smaller \ntasks). The description of a planning problem will \ncontain an initial state which is the same as that of \nclassical planning, but instead of a goal formula, the \nproblem specification will contain a partially ordered \nset of tasks to accomplish. The process of HTN \nplanning proceeds by using the methods to decompose \ntasks recursively into smaller and smaller subtasks, \nuntil the planner reaches primitive tasks that can be \nperformed directly using the planning operators. For \neach non-primitive task, the planner chooses an \napplicable method, instantiates it to decompose the \ntask into subtasks, and then chooses and instantiates \nmethods to decompose the subtasks even further. \nWhen the constraints on the subtasks or the \ninteractions among them prevent the plan from being \nfeasible, the planning system will backtrack and try \nalternative methods. More details discussed on HTN \nplanning found in  [6]. \nThe OWL-services language (OWL-S), is a set of \nontologies for describing the properties and \ncapabilities of Web services. Currently, Web services \nmostly are described by OWL-S since it supports \neffective automation of various Web services related \nactivities including service discovery, composition, \nexecution, and monitoring (it provides a richer \nframework than WSDL). Especially, the structure of \nOWL-S is propitious to exploit AI planning techniques \nfor automatic service composition by treating service \ncomposition as a planning problem. In OWL-S, \nservices can be described as composite or atomic \nprocesses with preconditions and effects. The concept \nof composite process decomposition in OWL-S \nprocess ontology is very similar to the concept of task \ndecomposition in HTN planning. Hierarchical \nmodelling is the core of the OWL-S process model to \nthe point where the OWL-S process model constructs \ncan be directly mapped to HTN methods and \noperators. Thus, HTN planning is especially promising \nfor OWL-S Web services composition, which has been \nshown in [4, 7, 8]. \n \n3. The Formal Model of Markov-HTN \nplanning for Web services composition \n \nSo far, many existing Web services composition \nmodels based on HTN planning are not powerful \nenough to support the idea that consider the functional \naspects together with the non-functional, and also find \nmultiple optimal plans in the planning process. \nTherefore, we put forward a formal model extended on \nthe basis of composition model used by SHOP2 in [4]. \nThe formal approach of Markov-HTN planning is able \nto support a choice of Web services composition plans, \nand considers the non-functional aspects of Web \nservices, which enhances the flexibility of automatic \nWeb services composition. The definition of the \nformal model is as follows. \nDefinition 1 (Markov-HTN planning Model for \nWeb Services Composition). \nThe OWL-S Web services composition problem is \ndefined as , , , ,S T D Q P< > . In the 5-tuple model,  \n? S is the initial state of the problem. \n? T is the task list, which contains the tasks that the \nuser needs to solve. \n? D is the description of a planning domain \nincludes a set of operators and a set of \ndecomposition methods, and D can be translated \nfrom a collection of OWL-S process models. \n? Q is a set of QoS vectors, the attributes of which \ninclude the response time, cost, availability and \nreliability. \n? P is a set of optimal solutions which are available \nin the solution space. \nOn the basis of the above definition, solving the 5-\ntuple can return an optimal plan \n1 2( ... )optimal nP O O O= , that is, a sequence of \ninstantiated operators that will achieve T from S in D, \nand an optimal combination sequence with the best \nquality with respect to the non-functional aspects. \nThe model solving consists of three processes. \nFirst, the initialization of the description of the \nplanning domain; second, the search for the best plans \nin the solution space based on HTN planning and \nthirdly, the evaluation of the optimality in the \navailability plans. \n \n4. The Approach of Web service \ncomposition using Markov-HTN Model \n \n4.1. Initialization for the description of the \nplanning domain \n \nThe 5-tuple model for OWL-S services \ncomposition is based on HTN planning. So, the \nbeginning to do is translating the description of OWL-\nS services to a description of planning domain.  \nLet 1 2{ , , . . . , }mK K K K=  be a col-\nlection of OWL-S process models. Then, \nLet ( )D TRANSLATE PROCESS MODEL K= \u2212 \u2212 . \nThis process is achieved by using the translating \nalgorithm provided in [4]. Details of the translation \nand assumptions the translation based on are all kept \nunchanged.  \nAfter the completion of this process, the element D \nin the 5-tuple model is described by a set of operators \nand a set of decomposition methods. Each operator is a \ndescription of what needs to be done to accomplish \nsome primitive task, and each method tells how to \ndecompose some compound task into a set of partially \nordered subtasks. The control knowledge base for \nHTN planning consists of operators and methods. The \ndefinition of operators and methods are the same with \nits description in SHOP2 domain description  [4,6], as \nfollows: \n \nDefinition 2 (Operator). An operator is an expression \nof the form (h(v\u2192) Pre Del Add) where \n? h(v\u2192 ) is a primitive task with a list of input \nparameters v\u2192. \n? Pre represents the operator\u2019s preconditions. \n? Del represents the operator\u2019s delete list which is \ndescribed as a conjunction of logical atoms that \nwill become false after operator\u2019s execution. \n? Add represents the operator\u2019s add list which is \ndescribed as a conjunction of logical atoms that \nwill become true after operator\u2019s execution. \n \nDefinition 3 (Method). A method is an expression of \nthe form (h(v\u2192) Pre1 T1 Pre2 T2 \u2026 ) where \n? h(v\u2192) is a compound task with a list of input \nparameters (v\u2192). \n? Each Prei is a precondition expression. \n? Each Ti is a partially ordered set of subtasks. \n \nIn the process of model solving, the part that \ninitializes the description of the planning domain does \nnot always need be done. The description of the \nplanning domain, element D in the 5-tuple model, \nneeds to be updated synchronously, only when the \ncollection of OWL-S process models is changed. \n \n4.2. Planning with Multi-decomposition for \ntasks \n \nIn this paper, the process of HTN planning is \nimproved in the second step, that is searching for \nplans, in order to be able to produce more than one \ngood solution within the available solution space. \nSpecific details of the improvement focus on \ndecomposition for non-primitive tasks when a task can \nbe decomposed by more than one method.  \nThe improved decomposition method changes the \nway of decomposing when a task can be decomposed \nby multiple methods. The method chooses each \nmethod to decompose a non-primitive task instead of \nchoosing any one of the ones applicable in the current \nstate. Also, a control strategy is embedded into the \nplanning process to decide whether a branch will be \ndecomposed further. The detail of improved non-\nprimitive tasks decomposition is presented in Fig. 4.1. \n \n  \nFig. 4.1 Decomposing a non-primitive task  \n \nThe improved decomposition is superior to the \ndecomposition presented in [4] on the strategy of \nsearching for solutions. For decomposing a non-\nprimitive task with every available method, the current \nstate (S) and task list (T) must be copied, and the \nnumber of the replications is the same as the number of \navailable methods. After this, every branch can be \nconsidered by the planning method. If one branch \ncannot be decomposed further, that is all the subtasks \nare primitive tasks, the found plan will be added to the \nset of plans (P). In the subsequent recursive process, a \nsimilar situation that a subtask may have more than \none available method to be decomposed will occur. \nWith the number of such situations increasing, the \nsolution space that will be searched is growing and the \nplanning process will be more and more complex. So, \nwe apply a control strategy to decide whether a branch \nwill be decomposed further.  \nBefore the definition of the control strategy, the \nconcept of immediate reward needs to be introduced. \nImmediate reward: An immediate reward is a utility \nvalue to measure the quality of a decomposition \nmethod. A method decomposes a task into primitive \nsubtasks or non- primitive subtasks. A primitive task \ncan be performed directly using a service operation (or \nplanning operator in planning terms). Clearly, \noperations suggested by a decomposition method have \na direct impact on the overall quality of the solution. \nOn the basis of this, the immediate reward of a \ndecomposition method can be calculated by using the \nQoS (Q), and the corresponding Web services are \nmapped into operators produced on the certainty \nbranch, which does not have a subtask that can be \ndecomposed by more than one method in the \nremaining decomposition process until planning is \ncompleted. \nSince the construction of a plan is a sequence of \noperators, the immediate reward can be defined by \nformula (1), which is similar to [9, 10]. \nN N\n3 j 4 j\nj=1 j=1\nN N\n1 j 2 j\nj=1 j=1\nw Availability(ws ) w Reliability(ws )\n1\nw Cost(ws )  +  w Response T ime(ws )\nR\nN\n+\n=\n\u220f \u220f\n\u2211 \u2211\n   (1) \nwhere N is the number of Web services which are \nmapped into the operators produced on the certainty \nbranch. 1 4, ,w wK  indicate the importance a service \nintegrator (or user) gives to a particular QoS attribute. \nIn formula (1), there is a special case that some free \nand fast services will lead an infinity value of R. Thus, \nthe effect of availability and reliability are neglected. \nThis case often occurs on the bottom tasks \ndecomposition when the services less on certainty \nbranch are all free and fast. So, there is a little effect on \nthe whole plan, and which can be taken no account in a \nwhole plan evaluation mentioned in section 4.3. \n \nDefinition 4 (Control Strategy). There is threshold \nvalue ( 0)\u03bb \u03bb \u2265 , which is a standard to measure the \nimmediate reward value R of a decomposition method \nm. If mR \u03bb\u2265 , the planner uses the method to \ndecompose further, else if mR \u03bb< , the planner stops \nto decompose this branch. For 0\u03bb = , all the branches \nwill be extended. \nFigure 4.2, shows a search tree for a planning \nproblem. In node 2, the branch will not be extended by \ndecomposition method m23, because 23mR \u03bb< . The \nsame applies to the branch to be extended by \ndecomposition method m22 in node 4. \n \n23mR \u03bb< 22mR \u03bb<\n \nFig. 4.2 A search tree for a planning problem \n \nBecause of the control strategy, we cannot only \nmake it easier to reduce the size of the solution space \nthat is searched, but can also find better solutions \naddressing different demands of users. To some extent, \nthe speed to find plans and the number of plans that \nwill be found can be controlled by changing the \nthreshold value \u03bb . Since the immediate reward value R \nmeasures the quality of a decomposition method, it can \nalso be used to evaluate the quality of plans. More \ndetails will be introduced in section 4.3. \nAs Fig. 4.2 shows, a node ( , )n T \u03c0=  in the \nsearch tree implies the current state. T is the task list \nwhich needs to be solved and \u03c0 is the current partial \nplan. In the planning process, the state at each node \ncan be reached by the initial state S and the current \npartial plan \u03c0. The node that has any child in the search \ntree is called a terminal node. If the terminal node has \na null task list, the corresponding \u03c0 is a feasible \nsolution for initial tasks of users and which is \ncomposed of operators. \nOn the basis of the given description, the algorithm \nfor HTN planning used is as shown in Fig. 4.3. \n \n \nFig. 4.3. HTN planning algorithm for complete decomposition  \n \nNote that all branches in the planning process will \nbe considered when a task can be decomposed by \nmultiple decomposition methods. At that state, the \nimmediate reward of the decomposition methods is \ncalculated which determines whether a branch will be \nextended further. It may be possible that branches \nwhich could lead to better utility in further process will \nbe cut away, but that has little consequence to the \nbetter quality plans found. In view of the reliability of \nplans during actual execution, the partial plan \ncomposed of the operators which are found on an \nanterior branch is more important than the one found \non the posterior branch. Consequently the plans \nproduced by the HTN planning algorithm for complete \ndecomposition are ensuring better quality. Moreover, \nthe solution space searched for large-scale and \ncomplex problems can be controlled by adjusting the \nthreshold \u03bb  of the control strategy. \n \n4.3.  Optimality Evaluation by MDP \n \nAfter the completion of the HTN planning step, \nseveral good plans can be provided to users, but it is \nthe optimal plan that users are most concerned about. \nHence, we propose a method to evaluate the optimality \nusing a Markov decision process (MDP) is proposed. \nMDPs provide a mathematical framework for \nmodelling decision-making in situations where \noutcomes are partly random and partly under the \ncontrol of the decision maker. MDPs are useful for \nsolving a wide range of optimization problems. \nIn the process of HTN planning, the choice of \nmultiple decomposition methods can be seen as a \ndecision-making process and the decision-making only \nconnects with the current state. So we construct a MDP \nmodel by introducing the probability and reward value \nfor choosing a decomposition method and solve the \nmodel to find the optimal plan. The time to choose a \nmethod is a decision-making time t, such as the nodes \n(1, 2,3,4)  in Fig. 4.2. First, a list of four objects in \nMDP should be described as ( , , ( , ), ( , ))a aS A P R\u22c5 \u22c5 \u22c5 \u22c5 , \nwhere, \n? S is the state space. \n? A is the available action set, which is the same \nwith the available decomposition methods set. \n? ( , ')aP s s  is the probability that action a in state s \nat time t will lead to state s' at time t + 1. \n? ( , ')aR s s  is the immediate reward received after \ntransition to state s' from state s. \n \nCalculation of transition probability and reward. In \nthe MDP process, the calculation of the transition \nprobability and reward is the core. The probability for \nchoosing a decomposition method in HTN planning is \nrelated to the preconditions of the method. Fewer \nconstraints of preconditions will have less risk of \nfailure in actual execution process. Hence, a less \nrestrictive method has a higher probability of being \nselected. \nIn state s, a task can be decomposed by k methods \nM. Each method (1 )im i k< <  in M has iN  \nparameters in its iPre . Then, the transition probability \nis defined by formula (2). \n1\n1\n( )\n1,\n( | ') ( | ') ,\n0,i\nk\nj i\nj i\na m k\nj\nj\nN N\nif Pre s\nP s s P s s and\notherwiseN\n\u03b8\n\u03b8=\n=\n\u2212\n\u2282\u23a7\n= = =\u23a8\u23a9\n\u2211\n\u2211\n  (2) \nThe reward calculation is the same with the \nimmediate reward introduced in section 4.2, also \ndefined by formula (1). QoS publication helps \nselecting among services with the same functionality, \nservice composition based on QoS and evaluation of \nalternative execution paths for process adaptation. \nMoreover, QoS can be used as a basis for cost models \nthat drive process optimization[11].  \n \nSolution to MDP by the way of policy iteration. The \nsolution to a Markov Decision Process can be \nexpressed as a policy \u03c0, a function from states to \nactions. The standard family of algorithms to calculate \nthe policy need calculate two variables repeatedly. One \nis value V, which contains utility value of state s, and \nthe other is policy \u03c0 which contains actions a. s\u2019 is the \nnext state achieved by executing an action a from the \ncurrent state s. The two variables are calculated by \nformula (3), (4). \n( )\n'\n( ) ( ) ( , ') ( ')s\ns\nV s R s P s s V s\u03c0\u03b3= + \u2211     (3) \n, where \u03b3  is a discounting factor. \n'\n( ) arg max ( , ') ( ')aa s\ns P s s V s\u03c0 = \u2211        (4) \nAfter completing the second process of HTN \nplanning, the plan set P has N plans. So, policies, \navailable actions A and state space S in MDP can be \ndetermined. Make each plan to be a policy, such as in \nfig4.2, the plan p1 can be expressed as a policy \n1 1 2:{( , 11), ( , 21)}s m s m\u03c0 , and the expected utility \nof a policy reflects the quality of the plan, and which \ncan be calculated by formula (5). \n( )\n'\n( ) ( ) ( , ') ( ')\ni i s\ns\nE s R s P s s E s\u03c0 \u03c0\u03b3= + \u2211  (5) \n, where s is the state in policy i\u03c0 . Formula (5) \ncalculates all the rewards on non-primitive tasks \ndecomposition during the production of a whole plan. \nConsidering the effect of each layered decomposition, \nthe high layers is more impact for the plan than the low \nones. \nThen, the policy iteration algorithm is used to find \nthe optimal policy. Specific details are described as \nshown in Fig. 4.4. \n \n( )\n'\n1\n'\n1\n:\n1.\n1,2,...\n2. ( ) ,\n( ) ( , ( )) ( , ') ( ')\n3. ,\n( ) : argmax ( , ) ( , ') ( ')\n4.\ni\ni i i\ni\ni s\ns S\ni aa A s S\ni\nPolicy iteration\nstart with an arbitraty initial policy\nfor i\ncompute E s for every s\nE s R s s P s s E s\nfor every s\ns R s a P s s E s\nif\n\u03c0\n\u03c0 \u03c0 \u03c0\n\u03c0\n\u03c0\n\u03c0 \u03b3\n\u03c0 \u03b3\n\u03c0\n\u2208\n+\n\u2208\n\u2208\n+\n=\n\u21d2 = +\n\u21d2 = +\n\u2211\n\u2211\n1, . .i ithen exit is the optimal policy\u03c0 \u03c0 +=\n \nFig 4.4. Policy iteration algorithm for MDP \n \nThe process will converge in a finite number of \niterations and the process ends with the optimal policy \n(For a proof, we refer  to [12]). \n \n5. A Case Study \n \nTo demonstrate the feasibility of our composition \napproach, the commonly used e-travel scenario will be \nused. The e-travel scenario requires that first a \ndestination is reached and then after a few days touring \nan exhibition is attended. Users may have more than \none plan to achieve the goal. We implement a system \nby using our approach of Web services composition \nbased on the Markov-HTN planning model to simulate \nthe composition. We can get composition plans as \nshown in Fig. 5.1. \n \n \nFig. 5.1. a sample of plans for e-travel \n \nAs Fig. 5.1 shows, there are 4 plans for composing \nWeb services in sequence; these can be found by using \nour improved decomposition HTN algorithm. In \ncontrast, by using the SHOP2 algorithm, only the first \nplan can be found and this might not be the users\u2019 \npreferred option. After giving all the available plans \nthat can fulfil the task, users can choose the one that \nthey expect to execute, and also we use the MDP \nmethod to identify the optimal plan based on non-\nfunctional aspects. In Fig. 5.1 the optimal plan is \nplan_4 (marked in broken line).  \nMDP is an efficient method to solve an \noptimization problem, like the decision of choosing a \ndecomposition method in HTN planning. In order to \ndemonstrate the feasibility and validity for using MDP \nto solve the optimal plan, we experimented in our \nsystem by using 10 groups of random QoS data set to \nidentify an optimal plan based on the structure of plans \nshown in Fig. 5.1 shows.  In Fig. 5.2, the abscissa X \nindicates the labelling of the QoS data set, and the \nordinate Y indicates the expected utility value of a plan. \nSo, the point ( , )X Y with different shape indicates \nthat a plan represented by the point shape has an \nexpected utility value Y calculated using QoS data set \nX. The point on the line is the optimal plan under \ncurrent QoS data set. Our results show that the optimal \nplan is almost always the plan with the highest \nexpected utility value, as Fig. 5.2 shows. \n \n90 \n80\n70\n60\n50\n40\n30\n20\n10\n0      1       2       3       4        5        6        7        8        9       10\nplan_1\nplan_2\nplan_3\nplan_4\nThe optimal plan\nEx\npe\nct\ned\n U\ntil\nity\n o\nf p\nla\nn\nQos data set\n \nFig. 5.2. The expected utility of plans and the optimal plan \n \nIt should also be noted that tasks with different \ncomplexity have different size of solution space. Users \nexpect that sufficient and better plans can be provided, \nbut if the task is so complex that the search time is too \nlong and the plans have too much redundancy, we can \nreduce the search space by increasing the threshold \u03bb . \nThe value of \u03bb  is inversely proportional to the search \ntime and the number of plans found. \n \n6. Related Work \n \nConsidering the related work, Zhang jianhong et \nal.[13] proposed an enhanced HTN planning method \ncombined with partial-order planning(POP) for  \nservice composition in which action decomposition are \nused as plan refinements in POP. Comparing to the \npure HTN planning, this approach can solve certain \ntasks, which are novel conjunctive goals. In our \napproach, we also focus on the decomposition in HTN \nplanning, improving the decomposition for non-\nprimitive tasks, but in order to search more potential \nfeasible solutions. \nEvren Sirin and Dana Nau et al.[7] presented a \nHTN planning algorithm, ENQUIRER, designed for \nplanning domains and in which the information about \nthe initial state of the world may not be complete. By \nusing ENQUIRER, information is discoverable \nthrough plan-time information gathering queries. In \nENQUIRER, some limitations in their previous work \n[4] are overcome, which can make service composition \nsound and complete. Based on the work in [4], our \napproach improves the composition method to provide \nmultiple plans and consider the non-functional \nproperties of Web services in planning process in \naddition for user\u2019s flexible choice. \nIncheon Paik and Daisuke Maruyama[2] suggested \na combined architecture, which consisted of HTN \nplanning and Constraint Satisfaction Problem(CSP) as \nan underlying problem-solving engine to automate \nWeb service composition and especially for \ncomposition problem with scheduling with many \nparameters. In the architecture, a complete semantic \nconcept for CSP is provided by using OWL, which can \nmake solver agents automatically solve a given \nproblem with greater flexibility and intelligently. This \nwork focuses on the CSP for the semantic web, the \nCSP solver is a part of the combined architecture but \nindependent of HTN planning. The CSP solver and \nsolver agents solve the problem collaboratively. In this \nmethod, MDP for evaluating an optimal plan is \nindependent of HTN planning as well. But in our work, \nMDP is used to select a whole plan based on multiple \nplans. Likewise, it can be used on single Web Service \nselection in other works [14]. \n     Prashant Doshi, Richard Goodwin et al.[15] \nmodeled the workflow composition problem as a MDP, \nwhich handled non-deterministic behaviors of  Web \nservices in dynamic environments with the phrase of \nthe plan execution. In that paper, a policy computed by \nMDP for generating workflows is capable of optimally \nrecovering from Web service failures. While our work \nis about services composition based on AI planning \nduring decomposing into the atomic tasks, in which \nMDP is used to evaluate an optimal plan among \nmultiple available plans considering the non-\ndeterministic of non-primitive tasks decomposition in \nHTN.  It is different from work in [15]. \n \n7. Conclusion and Future Work \n \nIn this paper, a novel composition model based on \nMarkov-HTN planning has been proposed. With this \nmodel, more than one plan can be found and the \nevaluation mechanism in model can give an optimal \nplan based on non-functional aspects. \nWith a choice of Web services composition plans, \nusers can be more flexible in accomplishing their tasks \nin the most suitable way. They can adopt the optimal \nplan that our method provides, but they can also \nchoose freely according to their own preference from a \nnumber of alternatives.  Moreover, when executing the \nselected plan results in failure, candidate plans can \nensure the tasks will be completed without constraints \nslacking or premises increasing. \nWhile our method can provide multiple plans for \nusers, we will explore a re-planning mechanism to be \nused when plan execution results in failure. Under this \nmechanism, a process of plan execution can be \ncontinued automatically from an appropriate service \nnode and the negative impact of a failure will be \nminimized. \nAcknowledgment Thanks to the anonymous \nreviewers for the comments \n \nReference \n \n[1] Hilmar Schuschel,M. Weske, \"Automated Planning \nin a Service-Oriented Architecture,\" Proceedings of the \n13th IEEE International Workshops on Enabling \nTechnologies: Infrastructure for Collaborative \nEnterprises, 2004. \n[2] Incheon Paik, Daisuke Maruyama, M. N. Huhns, \n\"A Framework for Intelligent Web Services: \nCombined HTN and CSP Approach,\" IEEE \nInternational Conference on Web Services (ICWS'06), \n2006. \n[3] Rama Akkiraju, Biplav Srivastava, Anca-Andreea \nIvan, Richard Goodwin,T. Syeda-Mahmood, \n\"SEMAPLAN: Combining Planning with Semantic \nMatching to Achieve Web Service Composition,\" \nIEEE International Conference on Web Services \n(ICWS'06), 2006. \n[4] Evren Sirin, Bijan Parsia, Dan Wu, James Hendler, \nD. Nau, \"HTN planning for Web Service composition \nusing SHOP2,\" Web Semantics: Science, Services and \nAgents on the World Wide Web 2004, pp. 377-396. \n[5] M. Weiss, B. Esfandiari, Y. Luo, \"Towards a \nclassification of web service feature interactions,\" \nComputer Networks, vol.51, 2007, pp.359-381. \n[6] Dana Nau, Tsz-Chiu Au, Okhtay Ilghami, Ugur \nKuter, J. William Murdock, Dan Wu,F. Yaman, \n\"SHOP2\uff1a An HTN planning system,\" Journal of \nArtfficial Intelligence Research, vol. 20, 2003, pp. \n379-404. \n[7] Ugur Kuter, Evren Sirin, Bijan Parsia, Dana Nau,J. \nHendler, \"Information gathering during planning for \nWeb Service composition,\" Web Semantics: Science, \nServices and Agents on the World Wide Web, vol. 3, \n2005, pp. 183-205. \n[8] Naiwen Lin, Ugur Kuter, James Hendler, \"Web \nService Composition via Problem Decomposition \nAcross Multiple Ontologies,\" 2007 IEEE Congress on \nServices (SERVICES 2007), 2007. \n[9] Gerardo Canfora, Massimiliano Di Penta, Raffaele \nEsposito, M. L. Villani, \"An Approach for QoS-aware \nService Composition based on Genetic Algorithms,\" \nGenetic and Evolutionary Computation \nConference(ACM), 2005. \n[10] LIU Shu-Lei, LIU Yun-Xiang, ZHANG Fan, \nTANG Gui-Fen, JING Ning, \"A Dynamic Web \nServices Selection Algorithm with QoS Global \nOptimal in Web Services Composition,\" Journal of \nSoftware, vol. 18, 2007, pp. 648-656. \n[11] Diego Zuquim Guimar\u00e3es Garcia, M. B. F. d. \nToledo, \"Semantics-enriched QoS policies for web \nservice interactions,\" Proceedings of the 12th Brazilian \nsymposium on Multimedia and the web(ACM), 2006, \npp. 35-44. \n[12] Liu Ke, \"Applied Markov Decision Process,\" \nBeijing:Tsinghua University publication, 2004, pp. 38-\n40. \n[13] Zhang Jianhong, Zhang Shensheng ,M. Y. Cao \nJian, \"Improved HTN Planning Approach for Service \nComposition,\" Proceedings of the 2004 IEEE \nInternational Conference on Services Computing \n(SCC\u201904) 2004. \n[14] Dongjun Cai, Zongwei Luo, Kun Qian,Y. Gao, \n\"Towards Efficient Selection of Web Services with \nReinforcement Learning Process,\" Proceedings of the \n17th IEEE International Conference on Tools with \nArtificial Intelligence, 2005, pp. 372-376. \n[15] Prashant Doshi, Richard Goodwin,R. Akkiraju, \n\"Dynamic Workflow Composition using Markov \nDecision Processes,\" IEEE International Conference \non Web Services (ICWS'04), 2004. \n"}