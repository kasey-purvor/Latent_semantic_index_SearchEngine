{"doi":"10.4204\/EPTCS.16.3","coreId":"197419","oai":"oai:lra.le.ac.uk:2381\/9666","identifiers":["oai:lra.le.ac.uk:2381\/9666","10.4204\/EPTCS.16.3"],"title":"Structure and Behaviour of Virtual Organisation Breeding Environments","authors":["Bocchi, Laura","Fiadeiro, Jos\u00e9","Rajper, Noor","Reiff-Marganiec, Stephan"],"enrichments":{"references":[{"id":43708490,"title":"A Compositional Approach to Performance Modelling.","authors":[],"date":"1996","doi":"10.1017\/cbo9780511569951","raw":"J. Hillston (1996): A Compositional Approach to Performance Modelling. Cambridge University Press","cites":null},{"id":43708486,"title":"A formal approach to service-oriented architecture. In:","authors":[],"date":"2006","doi":"10.1007\/11841197_13","raw":"J. L. Fiadeiro, A. Lopes, L. Bocchi (2006): A formal approach to service-oriented architecture. In: M. Bravetti, M. Nunez, G. Zavattaro (eds) Web Services and Formal Methods. LNCS, vol 4184. Springer, pp. 193\u2013213.","cites":null},{"id":43708480,"title":"A Formal Model for Timing Aspects of Service-Oriented Systems. (Available from www.cs.le.ac.uk\/jfiadeiro).","authors":[],"date":"2009","doi":null,"raw":"L. Bocchi, J. Fiadeiro, S. Gilmore, J. Abreu, M. Solanki, V. Vankayala (2009): A Formal Model for Timing Aspects of Service-Oriented Systems. (Available from www.cs.le.ac.uk\/jfiadeiro).","cites":null},{"id":43708477,"title":"A model-checking approach for service component architectures. In:","authors":[],"date":"2009","doi":"10.1007\/978-3-642-02138-1_15","raw":"J. Abreu, F. Mazzanti, J. Fiadeiro, S Gnesi (2009): A model-checking approach for service component architectures. In: D. Lee, A. Lopes, A. Poetzsch-Heffter (eds) FMOODS-FORTE\u201909. LNCS, vol 5522, Springer, pp. 212\u2013217.","cites":null},{"id":43708484,"title":"Afsarmanesh (2003): Elements of a base VE infrastructure.","authors":[],"date":null,"doi":"10.1016\/s0166-3615(03)00033-2","raw":"L.Camarinha-Matos, H. Afsarmanesh (2003): Elements of a base VE infrastructure. Journal of Computers in Industry 51(2): 139\u2013163.","cites":null},{"id":43708483,"title":"Afsarmanesh (2004): The emerging discipline of collaborative networks. In:","authors":[],"date":"2004","doi":"10.1007\/1-4020-8139-1_1","raw":"L.Camarinha-Matos, H. Afsarmanesh (2004): The emerging discipline of collaborative networks. In: Proc. Virtual Enterprises and Collaborative Networks 2004. Kluwer, pp. 3-16.","cites":null},{"id":43708485,"title":"Afsarmanesh (2007): A framework for virtual organization creation in a breeding environment.","authors":[],"date":null,"doi":"10.1016\/j.arcontrol.2007.03.006","raw":"L. Camarinha-Matos, H. Afsarmanesh (2007): A framework for virtual organization creation in a breeding environment. Annual Reviews in Control 31: 119\u2013135.","cites":null},{"id":43708487,"title":"An Abstract Semantics of Service Discovery and Binding.","authors":[],"date":"2008","doi":"10.1007\/s00165-010-0166-z","raw":"J. L. Fiadeiro, A. Lopes, L. Bocchi (2008): An Abstract Semantics of Service Discovery and Binding. Submitted. (Available from www.cs.le.ac.uk\/jfiadeiro)","cites":null},{"id":43708476,"title":"Fiadeiro (2008): A coordination model for service-oriented interactions. In:","authors":[],"date":null,"doi":"10.1007\/978-3-540-68265-3_1","raw":"J. Abreu, J. Fiadeiro (2008): A coordination model for service-oriented interactions. In: D Lea, G. Zavattaro (eds) Coordination Languages and Models. LNCS, vol 5052. Springer, pp.1\u201316.","cites":null},{"id":43708489,"title":"Global Computing Initiative,","authors":[],"date":null,"doi":"10.1007\/springerreference_76043","raw":"Global Computing Initiative, http:\/\/cordis.europa.eu\/ist\/fet\/gc.htm","cites":null},{"id":43708488,"title":"Kesselman (eds) (2004): The Grid 2: Blueprint for a New Computing Infrastructure.","authors":[],"date":null,"doi":null,"raw":"I. Foster, C. Kesselman (eds) (2004): The Grid 2: Blueprint for a New Computing Infrastructure. Morgan Kaufmann","cites":null},{"id":43708479,"title":"Semiring-based constraint satisfaction and optimization.","authors":[],"date":"1997","doi":"10.1145\/256303.256306","raw":"S. Bistarelli, U. Montanari, F. Rossi (1997): Semiring-based constraint satisfaction and optimization. Journal of the ACM 44(2): pp. 201\u2013236","cites":null},{"id":43708492,"title":"Software Architecture: Perspectives on an Emerging Discipline.","authors":[],"date":"1996","doi":null,"raw":"M. Shaw, D. Garlan (1996): Software Architecture: Perspectives on an Emerging Discipline. Prentice Hall,","cites":null},{"id":43708475,"title":"Specifying and composing interaction proto-cols for service-oriented system modelling. In:","authors":[],"date":"2007","doi":"10.1007\/978-3-540-73196-2_23","raw":"J. Abreu, L. Bocchi, J. L. Fiadeiro, A. Lopes (2007): Specifying and composing interaction proto-cols for service-oriented system modelling. In: J. Derrick, J. Vain (eds) Formal Methods for Networked and Distributed Systems. LNCS, vol 4574. Springer, pp. 358\u2013373.","cites":null},{"id":43708481,"title":"The verifiable virtual organisation: a position paper. In:","authors":[],"date":"2008","doi":null,"raw":"J. Bryans, J. Fitzgerald (2008): The verifiable virtual organisation: a position paper. In: Proc. Formal Aspects of Virtual Organisations 2008. Newcastle University CS-TR-1098.","cites":null},{"id":43708482,"title":"Time bands in systems structure. In:","authors":[],"date":"2006","doi":"10.1007\/1-84628-111-3_4","raw":"A. Burns, G. Baxter (2006): Time bands in systems structure. In: D. Besnard, C. Gacek, C. B. Jones (eds) Structure for Dependability: Computer-Based Systems from an Interdisciplinary Perspective. Springer, pp. 74\u201388.","cites":null},{"id":43708478,"title":"Toumani (2004): Web services conversation modeling: A cornerstone for ebusiness automation.","authors":[],"date":null,"doi":"10.1109\/mic.2004.1260703","raw":"B. Benatallah, F. Casati, F. Toumani (2004): Web services conversation modeling: A cornerstone for ebusiness automation. IEEE Internet Computing 8(1): pp. 46\u201354","cites":null},{"id":43708491,"title":"Two graph-based techniques for software architecture reconfiguration.","authors":[],"date":"2001","doi":"10.1016\/s1571-0661(04)80201-9","raw":"D. Hirsch, U. Montanari (2001): Two graph-based techniques for software architecture reconfiguration. Electronic Notes in Theoretical Computer Science 51, pp. 177\u2013190.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010","abstract":"This paper was presented at Formal Aspects of Virtual Organisations (FAVO 2009), 3 November 2009, Eindhoven, The Netherlands and published in the proceedings.This paper provides an outline of a formal approach that we are developing for modelling Virtual Organisations (VOs) and their Breeding Environments (VBEs). We propose different levels of representation for the functional structures and processes that VBEs and VOs involve, which are independent of the specificities of the infrastructures (organisational and technical) that support the functioning of VBEs. This allows us to reason about properties of tasks performed within VBEs and services provided through VOs without committing to the way in which they are implemented.Peer-reviewedPost-prin","downloadUrl":"http:\/\/creativecommons.org\/licenses\/by\/3.0).","fullTextIdentifier":"https:\/\/lra.le.ac.uk\/bitstream\/2381\/9666\/1\/2010-3.pdf","pdfHashValue":"e2a6ca203c7985cc2930cf1d70b5ad613cf4d38d","publisher":"Open Publishing Association","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/9666<\/identifier><datestamp>\n                2011-09-09T01:02:02Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_4072<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nStructure and Behaviour of Virtual Organisation Breeding Environments<\/dc:title><dc:creator>\nBocchi, Laura<\/dc:creator><dc:creator>\nFiadeiro, Jos\u00e9<\/dc:creator><dc:creator>\nRajper, Noor<\/dc:creator><dc:creator>\nReiff-Marganiec, Stephan<\/dc:creator><dc:description>\nThis paper was presented at Formal Aspects of Virtual Organisations (FAVO 2009), 3 November 2009, Eindhoven, The Netherlands and published in the proceedings.<\/dc:description><dc:description>\nThis paper provides an outline of a formal approach that we are developing for modelling Virtual Organisations (VOs) and their Breeding Environments (VBEs). We propose different levels of representation for the functional structures and processes that VBEs and VOs involve, which are independent of the specificities of the infrastructures (organisational and technical) that support the functioning of VBEs. This allows us to reason about properties of tasks performed within VBEs and services provided through VOs without committing to the way in which they are implemented.<\/dc:description><dc:description>\nPeer-reviewed<\/dc:description><dc:description>\nPost-print<\/dc:description><dc:date>\n2011-09-08T15:10:57Z<\/dc:date><dc:date>\n2011-09-08T15:10:57Z<\/dc:date><dc:date>\n2010<\/dc:date><dc:type>\nConference paper<\/dc:type><dc:identifier>\nBocchi, L; Fiadeiro, J; Rajper, N. and Reiff-Marganiec, S. \u2018Structure and Behaviour of Virtual Organisation Breeding Environments\u2019 in Bryans, J. and Fitzgerald, J. (Eds.) Theoretical Computer Science 16 (EPTCS 16), 2010, pp. 26-40<\/dc:identifier><dc:identifier>\n2075-2180<\/dc:identifier><dc:identifier>\nhttp:\/\/eptcs.org\/content.cgi?FAVO2009<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/9666<\/dc:identifier><dc:identifier>\n10.4204\/EPTCS.16.3<\/dc:identifier><dc:language>\nen<\/dc:language><dc:rights>\n\u00a9 2011 The Authors. This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http:\/\/creativecommons.org\/licenses\/by\/3.0).<\/dc:rights><dc:publisher>\nOpen Publishing Association<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["2075-2180","issn:2075-2180"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":[],"subject":["Conference paper"],"fullText":"Submitted to:\nFAVO 2009\nc\u00a9 L. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec\nThis work is licensed under the\nCreative Commons Attribution License.\nStructure and Behaviour of Virtual Organisation Breeding\nEnvironments\nLaura Bocchi, Jose\u00b4 Fiadeiro, Noor Rajper and Stephan Reiff-Marganiec\nDepartment of Computer Science, University of Leicester\nUniversity Road, Leicester LE1 7RH, UK\n{lb148,jose,nr76,srm13}@mcs.le.ac.uk\nThis paper provides an outline of a formal approach that we are developing for modelling Virtual Or-\nganisations (VOs) and their Breeding Environments (VBEs). We propose different levels of represen-\ntation for the functional structures and processes that VBEs and VOs involve, which are independent\nof the specificities of the infrastructures (organisational and technical) that support the functioning\nof VBEs. This allows us to reason about properties of tasks performed within VBEs and services\nprovided through VOs without committing to the way in which they are implemented.\n1 Introduction\nThis paper reports on on-going work towards a formal approach for modelling virtual organisations\n(VOs) and their breeding environments (VBEs) in the sense of [10]. A VBE defines a base long-term\ncooperation agreement among a number of participants (individuals or institutions) and characterizes\ntheir interoperable infrastructure [9]. As such, a VBE represents the organisational context in which the\ncreation and operation of VOs takes place; VOs are seen as ensembles that are formed dynamically to\nprovide high-level functionalities, or services, by sharing a number of resources in a distributed way,\nusing the new connectivity environments that are being made available through Global [15] and Grid\nComputing [14].\nThe purpose of developing a formal modelling approach echoes the challenge of building \u201cVerifiable\nVOs\u201d as raised in [7]. This implies that our approach is unavoidably partial: as in any formal account of\nthe real world (which includes business), we need to operate on abstractions that are amenable to some\nform of mathematical representation and analysis. Our approach defines different levels of representation\nof VBEs, VOs and their activities, which are essential for supporting several forms of analysis, from the\nproperties of the coordination structures that are put in place through policies and workflows to the\nmanagement of the resources that are shared within a VBE and used by their VOs.\nThere are multiple levels of abstraction at which formal methods can operate. In this paper, we ab-\nstract from the specificities of the infrastructures (organisational and technical, including IT) that support\nthe functioning of VBEs: we aim for an \u2018infrastructure-agnostic\u2019 account of the functional structures and\nprocesses that VBEs and VOs involve. We concentrate on the functional and behavioural aspects in\nwhich partners and resources are involved without committing to the way in which they are effectively\nimplemented. Therefore, we do not model the brokers (human or software) that procure services that\ncan be used to create business or the communication networks that support interconnectivity \u2014 what we\ncould call the VBE middleware.\nWe are also aware that the model that we present in this paper misses several aspects of VBEs. For\ninstance, we do not address at present the decision-making processes through which VOs are created\nwithin a VBE or the actual business goals that preside to the creation of a VBE (see [11] for an overview\nof some of the formal approaches that have been proposed to address these issues). However, we do\n2 Structure and Behaviour of Virtual Organisation Breeding Environments\nintend that the formal models that we propose can be used to inform such processes, for instance by sup-\nporting stochastic analysis on the usage that VOs can make on VBE resources or validation of functional\nproperties that VOs offer through services, something that we are leaving for future work.\nOur approach supports the definition of a structural and behavioural model of a fixed VBE based on\nthree different levels of representation: (1) the definition of the persistent functionalities of the VBE;\n(2) the definition of the transient functionalities of the VOs that are offered by the VBE at a specific\nmoment in time, what we call a business configuration of the VBE; and (3) the ensemble of components\n(instances) and connectors that, at that time, deliver the services offered by the VOs present in the busi-\nness configuration, what we call a state configuration. These levels are not \u2018architectural layers\u2019: they\ndo not contain entities that interact with entities in other layers. Rather, they represent a hierarchy of\nrepresentations at a fixed time: the first level is invariant, i.e. it provides a representation of those aspects\nof a VBE that will not change; the business configuration at the level below captures the way the VBE is\nlogically organised at that time in terms of VOs; the state configuration represents the actual \u2018physical\u2019\ninstances of the VOs that are currently operational, i.e. which specific services are currently being pro-\nvided within the VBE. \u2018Real\u2019 entities are only represented in state configurations: the other levels deal\nonly with types of entities.\nMore specifically, the three levels of representation are modelled as follows:\n\u2022 A VBE consist of (1) a collection of resources; (2) a consortium of (persistent) partners; (3) a\nnumber of policies constraining the way resources can be shared and the partners agree to do\nbusiness together, including rules for the consortium to expand for establishing specific VOs; and\n(4) a number of supporting tasks that operate processes (management or otherwise) that serve the\nroles enacted within the VBE. These constituent elements are invariant, i.e. they are present in\nevery business configuration of the VBE (in the sense explained below).\n\u2022 The current business configuration of a VBE, is understood as (1) the collection of additional\n(non-permanent) partners, that we call associates, and resources that are part of the VBE; (2) the\ntasks that support the roles of the new partners and their resources; (3) the VOs that the VBE\ncurrently supports; and (4) the policies that apply to their instantiation and their coordination at\nany given time. Tasks and VOs may rely on complementary, transient partners (which we call\n\u2018associates\u2019) that join the VBE to provide specific business services and remain in the VBE only\nwhile those services are required. Associates can be fixed at VO-creation time or discovered on\nthe fly when needed, subject to service-level agreements, in order to be able to accommodate the\nneeds of specific clients.\n\u2022 The current state configuration of a VBE consists of \u2018components\u2019, connected through \u2018wires\u2019,\nthat jointly operate the tasks and the services offered by the VOs that are running in the current\nstate. These components include the shared resources of the VBE as well as those that are brought\ninto the VBE by the associates. The topology of the configuration (the way components are wired\ntogether) reflects the policies established at the level of the current business configuration. At\nthis level, one can determine levels of resource consumption or properties of a number of other\nparameters, including measures of quality of service.\nPart of the importance of distinguishing between these three levels is that we can account for two different\nkinds of change (admitting that the VBE level is invariant, the creation of which we do not model at\npresent):\n\u2022 Changes in the business configuration reflect the creation or deletion of tasks or VOs. Creating\na new VO may involve identifying associates or the criteria that will need to be observed for\nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 3\ndiscovering such associates on the fly, depending on the nature of the customers that procure the\nservice (in which case each service may involve different associates). Deleting a VO requires\nthat the current state configuration is in a quiescent state relative to that VO, i.e. that none of\nthe services offered by the VO is currently active. Changes at this level are triggered by business\nconcerns (which we do not model at present).\n\u2022 Changes to the state configuration result from the launching of (instances of) tasks or of services\nprovided by one of the VOs present in the business configuration, which dynamically adds (or\nremoves) components or wires to (from) the current state configuration. Changes at this level\nare triggered by the actions performed by or through the components and the communications\nexchanged through the wires that connect them.\nGiven the way levels are organised, these changes take place in different \u2018timebands\u2019 in the sense of [8],\ni.e. the levels induce different granularities of time: the state-configuration changes take place within a\nfixed business configuration, meaning that business configurations induce a coarser time scale.\nGiven the limited space available, we focus only on the VBE and business configuration levels. In the\nsequel, we outline the formalisms and methodology that we are proposing for each level of representation\nand change, which we have adapted (and extended) from recent work on service-oriented modelling\n[12, 13]. Essentially, we use graph-based representations to formalise and establish relationships between\nthe two levels \u2014 logic\/process-based formalisms for the specification of activities and services.\n2 A Model of Virtual Organisation Breeding Environments\nAs already mentioned, we see a VO as a dynamic ensemble of entities that operate over a communication\nand collaboration network through which they can share resources to offer services. Some of those\nentities and resources are provided by the VBE in which the VO was created; others are external to the\nVBE and co-opted or procured to satisfy the business goal of that particular VO. We define a (formal\nmodel of a) VBE to consist of:\n\u2022 A collection of persistent partners, where a partner consists of:\n\u2013 Its name (individual or organisation, virtual or not);\n\u2013 A collection of attributes through which policies can be defined on the involvement of the\npartner in business configurations.\n\u2022 A collection of persistent resources where a resource consists of:\n\u2013 Its identifier;\n\u2013 A collection of attributes through which the usage of the identified resource can be monitored.\n\u2022 A collection of policies expressed over partners and resources that apply to all business configura-\ntions of the VBE.\n\u2022 A collection of tasks that support the roles enacted within the VBE. A task is defined by a task-\nmodule consisting of:\n\u2013 Component specifications that are used in state configurations as interfaces to the partners\n(in which they are called serves-interfaces) or resources (in which they are called uses-\ninterfaces) involved in the task;\n\u2013 Specifications of components and wires that jointly orchestrate the task.\n4 Structure and Behaviour of Virtual Organisation Breeding Environments\n\u2013 Mappings from the serves-interfaces (resp. uses-interfaces) to the partners (resp. resources)\nof the VBE complete the task definition.\nNotice that we separate the task-module from the way it is used in the VBE. Effectively, task-modules\nare design primitives that define patterns that can be reused in the definition of VBEs.\nAs an example, we use a very simple scenario: a group of hotels, a car rental company and a guided-\ntour company decide to create a VBE \u2014 visitUs \u2014 to promote tourism in the local town.\n\u2022 The partners of visitUs are the hotels (to make the example shorter, we model the case of two hotels,\ngrandHO and centralHO), the car rental agency carHI and the guided-tour company tourAG;\n\u2022 The resources include two systems: registrationSY supporting management activities of visitUs\nand a shared reservation system reservationSY supporting the business purpose (hotel bookings\nand so on).\n\u2022 The policies establish criteria for the admission of transient partners (e.g. they need to operate\nwithin a given vicinity) and the use of the shared resources (e.g. the cost of maintaining the reser-\nvation system), for which their interfaces need to include parameters that capture these properties.\nThe policies are expressed as first-order expression in the language of the parameters and the cor-\nresponding data types.\n\u2022 The tasks include the process managerRO that supports the administrator role performed by grandHO,\nwhich connects to the registration system, and the process memberRO that allows each partner to\nuse the reservation system. (Other roles might have been considered as discussed in [11].)\nWe use a graphical notation to depict task modules as illustrated in Figure 1 for the task managerRO\nthat supports the administrator of visitUs. The specification of the component MO that orchestrates the\ntask is Management Orchestrator and the wires are RM and MR. The specification of the serves-interface\nMN used by grandHO - the partner who performs the managerial role - is Registry Manager, and the\nspecification of the uses-interface RE (which connects to registrationSY, the resource that supports the\ntask) is Registry.\nFigure 1: The task module managerRO\nWe also use a graphical notation to depict VBEs, which is inspired by use-case diagrams (though our\nusage of the notation is not necessarily faithful to its original purpose). As illustrated in Figure 2, we\nuse stereotypes to identify the actors that correspond to partners and resources of the VBE. Each task is\nrepresented by a use-case.\nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 5\nFigure 2: VBE diagram for visitUS\n3 Business Configurations\nThe current business configuration of a VBE defines the types of tasks and the VOs that the VBE supports\nto meet its (current) business goals. The actual process through which a VBE decides on how to configure\nitself is not part of our present model as it depends on a number of business or organisational concerns\nthat the formal methods that we are illustrating do not address. However, the kinds of qualitative and\nquantitative analysis that our approach provides should be able to inform that process and corresponding\ndecisions, something that we plan to address in the future.\nWe define a VBE business configuration to consist of an extension of the VBE with:\n\u2022 A collection of associates (transient partners), where an associate consists of:\n\u2013 Its name (individual or organisation, virtual or not);\n\u2013 A collection of attributes through which policies can be defined on the involvement of the\nassociate in the VBE.\n\u2022 A collection of transient resources, each of which consists of:\n\u2013 Its identifier;\n\u2013 A collection of attributes through which the usage of the identified resource can be monitored.\n\u2022 A collection of policies expressed over associates and their resources that apply to their involve-\nment in the VBE (e.g. the conditions that determine the cessation of their involvement).\n\u2022 A collection of tasks that support the roles enacted by the associates within that business configu-\nration of the VBE.\n\u2022 A collection of VOs that define the services that the VBE provides in that business configuration.\nA VO is defined by a VO module consisting of:\n6 Structure and Behaviour of Virtual Organisation Breeding Environments\n\u2013 Component specifications that are used in state configurations as serves-interfaces to the\npartners or associates, or uses-interfaces to resources involved in the VO; typically, one such\ninterface serves the coordinator of the VO.\n\u2013 Component specifications that are used as requires-interfaces for external entities or as the\nprovides-interface for the customers of the VO. The specification of requires-interfaces iden-\ntifies the behavioural properties that are expected of external parties to be eligible to be\nchosen as service providers for the VO. The specification of the provides-interface identifies\nthe properties that customers can expect of the service offered by the module.\n\u2013 Specifications of the components and wires that model the (possibly distributed) process that\norchestrates the services provided by the VO.\n\u2013 An internal configuration policy, which identifies the triggers of the external service discov-\nery process as well as the initialization and termination conditions of the components and\nwires.\n\u2013 An external configuration policy, which consists of the variables and policies that determine\nthe quality profile to which the discovered services need to adhere.\n\u2013 Mappings from the serves-interfaces (resp. uses-interfaces) to the partners or associates (resp.\nresources) of the VBE complete the VO definition.\n\u2022 A collection of external entities, each of which represents a partner that may need to be co-opted\nto provide a service for one of the VOs that the VBE offers in that business configuration.\n\u2022 A collection of customers, one for each of VO, each of which defines the interface (interactions\nand functional properties) that the customer of the corresponding VO can expect.\nAs for tasks, VO-modules are design primitives that define patterns that can be reused in the definition of\nmultiple VBE business configurations. As an example, we consider a business configuration of visitUs in\nwhich a travel booking service is offered through a VO named travelBK. An associate named travelAG is\nadmitted as a member of the VBE for managing that VO. Services offered through travelBK may require\nan external flight agent to be discovered according to the criteria specified in flightAG. A specific agent is\nnot chosen as an associate in order to maximise customer satisfaction \u2014 each customer of the VO may\nexpress service-level policies (e.g. preference for a particular airline, or minimum cost, or proximity)\nthat will be optimised when selecting the corresponding external partner.\nWe extend the diagrams used for VBEs to account for business configurations as illustrated in Figure 3.\nWe use a graphical notation similar to task-modules to depict VO-modules as illustrated in Figure 4\nfor travelBK. We use the symbol to indicate the internal configuration policy as it applies to compo-\nnents and requires interfaces, and for the external configuration policy. The module consists of\na provides-interface TR for interactions with customers of the VO, a serves-interface for interactions with\nthe coordinator of the VO, a uses-interface for interactions with the reservations system, and a requires-\ninterface for the discovery of a flight agent.\nA more formal definition follows where each node uniquely represents a specific interface of an\nentity (e.g., institution, participant, etc.) in a business configuration rather than the entity itself. A task-\nor VO-module M defines:\n\u2022 A graph graph(M).\n\u2022 A distinguished subset of nodes uses(M)\u2286 nodes(M).\n\u2022 A distinguished subset of nodes serves(M) \u2286 nodes(M) distinct from uses(M).\nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 7\nFigure 3: VBE business configuration for visitUS\nFigure 4: The VO module travelBK\n\u2022 In the case of a VO-module, a subset of nodes requires(M) \u2286 nodes(M) distinct from uses(M) and\nserves(M).\n\u2022 In the case of a VO-module, a node provides(M)\u2208 nodes(M) distinct from requires(M), serves(M)\nand uses(M).\n\u2022 A labelling function labelM such that:\n\u2013 labelM(n) is a component specification.\n\u2013 labelM (e : n\u2194 m) is a connector.\nComponent specifications and connectors are discussed in Section 4. In the case of a VO-module, we\ndenote by body(M) the (full) sub-graph of graph(M) that forgets the node provides(M), the nodes in\nrequires(M) and the edges that connect them to the rest of the graph. That is, body(M) consists of all the\nelements that are internal to the VO.\n8 Structure and Behaviour of Virtual Organisation Breeding Environments\nA business configuration of a VBE also defines a labelled graph obtained by expanding its tasks\nand VOs with the bodies of the labelled graphs that correspond to their modules. Having such a formal\nrepresentation for VBE configurations allows us to use graph transformations to formalise rules and\npolicies to evolve the configurations, for instance the creation of new VOs. In Figure 5, we depict a\nbusiness configuration that extends the one in Figure 3 with a new VO that offers arrangements for\nweddings as a service.\nFigure 5: Another VBE business configuration for VisitUS\n4 Component Specifications and Connectors\nIn order to account for the behaviour that, in state configurations (referred to as level 3 in Section 1),\nemerges from the interconnections established inside the ensembles that perform tasks or deliver services\nthrough VOs, we need a uniform representation of the entities and resources involved, which in our\napproach we do in terms of component and wire specifications. A component specification is a pair\n\u3008signature, behaviour\u3009 where:\n\u2022 Signature declares the interactions in which the component may be involved.\n\u2022 Behaviour is a formal model of the behaviour of the entity that the component represents expressed\nin terms of the interactions identified in the signature and a number of parameters that reflect\nresource consumption or quality-of-service attributes.\nGiven the space available, we are not able to define in detail the formalisms that we use in component\nspecifications (these are similar to those that we have proposed for the service modelling language SRML\n[12]). We discuss below the provides-interface of travelBK, which is of type Customer. This specifica-\ntion is what we call a business protocol: it uses patterns of typical business conversations, which are\nabbreviations of sentences of a temporal logic that we have adopted for service-oriented modelling [2].\nThe remaining specifications can be found in the Appendix.\nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 9\nIn the formalism that we adopt, interactions can be either synchronous or asynchronous, one-way or\ntwo-way (i.e. conversational):\n\u2022 s&r\/r&s \u2014 conversational asynchronous interaction where the initiating party expects a reply from\nits co-party\n\u2022 rcv\/snd \u2014 one-way asynchronous receive\/send\n\u2022 ask\/rpl \u2014 synchronization with the co-party to obtain\/transmit data\n\u2022 tll\/prf \u2014 blocking requests to the co-party to perform an operation\nIn our example, the interface that travelBK offers to its customers specifies that the VO can engage in\nthe interaction bookTrip (initiated by the customer) and send payNotify and refund to the customer.\nBUSINESS PROTOCOL Customer is\nINTERACTIONS\nr&s bookTrip\n\u05a0 from, to : airport, out, in : date\n\u0001 fconf : fcode, hconf : hcode, amount : moneyvalue\nsnd payNotify\n\u0001 status : bool\nsnd refund\n\u0001 amount : moneyvalue\nSLA VARIABLES\nKD : [0..100],PERC : [0..100]\nBEHAVIOUR\ninitiallyEnabled bookTrip\u05a0 ?\n(bookTrip \u2227bookTripX?) ensures payNoti f y\u05a0 !\n(payNoti f y\u05a0 !\u2227 payNoti f y.status) enables bookTrip\u0001 ? until today+KD < bookTrip.out\n(bookTrip\u0001 ?\u2227 today+KD < bookTrip.out) ensures re f und\u05a0 !\nre f und.amount > bookTrip.amount \u2217PERC\/100 after re f und\u05a0 !\nInteractions of type r&s and s&r are conversational (in the sense of [4]), i.e. they involve a number\nof events exchanged between the two parties:\ninteraction\u05a0 The event of initiating interaction.\ninteraction\u0001 The reply-event of interaction.\ninteractionX The commit-event of interaction.\ninteraction8 The cancel-event of interaction.\ninteraction\u0001 The revoke-event of interaction.\nThe meaning of these events should be self-explanatory: the reply-event is sent by the co-party,\noffering a deal or declining to offer one; in the first case, the party that initiated the conversation may\neither commit to the deal or cancel the interaction; after committing, the party can still revoke the deal,\ntriggering a compensation mechanism. Events can have several parameters (for instance, the initiation\nevent bookTrip\u05a0 carries data about airports and dates), and the corresponding reply event bookTrip\u0001 \ncarries reservation codes for the flight and the hotel as well as the total cost).\nThese events are used as atomic formulae in the language that we use to specify the properties that\na customer can expect from the service. For instance, the first property specifies that the VO is ready to\nreceive the initiation event of BookTrip. The second property says that a commit event received during\nthe validity period of the booking entitles the customer to receive a pay confirmation.\n10 Structure and Behaviour of Virtual Organisation Breeding Environments\nThe declaration of the interactions in a signature is local to the component, i.e. all interaction names\nare local. This implies that there are no implicit relationships between components that result from the\naccidental of the same name: all interconnections are externalised instead in what we call \u2018wires\u2019. A\nwire defines a connector through which two components can be interconnected so that they can interact.\nMore specifically, a connector [1, 18] is a triple \u3008roleA,Glue,roleB\u3009 where roleA and roleB are signatures\nand Glue defines the protocol that coordinates the interactions identified in roleA and roleB \u2014 this may\ninclude routing events, superposing protocols for secure communication, or transforming sent data to the\nformat expected by the receiver, inter alia. A wire interconnects two components through the connector\nby mapping roleA to one component and roleB to the other.\nService-level agreements are negotiated through policies using the c-semiring approach to constraint\nsatisfaction and optimisation [5]. An example of a policy is:\n{TC.KD,TR.PERC}\ndef1(d,p) =\n{\n1 if d \u2208 [0..100] and 1 \u2264 d and p \u2264 90 and p\u226450+5*d\n0, otherwise\nThe policy expresses that percentage p of the cost that is refundable (transmitted to the customer\nthrough the SLA variable TR.PERC) is bounded by the least of 90% and a linear function of the period\nd during which the deal can be revoked, which is established by the VO coordinator through the variable\nTC.KD.\n5 Concluding Remarks and Further Work\nIn this paper, we have outlined a formal approach that we are defining for modelling structural and\nbehavioural aspects of VBEs and VOs. Several levels of representation are proposed for VBEs that\ndistinguish between (1) the persistent aspects of VBEs in terms of members, resources and tasks that\ninvolve them, (2) the possible business configurations of VBEs characterised in terms of the VOs that it\ncreates to provide services and the additional (associate) members that are involved in the VOs, and (3)\nthe state configurations of VBEs, which result from the services (instants) offered by the VOs at a given\nstate.\nFrom a formal point of view, these levels of representation are graphs whose nodes are component\nspecifications and the edges (wires) are connectors. Component specifications provide either interfaces\nfor partners and resources to be involved in tasks and services offered through VOs, or orchestrations of\nthose services, or requirements for external services, or properties offered to customers of VOs. Choosing\ngraphs as formal models allow us to use techniques that have been proposed for formalising architectural\naspects of system structure and evolution (e.g. [13, 17]) in order to account for the evolution of VBE\nbusiness configurations (as VOs are added, deleted or modified) and also their configuration states (as\nnew services are created and bound to customers).\nAs formalisms for specification, we are using those put forward for service-oriented modelling in the\nSENSORIA project [1, 2, 12]. Together with the graph-based representation of business configurations,\nthese formalisms can be used for inferring emergent properties of VOs. Model-checking techniques\nhave been used for verifying properties offered by services [3], which we plan to extend to VOs. The\nproposed formal model also supports forms of quantitative analysis using the stochastic analyser PEPA\n[6, 16], which we intend to extend to VOs. Negotiation of service-level agreements is supported by\ntechniques for constraint optimisation [5], which again we plan to use for the discovery of services from\nexternal partners that VOs may require.\nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 11\nReferences\n[1] J. Abreu, L. Bocchi, J. L. Fiadeiro, A. Lopes (2007): Specifying and composing interaction proto-cols for\nservice-oriented system modelling. In: J. Derrick, J. Vain (eds) Formal Methods for Networked and Distributed\nSystems. LNCS, vol 4574. Springer, pp. 358\u2013373.\n[2] J. Abreu, J. Fiadeiro (2008): A coordination model for service-oriented interactions. In: D Lea, G. Zavattaro\n(eds) Coordination Languages and Models. LNCS, vol 5052. Springer, pp.1\u201316.\n[3] J. Abreu, F. Mazzanti, J. Fiadeiro, S Gnesi (2009): A model-checking approach for service component archi-\ntectures. In: D. Lee, A. Lopes, A. Poetzsch-Heffter (eds) FMOODS-FORTE\u201909. LNCS, vol 5522, Springer,\npp. 212\u2013217.\n[4] B. Benatallah, F. Casati, F. Toumani (2004): Web services conversation modeling: A cornerstone for e-\nbusiness automation. IEEE Internet Computing 8(1): pp. 46\u201354\n[5] S. Bistarelli, U. Montanari, F. Rossi (1997): Semiring-based constraint satisfaction and optimization. Journal\nof the ACM 44(2): pp. 201\u2013236\n[6] L. Bocchi, J. Fiadeiro, S. Gilmore, J. Abreu, M. Solanki, V. Vankayala (2009): A Formal Model for Timing\nAspects of Service-Oriented Systems. (Available from www.cs.le.ac.uk\/jfiadeiro).\n[7] J. Bryans, J. Fitzgerald (2008): The verifiable virtual organisation: a position paper. In: Proc. Formal Aspects\nof Virtual Organisations 2008. Newcastle University CS-TR-1098.\n[8] A. Burns, G. Baxter (2006): Time bands in systems structure. In: D. Besnard, C. Gacek, C. B. Jones (eds)\nStructure for Dependability: Computer-Based Systems from an Interdisciplinary Perspective. Springer, pp.\n74\u201388.\n[9] L.Camarinha-Matos, H. Afsarmanesh (2004): The emerging discipline of collaborative networks. In: Proc.\nVirtual Enterprises and Collaborative Networks 2004. Kluwer, pp. 3-16.\n[10] L.Camarinha-Matos, H. Afsarmanesh (2003): Elements of a base VE infrastructure. Journal of Computers\nin Industry 51(2): 139\u2013163.\n[11] L. Camarinha-Matos, H. Afsarmanesh (2007): A framework for virtual organization creation in a breeding\nenvironment. Annual Reviews in Control 31: 119\u2013135.\n[12] J. L. Fiadeiro, A. Lopes, L. Bocchi (2006): A formal approach to service-oriented architecture. In: M.\nBravetti, M. Nunez, G. Zavattaro (eds) Web Services and Formal Methods. LNCS, vol 4184. Springer, pp.\n193\u2013213.\n[13] J. L. Fiadeiro, A. Lopes, L. Bocchi (2008): An Abstract Semantics of Service Discovery and Binding.\nSubmitted. (Available from www.cs.le.ac.uk\/jfiadeiro)\n[14] I. Foster, C. Kesselman (eds) (2004): The Grid 2: Blueprint for a New Computing Infrastructure. Morgan\nKaufmann\n[15] Global Computing Initiative, http:\/\/cordis.europa.eu\/ist\/fet\/gc.htm\n[16] J. Hillston (1996): A Compositional Approach to Performance Modelling. Cambridge University Press\n[17] D. Hirsch, U. Montanari (2001): Two graph-based techniques for software architecture reconfiguration.\nElectronic Notes in Theoretical Computer Science 51, pp. 177\u2013190.\n[18] M. Shaw, D. Garlan (1996): Software Architecture: Perspectives on an Emerging Discipline. Prentice Hall,\nLondon\n12 Structure and Behaviour of Virtual Organisation Breeding Environments\n \nAppendix \u2013 The TravelBK VO-module \n \nTRAVELBK  consists of:  \n\u2022 TR \u2013 the provides-interface of the module, of type Customer; \n\u2022 FA \u2013 a requires-interface (for a flight-booking service), of type FlightAgent; \n\u2022 RO \u2013 the component that orchestrates the business process, of type TravelOrchestrator; \n\u2022 RV \u2013 a uses-interface for a resource that provides a registration system, of type Reservations;  \n\u2022 TC \u2013 a serves-interface for the partner that plays the role of coordinator of the VO, of type \nTravelCoordinator; \n\u2022 TO, RB, RF, RT \u2013 wire-interfaces typed by connectors that establish the required interconnections.  \n \nVO TravelBK is  \nCOMPONENTS \n RO: TravelOrchestrator \n   intRO init: s=START \u2227 hconf=NILL \n   intRO term: s=END_UNBOOKED  \n      \u2228 (s=CONFIRMED \u2227 today\u2265bookTrip.out) \u2228 s=END_COMPENSATED \nPROVIDES \n TR: Customer \nREQUIRES \n FA: FlightAgent \n   intFA trigger: hconf=hcode                             \nSERVES \n   TC:  TravelCoordinator \nUSES \n RV:  Reservations \nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 13\n \n \n \nEXTERNAL POLICY (partial) \n SLA VARIABLES \n     TC.KD, TR.PERC, FA.MAX, TR.KD \n CONSTRAINTS \n  C1: {TC.getFlightCommission(FA.serviceId),FA.MAX} \n    def1(d,p)=  \n \n     C2:  {TC.KD,TR.PERC} \n    def2(d,p)=  \n \nWIRES (partial) \n \nTR \nCustomer  c1 TO d1 \nRO \nTravelOrchestrator \ns&r bookTrip \n \uf025 from \n  to \n  out \n  in \n     traveller \n     travcard \n \uf02a fconf \n  hconf \n  amount \nS1 \ni1 \ni2 \ni3 \ni4 \ni5 \ni6 \no1 \no2 \no3 \n\u2261 \nR1 \ni1 \ni2 \ni3  \ni4 \ni5 \ni6 \no1 \no2 \no3 \nr&s bookTrip \n \uf025 from \n  to \n  out \n  in \n     traveller \n     travcard \n \uf02a fconf \n  hconf \n  amount \nrcv refund \n \uf025 amount \nR1 \ni1 \u2261  \nS1 \ni1 \nsnd ackRefundSnd \n \uf025 amount \n \nRO \nTravelOrchestrator c2 \n \nRF d2 FA FlightAgent \ns&r bookFlight \n  \uf025  from \n  to \n  out \n  in \n  traveller \n \uf02a fconf \n      amount  \n \nS1 \ni1 \ni2 \ni3 \ni4 \ni5 \no1 \no2 \n \n\u2261  \nR1 \ni1 \ni2 \ni3 \ni4 \ni5 \no1 \no2 \n \nr&s lockFlight \n \uf025 from \n  to \n  out \n  in \n  traveller \n \uf02a fconf \n  amount  \n  \n  \nEND MODULE \n \n  \n14 Structure and Behaviour of Virtual Organisation Breeding Environments\n \n \n \nSPECIFICATIONS \nLAYER PROTOCOL TravelCoordinator is  \n INTERACTIONS \n    rpl getFlightCommission(FAid:serviceId):moneyvalue  \n \nLAYER PROTOCOL Reservations is  \n INTERACTIONS \n  rpl availability(out,in:date):hcode \n   prf book(hconf:hcode) \n   prf cancel(hconf:hcode) \nBUSINESS ROLE TravelOrchestrator is \n INTERACTIONS \n   r&s  bookTrip \n     \uf025 from,to:airport, \n      out,in:date, \n      traveller:usrdata \n      travcard:paydata \n     \uf02a fconf:fcode, \n      hconf:hcode, \n      amount:moneyvalue \n   ask  findHotel(out,in:date):hcode \n   tll  bookHotel(hconf:hcode)  \n   tll  cancelHotel(fconf:hcode) \n   snd ackRefundSnd \n     \uf025 amount:moneyvalue \n   s&r  bookFlight \n     \uf025 from,to:airport, \n      out,in:date, \n      traveller:usrdata \n    \uf02a fconf:fcode \n      amount:moneyvalue       \nORCHESTRATION \nlocal s:[START, QUERIED, FLIGHT_OK, CONFIRMED, END_UNBOOKED, END_COMPENSATED], \nhconf:hcode \n  transition Request \ntriggeredBy bookTrip\uf025 \nguardedBy s=START \neffects \n hconf\u2019=findHotel(bookTrip.in,bookTrip.out) \n  \u2227 hconf\u2019\u2260NIL  \u2283 s\u2019=QUERIED \n  \u2227 hconf\u2019=NIL \u2283 s\u2019=END_UNBOOKED  \nsends hconf\u2019\u2260NIL \u2283 bookFlight\uf025 \n  \u2227 bookFlight.from=bookTrip.from \n  \u2227 bookFlight.to=bookTrip.to \n  \u2227 bookFlight.out=bookTrip.out \n  \u2227 bookFlight.in=bookTrip.in \n  \u2227 bookFlight.traveller=bookTrip.traveller \n \u2227 hconf\u2019=NIL \u2283 bookTrip\uf02a \u2227 bookTrip.Reply=False \n  transition FlightAnswer  \ntriggeredBy bookFlight\uf02a \nguardedBy s=QUERIED \neffects bookFlight.Reply \u2283 s\u2019=FLIGHT_OK \n \u2227 \u00acbookFlight.Reply \u2283 s\u2019=END_UNBOOKED \nsends bookFlight.Reply \u2283 bookTrip\uf02a \u2227 bookTrip.Reply=True \n \u2227 \u00acbookFlight.Reply \u2283 bookTrip\uf02a \u2227 bookTrip.Reply=False \n  transition TripCommit \ntriggeredBy bookTrip\uf0fc \nguardedBy s=FLIGHT_OK \neffects s\u2019=CONFIRMED \u2227 bookHotel(hconf) \nsends bookFlight\uf0fc \u2227 payNotify\uf025 \nL. Bocchi & J.L. Fiadeiro & N.J. Rajper & S. Reiff-Marganiec 15\n \n   transition TripCancel \ntriggeredBy bookTrip\uf0fb \nguardedBy s=FLIGHT_OK \neffects s\u2019=END_UNBOOKED \u2227 cancelHotel(hconf) \nsends bookFlight\uf0fb \n   transition TripCompensate \ntriggeredBy bookTrip\uf055 \nguardedBy s=CONFIRMED \u2227 today<bookTrip.out \neffects s\u2019= END_COMPENSATED \u2227 cancelHotel(hconf) \nsends bookFlight\uf055 \u2227 ackRefundSnd\uf025 \n  \u2227 ackRfundSnd.amount=bookTrip.amount*PERC\/100 \n   transition ConfirmBookTripTimeOut \ntriggeredBy now\u2265bookTrip.UseBy   \nguardedBy s=FLIGHT_OK \neffects s\u2019=END_UNBOOKED \u2227 cancelHotel(hconf) \nsends bookFlight\uf0fb \nBUSINESS PROTOCOL FlightAgent is  \n INTERACTIONS \n   r&s  lockFlight \n    \uf025 from,to:airport,  \n     out,in:date, \n      traveller:usrdata \n    \uf02a fconf:fcode \n       amount:moneyvalue \n  SLA VARIABLES \n  KD:[0..100],PERC:[0..100], MAX:[0..100]      \n BEHAVIOUR  \n  initiallyEnabled lockFlight\uf025?  \n  lockFlight\uf0fc? enables lockFlight\uf055?  \n      until today+KD \u2265 bookTrip.out \n \nBUSINESS PROTOCOL Customer is  \n INTERACTIONS \n  s&r bookTrip \n     \uf025 from,to:airport, \n      out,in:date \n     \uf02a fconf:fcode, \n      hconf:hcode, \n      amount:moneyvalue  \n   rcv  refund \n     \uf025 amount:moneyvalue  \n  SLA VARIABLES \n   KD:[0..100], PERC:[0..100] \n  BEHAVIOUR  \n  initiallyEnabled bookTrip\uf025? \n   (bookTrip\uf036 \u2227 bookTrip\uf0fc?) enables bookTrip\uf055? \n   until today+KD\u2265bookTrip.out  \n  (bookTrip\uf055? \u2227 today+KD \u2265 bookTrip.out) ensures refund\uf025!  \n   refund.amount=bookTrip.amount*PERC\/100 after refund\uf025! \nINTERACTION PROTOCOL Straight.I(d1) is  \n ROLE A \n   snd S1 \n   \uf025 i1:d1 \n  ROLE B \n   rcv R1 \n   \uf025 i1:d1 \n COORDINATION \n S1 \u2261 R1 \n S1.i1=R1.i1 \n   \n                 \u2026 \nEND SPECIFICATIONS \n"}