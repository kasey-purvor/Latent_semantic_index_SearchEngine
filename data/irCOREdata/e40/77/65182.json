{"doi":"10.1109\/ISMVL.2003.1201427","coreId":"65182","oai":"oai:dro.dur.ac.uk.OAI2:6675","identifiers":["oai:dro.dur.ac.uk.OAI2:6675","10.1109\/ISMVL.2003.1201427"],"title":"Functions of multiple-valued logic and the complexity of constraint satisfaction : a short survey.","authors":["Krokhin,  A.","Bulatov,  A.","Jeavons,  P."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2003-05-01","abstract":"Many computational problems arising in artificial intelligence, computer science and elsewhere can be represented as constraint satisfaction and optimization problems. In this short survey we discuss an approach that is related to the algebraic component of multiple-valued logic and that has proved to be very succesful in studying the complexity of constraint satisfaction","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65182.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6675\/1\/6675.pdf","pdfHashValue":"c253fd79a203d27fe427bba86f07c09ab529ccc0","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6675<\/identifier><datestamp>\n      2011-12-14T09:55:37Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Functions of multiple-valued logic and the complexity of constraint satisfaction : a short survey.<\/dc:title><dc:creator>\n        Krokhin,  A.<\/dc:creator><dc:creator>\n        Bulatov,  A.<\/dc:creator><dc:creator>\n        Jeavons,  P.<\/dc:creator><dc:description>\n        Many computational problems arising in artificial intelligence, computer science and elsewhere can be represented as constraint satisfaction and optimization problems. In this short survey we discuss an approach that is related to the algebraic component of multiple-valued logic and that has proved to be very succesful in studying the complexity of constraint satisfaction.<\/dc:description><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n        (2003). 33rd international symposium on multiple-valued logic, ISMVL'03, 16-19 May 2003, Meiji University, Tokyo, Japan ; proceedings. : IEEE, pp. 343-351<\/dc:source><dc:date>\n        2003-05-01<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6675<\/dc:identifier><dc:identifier>\n        doi:10.1109\/ISMVL.2003.1201427<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6675\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/ISMVL.2003.1201427<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6675\/1\/6675.pdf<\/dc:identifier><dc:rights>\n        \u00a92003 IEEE. This material is presented to ensure timely dissemination of scholarly and technical work. Copyright and all rights therein are retained by authors or by other copyright holders. All persons copying this information are expected to adhere to the terms and constraints invoked by each author's copyright. In most cases, these works may not be reposted without the explicit permission of the copyright holder.\\ud\n\\ud\nPersonal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2003,"topics":[],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n06 April 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nKrokhin, A. and Bulatov, A. and Jeavons, P. (2003) \u2019Functions of multiple-valued logic and the complexity of\nconstraint satisfaction : a short survey.\u2019, in 33rd international symposium on multiple-valued logic, ISMVL\u201903,\n16-19 May 2003, Meiji University, Tokyo, Japan ; proceedings. , pp. 343-351.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/ISMVL.2003.1201427\nPublisher\u2019s copyright statement:\n2003 IEEE. This material is presented to ensure timely dissemination of scholarly and technical work. Copyright and\nall rights therein are retained by authors or by other copyright holders. All persons copying this information are\nexpected to adhere to the terms and constraints invoked by each author\u2019s copyright. In most cases, these works may\nnot be reposted without the explicit permission of the copyright holder. Personal use of this material is permitted.\nHowever, permission to reprint\/republish this material for advertising or promotional purposes or for creating new\ncollective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in\nother works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n  \n \nDurham Research Online \n \nDeposited in DRO: \n06 April 2010 \n \nPeer-review status: \nPeer-reviewed \n \nPublication status: \nPublished version \n \nCitation for published item: \nKrokhin, A. and Bulatov, A. and Jeavons, P. (2003) 'Functions of multiple-valued logic and \nthe complexity of constraint satisfaction : a short survey.', in 33rd International Symposium \non Multiple-Valued Logic, 16-19 May 2003, Meiji University, Tokyo, Japan ; proceedings. , \npp. 343-351. \n \nFurther information on publisher\u2019s website: \nhttp:\/\/dx.doi.org\/10.1109\/ISMVL.2003.1201427 \n \nPublisher\u2019s copyright statement: \n\u00a92003 IEEE. This material is presented to ensure timely dissemination of scholarly and \ntechnical work. Copyright and all rights therein are retained by authors or by other copyright \nholders. All persons copying this information are expected to adhere to the terms and \nconstraints invoked by each author's copyright. In most cases, these works may not be \nreposted without the explicit permission of the copyright holder. \n \nPersonal use of this material is permitted. However, permission to reprint\/republish this \nmaterial for advertising or promotional purposes or for creating new collective works for \nresale or redistribution to servers or lists, or to reuse any copyrighted component of this work \nin other works must be obtained from the IEEE. \n \nUse policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior \npermission or charge, for personal research or study, educational, or not-for-profit purposes provided that : \n \n\uf0a7 a full bibliographic reference is made to the original source \n\uf0a7 a link is made to the metadata record in DRO \n\uf0a7 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders. \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nFunctions of multiple-valued logic\nand the complexity of constraint satisfaction:\nA short survey\nAndrei Krokhin\nDepartment of Computer Science\nUniversity of Warwick\nCoventry CV4 7AL, UK\nandrei.krokhin@dcs.warwick.ac.uk\nAndrei Bulatov, Peter Jeavons\nComputing Laboratory\nUniversity of Oxford\nOxford OX1 3QD, UK\n\u0000andrei.bulatov,peter.jeavons\u0002@comlab.ox.ac.uk\nAbstract\nMany computational problems arising in artificial intel-\nligence, computer science and elsewhere can be represented\nas constraint satisfaction and optimization problems. In this\nshort survey we discuss an approach that is related to the\nalgebraic component of multiple-valued logic and that has\nproved to be very succesful in studying the complexity of\nconstraint satisfaction.\n1. Constraint Satisfaction Problems\nThe constraint satisfaction problem (CSP) is a power-\nful general framework in which a variety of combinato-\nrial problems can be expressed [12, 31, 32, 44]. The aim\nin a constraint satisfaction problem is to find an assign-\nment of values to the variables subject to specified con-\nstraints. In artificial intelligence, this framework is widely\nacknowledged as a convenient and efficient way of mod-\nelling and solving a number of real-world problems such\nas planning [26] and scheduling [45], frequency assign-\nment problems [16] and image processing [34], program-\nming language analysis [35] and natural language under-\nstanding [1]. In database theory, it has been shown that the\nkey problem of conjunctive-query evaluation can be viewed\nas a constraint satisfaction problem [19, 30]. Furthermore,\nsome central problems in combinatorial optimization can be\nrepresented as constraint problems [12, 28]. Finally, CSPs\nhave attracted much attention in complexity theory because\nvarious versions of CSPs lie at the heart of many standard\ncomplexity classes, and because, despite their great expres-\nsiveness, they tend to avoid \u201cintermediate\u201d complexity; that\nis, they tend to be either tractable or complete for stan-\ndard complexity classes [12, 17]. On a more practical side,\nconstraint programming is a rapidly developing area with\nits own international journal and an annual international\nconference, and with new programming languages being\nspecifically designed (see, e.g., [32]).\nThe standard toy example of a problem modelled as\na constraint satisfaction problem is the 8-queen problem:\nplace eight queens on a chess board so that no queen can\ncapture any other one. One can think of the horizontals of\nthe board as variables, and the verticals as the possible val-\nues, so that assigning a value to a variable means placing a\nqueen on the corresponding square of the board. The fact\nthat no queen must be able to capture any other queen can\nbe represented as a collection of binary constraints\n\u0000\n\u0000\u0002\n, one\nfor each pair of variables \u0002\u0003 \u0004, where the constraint \u0000\n\u0000\u0002\nal-\nlows only those pairs \u0000\u0005\u0003 \u0006\u0002 such that a queen at position\n\u0000\u0002\u0003 \u0005\u0002 cannot capture a queen at position \u0000\u0004\u0003 \u0006\u0002. It is easy to\nsee that every solution of this constraint satisfaction prob-\nlem corresponds to a \u201clegal\u201d placing of the 8 queens.\nNow let us give a formal definition of the CSP.\nDefinition 1 An instance of a constraint satisfaction prob-\nlem is a triple \u0000\u0007\u0003\b\u0003 \u0000\u0002 where\n\u0002 \u0007 is a finite set of variables,\n\u0002 \b is a set of values (sometimes called a domain), and\n\u0002 \u0000 is a set of constraints \u0003\u0000\n\u0000\n\u0003 \t \t \t \u0003 \u0000\n\u0003\n\u0004,\nin which each constraint \u0000\n\u0000\nis a pair \u0005\n\n\u0000\n\u0003 \u000b\n\u0000\n\u0006 with \n\n\u0000\na list of variables of length \f\n\u0000\n, called the constraint\nscope, and \u000b\n\u0000\nan \f\n\u0000\n-ary relation over the set \b called\nthe constraint relation.\nThe question is whether there exists a solution to \u0000\u0007\u0003\b\u0003 \u0000\u0002,\nthat is, a function from \u0007 to \b such that, for each constraint\nin \u0000, the image of the constraint scope is a member of the\nconstraint relation.\nIn this paper we consider only CSPs with a finite do-\nmain of values, so we will always assume that \b \u0003 \r\n\u0004\n\u0003\n\u0003\u0004\u0003 \u0005\u0003 \t \t \t \u0003 \u0003 \u0005 \u0007 \u0005\u0004, \u0005 \b \u0006. Now we give some examples of\nnatural problems and their representations as CSPs.\nExample 1 An instance of the standard propositional SAT-\nISFIABILITY problem [18, 36] is specified by giving a for-\nmula in propositional logic, that is, a conjunction of clauses,\nand asking whether there are values for the variables which\nmake the formula true.\nSuppose that \u0007 \u0003 \u000e\n\u0000\n\t\n \n \n\t\u000e\n\u0005\nis such a formula, where\nthe \u000e\n\u0000\nare clauses. The satisfiability question for \u0007 can be\nexpressed as the instance \u0000\u0007\u0003\r\n\u0002\n\u0003 \u0000\u0002 of CSP, where \u0007 is the\nset of all variables appearing in the clauses \u000e\n\u0000\n, and \u0000 is the\nset of constraints \u0003\u0005\n\n\u0000\n\u0003 \u000b\n\u0000\n\u0006\u0003 \t \t \t \u0003 \u0005\n\n\u0005\n\u0003 \u000b\n\u0005\n\u0006\u0004, where each con-\nstraint \u0005\n\n\u0004\n\u0003 \u000b\n\u0004\n\u0006 is constructed as follows: \n\n\u0004\nis the list of\nvariables appearing in \u000e\n\u0004\nand \u000b\n\u0004\nconsists of all tuples that\nmake \u000e\n\u0004\ntrue. The solutions of this CSP instance are exactly\nthe assignments which make the formula \u000e true. Hence,\nany instance of SATISFIABILITY can be expressed as an in-\nstance of CSP. \u0000\nExample 2 An instance of GRAPH UNREACHABILITY\nconsists of a graph \u000f \u0003 \u0000\u0007\u0003\r\u0002 and a pair of vertices,\n\u0010\u0003 \u0011 \u000b \u0007 . The question is whether there is no path in \u000f\nfrom \u0010 to \u0011. This can be expressed as the CSP instance\n\u0000\u0007\u0003\r\n\u0002\n\u0003 \u0000\u0002 where \u0000 is the following set of constraints:\n\u0003\u0005\u0012\u0003 \u0003\u0000\u0004\u0003 \u0004\u0002\u0003 \u0000\u0005\u0003 \u0005\u0002\u0004\u0006\f\u0012 \u000b \r\u0004\r\u0003\u0005\u0000\u0010\u0002\u0003 \u0003\u0000\u0004\u0002\u0004\u0006\u0003 \u0005\u0000\u0011\u0002\u0003 \u0003\u0000\u0005\u0002\u0004\u0006\u0004\t\n\u0000\nMany other examples of well-known problems expressed\nas CSPs can be found further in this paper and also in [23].\nExample 1 suggests that any instance of CSP can be\nrepresented in a logical form. Indeed, using the stan-\ndard correspondence between relations and predicates, one\ncan re-write an instance of CSP as a first-order formula\n\u000b\n\u0000\n\u0000\n\n\u0000\n\u0002\t \t \t \t\t\u000b\n\u0003\n\u0000\n\n\u0003\n\u0002 where \u000b\n\u0000\n(\u0005 \u000e \u0002 \u000e \u0013) are predicates on\n\r\n\u0004\nand \u000b\n\u0000\n\u0000\n\n\u0000\n\u0002 means \u000b\n\u0000\napplied to the tuple \n\n\u0000\nof variables.\nThe question then would be whether this formula is satisfi-\nable [42]. In this paper we will be working with this logical\nform of CSP. This form is commonly used in database the-\nory because it corresponds so closely to conjunctive query\nevaluation [30].\nAnother important reformulation of CSP is the HOMO-\nMORPHISM problem: whether there exists a homomor-\nphism between two relational structures (see [17, 19, 30]).\n2. Related Constraint Problems\nAs with many other computational problems, it is not\nonly the decision version of CSP (that is, whether or not a\nsolution exists) which is of interest. There are many related\nproblems that have been studied, and in this section we give\na brief overview of some of these.\n\u0002 Counting Problem\nHow many solutions does a given instance have?\nA standard natural problem associated with every com-\nputational decision problem [12].\n\u0002 Quantified Problem\nGiven a fully quantified instance of CSP, is it true?\nProblems of this form have been fundamental exam-\nples of PSPACE-complete problems [12, 14, 42]. Any\ninstance of ordinary CSP can be viewed as an instance\nof this problem with all quantifiers existential.\n\u0002 Minimal Solution\nGiven an instance and some solution to it, is there a\nsolution that is strictly less (point-wise) than the given\none?\nThis problem is connected with propositional circum-\nscription, a framework used in artificial intelligence to\nformalize common-sense reasoning [29].\n\u0002 Equivalence\nGiven two instances, do they have the same sets of so-\nlutions?\nIn database theory, this corresponds to the question of\nwhether or not two queries are equivalent [2].\n\u0002 Inverse Satisfiability\nGiven a set of \u0014-tuples, is it the set of all solutions of a\nCSP instance of some certain type?\nThis problem is related to efficient knowledge repre-\nsentation issues in artificial intelligence [27].\n\u0002 Listing Problem\nGenerate all solutions of a given instance.\nA standard natural problem associated with every com-\nputational decision problem [12].\n\u0002 MAX CSP\nMaximize the number of satisfied constraints in an in-\nstance.\nA number of optimization problems, e.g., maximum\ncut, can be expressed as MAX CSP problems [12, 28].\n\u0002 Maximum Solution\nMaximize the sum of values in a solution of an in-\nstance.\nMany optimization problems including maximum\nclique are of this form; in the Boolean case this prob-\nlem is known as MAX ONES [12, 28].\n\u0002 Maximum Hamming Distance\nFind two solutions that are distinct in a maximal num-\nber of variables.\nThe \u201cworld difference\u201d in the blocks world problem\nfrom knowledge representation can be modelled in this\nway [13].\n3. Parameterization of the CSP\nThe main object of our interest is the complexity of con-\nstraint satisfaction problems. We refer the reader to [36] for\na general background in complexity theory and the defini-\ntions of standard complexity classes. In general, the stan-\ndard decision-problem form of the CSP is NP-complete, as\none can see from Example 1, so it is unlikely to be computa-\ntionally tractable. However, certain restrictions on the form\nof the problems can ensure tractability, that is, solvability in\npolynomial time (see, e.g., [37]).\nWith any CSP instance one can associate two natural pa-\nrameters: a hypergraph, showing which variables constrain\nwhich others, and a set of relations reflecting the way in\nwhich the values are constrained. The hypergraph is defined\non the set of variables used in the instance, each hyperedge\nconsisting of all variables appearing in one constraint scope.\nThe set of relations consists of the constraint relations used\nin the instance. Therefore the general CSP can be restricted\nby fixing the set of hypergraphs or the set of relations that\nare allowed to be used in instances.\nThe case when the set of hypergraphs is fixed has been\nstudied in connection with databases [19, 30]. In this pa-\nper we concentrate on the case when the set of relations\nallowed in instances is fixed, but there is no restriction on\nthe form of the associated hypergraphs. Let\n\u0015\n\u0003\u0005\u0004\n\u0004\ndenote\nthe set of all \u0014-ary relations (or predicates) on \r\n\u0004\n, and let\n\u0015\n\u0004\n\u0003\n\u0000\n\u0000\n\u0005\u0005\u0000\n\u0015\n\u0003\u0005\u0004\n\u0004\n.\nDefinition 2 A constraint language over \r\n\u0004\nis a subset \b of\n\u0015\n\u0004\n.\nThe constraint satisfaction problem over \b, denoted\nCSP\u0000\b\u0002, is the subclass of CSP defined by the following\nproperty: any constraint relation in any instance must be-\nlong to \b.\nOf course, such a parameterization can be considered for\nall the related constraint problems discussed above.\nWe now give some examples of well-known problems\nexpressible as CSP\u0000\b\u0002 for suitable sets \b.\nExample 3 The NOT-ALL-EQUAL SATISFIABILITY prob-\nlem [18, 42] is a restricted version of the standard SATIS-\nFIABILITY problem which remains NP-complete. In this\nproblem the clauses are ternary, and each clause is satisfied\nby any assignment in which the variables of the clause do\nnot all receive the same truth value.\nThis problem corresponds to the problem CSP\u0000\u0003\u0016\u0004\u0002\nwhere \u0016 is the following ternary relation on \u0003\u0004\u0003 \u0005\u0004:\n\u0016 \u0003 \u0003\u0004\u0003 \u0005\u0004\n\u0006\n\u000f \u0003\u0000\u0004\u0003 \u0004\u0003 \u0004\u0002\u0003 \u0000\u0005\u0003 \u0005\u0003 \u0005\u0002\u0004\t\n\u0000\nExample 4 An instance of GRAPH \u0005-COLORABILITY\nconsists of a graph \u000f. The question is whether the vertices\nof \u000f can be labelled with \u0005 colours so that adjacent vertices\nare assigned different colours.\nThis problem corresponds to the problem CSP\u0000\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004\u0002\nwhere \u0010\u0003\n\u0006\n\u0000\nis the disequality relation on \r\n\u0004\ngiven by\n\u0010\u0003\n\u0006\n\u0000\n\u0003 \u0003\u0000\u0017\u0003 \u0018\u0002 \u000b \r\n\u0002\n\u0004\n\f \u0017 \u0010\u0003 \u0018\u0004\t\nThis problem is tractable if \u0005 \u0003 \u0006 and it is NP-complete for\nany \u0005 \b \t (see [18]).\n\u0000\nExample 5 An instance of LINEAR EQUATIONS is a sys-\ntem of linear equation over a field. It is easy to see that this\nproblem can be expressed as CSP\u0000\b\u0002 where \b consists of\nall relations expressible by a linear equation. This problem\nis tractable. \u0000\nFollowing a seminal work by Schaefer in 1978 [42],\nmany researchers have studied the following problem:\nProblem 1 Determine the complexity of a given constraint\nproblem for all possible values of the parameter \b.\nMost progress has been made in the Boolean case (that\nis, when the set of values is \r\n\u0002\n), such problems are some-\ntimes called \u201cgeneralized satisfiability problems\u201d. Schae-\nfer obtained a complete classification for the ordinary CSP\nover \r\n\u0002\n[42], which is described in Section 6. Over the last\ndecade, classifications for many related Boolean constraint\nproblems, including all of the problems mentioned in Sec-\ntion 2, have been completed [2, 12, 13, 14, 27, 29]. Some\nof these classifications are also described in Section 6.\nClassifying the complexity in the non-Boolean case has\nproved to be a very difficult task. However, the approach\ndescribed in the next two sections has made it possible to\nobtain strong results in this direction; we discuss these re-\nsults in Section 7.\n4. Expressive Power of Constraint Languages\nIn any constraint satisfaction problem instance some of\nthe required relationships between variables are given ex-\nplicitly in the constraints, whilst others generally arise im-\nplicitly from interactions of different constraints. For any\ninstance in CSP\u0000\b\u0002, the explicit constraint relations must\nbe elements of \b, but there may be implicit restrictions on\nsome subsets of the variables for which the corresponding\nrelations are not elements of \b, as the next example indi-\ncates.\nExample 6 Let \b be the set containing a single binary re-\nlation, \u0019, over the set \r\n\u0006\n, where \u0019 is defined as follows:\n\u0019 \u0003 \u0003\u0000\u0004\u0003 \u0004\u0002\u0003 \u0000\u0004\u0003 \u0005\u0002\u0003 \u0000\u0005\u0003 \u0004\u0002\u0003 \u0000\u0005\u0003 \u0006\u0002\u0003 \u0000\u0006\u0003 \u0005\u0002\u0003 \u0000\u0006\u0003 \u0006\u0002\u0004\t\nOne element of CSP\u0000\b\u0002 is the instance\n\u0011 \u0003 \u0000\u0003\u0010\n\u0000\n\u0003 \u0010\n\u0002\n\u0003 \u0010\n\u0006\n\u0003 \u0010\n\u0007\n\u0004\u0003 \r\n\u0006\n\u0003 \u0003\u0000\n\u0000\n\u0003 \u0000\n\u0002\n\u0003 \u0000\n\u0006\n\u0003 \u0000\n\u0007\n\u0003 \u0000\n\b\n\u0004\u0002\u0003\nwhere\n\u0002 \u0000\n\u0000\n\u0003 \u0000\u0000\u0010\n\u0000\n\u0003 \u0010\n\u0002\n\u0002\u0003 \u0019\u0002;\n\u0002 \u0000\n\u0002\n\u0003 \u0000\u0000\u0010\n\u0000\n\u0003 \u0010\n\u0006\n\u0002\u0003 \u0019\u0002;\n\u0002 \u0000\n\u0006\n\u0003 \u0000\u0000\u0010\n\u0002\n\u0003 \u0010\n\u0006\n\u0002\u0003 \u0019\u0002;\n\u0002 \u0000\n\u0007\n\u0003 \u0000\u0000\u0010\n\u0002\n\u0003 \u0010\n\u0007\n\u0002\u0003 \u0019\u0002.\n\u0002 \u0000\n\b\n\u0003 \u0000\u0000\u0010\n\u0006\n\u0003 \u0010\n\u0007\n\u0002\u0003 \u0019\u0002.\n\u0000\n\u0000\n\u0000 \u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\u0002\n\u0002\n\u0002\n\u0002\n\u0002\n\u0002\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0002\n\u0002\n\u0002\n\u0002\n\u0002\n\u0002\n\u0019\n\u0019\n\u0019\n\u0019\n\u0019\n\u0010\n\u0000\n\u0010\n\u0002\n\u0010\n\u0006\n\u0010\n\u0007\nFigure 1. The CSP instance \u0011\nNote that there is no explicit constraint on the pair\n\u0000\u0010\n\u0000\n\u0003 \u0010\n\u0007\n\u0002. However, by considering all solutions to \u0011, it\ncan be shown that the possible pairs of values which can\nbe taken by this pair of variables are precisely the elements\nof the relation \u0019\u0002 \u0003 \u0019 \r \u0003\u0000\u0005\u0003 \u0005\u0002\u0004. \u0000\nWe now define exactly what it means to say that a constraint\nrelation can be expressed in a constraint language.\nDefinition 3 A relation \u000b can be expressed in a constraint\nlanguage \b over \r\n\u0004\nif there exists a problem instance\n\u0000\u0007\u0003\r\n\u0004\n\u0003 \u0000\u0002 in CSP\u0000\b\u0002, and a list, \n, of variables, such that\nthe solutions to \u0000\u0007\u0003\r\n\u0004\n\u0003 \u0000\u0002 restricted to \n give precisely the\ntuples of \u000b.\nFor any constraint language \b, the set of all relations which\ncan be expressed in \b will be called the expressive power of\n\b.\nThis set can be characterised in a number of different\nways [25]. For example, it is equal to the set of all relations\nthat may be obtained from the relations in \b using the rela-\ntional join and project operations from relational database\ntheory [20]. Alternatively, it can be shown to be equal to\nthe set of relations definable by primitive positive formulas\ninvolving the relations of \b and equality, which is defined\nas follows.\nDefinition 4 For any set of relations \b over \r\n\u0004\n, the set \u0005\b\u0006\nconsists of all relations that can be expressed using\n1. relations from \b, together with the binary equality re-\nlation on \r\n\u0004\n(denoted \u0003\n\u0006\n\u0000\n),\n2. conjunction, and\n3. existential quantification.\nExample 7 Example 6 demonstrates that the relation\u0019 \u0002 be-\nlongs to the expressive power of the constraint language\n\b \u0003 \u0003\u0019\u0004. It is easy to deduce from the construction given\nin Example 6 that\n\u0019\n\u0002\n\u0000\u001a\u0003 \u001b\u0002 \u0012 \u0013\u0017\u0013\u0018\u0019\u0000\u001a\u0003 \u0017\u0002\t\u0019\u0000\u001a\u0003 \u0018\u0002\t\u0019\u0000\u0017\u0003 \u0018\u0002\t\u0019\u0000\u0017\u0003 \u001b\u0002\t\u0019\u0000\u0018\u0003 \u001b\u0002\t\nHence, \u0019\u0002 \u000b \u0005\u0003\u0019\u0004\u0006. \u0000\n5. Polymorphisms and Complexity\nIn this section we shall explore how the notion of ex-\npressive power may be used to simplify the analysis of the\ncomplexity of the constraint satisfaction problem.\nWe first note that any relation that can be expressed in a\nlanguage \b can be added to \b without changing the com-\nplexity of CSP\u0000\b\u0002.\nProposition 1 For any constraint language \b and any\nrelation \u000b belonging to the expressive power of \b,\nCSP\u0000\b \r \u0003\u000b\u0004\u0002 is reducible in polynomial time to CSP\u0000\b\u0002.\nThis result can be established simply by noting that, given\nany problem instance in CSP\u0000\b \r \u0003\u000b\u0004\u0002, we can obtain an\nequivalent instance in CSP\u0000\b\u0002 by replacing each constraint\n\u0000 that has constraint relation \u000b with a collection of con-\nstraints that have constraint relations chosen from\b and that\ntogether express the constraint \u0000.\nBy iterating this procedure we can obtain the following\ncorollary.\nCorollary 1 For any constraint language \b, and any finite\nconstraint language \b\n\t\n, if \b\n\t\nis contained in the expressive\npower of \b, then CSP\u0000\b\n\t\n\u0002 is reducible to CSP\u0000\b\u0002 in poly-\nnomial time.\nCorollary 1 implies that for any finite constraint language\b,\nthe complexity of CSP\u0000\b\u0002 is determined, up to polynomial-\ntime reduction, by the expressive power of \b, and hence\nby \u0005\b\u0006. This raises an obvious question: how can we ob-\ntain sufficient information about the set \u0005\b\u0006 to determine\nthe complexity of CSP\u0000\b\u0002?\nA very successful approach to this question has been de-\nveloped in [10, 23, 24], using techniques from universal al-\ngebra and multiple-valued logic [33, 39]. To describe this\napproach, we need to consider arbitrary \u0005-valued operations\n(or functions). We will use \u001c\u0003\u0005\u0004\n\u0004\nto denote the set of all \u0014-\nary operations on the set \r\n\u0004\n(that is, the set of mappings\n\u001d \n\r\n\u0005\n\u0004\n\u0014 \r\n\u0004\n), and \u001c\n\u0004\nto denote the set\n\u0000\n\u0000\n\u0005\u0005\u0000\n\u001c\n\u0003\u0005\u0004\n\u0004\n.\nAn operation \u001d \u000b \u001c\u0003\u0005\u0004\n\u0004\nwill be called essentially unary\nif there exists some \u0002 in the range \u0005 \u000e \u0002 \u000e \u0014, and some op-\neration \u001e \u000b \u001c\u0003\u0000\u0004\n\u0004\nsuch that the following identity is satisfied\n\u001d\u0000\u001a\n\u0000\n\u0003 \u001a\n\u0002\n\u0003 \t \t \t \u0003 \u001a\n\u0005\n\u0002 \u0003 \u001e\u0000\u001a\n\u0000\n\u0002\t\nAn essentially unary operation with \u001e being the identity op-\neration is called a projection. Any operation (of whatever\narity) which is not essentially unary will be called essen-\ntially non-unary.\nAny operation on \r\n\u0004\ncan be extended in a standard\nway to an operation on tuples over \r\n\u0004\n, as follows. For\nany operation \u001d \u000b \u001c\u0003\u0005\u0004\n\u0004\n, and any collection of tu-\nples \u001f\u0017\n\u0000\n\u0003\u001f\u0017\n\u0002\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0005\n\u000b \r\n\u0007\n\u0004\n, where \u001f\u0017\n\u0000\n\u0003 \u0000\u001f\u0017\n\u0000\u0000\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0000\u0007\n\u0002\n\u0000\u0002 \u0003 \u0005 \t \t \t \u0014\u0002, define \u001d\u0000\u001f\u0017\n\u0000\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0005\n\u0002 to be the tuple\n\u0000 \u001d\u0000\u001f\u0017\n\u0000\u0000\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0005\u0000\n\u0002\u0003 \t \t \t \u0003 \u001d\u0000\u001f\u0017\n\u0000\u0007\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0005\u0007\n\u0002 \u0002\t\nDefinition 5 For any relation  \u000b \u0015\u0003\u0007\u0004\n\u0004\n, and any oper-\nation \u001d \u000b \u001c\u0003\u0005\u0004\n\u0004\n, if \u001d\u0000\u001f\u0017\n\u0000\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0005\n\u0002 \u000b  for all choices of\n\u001f\u0017\n\u0000\n\u0003 \t \t \t \u0003\u001f\u0017\n\u0005\n\u000b  , then  is said to be invariant under \u001d , and\n\u001d is called a polymorphism of  .\nThe set of all relations that are invariant under each opera-\ntion from some set \u0000 \u0015 \u001c\n\u0004\nwill be denoted Inv(\u0000). The\nset of all operations that are polymorphisms of every rela-\ntion from some set \b \u0015 \u0015\n\u0004\nwill be denoted Pol(\b). The op-\nerators Inv and Pol form a Galois correspondence between\n\u0015\n\u0004\nand \u001c\n\u0004\n(see Proposition 1.1.14 of [39]). A basic intro-\nduction to this correspondence can be found in [38], and a\ncomprehensive study in [39].\n\u2205\nSets of \nrelations\nSets of \noperations\nRk\nG\nPol(G)Inv(Pol(G))\nPol\nInv\n= \u00b7G\u00d2\nOk\n\u2205\nFigure 2. The operators Inv and Pol\nSets of operations of the form Pol(\b) are known as\nclones and sets of relations of the form Inv(\u0000) are known\nas relational clones [39]; they have received much atten-\ntion in multiple-valued logic (see, e.g., [41]). Moreover,\nthe following useful characterisation of sets of the form\nInv(Pol(\b)) is given in [39].\nTheorem 1 For every set \b \u0015 \u0015\n\u0004\n, Inv(Pol(\b)) \u0003 \u0005\b\u0006.\nThis result was combined with Corollary 1 to obtain the fol-\nlowing result in [23].\nTheorem 2 For any constraint language \b \u0015 \u0015\n\u0004\n, and any\nfinite constraint language \b\n\t\n\u0015 \u0015\n\u0004\n, if Pol(\b) \u0015 Pol(\b\n\t\n),\nthen CSP\u0000\b\n\t\n\u0002 is reducible to CSP\u0000\b\u0002 in polynomial time.\nThis result implies that, for any finite constraint language \b\nover a finite set, the complexity of CSP\u0000\b\u0002 is determined,\nup to polynomial-time reduction, by the polymorphisms of\n\b.\nNow we are faced with a new question: how can we\nobtain sufficient information about Pol(\b) to determine the\ncomplexity of CSP\u0000\b\u0002? Happily, it can be shown that this\nquestion can itself be formulated as a particular form of con-\nstraint satisfaction problem.\nDefinition 6 Let \b be a constraint language over \r\n\u0004\n.\nFor any natural number \f ! \u0004, the indica-\ntor problem for \b of order \f is defined to be the\nconstraint satisfaction problem instance \u0016\u0011\u0000\b\u0003\f\u0002 \u0003\n\u0000\r\n\u0007\n\u0004\n\u0003 \r\n\u0004\n\u0003 \u0003\u0000\n\u0000\n\u0003 \u0000\n\u0002\n\u0003 \t \t \t \u0003 \u0000\n\u0003\n\u0004\u0002, where \u0013 \u0003\n\u0002\n\b\u0003\n\n\f\u000b\f\n\u0007\n, and\nthe constraints \u0000\n\u0000\n\u0003 \u0000\n\u0002\n\u0003 \t \t \t \u0003 \u0000\n\u0003\nare defined as follows.\nFor each \u000b \u000b \b, and for each sequence \"\n\u0000\n\u0003 \"\n\u0002\n\u0003 \t \t \t \u0003 \"\n\u0007\nof tuples from \u000b, there is a constraint \u0000\n\u0000\n\u0003 \u0005\n\n\u0000\n\u0003 \u000b\u0006 with\n\n\n\u0000\n\u0003 \u0000\u0010\n\u0000\n\u0003 \u0010\n\u0002\n\u0003 \t \t \t \u0003 \u0010\n\u0005\n\u0002, where \u0014 is the arity of \u000b and \u0010\n\u0002\n\u0003\n\u0000\"\n\u0000\n\u000b\u0004\f\u0003 \"\n\u0002\n\u000b\u0004\f\u0003 \t \t \t \u0003 \"\n\u0007\n\u000b\u0004\f\u0002 for \u0004 \u0003 \u0005 to \u0014.\nNote that for any set of relations \b over a set \r\n\u0004\n, the indica-\ntor problem \u0016\u0011\u0000\b\u0003\f\u0002 has \u0005\u0007 variables, and each variable\ncorresponds to an \f-tuple over \r\n\u0004\n. It is straightforward to\ncheck that the solutions to \u0016\u0011\u0000\b\u0003\f\u0002 are precisely the map-\npings from \r\u0007\n\u0004\nto \r\n\u0004\nunder which every element of \b is\ninvariant, that is, the polymorphisms of \b.\nSeveral concrete examples of indicator problems and\ntheir solutions can be found in [22].\nExample 8 Consider the constraint language \b \u0003 \u0003\u0016\u0004,\nwhere \u0016 is the binary \u201dnot-all-equal\u201d relation over \r\n\u0002\nde-\nfined in Example 3.\nThe indicator problem for \b of order 3, \u0016\u0011\u0000\b\u0003 \t\u0002, has 8\nvariables and 216 constraints, and has exactly 6 solutions.\nEach of these solutions is an essentially unary operation.\nHence Pol(\b) contains only six distinct ternary opera-\ntions, which are all essentially unary. Using general results\nfrom clone theory [43], it can be shown that this implies\nthat in this case Pol(\b) contains essentially unary operations\nonly. \u0000\nExample 9 Consider the constraint language \b \u0003 \u0003\u0019\u0003 #\u0004,\nwhere \u0019 is the binary relation over \r\n\u0006\ndefined in Example 6\nand # is the ternary relation over \r\n\u0006\ncontaining the single\ntuple \u0000\u0004\u0003 \u0005\u0003 \u0006\u0002.\nThe indicator problem for \b of order 3, \u0016\u0011\u0000\b\u0003 \t\u0002, has\n27 variables and 217 constraints, but has only 3 solutions.\nEach of these solutions is a projection operation.\nHence Pol(\b) contains only three distinct ternary opera-\ntions, which are the three ternary projection operations. Us-\ning general results from clone theory [43], it can be shown\nthat this implies that in this case Pol(\b) contains only pro-\njections. \u0000\n6. Complexity of Boolean Problems\nIn this section we describe some of the results that have\nbeen obtained concerning the complexity of Boolean con-\nstraint problems, that is, problems over a two-valued do-\nmain.\nThe first result of this kind was a complete classifica-\ntion of the complexity of the ordinary Boolean constraint\nsatisfaction problem obtained by Schaefer in 1978 [42].\nA computational problem is called tractable if there is a\npolynomial-time algorithm deciding every instance of the\nproblem.\nTheorem 3 For any set of relations \b \u0015 \u0015\n\u0002\n, CSP\u0000\b\u0002 is\ntractable when one of the following conditions holds:\n1. Every \u000b in \b contains the tuple \u0000\u0004\u0003 \u0004\u0003 \t \t \t \u0003 \u0004\u0002.\n2. Every \u000b in \b contains the tuple \u0000\u0005\u0003 \u0005\u0003 \t \t \t \u0003 \u0005\u0002.\n3. Every \u000b in \b is definable by a CNF formula in which\neach conjunct has at most one negated variable.\n4. Every \u000b in \b is definable by a CNF formula in which\neach conjunct has at most one unnegated variable.\n5. Every \u000b in \b is definable by a CNF formula in which\neach conjunct has at most two literals.\n6. Every \u000b in \b is definable by a system of linear equa-\ntions over the field with two elements.\nIn all other cases CSP\u0000\b\u0002 is NP-complete.\nThis result establishes a dichotomy for versions of this prob-\nlem parameterised by the choice of constraint language:\nthey are all either tractable or NP-complete. Dichotomy\ntheorems of this kind are of particular interest because, on\nthe one hand, they determine the precise complexity of par-\nticular constraint problems, and, on the other hand, they\ndemonstrate that no problems of intermediate complexity\ncan occur in this context.\nUsing the algebraic approach developed in the previous\nsections, together with the knowledge of possible clones on\na two-element set obtained in [40], Schaefer\u2019s result can be\nreformulated in the following much more concise form.\nTheorem 4 For any set of relations \b \u0015 \u0015\n\u0002\n, CSP\u0000\b\u0002 is\ntractable when Pol(\b) contains any essentially non-unary\noperation or a constant operation. Otherwise it is NP-\ncomplete.\nExample 10 Recall the relation \u0016 over \r\n\u0002\ndefined in Ex-\nample 3. It was shown in Example 8 that Pol(\u0003\u0016\u0004) contains\nessentially unary operations only, and hence, by Theorem 4,\nCSP\u0000\u0003\u0016\u0004\u0002 is NP-complete. \u0000\nSchaefer\u2019s result has inspired a series of analogous in-\nvestigations for many related constraint problems, includ-\ning those listed in Section 2. We will now list the complex-\nity classification results that have recently been obtained for\nthese problems in the Boolean case. Surprisingly, for a wide\nvariety of such related problems it turns out that the poly-\nmorphisms of the constraint language are highly relevant to\nthe study of the computational complexity.\nTheorem 5 Let \b \u0015 \u0015\n\u0002\nbe a Boolean constraint language.\nThen the following is true about constraint problems pa-\nrameterized by \b.\n\u0002 The Counting Problem is tractable if Pol(\b) contains\nthe unique affine operation on\r\n\u0002\n, \u001a\u0007\u001b\r$. Otherwise\nit is #P-complete [11, 12].\n\u0002 The Quantified Problem is tractable if Pol(\b) con-\ntains an essentially non-unary operation. Otherwise it\nis PSPACE-complete [12, 14].\n\u0002 The Equivalence problem is tractable if Pol(\b) con-\ntains an essentially non-unary operation or a constant\noperation. Otherwise it is coNP-complete [2].\n\u0002 The Inverse Satisfiability problem is tractable if\nPol(\b) contains an essentially non-unary operation.\nOtherwise it is coNP-complete [27].\n\u0002 The Maximum Hamming Distance problem is\ntractable if Pol(\b) contains either a constant, or the\naffine operation and the negation operation on\r\n\u0002\n[13].\nA full description of these results requires the careful def-\ninition of the relevant complexity classes and reductions,\nwhich is beyond the scope of this short review, so we refer\nthe reader to the cited papers for details.\nExample 11 Recall the relation \u0016 over \r\n\u0002\ndefined in Ex-\nample 3. It was shown in Example 8 that Pol(\u0003\u0016\u0004) contains\nessentially unary operations only. Hence, by Theorem 5, we\ncan immediately conclude that:\n\u0002 Counting the number of solutions to an instance of\nCSP\u0000\u0003\u0016\u0004\u0002 is #P-complete;\n\u0002 Deciding whether a quantified Boolean formula in-\nvolving only conjunctions of the relation \u0016 is true is\nPSPACE-complete.\n\u0002 Deciding whether two instances of CSP\u0000\u0003\u0016\u0004\u0002 have\nthe same solutions is coNP-complete;\n\u0002 Deciding whether a given set of \u0014-tuples is the set\nof solutions to some instance of CSP\u0000\u0003\u0016\u0004\u0002 is coNP-\ncomplete.\n\u0000\n7. Complexity of Non-Boolean Problems\nObtaining a complete complexity classifications for a\nconstraint problem over an arbitrary set of values contain-\ning more than 2 elements, remains a very challenging open\nproblem, even for the standard decision-problem version\nof the CSP set out in Definition 1. One reason for this is\nthat in the Boolean case the number of relational clones\nis countable and they are all fully characterized [39, 40],\nbut for \u0005 \b \t the number of relational clones is continuum\n(see, e.g., [39]), and there is strong evidence that a descrip-\ntion similar to the \u0005 \u0003 \u0006 case is impossible to obtain (see,\ne.g., [4]).\nHowever, using the algebraic approach described above a\nlarge number of tractable and NP-complete cases have now\nbeen identified for constraint problems over arbitrary finite\nsets of values. To describe these cases we need to define a\nnumber of special operations.\nDefinition 7\n\u0002 A binary operation \u001d is said to be a semilattice opera-\ntion if it satisfies the following identities:\n(a) \u001d\u0000\u001a\u0003 \u001a\u0002 \u0003 \u001a; (idempotency)\n(b) \u001d\u0000\u001a\u0003 \u001b\u0002 \u0003 \u001d\u0000\u001b\u0003 \u001a\u0002; (commutativity)\n(c) \u001d\u0000\u001d\u0000\u001a\u0003 \u001b\u0002\u0003 $\u0002 \u0003 \u001d\u0000\u001a\u0003 \u001d\u0000\u001b\u0003 $\u0002\u0002. (associativity)\n\u0002 An operation \u001d is said to be a near-unanimity opera-\ntion if it satisfies the following identities\n\u001d\u0000\u001b\u0003 \u001a\u0003 \t \t \t \u0003 \u001a\u0002 \u0003 \u001d\u0000\u001a\u0003 \u001b\u0003 \u001a\u0003 \t \t \t \u0003 \u001a\u0002 \u0003 \t \t \t\n\u0003 \u001d\u0000\u001a\u0003 \t \t \t \u0003 \u001a\u0003 \u001b\u0002 \u0003 \u001a\t\n\u0002 A ternary operation \u001d is said to be a Mal\u2019tsev opera-\ntion if it satisfies the following identities\n\u001d\u0000\u001a\u0003 \u001b\u0003 \u001b\u0002 \u0003 \u001d\u0000\u001b\u0003 \u001b\u0003 \u001a\u0002 \u0003 \u001a\t\n\u0002 An \u0014-ary operation \u001d is said to be conservative if\n\u001d\u0000\u001a\n\u0000\n\u0003 \t \t \t \u0003 \u001a\n\u0005\n\u0002 \u000b \u0003\u001a\n\u0000\n\u0003 \t \t \t \u0003 \u001a\n\u0005\n\u0004 for all \u001a\n\u0000\n\u0003 \t \t \t \u0003 \u001a\n\u0005\n.\nTheorem 6 Let \b \u0015 \u0015\n\u0004\nbe a constraint language.\nIf Pol(\b) contains one of the following operations then\nCSP\u0000\b\u0002 is tractable: a constant operation [24]; a semi-\nlattice operation [24]; a near-unanimity operation [24]; a\nMal\u2019tsev operation [6]; or a binary commutative conserva-\ntive operation [8].\nIf Pol(\b) contains essentially unary surjective opera-\ntions only, then CSP\u0000\b\u0002 is NP-complete [24].\nExample 12 Recall the binary disequality relation \u0010\u0003\n\u0006\n\u0000\nde-\nfined in Example 4. It is straightforward to check that\nPol(\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004) contains the unique ternary near-unanimity op-\neration on \r\n\u0002\n. Hence, by Theorem 6, CSP\u0000\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004\u0002, which\ncorresponds to the GRAPH 2-COLORABILITY problem, is\ntractable.\nHowever, it is shown in [39] that for any \u0005 \b \t,\nPol(\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004) contains essentially unary surjective operations\nonly. Hence, by Theorem 6, CSP\u0000\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004\u0002, which corre-\nsponds to the GRAPH \u0005-COLORABILITY problem, is NP-\ncomplete for any \u0005 \b \t. \u0000\nExample 13 Let \u0005 be a prime number, and consider \r\n\u0004\nas\na finite field. For any set of relations \b over \r\n\u0004\n, where each\n\u000b \u000b \b is definable by a linear equation, Pol(\b) will contain\nthe Mal\u2019tsev operation \u001d given by\n\u001d\u0000\u001a\u0003 \u001b\u0003 $\u0002 \u0003 \u001a\u0007 \u001b \r $\t\nHence, by Theorem 6, CSP\u0000\b\u0002, which corresponds to the\nLINEAR EQUATIONS problem, is tractable. \u0000\nExample 14 Recall the relations \u0019 and # over \r\n\u0006\nde-\nfined in Examples 6 and 9. It is straightforward to check\nthat Pol(\u0003\u0019\u0004) contains the constant operation with value\n0, hence, by Theorem 6, CSP\u0000\u0003\u0019\u0004\u0002 is tractable. More-\nover, Pol(\u0003#\u0004) contains the semilattice operation \u000e\u000f\u0010 \n\n\r\n\u0002\n\u0006\n\u0014 \r\n\u0006\n, which returns the maximum of its two argu-\nments. Hence, by Theorem 6, CSP\u0000\u0003#\u0004\u0002 is tractable.\nHowever, it was shown in Example 9 that Pol(\u0003\u0019\u0003 #\u0004)\ncontains only projections. Hence, by Theorem 6,\nCSP\u0000\u0003\u0019\u0003 #\u0004\u0002 is NP-complete. \u0000\nWe remark that the technique discussed in this paper is\nbased on clone theory, but it has been extended in [6, 7, 9,\n10, 15] to involve more powerful machinery from universal\nalgebra [21, 43]. Using this approach, the following result\nwas proved in [5].\nTheorem 7 Let \b be an arbitary constraint language over\n\r\n\u0006\n. Then CSP\u0000\b\u0002 is either tractable or NP-complete.\nIn fact, [5] contains a precise description of all tractable and\nNP-complete constraint languages over \r\n\u0006\n, and an algo-\nrithm for distinguishing them; we refer the reader to that\npaper for details.\nFinally, we consider what is known in the non-Boolean\ncase about two of the related constraint problems described\nin Section 2: the Counting Problem and the Quantified\nProblem. For both of these problems it has been shown\nthat the complexity of the parameterized version depends\nentirely on the polymorphisms of the constraint language.\nWe denote the problem of counting the number of solu-\ntions to an instance of CSP\u0000\b\u0002 by #CSP\u0000\b\u0002. The following\nresult was obtained in [7].\nTheorem 8 For any constraint language \b \u0015 \u0015\n\u0004\n, and any\nfinite constraint language \b\n\t\n\u0015 \u0015\n\u0004\n, if Pol(\b) \u0015 Pol(\b\n\t\n),\nthen #CSP\u0000\b\n\t\n\u0002 is reducible to #CSP\u0000\b\u0002 in polynomial time.\nUsing this result it has been shown that Mal\u2019tsev operations\nplay a key role for the complexity of the Counting Problem.\nThe following (partial) classification result for the parame-\nterized Counting Problem was obtained in [7].\nTheorem 9 For any constraint language\b \u0015 \u0015\n\u0004\n, if Pol(\b)\ncontains no Mal\u2019tsev operations, then #CSP\u0000\b\u0002 is #P-\ncomplete.\nConversely, if \u0005 \u000e \t and Pol(\b) contains a Mal\u2019tsev op-\neration, then #CSP\u0000\b\u0002 is tractable.\nExample 15 Recall the binary disequality relation \u0010\u0003\n\u0006\n\u0000\nde-\nfined in Example 4. It is straightforward to check that\nPol(\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004) contains the Mal\u2019tsev operation on \r\n\u0002\nwhich\nreturns the sum of its 3 arguments modulo 2. Hence, by\nTheorem 9, it is tractable to count the number of solu-\ntions to CSP\u0000\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004\u0002, which corresponds to the GRAPH 2-\nCOLORABILITY problem.\nHowever, it is shown in [39] that for any \u0005 \b \t,\nPol(\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004) does not contain any Mal\u2019tsev operations.\nHence, by Theorem 6, for any \u0005 \b \t it is #P-complete to\ncount the number of solutions to CSP\u0000\u0003\u0010\u0003\n\u0006\n\u0000\n\u0004\u0002, which cor-\nresponds to the GRAPH \u0005-COLORABILITY problem. \u0000\nWe denote the problem of deciding the truth of a quantified\nBoolean formula involving only conjunctions of relations\nfrom \b by QCSP\u0000\b\u0002. For this problem, it has recently been\nshown that the complexity is determined by the surjective\npolymorphisms. We denote the set of all surjective poly-\nmorphisms of a constraint language \b by s-Pol(\b). The\nfollowing result was obtained in [3].\nTheorem 10 For any constraint language \b \u0015 \u0015\n\u0004\n, and\nany finite constraint language \b\n\t\n\u0015 \u0015\n\u0004\n, if s-Pol(\b) \u0015\ns-Pol(\b\n\t\n), then QCSP\u0000\b\n\t\n\u0002 is reducible to QCSP\u0000\b\u0002 in\npolynomial time.\nUsing this result, the following (partial) classification result\nwas obtained in [3].\nTheorem 11 For any constraint language \b \u0015 \u0015\n\u0004\n:\n\u0002 If s-Pol(\b) contains the affine operation \u001a \u0007 \u001b \r $ of\nan Abelian group with base set \r\n\u0004\n, then QCSP\u0000\b\u0002 is\ntractable.\n\u0002 if s-Pol(\b) contains the ternary near-unanimity oper-\nation % on \r\n\u0004\ngiven by\n%\u0000\u001a\u0003 \u001b\u0003 $\u0002 \u0003\n\u0003\n\u001b if \u001b \u0003 $\n\u001a otherwise\t\nthen QCSP\u0000\b\u0002 is in NL.\n\u0002 If \u0005 \b \t, and s-Pol(\b) contains only essentially unary\noperations, then QCSP\u0000\b\u0002 is PSPACE-complete.\nExample 16 Let &\n\u0005\nbe the \u0014-ary \u201cnot-all-distinct\u201d rela-\ntion over \r\n\u0004\nconsisting of all tuples \u0000\u0017\n\u0000\n\u0003 \t \t \t \u0003 \u0017\n\u0005\n\u0002 such that\n\f\u0003\u0017\n\u0000\n\u0003 \t \t \t \u0003 \u0017\n\u0005\n\u0004\f ' \u0014. Note that &\n\u0005\n\u0017 \u0003\u0000\u0017\u0003 \t \t \t \u0003 \u0017\u0002 \f\n\u0017 \u000b \r\n\u0004\n\u0004, so every instance of the standard CSP prob-\nlem CSP\u0000\u0003&\n\u0005\n\u0004\u0002 is trivially satisfiable by assigning the same\nvalue to all variables.\nHowever, by Lemma 2.2.4 of [39], the set Pol(\u0003&\n\u0004\n\u0004) con-\nsists of all non-surjective operations on \r\n\u0004\n, together with\nall operations of the form \u001d\u0000\u001a\n\u0000\n\u0003 \t \t \t \u0003 \u001a\n\u0005\n\u0002 \u0003 \u001e\u0000\u001a\n\u0000\n\u0002 for some\n\u0005 \u000e \u0002 \u000e \u0014 and some permutation \u001e on \r\n\u0004\n. This implies\nthat s-Pol(\u0003&\n\u0004\n\u0004) contains essentially unary operations only.\nHence, by Theorem 11, QCSP\u0000\u0003&\n\u0004\n\u0004\u0002 is PSPACE-complete.\nSimilar arguments can be used to show that QCSP\u0000\u0003&\n\u0000\n\u0004\u0002 is\nPSPACE-complete, for any \u0002 in the range \t \u000e \u0002 \u000e \u0005. \u0000\nReferences\n[1] J. Allen. Natural Language Understanding. Benjamin Cum-\nmings, 1994.\n[2] E. Bo\u00a8hler, E. Hemaspaandra, S. Reith, and H. Vollmer.\nEquivalence and isomorphism for Boolean constraint sat-\nisfaction. In Proceedings 16th International Workshop on\nComputer Science Logic, CSL\u201902, volume 2471 of Lec-\nture Notes in Computer Science, pages 412\u2013426. Springer-\nVerlag, 2002.\n[3] F. Bo\u00a8rner, A. Bulatov, P. Jeavons, and A. Krokhin. Quan-\ntified constraints and surjective polymorphisms. Technical\nReport PRG-RR-02-11, Computing Laboratory, University\nof Oxford, Oxford, UK, 2002.\n[4] A. Bulatov. Finite sublattices in a lattice of clones. Algebra\ni Logika, 33(5):514\u2013549, 1994. (in Russian).\n[5] A. Bulatov. A dichotomy theorem for constraints on a three-\nelement set. In Proceedings 43rd IEEE Symposium on Foun-\ndations of Computer Science, FOCS\u201902, pages 649\u2013658,\n2002.\n[6] A. Bulatov. Mal\u2019tsev constraints are tractable. Technical\nReport PRG-RR-02-05, Computing Laboratory, University\nof Oxford, Oxford, UK, 2002.\n[7] A. Bulatov and V. Dalmau. Towards a dichotomy theorem\nfor the counting constraint satisfaction problem. Submitted\nfor publication.\n[8] A. Bulatov and P. Jeavons. Tractable constraints closed un-\nder a binary operation. Technical Report PRG-TR-12-00,\nComputing Laboratory, University of Oxford, Oxford, UK,\n2000.\n[9] A. Bulatov and P. Jeavons. Algebraic approach to multi-\nsorted constraints. Technical Report PRG-RR-01-18, Com-\nputing Laboratory, University of Oxford, Oxford, UK, 2001.\n[10] A. Bulatov, A. Krokhin, and P. Jeavons. Constraint satisfac-\ntion problems and finite algebras. In Proceedings 27th In-\nternational Colloquium on Automata, Languages and Pro-\ngramming, ICALP\u201900, volume 1853 of Lecture Notes in\nComputer Science, pages 272\u2013282. Springer-Verlag, 2000.\n[11] N. Creignou and M. Hermann. Complexity of generalized\nsatisfiability counting problems. Information and Computa-\ntion, 125(1):1\u201312, 1996.\n[12] N. Creignou, S. Khanna, and M. Sudan. Complexity Classi-\nfications of Boolean Constraint Satisfaction Problems, vol-\nume 7 of SIAM Monographs on Discrete Mathematics and\nApplications. 2001.\n[13] P. Crescenzi and G. Rossi. On the Hamming distance of con-\nstraint satisfaction problems. Theoretical Computer Science,\n288(1):85\u2013100, 2002.\n[14] V. Dalmau. Some dichotomy theorems on constant-\nfree quantified Boolean formulas. Technical Report TR\nLSI-97-43-R, Department LSI, Universitat Politecnica de\nCatalunya, 1997.\n[15] V. Dalmau. A new tractable class of constraint satisfaction\nproblems. In Proceedings 6th International Symposium on\nArtificial Intelligence and Mathematics, 2000.\n[16] N. Dunkin, J. Bater, P. Jeavons, and D. Cohen. Towards high\norder constraint represenations for the frequency assignment\nproblem. Technical Report CSD-TR-98-05, Department of\nComputer Science, Royal Holloway, University of London,\nEgham, Surrey, UK, 1998.\n[17] T. Feder and M. Vardi. The computational structure of\nmonotone monadic SNP and constraint satisfaction: A study\nthrough Datalog and group theory. SIAM Journal of Com-\nputing, 28:57\u2013104, 1998.\n[18] M. Garey and D. Johnson. Computers and Intractability:\nA Guide to the Theory of NP-Completeness. Freeman, San\nFrancisco, CA., 1979.\n[19] G. Gottlob, L. Leone, and F. Scarcello. Hypertree decompo-\nsition and tractable queries. Journal of Computer and Sys-\ntem Sciences, 64(3):579\u2013627, 2002.\n[20] M. Gyssens, P. Jeavons, and D. Cohen. Decomposing con-\nstraint satisfaction problems using database techniques. Ar-\ntificial Intelligence, 66(1):57\u201389, 1994.\n[21] D. Hobby and R. McKenzie. The Structure of Finite Alge-\nbras, volume 76 of Contemporary Mathematics. American\nMathematical Society, Providence, R.I., 1988.\n[22] P. Jeavons. Constructing constraints. In Proceedings\n4th International Conference on Constraint Programming\u2014\nCP\u201998 (Pisa, October 1998), volume 1520 of Lecture Notes\nin Computer Science, pages 2\u201316. Springer-Verlag, 1998.\n[23] P. Jeavons. On the algebraic structure of combinatorial prob-\nlems. Theoretical Computer Science, 200:185\u2013204, 1998.\n[24] P. Jeavons, D. Cohen, and M. Gyssens. Closure properties\nof constraints. Journal of the ACM, 44:527\u2013548, 1997.\n[25] P. Jeavons, D. Cohen, and M. Gyssens. How to determine\nthe expressive power of constraints. Constraints, 4:113\u2013131,\n1999.\n[26] H. Kautz and B. Selman. Planning as satisfiability. In\nProceedings 10th European Conference on Artificial Intel-\nligence, ECAI\u201992, pages 359\u2013363, 1992.\n[27] D. Kavvadias and M. Sireni. The inverse satisfiability prob-\nlem. SIAM Journal on Computing, 28(1):152\u2013163, 1998.\n[28] S. Khanna, M. Sudan, L. Trevisan, and D. Williamson. The\napproximability of constraint satisfaction problems. SIAM\nJournal on Computing, 30(6):1863\u20131920, 2001.\n[29] L. Kirousis and P. Kolaitis. The complexity of minimal\nsatisfiability problems. In Proceedings 18th International\nSymposium on Theoretical Aspects of Computer Science,\nSTACS\u201901, volume 2010 of Lecture Notes in Computer Sci-\nence, pages 407\u2013418. Springer-Verlag, 2001.\n[30] P. Kolaitis and M. Vardi. Conjunctive-query containment\nand constraint satisfaction. Journal of Computer and System\nSciences, 61:302\u2013332, 2000.\n[31] A. Mackworth. Constraint satisfaction. In S. Shapiro, edi-\ntor, Encyclopedia of Artificial Intelligence, volume 1, pages\n285\u2013293. Wiley Interscience, 1992.\n[32] K. Marriott and P. Stuckey. Programming with Constraints:\nan Introduction. MIT Press, 1998.\n[33] R. McKenzie, G. McNulty, and W. Taylor. Algebras, Lat-\ntices and Varieties, volume I. Wadsworth and Brooks, Cali-\nfornia, 1987.\n[34] U. Montanari. Networks of constraints: Fundamental prop-\nerties and applications to picture processing. Information\nSciences, 7:95\u2013132, 1974.\n[35] B. Nadel. Constraint satisfaction in Prolog: complexity and\ntheory-based heuristics. Information Sciences, 83(3-4):113\u2013\n131, 1995.\n[36] C. Papadimitriou. Computational Complexity. Addison-\nWesley, 1994.\n[37] J. Pearson and P. Jeavons. A survey of tractable constraint\nsatisfaction problems. Technical Report CSD-TR-97-15,\nRoyal Holloway, University of London, July 1997.\n[38] N. Pippenger. Theories of Computability. Cambridge Uni-\nversity Press, Cambridge, 1997.\n[39] R. Po\u00a8schel and L. Kaluz\u02c7nin. Funktionen- und Relationenal-\ngebren. DVW, Berlin, 1979.\n[40] E. Post. The two-valued iterative systems of mathematical\nlogic, volume 5 of Annals Mathematical Studies. Princeton\nUniversity Press, 1941.\n[41] I. Rosenberg. Completeness, closed classes and relations\nin multiple-valued logics. In Proceedings 4th International\nSymposium on Multiple-Valued Logic, ISMVL\u201974, pages 1\u2013\n26, 1974.\n[42] T. Schaefer. The complexity of satisfiability problems. In\nProceedings 10th ACM Symposium on Theory of Comput-\ning, STOC\u201978, pages 216\u2013226, 1978.\n[43] A. Szendrei. Clones in Universal Algebra, volume 99 of\nSeminaires de Mathematiques Superieures. University of\nMontreal, 1986.\n[44] E. Tsang. Foundations of Constraint Satisfaction. Academic\nPress, London, 1993.\n[45] P. van Beek. Reasoning about qualitative temporal informa-\ntion. Artificial Intelligence, 58:297\u2013326, 1992.\n"}