{"doi":"10.1186\/1471-2105-11-S12-S12","coreId":"197235","oai":"oai:lra.le.ac.uk:2381\/9472","identifiers":["oai:lra.le.ac.uk:2381\/9472","10.1186\/1471-2105-11-S12-S12"],"title":"The MOLGENIS toolkit: rapid prototyping of biosoftware at the push of a button","authors":["Swertz, Morris A.","Dijkstra, Martijn","Adamusiak, Tomasz","van der Velde, Joeri K.","Kanterakis, Alexandros","Roos, Erik T.","Lops, Joris","Thorisson, Gudmundur A.","Arends, Danny","Byelas, George","Muilu, Juha","Brookes, Anthony J.","de Brock, Engbert O.","Jansen, Ritsert C.","Parkinson, Helen"],"enrichments":{"references":[{"id":43694267,"title":"A: BioMart\u2013biological queries made easy.","authors":[],"date":"2009","doi":"10.1186\/1471-2164-10-22","raw":"Smedley D, Haider S, Ballester B, Holland R, London D, Thorisson G, Kasprzyk A: BioMart\u2013biological queries made easy. BMC Genomics 2009, 10:22.","cites":null},{"id":43694241,"title":"AJ: Genotype-phenotype databases: challenges and solutions for the post-genomic era. Nat Rev Genet","authors":[],"date":"2009","doi":"10.1038\/nrg2483","raw":"Thorisson GA, Muilu J, Brookes AJ: Genotype-phenotype databases: challenges and solutions for the post-genomic era. Nat Rev Genet 2009, 10:9-18.","cites":null},{"id":43694250,"title":"AJ: HGVbaseG2P: a central genetic association database. Nucleic Acids Res","authors":[],"date":"2009","doi":"10.1093\/nar\/gkn748","raw":"Thorisson GA, Lancaster O, Free RC, Hastings RK, Sarmah P, Dash D, Brahmachari SK, Brookes AJ: HGVbaseG2P: a central genetic association database. Nucleic Acids Res 2009, 37:D797-802.","cites":null},{"id":43694277,"title":"AndroMDA: extensible generator framework that adheres to the Model Driven Architecture (MDA)","authors":[],"date":null,"doi":null,"raw":"AndroMDA: extensible generator framework that adheres to the Model Driven Architecture (MDA) paradigm. [http:\/\/www.andromda.org\/].","cites":null},{"id":43694246,"title":"ED: A framework for scientific data modeling and automated software development. Bioinformatics","authors":[],"date":"2005","doi":"10.1093\/bioinformatics\/bti234","raw":"Fogh RH, Boucher W, Vranken WF, Pajon A, Stevens TJ, Bhat TN, Westbrook J, Ionides JMC, Laue ED: A framework for scientific data modeling and automated software development. Bioinformatics 2005, 21:1678-1684.","cites":null},{"id":43694245,"title":"Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences. Genome Biol","authors":[],"date":"2010","doi":"10.1186\/gb-2010-11-8-r86","raw":"Goecks J, Nekrutenko A, Taylor J: Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences. Genome Biol 2010, 11:R86.","cites":null},{"id":43694242,"title":"Generic Model Organism Database","authors":[],"date":null,"doi":"10.1101\/gr.403602","raw":"Generic Model Organism Database (GMOD). [http:\/\/gmod.org].","cites":null},{"id":43694281,"title":"LD: GMODWeb: a web framework for the Generic Model Organism Database. Genome Biol","authors":[],"date":"2008","doi":"10.1186\/gb-2008-9-6-r102","raw":"O\u2019Connor BD, Day A, Cain S, Arnaiz O, Sperling L, Stein LD: GMODWeb: a web framework for the Generic Model Organism Database. Genome Biol 2008, 9:R102.","cites":null},{"id":43694261,"title":"Little languages, little maintenance?","authors":[],"date":"1998","doi":"10.1002\/(sici)1096-908x(199803\/04)10:2<75::aid-smr168>3.0.co;2-5","raw":"van Deursen A, Klint P: Little languages, little maintenance? Journal of software maintenance 1998, 10:17.","cites":null},{"id":43694259,"title":"Little languages.","authors":[],"date":"1986","doi":"10.1002\/j.1538-7305.1989.tb00075.x","raw":"Bentley J: Little languages. Communications of the ACM 1986, 29:711-721.","cites":null},{"id":43694268,"title":"Micklem G: FlyMine: an integrated database for Drosophila and Anopheles genomics. Genome Biol","authors":[],"date":"2007","doi":"10.1186\/gb-2007-8-7-r129","raw":"Lyne R, Smith R, Rutherford K, Wakeling M, Varley A, Guillier F, Janssens H, Ji W, McLaren P, North P, Rana D, Riley T, Sullivan J, Watkins X, Woodbridge M, Lilley K, Russell S, Ashburner M, Mizuguchi K, Micklem G: FlyMine: an integrated database for Drosophila and Anopheles genomics. Genome Biol 2007, 8:R129.","cites":null},{"id":43694248,"title":"MOLGENIS: a open source software toolkit to rapidly generate bespoke biosoftware web applications.","authors":[],"date":null,"doi":null,"raw":"MOLGENIS: a open source software toolkit to rapidly generate bespoke biosoftware web applications. [http:\/\/www.molgenis.org].","cites":null},{"id":43694276,"title":"NW: Data capture in bioinformatics: requirements and experiences with Pedro.","authors":[],"date":"2008","doi":"10.1186\/1471-2105-9-183","raw":"Jameson D, Garwood K, Garwood C, Booth T, Alper P, Oliver SG, Paton NW: Data capture in bioinformatics: requirements and experiences with Pedro. BMC Bioinformatics 2008, 9:183.","cites":null},{"id":43694275,"title":"Omixed: customisable storage system for scientific data.","authors":[],"date":null,"doi":null,"raw":"Omixed: customisable storage system for scientific data. [http:\/\/www. omixed.org\/].","cites":null},{"id":43694266,"title":"OntoCAT: ontology common API (application programming interface) toolkit.","authors":[],"date":null,"doi":"10.1038\/npre.2011.6121","raw":"OntoCAT: ontology common API (application programming interface) toolkit. [http:\/\/ontocat.sourceforge.net].","cites":null},{"id":43694243,"title":"Open Bioinformatics Foundation","authors":[],"date":null,"doi":"10.1002\/9780471650126.dob1010","raw":"Open Bioinformatics Foundation (O|B|F). [http:\/\/www.open-bio.org].","cites":null},{"id":43694265,"title":"Patterns of Enterprise Application Architecture.","authors":[],"date":"2002","doi":null,"raw":"Fowler M: Patterns of Enterprise Application Architecture. AddisonWesley; 2002.","cites":null},{"id":43694278,"title":"Rails: open source web framework in the Ruby language.","authors":[],"date":null,"doi":"10.1007\/978-3-540-33135-3_23","raw":"Ruby on Rails: open source web framework in the Ruby language. [http:\/\/www.rubyonrails.org].","cites":null},{"id":43694239,"title":"RC: Beyond standardization: dynamic software infrastructures for systems biology. Nat Rev Genet","authors":[],"date":"2007","doi":"10.1038\/nrg2048","raw":"Swertz MA, Jansen RC: Beyond standardization: dynamic software infrastructures for systems biology. Nat Rev Genet 2007, 8:235-243.","cites":null},{"id":43694252,"title":"RC: designGG: an Rpackage and web tool for the optimal design of genetical genomics experiments.","authors":[],"date":"2009","doi":"10.1186\/1471-2105-10-188","raw":"Li Y, Swertz MA, Vera G, Fu J, Breitling R, Jansen RC: designGG: an Rpackage and web tool for the optimal design of genetical genomics experiments. BMC Bioinformatics 2009, 10:188.","cites":null},{"id":43694247,"title":"RC: Molecular Genetics Information System (MOLGENIS): alternatives in developing local experimental genomics databases. Bioinformatics","authors":[],"date":"2004","doi":"10.1093\/bioinformatics\/bth206","raw":"Swertz MA, de Brock EO, van Hijum SAFT, de Jong A, Buist G, Baerends RJS, Kok J, Kuipers OP, Jansen RC: Molecular Genetics Information System (MOLGENIS): alternatives in developing local experimental genomics databases. Bioinformatics 2004, 20:2075-2083.","cites":null},{"id":43694249,"title":"RC: XGAP: a uniform and extensible data model and software platform for genotype and phenotype experiments. Genome Biol","authors":[],"date":"2010","doi":"10.1186\/gb-2010-11-3-r27","raw":"Swertz MA, Velde KJ, Tesson BM, Scheltema RA, Arends D, Vera G, Alberts R, Dijkstra M, Schofield P, Schughart K, Hancock JM, Smedley D, Wolstencroft K, Goble C, de Brock EO, Jones AR, Parkinson HE, Jansen RC: XGAP: a uniform and extensible data model and software platform for genotype and phenotype experiments. Genome Biol 2010, 11:R27.","cites":null},{"id":43694251,"title":"Ripatti S: NordicDB: a Nordic pool and portal for genome-wide control data.","authors":[],"date":"2010","doi":"10.1038\/ejhg.2010.112","raw":"Leu M, Humphreys K, Surakka I, Rehnberg E, Muilu J, Rosenstrom P, Almgren P, Jaaskelainen J, Lifton RP, Kyvik KO, Kaprio J, Pedersen NL, Palotie A, Hall P, Gronberg H, Groop L, Peltonen L, Palmgren J, Ripatti S: NordicDB: a Nordic pool and portal for genome-wide control data. Eur J Hum Genet 2010.","cites":null},{"id":43694256,"title":"Software construction using components. Irvine: PhD Thesis,","authors":[],"date":"1981","doi":null,"raw":"Neighbors J: Software construction using components. Irvine: PhD Thesis, University of California 1981.","cites":null},{"id":43694263,"title":"Software Factories: Assembling Applications with Patterns, Models, Frameworks, and Tools.","authors":[],"date":"2004","doi":"10.1007\/978-3-540-28630-1_19","raw":"Greenfield J, Short K, Cook S, Kent S: Software Factories: Assembling Applications with Patterns, Models, Frameworks, and Tools. John Wiley & Sons; 2004.","cites":null},{"id":43694254,"title":"Solutions for data integration in functional genomics: a critical assessment and case study. Brief Bioinform","authors":[],"date":"2008","doi":"10.1093\/bib\/bbn040","raw":"Smedley D, Swertz MA, Wolstencroft K, Proctor G, Zouberakis M, Bard J, Hancock JM, Schofield P: Solutions for data integration in functional genomics: a critical assessment and case study. Brief Bioinform 2008, 9:532-544.","cites":null},{"id":43694244,"title":"Taverna: a tool for the composition and enactment of bioinformatics workflows. Bioinformatics","authors":[],"date":"2004","doi":"10.1093\/bioinformatics\/bth361","raw":"Oinn T, Addis M, Ferris J, Marvin D, Senger M, Greenwood M, Carver T, Glover K, Pocock MR, Wipat A, Li P: Taverna: a tool for the composition and enactment of bioinformatics workflows. Bioinformatics 2004, 20:3045-3054. Swertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12 http:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12 Page 8 of 9","cites":null},{"id":43694238,"title":"The full contents of the supplement are available online at http:\/\/www.biomedcentral.com\/1471-2105\/11?issue=S12. Author details 1Genomics Coordination Center, Groningen Bioinformatics Center,","authors":[],"date":"2010","doi":null,"raw":"Supplement 12, 2010: Proceedings of the 11th Annual Bioinformatics Open Source Conference (BOSC) 2010. The full contents of the supplement are available online at http:\/\/www.biomedcentral.com\/1471-2105\/11?issue=S12. Author details 1Genomics Coordination Center, Groningen Bioinformatics Center, University of Groningen & Dept. of Genetics, University Medical Center Groningen, P.O. Box 30001, 9700 RB Groningen, The Netherlands. 2EU-GEN2PHEN consortium. http:\/\/www.gen2phen.org. 3EU-CASIMIR consortium. http:\/\/www.casimir.ac. uk. 4EU-PANACEA consortium. http:\/\/www.panaceaproject.eu. 5EUEUROTRANS cosortium. http:\/\/www.euratrans.eu. 6BBMRI-NL, Postzone S4-P, P.O. Box 9600, 2300 RC Leiden, The Netherlands http:\/\/www.bbmri.nl. 7Netherlands Bioinformatics Centre, Geert Grooteplein 28, 6525 GA Nijmegen, The Netherlands http:\/\/www.nbic.nl. 8European Bioinformatics Institute, Wellcome Trust Genome Campus, Cambridge CB10 1SD, UK. 9Institute for Molecular Medicine Finland, University of Helsinki, Haartmaninkatu 8, FIN-00290, Helsinki, Finland. 10Department of Genetics, University of Leicester, University Road, Leicester LE1 7RH, UK. 11Cluster Information Systems, Faculty of Economics and Business, University of Groningen, P.O. Box 800, 9700 AV Groningen, The Netherlands.","cites":null},{"id":43694264,"title":"The Mythical Man Month:","authors":[],"date":"1995","doi":"10.1109\/ms.1995.10042","raw":"Brooks F: The Mythical Man Month: Essays on Software Engineering, 20th anniversary edition. Addison-Wesley; 1995.","cites":null},{"id":43694258,"title":"Thomas D: The pragmatic programmer: from Journeyman to Master.","authors":[],"date":"1999","doi":"10.1109\/ms.2000.895178","raw":"Hunt A, Thomas D: The pragmatic programmer: from Journeyman to Master. Addison-Wesley; 1999.","cites":null},{"id":43694240,"title":"Towards a cyberinfrastructure for the biological sciences: progress, visions and challenges. Nat Rev Genet","authors":[],"date":"2008","doi":"10.1038\/nrg2414","raw":"Stein LD: Towards a cyberinfrastructure for the biological sciences: progress, visions and challenges. Nat Rev Genet 2008, 9:678-688.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-12-21","abstract":"This is the published article. It is reproduced here under the Creative Commons Attribution License. The article is also freely available from the publisher's website at: http:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12Background:\\ud\nThere is a huge demand on bioinformaticians to provide their biologists with user friendly and scalable software infrastructures to capture, exchange, and exploit the unprecedented amounts of new *omics data. We here present MOLGENIS, a generic, open source, software toolkit to quickly produce the bespoke MOLecular GENetics Information Systems needed.\\ud\n\\ud\nMethods:\\ud\nThe MOLGENIS toolkit provides bioinformaticians with a simple language to model biological data structures and user interfaces. At the push of a button, MOLGENIS\u2019 generator suite automatically translates these models into a feature-rich, ready-to-use web application including database, user interfaces, exchange formats, and scriptable interfaces. Each generator is a template of SQL, JAVA, R, or HTML code that would require much effort to write by hand. This \u2018model-driven\u2019 method ensures reuse of best practices and improves quality because the modeling language and generators are shared between all MOLGENIS applications, so that errors are found quickly and improvements are shared easily by a re-generation. A plug-in mechanism ensures that both the generator suite and generated product can be customized just as much as hand-written software.\\ud\n\\ud\nResults:\\ud\nIn recent years we have successfully evaluated the MOLGENIS toolkit for the rapid prototyping of many types of biomedical applications, including next-generation sequencing, GWAS, QTL, proteomics and biobanking. Writing 500 lines of model XML typically replaces 15,000 lines of hand-written programming code, which allows for quick adaptation if the information system is not yet to the biologist\u2019s satisfaction. Each application generated with MOLGENIS comes with an optimized database back-end, user interfaces for biologists to manage and exploit their data, programming interfaces for bioinformaticians to script analysis tools in R, Java, SOAP, REST\/JSON and RDF, a tab-delimited file format to ease upload and exchange of data, and detailed technical documentation. Existing databases can be quickly enhanced with MOLGENIS generated interfaces using the \u2018ExtractModel\u2019 procedure.\\ud\n\\ud\nConclusions:\\ud\nThe MOLGENIS toolkit provides bioinformaticians with a simple model to quickly generate flexible web platforms for all possible genomic, molecular and phenotypic experiments with a richness of interfaces not provided by other tools. All the software and manuals are available free as LGPLv3 open source at http:\/\/www.molgenis.orgPeer-reviewedPublisher Versio","downloadUrl":"http:\/\/creativecommons.org\/licenses\/by\/2.0),","fullTextIdentifier":"https:\/\/lra.le.ac.uk\/bitstream\/2381\/9472\/2\/MOLGENIS%20toolkit_1471-2105-11-S12-S12.pdf","pdfHashValue":"3ab68f76c6794efd73ca20394af8dae73db23caf","publisher":"BioMed\u00a0Central Ltd","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/9472<\/identifier><datestamp>\n                2013-10-25T09:48:45Z<\/datestamp><setSpec>\n                com_2381_93<\/setSpec><setSpec>\n                com_2381_9550<\/setSpec><setSpec>\n                col_2381_95<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nThe MOLGENIS toolkit: rapid prototyping of biosoftware at the push of a button<\/dc:title><dc:creator>\nSwertz, Morris A.<\/dc:creator><dc:creator>\nDijkstra, Martijn<\/dc:creator><dc:creator>\nAdamusiak, Tomasz<\/dc:creator><dc:creator>\nvan der Velde, Joeri K.<\/dc:creator><dc:creator>\nKanterakis, Alexandros<\/dc:creator><dc:creator>\nRoos, Erik T.<\/dc:creator><dc:creator>\nLops, Joris<\/dc:creator><dc:creator>\nThorisson, Gudmundur A.<\/dc:creator><dc:creator>\nArends, Danny<\/dc:creator><dc:creator>\nByelas, George<\/dc:creator><dc:creator>\nMuilu, Juha<\/dc:creator><dc:creator>\nBrookes, Anthony J.<\/dc:creator><dc:creator>\nde Brock, Engbert O.<\/dc:creator><dc:creator>\nJansen, Ritsert C.<\/dc:creator><dc:creator>\nParkinson, Helen<\/dc:creator><dc:description>\nThis is the published article. It is reproduced here under the Creative Commons Attribution License. The article is also freely available from the publisher's website at: http:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12<\/dc:description><dc:description>\nBackground:\\ud\nThere is a huge demand on bioinformaticians to provide their biologists with user friendly and scalable software infrastructures to capture, exchange, and exploit the unprecedented amounts of new *omics data. We here present MOLGENIS, a generic, open source, software toolkit to quickly produce the bespoke MOLecular GENetics Information Systems needed.\\ud\n\\ud\nMethods:\\ud\nThe MOLGENIS toolkit provides bioinformaticians with a simple language to model biological data structures and user interfaces. At the push of a button, MOLGENIS\u2019 generator suite automatically translates these models into a feature-rich, ready-to-use web application including database, user interfaces, exchange formats, and scriptable interfaces. Each generator is a template of SQL, JAVA, R, or HTML code that would require much effort to write by hand. This \u2018model-driven\u2019 method ensures reuse of best practices and improves quality because the modeling language and generators are shared between all MOLGENIS applications, so that errors are found quickly and improvements are shared easily by a re-generation. A plug-in mechanism ensures that both the generator suite and generated product can be customized just as much as hand-written software.\\ud\n\\ud\nResults:\\ud\nIn recent years we have successfully evaluated the MOLGENIS toolkit for the rapid prototyping of many types of biomedical applications, including next-generation sequencing, GWAS, QTL, proteomics and biobanking. Writing 500 lines of model XML typically replaces 15,000 lines of hand-written programming code, which allows for quick adaptation if the information system is not yet to the biologist\u2019s satisfaction. Each application generated with MOLGENIS comes with an optimized database back-end, user interfaces for biologists to manage and exploit their data, programming interfaces for bioinformaticians to script analysis tools in R, Java, SOAP, REST\/JSON and RDF, a tab-delimited file format to ease upload and exchange of data, and detailed technical documentation. Existing databases can be quickly enhanced with MOLGENIS generated interfaces using the \u2018ExtractModel\u2019 procedure.\\ud\n\\ud\nConclusions:\\ud\nThe MOLGENIS toolkit provides bioinformaticians with a simple model to quickly generate flexible web platforms for all possible genomic, molecular and phenotypic experiments with a richness of interfaces not provided by other tools. All the software and manuals are available free as LGPLv3 open source at http:\/\/www.molgenis.org<\/dc:description><dc:description>\nPeer-reviewed<\/dc:description><dc:description>\nPublisher Version<\/dc:description><dc:date>\n2011-06-20T10:33:29Z<\/dc:date><dc:date>\n2011-06-20T10:33:29Z<\/dc:date><dc:date>\n2010-12-21<\/dc:date><dc:type>\nPublished Article<\/dc:type><dc:identifier>\nBMC Bioinformatics 2010, 11(Suppl 12):S12<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/9472<\/dc:identifier><dc:identifier>\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12<\/dc:identifier><dc:identifier>\n10.1186\/1471-2105-11-S12-S12<\/dc:identifier><dc:identifier>\n1471-2105<\/dc:identifier><dc:language>\nen<\/dc:language><dc:rights>\nCopyright \u00a9 2010 Swertz et al; licensee BioMed Central Ltd. This is an open access article distributed under the terms of the Creative Commons\\ud\nAttribution License (http:\/\/creativecommons.org\/licenses\/by\/2.0), which permits unrestricted use, distribution, and reproduction in\\ud\nany medium, provided the original work is properly cited.<\/dc:rights><dc:publisher>\nBioMed\u00a0Central Ltd<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["1471-2105","issn:1471-2105"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":[],"subject":["Published Article"],"fullText":"PROCEEDINGS Open Access\nThe MOLGENIS toolkit: rapid prototyping of\nbiosoftware at the push of a button\nMorris A Swertz1,2,3,4,5,6,7,8*, Martijn Dijkstra1,7, Tomasz Adamusiak2,8, Joeri K van der Velde1,4,5,\nAlexandros Kanterakis1, Erik T Roos1, Joris Lops1, Gudmundur A Thorisson2,10, Danny Arends1, George Byelas1,\nJuha Muilu2,9, Anthony J Brookes2,10, Engbert O de Brock11, Ritsert C Jansen1,4,5, Helen Parkinson2,3,8\nFrom The 11th Annual Bioinformatics Open Source Conference (BOSC) 2010\nBoston, MA, USA. 9-10 July 2010\nAbstract\nBackground: There is a huge demand on bioinformaticians to provide their biologists with user friendly and\nscalable software infrastructures to capture, exchange, and exploit the unprecedented amounts of new *omics\ndata. We here present MOLGENIS, a generic, open source, software toolkit to quickly produce the bespoke\nMOLecular GENetics Information Systems needed.\nMethods: The MOLGENIS toolkit provides bioinformaticians with a simple language to model biological data\nstructures and user interfaces. At the push of a button, MOLGENIS\u2019 generator suite automatically translates these\nmodels into a feature-rich, ready-to-use web application including database, user interfaces, exchange formats, and\nscriptable interfaces. Each generator is a template of SQL, JAVA, R, or HTML code that would require much effort to\nwrite by hand. This \u2018model-driven\u2019 method ensures reuse of best practices and improves quality because the\nmodeling language and generators are shared between all MOLGENIS applications, so that errors are found quickly\nand improvements are shared easily by a re-generation. A plug-in mechanism ensures that both the generator\nsuite and generated product can be customized just as much as hand-written software.\nResults: In recent years we have successfully evaluated the MOLGENIS toolkit for the rapid prototyping of many\ntypes of biomedical applications, including next-generation sequencing, GWAS, QTL, proteomics and biobanking.\nWriting 500 lines of model XML typically replaces 15,000 lines of hand-written programming code, which allows for\nquick adaptation if the information system is not yet to the biologist\u2019s satisfaction. Each application generated with\nMOLGENIS comes with an optimized database back-end, user interfaces for biologists to manage and exploit their\ndata, programming interfaces for bioinformaticians to script analysis tools in R, Java, SOAP, REST\/JSON and RDF, a\ntab-delimited file format to ease upload and exchange of data, and detailed technical documentation. Existing\ndatabases can be quickly enhanced with MOLGENIS generated interfaces using the \u2018ExtractModel\u2019 procedure.\nConclusions: The MOLGENIS toolkit provides bioinformaticians with a simple model to quickly generate flexible\nweb platforms for all possible genomic, molecular and phenotypic experiments with a richness of interfaces not\nprovided by other tools. All the software and manuals are available free as LGPLv3 open source at http:\/\/www.\nmolgenis.org.\n* Correspondence: m.a.swertz@rug.nl\n1Genomics Coordination Center, Groningen Bioinformatics Center, University\nof Groningen & Dept. of Genetics, University Medical Center Groningen, P.O.\nBox 30001, 9700 RB Groningen, The Netherlands\nFull list of author information is available at the end of the article\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\n\u00a9 2010 Swertz et al; licensee BioMed Central Ltd. This is an open access article distributed under the terms of the Creative Commons\nAttribution License (http:\/\/creativecommons.org\/licenses\/by\/2.0), which permits unrestricted use, distribution, and reproduction in\nany medium, provided the original work is properly cited.\nBackground\nHigh-throughput technologies have boosted biological\nand medical research and the need for software infra-\nstructures to manage and process the large datasets pro-\nduced is widely accepted [1-3]. Bioinformaticians are\nunder continuous pressure to both tackle the complexity\nand diversity of new biological systems and analytical\nmethods and to translate these quickly into flexible\ninformatics infrastructures, while keeping up with the\nunpredictable evolution of molecular biotechnologies\nand the increasing scale of experiments. While standar-\ndization of tools and data formats in open source pro-\njects like the Generic Model Organism Database,\nGMOD [4], and the Open Bioinformatics Foundation,\nOBF [5], have been indispensable in reducing the devel-\nopment efforts needed via reusable and easy to integrate\ncomponents, new research must also be quickly accom-\nmodated, for which efficient software variation mechan-\nisms are needed.\nFigure 1 outlines the \u2018model-driven\u2019 development\nmethod that several bioinformatics projects adopted in\nrecent years to enable fast and flexible infrastructure\ndevelopment [1], for example Taverna and Galaxy for\nanalysis workflows [6,7], CCPN for processing tools [8],\nand the early MOLGENIS for biological data manage-\nment [9]. See our review [1] for a more complete over-\nview. This method consists of three components:\nextensible \u2018standard\u2019 software that provides a vast array\nof reusable components; a high-level modeling language\n(domain-specific language, DSL) to specify biology-spe-\ncific customizations to this software; and a software\ncode generator to automatically translate (or execute)\nsuch custom models into all lower level program logic\nof the complete working software, saving all the effort\nneeded to write the software by hand.\nIn this paper we present the evolution of MOLGENIS\ninto a generic, model-driven toolkit for the rapid genera-\ntion of bespoke, data-intensive biosoftware applications\n[10]. We demonstrate step-by-step how bioinformaticians\ncan use a domain-specific language to efficiently model\nthe biological details of their particular biological system,\nand use MOLGENIS software generation tools to auto-\nmatically generate a web application tailored to the\nexperiments of their biologists, building on reusable\nFigure 1 Model-driven development. Many minor and major changes have to be written in software code before a \u2018standard\u2019 software\ninfrastructure accommodates a particular research. Using \u2018model-driven\u2019 development methods a bioinformatician only needs to model what is\nneeded for his experiment using a therefore optimized domain specific language (DSL). Generators quickly produce all the software logic to\ncompose a full software infrastructure that accommodates these needs. When experimental needs change, a bioinformatician can (re)run the\nsame generator with an adapted model file to quickly produce another variant of software infrastructure. This vastly reduces \u2018time-to-research\u2019\nand enables bioinformaticians to quickly develop a suite of software infrastructures, with each variant accommodating a specific research task,\nwhile still on track to reuse, integrate and share the best standard features with other labs and bioinformaticians.\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 2 of 9\ncomponents. Next, we evaluate the results of these meth-\nods in the development of a range of MOLGENIS appli-\ncations [9,11-15], that is, software applications generated\nusing the MOLGENIS toolkit. We found up to 30 times\nefficiency improvement compared to hand-writing soft-\nware, while providing a richness of features practically\nunfeasible to produce by hand but not yet provided by\nrelated projects. We conclude by inviting the bioinfor-\nmatics community to add more MOLGENIS models,\ncomponents and generators to quickly generate all the\nsoftware infrastructures biologists want to have.\nMethods\nThe MOLGENIS toolkit is based on the method of\nmodel-driven development which emerged in the 1990s\nfrom the computer industry. The key to success is the\nclear scope of the toolbox (i.e., what family of software\napplications should be produced with it) and separating\nwhich features should be fixed (e.g., reusable compo-\nnents common to all MOLGENIS applications) and\nwhich features should be variable (i.e. modeled and gen-\nerated per MOLGENIS application instance), a process\nknown as domain analysis [16]. Below we discuss MOL-\nGENIS\u2019 initial domain analysis, its modeling language,\ngenerators and reusable components.\nDomain analysis\nTable 1 summarizes the initial set of features we\nrequired from MOLGENIS information systems when\nwe started; it explains why these features are indeed\nrequired, and describes what parts of the features are\ncommon and variable over experiment databases. To\nobtain this picture, we analyzed 20 existing microarray\ndatabases next to many requirements interviews, see\nTable 1 in [9].\nThe second step was to implement the common and\nvariable parts, which we started with a prototype. Here\nwe applied the don\u2019t repeat yourself principle (DRY)\n[17]: every piece of design knowledge must have a sin-\ngle, unambiguous, authoritative representation. We\ntherefore searched through the prototype software code.\nIf we found identical pieces then we put them into the\nlibrary of reusable components. If we found very similar\npieces of software code, we put the common parts into\na generator and the variation points into the modeling\nlanguage. In each subsequent step we evolved the MOL-\nGENIS generator, only incorporating new functionality\nwhen we repeatedly needed it.\nDuring the next six years of using the MOLGENIS\ngenerator we added numerous functions and optimiza-\ntions, such as filters for the data, viewing data as a\n\u2018matrix\u2019, downloading data as CSV files, enabling pro-\ngramming interaction via R and web services, and so on.\nThe generators ensure that \u2018old\u2019 MOLGENIS application\nvariants can benefit from these improvements: when a\nMOLGENIS instance is re-generated, these improve-\nments are automatically integrated into the new version.\nModeling language\nFigure 2 shows how a custom MOLGENIS application can\nbe defined in a single file. The file is written in MOL-\nGENIS\u2019 modeling language. This enables compact specifi-\ncation of what experiment database is needed, i.e., to\ndeclare how an experiment is organized in terms of data\ntypes and their relationships and how these data are to be\nshown on the screen. Figure 2 shows the following fea-\ntures: Three data entities: \u2776Experiment, Sample and Hybri-\ndization; the Experiment entity has six fields, including ID,\nMedium and Stress (because it needs to administrate\nmicrobe experiments). To minimize the modeling work\nTable 1 Common and variable features of MOLGENIS information systems\nMOLGENIS Features (F) Common parts (C) and Variable parts (V)\nF1. Data\nStore and find lab activities, datasets and\nbiomaterials.\nC1. Logic to add, update, remove, find and count data entities in a database; read and write data\nfiles.\nV1. Data structures that suit the research, e.g., samples in a clinical lab have a \u201ctissue\u201d while microbe\nsamples do not.\nF2. Control\nManipulate lab entities such that they suit the\nresearch process.\nC2. Logic to select, navigate (first, previous, next, last), find (filter), and edit data entities (using the\nlogic of C1).\nV2. Control structures that suit the research, e.g., experiments are shown with a menu with sub-\nforms for Samples and Hybridizations.\nF3. View\nView entities and control interactively (via the\nInternet).\nC3 Presentation of logic that shows F1 and F2 with usable layout and formatting.\nV3. Presentation of structure of the specific entity (V1) and control structure (V2) of a system variant\nvia the Internet (option to have this in company style).\nF4. Security\nEnsure that the right people get access to the\nright results.\nC4. To manage users, roles and privileges and have authentication and authorization in place.\nV4. To set Roles and Privileges to entities and controls, e.g., only spotters (role) are allowed to add\narrays (privilege).\nF5. Extensibility\nAllow addition of components for data\nprocessing and visualizations.\nC5. To have a plug-in mechanism to integrate external programs so that these programs can\nbenefit from entity and control logic.\nV5. To extend a system variant with logic beyond the family, e.g., analysis scripts, quantification file\nvalidation, complex data aggregation, and export to files.\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 3 of 9\nwe choose sensible defaults in the domain-specific lan-\nguage, a principle known as convention over configuration:\neach field has to be set to a value by the researcher unless\nspecified to be nillable\u2777; field can be edited (updated)\nunless specified to be read only\u2778; each field is default of\ntype \u2018string\u2019 (a variable character string of length 255)\nunless otherwise specified to e.g., \u2019decimal\u2019\u2779; and fields can\nbe defined as having a relation to fields in other entities\nvia a cross-reference (xref)\u277a. The user interface consists of\na plugin\u277b that renders the MOLGENIS header and tool\nmenu; one user interface form\u277c to control Experiments,\nwith a sub menu\u277d, consisting of two child forms for Sam-\nples and Hybridizations. Child forms are automatically\nlinked to the parent form based on cross references, e.g.,\nthe field \u2018Experiment\u2019 of \u2018Sample\u2019 references to the \u2018ID\u2019 of\nan \u2018Experiment\u2019\u277e. By default, forms show each entity as\none-record-per-screen unless specified as a list\u277f. The\nmodeling language includes advanced object-orientation\nfeatures like inheritance, as well as extensive help to docu-\nment your model (not shown).\nOne can think of MOLGENIS\u2019 modeling language as a\n\u2018domain-specific language\u2019 (DSL) that is optimized to\nefficiently express a particular problem, task or area\n[18,19], in this case to compose biosoftware infrastruc-\ntures. The level of abstraction is raised, so no lengthy,\ntechnical or redundant details on how each feature\nshould be implemented in general programming lan-\nguages have to be given [20,21]. Examples of other\ndomain-specific languages include R\/Splus for statistics,\nMatLab for mathematics, SQL for databases, HTML for\nlayouting, and now MOLGENIS\u2019 modeling language for\nbiological software infrastructures.\nIn most cases, knowledge of the DSL is all that is\nneeded to produce a custom MOLGENIS application\nvariant. The domain-specific language was implemented\nusing XML so that model files can be edited using off-\nthe-shelf XML editors. However, you may want to\ninclude hand-programmed components into a particular\nMOLGENIS instance. For example, for the eXtensible\nGenotype And Phenotype (XGAP) database application\nof MOLGENIS [11], we developed a \u2018MatrixViewer\u2019 that\nbuilds on the generated components, which saved us the\nwork of writing the plug-in from scratch. This requires a\nmodel sentence that points to the \u2018plug-in\u2019 (allowing it\nto be seamlessly integrated) as well as hand-program-\nming of the plug-in itself.\nFigure 2 Example model. The detailed software needed for an experiment can be described in domain-specific language (DSL, left). The\nMOLGENIS generator reads the model and automatically produces the custom software infrastructure specified (right). The screenshot includes\nexample data. See main text for a description of the numbers.\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 4 of 9\nReusable components\nEach MOLGENIS application follows the widely\naccepted three-layered architecture design of web appli-\ncations. Figure 3 summarizes some of MOLGENIS\u2019 reu-\nsable components and their variation mechanisms.\nMOLGENIS\u2019 reusable components provide building\nblocks with a modular structure, which allows them to\nbe assembled in diverse combinations, similar to prefab-\nricated houses that are built from modular walls instead\nof bricks. Some building blocks are semi-finished and\nneed to be \u2018completed\u2019 before use (which is automated\nin MOLGENIS via the generators and inheritance). We\nbased the design of MOLGENIS on industry-proven\ndesign patterns from the \u2018patterns for enterprise applica-\ntion architecture\u2019 (PEAA), a catalog of proven solutions\nfor software design problems that we used as a guideline\n[22]. The logic of the reusable components is implemen-\nted using Java (http:\/\/java.sun.com); the HTML layout\nfor the user interface is encoded in Freemarker tem-\nplates (http:\/\/freemarker.sourceforge.net\/); and the data-\nbase back-end using MySQL, PostgreSQL or HSQLDB.\nGenerators\nThe generators are compact specifications of how each\ndatabase feature should be implemented. The MOL-\nGENIS toolkit now has over 20 generators, but normal\nusers will never need to take a look inside. However, for\nreaders wanting to create their own generators, Figure 4\nprovides an example of the simple, text-based, genera-\ntors we use. Each generator consists of two files: a Free-\nmarker template that describes the code to be generated\n(similar to that shown in Figure 4a) and a Java \u2018Genera-\ntor\u2019 class that controls the generating process. A new\ngenerator can be developed as follows: first write some\nexamples of the desired programs by hand, where possi-\nble using similar patterns (see Figure 4b) and mark\nwhich parts are variable between them. Then copy one\nof these examples into a generator template (text file)\nand replace all variable parts with \u2018holes\u2019 that are to be\nfilled by the code generator based on parameters from\nDSL (see Figure 4a). At each generation, the template is\nthen automatically copied and the \u2018holes\u2019 filled, based on\nparameters described in the domain-specific language,\nsaving much laborious manual work.\nResults\nTo start generating your own MOLGENIS application,\nyou can download a ready-to-use \u2018workspace\u2019 from\nhttp:\/\/www.molgenis.org, which can be edited using the\ncommonly used Eclipse integrated development environ-\nment (IDE) tool (http:\/\/www.eclipse.org). Extensive\nmanuals are available to help install the Java, MySQL,\nTomcat and Eclipse software needed and to learn how\nto walk through the Eclipse workspace to edit models\nand generate and run MOLGENIS instances; most new\nusers can complete this part in about three hours.\nBelow we summarize the output you can expect as well\nas recent experiences from using this toolbox. Detailed\nexamples on how these features can be used to support\nactual microarray or genetical genomics experiments\ncan be found in [11,14,15].\nExpected output\nAfter completing a MOLGENIS model and running the\ngenerator as described above, you have a ready-to-use\nsoftware application. Figure 5 summarizes the features\nyou get when running the generated result as a web\napplication: a fully functional system where researchers\ncan upload, manage, browse and query their biological\ndata that conform to the model, optionally enhanced\nwith analysis tools to explore and annotate (depending\non the plug-ins).\nparameter\nExperiment\nMapper\nHyb\nMapper\nFormControl\nName:\nExperiment\nFormControl\nName:\nHyb\nMenuControl\nName:\nExpSub\nMenuView\n- toHtml(Menu):html\n* getName(String)\n* getSubForms()\nFormView\n- toHtml(Form): html\n- getPage: List<entity>\n* getName(String)\n* getSubForms()\n* toHtml(<entity>): html\nMenu Controller\n- select(Event)\nFormController\n- prev(Event)\n- next(Event)\n- filter(Event)\nDataMapper\n- find(filter): List<entity>\n- count(filter): int\n- add(<entity> e)\n- update(<entity> e)\n- remove(<entity> e)\n* findSql(): sqlstring\n* addSql(): sqlstring\n* updateSql(): sqlstring\n* removeSql(): sqlstring\ninheritance\ninheritance\nparameter\nrelational\ndatabase\nExperiment\nTable\nHyb\nTable\nHyb\nFormView\nExperiment\nFormView\nExpSub\nMenuView\nHyb Form\nExpSub Menu\n(B) MOLGENIS instance(A) Reusable components\nmodel + generator Experiment Form\nFigure 3 Reusable components. (A) shows finished and semi-\nfinished components that provide reusable features for displaying\nscreens (FormView and MenuView), handling user requests (Form-\nand MenuController), and reading and writing to the database\n(DataMapper). (B) shows components of a completed software\nvariant as described in Figure 2. Only the \u2018differences\u2019 needed to be\nadded using systematic variation mechanisms (dotted lines) such as\ninheritance or parameterization.\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 5 of 9\nFigure 4 Example generator. MOLGENIS generators are implemented as templates. This example shows the generator for a database\ncomponent (A). This template is applied to each <entity> in the model to generate many complete DataMappers that would otherwise need to\nbe written by hand. (B) shows an example of the generated source files, in this case for <entity name=\"Experiment\"> as described in Figure 1.\nThe command $Name(entity) translates to the name of the entity (\u201cExperiment\u201d) and command ${csv($entity.Fields, x)} means that command\n\u2018x\u2019 is applied to each field of the entity and returned as a comma separated string (csv).\nFigure 5 Expected output. Overview of a typical MOLGENIS application, in this case customized in EBI style. See main text for a description of\nthe numbers.\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 6 of 9\nAn important feature is human readable and printable\ndocumentation of your model, including a graphical\noverview showing relationships in UML\u2776 which is of\ngreat use when still designing and discussing the model\nin a team. The next step is typically using the web user\ninterface to populate and test your application with real\ndata\u2777. To enable batch loading from a spreadsheet\napplication such as Excel, the system comes with a tab-\ndelimited import\/export tool tailored for your data\nwhich you can use from the user interface as well as via\na command-line tool; i.e., the headers of your Excel file\nhave to match the fields you have defined in the model,\n\u2778. In our experience, most computational biologists\ngreatly appreciate the use of the R interface to load, ana-\nlyze and re-store data from within the R statistical envir-\nonment\u2779 with web services to connect to workflow\ntools\u277a. Finally, advanced programmers may want to cus-\ntomize the layout or integrate their own scripts into the\nuser interface, that is, create plug-ins that are seamlessly\nintegrated with the generated software\u277b. Typical exam-\nples here are the integration of R scripts that produce\ngraphical overviews of the data, enabling them to be run\nby non-technical research colleagues. Alternatively, you\ncan use SOAP, REST and RDF interfaces for integration\nwith workflow tools like Taverna, or for use with com-\nmonly used JavaScript frameworks like jQuery to create\n\u2018Web 2.0\u2019 interactive websites. When satisfied with your\nMOLGENIS system, it can be shared as a simple JAR\nexecutable using an embedded web server, or as a WAR\nfile that can be run on public web servers.\nApplications\nSince the earliest MOLGENIS application [9], we have\nsuccessfully evaluated use of the MOLGENIS toolkit to\nbuild a wide range of biomedical applications [11-15],\nranging from sequencing to proteomics, including:\n\u2022 XGAP: an eXtensible Genotype And Phenotype plat-\nform [11] for systems genetics (GWAS, GWL) to store\nall kinds of *omics data ranging from genotype to tran-\nscript and protein data. XGAP comes with plug-ins to\nview large data matrices and run processing tools on a\ncluster. See http:\/\/www.xgap.org\n\u2022 Pheno-OM: to integrate any phenotype data from\nlocus-specific annotations to rich biobank cohort reports\nwith the help of the OntoCAT ontology toolkit to create\nsemantic mappings between related data items [23]. See\nhttp:\/\/www.ebi.ac.uk\/microarray-srv\/pheno\n\u2022 FINDIS: a mutation database for monogenic diseases\nbelonging to the Finnish disease heritage. See http:\/\/\nwww.findis.org\/molgenis_findis\/\n\u2022 HGVBaseG2P: the data management and curation\ninterface complement for HGVbaseG2P, a central data-\nbase of genotype to phenotype association studies [12].\nSee http:\/\/www.hgvbaseg2p.org\n\u2022 MAGETAB-OM: a microarray experiment data plat-\nform based on the MAGE-TAB data format standard to\ncreate a local microarray repository that is compatible\nwith the public ArrayExpress and GEO repositories. See\nhttp:\/\/magetab-om.sourceforge.net\/\n\u2022 NordicDB: the database of high-density genome-\nwide SNP information from 5,000 controls originating\nfrom Finnish, Swedish and Danish studies [13]. See\nhttp:\/\/www.nordicdb.org\n\u2022 DesignGG: a web tool to optimally design such\ngenetical genomics experiments [14]. See http:\/\/gbic.\nbiol.rug.nl\/designGG\/\nMore MOLGENIS applications can be found at http:\/\/\nwww.molgenis.org. Each of these MOLGENIS projects\nreported major benefits from the short cycle from\nmodel to running system to enable quick evaluation\n(500 lines of model XML replaces 15,000 lines of pro-\ngramming code) and use of the batch loading of data to\nevaluate how the newly built system works with real\ndata. More often than not, MOLGENIS helped in find-\ning inconsistencies in existing data that would otherwise\nhave gone unnoticed, leading to experimental errors. In\nour experience, a typical MOLGENIS generator run\ngives you about 90% of the application that is desired\n\u2018for free\u2019, with the remaining 10% typically filled in using\nplug-ins that are written by hand. The MOLGENIS\ntoolkit has also been used to extend or replace existing\nsoftware applications: the ExtractModel tool allows you\nto generate a MOLGENIS application from an existing\ndatabase, which can then be run side-by-side with code\ndeveloped previously, providing the best of both gener-\nated and hand-written worlds.\nRichness of features\nMOLGENIS provides a richness of features not yet pro-\nvided by other projects: BioMart [10,24] and InterMine\n[25] generate powerful query interfaces for existing data\nbut are not suited for bespoke data management;\nOmixed [26] generates programmatic interfaces onto\ndatabases, including a security layer, but lacks user\ninterfaces; PEDRO\/Pierre [27] generates data entry and\nretrieval user interfaces but lacks programmatic inter-\nfaces; and general generators such as AndroMDA [28]\nand Ruby-on-Rails [29] require much more program-\nming and configuration efforts compared to tools speci-\nfic to the biological domain. Turnkey [30] seems to\ncome close to MOLGENIS, having GUI and SOAP\ninterfaces but lacks auto-generation of R interfaces and\nfile exchange format.\nConclusions\nIn a recent perspective paper [1] we evaluated the gen-\neral benefits and pitfalls of model-driven development,\nsuch as the ability to develop infrastructure in short\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 7 of 9\ncycles to get the application right, ensuring developers\nand biologists are thinking along the same lines and\nincreasing quality and functionality for all. We further\nevaluated applying this method to both microarray and\ngenetical genomics experiments [9], [11].\nHere we have presented MOLGENIS in detail and\nreported the results of using this method against a\nwider range of applications. We conclude that using\nmodel-driven methods enables bioinformaticians to\nbuild biological software infrastructures faster than\nbefore, with the additional benefit of much easier shar-\ning of models, data and components. Much less time is\nspent on customizing and gluing together individual\ncomponents. The result is of higher quality because\nfewer incidental errors creep into the applications as a\nconsequence of the automated procedures; best prac-\ntices are applied instead of reinvented. And you do not\nneed heavy-weight technology to implement a model-\ndriven generator: simple text-based templates suffice to\ncreate biological software generators.\nAs a next step we want to expand the MOLGENIS\ntoolkit to also generate data processing tools, including\nuser friendly interaction, building on other \u2018model-dri-\nven bioinformatics\u2019 projects in this area, such as Taverna\n[6] to model\/execute analysis workflows and Galaxy [7]\nto generate user interfaces for processing tools. We\nhope that many bioinformaticians will enforce our open\nsource efforts and share their best models, plug-ins and\ngenerators at http:\/\/www.molgenis.org, so that, in time,\nevery biologist may find a MOLGENIS variant that suits\nhis\/her needs.\nAvailability and requirements\nProject name: MOLGENIS\nProject homepage: http:\/\/www.molgenis.org\nOperating systems: Windows, Linux, Apple\nProgramming language: Java JRE 1.5 or higher\nOther requirements: MySQL or Postgresql, Tomcat or\nother J2EE container\nLicense: GNU Lesses General Public License version 3\n(GNU LGPLv3)\nAny restrictions to use by non-academics: No\nAbbreviations\nAPI: application programming interface; CPNN: collaborative computing\nproject for NMR; CSV: comma separated values; DesignGG: experimental\ndesign of genetical genomics software; DRY: principle of don\u2019t repeat\nyourself; DSL: domain specific language; EBI: European Bioinformatics\nInstitute; FINDIS: finish disease database; GEN2PHEN: EU project to unify\nhuman and model organism genetic variation databases; GMOD: generic\nmodel organism database project; GUI: graphical user interface; GWAS:\ngenome wide association study; GWL: genome wide linkage analysis;\nHGVBaseG2P: human genome variation database of genotype-to-phenotype\ninformation; HTML: hypertext markup language; IDE: integrated development\nenvironment; JAR: Java Software Archive; LGPL: lesser general public license;\nMAGE-TAB: microarray gene expression tab delimited file format; MOLGENIS:\nmolecular genetics information systems toolkit; NordicDB: Nordic Control\nCohort Database with harmonized SNP information from Denmark, Estonia,\nFinland and Sweden; OBF: Open Bioinformatics Foundation; OntoCAT:\nontology common API toolkit; PEAA: patterns for enterprise application\narchitecture; QTL: quantitative trait locus; RDF: resource description format;\nREST: representative state transfer web services; SNP: single nucleotide\npolymorphism; SOAP: simple object access protocol; SQL: structured query\nlanguage; UML: uniform data modeling language; WAR: web application\narchive file; XML: extensible markup language; XGAP: extensible genotype\nand phenotype software platform.\nAcknowledgements\nThe authors thank Jackie Senior for editing this manuscript and PANACEA\n(funded by the European Commission FP7 contract 222936), NWO (Rubicon\nGrant 825.09.008), the Netherlands Bioinformatics Center (NBIC), BBMRI-NL\n(funded by the Netherlands Organization for Scientific Research, NWO),\nCASIMIR (funded by the European Commission under contract number\nLSHG-CT-2006-037811), GEN2PHEN (funded by the European Commission\nFP7-HEALTH contract 200754) and the EMBL for financial support.\nThis article has been published as part of BMC Bioinformatics Volume 11\nSupplement 12, 2010: Proceedings of the 11th Annual Bioinformatics Open\nSource Conference (BOSC) 2010. The full contents of the supplement are\navailable online at http:\/\/www.biomedcentral.com\/1471-2105\/11?issue=S12.\nAuthor details\n1Genomics Coordination Center, Groningen Bioinformatics Center, University\nof Groningen & Dept. of Genetics, University Medical Center Groningen, P.O.\nBox 30001, 9700 RB Groningen, The Netherlands. 2EU-GEN2PHEN consortium.\nhttp:\/\/www.gen2phen.org. 3EU-CASIMIR consortium. http:\/\/www.casimir.ac.\nuk. 4EU-PANACEA consortium. http:\/\/www.panaceaproject.eu. 5EU-\nEUROTRANS cosortium. http:\/\/www.euratrans.eu. 6BBMRI-NL, Postzone S4-P,\nP.O. Box 9600, 2300 RC Leiden, The Netherlands http:\/\/www.bbmri.nl.\n7Netherlands Bioinformatics Centre, Geert Grooteplein 28, 6525 GA\nNijmegen, The Netherlands http:\/\/www.nbic.nl. 8European Bioinformatics\nInstitute, Wellcome Trust Genome Campus, Cambridge CB10 1SD, UK.\n9Institute for Molecular Medicine Finland, University of Helsinki,\nHaartmaninkatu 8, FIN-00290, Helsinki, Finland. 10Department of Genetics,\nUniversity of Leicester, University Road, Leicester LE1 7RH, UK. 11Cluster\nInformation Systems, Faculty of Economics and Business, University of\nGroningen, P.O. Box 800, 9700 AV Groningen, The Netherlands.\nAuthors\u2019 contributions\nMAS and EOB conceived the method and designed and implemented the\nfirst MOLGENIS generator suite. MAS, MD, KJV, TER, AK, JL, DA, GB, GAT, JM,\nand TA participated in the development of the MOLGENIS toolkit and\/or\nhave been developing applications using MOLGENIS as a platform. RCJ, HP,\nGAT, and AJB have been feeding requirements to steer future development.\nMAS drafted the manuscript. All authors read and approved the final\nmanuscript.\nCompeting interests\nThe authors declare that they have no competing interests.\nPublished: 21 December 2010\nReferences\n1. Swertz MA, Jansen RC: Beyond standardization: dynamic software\ninfrastructures for systems biology. Nat Rev Genet 2007, 8:235-243.\n2. Stein LD: Towards a cyberinfrastructure for the biological sciences:\nprogress, visions and challenges. Nat Rev Genet 2008, 9:678-688.\n3. Thorisson GA, Muilu J, Brookes AJ: Genotype-phenotype databases:\nchallenges and solutions for the post-genomic era. Nat Rev Genet 2009,\n10:9-18.\n4. Generic Model Organism Database (GMOD). [http:\/\/gmod.org].\n5. Open Bioinformatics Foundation (O|B|F). [http:\/\/www.open-bio.org].\n6. Oinn T, Addis M, Ferris J, Marvin D, Senger M, Greenwood M, Carver T,\nGlover K, Pocock MR, Wipat A, Li P: Taverna: a tool for the composition\nand enactment of bioinformatics workflows. Bioinformatics 2004,\n20:3045-3054.\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 8 of 9\n7. Goecks J, Nekrutenko A, Taylor J: Galaxy: a comprehensive approach for\nsupporting accessible, reproducible, and transparent computational\nresearch in the life sciences. Genome Biol 2010, 11:R86.\n8. Fogh RH, Boucher W, Vranken WF, Pajon A, Stevens TJ, Bhat TN,\nWestbrook J, Ionides JMC, Laue ED: A framework for scientific data\nmodeling and automated software development. Bioinformatics 2005,\n21:1678-1684.\n9. Swertz MA, de Brock EO, van Hijum SAFT, de Jong A, Buist G, Baerends RJS,\nKok J, Kuipers OP, Jansen RC: Molecular Genetics Information System\n(MOLGENIS): alternatives in developing local experimental genomics\ndatabases. Bioinformatics 2004, 20:2075-2083.\n10. MOLGENIS: a open source software toolkit to rapidly generate bespoke\nbiosoftware web applications. [http:\/\/www.molgenis.org].\n11. Swertz MA, Velde KJ, Tesson BM, Scheltema RA, Arends D, Vera G, Alberts R,\nDijkstra M, Schofield P, Schughart K, Hancock JM, Smedley D,\nWolstencroft K, Goble C, de Brock EO, Jones AR, Parkinson HE, Jansen RC:\nXGAP: a uniform and extensible data model and software platform for\ngenotype and phenotype experiments. Genome Biol 2010, 11:R27.\n12. Thorisson GA, Lancaster O, Free RC, Hastings RK, Sarmah P, Dash D,\nBrahmachari SK, Brookes AJ: HGVbaseG2P: a central genetic association\ndatabase. Nucleic Acids Res 2009, 37:D797-802.\n13. Leu M, Humphreys K, Surakka I, Rehnberg E, Muilu J, Rosenstrom P,\nAlmgren P, Jaaskelainen J, Lifton RP, Kyvik KO, Kaprio J, Pedersen NL,\nPalotie A, Hall P, Gronberg H, Groop L, Peltonen L, Palmgren J, Ripatti S:\nNordicDB: a Nordic pool and portal for genome-wide control data. Eur J\nHum Genet 2010.\n14. Li Y, Swertz MA, Vera G, Fu J, Breitling R, Jansen RC: designGG: an R-\npackage and web tool for the optimal design of genetical genomics\nexperiments. BMC Bioinformatics 2009, 10:188.\n15. Smedley D, Swertz MA, Wolstencroft K, Proctor G, Zouberakis M, Bard J,\nHancock JM, Schofield P: Solutions for data integration in functional\ngenomics: a critical assessment and case study. Brief Bioinform 2008,\n9:532-544.\n16. Neighbors J: Software construction using components. Irvine: PhD Thesis,\nUniversity of California 1981.\n17. Hunt A, Thomas D: The pragmatic programmer: from Journeyman to\nMaster. Addison-Wesley; 1999.\n18. Bentley J: Little languages. Communications of the ACM 1986, 29:711-721.\n19. van Deursen A, Klint P: Little languages, little maintenance? Journal of\nsoftware maintenance 1998, 10:17.\n20. Greenfield J, Short K, Cook S, Kent S: Software Factories: Assembling\nApplications with Patterns, Models, Frameworks, and Tools. John Wiley &\nSons; 2004.\n21. Brooks F: The Mythical Man Month: Essays on Software Engineering,\n20th anniversary edition. Addison-Wesley; 1995.\n22. Fowler M: Patterns of Enterprise Application Architecture. Addison-\nWesley; 2002.\n23. OntoCAT: ontology common API (application programming interface)\ntoolkit. [http:\/\/ontocat.sourceforge.net].\n24. Smedley D, Haider S, Ballester B, Holland R, London D, Thorisson G,\nKasprzyk A: BioMart\u2013biological queries made easy. BMC Genomics 2009,\n10:22.\n25. Lyne R, Smith R, Rutherford K, Wakeling M, Varley A, Guillier F, Janssens H,\nJi W, McLaren P, North P, Rana D, Riley T, Sullivan J, Watkins X,\nWoodbridge M, Lilley K, Russell S, Ashburner M, Mizuguchi K, Micklem G:\nFlyMine: an integrated database for Drosophila and Anopheles\ngenomics. Genome Biol 2007, 8:R129.\n26. Omixed: customisable storage system for scientific data. [http:\/\/www.\nomixed.org\/].\n27. Jameson D, Garwood K, Garwood C, Booth T, Alper P, Oliver SG, Paton NW:\nData capture in bioinformatics: requirements and experiences with\nPedro. BMC Bioinformatics 2008, 9:183.\n28. AndroMDA: extensible generator framework that adheres to the Model\nDriven Architecture (MDA) paradigm. [http:\/\/www.andromda.org\/].\n29. Ruby on Rails: open source web framework in the Ruby language.\n[http:\/\/www.rubyonrails.org].\n30. O\u2019Connor BD, Day A, Cain S, Arnaiz O, Sperling L, Stein LD: GMODWeb: a\nweb framework for the Generic Model Organism Database. Genome Biol\n2008, 9:R102.\ndoi:10.1186\/1471-2105-11-S12-S12\nCite this article as: Swertz et al.: The MOLGENIS toolkit: rapid\nprototyping of biosoftware at the push of a button. BMC Bioinformatics\n2010 11(Suppl 12):S12.\nSubmit your next manuscript to BioMed Central\nand take full advantage of: \n\u2022 Convenient online submission\n\u2022 Thorough peer review\n\u2022 No space constraints or color figure charges\n\u2022 Immediate publication on acceptance\n\u2022 Inclusion in PubMed, CAS, Scopus and Google Scholar\n\u2022 Research which is freely available for redistribution\nSubmit your manuscript at \nwww.biomedcentral.com\/submit\nSwertz et al. BMC Bioinformatics 2010, 11(Suppl 12):S12\nhttp:\/\/www.biomedcentral.com\/1471-2105\/11\/S12\/S12\nPage 9 of 9\n"}