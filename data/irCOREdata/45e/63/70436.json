{"doi":"10.1023\/A:1016543700801","coreId":"70436","oai":"oai:eprints.lancs.ac.uk:12149","identifiers":["oai:eprints.lancs.ac.uk:12149","10.1023\/A:1016543700801"],"title":"MARE: resource discovery and configuration in ad hoc networks","authors":["Storey, Matthew","Blair, Gordon S.","Friday, Adrian"],"enrichments":{"references":[{"id":16302219,"title":"Agent Tcl: A flexible and secure mobile-agent system,","authors":[],"date":null,"doi":null,"raw":"Robert S. Gray, Agent Tcl: A flexible and secure mobile-agent system, Proceedings of the 1996 Tcl\/Tk Workshop, pages 9-23,","cites":null},{"id":16302218,"title":"An Introduction to the TACOMA Distributed System,","authors":[],"date":"1995","doi":"10.1145\/504450.504461","raw":"Dag Johansen, Robbert van Renesse, and Fred B. Schneider, An Introduction to the TACOMA Distributed System, Department of Computer Science, University of Troms\u00f8, Norway, Technical Report 95-23, 1995","cites":null},{"id":16302210,"title":"An Investigation into the use of the Tuple Space Paradigm in Mobile Computing Environments, Ph.D. Thesis,","authors":[],"date":"1999","doi":null,"raw":"Stephen Wade, An Investigation into the use of the Tuple Space Paradigm in Mobile Computing Environments, Ph.D. Thesis, Lancaster University, 1999.","cites":null},{"id":16302202,"title":"Application-Aware Adaptation for Mobile Computing,","authors":[],"date":"1994","doi":"10.1145\/202453.202464","raw":"M. Satyanarayanan, B. Noble, P. Kumar and M. Price, Application-Aware Adaptation for Mobile Computing, Proceedings of the th ACM SIGOPS European Workshop (Dagstuhl, Germany), 1994","cites":null},{"id":16302208,"title":"Bulk Primitives in Linda Run-Time Systems,","authors":[],"date":"1996","doi":"10.1007\/978-3-662-04401-8_3","raw":"Antony Rowstron, Bulk Primitives in Linda Run-Time Systems, University of York, Thesis, 1996","cites":null},{"id":16302221,"title":"Concordia: An Infrastructure for Collaborating Mobile Agents, Mitsubishi Electric","authors":[],"date":"1997","doi":"10.1007\/3-540-62803-7_26","raw":"David Wong, Noemi Paciorek, Tom Walsh, Joe DiCelie, Mike Young, Bill Peet, Concordia: An Infrastructure for Collaborating Mobile Agents, Mitsubishi Electric ITA, First International Workshop on mobile agents, Berlin Germany, 1997","cites":null},{"id":16302200,"title":"Design and Implementation of a Support Platform for Distributed Mobile Computing,","authors":[],"date":"1995","doi":"10.1088\/0967-1846\/2\/3\/001","raw":"Microsoft Corporation, Distributed Component Object Model Protocol DCOM\/1.0 Specification, Microsoft Developer Network Library Document, http:\/\/msdn.microsoft.com\/[7] A. Schill and S. K\u00fcmmel, Design and Implementation of a Support Platform for Distributed Mobile Computing, Distributed Systems Engineering Journal, 2(3), pp. 128-141, 1995","cites":null},{"id":16302201,"title":"Distributed Systems Support for Adaptive Mobile Applications,","authors":[],"date":"1996","doi":"10.1016\/0140-3664(96)01069-9","raw":"Nigel Davies, Adrian Friday, Gordon Blair and Keith Cheverst, Distributed Systems Support for Adaptive Mobile Applications, ACM Mobile Networks and Applications, Special Issue on Mobile Computing - System Services, Volume 1, Number 4, 1996","cites":null},{"id":16302199,"title":"Emergency Multimedia, Simoco Europe Ltd., the Langdale Ambleside Mountain Rescue Team, and HW Communications Limited, Multimedia Demonstrator Programme funded by the Department of Trade and Industry.","authors":[],"date":null,"doi":null,"raw":"Ed. Candy et al, Emergency Multimedia, Simoco Europe Ltd., the Langdale Ambleside Mountain Rescue Team, and HW Communications Limited, Multimedia Demonstrator Programme funded by the Department of Trade and Industry.","cites":null},{"id":16302212,"title":"Generative Communication in Linda,","authors":[],"date":"1985","doi":"10.1145\/2363.2433","raw":"D. Gelernter, Generative Communication in Linda, ACM Transactions on Programming Languages and Systems, Volume 7, Number 1, pp 255-263, 1985","cites":null},{"id":16302223,"title":"Java-To-Go: Itinerative Computing Using Java,","authors":[],"date":"1996","doi":null,"raw":"Weiyi (William) Li, David G. Messerschmitt, Java-To-Go: Itinerative Computing Using Java, Department of Electrical Engineering and Computer Sciences University of California at Berkeley 1996","cites":null},{"id":16302215,"title":"JavaSpaces Specification,","authors":[],"date":null,"doi":"10.1117\/12.487279","raw":"Jini, JavaSpaces Specification, http:\/\/www.sun.com\/jini\/specs\/","cites":null},{"id":16302226,"title":"Lime: Linda Meets Mobility, G.-C.,","authors":[],"date":"1998","doi":"10.1145\/302405.302659","raw":"Picco, G., Murphy, A., and Roman, Lime: Linda Meets Mobility, G.-C., Technical report no. 98-21, 1998","cites":null},{"id":16302206,"title":"Linda in Context,","authors":[],"date":null,"doi":"10.1145\/63334.63337","raw":"Nicholas Carriero and David Gelernter, Linda in Context, Communications of the ACM, Volume 32 Number 4, pp 444 \u2013 458,","cites":null},{"id":16302214,"title":"Melinda: Linda with Multiple Tuple Spaces,","authors":[],"date":"1990","doi":null,"raw":"Susanne C. Hupfer, Melinda: Linda with Multiple Tuple Spaces, Research Report YaleU\/DCS\/RR-766, February 1990","cites":null},{"id":16302217,"title":"Mole 3.0: A Middleware for Java-Based Mobile Software","authors":[],"date":"1998","doi":"10.1007\/978-1-4471-1283-9_22","raw":", J. Baumann, F. Hohl, K. Rothermel, M. Schwehm, M. Stra\u00dfer, Mole 3.0: A Middleware for Java-Based Mobile Software AgentsMiddleware'98 IFIP International conference on Distributed Systems Platforms and Open Distributed Processing, pp. 355-370, 1998","cites":null},{"id":16302176,"title":"Radio Equipement System (RES) Trans-European Trunked Radio (TETRA); Voice plus Data (V+D), Designer\u2019s Guide,","authors":[],"date":"1995","doi":null,"raw":"Radio Equipement System (RES) Trans-European Trunked Radio (TETRA); Voice plus Data (V+D), Designer\u2019s Guide, ETSI Work Programme DE\/RES \u2013 0601, Subtechnical Committee (STC) RES 06, May 1995","cites":null},{"id":16302225,"title":"Radu Popescu-Zeletin, The Architecture of the Ara Platform for Mobile Agents, (Eds.):","authors":[],"date":"1997","doi":"10.1007\/3-540-62803-7","raw":"H, Peine, T. Stolpmann, In Kurt Rothermel, Radu Popescu-Zeletin, The Architecture of the Ara Platform for Mobile Agents, (Eds.): Proc. of the First International Workshop on Mobile Agents MA'97 (Berlin, Germany), 1997","cites":null},{"id":16302229,"title":"Resource Configuration in Ad Hoc Networks: The MARE Approach, Third","authors":[],"date":"2000","doi":"10.1109\/mcsa.2000.895382","raw":"M. Storey, G. Blair, Resource Configuration in Ad Hoc Networks: The MARE Approach, Third IEEE Workshop on Mobile Computing Systems and Applications (WMCSA), Monterey California, 2000Matthew  Storey graduated from Lancaster University in 1997 and in the same year joined the mobile computing group at Lancaster University. Matthew is currently a research student in the final stages of his PhD. His research is currently concerned with addressing issues of mobility using mobile agents and the tuple space paradigm. He is also interested in wearable, ubiquitous and ad-hoc computing. E-mail: matt@comp.lancs.ac.uk Prof. Gordon Blair is a founding member of the Distributed Multimedia Research Group at Lancaster University. Following the completion of his PhD at Strathclyde University, he moved to Lancaster in 1983. He currently holds a chair in distributed systems at this university, and is also an Adjunct Professor at the University of Troms\u00f8 in Norway. He has published over 180 papers in his field and in on the programme committees of many major international conferences in distributed systems, reflection and  multimedia.  He  is  on  the  steering  committee  of  the  Middleware  series  of conferences,  was  General  Chair  for  this  conference  in  1998,  and  co-organised  a workshop on Reflective Middleware (with Roy Campbell, University of Illinois at Urbana-Champaign) held in conjunction with Middleware'2000. He is also Programme Co-Chair of DOA'01 to be held in Rome in September 2001. He has been primarily responsible for a number of research projects at Lancaster including Sumo, Adapt and Open ORB. E-mail: gordon@comp.lancs.ac.uk Adrian Friday graduated from the University of London in 1991. In 1992 he helped form the mobile computing group at Lancaster University, and has since completed his PhD entitled &quot;Infrastructure Support for Adaptive Mobile Applications&quot;. His early work focused on adaptive distributed systems support for mobile computing applications. In 1998 he was appointed as a Lecturer in the department of Computer Science and is an active member of the Distributed Multimedia Research Group. He is now an investigator in a number of key research initiatives at Lancaster, including the Equator IRC and GUIDE projects. His current research interests include: distributed system support for mobile, context-sensitive and sentient computing environments. Adrian is a member of IEEE Computer Society, the ACM and BCS. E-mail: adrian@comp.lancs.ac.uk","cites":null},{"id":16302204,"title":"Rover: A toolkit for Mobile Information Access,","authors":[],"date":"1995","doi":"10.1145\/224057.224069","raw":"A.D. Joseph, A. F. deLespinasse, J.A. Tauber, D.K. Gifford and M.F. Kaashoek, Rover: A toolkit for Mobile Information Access, Proceedings of the 15 th symposium on Operating Systems Principles (SOSP\u201995), Copper Mountain Resort, Colorado, U.S., pp. 156-171, 1995","cites":null},{"id":16302216,"title":"TSpaces: The Next Wave,","authors":[],"date":"1999","doi":null,"raw":"TSpaces: The Next Wave, Hawaii International Conference on System Sciences (HICSS-32), 1999","cites":null},{"id":16302228,"title":"Universal Plug and Play Device Architecture Reference Specification,","authors":[],"date":"1999","doi":null,"raw":"Universal Plug and Play Device Architecture Reference Specification, Version 0.90 - November 10, 1999","cites":null},{"id":16302198,"title":"WaveLAN, an ISM band wireless LAN,","authors":[],"date":"1993","doi":"10.1002\/j.1538-7305.1993.tb00548.x","raw":"Development of WaveLAN, an ISM band wireless LAN, AT & T Technical Journal, pp. 27-37, July\/August 1993","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2002-10","abstract":"The emergence of personal portable devices, such as PDA's and Mobile phones, with considerable processing and communication capabilities, has led to a desire to use various combinations of these devices together to achieve new and as yet unrealised operations. Not only are mobile devices expected to offer conventional facilities like email and web browsing but also more demanding multimedia applications. Attaining these operations within a fixed network environment with high-power workstations is non-trivial; however, highly dynamic ad hoc environments further complicate this scenario. In particular, a means of discovering available devices and enabling manipulation of them within a highly active environment is required. In this paper we present a novel architecture called MARE that facilitates the detection and manipulation of resources in ad hoc environments","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/70436.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/12149\/1\/MONET.pdf","pdfHashValue":"9f0fa7dc092ef007770377f54edf1b96f2682cd9","publisher":"ACM","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:12149<\/identifier><datestamp>\n      2018-01-24T01:56:58Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        MARE: resource discovery and configuration in ad hoc networks<\/dc:title><dc:creator>\n        Storey, Matthew<\/dc:creator><dc:creator>\n        Blair, Gordon S.<\/dc:creator><dc:creator>\n        Friday, Adrian<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        The emergence of personal portable devices, such as PDA's and Mobile phones, with considerable processing and communication capabilities, has led to a desire to use various combinations of these devices together to achieve new and as yet unrealised operations. Not only are mobile devices expected to offer conventional facilities like email and web browsing but also more demanding multimedia applications. Attaining these operations within a fixed network environment with high-power workstations is non-trivial; however, highly dynamic ad hoc environments further complicate this scenario. In particular, a means of discovering available devices and enabling manipulation of them within a highly active environment is required. In this paper we present a novel architecture called MARE that facilitates the detection and manipulation of resources in ad hoc environments.<\/dc:description><dc:publisher>\n        ACM<\/dc:publisher><dc:date>\n        2002-10<\/dc:date><dc:type>\n        Contribution in Book\/Report\/Proceedings<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/eprints.lancs.ac.uk\/12149\/1\/MONET.pdf<\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1023\/A:1016543700801<\/dc:relation><dc:identifier>\n        Storey, Matthew and Blair, Gordon S. and Friday, Adrian (2002) MARE: resource discovery and configuration in ad hoc networks. In: ACM Mobile Networks & Applications Special Issue on Service, Device and Resource Discovery in Mobile Environments. ACM, pp. 377-388.<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/12149\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1023\/A:1016543700801","http:\/\/eprints.lancs.ac.uk\/12149\/"],"year":2002,"topics":["QA75 Electronic computers. Computer science"],"subject":["Contribution in Book\/Report\/Proceedings","NonPeerReviewed"],"fullText":"Abstract\nThe emergence of personal portable devices, such as PDA\u2019s and Mobile phones, with considerable processing and\ncommunication capabilities, has led to a desire to use various combinations of these devices together to achieve new\nand as yet unrealised operations. Not only are mobile devices expected to offer \u2018conventional\u2019 facilities like email and\nweb browsing but also more demanding multimedia applications. Attaining these operations within a fixed network\nenvironment with high-power workstations is non-trivial; however highly dynamic ad hoc environments further\ncomplicate this scenario. In particular, a means of discovering available devices and enabling manipulation of them\nwithin a highly active environment is required. In this paper we present a novel architecture called MARE that\nfacilitates the detection and manipulation of resources in ad hoc environments.\nKeywords: ad hoc, resource discovery, mobile agents, tuple space\n1 Introduction\nThe emergence and development of technologies such as IrDA, wireless modems, TETRA [1],\nWaveLAN [2] and Bluetooth [3] is leading to a much wider acceptance and use of wireless\nnetworking technologies. In particular, the promise of Bluetooth to provide small form-factor, low-\npower communications has led to an increased interest in devices equipped with wireless\ncommunications facilities. Using such technology, devices can exchange information and share\nresources forming an active environment where not only physical structure but also resource\navailability can change.\nIn the near future it is also foreseeable that most computer peripherals will be wireless, utilising\nshort-range communications technologies; the necessity to connect keyboards, mice, printers,\ncameras, etc., physically to static desktop computers is disappearing. In addition it is foreseeable\nthat many devices that currently are not \u2018smart\u2019 will soon incorporate microprocessors with\ncommunications facilities. Such devices may include refrigerators and cupboards that can monitor\nMARE: Resource Discovery and Configuration in Ad Hoc Networks\nResource Configuration in Ad Hoc Networks\nThe MARE Approach\nMatt Storey, Gordon Blair and Adrian Friday\nDepartment of Computing\nLancaster University\nLancaster\nU.K.\nTelephone +44 (0)1524 594532\nFax +44 (0)1524 593608\nE-mail: {storeym, gordon, adrian}@comp.lancs.ac.uk\nE-mail: {storeym, gordon}@c mp.lancs.ac.uk\nE-mail: {storeym, gordon}@comp.lancs.ac.uk\nE-mail: {storeym, gordon}@comp.lancs.ac.uk\nE-mail: {storeym, gordon}@comp.lancs.ac.uk\nE-mail: {storeym, gordon}@comp.lancs.ac.uk\nE-mail: {storeym, gordon}@comp.lancs.ac.uk\nE-mail: {storeym, gordon}@comp.lancs.ac.uk\nlevels of household supplies or vehicles that monitor and report their own performance (already a\nreality in some high-end automobiles). The potential explosion in numbers of devices will require\ncareful consideration of how interaction between them is to take place, such that these devices may\ninteract to achieve a common task - triggering a kettle located in the kitchen to respond to a wake-\nup signal from an alarm clock in the bedroom, for example.\nThis paper presents our work in developing a system to support distributed operations in a highly\nactive ad hoc communication capable environment. Such environments are characterised by a\nhighly dynamic ad hoc grouping of devices, changed by the unpredictable availability of\ncomputational devices as they arrive and depart from the grouping. Our architecture facilitates such\noperations by providing efficient mechanisms for the discovery and configuration of resources.\nThe remainder of this paper is structured as follows. Section 2 presents an illustrative scenario\nbased on a \u201cMountain Rescue\u201d, in which Emergency Service units converge to form an ad hoc\ngrouping of resources, enhanced by our platform technology. From this scenario a set of\nrequirements are formed before presenting an examination of existing discovery mechanisms in\nsection 3. Alternative approaches are discussed outlining the MARE approach in section 4. MARE\nis then examined in depth in section 5 before presenting an example of MARE in action in section\n6. Section 7 provides an analysis of the mare approach to other related systems before offering\nconcluding remarks in section 8.\n2 A closer examination of mobile environments\n2.1 Example: A mountain rescue\nThe scenario presented in this section is based on our work in developing an experimental\napplication based on a scenario of a mountain rescue. This work is part of an ongoing initiative\ninvestigating mobile support for mountain rescues in the Langdales mountain range, in the Lake\nDistrict [4]. This is an excellent test case for ad hoc networking in general, as will become clear\nbelow.\nA typical mountain rescue will start with a report of an injured climber to the Mountain Rescue\nService. The rescue service coordinate each rescue from their headquarters at the mountain rescue\nbase, which is wirelessly linked to the away team using TETRA digital private mobile radio\nequipment. Information and advice is relayed to the rescuers who proceed to search for the stricken\nclimber. As the rescue workers converge upon the climber the base can be kept informed of\nprogress through the TETRA handsets.\nUpon arrival at the scene, first aid can be administered before a call for an airlift or drafting in\nmore medically qualified personnel. Typical equipment carried by rescuers will include medical\nkits, cameras and GPS compasses to pinpoint their location. As some of the equipment is heavy\nand bulky different people carry it helping to distribute the weight. Team members will have\ndifferent roles dictated by training, experience and the equipment they carry. For instance, fell\nrunners are sent on ahead with lighter equipment to administer first aid, whereas team members\nwith the heavier equipment arrive later on the scene once the climber has been located. As more\nrescuers converge at a rescue site more equipment becomes available making the rescue easier and\nquicker.\nFigure 1 Map showing a rescue in progress with rescuers equipment\nAs a rescue will typically start from several locations, as depicted in figure 1, the ability to detect\nthe presence of other rescuers and the devices they carry will enable the creation of a working\ngroup of resources. With the introduction of wireless communication facilities, an individual\nrescuer can detect and manipulate another\u2019s resources without physical contact, thus saving time\nand simplifying the equipment usage.\n \n1 \n2 \n3 \n1 Rescuer \nInjured \nPDA \nCamera \nCamera \nWearable \nGPS TETRA \nHandset \nWearable \nGPS \nTETRA \nMedical kit \nMedical kit \nPDA \nAdvertised resources shown in italics \n2.2 Experimental System\nIn the experiment the equipment carried by the mountain rescuer consists of a small pack\ncontaining a small wearable computer that acts as a hub, connecting a PDA, a TETRA handset and\na number of ancillary devices. These devices may include digital cameras and medical monitoring\nequipment (e.g. a Propaq unit that is capable of measuring heart rate, blood pressure and oxygen\ncontent). As mentioned previously the physically demanding nature of trekking long distances and\nclimbing it is not possible to carry more than a few devices at any given time. Hence devices are\nshared between rescuers to distribute the weight. The small wearable computer is designed to\nremain running using a minimal amount of power whilst the PDA is turned on and off as desired to\npreserve power. Other devices are connected as required. It is possible to see the variety of\ncombinations that may occur by different hardware devices being available at any given time. An\nexample of rescuers equipment can be seen in figure 1.\nApplying a wireless communications technology to facilitate communication between devices\nrather than a physical connection opens up the opportunity to let individual devices interact and\nform ad hoc collaborations with one another without external interaction. Furthermore, such\ntechnologies also allow the possibility of other resources not necessarily physically seen in the\nenvironment to be used, for instance, resources carried by the climber being rescued. A rescuer will\nget notification of these resources and may manipulate them to aid in the rescue.\nThe current Bluetooth API does not readily lend itself to ad hoc networking, although the\ncontinued evolution of Bluetooth and its integration into next-generation mobile end-systems will\npresumably make Bluetooth the technology of choice for later experimentation. In our prototype\nsystem we have used readily available Orinoco 802.11b wireless networking equipment. The\nOrinoco equipment provides a much larger range and higher bandwidth, although it is clearly\nphysically larger and requires more power than Bluetooth.\n2.3 Scenario Analysis\nWhen attempting to carry out a task it is important to have a consistent view of the resources\navailable in order to calculate the best place for an operation to take place. Using a fixed\nenvironment such as a wired LAN the resources available such as printers and file stores are\nrelatively static and can be assumed to be available for long periods of time. As environments\nbecome more changeable, such as through the introduction of wireless LANs, the availability of\nany given resource becomes harder to guarantee. More specifically, the resources offered by \ndevice disappear as it is moved out of range or communications fail. Equally devices or new\nresources may arrive or be created at any time.\nAs outlined in the introduction, in such networks where it is anticipated that many resources have\nwireless communication facilities, the formation of ad hoc networks can be anticipated. Such ad\nhoc networks can be viewed as groupings of hosts wishing to interact with one another. Traditional\nnetworked applications tend to assume the availability of servers for specific tasks, such as\nresolving hostnames to IP addresses (DNS lookups). This same approach is clearly not viable in an\nactive environment, since the availability of a particular host\u2019s services and resources can no longer\nbe guaranteed.\nThe ad hoc wireless communications infrastructures underpinning active environments also suffer\nfrom the limitations of mobile networks - namely, intermittent connectivity, increased error rates,\nreduced bandwidth and an increase in traffic latency. Reducing the load that is placed on the\ncommunication infrastructure is thus of paramount importance; a means of discovery of resources\nutilising the minimum of communication overhead is sought along with suggested operations that\ncan preserve network bandwidth.\nViewing a mobile device as being a PDA or wearable computer brings in other important\nconsiderations. These devices are typically resource poor when compared with desktop machines.\nFor instance, such devices will typically have limited battery life and less powerful processors,\nsmaller storage capacities and display facilities. The ability for such devices to share their\nresources can aid in making these differences less obvious by opportunistically utilising the\nresources in the surrounding network to maximum potential.\nIn summary, a platform is required that addresses the following requirements:\n\u2022 Consistent view of the resources within an ad hoc environment\n\u2022 No reliance upon the availability of a single host for networked services\n\u2022 Minimise traffic on the network due to resource discovery\n\u2022 Aid efficient use of resources \u2013 device \/ processing power, storage, screen size\nIn the next section we consider existing approaches for the discovery of services examining their\nsuitability for operation in ad hoc networks.\n3 Existing Service Discovery Protocols\n3.1 Service Location Protocol\nSLP is a protocol designed to aid the discovery of resources on a network. SLP [5] assigns a user\nagent to each client to act on its behalf. This agent then interacts with a directory agent that\ncontains lists of service agents to gain interaction with a service. If the directory agent is\nunavailable, the user agent can multicast to the service specific multicast address to gain a response\nfrom a service. Services have a lifetime such that a directory agent can remove the service from its\nlisting upon its expiry.\nWithin an active environment the user agent will issue requests to the service specific multicast\naddress. A request for a specific service can lead to all services responding to the request (leading\nto acknowledgement implosion). Each type of service subscribes to a separate multicast port. This\napproach requires a potentially large number of multicast ports as many service types become\navailable. If a general port was used for a query request and response, then clients requiring\ncommon services could reduce network traffic by snooping the response generated to a given.\n3.2 Universal Plug and Play\nUPnP [6] is a Microsoft technology built upon plug and play technology found in windows 9x\nfamily of operating systems. The principle is extended to encompass services as well as devices.\nUpnP is aimed at zero configuration of attached services or peripherals.\nUpnP consists of a suite of sub-protocols for service discovery, interaction and event notification.\nSimple Service Discovery Protocol (SSDP) [7] is used for the discovery of resources. A service\nannounces its presence upon creation and clients can request (search) for services when required.\nBoth of these operations are carried out using IP multicast. The response to a client\u2019s multicast\nsearch is sent by unicast back to the client from all services of the correct type. A service can also\nmulticast a state change or the removal of the service from a system.\nApplying this approach to a highly active environment, the transmission of information from a\nservice will only be carried out once, typically upon instantiation of a service. The instantiation of a\nservice is likely to take place in isolation such that no clients hear the announcement (the\nnotification event will be lost). Within an active environment every time a user wants to get an up\nto date view of the surrounding resources it will have to multicast a request for a service it wants.\nThis will generate a large amount of requests to be answered singularly by each service.\nFurthermore a user may not know what services interest the user and therefore may not know about\nnew resources of potential interest that are available.\n3.3 Jini\nJini from Sun Microsystems [8] provides a system for a client to locate services. For example a\nclient may join a Jini lookup service and request information about a printer. Jini makes a key\nassumption about the environment it is operating within, i.e. it assumes a low latency network. Jini\nuses a server structure to hold and disperse information about services. Jini can also have more\nthan one server to advertise services working together as a single service. If a client cannot find a\nlookup service it can resort to talking to service providers directly.\nClearly the active environment will not currently offer a low latency network as assumed by Jini.\nRunning a copy of Jini on each device wishing to participate in a grouping makes the system\ndistributed. However Jini is a larger system than some devices can currently execute. The size and\ncomplexity of Jini, although useful in larger systems, can currently be seen as a restriction upon\nsmaller devices. Furthermore, the fluctuating availability of lookup services would require frequent\nswitching from client to server based service location.\n3.4 Analysis\nThe previously examined approaches to service discovery are not specifically targeted at ad hoc\nnetworks offering less than optimal solutions for such an environment. Further analysis of these\napproaches is undertaken in section 7. The following section examines novel approaches to\ndiscovery and configuration drawing a list of core requirements of such a system for operation\nwithin ad hoc networks.\n4 Alternative Approaches\n4.1 Mobile Distributed Systems Platforms\nIt is well known that existing distributed systems platforms such as CORBA [9] and DCOM [10]\ndo not offer communication semantics that are well suited to mobile environments. A number of\nresearchers have attempted to improve such platforms, generally by introducing an element of\nasynchronicity into the designs of the underlying communications mechanisms (e.g. delayed or\nqueued RPC mechanisms). Examples of such platforms include Mobile DCE [11], MOST [12],\nOdyssey [13] and the Rover toolkit [14]. Such platforms however only partially address the\nrequirements discussed above, in effect, only really dealing with problems relating directly to weak\nconnection or disconnection to the network.\nA more radical attempt to providing support for mobility is through the provision of a different,\nnon-remote procedure call based, programming abstraction centred on the concept of a shared tuple\nspace [15]. The tuple space paradigm provides an asynchronous programming API, offering\nundirected, anonymous and, time and space decoupled communication. We consider the benefits of\nthis approach in more detail in the following section.\nResearchers have also postulated that the problems introduced by mobility can be addressed by\nutilising agent technology to allow computation to be moved to the (resource-rich) fixed portion of\nthe network. Again, agent technology can help to address these problems, but does not offer a\ncomplete solution. We consider this approach in more detail in section 4.3.\n4.2 Tuple Spaces\nA tuple space can be thought of as a pool of shared information (akin to a distributed shared\nmemory architecture). This pool can have information added, read or removed from it atomically.\nTuple spaces were developed initially to address the issues of process and data distribution in\nmassively parallel computer architectures [15]. As the paradigm has been adapted for more uses\nincluding aiding work in a mobile environment, it has acquired more functionality and\nspecialisation [16][17]. Since communication between processes is only achieved through the\ngeneration of typed data structures (called tuples) that are inserted and removed from the tuple\nspace, communication is mediated, leading to properties of anonymity and time and space\ndecoupling between processes. More specifically, processes do not need to be able to communicate\ndirectly to be able to exchange data, providing they have access to the shared space. Moreover,\nsince tuples exist persistently within the tuple space, beyond the lifetime of the processes that\ncreated them; processes do not need to co-exist simultaneously at the same instant in time in order\nto exchange data. It is these properties that have inspired researchers to apply the tuple space\nparadigm to mobile environments [17].\nData is exchanged in the shared tuple space generatively [18] through the generation and\nrevocation of the tuples themselves. The tuple consists of an arbitrary sequence of typed data\nfields; each field may be either actual or formal (all fields are typed, but actuals have a specific\nvalue, whereas formals act as pattern matching parameters). Tuples are of two basic forms, tuples\nand anti-tuples; anti-tuples match a tuple with corresponding formal and actual parameters\n(assigning instance values to the corresponding formal parameters, as appropriate). The base set of\noperations upon a tuple space consist of in, out, rd and eval. These operations are used for\nacquiring, adding, reading and evaluating a tuple placed into the tuple space respectfully (eval is\ndistinct from the other operations in that it can take \u2018active\u2019 tuples containing code for execution;\nthe active tuple is evaluated in the tuple space, resulting in the generation of a passive tuple\ncontaining the results of the active calculation). Many extensions have been added including\nsupport for multiple tuple spaces [20] and bulk transfer primitives [16] where more than one tuple\nat a time can be read or withdrawn from a tuple space (addressing the multiple-rd problem).\nSeveral platforms are available that implement the tuple space paradigm for example JavaSpaces,\nT-Spaces and L2imbo.\n\u2022 JavaSpaces is the Sun Microsystems tuple space implementation built using Jini [8] (see\nsection 3.3). JavaSpaces has all the features of Jini as it is developed using the Jini system.\n\u2022 A T-Space [19] is an implementation of a tuple space offered by IBM. It incorporates\nfeatures from the database community to provide a data management layer with a richer set\nof tuple matching operations. Such techniques include matching by tuple field name or data\ncontained therein to gain a list of tuples not necessarily of the same structure. In the current\nversion, T-Spaces uses centralised servers making it unsuitable for working in an active\nenvironment.\n\u2022 The L2imbo platform [21] developed at Lancaster University is a fully decentralised tuple\nspace implementation specialised for mobile environments. It offers unique withdrawal of a\ntuple, multiple specialised tuple spaces (including a local space for the sharing of\ninformation on the same host and callbacks on resource arrival and departure). The L2imbo\nAPI offers may of the facilities provided by other tuple space implementations, such as the\nbase Linda primitives, non-blocking Linda operations, bulk primitives, multiple tuple\nspaces and callbacks. An L2imbo tuple space can also be used to monitor and control the\naction taken on tuples by utilising bridging of tuples in and out of tuple spaces and the eval\noperation providing a means of code execution within a tuple space to manipulate its\ncontents. Such an operation can be utilised to control forwarding of agents through a bridge\nby buffering or transforming tuples.\n4.3 Mobile Agents\nA mobile agent can be seen as a piece of code and state information that is capable of movement to\na host and execution at that host. The agent may travel to more than one host in order to complete\nits task. Mobile agents are commonly used for completing tasks near to the source of data to save\nlarge data transfers through a network. An example of this can be seen in searching a sizeable data\nsource, where it is clearly preferable to do data centric operations as close (in network terms) to the\ndata as possible to avoid unnecessary network utilisation. There has been a substantial quantity of\nwork into the use of agents for use in mobile environments [22] [23] [24] [25]. These systems use\nagents written in portable code (typically Java and Tcl) to execute the agents on heterogeneous host\nplatforms. For larger tasks, more than one agent may be used collaboratively, leading to a\nrequirement for the agents to be able to communicate with one another.\nConsidering the characteristics of an ad hoc network there are several architectures to aid agent\nexecution. Approaches requiring a central server for the downloading of additional components for\nexecution of an agent are unsuitable due to the fluctuating availability of a host. Such approaches\ninclude Java-To-Go [26], Agent Tcl [24] and Mole [22] where pieces required by an agent are\ndownloaded upon execution from a central server. Fallback strategies, such as downloading classes\nfrom the source of the agent can be imposed, but this suffers from the possibility of the named\nsource host becoming unavailable. Reliance on a single host as a meeting point for communication\ncan be seen in TACOMA [23] and ARA [27]. Concordia [25] relies upon an itinerary that directs\nthe agent to the next point of execution, as the availability of a host cannot be guaranteed, the agent\nmay be stuck awaiting the transport to an unavailable host when another host could execute the\nagent instead.\nInter-agent communication may also be required. The option offered by Mole is a unique identifier\nin the form of a badge that allows the wearer to receive messages directed at that badge id.\nConcordia and Aglets [28] make use of proxies for the buffering of communication, to aid\ncommunication error recovery although this requires the execution of the proxy on a host causing\nreliance.\nLIME [29] is an architecture that is based upon the use of Linda [15]; it does not suffer from\ndirected communication weaknesses through the use of a tuple space. However with the\nintroduction of directed semantics into the Linda API means that an operation where data is shared\nbetween multiple hosts becomes difficult (negating many of the stated benefits of the tuple space\napproach). An agent being directed to another tuple space will carry all the valid information\ndirected at that agent or as yet undelivered information from it when it moves. The carrying of\ninformation will generate large agents potentially holding key information required by other\nagents. The alternative is to share the data and move a smaller agent, allowing work to continue\nwith the associated data by other agents.\n4.4 Analysis\nBy applying both mobile agents and the tuple space paradigm together, we believe the resulting\nplatform offers several key features towards attaining the requirements already stated in section 2.\n\u2022 The ability to distribute resource information to all listening hosts allowing acquisition of\ninformation about known resources upon a request.\n\u2022 Avoidance of reliance upon any single host when carrying out operations such as moving an\nagent. For example the movement of key components with an agent such as code modules\nremoves the need for a code server. Agents communicating can use the distributed tuple\nspace to gain anonymous communications such that one agent can communicate with\nanother despite its movement between hosts.\n\u2022 The use of a tuple space allowing for less traffic caused by query requests and responses. It\ncan be anticipated that with a users demand for a consistent view of a changing environment\nthey will make update requests regularly. Hosts will already have information about the\nlocal environment contained within the tuple space so the request will not need to propagate\nbeyond the local host.\n\u2022 Distributing agents so that each node can decide whether to execute the agent rather than\nhaving the agent thrust upon it. This enables a weak host to refuse the agent to let a more\ncapable host execute it.\nThese benefits will offer developers of applications for small low power devices operating in active\nenvironments the potential to utilise more resources such as processing power, communications\nand storage located in the surrounding environment.\nWe thus present an architecture that advocates the use of agent technology, supplemented by a\ncommunications model based on the tuple space paradigm [15]. It is our belief that this\ncombination includes the appropriate properties to address the challenges of our active mobile\nenvironment. The MARE approach utilises the L2imbo fully distributed tuple space\nimplementation, however an agent system has been developed to address the weaknesses\nhighlighted previously in existing approaches, we describe our approach in detail in section 5.\n5 Mobile Agent Runtime Environment\n5.1 Overview\nThe MARE system is aimed at supporting operations within a mobile ad hoc environment, as\nmentioned previously exploits both agent technology and tuple spaces. More specifically, MARE\nuses agents to reduce bandwidth requirements by moving operations to the source or point of the\noperation required rather than transmitting information across a network. This approach also allows\nfor the coordinated manipulation of several resources to best carry out an operation, for example,\nusing a data source to gain raw information and a high powered node to process this information\ninto a more meaningful format before returning it to a user. The tuple space then provides time and\nspace decoupling allowing anonymous communication within a network. The removal of host\ntargeted communication allows an agent to roam freely and still gain messages targeted for it by\nlistening for messages of interest to the agent. Using a distributed tuple space implementation\nremoves the reliance upon a central host that as stated earlier is highly desirable in an ad hoc\nenvironment. Essentially, MARE uses tuple spaces to provide a communication medium for\ntransmitting resource information, messages and agents.\nThe MARE architecture also offers the concept of a resource. A MARE resource can be deemed as\nany advertised service that could be interacted with, such as the a physical device (e.g. a camera) or\nthe data held in a file store. The advertisement and interaction with resources will be covered in\nmore depth in section 5.3.\n5.2 System Architecture\nThe overall MARE architecture is shown in figure 2 with the system being implemented in Java.\nWe look at each component in turn.\nFigure 2 The Mare Architecture\n\u2022 The tuple space is used for passing configuration data within the system containing\nresource descriptions, agents and messages. Directed bulk communications such as a\nmultimedia streams are passed between agents out-of-band (tuple spaces have been shown\nto be inappropriate for such applications [17]). Multiple threads can access the tuple space\nstub on a machine at any time.\n\u2022 In MARE, resources and agents are handled by dedicated manager components. Resource\nmanagers receive and transmit information regarding resources, both to the agents that run\nupon the MARE instance and to other resource managers. More specifically, the manager\ntransmits a beacon from the MARE instance periodically. This beacon contains all the\nresources residing upon the MARE instance. If more than one resource is present on the\nMARE instance, the resource definitions are grouped into a bundle to reduce the number of\nnetwork connections and bandwidth required to advertise the resources.\n\u2022 The agent manager constantly listens for agents entering the tuple space. Upon the\ndetection of an agent, its requirements are checked against the constraints of the MARE\ninstance. If the agent requirements are acceptable, the manager acquires it and passes it to\nthe execution environment. The agent manager can be set to not receive agents when\ncarrying out insertion of resources, agents or shutting down. The agent manager also handles\nthe forwarding of agent messages between instances of the execution environment.\n \nTuple Space \nMARE Control \nCommunications \nAgent Manager Resource Manager \nAgent Agent \nAgent Wrapper \n\u2022 Acting as an interface between the MARE control above and the communication managers\nbelow is the communication layer. This is specifically aimed at allowing different\ncommunications architectures to be used or integrated beside the tuple space communication\nmanagers. Agents and resources are passed through this layer for dispersal through the\ncontrol layer.\n\u2022 The MARE control layer examines agent requirements including the resources that the\ninstance of MARE has, evaluating if an agent can be executed. The control layer also\ndelivers messages to the correct agents executing in the MARE instance. The control of the\nmigration of agents is carried out at this point in the case of an event such as a system\nshutdown.\n\u2022 The agent wrapper is used to control the agents\u2019 operations and act as an interface to the\nMARE control. An instance of this wrapper is passed to the agent upon being executed. This\nwrapper controls registering for receipt of messages such that more than one agent can\nreceive the same message by addressing it to a shared identifier.\n\u2022 An agent implements a set of methods to allow the restarting and movement of the agent. In\naddition, the agent implements the Java serialize interface to allow the agent to be moved.\nAllowing agents to have access to system libraries provides the agent programmer with\nfreedom as to the operations of the agent restricted by the agent\u2019s permissions.  Agents may\nbe grouped to carry out operations such as the filtering of acquired information and then the\ntransformation of the acquired information into a format better understood by a consuming\napplication or agent. In addition this information can be cached at appropriate points within\na network. Agents can migrate to valid hosts as they seek resources or are on a host\nincapable of supporting their needs such as in the event of a host being shut down.\nEvery host wishing to participate in the environment executes a copy of MARE. The instance may\nbe specified as accepting or deaf to incoming agents. Resources are detected through advertisement\nby the MARE instance the resource resides upon.\n5.3 Implementation Details\n5.3.1 Overview\nAs previously mentioned, MARE is implemented in Java providing a portable byte code supported\nby many platforms. Java offers the ability to dynamically insert classes into a class structure aiding\nfor maintenance and development of new applications. L2imbo interaction is currently done\nthrough a Java API interacting with an ANSI C stub. Although MARE is implemented in Java, a\nresource or agent may be implemented in a separate language providing the target host can execute\nthe agent; in this case a Java proxy can be used to control interaction. An agent may be formed of\nmultiple Java classes or modules that are transported with the agent to reduce reliance upon a\nspecific host for the retrieval of sub-components. With the development of Java for embedded,\npersonal and smartcard systems, Java is becoming available to small footprint end-systems such as\nPDA\u2019s and mobile phones albeit currently with reduced functionality.\nEach agent or resource is given a unique identifier to distinguish them and address them\nindividually. Unique identifiers can be attained from the system allowing the assignment of more\nthan one unique identifier to each agent. This enables a group to communicate by addressing data\nto a shared identifier.\nThe MARE system can request and, if required, force an agent to migrate. The MARE instance is\nthus able to remove undesirable or broken agents. \n5.3.2 Resources\nResources can be generated using a call to the MARE instance or from an executing agent, the\nresource is then advertised using the underlying tuple space. Each resource is described as a set of\npredefined and user-defined key-value pairs. A resource is advertised using the instance of MARE\nin the format shown in figure 3.\nThe descriptor is a series of key-value pairs; the keys are separated by a semicolon and passed as a\nstring.\nDescriptor -> Pair | Pair;Descriptor\nPair -> Key = value\nKey -> DESCRIPTION | TYPE | IP | PORT | user-defined\nFigure 3 Resource structure\nDescriptorUID\nResource\nIf more than one resource resides upon any instance of MARE the resources are gathered together\nto form a resource bundle. The aim of bundling the resources together is to reduce the number of\nseparate network transmissions and bandwidth required to advertise the resources. Upon the\ntransmission of a resource or resource bundle the previous tuple describing the resource is\nremoved, maintaining consistency within the tuple space and ensuring data is available at all times\nfor listening hosts  (unlike the transient service announcements in service discovery protocols such\nas SSDP [7], the resource descriptor remains persistently within the tuple space until the next\nrefresh interval \u2013 hosts are thus able to discover resources immediately upon joining the network\nwithout having to wait for the next round of advertisements).\nEach resource in the resource manager has an associated lease time based on time of arrival of a\nresource. The lease time is set to be slightly longer than the expected next beacon of information.\nThis allows for the beacon to refresh the timer. If a beacon is not received during this period the\nresource will timeout and be removed from the active list passing a notification to agents running\nin the MARE instance. The resource manager then notifies the MARE control of the change in\nresource availability and this will in turn alert interested agents.\nA resource is deemed to be potentially available when notification is received from MARE.\nUltimately a programmer must allow for a resource being reported as present by the system and\nbeing unavailable at the time of use. Such availability issues are due to the nature of the changing\nactive environment; a system cannot guarantee the availability of a resource within such an\nenvironment without keeping an open channel to the resource and getting immediate notification of\ncommunication failure. This would consume valuable resources, which is clearly undesirable.\n5.3.3 Agents\nAgents inherit from a Java class that defines key methods (see appendix A). Agents are placed\nwithin the tuple space and every instance of MARE attempts to acquire the agent. The agent\nruntime assesses its ability to execute the agent by the list of requirements carried by the agent. If\nthe agent is appropriate the host will attempt to acquire the agent. Once an agent is accepted, it is\nregistered with the system so as to allow for the receipt of directed information as defined by its\nunique identifiers. The agent may also register for a call-back upon the arrival or departure of\nresources or QoS changes.\nAgent tuples consist of a UID and a resources required string with a serialised agent containing a\nJava instance and classes required for the instantiation of the class as shown in figure 4.\nThe agent\u2019s resource dependencies are expressed as a set of UIDs corresponding to the resources or\nagents it requires. This field may also be left blank if the agent does not require any specific\nresources.\nCommunication tuples consist of UID and data fields, the UID identifies the recipient or recipients\nthe message is directed at as shown in figure 5.\nThe following example is of a small agent that prints out its status on the host it is running on.\nimport MARE.*;\nclass CollectionAgent implements MARE.Agent, java.io.Serializable {\n  private AgentRuntime  agentEnvironment = null;\n  public void agentEnvironment(AgentRuntime agentRuntime) {\n   agentEnvironment = agentRuntime;\n  }\n  public void close() {\n    System.err.println(\u201cRequest to go\u201d);\n  }\n  public void receive(String destination, byte data[]) {\n    System.err.println(\u201cdata arrived\u201d);\n  }\n  public void run() {\n    System.err.println(\u201cI have arrived\u201d);\n  }\n}\nThe design of the message format of MARE allows a dynamic approach to resource description,\ndata and unique identity of resources and agents.\nFigure 4 Agent Format\nDataUID\nMessage\nFigure 5 Message Format\nAgent\nJava ClassesAgent Instance\nResourcesUID Serialized Agent\n6 Mare in action\nIn this section we revisit the scenario from section 2.1, highlighting the contribution of MARE.\nThe discovery and use of agents can be demonstrated by considering the convergence of rescuers\non a given point as shown in figure 1. As the first rescuer arrives at the scene, they may only have\nlimited equipment. As stated earlier, such equipment may consist of a small wearable computer\nwith PDA, communications facilities for short range using a wireless technology such as Bluetooth\nand a TETRA handset for low bandwidth long distance communication. As other rescuers come\ninto range of the first rescuer the collection agent of the first rescuer will detect the arrival of new\nresources. Notification will then be provided to the first rescuer with information about the\nresources that are now available. Without cabling, the first rescuer can make use of resources\ncarried by the second rescuer such as a head mounted video camera to examine the area further.\nFurther agents may be used to transform or filter the data into a more suitable representation for\nexample video with audio to just audio. Through the course of the rescue, as rescuers arrive and\ndepart, they will implicitly offer a dynamic set of facilities to the other rescuers. Furthermore, as\nthey change location, resources embedded in their environment will become available. For\nexample, it is advantageous for the rescuers to make use of a stationary-wired communication\npoint, the high power transmitter in the rescue vehicle or a positional marker. It is also possible to\ncommunicate the current status of the rescuers or injured climbers at this point. For this use an\nagent would be dispatched that can place itself upon a fixed point or travel towards a base\ntransmitting information on behalf of the generator for example images, medical information or\nexpected arrival time at hospital.\nFigure 6 Agent views\nExamining the software used in more detail in the previously outlined scenario shows the use of\nagents and the discovery of resources. Each rescuer creates a collection agent on their PDA to\ncollect tailored information for the user about available resources (see figure 6). The agent can be\ntuned with preference to use specific resources to reduce resource discovery traffic transmitted to\nthe PDA. The collection agent will act as the rescuer \u2018view\u2019 on the available resources. When the\nPDA powers down, the agent will be migrated to a host with available resources, typically to the\nnearest host. If the agent migrates too far, the agent is assumed to be lost and times out and a new\ninstance of the agent is generated from the persistent copy in the tuple space.\n7 Analysis of approach\nTo gain an impression of the viability of the MARE approach, we compare our architecture\u2019s\nperformance against key service discovery technologies. In more detail, we have examined SSDP,\nthe resource discovery mechanism of UPnP and SLP, compared them against the discovery\nmechanism employed in MARE when operating within an ad hoc environment. We examine the\nnumber of messages passed between hosts whilst performing a discovery of surrounding services.\n7.1 Test Scenario\nFour hosts, each providing a service relating to a physical device (e.g. a digital image capturing\nservice relating to a digital camera), will each be advertising and trying to acquire a consistent view\nof services surrounding them. We take the straightforward case in this scenario, in which all four\nhosts are powered on simultaneously and require a complete image of surrounding resources.\nThis example demonstrates a worst-case scenario where all resources need to be discovered.\nHowever, this scenario illustrates a similar case where a host moves into an existing ad hoc\ngrouping and requesting an update of all available resources.\nA summary of the results can be seen in figure 7 below highlighting a need for consideration of the\nnumber of discovery messages transmitted in an ad hoc environment. This figure is derived from\nexamination of the currently released specifications in detail of the previously discussed platforms\n[5] [7] [30].\n7.2 Analysis of Discovery\n\u2022 An SSDP query in an ad hoc grouping will provide three multicast requests, each responded\nto by three unicast responses consisting of three root device advertisements, two embedded\ndevice advertisements (for the camera) and one service advertisement. Relating to the test\nscenario, a single host requesting a view of all services held by its surrounding three\nneighbours will generate fifty seven messages. Thus, for all hosts to achieve a consistent\nview of the services offered by its neighbours, a total of 228 messages are needed.\n\u2022 Providing a much simpler approach than SSDP, SLP can be assumed to not have the\navailability of points of directory agents in an ad hoc grouping requiring all hosts to perform\na multicast discovery followed by a unicast response from every host. This approach\ngenerates an RPC style interaction whereby each host multicasts a request for services and\nall other hosts respond with a unicast response. This approach generates one request and one\nresponse from each host requiring 4 messages for each host and a total of 16 messages for\nall four hosts to gain a view of each other\u2019s services.\n\u2022 Jini describes a mechanism for operation without a lookup service that is unlikely to be\nfound in an ad hoc grouping due to its operational requirements being in excess of many\nmobile devices. Making a comparison could be done when forcing each host to act as if it\nwere a lookup service performing peer lookup forcing direct interaction between client and\nserver. This approach is mentioned in the Jini specification in limited amount of detail\nmaking an educated calculation of figures currently infeasible.\nDiscovery of Four Hosts\n228\n16\n4\n0\n50\n100\n150\n200\n250\nSSDP SLP MARE\nD i s cove r y  P r o t o co l\nFigure 7 Messgaes produced while achieving a consistent\nview (4 hosts, 1 service per host)\n\u2022 MARE adopts a much simpler approach using periodic announcements of services thus\ngenerating only four messages transmitted through a tuple space. Multiple services on a host\nare combined into a single message containing multiple service descriptions reducing the\nnumber of transmitted messages, message size permitting. The L2imbo tuple space also acts\nas a cache whereby local requests can be satisfied locally saving external communications.\nWhilst these figures only examine start up costs, the possibility of frequent power cycles being\nperformed by mobile hosts is likely and the ability to know about new resources that may not fall\ninto specific type groups that are used to restrict discovery.\nClearly service discovery protocols can be optimised to improve service discovery performance\n(e.g. SLP can use a directory agent). However in ad hoc environments such techniques typically\nlead to increased startup costs for example when a system must detect the absence of central\nresources. UPnP supports announcement messages from services however to be effective these\nmessages must be transmitted frequently forming an approach similar to the approach taken by\nMARE without message combining.\nThe number of messages produced in a running system can be seen as related to the number of\nhosts in the surrounding environment. Assuming each host requires a view of surrounding\nresources at all times, MARE and UPnP will generate announcements for all services; MARE\ncombines announcements from the same machine whilst UPnP will produce one per service also\nproducing larger numbers of messages upon receipt of a request for services, whilst SLP relies on\nrequests and responses.\nFrom the performance figures taken thus far, we can see that MARE offers a highly effective and\nbandwidth efficient resource discovery mechanism, at least comparable with existing service\ndiscovery approaches. In addition MARE offers functionality beyond that of service discovery\ncovered in this section for example configuration of the discovered resources using agent\ntechnologies.\n8 Conclusions\nMARE addresses resource configuration in ad hoc environments using a novel combination of\nagents and tuple spaces. More specifically, MARE:\n\u2022 Demonstrates a means of achieving a near consistent view of a constantly changing ad hoc\nenvironment.\n\u2022 Has no reliance upon a single host for services central to the system such as resource\ndiscovery and naming.\n\u2022 Provides a means to help reduce the amount of communications by the use of mobile\nagents.\n\u2022 Aids the efficient use of resources through use of agents and the knowledge of resources\navailable at a given time.\nA distributed test bed has been implemented providing a number of ad hoc resources including the\ntaking of camera stills, streaming medical telemetry and GPS location information. The initial\nimplementation maintains a view of resources available in an environment, despite the random\nremoval and insertion of new resources into the environment. Note that the current prototype of\nMARE has not been developed with performance as a primary goal, although MARE has been\nshown to perform well in the small systems developed so far.\nFuture work is required into security both of the system and the agents executing upon it. The Java\nsecurity model holds many keys to this including for example a per class author security policy.\nThe use of user permissions upon a host can also enable a protection of the system by executing\nMARE in a user mode with restricted permissions. Protection of data itself can be carried out\nutilising strongly encrypted tuple spaces with user authentication (cf. the username\/ password\nrequired to access IBM\u2019s T-Spaces). We plan further development and evaluation of MARE\nthough the introduction of more resources and enlarging of the existing prototype test bed.\nTo conclude, mobility is commonplace and users expect device interaction. The weaknesses\nhighlighted in existing systems show a need for a different approach to handling the new era of\ncollaboration between mobile wireless devices. MARE is a step towards enabling operations in the\nincreasingly more diverse active environment being generated by the relentless development and\ndeployment of mobile wireless technologies.\n9 References\n[1] Radio Equipement System (RES) Trans-European Trunked Radio (TETRA); Voice plus Data (V+D), Designer\u2019s Guide, ETSI\nWork Programme DE\/RES \u2013 0601, Subtechnical Committee (STC) RES 06, May 1995\n[2] Development of WaveLAN, an ISM band wireless LAN, AT & T Technical Journal, pp. 27-37, July\/August 1993\n[3] Bluetooth Specifications, ongoing work, http:\/\/www.bluetooth.com\/\n[4] Ed. Candy et al, Emergency Multimedia, Simoco Europe Ltd., the Langdale Ambleside Mountain Rescue Team, and HW\nCommunications Limited, Multimedia Demonstrator Programme funded by the Department of Trade and Industry.\n[5] Object Management Group, CORBA\/IIOP 2.3 Specification, OMG document formal\/98-12-01, Object management group,\nhttp:\/\/www.omg.org\/\n[6] Microsoft Corporation, Distributed Component Object Model Protocol DCOM\/1.0 Specification, Microsoft Developer Network\nLibrary Document, http:\/\/msdn.microsoft.com\/\n[7] A. Schill and S. K\u00fcmmel, Design and Implementation of a Support Platform for Distributed Mobile Computing, Distributed\nSystems Engineering Journal, 2(3), pp. 128-141, 1995\n[8] Nigel Davies, Adrian Friday, Gordon Blair and Keith Cheverst, Distributed Systems Support for Adaptive Mobile Applications,\nACM Mobile Networks and Applications, Special Issue on Mobile Computing - System Services, Volume 1, Number 4, 1996\n[9] M. Satyanarayanan, B. Noble, P. Kumar and M. Price, Application-Aware Adaptation for Mobile Computing, Proceedings of the\n6th ACM SIGOPS European Workshop (Dagstuhl, Germany), 1994\n[10] A.D. Joseph, A. F. deLespinasse, J.A. Tauber, D.K. Gifford and M.F. Kaashoek, Rover: A toolkit for Mobile Information\nAccess, Proceedings of the 15th symposium on Operating Systems Principles (SOSP\u201995), Copper Mountain Resort, Colorado, U.S.,\npp. 156-171, 1995\n[11] Nicholas Carriero and David Gelernter, Linda in Context, Communications of the ACM, Volume 32 Number 4, pp 444 \u2013 458,\n1989\n[12] Antony Rowstron, Bulk Primitives in Linda Run-Time Systems, University of York, Thesis, 1996\n[13] Stephen Wade, An Investigation into the use of the Tuple Space Paradigm in Mobile Computing Environments, Ph.D. Thesis,\nLancaster University, 1999.\n[14] D. Gelernter, Generative Communication in Linda, ACM Transactions on Programming Languages and Systems, Volume 7,\nNumber 1, pp 255-263, 1985\n[15] Susanne C. Hupfer, Melinda: Linda with Multiple Tuple Spaces, Research Report YaleU\/DCS\/RR-766, February 1990\n[16] Jini, JavaSpaces Specification, http:\/\/www.sun.com\/jini\/specs\/\n[17] TSpaces: The Next Wave, Hawaii International Conference on System Sciences (HICSS-32), 1999\n[18] Nigel Davies, Adrian Friday, Stephen Wade and Gordon Blair, L2imbo: A Distributed Systems Platform for Mobile\nComputing, ACM Mobile Networks and Applications (MONET), Special Issue on Protocols and Software Paradigms of Mobile\nNetworks, Volume 3, Number 2, pp143-156, 1998\n[19] , J. Baumann, F. Hohl, K. Rothermel, M. Schwehm, M. Stra\u00dfer, Mole 3.0: A Middleware for Java-Based Mobile Software\nAgentsMiddleware'98 IFIP International conference on Distributed Systems Platforms and Open Distributed Processing, pp. 355-\n370, 1998\n[20] Dag Johansen, Robbert van Renesse, and Fred B. Schneider, An Introduction to the TACOMA Distributed System, Department\nof Computer Science, University of Troms\u00f8, Norway, Technical Report 95-23, 1995\n[21] Robert S. Gray, Agent Tcl: A flexible and secure mobile-agent system, Proceedings of the 1996 Tcl\/Tk Workshop, pages 9-23,\n1996\n[22] David Wong, Noemi Paciorek, Tom Walsh, Joe DiCelie, Mike Young, Bill Peet, Concordia: An Infrastructure for\nCollaborating Mobile Agents, Mitsubishi Electric ITA, First International Workshop on mobile agents, Berlin Germany, 1997\n[23] Weiyi (William) Li, David G. Messerschmitt, Java-To-Go: Itinerative Computing Using Java, Department of Electrical\nEngineering and Computer Sciences University of California at Berkeley 1996\n[24] H, Peine, T. Stolpmann, In Kurt Rothermel, Radu Popescu-Zeletin, The Architecture of the Ara Platform for Mobile Agents,\n(Eds.): Proc. of the First International Workshop on Mobile Agents MA'97 (Berlin, Germany), 1997\n[25] Aglets Specification, IBM Research, http:\/\/www.trl.ibm.co.jp\/aglets\/\n[26] Picco, G., Murphy, A., and Roman, Lime: Linda Meets Mobility, G.-C., Technical report no. 98-21, 1998\n[27] J. Verizades, E. Guttman, C. Perkins, S. Kaplan, Service Location Protocol, rfc2165, June 1997\n[28] Universal Plug and Play Device Architecture Reference Specification, Version 0.90 - November 10, 1999\n[29] Y. Goland, T. Cai, P. Leach., Y. Gu, S. Albright, Simple Service Discovery Protocol\n[30] M. Storey, G. Blair, Resource Configuration in Ad Hoc Networks: The MARE Approach, Third IEEE Workshop on Mobile\nComputing Systems and Applications (WMCSA), Monterey California, 2000\nMatthew Storey graduated from Lancaster University in 1997 and in the same year\njoined the mobile computing group at Lancaster University. Matthew is currently a\nresearch student in the final stages of his PhD. His research is currently concerned with\naddressing issues of mobility using mobile agents and the tuple space paradigm. He is\nalso interested in wearable, ubiquitous and ad-hoc computing.\nE-mail: matt@comp.lancs.ac.uk\nProf. Gordon Blair is a founding member of the Distributed Multimedia Research\nGroup at Lancaster University. Following the completion of his PhD at Strathclyde\nUniversity, he moved to Lancaster in 1983. He currently holds a chair in distributed\nsystems at this university, and is also an Adjunct Professor at the University of Troms\u00f8\nin Norway. He has published over 180 papers in his field and in on the programme\ncommittees of many major international conferences in distributed systems, reflection\nand multimedia. He is on the steering committee of the Middleware series of\nconferences, was General Chair for this conference in 1998, and co-organised a\nworkshop on Reflective Middleware (with Roy Campbell, University of Illinois at\nUrbana-Champaign) held in conjunction with Middleware'2000. He is also Programme Co-Chair of DOA'01 to be held\nin Rome in September 2001. He has been primarily responsible for a number of research projects at Lancaster\nincluding Sumo, Adapt and Open ORB.\nE-mail: gordon@comp.lancs.ac.uk\nAdrian Friday graduated from the University of London in 1991. In 1992 he helped\nform the mobile computing group at Lancaster University, and has since completed his\nPhD entitled \"Infrastructure Support for Adaptive Mobile Applications\". His early work\nfocused on adaptive distributed systems support for mobile computing applications. In\n1998 he was appointed as a Lecturer in the department of Computer Science and is an\nactive member of the Distributed Multimedia Research Group. He is now an investigator\nin a number of key research initiatives at Lancaster, including the Equator IRC and\nGUIDE projects. His current research interests include: distributed system support for\nmobile, context-sensitive and sentient computing environments. Adrian is a member of\nIEEE Computer Society, the ACM and BCS.\nE-mail: adrian@comp.lancs.ac.uk\n"}