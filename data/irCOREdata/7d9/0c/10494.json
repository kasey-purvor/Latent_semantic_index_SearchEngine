{"doi":null,"coreId":"10494","oai":"oai:eprints.gla.ac.uk:46113","identifiers":["oai:eprints.gla.ac.uk:46113",null],"title":"Action semantics in retrospect","authors":["Watt, D.A."],"enrichments":{"references":[{"id":18089395,"title":"Can programming be liberated from the von Neumann style? A functional style and its algebra of programs,","authors":[],"date":"1978","doi":"10.1007\/978-3-662-09507-2_10","raw":"1. J. Backus (1978) Can programming be liberated from the von Neumann style? A functional style and its algebra of programs, Communications of the ACM 21, pp. 613\u2013641. 2. D.F. Brown, H.P. de Moura, and D.A. Watt (1990) Actress: an action semantics directed compiler generator, in Compiler Construction: 4th International Conference","cites":null},{"id":18089404,"title":"elaborate [[ \u201cvar\u201d I:Identi\ufb01er \u201c:=\u201d E:Expression ]] = evaluate E and allocate a cell then store the given value#1 in the given cell#2 and bind I to the given cell#2 .C ASD of the imperative language with exceptions","authors":[],"date":null,"doi":null,"raw":"elaborate [[ \u201cvar\u201d I:Identi\ufb01er \u201c:=\u201d E:Expression ]] = evaluate E and allocate a cell then store the given value#1 in the given cell#2 and bind I to the given cell#2 .C ASD of the imperative language with exceptions","cites":null},{"id":18089402,"title":"evaluate [[ \u201clet\u201d D:Declaration \u201cin\u201d","authors":[],"date":null,"doi":null,"raw":"evaluate [[ \u201clet\u201d D:Declaration \u201cin\u201d E:Expression ]] = ...","cites":null},{"id":690604,"title":"evaluate [[ \u201cthrow\u201d I :Identifier ]] = escape with the exception bound to I .","authors":[],"date":null,"doi":null,"raw":null,"cites":null},{"id":18089405,"title":"evaluate [[ \u201cthrow\u201d I:Identi\ufb01er ]] = escape with the exception bound to I .","authors":[],"date":null,"doi":null,"raw":"evaluate [[ \u201cthrow\u201d I:Identi\ufb01er ]] = escape with the exception bound to I .","cites":null},{"id":18089403,"title":"evaluate [[ I:Identi\ufb01er \u201c:=\u201d E:Expression ]] = evaluate E then store the given value in the cell bound to I and give the given value . Semantics of declarations \u2022 elaborate : Declaration \u2192 action [binding storing] .","authors":[],"date":null,"doi":null,"raw":"evaluate [[ I:Identi\ufb01er \u201c:=\u201d E:Expression ]] = evaluate E then store the given value in the cell bound to I and give the given value . Semantics of declarations \u2022 elaborate : Declaration \u2192 action [binding storing] .","cites":null},{"id":18089398,"title":"evaluate [[ I:Identi\ufb01er ]] = give the value bound to I .","authors":[],"date":null,"doi":null,"raw":"evaluate [[ I:Identi\ufb01er ]] = give the value bound to I .","cites":null},{"id":18089401,"title":"evaluate [[ I:Identi\ufb01er ]] = give the value bound to I or give the value stored in the cell bound to I .","authors":[],"date":null,"doi":null,"raw":"evaluate [[ I:Identi\ufb01er ]] = give the value bound to I or give the value stored in the cell bound to I .","cites":null},{"id":18089397,"title":"evaluate [[ L:Literal ]] = give the literal value of L .","authors":[],"date":null,"doi":"10.1007\/springerreference_9895","raw":"evaluate [[ L:Literal ]] = give the literal value of L .","cites":null},{"id":18089396,"title":"JAS: a Java action semantics,","authors":[],"date":"1999","doi":null,"raw":", pp. 95\u2013109, Springer-Verlag. 3. D.F. Brown and D.A. Watt (1999) JAS: a Java action semantics, in [23], pp. 43\u201356. 4. S. Christensen and M.H. Olsen (1988) Action semantics of CCS and CSP, Report DAIMI IR-44, Computer Science Department, Aarhus University. 5. K.-G. Doh and P.D. Mosses (2003) Composing programming languages by combining action-semantics modules, BRICS Report Series RS-03-53, Computer Science Department, Aarhus University. 6. K.-G. Doh and D.A. Schmidt (1992) Extraction of strong typing laws from action semantics de\ufb01nitions, in European Symposium on Programming 1992, pp. 151\u2013166, Springer-Verlag. 7. S. Even and D.A. Schmidt (1990) Type inference for action semantics, in European Symposium on Programming 1990, pp. 71\u201395, Springer-Verlag. 8. G. Kahn (1987) Natural semantics, in Proceedings of STACS 1987, pp. 22\u201339, Springer-Verlag. 9. S. Lassen, P.D. Mosses, and D.A. Watt (2000) an introduction to AN-2: the proposed new version of action notation, in [21], pp. 19\u201336. 10. P.D. Mosses (1974) The mathematical semantics of Algol60, Technical Monograph PRG-12, Programming Research Group, Oxford University. 11. P.D. Mosses (1975) Mathematical semantics and compiler generation, DPhil thesis, Oxford University. 12. P.D. Mosses (1980) A constructive approach to compiler correctness, in International Colloquium on Automata, Languages, and Programming, Springer-Verlag. 13. P.D. Mosses (1983) Abstract semantic algebras!, in Formal Description of Programming Concepts II (ed. D. Bj\u00f8rner), North-Holland. 14. P.D. Mosses (1984) A basic abstract semantic algebra, in International Symposium on Semantics of Data Types, Springer-Verlag. 15. P.D. Mosses (1989) Uni\ufb01ed algebras and action semantics, in Proceedings of STACS 1989, pp. 17\u201335, Springer-Verlag. 16. P.D. Mosses (1990) Denotational semantics, in Handbook of Theoretical Computer Science (ed. J. van Leeuwen et al.), pp. 575\u2013631, Elsevier. 17. P.D. Mosses (1992) Action Semantics, Cambridge Tracts in Theoretical Computer Science.18. P.D. Mosses (ed.) (1994) First International Workshop on Action Semantics, BRICS Notes Series NS-94-1, Computer Science Department, Aarhus University. 19. P.D. Mosses (1999) Foundations of modular structural operational semantics, in Mathematical Foundations of Computer Science 1999, Springer-Verlag. 20. P.D. Mosses (1999) A modular SOS for action notation, in [23], pp. 131\u2013142. 21. P.D. Mosses and H.P. de Moura (eds.) (2000) Third International Workshop on Action Semantics, BRICS Notes Series NS-00-6, Computer Science Department, Aarhus University. 22. P.D. Mosses and D.A. Watt (1993) Pascal: action semantics, version 0.6 (unpublished). 23. P.D. Mosses and D.A. Watt (eds.) (1999) Second International Workshop on Action Semantics, BRICS Notes Series NS-99-3, Computer Science Department, Aarhus University. 24. P. \u00d8rb\u00e6k (1994) Oasis: an optimizing action-based compiler generator, in Compiler Construction: 5th International Conference (ed. P.A. Fritzson), pp. 1\u201315, SpringerVerlag. 25. J. Palsberg (1992) A provably correct compiler generator, in European Symposium on Programming 1992, pp. 418\u2013434, Springer-Verlag. 26. G.D. Plotkin (1981) A structural approach to operational semantics, Report DAIMI FN-19, Computer Science Department, Aarhus University. 27. D.A. Schmidt and K.-G. Doh (1994) The facets of action semantics - some principles and applications, in [18], pp. 1\u201315. 28. D.A. Watt (1999) The static and dynamic semantics of Standard ML, in [23], pp. 155\u2013172. 29. D.A. Watt (2004) Programming Language Design Concepts, Wiley.A ASD of the applicative language (APP) Semantic entities \u2022 bindable = value function . \u2022 value = truth-value integer . \u2022 function = abstraction [using the given value giving a value] . Semantics of expressions \u2022 evaluate : Expression \u2192 action [giving a value] .","cites":null},{"id":18089399,"title":"then enact application of (the function bound to I) to the given value .","authors":[],"date":null,"doi":null,"raw":"evaluate [[ I \u201c(\u201d E \u201c)\u201d ]] = evaluate E then enact application of (the function bound to I) to the given value .","cites":null},{"id":18089400,"title":"to closure of abstraction of furthermore bind I2 to the given value hence evaluate E .B ASD of the imperative language (IMP)","authors":[],"date":null,"doi":null,"raw":"elaborate [[ \u201cfun\u201d I1:Identi\ufb01er \u201c(\u201d I2:Identi\ufb01er \u201c)\u201d \u201c=\u201d E:Expression ]] = bind I1 to closure of abstraction of furthermore bind I2 to the given value hence evaluate E .B ASD of the imperative language (IMP) Semantic entities \u2022 bindable = value function cell . \u2022 storable = value . \u2022 value = ... \u2022 function = abstraction [using the given value giving a value storing] . Semantics of expressions \u2022 evaluate : Expression \u2192 action [giving a value storing] .","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2009","abstract":"This paper is a themed account of the action semantics project, which Peter Mosses has led since the 1980s. It explains his motivations for developing action semantics, the inspirations behind its design, and the foundations of action semantics based on unified algebras. It goes on to outline some applications of action semantics to describe real programming languages, and some efforts to implement programming languages using action semantics directed compiler generation. It concludes by outlining more recent developments and reflecting on the success of the action semantics project","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.gla.ac.uk:46113<\/identifier><datestamp>\n      2016-08-25T11:31:04Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><rioxx xmlns=\"http:\/\/www.rioxx.net\/schema\/v2.0\/rioxx\/\" xmlns:ali=\"http:\/\/ali.niso.org\/2014\/ali\/1.0\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:dcterms=\"http:\/\/purl.org\/dc\/terms\/\" xmlns:rioxxterms=\"http:\/\/docs.rioxx.net\/schema\/v2.0\/rioxxterms\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.rioxx.net\/schema\/v2.0\/rioxx\/ http:\/\/www.rioxx.net\/schema\/v2.0\/rioxx\/rioxx.xsd\" ><ali:free_to_read>\n    \n      <\/ali:free_to_read><dc:description>This paper is a themed account of the action semantics project, which Peter Mosses has led since the 1980s. It explains his motivations for developing action semantics, the inspirations behind its design, and the foundations of action semantics based on unified algebras. It goes on to outline some applications of action semantics to describe real programming languages, and some efforts to implement programming languages using action semantics directed compiler generation. It concludes by outlining more recent developments and reflecting on the success of the action semantics project.<\/dc:description><dc:format>application\/pdf<\/dc:format><dc:identifier>http:\/\/eprints.gla.ac.uk\/46113\/1\/46113.pdf<\/dc:identifier><dc:language>en<\/dc:language><dc:source>0302-9743<\/dc:source><dc:title>Action semantics in retrospect<\/dc:title><rioxxterms:author>Watt, D.A.<\/rioxxterms:author><rioxxterms:publication_date>2009<\/rioxxterms:publication_date><rioxxterms:type>Journal Article\/Review<\/rioxxterms:type><rioxxterms:version>NA<\/rioxxterms:version><rioxxterms:version_of_record>http:\/\/dx.doi.org\/10.1007\/978-3-642-04164-8_2<\/rioxxterms:version_of_record><\/rioxx><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2009,"topics":[],"subject":[],"fullText":""}