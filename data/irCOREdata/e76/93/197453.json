{"doi":"10.1007\/978-3-642-20401-2","coreId":"197453","oai":"oai:lra.le.ac.uk:2381\/9702","identifiers":["oai:lra.le.ac.uk:2381\/9702","10.1007\/978-3-642-20401-2"],"title":"Model-Driven Development of Adaptable Service-Oriented Business Processes","authors":["Montangero, Carlo","Reiff-Marganiec, Stephan","Semini, Laura"],"enrichments":{"references":[{"id":43710329,"title":"A compositional framework for access control policies enforcement.","authors":[],"date":"2003","doi":"10.1145\/1035429.1035433","raw":"F. Siewe, A. Cau, and H. Zedan. A compositional framework for access control policies enforcement. In FMSE \u201903, pages 32\u201342. ACM Press, 2003.","cites":null},{"id":43710295,"title":"A methodology and tool support for managing business rules in organizations.","authors":[],"date":"2005","doi":"10.1016\/j.is.2004.05.003","raw":"M. Bajech and M. Krisper. A methodology and tool support for managing business rules in organizations. Information Systems, 30:423\u2013443, 2005.","cites":null},{"id":43710308,"title":"A roadmap towards the convergence of business process management and service oriented architecture.","authors":[],"date":"2007","doi":"10.1145\/1241854.1247273","raw":"F. Kamoun. A roadmap towards the convergence of business process management and service oriented architecture. Ubiquity, 8(14), 2007. ACM Press.","cites":null},{"id":43710326,"title":"ADEPT flex -supporting dynamic changes of workflows without losing control.","authors":[],"date":"1998","doi":null,"raw":"M. Reichert and Peter Dadam. ADEPT flex -supporting dynamic changes of workflows without losing control. J. Intell. Inf. Syst., 10(2):93\u2013129, 1998.","cites":null},{"id":43710323,"title":"Agent work: a workflow system supporting rule-based workflow adaptation.","authors":[],"date":"2004","doi":"10.1016\/j.datak.2004.03.010","raw":"R. Mu\u00a8ller, U. Greiner, and E. Rahm. Agent work: a workflow system supporting rule-based workflow adaptation. Data Knowl. Eng., 51(2):223\u2013256, 2004.","cites":null},{"id":43710297,"title":"An Action\/StateBased Model-Checking Approach for the Analysis of Communication Protocols for Service-Oriented Applications.","authors":[],"date":"2007","doi":"10.1007\/978-3-540-79707-4_11","raw":"M.H. ter Beek, A. Fantechi, S. Gnesi, and F. Mazzanti. An Action\/StateBased Model-Checking Approach for the Analysis of Communication Protocols for Service-Oriented Applications. In Revised Selected Papers of Formal Methods for Industrial Critical Systems (FMICS\u201907), volume 4916 of LNCS, pages 133\u2013148. Springer, 2007.","cites":null},{"id":43710302,"title":"AO4BPEL: An Aspect-oriented Extension to BPEL.","authors":[],"date":"2007","doi":"10.1007\/s11280-006-0016-3","raw":"A. Charfi and M. Mezini. AO4BPEL: An Aspect-oriented Extension to BPEL. In World Wide Web, pages 309\u2013344, 2007.","cites":null},{"id":43710328,"title":"Appel: The accent project policy environment\/language.","authors":[],"date":"2005","doi":null,"raw":"S. Reiff-Marganiec, K.J. Turner, and L. Blair. Appel: The accent project policy environment\/language. Technical Report TR-161, University of Stirling, Dec. 2005.","cites":null},{"id":43710320,"title":"Barbed model\u2013driven software development: A case study.","authors":[],"date":"2008","doi":"10.1016\/j.entcs.2008.03.092","raw":"Carlo Montangero and Laura Semini. Barbed model\u2013driven software development: A case study. Electron. Notes Theor. Comput. Sci., 207:171\u2013186, 2008.","cites":null},{"id":43710307,"title":"Business Process Execution Language for Web Services,","authors":[],"date":null,"doi":"10.1007\/springerreference_66106","raw":"IBM. BPEL4WS, Business Process Execution Language for Web Services, version","cites":null},{"id":43710300,"title":"Cc-pi: A constraint-based language for specifying service level agreements. In","authors":[],"date":"2007","doi":"10.1007\/978-3-540-71316-6_3","raw":"M.G. Buscemi and U. Montanari. Cc-pi: A constraint-based language for specifying service level agreements. In R. De Nicola, editor, Programming Languages and Systems (ESOP 2007), pages 18\u201332, 2007.","cites":null},{"id":43710330,"title":"Composing web services specifications: Experiences in implementing policydriven transactional processes.","authors":[],"date":null,"doi":null,"raw":"S. Tai. Composing web services specifications: Experiences in implementing policydriven transactional processes. In BTW, volume 65 of LNI, pages 547\u2013559. GI,","cites":null},{"id":43710299,"title":"Constraint-Based Policy Negotiation and Enforcement for Telco Services. In TASE","authors":[],"date":"2007","doi":"10.1109\/tase.2007.18","raw":"M.G. Buscemi, L. Ferrari, C. Moiso, and U. Montanari. Constraint-Based Policy Negotiation and Enforcement for Telco Services. In TASE 2007, pages 463\u2013472. IEEE Computer Society, 2007.","cites":null},{"id":43710296,"title":"Detecting policy conflicts by model checking UML state machines.","authors":[],"date":null,"doi":null,"raw":"M. ter Beek, S. Gnesi, C. Montangero, and L. Semini. Detecting policy conflicts by model checking UML state machines. In S. Reiff-Marganiec and M. Nakamura, editors, Feature Interactions in Software and Communication System X, pages 59\u2013","cites":null},{"id":43710321,"title":"Developing, deploying and running a hello world","authors":[],"date":null,"doi":null,"raw":"S. Moser and T. van Lessen. Developing, deploying and running a hello world BPEL process with the Eclipse BPEL designer and Apache ODE, people.apache.org\/\u223cvanto\/helloworld-bpeldesignerandode.pdf.","cites":null},{"id":43710322,"title":"Dino: Dynamic and adaptive composition of autonomous services. www.cs.ucl.ac.uk\/research\/dino\/,","authors":[],"date":"2007","doi":"10.1109\/ecows.2007.24","raw":"A. Mukhija, D. S. Rosenblum, and A. Dingwall-Smith. Dino: Dynamic and adaptive composition of autonomous services. www.cs.ucl.ac.uk\/research\/dino\/, 2007.","cites":null},{"id":43710316,"title":"Distributed states logic.","authors":[],"date":"2002","doi":"10.1109\/time.2002.1027474","raw":"C. Montangero and L. Semini. Distributed states logic. In 9th International Symposium on Temporal Representation and Reasoning (TIME\u201902), Manchester, UK, July 2002. IEEE CS Press.","cites":null},{"id":43710298,"title":"Engineering Service Oriented Applications: From StPowla Processes to SRML Models.","authors":[],"date":"2008","doi":"10.1007\/978-3-540-78743-3_13","raw":"L. Bocchi, S. Gorton, and S. Reiff-Marganiec. Engineering Service Oriented Applications: From StPowla Processes to SRML Models. In J.L. Fiadeiro and P. Inverardi, editors, Fundamental Approaches to Software Engineering, volume 4961 of Lecture Notes in Computer Science, pages 163\u2013178. Springer Verlag, 2008.","cites":null},{"id":43710327,"title":"Feature interaction in policies.","authors":[],"date":"2004","doi":"10.1016\/j.comnet.2004.03.004","raw":"S. Reiff-Marganiec and K. J. Turner. Feature interaction in policies. Comput. Networks, 45(5):569\u2013584, 2004.","cites":null},{"id":43710333,"title":"Formal model and policy specification of usage control.","authors":[],"date":"2005","doi":"10.1145\/1108906.1108908","raw":"X. Zhang, F. Parisi-Presicce, R. Sandhu, and J. Park. Formal model and policy specification of usage control. ACM Trans. Inf. Syst. Secur., 8(4):351\u2013387, 2005.","cites":null},{"id":43710301,"title":"Hybrid web service composition: business processes meet business rules.","authors":[],"date":"2004","doi":"10.1145\/1035167.1035173","raw":"A. Charfi and M. Mezini. Hybrid web service composition: business processes meet business rules. In M. Aiello, M. Aoyama, F. Curbera, and M. P. Papazoglou, editors, ICSOC, pages 30\u201338. ACM, 2004.","cites":null},{"id":43710324,"title":"ILOG JRules 6.5 brings rules to SOA. InfoWorld: Product Guide: ILOG JRules 2007: Review,","authors":[],"date":"2007","doi":null,"raw":"S. Nu\u00b4n\u02dcez. ILOG JRules 6.5 brings rules to SOA. InfoWorld: Product Guide: ILOG JRules 2007: Review, 2007.","cites":null},{"id":43710318,"title":"Logic Based Coordination for Event\u2013 Driven Self\u2013Healing Distributed Systems. In","authors":[],"date":"2004","doi":"10.1007\/978-3-540-24634-3_19","raw":"C. Montangero, L. Semini, and S. Semprini. Logic Based Coordination for Event\u2013 Driven Self\u2013Healing Distributed Systems. In R.De Nicola, G.Ferrari, and G. Meredith, editors, Proc. 6th Int. Conf. on Coordination Models and Languages, COORDINATION\u201904, volume 2949 of LNCS, pages 248\u2013262, Pisa, Italy, Feb. 2004. Springer-Verlag.","cites":null},{"id":43710314,"title":"Logic-based conflict detection for distributed policies.","authors":[],"date":"2008","doi":"10.1007\/978-3-540-75698-9_17","raw":"C. Montangero, S. Reiff-Marganiec, and L. Semini. Logic-based conflict detection for distributed policies. Fundamenta Informaticae, 89(4):511\u2013538, 2008.","cites":null},{"id":43710311,"title":"Logic-based detection of conflicts in APPEL policies.","authors":[],"date":"2007","doi":"10.1007\/978-3-540-75698-9_17","raw":"C. Montangero, S. Reiff-Marganiec, and L. Semini. Logic-based detection of conflicts in APPEL policies. In F. Arbab and M. Sirjani, editors, Int. Symp. on Fundamentals of Software Engineering, FSEN 2007, Tehran, Iran, volume 4767 of LNCS, pages 257\u2013271. Springer, 2007.","cites":null},{"id":43710304,"title":"Policy support for business-oriented web service management. In Web Congress,","authors":[],"date":"2006","doi":"10.1109\/la-web.2006.26","raw":"S. Gorton and S. Reiff-Marganiec. Policy support for business-oriented web service management. In Web Congress, 2006. LA-Web \u201906. Fourth Latin American, pages 199\u2013202, Los Alamitos, CA, USA, Oct. 2006. IEEE Computer Society.","cites":null},{"id":43710332,"title":"Policy support for call control.","authors":[],"date":null,"doi":"10.1016\/j.csi.2005.05.004","raw":"K. J. Turner, S. Reiff-Marganiec, L. Blair, J. Pang, T. Gray, P. Perry, and J. Ireland. Policy support for call control. Computer Standards and Interfaces, 28(6):635\u2013649,","cites":null},{"id":43710303,"title":"StPowla: SOA, Policies and Workflows.","authors":[],"date":"2007","doi":"10.1007\/978-3-540-93851-4_35","raw":"S. Gorton, C. Montangero, S. Reiff-Marganiec, and L. Semini. StPowla: SOA, Policies and Workflows. In Revised Selected Papers of Workshops, ICSOC\u201907, volume 4907 of LNCS, pages 351\u2013362. Springer, 2007.","cites":null},{"id":43710331,"title":"The Forrester Wave: Human Centric BPM for Java Platforms,","authors":[],"date":"2007","doi":null,"raw":"C. Teubner. The Forrester Wave: Human Centric BPM for Java Platforms, Q3 2007. http:\/\/www.forrester.com\/Research\/Document\/Excerpt\/-0,7211,38886,00.html, 2007.","cites":null},{"id":43710305,"title":"Towards a task-oriented, policy-driven business requirements specification for web services.","authors":[],"date":"2006","doi":"10.1007\/11841760_40","raw":"S. Gorton and S. Reiff-Marganiec. Towards a task-oriented, policy-driven business requirements specification for web services. In S. Dustdar, J. L. Fiadeiro, and A. P. Sheth, editors, Business Process Management, volume 4102 of LNCS, pages 465\u2013470. Springer, 2006.","cites":null},{"id":43710310,"title":"UMC User Guide v3.3.","authors":[],"date":"2006","doi":null,"raw":"F. Mazzanti. UMC User Guide v3.3. Technical Report 2006-TR-33, Istituto di Scienza e Tecnologie dell\u2019Informazione \u201cA. Faedo\u201d, CNR, 2006.","cites":null},{"id":43710309,"title":"UML for service-oriented systems,","authors":[],"date":"2007","doi":"10.1007\/978-3-642-20401-2_4","raw":"N. Koch, P. Mayer, R. Heckel, L. Gonczy, and C. Montangero. UML for service-oriented systems, SENSORIA EU-IST 016004 Deliverable D1.4.a. http:\/\/www.pst.ifi.lmu.de\/projekte\/Sensoria\/del 24\/ D1.4.a.pdf, 2007.","cites":null},{"id":43710306,"title":"Using first-order logic to reason about policies.","authors":[],"date":"2003","doi":"10.1109\/csfw.2003.1212713","raw":"J. Y. Halpern and V. Weissman. Using first-order logic to reason about policies. In Proceedings of the Computer Security Foundations Workshop (CSFW\u201903), pages 187\u2013201, Los Alamitos, CA, USA, 2003. IEEE Computer Society.","cites":null},{"id":43710293,"title":"visited:","authors":[],"date":"2009","doi":"10.1108\/09504120910968844","raw":"http:\/\/www.fico.com\/en\/Products\/DMTools\/Pages\/Fair-Isaac-Blaze-AdvisorSystem.aspx. Last visited: March 2009.","cites":null},{"id":43710325,"title":"Web services business process execution language version 2.0 - primer,","authors":[],"date":"2007","doi":"10.1007\/springerreference_66106","raw":"Oasis Organization. Web services business process execution language version 2.0 - primer, 2007.","cites":null},{"id":43710294,"title":"Worklets: A service-oriented implementation of dynamic flexibility in workflows. In","authors":[],"date":"2006","doi":"10.1007\/11914853_18","raw":"M. Adams, A.H.M. ter Hofstede, D. Edmond, and W.M.P. van der Aalst. Worklets: A service-oriented implementation of dynamic flexibility in workflows. In R. Meersman and Z. Tari, editors, On the Move to Meaningful Internet Systems 2006, volume 4275 of LNCS, pages 291\u2013308. Springer, 2006.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2011","abstract":"Businesses typically structure their activities with workflows, which are often implemented in a rather static fashion in their IT systems.  Nowadays, system requirements change rapidly as businesses try to maintain their competitive edge, calling for similar agility of the IT systems.  To this end, we present STPOWLA, an approach that marries service oriented architecture, policies and workflows to support the agile execution of business workflows. In STPOWLA, the business is modelled by workflows, whose tasks are eventually carried out by services. Adapatation is obtained by allowing the stakeholders to define policies that establish the quality levels required of the services. The prototype STPOWLA support architecture comprizes the transformation of the workflow model into executable WS-BPEL to be deployed in the ODE-BPEL execution engine, the generation of default policies from the model, and the enactment of the policies by the APPEL policy server. The SENSORIA Finance Case Study is used throughout the paper.Peer-reviewedPost-prin","downloadUrl":"www.springerlink.com.","fullTextIdentifier":"https:\/\/lra.le.ac.uk\/bitstream\/2381\/9702\/1\/2011-5.pdf","pdfHashValue":"7740bc0cf23fb65b41944eaec93b6e39e8c410d8","publisher":"Springer Verlag","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/9702<\/identifier><datestamp>\n                2011-09-20T01:01:54Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_1116<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nModel-Driven Development of Adaptable Service-Oriented Business Processes<\/dc:title><dc:creator>\nMontangero, Carlo<\/dc:creator><dc:creator>\nReiff-Marganiec, Stephan<\/dc:creator><dc:creator>\nSemini, Laura<\/dc:creator><dc:description>\nBusinesses typically structure their activities with workflows, which are often implemented in a rather static fashion in their IT systems.  Nowadays, system requirements change rapidly as businesses try to maintain their competitive edge, calling for similar agility of the IT systems.  To this end, we present STPOWLA, an approach that marries service oriented architecture, policies and workflows to support the agile execution of business workflows. In STPOWLA, the business is modelled by workflows, whose tasks are eventually carried out by services. Adapatation is obtained by allowing the stakeholders to define policies that establish the quality levels required of the services. The prototype STPOWLA support architecture comprizes the transformation of the workflow model into executable WS-BPEL to be deployed in the ODE-BPEL execution engine, the generation of default policies from the model, and the enactment of the policies by the APPEL policy server. The SENSORIA Finance Case Study is used throughout the paper.<\/dc:description><dc:description>\nPeer-reviewed<\/dc:description><dc:description>\nPost-print<\/dc:description><dc:date>\n2011-09-19T12:48:42Z<\/dc:date><dc:date>\n2011-09-19T12:48:42Z<\/dc:date><dc:date>\n2011<\/dc:date><dc:type>\nArticle<\/dc:type><dc:identifier>\nMontangero, Carlo; Reiff-Marganiec, Stephan and Semini, Laura \u2018Model-Driven Development of Adaptable Service-Oriented Business Processes' in Wirsing, Martin; H\u00f6lzl, Matthias (Eds.), Rigorous Software Engineering for Service-Oriented Systems: Results of the SENSORIA Project on Software Engineering for Service-Oriented Computing, Lecture Notes in Computer Science, Vol. 6582, 2011, pp. 115-132<\/dc:identifier><dc:identifier>\n978-3-642-20400-5<\/dc:identifier><dc:identifier>\n0302-9743<\/dc:identifier><dc:identifier>\nhttp:\/\/www.springer.com\/computer\/swe\/book\/978-3-642-20400-5<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/9702<\/dc:identifier><dc:identifier>\n10.1007\/978-3-642-20401-2<\/dc:identifier><dc:identifier>\n1611-3349<\/dc:identifier><dc:language>\nen<\/dc:language><dc:rights>\n\u00a9 Springer-Verlag Berlin Heidelberg, 2011. Deposited with reference to the publisher\u2019s archiving policy available on the SHERPA\/RoMEO website. The original publication is available at www.springerlink.com.<\/dc:rights><dc:publisher>\nSpringer Verlag<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["1611-3349","0302-9743","issn:1611-3349","issn:0302-9743"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2011,"topics":[],"subject":["Article"],"fullText":"Model-Driven Development of Adaptable\nService-Oriented Business Processes?\nC. Montangero1, S. Reiff-Marganiec2, and L. Semini1\n1 Dipartimento di Informatica, Universita` di Pisa, {monta,semini}@di.unipi.it\n2 Department of Computer Science, University of Leicester, srm13@le.ac.uk\nAbstract. Businesses typically structure their activities with workflows,\nwhich are often implemented in a rather static fashion in their IT sys-\ntems. Nowadays, system requirements change rapidly as businesses try to\nmaintain their competitive edge, calling for similar agility of the IT sys-\ntems. To this end, we present StPowla, an approach that marries service\noriented architecture, policies and workflows to support the agile execu-\ntion of business workflows. In StPowla, the business is modelled by\nworkflows, whose tasks are eventually carried out by services. Adapata-\ntion is obtained by allowing the stakeholders to define policies that estab-\nlish the quality levels required of the services. The prototype StPowla\nsupport architecture comprizes the transformation of the workflow model\ninto executable WS\u2013BPEL to be deployed in the ODE\u2013BPEL execution\nengine, the generation of default policies from the model, and the en-\nactment of the policies by the Appel policy server. The SENSORIA\nFinance Case Study is used throughout the paper.\n1 Introduction\nIt is common practice, to reduce time-to-market, that enterprises federate their\noperations by networking via Web services, and these federations can change to\nfollow evolving business goals. On a smaller scale, processes may need to adapt\nto temporary shortage of resources by simplifying, or even skipping, some steps.\nThese environmental changes need to be supported while the software system is\noperating. The integration of Business Process Management (BPM) and Service\nOriented Architecture (SOA) has been recognized as a promising approach in\nthis respect [17].\nHowever, the integration of BPM and SOA still requires large efforts by\nhighly skilled personnel. Currently, the business rules introduced by business\nroles like sales or technical managers need to be mediated by business analysts\nwho, thanks to their knowledge of the business processes, transforms them into\ndirectives to the programmers for updating the workflows, e.g. in WS-BPEL.\n? This work has been partially sponsored by the project SENSORIA, IST-2005-016004.\nThe authors would also like to thank Hong Qing (Harry) Yu for his contributions\ntowards the implementation of the approach and his input to a draft of section 4.\nCharfi and Mezini [10] discussed the integration of rule\u2013based languages and\nprocess\u2013based service composition, considering either \u201cto adapt one of the lan-\nguages to be more compatible with the other by extending e.g., the rule-based\nlanguage with process-oriented features, or the other way around\u201d, or \u201cto en-\nhance one of the languages with an interface to the other language, so that the\nfeatures of the latter can be used in programs written in the former\u201d. They con-\ncluded that both approaches suffer from the lack of seamless integration due to\nthe paradigm mismatch which the programmer is confronted with, and privilege\nan Aspect Oriented approach [11].\nIn the Service-Targeted Policy-Oriented WorkfLow Approach (StPowla \u2013 to\nbe read like \u201cSaint Paula\u201d) [12], we have integrated the two paradigms seamlessly,\nvia the SOA: the workflow composes coarse\u2013grain business tasks, and the policies\ncontrol the fine\u2013grain variations in the service level of each task. The integration\noccurs at the conceptual level and in the supporting environment, rather than\nat the linguistic level.\nBeing policy based, the approach naturally distinguishes between a core de-\nscription of the process and its variations, which can be specified by declarative\nrules, and can be dynamically deployed or removed. This fosters Business Process\nflexibility, by raising the abstraction level at which the variations are specified,\nwhile at the same time providing an efficient implementation technique.\nIn the approach, business tasks are ultimately carried out by services, i.e. com-\nputational entities that are characterized by two series of parameters: the invo-\ncation parameters (related to their functionalities), and the Service Level (SL)\nparameters, related to the resources they exploit to carry out their job: Stake-\nholders can adapt the core workflows by requiring higher or lower quality of\nservice (QoS), therefore consuming more or less resources.\nThe kind and granularity of the \u2018resources\u2019 that are identified in the business\ndomain are often more abstract than bandwidth and power, i.e. those usually\naddressed in service level agreements. For instance, a task of a given type may\nneed higher levels of authorization in given circumstances, and lower levels in\nothers. In StPowla, the authorizing business roles are seen as resources, ordered\nalong an AuthorizationLevel dimension: the identification of these dimensions is\na key design activity in the approach.\nThe combination of workflows, SOA, and policies can be exploited at its best,\nif a coherent design strategy is adopted to foster flexibility. In a nutshell, such\na strategy is to find the best balance between (i) keeping the workflows simple,\ni.e. without explicit choices that depend on the quantity\/quality of resources\navailable to the tasks, and (ii) providing large and foreseeing ranges of choices\nto the policies, to support modelling the business rules as they emerge.\nIn this paper we present the embodiments of the StPowla concepts in\nUML4SOA [18], the UML profile that introduces stereotypes for the relevant\nconcepts (workflow, tasks, service level, etc.) in the standard framework of UML\n(classes, interfaces, activities, etc). The main contribution of the paper is the\ndesign of an environment to model, deploy, and run StPowla business pro-\ncesses. Note that, besides supporting the use of services with different service\nlevels in the business process, the environment itself is based on a service ori-\nented architecture, orchestrating a workflow engine, a policy server and a service\nbroker.\n2 The Modelling Concepts\nStPowla is a workflow based approach to business process modelling that in-\ntegrates:\n\u2013 a standard graphical notation, to ease the presentation of the core business\nprocess;\n\u2013 policies, to provide the desired adaptation to the varied expectations of all\nthe business stakeholders;\n\u2013 the SOA, to coordinate the available services in a business process.\nMore specifically, workflows are used in StPowla to define the business process\ncore as the composition of building blocks called tasks, a` la BPMN. Each task\nperforms a meaningful step in the business, whose purpose is well understood\nat an abstract level by the stakeholders. That is, a task is understood as to its\neffects in the business, regardless of the many details that need to be fixed in its\nactual enactment.\nPolicies are used to express finer details of the business process, by defining\nService Level (SL) requirements of task executions. The added value is that\npolicies can be updated dynamically, to adapt the core workflow to the changing\nneeds of the stakeholders.\nTasks are the StPowla units where BPM, SOA and policies converge, and\nadaptation occurs: the intuitive notion of task is revisited to offer the novel\ncombination of services and policies.\nWhen the control reaches the task, a service is looked for, bound and invoked,\nto perform the main functionality of the task. Functional requirements of the task\nare described in the task specification. Conversely, service invocation is always\nlocal to task execution, i.e., a service is invoked to satisfy the requirements of a\ntask, not to satisfy some overarching business requirement.\nA task can be associated to a policy. Indeed, the principal means to adapt a\nworkflow to the needs of a stakeholder, is by intervening on the behaviour of the\ntasks using policies. To define a policy StPowla users can refer to the state of\nthe execution of the workflow, as described by task and workflow specification.\nIn the following, terms in \u201cguillemets\u201d are the UML4SOA stereotypes for the\nStPowla concepts: A \u001cworkflow\u001d is an activity action that calls the specified\nbehavior, i.e., a lower level workflow; A \u001cTask\u001d is an activity action that calls\nthe specified main operation.\nNext, we present the StPowla concepts with the support of a loan negoti-\nation process, part of the Finance Portal case study (Chapter 0-3).\n2.1 Model Specification\nIn StPowla a \u001cTask\u001d is characterized by a \u001cTaskspecification\u001d via a name,\na description, an interface, and a set of service level dimensions. The name\nand description convey the purpose of the \u001cTask\u001d: in well established domains,\nthey identify precise, even if informal, functional requirements for the task. The\ninterface provides the formal signature of the operation carried out by the task.\nAs already mentioned, a task is actually carried out by a service: the interface\nincludes an operation called main, with the same parameters and return type of\nthe required service.\nThe \u001cTaskspecification\u001d can specify a number of service level dimensions\n(\u001cNFDimension\u001d) that specify the non-functional dimensions that characterize\nthe service to invoke. Besides specifying the type of each dimension, the de-\nsigner can define:\n\u2013 the ranges within which the service level can vary. In the case study the non\nfunctional dimensions are specified as enumerations, and the ranges are the\nenumeration literals: manual and automatic; supervisor and branchManager\n(see Fig. 1).\n\u2013 a default value. For instance, manual and supervisor in Fig. 1.\nThen, the stakeholders can specify the service levels they require along each\ndimension, by installing policies for a given task, overriding the default value,\nas discussed below.\nFinally, a \u001cTaskspecification\u001d can have attributes: they define properties of a\n\u001cTask\u001d that depend on the state of the workflow, and can be used in the policies\nto access the execution state and select the most appropriate service levels when\nthe \u001cTask\u001d is activated. Attributes are specified at design\u2013time and bound at\nrun\u2013time, e.g. on task\/workflow entry, as a function of the inputs, and of the\nother attributes.\nTo sum up, from a behavioural perspective, when the control reaches the\ntask, operation main is executed. The execution of main triggers the search and\ninvocation of a suitable service, and returns the computed result. The search\nidentifies a service implementation that satisfies the current policies, i.e., the\npolicies to be applied in the current state of the workflow, or the default values\nfor the service level, when not overridden.\nJust like tasks, \u001cworkflow\u001ds have a \u001cWfSpecification\u001d defining their attributes\nand signature. Moreover, differently from tasks, their behaviour is defined explic-\nitly, via an associated UML activity, whose nodes are either tasks or workflows.\n2.2 Case Study: Loan Approval\nIn this scenario, a customer uses a web portal to request a loan from a bank. The\nrequest is forwarded to and handled by the local branch, i.e. the closest one to\nthe customer\u2019s residence. At the local branch, to process the loan request, and\nFig. 1. The specification of BankEvaluation.\nbefore a contract proposal is sent to the customer, there are two necessary steps:\na preliminary evaluation (vetting), to ensure that the customer is credible, and\na subsequent step (assessment), where the contract proposal can be approved\nor rejected.\nWe concentrate on an inner workflow of the LoanApproval business process,\nBank Evaluation. The diagrams in Figures 1 and 2 specify this workflow. As\nindicated by the main operation in the \u001cWfSpecification\u001d, the Bank Evaluation\nworkflow processes a LoanRequest, that is, the document collecting all the in-\nformation on the loan being worked on . The actual process is in Figure 2, and\nshows the steps to accept or reject the request. The attribute managerAvailable\nreflects part of the state of the bank\u2019s branch enacting the workflow, and can be\nused to state the business policies.\nLet us now have a look at \u001cTaskspecification\u001d Assessment, which character-\nizes the second step of this workflow. Its \u001cServiceInterface\u001d identified by the\n\u001crequires\u001d association specifies that this task needs a service able to transform\na LoanRequest3. This \u001cServiceInterface\u001d is implemented by a service invoked by\nthe task and can be adapted along two dimensions: AutomationLevel and Assesser-\nRole. The former is a standard dimension that roughly distinguishes two kinds\nof implementations: those that exploit only machine resources, automatic, and\nthose that need human resources, manual. The second dimension may vary from\n3 The description of the transformation is not shown in the diagram, but should appear\nin the report containing it, or in a suitable pane in the supporting environment (for\ninstance, in the property pane in the IBM Rational Software Architect \u2013RSA\u2013 where\nthe figure comes from).\nFig. 2. The BankEvaluation activity.\none \u001cTaskspecification\u001d to another, since it classifies the different roles that, in\ndifferent situations, can be involved in the \u001cTask\u001d. Here, we have two such roles,\nbranchManager and supervisor, defined as the default.\nTo deal with service levels, another stereotype has been introduced, \u001cDim\u001d,\nwith a tagged value default to specify the default level. In the figure it is shown\nhow the default values can be set in the model. Two dimensions of the same\n\u001cTaskspecification\u001d need not be independent: for instance, in our example, As-\nsesserRole makes sense only if AutomationLevel is set to manual.\nBesides its \u001cTaskspecification\u001d, a \u001cTask\u001d also has a name, which is only used\nto distinguish different occurrences of the same task type in the same workflow.\nTherefore, we simply use integers as names for \u001cTask\u001ds. The BankEvaluation work-\nflow simply states that the request is first subject to Vetting and then, if accepted,\nto Assessment. In either step, the request may be rejected; after Vetting, more in-\nformation may be requested from the applicant. The default service levels imply\nthat a supervisor will perform Assessment. Similarly, a clerk will vet the request by\ndefault \u2013 not shown here. Variations can be specified by policies, as shown next.\n2.3 Policies\nA task may have associated policies, which come in two flavours: those that\nadapt the workflow by constraining the task behaviour along its SL dimensions,\nand those that modify the workflow structure, adding and\/or deleting tasks.\nThe latters are discussed in [7]; here we concentrate on the formers, and call\nthem simply policies. For instance, the generic BankEvaluation process can be\nadapted to specific situations via policies, like:\nP1: In case of loans of small amount, both vetting and assessment are performed\nautomatically.\nP2: In a small branch, the branch manager has to approve all applications.\nP3: If the branch manager of a small branch is out of office, loan applications\nare approved by the manager\u2019s representative.\nIn StPowla, the policies act on the process by specifying the requested ser-\nvice levels as a function of the state of execution as expressed in the attributes.\nTo this purpose, we use is Appel [36]. Developed in the context of telecom-\nmunications, Appel is a general language for expressing policies in a variety of\napplication domains: It is conceived with a clear separation between the core\nlanguage and its specialization for concrete domains, a separation which turns\nout very useful for our purposes.\nIn Appel a policy consists of a number of policy rules, grouped using a\nnumber of operators (sequential, parallel, guarded and unguarded choice). A\npolicy rule has the following syntax\n[when trigger] [if condition] do action (1)\nThe core language defines the structure but not the details of these parts, which\nare defined in specific application domains. Base triggers and actions are domain-\nspecific atoms. An atomic condition is either a domain-specific or a more generic\n(e.g. time) predicate. This allows the core language to be used for different\npurposes.\nThe applicability of a rule depends on whether its trigger has occurred and\nwhether its conditions are satisfied. Triggers are caused by external events. Trig-\ngers may be combined using or, with the obvious meaning that either is sufficient\nto apply the rule. Conditions may be negated as well as combined with and and\nor with the expected meaning. A condition expresses properties of the state and\nof the trigger parameters. Finally, actions have an effect on the system in which\nthe policies are applied. A few operators (and, andthen, or and orelse) have\nbeen defined to create composite actions.\nIn StPowla, to specify tasks, we specialize Appel. In this paper we only\nconsider the specializations relevant to refinement policies, additional extensions\nexists for reconfiguration policies and they are introduced in [7]. The only pos-\nsible trigger of a policy is the activation of the associated task (reconfiguration\npolicies allow for a number of other triggers). To deal with services, we intro-\nduce a special action, req(-, -, -), for service discovery and invocation. The\nsemantics of this action is to find a service as described by the first and third\narguments (specifying service type and SLA constraints), bind it, and invoke it\nwith the values in the second argument (the invocation parameters).\nA default policy is associated with each task. It states that when the control\nreaches the task, a service is looked for, bound and invoked, to perform the\nfunctionality of the task (denoted by main):\nwhen taskEntry(<args>)\ndo req(main, <args>, [])\nwhere taskEntry denotes the policy trigger, whose arguments are the task pa-\nrameters, if any. Adaptation occurs by overriding the default policy. For instance,\nto satisfy the requirements expressed by policy P2, we associate the following\npolicy to task Assessment:\nP2: when taskEntry([]) if thisWF.branchSize = small\ndo req(main, [], [AutomationLevel = manual,\nAssessorRole = branchManager])\nTo ease the policy designer task, policies can also be defined by tables, whose\nstructure is derived from the UML4SOA model of the workflow. A default table\nis automatically derived, which corresponds to the default policy: no discrimina-\ntor appears, and the default value is assigned to each SL, as in Table 1. Then, the\ndesigner can redefine the default policy, by adding discriminators and SL values.\nFor each new discriminator, the table is automatically extended, by building the\ndecision tree, and by assigning the default value to the SLs. Finally, the designer\ncan override any SL with the intended value. An example, relative to \u001cTask\u001d 2\nPolicies for BankEvaluation.2: Assessment\nRequested SLs\nAutomation level AssesserRole\ndefault: manual default: supervisor\nTable 1. The policy table for task 2 \u2013 automatically derived from the workflow model.\nPolicies for BankEvaluation.2: Assessment\nDiscriminators Requested SLs\niReqAmount<5000 ? branchSize=small ? Automation level AssesserRole\ntrue true P1: automatic ? N\/A\ntrue false P1: automatic ? N\/A\nfalse true default: manual P2: branchManager ?\nfalse false default: manual default:supervisor\nTable 2. The policy table for task 2 \u2013 interactively extended by the designer.\nof the BankEvaluation workflow, is given in Table 2, which reflects the informal\npolicies P1 and P2 of Section 2. In a policy, task and workflow attributes are ac-\ncessed by name, while the usual OO dot notation allows accessing the attributes\nof the task data, like in lReq.amount. The left side columns encode a decision\ntree, for the two discriminators lReq.amount < 5000 and branchSize = small:\neach row on the right side lists the required service level for each dimension (one\nper column on the right). For instance, if neither condition holds, the default\nvalues are requested for the service levels. The policy names are there for trace-\nability, and the stars denote the only parts of the table that are input by the\nstakeholders.\n3 Design and Deployment\nWe distinguish two roles in the design of a system integrating BPM and SOA:\nthe BP Designer dealing with workflow and policy specification, and the Ser-\nvice Producer, who is in charge of designing, implementing, and registering the\nservices. We can also distinguish between Workflow and Policy Designer, since\nthey deal with different aspects of the business process. However, we note that\nthey normally work in the same organization, they both specify the requirements\nfrom a business point of view, they share the modelling of the task types like\nthe one in Figure 1, and often they are the same person, namely the Business\nAnalyst.\nIn this section we describe the process to apply the StPowla approach, and\nthe tools we propose to support the designers job.\n3.1 Workflow Design\nThe Workflow Designer defines the task types and orchestrates different tasks\ninto an executable process to achieve a business goal which is requested by the\nend-users. To do that, he uses the UML4SOA profile as notation and the IBM\nRational Software Architect (RSA) as editor. Once the workflow model is created\n(or updated), it is transformed into executable WS-BPEL [29] and deployed in\nthe ODE BPEL execution engine [25]. Besides, policy tables templates, with the\nadaptable service levels and the default values are automatically derived from\nthe workflow model, as discussed in the last part of the previous sections. The\npolicy definition is also supported by RSA, which has been extended via the\nPolicyDesign plug\u2013in, This way the designer is naturally offered the context for\npolicy definition, that is task types definitions, including attributes and service\nlevel dimensions. Once specified and deployed, the policies affect all subsequent\nworkflow enactments.\n3.2 Service Design\nFor the moment being, StPowla makes a sort of \u201cclosed world\u201d assumption:\nwhenever a new task or dimension is introduced, new refinement services need\nbe designed, implemented and deployed. The discussion that follows describes a\nmethod to specify these services.\nAny service refining a \u001cTaskspecification\u001d implements the same \u001cServiceIn-\nterface\u001d interface, but offers a specific kind of QoS, defined in an associated\ncapability document (capDoc). For instance, an \u201cautomatic\u201d implementation,\nand one that involves the BranchManager can be specified as shown in Figure 3\nfor Assessment. The \u001cServiceInterface\u001d interface of the \u001cTaskspecification\u001d is re-\nfined respectively by the interfaces AutomaticAssessment and BranchManager-\nManalAssessment. The capDoc tag of \u001cTaskRefinement\u001d specifies the capDoc de-\nscribing which service levels the implementation must offer, that is it constrains\nthe possible implementations. For instance, Table 3 shows the two documents\nreferred to in Figure 3. So, the implementer has all the information he needs:\nFig. 3. Service specifications to refine \u001cTask\u001d 2: Assessment.\n<capDoc name=\"AutomaticAssessmentCap\" serviceType=\"Assessment\"> <and>\n<qos name=\"AutomationLevel\" enum=\"automatic\" confidence=\"1\"\/>\n<\/and> <\/capDoc>\n<capDoc name=\"BranchManagerAssessmentCap\" serviceType=\"Assessment\"> <and>\n<qos name=\"AutomationLevel\" enum=\"manual\" confidence=\"1\"\/>\n<qos name=\"AssesserRole\" enum=\"BranchManager\" confidence=\"1\"\/>\n<\/and> <\/capDoc>\nTable 3. Service capabilities.\nfunctionality from domain knowledge and enterprise standards, service \u001cServi-\nceInterface\u001d, and capabilities from the capDoc.\nNote that the scenario we assume in StPowla entails a strict co-operation\nbetween task specifier, policy specifier and service implementer: this is possible\nsince they all share the same UML4SOA model of the business.\n3.3 Deployment\nThe workflow and policy deployment targets three components of the run\u2013time\nsupport, namely the three rightmost ones in Figure 4. Steps 1 to 3 occur when\na new UML model is deployed: The BPEL representation of the workflow is\ngenerated by the central deployment service, the StPowlaDeployEngine, and\ndownloaded to the workflow engine: We currently use Apache ODE (Orches-\ntration Director Engine) [25] to execute WS-BPEL [29] representations of the\nFig. 4. Workflow and policy deployment.\nFig. 5. Runtime StPowla choreography.\nworkflows. Also, the StPowlaDeployEngine generates the policy tables templates\nand stores them back into the RSA. Thereafter, whenever a new table instance is\ndeployed, the XML representation of the policy is generated and loaded into the\nAppel Policy Engine [36,32]. The last component affected by deployment is the\nStPowlaEngine, that is, the core of the run\u2013time environment. For each policy,\nit is loaded with the paths it will use to access the run\u2013time values needed to\nevaluate the policy itself (more details in Section 4).\n4 Run\u2013Time Environment\nIn this section we describe the tools we propose to implement the StPowla\napproach. There are four cooperating services and six steps in the run-time\nenvironment to complete a task (see Figure 5). The WFEngine interacts with the\nStPowlaEngine, which coordinates the AppelPolicyServer and the GrisuBroker\nto select a refinement per each task in the workflow, according to the current state\nand policies, and invoke it. The AppelPolicyServer selects the requirements for\nservice discovery, and the GrisuBroker performs both discovery and invocation.\nThe WFEngine is the interpreter of the business process. All the tasks have\nthe same BPEL behaviour: they invoke the StPowlaEngine, to detect and invoke\nthe task refinement that best suits the current requirements. The StPowlaEngine\nreceives the task name (tn), task type (tt), state data (sd), and call data (cd).\nThe latter is the data for the invocation of the chosen service, while sd carries\nthe relevant information on the state of the workflow enactment, i.e., the current\nvalues of the task and workflow attributes. In our example, the second task of\nFigure 2, the WFEngine will pass as arguments \u201c2\u201d , \u201cAssessment\u201d, the current\nvalues of the workflow and task attributes (branchSize and managerAvailable),\nand the loan request, that is, the input argument to the task.\nThen, the StPowlaEngine builds and sends the environment for policy eval-\nuation to the AppelPolicyEngine. The environment has bindings for the task\nname and type, and for all the information in the call data and attributes that\nare used in the policies currently deployed for the task. In the example, the\ndomain of the environment will be {taskName, taskSpecification} united with\n{branchSize, lReq.amount} or {managerAvailable} according to the deployed\npolicy (P1 or P2, respectively). Remember that, to allow the StPowlaEngine to\nbuild such an environment at run\u2013time, whenever a new policy is deployed, the\n<reqDoc> <serviceType>Assessment<\/serviceType> <and>\n<qos name=\"AutomationLevel\" enum=\"automatic\" confidence=\"1\"\/>\n<\/and> <\/reqDoc>\n<reqDoc> <serviceType>Assessment<\/serviceType> <and>\n<qos name=\"AutomationLevel\" enum=\"manual\" confidence=\"1\"\/>\n<qos name=\"AssesserRole\" enum=\"branchManager\" confidence=\"1\"\/>\n<\/and> <\/reqDoc>\nTable 4. The reqDocs for policies P1 and P2.\nrelevant information is stored in the StPowlaEngine itself (step 5 in Figure 4)).\nTo understand how this is done, we need to point out that i) call data are rep-\nresented in XML, according to schemas that are derived from the UML4SOA\nmodel, and ii) state data are also represented in XML in a standard format,\nshared among the WFEngine, the StPowlaEngine, and the StPowlaDeployEnv.\nSo, the StPowlaEngine knows which data to retrieve from the state and call\ndata, and pairs them to the paths while building the environment.\nThe AppelPolicyServer determines the requirements of the task refine-\nment service to call, in the current state of workflow enactment, and according\nto the policies currently installed in the policy engine. We are using the Ap-\npel policy engine [36,32] to reap the benefits of its architecture. Indeed Appel\nneatly distinguishes between the core mechanisms for policy evaluation and the\nextensions mechanisms that allow tailoring the engine to particular domains.\nTailoring is done by defining the relevant triggers, predicates and actions: for\nStPowla, we defined i) the trigger related to task entry, which reacts to the\ninvocation from the StPowlaEngine, and ii) the action that builds and returns\na specific requirements document (reqDoc) for the service broker. For instance,\nwhen policy P2 above is triggered, the policy server returns the upper reqDoc\nin Table 4. Similarly, the policy server generates the lower document for P1.\nThe GrisuBroker uses the input reqDoc to discover a matching service, i.e.\none of the correct \u001cTaskspecification\u001d and offering service levels that match the\nrequest. The discovered endpoint is used to invoke the main operation, with the\ncall data as argument. The data returned by the service is then passed back to\nthe workflow engine, which carries on with the workflow. Note that the lack of\na matching service denotes a flaw in the design\/deploy process. Indeed, due to\nStPowla\u2019s \u201cclosed world\u201d assumption, whenever a new service is deployed the\nneeded data access paths are stored in the StPowlaEngine.\nFor the two policies in our example, Grisu would discover respectively the\ncapDocs shown in Table 3. Grisu can discover these services by comparing re-\nqDocs (like the one in Table 4) and capDocs: no other information is needed.\nThe format of reqDoc and capDoc is taken from the service broker DINO[26]:\nFor this reason, our service broker is called Grisu4.\n4 Grisu is a popular Italian cartoon character, a small dragon: since DINO is a di-\nnosaur, we see Grisu as DINO\u2019s child.\n5 Barbed Model Driven Development\nWhen thinking of model driven development, the immediate understanding is\nthat models drive software development, in the sense that the software is con-\nstructed by transforming models from higher levels of abstraction to the point\nwhere we reach a model which is executable with the desired degree of qual-\nity characteristics. What tends to be less evident, is that, precisely in order to\nreach the desired quality, many other models are used in the verification and\nassessment of the solutions under consideration at the various stages of devel-\nopment. That is, looking at the development process, besides a spine of model\ntransformations moving from highly abstract, domain related models down to\nconcrete platform related models (programs), we can see a number of barbs,\nrelating models in the spine to specialized models that permit specific, often\nvery sophisticated, analysis of parts of the software under development, usu-\nally in the early stages. We called this approach Barbed Model\u2013Driven Software\nDevelopment [24].\nWithin the work on StPowla, we applied this idea to address the detection\nof possible conflicts among policies. Indeed, when several policies are composed\n(or applied simultaneously) they might contradict each other: a phenomenon re-\nferred to as policy conflict. Policy conflict has been recognised as a problem [31]\nand there have been some attempts to address this, mostly in the domain of\naccess or resource control. In the case of end-user policies the problem is signif-\nicantly increased by a number of factors. To name a few:\n\u2013 the application domains are much more open and hence more difficult to be\nmodelled,\n\u2013 there will be many more end-user policies than there are system policies\n(sheer number of policies),\n\u2013 end-users are not necessarily aware of the wider consequences of a policy\nthat they formulate.\nTo provide the user with confidence that the rules are conflict free, we pro-\npose to filter his\/her input to detect those policies that, if entered in the policy\nengine, would originate conflicts. The advantages include that we can antic-\nipate conflict detection\u2014traditionally performed at run-time\u2014at design-time.\nIndeed, the well-known advantages of early verification apply to policies as well.\nIn [20,21], we take a logic\u2013based approach to this end: conflicts are detected by\ndeducing specific formulae in a suitable theory. A translation function has been\ndefined to derive the logical representation of Appel policies in the temporal\nlogic \u2206DSTL(x) [22,23]: as a side effect, this function defines a formal semantics\nfor Appel, which before was only defined informally, like most of the policy lan-\nguages. The translation maps a group of policies into a logical theory expressing\nits meaning. The temporal features of \u2206DSTL(x) permit the expression of the\ndynamics of the rules, the event operator facilitates dealing with the triggers,\nand the spatial features permit addressing the localization of the policies.\nMore specifically, the filter maintains a logical theory representing\n1. the relevant information on the domain, that is, interesting facts and infer-\nence rules valid in the application domain,\n2. the set of policies currently installed, i.e. contained in the Policy Base,\n3. a representation of the state space of the system, restricted to the part\naccessed when selecting the policies, and\n4. the definition of what constitutes a conflict.\nThen , it is sufficient to equip the filter also with a deduction engine for the logic\nin use: before a new policy is added to the Policy Base, its logical representation\nis added to the filter theory, and then the deduction engine is run: if one of the\nformulae identifying a conflict is derived, the user is informed and he can resolve\nthe detected conflict.\nTaking a similar direction, we designed a barb towards UML state machines\nto model check whether policies are free of conflicts [5]. To this aim, we have\ndefined a semantics-preserving compositional mapping from Appel to UML,\nsuitable for model checking with UMC [19,37]. Since UMC operates on UML\nstate machines, the target of the mapping happens to be a subset of UML state\nmachines: policies and policy groups are defined using composite states, i.e. states\nwith structure reflecting the one imposed by the Appel operators onto policies\nand actions.\nA policy in Appel is built with triggers, conditions, and actions, just like\nstate machine transitions. Indeed, triggers, conditions and basic map onto the\nUML triggers, conditions and actions that decorate the machine state transitions,\nin the natural way. This is fortunate, since they are domain dependent, and we\ncan exploit the flexibility that UML provides w.r.t the language in which to\nexpress them, to best fit the domain peculiarities. Some more work is needed\nto map combination of actions since action combinators are defined in terms\nof the outcome of the actions under composition. However, this is true in a\nvery broad sense that need not consider the details of the action semantics, but\nonly an abstract notion of success and failure. Intuitively, these notions entail\nthat an action may complete normally (success) or may abort for some reason\n(failure). Again, Appel leaves the specifics of when an action succeeds or fails\nto the domain, and simply defines the success or failure of a composed action as\na combination of the successes and failures of the actions under composition.\nUMC is an on-the-fly model checker built to analyze UML state machines\nfor properties expressed in the action- and state-based branching-time temporal\nlogic UCTL [6]. In the case of policies, conflicts arise if a pair of conflicting\nactions is executed. To prove conflict freeness the full state space must be checked\nto exclude a path along which both actions are executed (in any order). The\napproach has been validated with the SENSORIA finance case study.\n6 Related Work\nMuch work has been published in the area of business process specifications,\nranging from natural English to structured languages used for expressing pro-\ncesses. BPEL [16] is considered the de\u2013facto standard for SOA-based business\nprocesses, despite its initial purpose as a service composition language.\nPolicies are descriptive and essentially provide information that is used to\nadapt the behaviour of a system. Most work deals with declarative policies.\nNotable examples are the formalisms to define access control policies, and to\ndetect conflicts [33,15]; formalisms for modelling the more general notion for\nusage control [38]; formalisms for SLA, i.e. to specify client requirements and\nservice guarantees, and to sign an agreement between them [9,8].\nIdeas of introducing flexibility into workflows have been presented by Reichert\nand Dadam [30] and in the Woklet system by Adams et al [3]. The formers discuss\na framework for dynamic process change, but do not include support for changes\nto the workflow in progress. The latter is based on an extensible repertoire of sub\u2013\nprocesses aligned to each task, one of which is chosen at runtime. The difference\nhere is that our adaptation focuses on changing the Service Levels, thus providing\nguidance in the design phase.\nIn AgentWork [27], rules can be used to drop or add individual tasks to\nworkflows. This is close to our reconfiguration policies [13,14]. However, there\nis no notion of tasks being linked to services in this work, and the policies are\nconcerned with task replacement rather than task implementation or service\nselection.\nA policy-driven approach is proposed in [34], to extend BPEL definitions with\ntransactional behaviour, as the one offered by WS-Coordination. To actually\nenforce the coordination behaviour for the BPEL processes, as specified by the\npolicies, a separate middleware system has been integrated in the architecture.\nAmong the various types of software tools available in the marketplace for\nBPM support, several business rules management tools (BR tools) became avail-\nable in recent years. Among the most complete and promising solutions are Blaze\nAdvisor [1] and JRules [2]. Recently BR tools have been including SOA integra-\ntion features, such as deploying rule services as part of an SOA [28].\nIt is worthwhile to locate StPowla in the grid provided by two popular clas-\nsification of the BR tools [4,35]. Being aimed at business analysts, StPowla\nfalls in the knowledge\u2013based BR tools, and can benefit the people\/document\nintensive processes, which it can support with respect to workflow agility and\nresource management via its reconfiguration\/refinement mechanisms. Histori-\ncally, the knowledge-based BR tools have been targeted to decision intensive\nbusiness processes. They foster \u2018rule\u2013driven programming\u2019, with no clear differ-\nence between the rules driving the high level behavior of the workflow and those\ngoverning the application low level, such as computation and inference rules. In\nthis respect, StPowla improves the overall structure of process representation\nwith its distinction between core process and variations along the SL dimensions.\n7 Conclusions and Future Work\nStPowla introduces a novel combination of policies and workflows that allows\nthe designer to capture the essence of a business process as workflow and to\nexpress variations in a descriptive way.\nIn this paper we have only considered static QoS requests, which involve no\nrun-time assessment of the resources. Consider now P4: \u201cIn a big branch, the\nrequest should be vetted and approved by different members of staff\u201d. With-\nout introducing cross-task requirements, the reqDoc for Assessment cannot be\ncompleted at design time, that is, it must be parametric and instantiated at\nrun\u2013time as a function of the identity of the vetter. On the capDocs side, one\nway is to introduce as many different task refinements as assessors, specify each\none statically, and let Grisu make the choice. Alternatively, one should change\nthe \u001cServiceInterface\u001d of the \u001cTaskRefinement\u001d, adding as a parameter the needed\ninfo (the assessor, for P4). In terms of service level, this amounts to characterize\nthe refinement as being able to use any specific resource of the requested type.\nWe already mentioned that in StPowla we assume a strict co-operation\nbetween task specifiers, policy specifiers and service implementers, which share\nthe same UML4SOA model of the business process. Looking for task refinements\nmade available by independent providers, involving e.g. interface adaptation, is\nleft for future work.\nReferences\n1. http:\/\/www.fico.com\/en\/Products\/DMTools\/Pages\/Fair-Isaac-Blaze-Advisor-\nSystem.aspx. Last visited: March 2009.\n2. http:\/\/www.ilog.com\/products\/businessrules\/index.cfm. Last visited: March 2009.\n3. M. Adams, A.H.M. ter Hofstede, D. Edmond, and W.M.P. van der Aalst. Worklets:\nA service-oriented implementation of dynamic flexibility in workflows. In R. Meers-\nman and Z. Tari, editors, On the Move to Meaningful Internet Systems 2006, vol-\nume 4275 of LNCS, pages 291\u2013308. Springer, 2006.\n4. M. Bajech and M. Krisper. A methodology and tool support for managing business\nrules in organizations. Information Systems, 30:423\u2013443, 2005.\n5. M. ter Beek, S. Gnesi, C. Montangero, and L. Semini. Detecting policy conflicts\nby model checking UML state machines. In S. Reiff-Marganiec and M. Nakamura,\neditors, Feature Interactions in Software and Communication System X, pages 59\u2013\n74. IOS Press, 2009.\n6. M.H. ter Beek, A. Fantechi, S. Gnesi, and F. Mazzanti. An Action\/State-\nBased Model-Checking Approach for the Analysis of Communication Protocols\nfor Service-Oriented Applications. In Revised Selected Papers of Formal Methods\nfor Industrial Critical Systems (FMICS\u201907), volume 4916 of LNCS, pages 133\u2013148.\nSpringer, 2007.\n7. L. Bocchi, S. Gorton, and S. Reiff-Marganiec. Engineering Service Oriented Appli-\ncations: From StPowla Processes to SRML Models. In J.L. Fiadeiro and P. In-\nverardi, editors, Fundamental Approaches to Software Engineering, volume 4961 of\nLecture Notes in Computer Science, pages 163\u2013178. Springer Verlag, 2008.\n8. M.G. Buscemi, L. Ferrari, C. Moiso, and U. Montanari. Constraint-Based Policy\nNegotiation and Enforcement for Telco Services. In TASE 2007, pages 463\u2013472.\nIEEE Computer Society, 2007.\n9. M.G. Buscemi and U. Montanari. Cc-pi: A constraint-based language for specifying\nservice level agreements. In R. De Nicola, editor, Programming Languages and\nSystems (ESOP 2007), pages 18\u201332, 2007.\n10. A. Charfi and M. Mezini. Hybrid web service composition: business processes\nmeet business rules. In M. Aiello, M. Aoyama, F. Curbera, and M. P. Papazoglou,\neditors, ICSOC, pages 30\u201338. ACM, 2004.\n11. A. Charfi and M. Mezini. AO4BPEL: An Aspect-oriented Extension to BPEL. In\nWorld Wide Web, pages 309\u2013344, 2007.\n12. S. Gorton, C. Montangero, S. Reiff-Marganiec, and L. Semini. StPowla: SOA,\nPolicies and Workflows. In Revised Selected Papers of Workshops, ICSOC\u201907,\nvolume 4907 of LNCS, pages 351\u2013362. Springer, 2007.\n13. S. Gorton and S. Reiff-Marganiec. Policy support for business-oriented web service\nmanagement. In Web Congress, 2006. LA-Web \u201906. Fourth Latin American, pages\n199\u2013202, Los Alamitos, CA, USA, Oct. 2006. IEEE Computer Society.\n14. S. Gorton and S. Reiff-Marganiec. Towards a task-oriented, policy-driven business\nrequirements specification for web services. In S. Dustdar, J. L. Fiadeiro, and\nA. P. Sheth, editors, Business Process Management, volume 4102 of LNCS, pages\n465\u2013470. Springer, 2006.\n15. J. Y. Halpern and V. Weissman. Using first-order logic to reason about policies. In\nProceedings of the Computer Security Foundations Workshop (CSFW\u201903), pages\n187\u2013201, Los Alamitos, CA, USA, 2003. IEEE Computer Society.\n16. IBM. BPEL4WS, Business Process Execution Language for Web Services, version\n1.1, 2003.\n17. F. Kamoun. A roadmap towards the convergence of business process management\nand service oriented architecture. Ubiquity, 8(14), 2007. ACM Press.\n18. N. Koch, P. Mayer, R. Heckel, L. Gonczy, and C. Montangero. UML\nfor service-oriented systems, SENSORIA EU-IST 016004 Deliverable D1.4.a.\nhttp:\/\/www.pst.ifi.lmu.de\/projekte\/Sensoria\/del 24\/ D1.4.a.pdf, 2007.\n19. F. Mazzanti. UMC User Guide v3.3. Technical Report 2006-TR-33, Istituto di\nScienza e Tecnologie dell\u2019Informazione \u201cA. Faedo\u201d, CNR, 2006.\n20. C. Montangero, S. Reiff-Marganiec, and L. Semini. Logic-based detection of con-\nflicts in APPEL policies. In F. Arbab and M. Sirjani, editors, Int. Symp. on\nFundamentals of Software Engineering, FSEN 2007, Tehran, Iran, volume 4767 of\nLNCS, pages 257\u2013271. Springer, 2007.\n21. C. Montangero, S. Reiff-Marganiec, and L. Semini. Logic-based conflict detection\nfor distributed policies. Fundamenta Informaticae, 89(4):511\u2013538, 2008.\n22. C. Montangero and L. Semini. Distributed states logic. In 9th International Sym-\nposium on Temporal Representation and Reasoning (TIME\u201902), Manchester, UK,\nJuly 2002. IEEE CS Press.\n23. C. Montangero, L. Semini, and S. Semprini. Logic Based Coordination for Event\u2013\nDriven Self\u2013Healing Distributed Systems. In R.De Nicola, G.Ferrari, and G. Mered-\nith, editors, Proc. 6th Int. Conf. on Coordination Models and Languages, CO-\nORDINATION\u201904, volume 2949 of LNCS, pages 248\u2013262, Pisa, Italy, Feb. 2004.\nSpringer-Verlag.\n24. Carlo Montangero and Laura Semini. Barbed model\u2013driven software development:\nA case study. Electron. Notes Theor. Comput. Sci., 207:171\u2013186, 2008.\n25. S. Moser and T. van Lessen. Developing, deploying and running a hello\nworld BPEL process with the Eclipse BPEL designer and Apache ODE,\npeople.apache.org\/\u223cvanto\/helloworld-bpeldesignerandode.pdf.\n26. A. Mukhija, D. S. Rosenblum, and A. Dingwall-Smith. Dino: Dynamic and adap-\ntive composition of autonomous services. www.cs.ucl.ac.uk\/research\/dino\/, 2007.\n27. R. Mu\u00a8ller, U. Greiner, and E. Rahm. Agent work: a workflow system supporting\nrule-based workflow adaptation. Data Knowl. Eng., 51(2):223\u2013256, 2004.\n28. S. Nu\u00b4n\u02dcez. ILOG JRules 6.5 brings rules to SOA. InfoWorld: Product Guide: ILOG\nJRules 2007: Review, 2007.\n29. Oasis Organization. Web services business process execution language version 2.0\n- primer, 2007.\n30. M. Reichert and Peter Dadam. ADEPT flex -supporting dynamic changes of work-\nflows without losing control. J. Intell. Inf. Syst., 10(2):93\u2013129, 1998.\n31. S. Reiff-Marganiec and K. J. Turner. Feature interaction in policies. Comput.\nNetworks, 45(5):569\u2013584, 2004.\n32. S. Reiff-Marganiec, K.J. Turner, and L. Blair. Appel: The accent project policy\nenvironment\/language. Technical Report TR-161, University of Stirling, Dec. 2005.\n33. F. Siewe, A. Cau, and H. Zedan. A compositional framework for access control\npolicies enforcement. In FMSE \u201903, pages 32\u201342. ACM Press, 2003.\n34. S. Tai. Composing web services specifications: Experiences in implementing policy-\ndriven transactional processes. In BTW, volume 65 of LNI, pages 547\u2013559. GI,\n2005.\n35. C. Teubner. The Forrester Wave: Human Centric BPM for Java Plat-\nforms, Q3 2007. http:\/\/www.forrester.com\/Research\/Document\/Excerpt\/-\n0,7211,38886,00.html, 2007.\n36. K. J. Turner, S. Reiff-Marganiec, L. Blair, J. Pang, T. Gray, P. Perry, and J. Ireland.\nPolicy support for call control. Computer Standards and Interfaces, 28(6):635\u2013649,\n2006.\n37. UMC v3.5. Online: http:\/\/fmt.isti.cnr.it\/umc.\n38. X. Zhang, F. Parisi-Presicce, R. Sandhu, and J. Park. Formal model and policy\nspecification of usage control. ACM Trans. Inf. Syst. Secur., 8(4):351\u2013387, 2005.\n"}