{"doi":"10.1007\/3-540-46037-3_6","coreId":"8555","oai":"oai:eprints.brighton.ac.uk:2219","identifiers":["oai:eprints.brighton.ac.uk:2219","10.1007\/3-540-46037-3_6"],"title":"Generating Euler diagrams","authors":["Flower, Jean","Howse, John"],"enrichments":{"references":[{"id":42751387,"title":"Collected Papers.","authors":[],"date":"1933","doi":"10.1038\/131639b0","raw":"C. Peirce. Collected Papers. Harvard University Press, 1933.","cites":null},{"id":42751385,"title":"Constraint diagrams: Visualising invariants in object oriented models. proceedings of OOPSLA97,","authors":[],"date":"1997","doi":"10.1145\/263700.263756","raw":"S. Kent. Constraint diagrams: Visualising invariants in object oriented models. proceedings of OOPSLA97, ACM SIGPLAN Notices 32, 1997.","cites":null},{"id":42751388,"title":"Decidability of string graphs.","authors":[],"date":"2001","doi":"10.1145\/380752.380807","raw":"M. Schaefer and D. S\u02c7tefanikovic\u02c7. Decidability of string graphs. Proc 33rd ACM Symposium on the Thy of Comp, p.241-246, 2001.","cites":null},{"id":42751375,"title":"Drawing hypergraphs in the subset standard.","authors":[],"date":"1984","doi":"10.1007\/3-540-44541-2_15","raw":"F. Bertault, P. Eades. Drawing hypergraphs in the subset standard. Springer Verlag, Graph Drawing proceedings, LNCS 1984, 2000.","cites":null},{"id":42751378,"title":"Formalising Spider Diagrams.","authors":[],"date":"1999","doi":"10.1109\/vl.1999.795884","raw":"J. Gil, J. Howse, S. Kent. Formalising Spider Diagrams. Proc. IEEE Symposium on Visual Languages (VL99), Tokyo, Sept 1999. IEEE Comp Soc Press, 130-137.","cites":null},{"id":42751374,"title":"Graph Drawing: algorithms for the visualization of graphs.","authors":[],"date":"1999","doi":"10.1016\/0925-7721(94)00014-x","raw":"G. Di Battista, P. Eades, R. Tamassia, I. G. Tollis. Graph Drawing: algorithms for the visualization of graphs. Prentice Hall, 1999.","cites":null},{"id":42751376,"title":"Graph Theory 1736-1936 OUP,","authors":[],"date":"1976","doi":"10.1086\/352170","raw":"N. Biggs, E. K. Lloyd, R. J. Wilson. Graph Theory 1736-1936 OUP, 1976.","cites":null},{"id":42751377,"title":"Lettres a Une Princesse d\u2019Allemagne,","authors":[],"date":null,"doi":"10.5962\/bhl.title.16687","raw":"L. Euler. Lettres a Une Princesse d\u2019Allemagne, vol 2. 1761. Letters No. 102\u2013108.","cites":null},{"id":42751381,"title":"Logic and Visual Information.","authors":[],"date":"1995","doi":"10.2307\/2275831","raw":"E. Hammer. Logic and Visual Information. CSLI Publications, Stanford, 1995.","cites":null},{"id":42751384,"title":"On diagram tokens and types. Accepted for Diagrams","authors":[],"date":"2002","doi":"10.1007\/3-540-46037-3_18","raw":"J. Howse, F. Molina, S.-J. Shin, J. Taylor. On diagram tokens and types. Accepted for Diagrams 2002.","cites":null},{"id":42751383,"title":"On the completeness and expressiveness of spider diagram systems.","authors":[],"date":"2000","doi":"10.1007\/3-540-44590-0_8","raw":"J. Howse, F. Molina, J. Taylor. On the completeness and expressiveness of spider diagram systems. Proc. Diagrams 2000, Edinburgh, Sept 2000. LNAI 1889, Springer-Verlag, 26-41.","cites":null},{"id":42751391,"title":"On the diagrammatic and mechanical representation of propositions and reasonings.","authors":[],"date":null,"doi":"10.1080\/14786448008626877","raw":"J. Venn. On the diagrammatic and mechanical representation of propositions and reasonings. Phil.Mag., 1880. 123.","cites":null},{"id":42751386,"title":"Reasoning with extended Venn-Peirce diagrammatic Systems.","authors":[],"date":"2001","doi":null,"raw":"F. Molina. Reasoning with extended Venn-Peirce diagrammatic Systems. PhD Thesis, University of Brighton, 2001.","cites":null},{"id":42751390,"title":"The Logical Status of Diagrams.","authors":[],"date":"1994","doi":"10.1017\/cbo9780511574696","raw":"S.-J. Shin. The Logical Status of Diagrams. CUP, 1994.","cites":null},{"id":42751392,"title":"The Object Constraint Language: Precise Modeling with UML.","authors":[],"date":"1998","doi":"10.1007\/978-3-540-48480-6_12","raw":"J. Warmer and A. Kleppe. The Object Constraint Language: Precise Modeling with UML. Addison-Wesley, 1998.","cites":null},{"id":42751380,"title":"Towards a formalisation of constraint diagrams.","authors":[],"date":"2001","doi":"10.1109\/hcc.2001.995241","raw":"J. Gil, J. Howse, S. Kent, J. Gil. Towards a formalisation of constraint diagrams. Proc IEEE Symp on Human-Centric computing (HCC\u201901). Stresa, Sept 2001, p.72-79.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2002-01-01","abstract":"This article describes an algorithm for the automated generation of any Euler diagram starting with an abstract description of the diagram. An automated generation mechanism for Euler diagrams forms the foundations of a generation algorithm for notations such as Harel's higraphs, constraint diagrams and some of the UML notation. An algorithm to generate diagrams is an essential component of a diagram tool for users to generate, edit and reason with diagrams. The work makes use of properties of the dual graph of an abstract diagram to identify which abstract diagrams are \"drawable\" within given wellformedness rules on concrete diagrams. A Java program has been written to implement the algorithm and sample output is included","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Springer-Verlag","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.brighton.ac.uk:2219<\/identifier><datestamp>\n      2015-04-20T15:46:49Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D47303030:47313030<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.brighton.ac.uk\/2219\/<\/dc:relation><dc:title>\n        Generating Euler diagrams<\/dc:title><dc:creator>\n        Flower, Jean<\/dc:creator><dc:creator>\n        Howse, John<\/dc:creator><dc:subject>\n        G100 Mathematics<\/dc:subject><dc:description>\n        This article describes an algorithm for the automated generation of any Euler diagram starting with an abstract description of the diagram. An automated generation mechanism for Euler diagrams forms the foundations of a generation algorithm for notations such as Harel's higraphs, constraint diagrams and some of the UML notation. An algorithm to generate diagrams is an essential component of a diagram tool for users to generate, edit and reason with diagrams. The work makes use of properties of the dual graph of an abstract diagram to identify which abstract diagrams are \"drawable\" within given wellformedness rules on concrete diagrams. A Java program has been written to implement the algorithm and sample output is included.<\/dc:description><dc:publisher>\n        Springer-Verlag<\/dc:publisher><dc:date>\n        2002-01-01<\/dc:date><dc:type>\n        Contribution to conference proceedings in the public domain<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n          Flower, Jean and Howse, John  (2002) Generating Euler diagrams  In: Proceedings of the 2nd International Conference, Diagrams 2002, Callaway Gardens, GA, USA, 18-20 April, 2002.     <\/dc:identifier><dc:relation>\n        http:\/\/www.springerlink.com\/content\/xljkfm6c983jf8w1\/?p=ec86d25ca48545538229f0882ad96a79\u03c0=5<\/dc:relation><dc:relation>\n        10.1007\/3-540-46037-3_6<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.brighton.ac.uk\/2219\/","http:\/\/www.springerlink.com\/content\/xljkfm6c983jf8w1\/?p=ec86d25ca48545538229f0882ad96a79\u03c0=5","10.1007\/3-540-46037-3_6"],"year":2002,"topics":["G100 Mathematics"],"subject":["Contribution to conference proceedings in the public domain","PeerReviewed"],"fullText":"Generating Euler Diagrams\nJean Flower and John Howse\nSchool of Computing and Mathematical Sciences, University of Brighton,\nLewes Road, Brighton BN2 4GJ,UK\n{J.A.Flower,John.Howse}@bton.ac.uk fax +44 1273 642405,\nhttp:\\\\www.it.bton.ac.uk\\research\\vmg\\VisualModellingGroup.html\nAbstract. This article describes an algorithm for the automated gener-\nation of any Euler diagram starting with an abstract description of the\ndiagram. An automated generation mechanism for Euler diagrams forms\nthe foundations of a generation algorithm for notations such as Harel\u2019s\nhigraphs, constraint diagrams and some of the UML notation. An algo-\nrithm to generate diagrams is an essential component of a diagram tool\nfor users to generate, edit and reason with diagrams.\nThe work makes use of properties of the dual graph of an abstract di-\nagram to identify which abstract diagrams are \u201cdrawable\u201d within given\nwellformedness rules on concrete diagrams. A Java program has been\nwritten to implement the algorithm and sample output is included.\n1 Introduction and background\nEuler diagrams consist of contours, simple closed curves, which split the plane\ninto zones. A concrete Euler diagram is a drawing which represents information\nabout sets and their intersections. This information can be encapsulated by an\nabstract diagram. An abstract (Euler) diagram consists of contours, which are\njust abstract notions, and information about how those contours are used to\ngive a set of zones. An abstract diagram has zero or many concrete representa-\ntions, and this paper is primarily concerned with the construction of concrete\nrepresentations from an abstract description. An important consequence is the\nidentification of a complete set of drawable abstract diagrams, with tests for\ndrawability made at the abstract level. This work supports the development of\na constraint diagram tool, and this application is discussed in subsection 1.1.\nDefinitions of the terms \u201cconcrete (Euler) diagram\u201d, \u201cabstract (Euler) diagram\u201d\nare in subsection 1.3, and the algorithm for construction of concrete diagrams is\nin section 2.\n1.1 An application to motivate the work\nThe construction of a concrete representation of an abstract diagram is useful\nin many environments. In this section we describe one application for the work.\nConstraint diagrams [6] convey a subset of first-order predicate calculus con-\ncerning sets and their elements. The simplest kind of constraint diagrams are\nbook\nborrowed onhold onshelfreservedborrowed\nbook titlereservation\ncopy\nborrowed\nisfor\ncopies\nFig. 1. An Euler diagram, a spider diagram and a constraint diagram\nEuler diagrams [4], which make statements about the enclosure and intersection\nof sets in the system. The first of three diagrams in figure 1 is an Euler diagram\nwhich conveys the fact no book is both reserved and borrowed.\nThe second diagram in figure 1 is a spider diagram [5] showing three states for\na book: \u2018borrowed\u2019, \u2018on the shelf\u2019, or \u2018on hold\u2019. No book may be in two states,\nand there is a book in one of the states. A further extension of the notation\nadds universal elements, and relational navigation [6], giving the full notation\nfor constraint diagrams. The third diagram in figure 1 is a constraint diagram\nwhich states that reservations are only held on titles for which there is a copy\nin stock. Furthermore, there is a copy that is in stock and not in the borrowed\nstate.\nTextual notations (eg.OCL [17]) and diagrammatic notations (eg. constraint\ndiagrams) can be used for the same purpose. Many statements can be more\nclearly expressed in diagrammatic form. Diagrams can also be used fruitfully\nfor reasoning ([7], [8]), with animation showing the logical steps involved in an\nargument.\nReasoning by transforming diagrams holds potential for the future, especially\nif are tools available to assist. Such a tool would be an editor (be able to assist\nthe user with creation and editing of diagrams) but also needs an understand-\ning of the diagram. This understanding determines whether two constraints are\nlogically related and enables animated reasoning with diagrams. Flexible and\ncombined use of textual and diagrammatic notations requires easy transforma-\ntion from one notation to the other, in particular generating diagrams from\ntextual notation.\n1.2 Related work\nThere is much work on graph-drawing algorithms, see e.g. [1].\nEuler diagrams are similar to the hypergraphs discussed in [2]. A hypergraph\nis given by a set of contours, and a set of points. Each contour is specified as\ncontaining some points and excluding others. This is similar to the problem\naddressed here, except the description of an Euler diagram places conditions\non the make-up of the regions of the diagram, and not just on a set of specific\npoints. Our Euler diagrams could be thought of as examples of hypergraphs.\nThere is also work on string graphs in e.g. [14]. The authors cast the problem\nof the drawability of Euler diagrams as equivalent in complexity to the problem\nof recognising string graphs.\nIn the above references the authors use weaker definitions of a well-formed\ndiagram.\n1.3 Key definitions\nAn abstract Euler diagram comprises a set of contours and a set of zones which\nare subsets of the set of contours. This corresponds to type-syntax in [9].\nDefinition 1. An abstract (Euler) diagram is a pair: d = \u3008C(d),Z(d)\u3009 where\n(i) C(d) is a finite set whose members are called contours.\n(ii) Z(d) \u2286 PC(d) is the set of zones of d, so z \u2208 Z(d) is z \u2286 C(d).\n(iii)\n\u22c3\nz\u2208Z(d)\nz = C(d)\n(iv) The empty set {} \u2208 Z(d).\nThe set of abstract diagrams is denoted D.\nExample 1 (An abstract diagram). \u3008{a, b, c} , {{} , {a} , {a, b} , {b} , {c}} \u3009 \u2208 D.\nThe condition that the empty set is included as a zone could be omitted, and\nthis work on converting abstract to concrete diagrams would hold for the subset\nof abstract diagrams which did include the empty set as a zone. In a concrete\ndiagram, the zone corresponding to the empty set will be the zone outside all\ncontours of the diagram.\nA concrete Euler diagram is a set of labelled contours (simple closed curves)\nin the plane, each with a unique label. A zone is a connected component of the\ncomplement of the contour set. Each zone is contained in a set of contours. This\ncorresponds to token-syntax in [9].\nDefinition 2. A concrete (Euler) diagram is a triple d\u02c6 = \u3008L\u0302(d\u02c6), C\u0302(d\u02c6), Z\u0302(d\u02c6)\u3009\nwhose components are defined as follows:\n(i) C\u0302(d\u02c6) is a finite set of simple closed curves, contours, in the plane R2. Each\ncontour has a unique label from the set L\u0302(d\u02c6).\n1. Contours meet transversely and without triple points.\n2. Each component z\u02c6 \u2208 R2\u2212 \u22c3\nc\u02c6\u2208bC(d\u02c6) c\u02c6 is uniquely identified by a set of contours\nX \u2282 C\u0302(d\u02c6) with z\u02c6 = \u22c2\nc\u02c6\u2208X\ninterior (c\u02c6) \u2229 \u22c2\nc\u02c6\u2208bC(d\u02c6)\u2212X exterior (c\u02c6) .\n(ii) A zone is a connected component of R2\u2212 \u22c3\nc\u02c6\u2208bC(d\u02c6) c\u02c6. The set of zones of d\u02c6 is\ndenoted Z\u0302(d\u02c6).\n(iii) A zone z\u02c6 is uniquely determined by the set of contour labels L\u0302(z\u02c6) for the\ncontours which contain the zone.\nThe set of concrete diagrams is denoted D\u0302.\nExample 2 (A concrete diagram). Let d\u02c6 be the concrete diagram given in figure 2.\nC\u0302(d\u02c6) has three elements (the three contours shown) L\u0302(d\u02c6) = {a, b, c} and Z\u0302(d\u02c6)\nhas five elements, uniquely determined by the label sets {}, {a}, {a, b}, {b} and\n{c}.\na\r b\r c\r\na concrete Euler diagram\r illegal Euler diagrams\r\nFig. 2. Well-formed and not well-formed concrete diagrams\nThe rules about transverse crossing, absence of triple points and connectedness\nof zones are the chosen well-formedness rules for this paper. Figure 2 shows a\nwell-formed concrete diagram and some which are not well-formed. In future\nwork, it is intended to extend this work to accommodate different definitions of\n\u201cwell-formed\u201d concrete diagrams.\nDefinition 3. The mapping ab : D\u0302 \u2192 D (\u201cab\u201d for \u201cabstractify\u201d) forgets posi-\ntioning of the contours. It is defined by\nab\n(\n\u3008L\u0302(d\u02c6), C\u0302(d\u02c6), Z\u0302(d\u02c6)\u3009\n)\n= \u3008L\u0302(d\u02c6),\n{\nL\u0302(z\u02c6) : z\u02c6 \u2208 Z\u0302(d\u02c6)\n}\n\u3009\nExample 3 (Abstractification). Let d\u02c6 be the concrete diagram given in figure 2.\nC(ab(d\u02c6)) = {a, b, c} and Z(ab(d\u02c6)) = {{} , {a} , {a, b} , {b} , {c}}.\nDefinition 4. A concrete diagram d\u02c6 represents or complies with an abstract\ndiagram d if and only if d = ab(d\u02c6). An abstract diagram which has a compliant\nconcrete representation is drawable.\nExample 4 (Drawability). The abstract diagram \u3008 {a, b} , {{} , {a, b}} \u3009 is undraw-\nable. This can be investigated by futile attempts to produce a diagram (the\ntemptation to draw two coincident concrete contours violates the condition that\ncontours meet transversely). Later in the paper, corollary 1 is used to show that\nthere is no concrete representation for the abstract diagram.\nThis paper is about the construction of concrete representations of abstract\ndiagrams. We seek an inverse of the map ab : D\u0302 \u2192 D.\n2 A sketch of the algorithm\nWe use the concept of a plane dual graph of a concrete diagram.\nDefinition 5. A concrete labelled graph G\u02c6 is a triple \u3008L\u0302(G\u02c6), V\u0302(G\u02c6), E\u0302(G\u02c6)\u3009 where\nthe components are defined as follows:\n(i) L\u0302(G\u02c6) is a set of labels for the graph\n(ii) V\u0302(G\u02c6) is a set of vertices. Each vertex v\u02c6 is labelled with L\u0302(v\u02c6) \u2286 L\u0302(G\u02c6) and\neach vertex has a position in the plane R2.\n(iii) E\u0302(G\u02c6) is a set of edges. Each edge e\u02c6 is a pair of vertices from V\u0302(G\u02c6). The\nlabel sets on adjacent vertices must have singleton symmetric difference (one\nset is the other with a single additional element). The edges can be associated\nwith the label which distinguishes the labels of the end-vertices.\nThe set of concrete labelled graphs is denoted L\u0302G.\nNote that although the vertices of a concrete labelled graph have a position in\nthe plane, the edges are simply pairs of vertices. The edges are not associated\nwith curves in the plane ie. we have a geometric graph in [1].\nDefinition 6. The map pdual : D\u0302 \u2192 PL\u0302G (\u201cpdual\u201d for \u201cplane dual\u201d) is defined\nby\nG\u02c6 \u2208 pdual\u3008L\u0302(d\u02c6), C\u0302(d\u02c6), Z\u0302(d\u02c6)\u3009\nif and only if L\u0302(G\u02c6) = L\u0302(d\u02c6) and there is a bijection V\u0302(G\u02c6) \u2192 Z\u0302(d\u02c6); v 7\u2192 z\u02c6 if\nand only if v is inside the part of the plane specified by z\u02c6 and the labelling\nmatches: L\u0302(v\u02c6) = L\u0302(z\u02c6). Finally, e \u2208 E\u0302(G\u02c6) if and only if the corresponding zones\nare topologically adjacent in the plane.\nAny concrete labelled graph gives an abstract labelled graph, by forgetting vertex\npositions.\nDefinition 7. An abstract labelled graph is a triple \u3008L(G),V(G), E(G)\u3009 where\nthe components are defined as follows:\n(i) L(G) is a set of labels for the graph\n(ii) V(G) is a set of vertices. Each vertex v\u02c6 is labelled with L(v) \u2286 L(G).\n(iii) E(G) is a set of edges. Each edge e\u02c6 is a pair of vertices in V(G), where\nthe vertex labels must have a singleton symmetric difference (one vertex set\nexceeds the other by a single additional element). The label which distinguishes\nthe end vertices can be used to label the edge.\nThe set of abstract labelled graphs is denoted LG.\nExample 5 (An abstract labelled graph). The abstract labelled graph G has two\nlabels: L(G) = {a, b}, three vertices: V(G) = {v1, v2, v3}, the vertices labelled\nas follows: L(v1) = {}, L(v2) = {a}, L(v3) = {a, b} and one edge: E(G) =\n{{v1, v2}}. Note that a second edge {v2, v3} could have been added to this ex-\nample, but the pair {v1, v3} would not be admitted as an edge because of the\nlabels on the vertices v1 and v3.\nDefinition 8. The map f : L\u0302G \u2192 LG (\u2018f \u2019 for \u2018forgetful\u2019) is defined by forgetting\npositional information in the vertex set V\u0302(G\u02c6).\nProposition 1. Given a concrete diagram d\u02c6 \u2208 D\u0302, and two plane duals G\u02c61, G\u02c62 \u2208\npdual(d\u02c6), their abstract labelled graphs are equal: f(G\u02c61) = f(G\u02c62).\nDefinition 9. Although a concrete diagram d\u02c6 has many plane dual graphs given\nby the set pdual(d\u02c6), we can refer to \u201cthe\u201d abstract dual graph of a concrete\ndiagram, abG(d\u02c6) \u2208 LG.\nDefinition 10. The map diag : LG \u2192 D (\u201cdiag\u201d for \u201cdiagrammise\u201d) is defined\nby \u3008L(G),V(G), E(G)\u3009 7\u2192 \u3008C(d),Z(d)\u3009 where the abstract contour set is the label\nset L(G) = C(d) and the zones are the vertices V(G) = Z(d).\nThis map can be thought of as forgetting the edge information in an abstract\nlabelled graph.\nExample 6 (The diag mapping). Let G be the abstract labelled graph given in\nexample 5. The abstract diagram diag(G) = d has contours C(d) = {a, b, c} and\nzones {{} , {a} , {a, b}}\nWhat we have so far is illustrated in the following commutative diagram (shown\non the left) which shows\u201cforgetful\u201d mappings as information is lost moving from\na concrete environment to the abstract level.\nD\u0302 pdual\u2212\u2212\u2212\u2212\u2192 L\u0302G D\u0302 \u2190\u2212\u2212\u2212\u2212 L\u0302G\nab\n\uf8e6\uf8e6y \uf8e6\uf8e6yf x\uf8e6\uf8e6 x\uf8e6\uf8e6\nD \u2190\u2212\u2212\u2212\u2212\ndiag\nLG D \u2212\u2212\u2212\u2212\u2192 LG\nThe strategy of the algorithm is to attempt to find inverses of the functions pdual,\nf and diag (inverses shown on the right). A mapping from abstract diagrams to\nconcrete diagrams will be found which factors through abstract dual graphs and\nplane dual graphs. Factoring the problem through dual graphs reduces one task\nto three steps, and allows the use of existing knowledge from graph theory and\ngraph drawing. As the work progresses, we will see that some inverse functions\ncannot be defined on the whole domain, and in this way, some abstract diagrams\nbecome classified as undrawable. The following three sections of the paper cover\nthree key steps:\n(i) map from abstract diagrams to abstract labelled graphs: D \u2192 LG\n(ii) map from abstract labelled graphs to concrete labelled graphs: LG \u2192 L\u0302G\n(iii) map from concrete labelled graphs to concrete diagrams: L\u0302G \u2192 D\u0302\ncontours = {\ra\r, \rb\r}\r\nzones = {{}, {\ra\r}, {\ra\r, \rb\r}}\r\nvertices\r = {{}, {\ra\r}, {\ra\r, \rb\r}}\r\nedges = {{{},{\ra\r}},{{\ra\r},{\ra\r,\rb\r}}}\r\n{}\r {\ra\r}\r\n{\ra\r, \rb\r}\ra\r b\r\n{}\r {\ra\r}\r\n{\ra\r, \rb\r}\ra\r b\r\na\r b\r\nFig. 3. The steps of the algorithm\n2.1 Creation of an abstract labelled graph from an abstract diagram\nDefinition 11. The map superDual : D \u2192 LG is defined by \u3008C(d),Z(d)\u3009 7\u2192\n\u3008C(d),Z(d), E(G)\u3009 where the edges include all possible e = (v1, v2) where v1 and\nv2 have singleton symmetric difference.\nThe superdual of an abstract diagram uses the contours for labels and the zones\nfor vertices. Deriving the superdual of an abstract diagram d and mapping back\nto an abstract diagram recovers d, having constructed edges between some ver-\ntices and then forgotten the edges again.\nProposition 2. If d \u2208 D then diag(superDual(d)) = d.\nFigure 3 illustrates vertex and edge-labelling. In small cases (all examples with\nthree or fewer contours), the abstract labelled dual graph of a concrete diagram\nabG(d\u02c6) is exactly the super-dual of its abstract diagram superDual(ab(d\u02c6)). How-\never, figure 4 shows that vertex labels can differ by a single contour label even\nwhen the zones are not adjacent in the concrete diagram. The vertices {s} and\n{p, s} in superDual(ab(d\u02c6)) are adjacent, but they are not adjacent in abG(d\u02c6).\np\r\nq\r\nr\r s\r\n{\rp\r, \rs\r}\r\n{\rs\r}\r\np\r\nq\r\nr\r s\r\nFig. 4. The dual graph of the Venn diagram on four contours\nProposition 3. Let d\u02c6 be a concrete diagram. Then abG(d\u02c6) \u2208 LG is a subgraph\nof superDual(ab(d\u02c6)) which includes all vertices (sometimes called a wide sub-\ngraph).\nThe abstract dual of a concrete diagram satisfies connectivity conditions:\nDefinition 12 (The connectivity conditions). An abstract labelled graph\n\u3008L(G),V(G), E(G)\u3009 satisfies the connectivity conditions if it is connected and,\nfor all labels l \u2208 L(G), the subgraphs G+ (l) generated by vertices whose labels\ninclude l, and G\u2212 (l) generated by vertices whose labels exclude l are connected.\nTheorem 1 (The connectivity theorem). Let d\u02c6 be a concrete diagram. Then\nabG(d\u02c6) passes the connectivity conditions.\nThe proof of this result uses some results from topology concerning paths in the\nplane.\nCorollary 1 (The connectivity test). If d is an abstract diagram whose\nsuper-dual fails the connectivity conditions then d is undrawable.\nThis corollary provides a practical condition for drawability at the abstract di-\nagram level.\nExample 7. The abstract diagram of example 4 \u3008 {a, b} , {{} , {a, b}} \u3009 has super-\ndual with two vertices, labelled {} and {a, b} and no edges. The super-dual is\ndisconnected, and so the abstract diagram is undrawable.\n2.2 Creation of a plane dual graph from an abstract labelled graph\nIf we are given an abstract labelled graph which passes the connectivity condi-\ntions, it is potentially the abstract graph of a concrete diagram. To begin the\nconstruction of such a concrete diagram (if it exists), assign points in the plane\nto vertices of the graph to give a concrete labelled graph. Recall that the vertices\nof a concrete labelled graph have positions in the plane, but the edges are simply\npairs of vertices, rather than curves in the plane.\nThe dual of a concrete diagram can be drawn as a plane graph. Given an\nabstract labelled graph G, it is potentially the abstract graph of a concrete\ndiagram only if it is planar. If G is non-planar, it may still be possible to remove\nedges from it to leave a reduced planar graph which still passes the connectivity\nconditions. For example, edge removal is necessary to produce a plane dual for\nthe Venn diagram on four contours. Different choices of edge-removal lead to\ndifferent concrete representations.\nFor non-planar abstract labelled graphs, further work is needed to ascertain a\nsound strategy for edge-removal (maintaining connectivity conditions) to give a\nplanar graph where possible. Strategies exist in the literature for removing edges\nto gain planarity, but in this context, attention must be paid to the connectivity\nconditions.\nExample 8 (Edge-removal and connectivity). The following abstract diagram has\na superdual which passes the connectivity conditions. However, it is non-planar\nand if any edge is removed, the connectivity conditions fail. It has five con-\ntours {a, b, c, d, e} and fifteen zones. {{}, {b}, {c}, {d}, {e}, {a, b}, {a, c}, {a, d},\n{a, e}, {a, b, c}, {a, b, d}, {a, b, e}, {a, c, d}, {a, c, e}, {a, d, e}} (inspired by an ex-\nample in [14]). The superdual is homeomorphic to the complete graph K5.\nIn the current implementation of the algorithm, an iterative planarising step\nis used which is not optimal but works in small cases. An improved planarising\nstep should take account of the rich structure of the abstract graph given by the\nlabelling on the vertices. Connectivity conditions reveal the graph as connected\nand bipartite (by cardinality of vertex labels). The fact that edges only join\nvertices with singleton symmetric difference provides more structure within the\ndual graph.\nWhatever planarising step is used, the aesthetics of the result are unimpor-\ntant at this stage. The placing of the vertices determines faces of the plane graph.\nThe next step extracts the faces as as combinatorial constructions and makes a\nnew embedding in the plane.\n2.3 Creation of concrete contours from a plane labelled graph\nGiven a concrete labelled graph with labelled vertices and edges, the faces of\nthe graph are the starting point for constructing the contours for a concrete\ndiagram. We would like to be able to construct concrete contours which give one\nzone for each graph vertex, and no other zones. The labels on the zones should\nmatch the labels on the graph vertices. The strategy is to draw the edges of\n{}\r\n{\rc\r}\r{\ra\r}\r\n{\rb\r}\r\n{\ra, b\r}\r {}\r\n{\rc\r}\r{\ra\r}\r\n{\rb\r}\r\n{\ra, b\r}\r {}\r\n{\rc\r}\r{\ra\r}\r\n{\rb\r}\r\n{\ra, b\r}\r\nFig. 5. Arcs across dual faces\nthe concrete labelled graph, and to draw arcs across faces to join the midpoints\nof edges. These arcs will combine to create the closed contours of a concrete\ndiagram (see figure 5). The labels on the edges around each face determine how\nthe arcs will intersect.\nDefinition 13. A face-cycle of face f in concrete labelled graph G is a cycle of\nedges in the boundary of f which make up a cycle in G. The contour labels in a\nface-cycle can be cycled, or reversed, giving another representative of the same\ncycle.\n{}\r\n{\rc\r}\r\n{\ra\r}\r\n{\rb\r}\r\n{\ra, b\r}\r\na\r\na\r\nb\r\nb\r\n{}\r\n{\rc\r}\r\n{\ra\r}\r\n{\rb\r}\r\n{\ra, b\r}\r\na\r\na\r\nb\r\nb\rc\r\nface-cycle = <\ra\r,\rb\r,\ra\r,\rb\r>\r face-cycle = <\ra\r,\rb\r,\ra\r,\rb\r>\r\nNB:  not\r <\ra\r,\rb\r,\ra\r,\rb\r,\rc\r,\rc\r>\r\n{}\r\n{\rc\r}\r\n{\ra\r}\r\n{\rb\r}\r\n{\ra, b\r}\r\na\r\na\r\nb\r\nb\rc\r\nface-cycles =\r\n<\ra\r,\rb\r,\ra\r,\rb\r>, <\rd\r,\re\r,\rd\r,\re\r>\r\n{\rc\r,\rd\r}\r\n{\rc,e\r}\r\ne\r\ne\r\nd\r\nd\r\n{\rc,d,e\r}\r\nFig. 6. Face-cycles of a concrete labelled graph\nFor internal (bounded) faces of a concrete labelled graph G, there is a single\nface-cycle made up of a subset of the boundary edges. However, an outside\n(unbounded) face of G may have multiple face-cycles as shown in figure 6.\nLemma 1. Let f be a face of a concrete labelled graph. For any contour label c,\nthere is an even number of occurrences of c in a face-cycle of f .\nThe proof uses a count of symbols in vertex-labels.\nLemma 2. Let G be a concrete labelled graph whose abstract labelled graph\npasses the connectivity conditions. Take a face fand a contour label c. There\nare zero or two occurrences of c in the face-cycle of f .\nThe proof of this result is similar to a proof of the five-colouring theorem which\nuses Kempe chains [3]. Use connectivity and lemma 1.\nWhen constructing the concrete contours, one zone will be constructed around\neach plane labelled vertex. It is important to ensure that the arcs across each\nface intersect so that no additional unwanted zone(s) appear in the face. Prob-\nlematic cases with unwanted concrete zones are shown in figure 7. The unwanted\nzones could be either zones which aren\u2019t specified by the vertex set, or a second\ncomponent of an existing zone, giving disconnected zones. The first diagram in\nc\r\nc\r\nb\r b\r\na\ra\r\nc\r\nc\r\nb\r\nb\r\na\r\na\r\nFig. 7. Introducing unwanted zones\nfigure 7 can be resolved by rendering the face convex and using linear arcs across\nthe face.\nIn the second diagram, however the arcs are placed without triple points,\nan unwanted zone will appear because of the sequence of edges around the face.\nThe potential introduction of unwanted zones in this way provides another set of\nconditions for construction of a concrete diagram. The following definition and\ntheorem set up enough notation to determine whether or not a concrete labelled\ngraph can be used to construct a compliant concrete diagram.\nDefinition 14. Define the crossing index of a face-cycle. For each pair of con-\ntour labels which occur in the face-cycle, determine whether the pairs are nested.\nIf the letters are not nested, the pair contributes 1 to the crossing index, other-\nwise the pair contributes 0 to the crossing index. Symbols a and b are nested in\nabba, but not nested in abab.\nExample 9 (Crossing index). The cycle \u3008a, b, c, a, b, c\u3009 has crossing index equal to\n3, because all pairs {a, b}, {b, c}, and {a, c} give non-nested sub-cycles\n\u3008a, b, a, b\u3009, \u3008b, c, b, c\u3009 and \u3008a, c, a, c\u3009. Another example, \u3008a, b, c, b, a, c\u3009, has crossing\nindex equal to 2.\nIf a face-cycle has n symbols, each occurring twice, then its crossing index x is\nbounded by 0 \u2264 x \u2264 n(n\u22121)2 .\nTheorem 2 (The face-conditions). Let d be a concrete diagram, and P a\nplane dual graph. For each face-cycle of a plane dual graph, with crossing index\nx and length 2n, the crossing index is x = n\u2212 1.\nThe proof uses Euler\u2019s formula for plane graphs and the handshaking lemma.\nCorollary 2 (The face-cycle conditions). If P is a concrete labelled graph\nwith a face-cycle whose crossing index is x and number of edges is 2n with\nx 6= n\u2212 1, then P cannot be used to construct concrete contours with one zone\ncontaining each vertex.\nExample 10 (Face-conditions). In the left-hand diagram of figure 8, there are\nthree faces and two face-cycles. The four-sided faces have crossing index x = 1\nand cycle length n = 2, and the six-sided face has crossing index x = 2 and cycle\nlength n = 3. The concrete labelled graph passes the face-conditions.\nThe abstract diagram with zones {{} , {a} , {a, b} , {a, b, c} , {b, c} , {c}} is un-\ndrawable (see the second graph in figure 8). Its plane dual graph is a cycle of six\n{\rb\r, \rc\r}\r {\ra\r}\r\nc\r{\rc\r}\r {\r}\r\nc\r\nb\r\nb\r\na\r\na\r\n{\ra, b\r}\r\nface-cycle\r\n<\ra\r,\rb\r,\rc\r,\ra\r,\rb\r,\rc\r> has \rn\r = 3 and \rx\r = 3\r\nthis fails the face-conditions\r\n{\ra, b, c\r}\r\n{\ra\r, \rc\r}\r {\ra\r}\r\nc\r{\rc\r}\r {\r}\r\nc\r\nb\r b\r\na\ra\r\n{\ra, b\r}\r{\ra, b, c\r}\r\n{\ra\r, \rc, d\r}\r\n{\ra\r, \rc, d, e\r}\r\n{\ra\r, \rc, d, f\r}\r\n{\ra\r, \rc, d, e, f\r}\r\nd\r\ne\r\nf\r\ne\r\nf\r\nface-cycles are\r\n<\re\r,\rf\r,\re\r,\rf\r> with \rn\r = 2 and \rx\r = 1,\r\nand  <\ra\r,\rb\r,\rc\r,\rb\r,\ra\r,\rc\r> with \rn\r = 3 and \rx\r = 2\r\nall pass face-conditions\r\nFig. 8. Face-conditions\nedges. The faces both have face-cycles \u3008a, b, c, a, b, c\u3009 with crossing indices x = 3,\nand the lengths given by n = 3. It is not the case that x = n\u2212 1.\nProposition 4. If a concrete labelled graph passes the face-conditions and con-\nnectivity conditions, and removal of an edge maintains the connectivity condi-\ntions, then removal of that edge also maintains the face-conditions.\nRemoval of edges (e.g. to ease planarisation) cannot jeopardise the existence of\na plane representation which passes the face-conditions.\n{\rb\r,\rc\r}\r {\ra\r}\r\nc\r{\rc\r}\r {\r}\r\n{\ra\r, \rb\r, \rc\r}\r c\r\nb\r\nb\r\na\r\na\r\n{\ra, b\r}\r\nface-cycle <\ra\r,\rb\r,\rc\r,\ra\r,\rb\r,\rc\r>\r\nhas \rn\r = 3 and \rx\r = 3\r\n{\ra\r,\rc\r}\r {\rb\r}\r{\rb\r,\rc\r}\r {\ra\r}\r\nc\r{\rc\r}\r {\r}\r\n{\ra\r, \rb\r, \rc\r}\r c\r\nb\r\nb\r\na\r\na\r\n{\ra, b\r}\r\nall face-cycles pass the\r\nface-condition\r\n{\ra\r,\rc\r}\r {\rb\r}\r\nb\r\na\r\na\r\nb\r\nb\r\na\r\na\r\nb\r\nFig. 9. Face-conditions and layout\nOne might hope that, given an abstract dual graph, all plane representations\nof it either pass or fail the face-conditions. However, this is not the case. Figure 9\nshows a dual of the Venn diagram on three contours, after removal of the edges\n{{a} , {a, c}} and {{b} , {b, c}}. The absence of these two edges does not cause\nfailure of the seven connectivity conditions. The super-dual has a plane represen-\ntation which passes the face-conditions (in fact all plane representations of the\nsuper-dual will pass the face conditions), so proposition 4 says that after remov-\ning two edges, there must also be a plane representation which passes the face\nconditions. This is shown on the left of the figure. But removal of these edges also\nintroduces the existence of a plane representation which fails the face-conditions,\nshown on the right. This example shows that failure of the face-conditions in a\nsingle plane subgraph of superDual(d) does not necessarily render the underly-\ning abstract diagram d undrawable. To complete the argument for example 10 we\nhave to say that not only does the presented plane graph fail the face-conditions,\nbut all plane representations of the abstract dual will fail the face conditions.\nFor the example shown, this is easy, but for larger graphs, this kind of argument\nposes a problem.\nFuture work on improving the planarising step in this algorithm should seek\nplane representations which pass the face-conditions, if they exist.\nGiven an abstract labelled graph which passes the connectivity conditions,\nand a plane graph representation which passes the face-conditions, to complete\nthe construction of the contours we draw the plane graph with all faces convex\nand draw arcs linear across faces. Of course, it is impossible to draw a graph\nwith all faces convex, but the faces can be placed as convex faces in a disc with\none new non-convex outside face. This step, called circularisation of the dual, is\ndiscussed in the next section.\n2.4 Circularisation\nGiven a concrete labelled graph which passes the connectivity and face condi-\ntions, we seek a plane representation with convex faces. The barycentric approach\nto graph drawing [1] gives all but one face convex. Circularisation reproduces all\nthe faces of a graph inside a disc, introducing a new (non-convex) face outside\nthe disc. Some vertices of the original graph may appear more than once, and\nsome edges will be duplicated. Circularisation can be achieved by taking faces\nabstract Euler diagram\r\ncontours = {\ra\r, \rb\r, \rc\r}\r\nzones = {{}, {\ra\r}, {\rb\r}, {\rc\r}, {\ra\r, \rb\r}}\r\n{\ra\r, \rb\r}\r\n{\rb\r}\r {\ra\r}\r\n{\r}\r {\ra\r, \rb\r}\r\n{\rb\r}\r\n{\r}\r\n{\rc\r}\r\nb\r\nb\ra\r\na\r\nb\rc\r\nc\r a\r\nb\r\nb\r\nb\ra\r\na\r\nb\rc\r\nc\r a\r\nb\r\nb\r\na\r\nc\r\n{\rc\r}\r {\r}\r\n{\ra\r}\r\n{\rb\r}\r\n{\ra\r, \rb\r}\r\na\r\nb\r a\r\nb\rc\r\nFig. 10. The circularisation process and addition of arcs\nin turn, inserting them into a disc. After the first face, further faces are chosen\nand inserted by identifying common edges which are already present in the disc.\nThe edges which remain un-identified after all faces are inserted are the edges\naround the edge of the disc (polygon). These correspond to edges making up a\nspanning tree of the original graph.\nAn alternative view of the same process begins by choosing a spanning tree\nof the original graph. Split the edges into pairs, and fatten the spanning tree into\na new polygonal face. Move the infinity point into this new face and squeeze the\noriginal faces so that all vertices lie around a circle (the boundary of the new\nface). Edges in the chosen spanning tree are duplicated around the outside of\nthe circularised graph whereas edges not in the spanning tree appear once each,\nacross the disc.\nThe process of circularisation is illustrated in figure 10 as the second step\n(top right to bottom left diagram): a dual graph with two faces is circularised\nto give two faces in a disc and one additional non-convex face outside the disc.\nThe rewards of circularisation come from the construction of the concrete\nEuler contours. As in figure 5, arcs will be constructed across faces of the concrete\nlabelled graph, but now the arcs can be drawn as straight lines. A 2n-sided face\nwill have n arcs drawn across it. The arcs join the midpoints of edges with shared\nlabels. They are guaranteed to only cross other arcs in the same face (because\nthe faces are convex), and they are guaranteed to meet transversely (because\nthey are linear). The face-conditions guarantee that no new zones will appear as\nthe linear arcs are added.\nThe added arcs contribute to piecewise-linear contours of the required con-\ncrete diagram. The contours need to be completed by drawing arcs outside the\ndisc (the last step shown in figure 10). Starting at a vertex labelled {}, read the\nlabels from the edges around the circle, giving a word of contour labels. This\nword is made up of nested pairs of contour labels. In figure 10, the nested word is\nbabbabcc. Use the nesting to determine which labels are pairs. The labels which\npair identify edges which will be joined by arcs outside the disc. Draw arcs out-\nside the disc joining the innermost pairs: bb and cc. Join the two edges labelled\na and join the remaining two edges labelled b.\nThe algorithm to this point has been implemented in the Java program-\nming language, with outcomes shown in figure 12. The results can be difficult\nto interpret by eye. The final proposition suggests one resolution of this prob-\nlem. The resulting concrete diagram can appear somewhat convoluted. Measure\n{ }\r\n{\rb\r}\r\n{\ra\r}\r\n{\ra,b\r}\r\n{\rc\r}\r\n{\rd\r}\r\n{\rc,d\r}\r\n{ }\r\n{\rb\r}\r\n{\ra\r}\r\n{\ra,b\r}\r\n{\rc\r}\r\n{\rd\r}\r\n{\rc,d\r}\r\nFig. 11. Spanning trees and circularisation\nthe lengths of arcs drawn outside the disc, and take this to be a measure of\nconvolution of the concrete diagram. Recall that the decisions made during cir-\ncularisation give a spanning tree of the dual.\nProposition 5. Convolution of the concrete diagram is minimised by choosing\na spanning tree with the vertex labelled {} as its centre, with vertices as close as\npossible to the centre (for centre of a tree, see [3]).\n3 Conclusions\nFigure 12 shows the outcome for all drawable diagrams with two or three con-\ntours. Some diagrams could be made less convoluted by application of the span-\nFig. 12. Program output\nning tree with null centre (see prop 5). All other abstract diagrams with two\nor three contours were determined to be undrawable by testing for connectivity\nconditions and face-conditions.\nThe algorithm has been proved to be practical in small cases, as it has been\nimplemented in the Java programming language. The program accepts a string\ndescription of a set of sets as zone descriptors. It first constructs the super-\ndual graph (def 11) before checking the connectivity conditions (thm 1). If the\nconnectivity conditions pass, then edges are removed to assist with an iterative\nplanarising step (sec 2.2). If the face-cycle conditions (cor 2) fail, then alternative\nplanarisations are sought. If a planar representation of the dual is found which\npasses the face conditions, then the circularisation process (sec 2.4) is applied to\nconstruct contours and resulting concrete diagram is drawn.\nRemaining questions include:\n(i) If an abstract diagram has a non-planar super-dual (e.g. the Venn diagram\non four contours), what is a good strategy for selecting edges (maintaining\nconnectivity conditions) to get a planar dual graph?\n(ii) What is the most effective planarising algorithm for a labelled dual graph?\n(iii) Is it possible to adapt the algorithm to allow inclusion of triple points,\nor new zones, in the concrete diagrams? This would make more abstract\ndiagrams drawable.\n(iv) How can the resulting concrete diagram be manipulated to maintain the\ntopological properties of contour intersection, and enhance the clarity of\nthe concrete diagram?(prettification)\nOne intended application of this work is to enable a constraint diagram tool\nto construct appropriate diagrams which are equivalent to textual constraints\nin software modelling. The kinds of constraints which occur normally have few\ncontours. If a diagram is considered as a set of \u201cnested\u201d components - diagrams\nwithin diagrams - then the number of contours will be further reduced. The\nalgorithm as it is presented here is effective for such small examples, and after\nmore work on the planarising step, would be practical for larger examples too.\nCurrent work includes the study of existing Venn diagram algorithms to\naddress edge-removal and smart planarising steps for Euler duals. We are also\nlooking at \u201cnesting\u201d diagrams and the impact this has on layout algorithms.\nThanks to John Taylor, Gem Stapleton, and the conference referees for con-\nstructive comments on drafts of this article. This work was partially supported\nby UK EPSRC grant GR\/R63516.\nReferences\n1. G. Di Battista, P. Eades, R. Tamassia, I. G. Tollis. Graph Drawing: algorithms for\nthe visualization of graphs. Prentice Hall, 1999.\n2. F. Bertault, P. Eades. Drawing hypergraphs in the subset standard. Springer Verlag,\nGraph Drawing proceedings, LNCS 1984, 2000.\n3. N. Biggs, E. K. Lloyd, R. J. Wilson. Graph Theory 1736-1936 OUP, 1976.\n4. L. Euler. Lettres a Une Princesse d\u2019Allemagne, vol 2. 1761. Letters No. 102\u2013108.\n5. J. Gil, J. Howse, S. Kent. Formalising Spider Diagrams. Proc. IEEE Symposium\non Visual Languages (VL99), Tokyo, Sept 1999. IEEE Comp Soc Press, 130-137.\n6. J. Gil, J. Howse, S. Kent, J. Gil. Towards a formalisation of constraint diagrams.\nProc IEEE Symp on Human-Centric computing (HCC\u201901). Stresa, Sept 2001,\np.72-79.\n7. E. Hammer. Logic and Visual Information. CSLI Publications, Stanford, 1995.\n8. J. Howse, F. Molina, J. Taylor. On the completeness and expressiveness of spi-\nder diagram systems. Proc. Diagrams 2000, Edinburgh, Sept 2000. LNAI 1889,\nSpringer-Verlag, 26-41.\n9. J. Howse, F. Molina, S.-J. Shin, J. Taylor. On diagram tokens and types. Accepted\nfor Diagrams 2002.\n10. S. Kent. Constraint diagrams: Visualising invariants in object oriented models.\nproceedings of OOPSLA97, ACM SIGPLAN Notices 32, 1997.\n11. F. Molina. Reasoning with extended Venn-Peirce diagrammatic Systems. PhD\nThesis, University of Brighton, 2001.\n12. Object Management Group. UML Specification, Version 1.3: www.omg.org.\n13. C. Peirce. Collected Papers. Harvard University Press, 1933.\n14. M. Schaefer and D. S\u02c7tefanikovic\u02c7. Decidability of string graphs. Proc 33rd ACM\nSymposium on the Thy of Comp, p.241-246, 2001.\n15. S.-J. Shin. The Logical Status of Diagrams. CUP, 1994.\n16. J. Venn. On the diagrammatic and mechanical representation of propositions and\nreasonings. Phil.Mag., 1880. 123.\n17. J. Warmer and A. Kleppe. The Object Constraint Language: Precise Modeling with\nUML. Addison-Wesley, 1998.\n"}