{"doi":"10.1109\/MS.2004.1270766","coreId":"66649","oai":"oai:dro.dur.ac.uk.OAI2:621","identifiers":["oai:dro.dur.ac.uk.OAI2:621","10.1109\/MS.2004.1270766"],"title":"Understanding service-oriented software.","authors":["Gold,  N. E.","Knight,  C.","Mohan,  A.","Munro,  M."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-02","abstract":"Service-oriented software is being hailed as the next revolutionary approach to software development. Service orientation allows organizations to rapidly and dynamically form new software applications to meet changing business needs, thus alleviating the software evolution problems that occur with traditional applications. The largest of these problems is the need to understand existing software before changing it. This article looks ahead toward the automated construction of service-oriented software, discussing software understanding in the context of service orientation and identifying potential new problems. The authors conclude that, while service orientation certainly helps solve some aspects of the evolution problem, software comprehension takes a new and potentially more challenging role.\\u","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66649.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/621\/1\/621.pdf","pdfHashValue":"db21ccddc3114404efca45fd82247712d8bb9291","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:621<\/identifier><datestamp>\n      2011-06-15T15:53:00Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Understanding service-oriented software.<\/dc:title><dc:creator>\n        Gold,  N. E.<\/dc:creator><dc:creator>\n        Knight,  C.<\/dc:creator><dc:creator>\n        Mohan,  A.<\/dc:creator><dc:creator>\n        Munro,  M.<\/dc:creator><dc:description>\n        Service-oriented software is being hailed as the next revolutionary approach to software development. Service orientation allows organizations to rapidly and dynamically form new software applications to meet changing business needs, thus alleviating the software evolution problems that occur with traditional applications. The largest of these problems is the need to understand existing software before changing it. This article looks ahead toward the automated construction of service-oriented software, discussing software understanding in the context of service orientation and identifying potential new problems. The authors conclude that, while service orientation certainly helps solve some aspects of the evolution problem, software comprehension takes a new and potentially more challenging role.\\ud\n<\/dc:description><dc:subject>\n        Distributed\/Internet-based software engineering tools and techniques<\/dc:subject><dc:subject>\n         Evolving Internet applications<\/dc:subject><dc:subject>\n         Maintainability<\/dc:subject><dc:subject>\n         Restructuring<\/dc:subject><dc:subject>\n         Reverse engineering<\/dc:subject><dc:subject>\n         Reengineering.<\/dc:subject><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n        IEEE software, 2004, Vol.21(2), pp.71-77 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2004-02<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:621<\/dc:identifier><dc:identifier>\n        issn:0740-7459<\/dc:identifier><dc:identifier>\n        doi:10.1109\/MS.2004.1270766<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/621\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/MS.2004.1270766<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/621\/1\/621.pdf<\/dc:identifier><dc:rights>\n        \u00ae 2004 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn:0740-7459","0740-7459"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":["Distributed\/Internet-based software engineering tools and techniques","Evolving Internet applications","Maintainability","Restructuring","Reverse engineering","Reengineering."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n08 October 2008\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nGold, N. E. and Knight, C. and Mohan, A. and Munro, M. (2004) \u2019Understanding service-oriented software.\u2019,\nIEEE software., 21 (2). pp. 71-77.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/MS.2004.1270766\nPublisher\u2019s copyright statement:\n2004 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for\nadvertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists,\nor to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nfeature\n0 7 4 0 - 7 4 5 9 \/ 0 4 \/ $ 2 0 . 0 0  \u00a9  2 0 0 4  I E E E P u b l i s h e d  b y  t h e  I E E E  C o m p u t e r  S o c i e t y I E E E  S O F T W A R E 7 1\nevolution. While they address some aspects of\nthe problem, however, understanding the soft-\nware still poses some difficulty. This shift to-\nward service orientation compels us to consider\nits implications for software understanding,\nwhich is potentially the primary cost in soft-\nware engineering.2\nUsing an example of on-the-fly software\nservices construction, we discuss the problems\nsoftware engineers still face when working\nwith service-oriented software. We also intro-\nduce some new issues that they must consider,\nincluding how to address service provision dif-\nficulties and failures.\nThe service-oriented vision\nSoftware evolution still poses a significant\nproblem for many organizations despite new\ndevelopment methods that promise to enable\nflexibility and simplify systems\u2019 evolution as\nbusiness needs change. Among the largest\ncosts is the time software engineers spend try-\ning to understand existing software, either to\nfix bugs or add functionality. We use the term\nsoftware understanding to mean the applica-\ntion of techniques and processes that facilitate\nunderstanding of the software. We need this\nunderstanding to ensure the software evolves\nthrough the application of various mainte-\nnance activities. \nThe SaaS framework, advanced as a solution\nto the evolution issue,3 automatically discovers\nfine-grained software services, negotiates to ac-\nquire them, and composes, binds, executes, and\nunbinds them. This process potentially occurs\nfor every execution of the software, and would\nUnderstanding Service-\nOriented Software\nM\nany hail service-oriented software as the next revolution in soft-\nware development. Web services\u2019 capabilities are constantly ex-\npanding from simple message passing toward the construction\nof full-fledged applications such as those envisaged by the UK\u2019s\nPennine Group in their Software as a Service (SaaS) framework.1\nThese new, service-oriented approaches appear to many to solve the sig-\nnificant issue of software inflexibility that arises during maintenance and \nservice-oriented software\nNicolas Gold and Andrew Mohan, UMIST\nClaire Knight, Volantis Systems\nMalcolm Munro, University of Durham\nService-oriented software lets organizations create new software\napplications dynamically to meet rapidly changing business needs. \nAs its construction becomes automated, however, software\nunderstanding will become more difficult.\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\nthus alleviate evolution problems because\nthere would be no system to maintain\u2014it\nwould be created from a composition of serv-\nices to meet particular requirements at a given\ntime. The SaaS approach includes elements of\noutsourcing (providing business functions at \na given price under a service-level agreement)\nand application service provision (renting\ncomplete software applications from another\norganization). However, it goes further than\nboth ideas.\nOn the surface, although SaaS appears sim-\nilar to ASP, it differs in the provision granular-\nity and supply network size. SaaS coordinates\nthe composition of fine-grained, customized\nservices as opposed to the ASP approach\u2019s\nlarger-grained, more standardized applica-\ntions. Also, whereas the ASP supply network\ntypically pairs one customer with one supplier,\nthe SaaS approach deploys a far larger supplier\nnetwork that aggregates services into increas-\ningly larger units until it delivers the top-level\nfunctionality requested.\nWe envisage a micropayment approach\nbased on service invocation that lets customers\npay only for what they need and when, with\nprice reflecting marketplace supply and de-\nmand. The marketplace would need to inte-\ngrate payment mechanisms.\nCurrent Web services technology (see the\n\u201cService-Oriented Technology\u201d sidebar) can\nsupport some of this vision\u2019s lower-level aspects,\nand new initiatives to define workflow and com-\nposition languages will be capable of support-\ning some of the higher-level elements. Nonethe-\nless, many problems remain to be solved\u2014for\nexample, negotiation to obtain a service and\ntrust in a particular service or supplier. \nAny service supply chain depends on estab-\nlishing trust between the parties involved.\nWhen relationships first form between organ-\nizations, contract warranty and redress terms\ncompensate for any lack of trust. As the rela-\ntionship matures, trust accrues and future con-\ntracts become easier to negotiate. Since such\nissues occur in traditional outsourcing, we can\nreasonably expect them also in a service-\noriented architecture. \nManaging trust within the automated pro-\ncurement process SaaS proposes will be more\ndifficult, however. Automatic methods for ne-\ngotiating such nonnumeric and human-ori-\nented concepts will require further research\nbefore they\u2019re sufficiently mature to be incor-\nporated into everyday business practice. Also,\nany framework of warranty and redress must\nbe legally enforceable, another significant\nchallenge for an automated and global solu-\ntion. Selecting a legal framework within which\nto form contracts could thus be both crucial\nand difficult. \nAlthough the trust issue might prove diffi-\ncult to resolve for an automated service acqui-\nsition\u2019s initial instance, both system and user\nexperiences with a particular service provider\ncan inform subsequent negotiation. The nego-\n7 2 I E E E  S O F T W A R E w w w. c o m p u t e r. o r g \/ s o f t w a r e\nMany views exist of the technologies that can be used for service-oriented\nsoftware. These range from all-inclusive applications sold via application serv-\nice providers to specific pieces of code or components. The latter description\nusually means that the term is being used as a replacement for Web services.\nThe W3C (www.w3c.org) provides a good generic definition of a service-\noriented architecture (SOA) as a set of components that can be invoked and\nwhose interface descriptions can be published and discovered. A Web service\nis a specific instance of a component (or components) that has a public inter-\nface defined and described in XML and that other systems can discover and\nuse by passing messages transported via existing Internet protocols.\nThe term service-oriented has now been applied to the older technologies\nof DCOM and CORBA, more recently to J2EE and .NET deployments, and of\ncourse to Web services. There\u2019s no reason why the technology has to be a\ndiscriminating feature in a SOA. Standards such as SOAP for Web services\nhelp to ensure that heterogeneity of solutions poses no problems.\nLayering of architectures is also possible. Many J2EE applications can in-\nterface on the company side with the legacy software systems still in use. In\nturn, the J2EE application can be partially exposed for B2B transactions us-\ning Web services to remove the need for both sides to use Java technology.\nVersioning helps ensure that organizations can use different versions of\nservices over time in a compatible manner. For example, the .NET frame-\nwork uses versions of assemblies (collections of classes) (in C#). These can\nthen be used in code with various patterns matching the files required. This\npermits numerous approaches to version specification such as a specific ver-\nsion of a service, versions having the same major numbers, or a given ver-\nsion or newer. Differently versioned service instances can coexist, and differ-\nentiation can be made at runtime and the appropriate assembly used.1\nThe ability to layer solutions and support heterogeneity allows for grad-\nual migration to service-based solutions. The development of XML-based\nlanguages for defining and enforcing service-level agreements, workflow,\nand service composition is supporting the gradual change of business\nprocesses, envisioned as part of the growth of Software as a Service.\nReference\n1. B. Wagner, \u201cImplementing Versioning in .NET,\u201d Visual Studio Magazine, vol. 12, no. 3,\nMar. 2003, www.fawcette.com\/vsm\/2002_03\/magazine\/columns\/desktopdeveloper\/\ndefault_pf.aspx.\nService-Oriented Technology\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\ntiating agent (such as an automated broker)\ncan use such factors as a service\u2019s promised\nversus actual processing time, user satisfaction\nratings, or price comparisons to inform its ne-\ngotiation strategy and update its profiles of\nservice providers and their offerings. Because\nthe organization must trust the negotiating\nagent to negotiate on its behalf, this function-\nality will likely remain in-house, to preserve\norganizational control over it.\nThe issues we\u2019ve raised here are common\nwhere business functions are contracted out to\nanother organization. Adding automation\nmight introduce complexity, but we see feasible\nsolutions for the automated domain. Market\nsegmentation along national lines, for exam-\nple, would facilitate legal-framework solu-\ntions. These and other SaaS-related issues are\ndiscussed elsewhere.1,3,4\nIn short, the SaaS approach will require both\nnew (though not radically new) business mod-\nels and new technologies to be successful. Mi-\ngration to this approach will not be a \u201cbig\nbang\u201d process but rather gradual, with organi-\nzations wrapping their existing offerings as\nservices and gradually decomposing them when\nmarket opportunities appear for value-added\nfunctionality both within and outside their or-\nganization. General Motors has adopted such\nan approach toward build-to-order manufac-\nturing.5 Internally, the opportunity exists to in-\ncrease organizational information systems\u2019 flex-\nibility and adaptability\u2014the internal market\nwill likely develop first because the complexity\nof automatic contract negotiation is less impor-\ntant. Externally, the opportunity exists to gen-\nerate revenue from existing software and to\nflexibly and rapidly obtain new software with-\nout the burden of ownership. Starting with ex-\nisting systems increases the potential return on\ninvestment and decreases the migration risk.\nThe SaaS approach\u2019s relevant key concepts\ninclude \n\u0002 An open marketplace for services\n\u0002 Dynamic provision of software in re-\nsponse to changing requests\n\u0002 The potential for one-time execution fol-\nlowed by unbinding\n\u0002 A services supply network where service\nproviders may subcontract to provide\ntheir services\n\u0002 Delivery transparency to software users,\nwhose interest lies in its use\nA scenario\nTo illustrate some of the problems the soft-\nware comprehender faces in a SaaS world, we\nuse the fictional example of a large company,\nBizness plc, which operates in several coun-\ntries and thus must produce its quarterly re-\nports in several languages.4 Bizness plc has its\nown in-house IT department.\nJohn, a Bizness plc executive, wrote the lat-\nest quarterly report in English and wants to\nsubmit it for automatic translation. He re-\nquests automated translation services for\nFrench, German, Italian, and Spanish from\nBizness plc\u2019s automated broker. The broker\nsearches the marketplace for suitable service\ncompositions that meet John\u2019s needs (the com-\nposition description doesn\u2019t, however, bind the\nrequest to actual services). Once it has pro-\ncured one, the broker searches the market-\nplace for organizations offering suitable serv-\nices, negotiates the supply of these services\nusing Bizness plc\u2019s predefined policies for ne-\ngotiation, and binds the contracted services to-\ngether for John to execute.\nFigure 1 shows the supply network formed.\nJohn won\u2019t necessarily know which companies\ncomprise it, because he only interfaces with\nhis automated broker, and the broker itself\nmight only see the suppliers it contracts with\ndirectly. As Figure 1 shows, providers F, G, I,\nand S will fulfill John\u2019s request. G and S pro-\nvide their complete service in-house without\nhaving to subcontract further, whereas F and I\nhave subcontracted for grammar and diction-\nary information to providers FG, and ID and\nIG, respectively. However, John doesn\u2019t (nor\nshould he need to) know this.\nJohn submits his document to the transla-\ntion service provided. When he receives the re-\nsults, he finds that the Italian translation hasn\u2019t\ntaken place. He needs to understand why this\nhappened and what changes to make to ensure\nit works now and for future service requests. \nInitially, Bizness plc would seek an explana-\ntion from the failed service\u2019s supplier. In an au-\ntomated domain, one of numerous predefined\nresponses might provide sufficient information\nor appropriate action. Determining the explana-\ntion\u2019s veracity could prove tricky (although not\nunique to this domain), particularly if it didn\u2019t\nrequire much reparation from the supplier.\nIf the supplier in question provided no ex-\nplanation, Bizness plc (and its suppliers in the\nsupply chain) could take legal action to en-\nM a r c h \/ A p r i l  2 0 0 4 I E E E  S O F T W A R E 7 3\nThe SaaS\napproach will\nrequire both\nnew (though not\nradically new)\nbusiness\nmodels and new\ntechnologies to\nbe successful.\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\nforce their contracts with the other service\nproviders. However, such action might cost\nmore (in time or money) than the original\nservice cost warranted, given the micropay-\nment model envisaged for SaaS. To facilitate\ncontract enforcement in the automated do-\nmain, the parties involved could employ a\nthird party that holds payment (in escrow, for\nexample) and only releases it when all parties\nare happy with the service\u2019s execution. Ulti-\nmate dispute resolution might be necessary\nthrough arbitration or court action. For the\nSaaS approach to succeed, any automated dis-\npute resolver should avoid this final recourse\nin most cases. In the event of failure, we can\nreasonably expect that Bizness plc\u2019s broker\nwould substantially decrease the rating of the\nsupplier concerned (if not remove it from the\nset of potential partners altogether).\nAnother (possibly less expensive) alterna-\ntive is for John to try to diagnose the problem\nand its location\u2014either to direct the legal ac-\ntion more specifically or to fix it for future in-\nvocations. Or he could simply reexecute the\nservice, explicitly stating to the broker that it\nshouldn\u2019t use the Italian service previously em-\nployed and find an alternative. However, he\nmust weigh the potential additional cost of\nchanging his requirements and perhaps procur-\ning a more expensive service against that of\ntrying to fix the current problem (after all,\nprovider I might have been let down by an-\nother service below it in the supply network\nand have already taken corrective action).\nThis situation becomes more complex if the\nservice failure is partial\u2014that is, the Italian\nservice executed successfully but returned the\ndocument partially or completely untranslated.\nIn addition to determining where the error oc-\ncurred, John would need a mechanism to\ndemonstrate that the results didn\u2019t match those\npromised in the service description. \nLet\u2019s assume that John decides to try to fix\nthe problem (in this case, a complete failure of\nthe Italian translation service).\nUnderstanding failures\nJohn might try to understand the software\nhimself, but we think he\u2019ll more likely call on\nan expert, Alice, to help diagnose and fix the\nproblem. Alice is a software engineer in the\nBizness plc IT department.\nFirst, Alice will gather information about the\nfailure. Service-oriented software, however,\nmight provide very little information, with\nwhat little there is fragmented and hard to ob-\ntain. Alice needs to understand the software\u2019s\nbehavior after it has executed but has no means\nof exactly reproducing the relevant processing.\nBizness plc doesn\u2019t own the service provided to\nJohn but simply contracted with others to de-\nliver the functionality for a given price. We can\nsee possible candidates for the failure (I, ID, IG)\nin Figure 1, but Alice can only see the top level\nof service providers (F, G, I, S). Therefore, she\nknows only that the Italian translation service\nfailed, but can\u2019t see the details of who might be\nsupplying subservices to the Italian translator.\nSo what other information does Alice have\navailable initially? She has the requirements\nJohn provided, information the broker pro-\nvided about the top-level service composition,\nand information about the service providers\nwith which the broker contracted.\nShe might submit the request again and try to\ntrace the service\u2019s behavior during its execution.\nThis could help her develop a behavioral model\nof the overall service provided, but it comes at a\ncost. The providers contracted to provide sup-\nporting services will charge for a new execution\n(unless contract terms indicate otherwise), and\nthis cost must be weighed against the benefit of\n7 4 I E E E  S O F T W A R E w w w. c o m p u t e r. o r g \/ s o f t w a r e\nJohn Alice\nBizness pic\nRequest for service\nService delivery\nAutomated broker\nFrench\ntranslation\nservice (F)\nFrench\ngrammar\nservice (FG)\nItalian\ndictionary\nservice (ID)\nMarketplace\nOther\nservice\nOther\nservice\nOther\nservice\nComposition\nknowledge\nservice\nGerman\ntranslation\nservice (G)\nSpanish\ntranslation\nservice (S)\nItalian\ntranslation\nservice (I)\nItalian\ngrammar\nservice (IG)\nFigure 1. The supply\nnetwork formed in \nresponse to John\u2019s \nrequest.\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\nthe information gained. Also, even if Alice can\nexamine the data flowing between Bizness plc\nand the top-level providers, they might not be\nable to release information about providers fur-\nther down the supply network to her, leaving an\nincomplete picture.\nThe supply network presents one of the\nmajor obstacles to effective software under-\nstanding in a service-oriented context. Organi-\nzations in the network have a vested interest in\nprotecting the details of their implementa-\ntions\u2014this is the added value the service con-\nsumers pay for. Whether they contract out to\nproduce a composite service or implement the\nfunctionality themselves, this knowledge is\ntheir prime asset. This problem might thus re-\nquire nontechnical solutions such as business\nalliances or proactive supply chain manage-\nment to increase trust between organizations\nand promote information sharing.\nAlice also faces the possibility that the par-\nticular set of services contracted and subcon-\ntracted will differ from the original set when\nshe reexecutes the service request. Their coor-\ndination might also differ because of the\nwholly dynamic and negotiated nature of\nSaaS. Consequently, the way the software is\nprovided could have changed even though the\nrequirements haven\u2019t. This is a strength of\nSaaS from an evolutionary viewpoint but a\nreal problem in the event of a failure. Even if\nthe same services are contracted, the providers\nmight have updated the functionality in the in-\nterim. Current technologies exist to address this\nthrough versioning (see the \u201cService-Oriented\nTechnology\u201d sidebar), but any application rely-\ning on other services (particularly those exter-\nnal to the organization) faces this risk.\nUnderstanding the software\nWhichever strategy Alice adopts, a service-\noriented approach requires that she under-\nstand various artifacts and their relationships,\nsome quite traditional (although perhaps hav-\ning a different role) and others not normally\nconsidered in software understanding.\nTraditionally, Alice would build a mental\nmodel of the system and analyze the point of\nfailure.6 This would require her to understand\nthe architecture, data flow, and control flow,\nperhaps using tools like program slicers (such\nas CodeSurfer7) or object browsers (such as\nNetBeans8). However, as we\u2019ve seen, much of\nthis information might remain hidden and un-\navailable in a service context. Alice must there-\nfore shift her focus from understanding a sys-\ntem to understanding the relationships between\ncomposed services, which will require her to be\nconversant with composition languages and\nrules and understand their implications. This\ndiffers from traditional system understanding\nin granularity. Services will typically have a\nlarger granularity than the source code state-\nments traditionally used for understanding.\nAlice must also understand the require-\nments which, in some ways, might be less rig-\norously specified than in traditional software\nsystems to be useful to John because he\u2019s an\nend user who must be able to express his needs\neasily and quickly. The resulting requirements\nstatement must, however, be formal enough to\nenable the automated broker to understand\nwhat John needs.\nThe most radically different area for Alice to\ndeal with is the broker itself, which likely has\n\u201cintelligence\u201d to let it negotiate with providers\nfor their services on Bizness plc\u2019s behalf. Bizness\nplc policies (such as upper limits on service\ncosts or collaboration agreements between de-\npartments and organizations) will guide this\nnegotiation. If Alice tries to reproduce an ex-\nact copy of the procured services, she should\nunderstand the implications of the broker\u2019s\npolicies and strategies to ensure she obtains\nthe same services (assuming they still exist in\nthe marketplace).\nUnderstanding changes\nOne of the major advantages claimed for\nservice-oriented software is the ease of making\nchanges. If John now needs to provide his\nquarterly reports in an additional language be-\ncause Bizness plc has expanded into Russia, he\nsimply changes his requirements to include the\nextra language. This change is much simpler\nthan its equivalent in traditional software be-\ncause it doesn\u2019t require implementing such\nfeatures in code but only procuring them for\nthe length of time needed to translate the doc-\nument. The cost of changing the requirements\nshould be minimal, but John might want to\nuse Alice\u2019s knowledge of procurement strate-\ngies to make the most appropriate change to\nhis request. Service-market conditions could\naffect whether John needs Alice or not. A\nbuoyant market will likely have suppliers to\nmeet John\u2019s needs, but if the market goes into\nrecession he\u2019ll probably need Alice\u2019s expertise,\nM a r c h \/ A p r i l  2 0 0 4 I E E E  S O F T W A R E 7 5\nOne of the\nmajor\nadvantages\nclaimed for\nservice-\noriented\nsoftware is the\nease of making\nchanges.\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\neither as a procurer or to create some small in-\nhouse services to meet his needs. Creating in-\nhouse services, however, starts to erode the ad-\nvantages of a fully service-based software\ndevelopment approach.\nAdding the Russian translation service\nwould previously have been known as perfec-\ntive software maintenance and, by definition,\nchanges the software requirements. In SaaS\nthe effort required of John comes down to\nnothing more (at least not visibly to Bizness\nplc and John) than this requirements change. \nHowever, should a problem arise with the\nchange (for example, the procurement fails), it\nbecomes not perfective but corrective mainte-\nnance. Considering service-oriented software in\nterms of the staged software lifecycle model,9\ninitial development and evolution should be rel-\natively simple because they involve merely a\nstatement or restatement of requirements. The\nmodel implies that servicing is a relatively easy\n(albeit perhaps lengthy) phase, but in service-\noriented software and from an understanding\nviewpoint this will likely be difficult because, as\nwe\u2019ve shown, defect repairs are costly to man-\nage. The phase-out stage occurs with every ex-\necution of the software during unbinding (the\nparticular \u201capplication\u201d is phased out). Close-\ndown simply involves throwing away require-\nments. We conclude, then, that service-oriented\nsoftware requires a completely new maintenance\nmodel and even a redefinition of the different\ntypes of maintenance.\nPotential solutions\nWe see several possible solutions to some of\nthe problems the software engineer faces when\ntrying to comprehend service-oriented soft-\nware. Although some of the provision activity\nis technical, many solutions to the under-\nstanding problems are nontechnical (as with\nmany SaaS issues).\nProblem: Knowledge boundaries \nbetween organizations\nThe knowledge Alice needs is locked up in\nthe service providers. Alice must therefore ne-\ngotiate with the providers for the information\nshe needs, accounting for their need to protect\ntheir assets. Forming industry supplier net-\nworks could reduce interorganizational dis-\ntrust and make information more readily\navailable. This active management of the sup-\nply network will prove important for quick\nproblem resolution. Organizations could also\ntackle this issue using technical means such as\na preexisting agreement to exchange technical\ninformation, perhaps through linked code-\nbrowsing tools.\nProblem: Partial visibility of the supply network\nAlice could try to solve this issue by negoti-\nation. A more technical solution would be to\nhave a service that could \u201csee\u201d the whole sup-\nply network and, perhaps for a fee, release this\ninformation to Alice (so she would discover\nthat ID and IG exist in our example). The fee\nwould provide compensation to those providers\nwho have lost their privacy (and would require\ntheir agreement).\nProblem: Understanding the state \nof the software\nSome traditional approaches to distributed\nunderstanding look at state information,10\nwhich could help Alice find a failure\u2019s source.\nAn overall view could prove difficult to achieve,\nhowever, because of the supply network\u2019s par-\ntial visibility and the limited flow of informa-\ntion between service providers due to confi-\ndentiality concerns.\nProblem: Uncertain software construction\nService-oriented software presents an inher-\nent uncertainty because of its distributed and\nnegotiated nature. Also, the delivered solution\nmight include several levels of granularity. Run-\ntime tracing of the service invocation seems the\nmost promising approach to gathering as much\ninformation as possible about the services and\nsupply network. This would let Alice retrace\nthe service execution to the failure point (as-\nsuming suppliers can release the required infor-\nmation). This is an issue for the framework\nwithin which the software is constructed. Man-\naging runtime tracing at the framework level\nwould alleviate many of the difficulties raised\nhere but would require a spirit of openness be-\ntween suppliers and consumers.\nProblem: Inappropriate tools\nService-oriented software\u2019s construction\nmeans traditional understanding support tools\nwon\u2019t work. We need tools that automatically\ncollect as much information as possible for Al-\nice (perhaps using prenegotiated agreements\nbetween providers) so that she begins her\nwork with as complete a picture as possible.\nService-\noriented\nsoftware\npresents an\ninherent\nuncertainty\nbecause of its\ndistributed and\nnegotiated\nnature.\n7 6 I E E E  S O F T W A R E w w w. c o m p u t e r. o r g \/ s o f t w a r e\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\nSuch tools\u2019 construction and provision, how-\never, will likely be more complex from a non-\ntechnical than a technical viewpoint.\nAlice\u2019s role\nAlice\u2019s role differs from that of the tradi-\ntional in-house software engineer primarily in\nthat she must understand fewer low-level tech-\nnical software details but be skilled in negoti-\nation and communication with clients and\nservice providers. She must comprehend busi-\nness policies pertaining to service procurement\nand understand the activities of Bizness plc\u2019s\nbroker. Her activities focus much more on ob-\ntaining and organizing information from con-\ntracted service providers than on building\ncode. The only stage at which she might be in-\nvolved in creating a new system is as an advi-\nsor on requirements definition. Although cod-\ning skills are perhaps less important, Alice\nclearly needs some knowledge of software\nconstruction to successfully process the infor-\nmation she receives about failures. \nM any barriers to successful under-standing of service-oriented soft-ware arise from its distributed and\ndynamic nature. The flexibility that gives this\napproach the potential to ease the evolution\nproblem creates new difficulties in software\nunderstanding, many of which will be primarily\nnontechnical. Examining the processes involved\nin this kind of understanding in terms of both\ncorrective and perfective maintenance suggests\npossible solutions to these problems, including\ntailoring the process for service understanding\nrather than program understanding.\nAcknowledgments\nThe authors acknowledge the work of the UK\nPennine Group and their colleagues at the Universities\nof Durham and Keele and UMIST on the service-\noriented model of software and for helpful discussion\nof some of these ideas and the example. We also\nthank participants at the working session \u201cCompre-\nhension Needs in Highly Agile Software\u201d at the IEEE\nInternational Workshop on Program Comprehension,\nParis, 2002, and at the 1st Pennine Research Forum,\nManchester, 2002, for additional useful discussions in\nthis area. The reviewers also provided many detailed\nand helpful comments that substantially improved\nthis manuscript. This work is partly supported by the\nUK Engineering and Physical Sciences Research\nCouncil under grant GR\/R71733.\nReferences\n1. K.H. Bennett et al., \u201cAn Architectural Model for Ser-\nvice-Based Software with Ultra Rapid Evolution,\u201d Proc.\nIEEE Int\u2019l Conf. Software Maintenance (ICSM 01),\nIEEE CS Press, 2001, pp. 292\u2013300.\n2. T.A. Standish, \u201cAn Essay on Software Reuse,\u201d IEEE Trans.\nSoftware Eng., vol. SE-10, no. 5, Sept. 1984, pp. 494\u2013497.\n3. K.H. Bennett et al., \u201cPrototype Implementations of an\nArchitectural Model for Service-Based Flexible Soft-\nware,\u201d Proc. 35th Hawaii Int\u2019l Conf. System Sciences\n(HICSS 02), IEEE CS Press, 2002, p. 76b.\n4. M. Turner, D. Budgen, and P. Brereton, \u201cTurning Soft-\nware into a Service,\u201d Computer, vol. 36, no. 10, Oct.\n2003, pp. 38\u201344.\n5. \u201cBeyond the Hype of Web Services\u2014What Is It and How\nCan It Help Enterprises Become Agile,\u201d EDS, www.eds.\ncom\/about_eds\/homepage\/home_page_lehmann.shtml.\n6. A. Von Mayrhauser and A.M. Vans, \u201cProgram Compre-\nhension During Software Maintenance and Evolution,\u201d\nComputer, vol. 28, no. 8, Aug. 1995, pp. 44\u201355.\n7. Grammatech, 2004, www.grammatech.com.\n8. Netbeans.org, 2004, www.netbeans.org.\n9. V.T. Rajlich and K.H. Bennett, \u201cA Staged Model for the\nSoftware Life Cycle,\u201d Computer, vol. 33, no. 7, July\n2000, pp. 66\u201371.\n10. J. Moe and  D.A. Carr, \u201cUnderstanding Distributed Sys-\ntems via Execution Trace Data,\u201d Proc. IEEE Int\u2019l\nWorkshop Program Comprehension (IWPC 01), IEEE\nCS Press, 2001, pp. 60\u201367.\nFor more information on this or any other computing topic, please visit our\nDigital Library at www.computer.org\/publications\/dlib.\nM a r c h \/ A p r i l  2 0 0 4 I E E E  S O F T W A R E 7 7\nAbout the Authors\nNicolas Gold is a lecturer in the Department of Computation at UMIST (the University of\nManchester Institute of Science and Technology). His main research interests include software\ncomprehension, software evolution, and software maintenance. He received his PhD in com-\nputer science from the University of Durham, UK. He is a member of the IEEE and the Institute\nfor Learning and Teaching in Higher Education. Contact him at the Information Systems Group,\nDept. of Computation, UMIST, PO Box 88, Sackville St., Manchester, M60 1QD, UK; n.e.gold@\nco.umist.ac.uk.\nClaire Knight is a development engineer at Volantis Systems Ltd., Guildford, UK. Her\nmain research interests include software visualization; program comprehension; Java; grid and\nWeb services; and Java, Ant, XML, and PHP development. She received her PhD in computer\nscience for research on software visualization from the University of Durham. Contact her at\nVolantis Systems Ltd., 1 Chancellor Court, Occam Road, Surrey Research Park, Guildford, Sur-\nrey, GU2 7YT, UK; claire.knight@volantis.com.\nMalcolm Munro is a professor of software engineering in the Department of Computer\nScience at the University of Durham, UK. His main research focus is software visualization,\nsoftware maintenance and evolution, and program comprehension. He is also involved in re-\nsearch in Software as a Service and the application of Bayesian networks to software testing\nand program comprehension. Contact him at the Dept. of Computer Science, Univ. of Durham,\nScience Laboratories, South Rd., Durham DH1 3LE, UK; malcolm.munro@durham.ac.uk.\nAndrew Mohan is a doctoral candidate at UMIST, UK. He received a BSc (Hons) in com-\nputer science from the University of Durham and has worked for several years in legacy sys-\ntems support. His main research interests include software maintenance and evolution, pro-\ngram comprehension, and software quality. He is a member of the British Computer Society\nand is a Chartered Engineer. Contact him at Information Systems Research Group, Dept. of\nComputation, UMIST, PO Box 88, Sackville St., Manchester M60 1QD, UK; a.mohan@postgrad.\numist.ac.uk.\nAuthorized licensed use limited to: IEEE Xplore. Downloaded on October 8, 2008 at 09:55 from IEEE Xplore.  Restrictions apply.\n"}