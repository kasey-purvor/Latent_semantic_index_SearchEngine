{"doi":"10.1007\/978-3-540-25931-2_17","coreId":"8523","oai":"oai:eprints.brighton.ac.uk:2876","identifiers":["oai:eprints.brighton.ac.uk:2876","10.1007\/978-3-540-25931-2_17"],"title":"Generating readable proofs: a heuristic approach to theorum proving with spider diagrams","authors":["Flower, Jean","Masthoff, Judith","Stapleton, Gem"],"enrichments":{"references":[{"id":42750441,"title":"A constraint diagram reasoning system.","authors":[],"date":"2003","doi":null,"raw":"G. Stapleton, J. Howse, and J. Taylor. A constraint diagram reasoning system. Proc. International conference on Visual Languages and Computing, Knowledge systems institute, pp 263-270, 2003.","cites":null},{"id":42750411,"title":"A formal basis for the heuristic determination of minimum cost paths.","authors":[],"date":"1968","doi":"10.1109\/tssc.1968.300136","raw":"P.E. Hart, N.J. Nilsson, and B. Raphael. A formal basis for the heuristic determination of minimum cost paths. IEEE Transactions on System Science and Cybernetics, 4, 2, p100-107, 1968.","cites":null},{"id":42750407,"title":"A Reading algorithm for constraint diagrams.","authors":[],"date":null,"doi":"10.1109\/hcc.2003.1260220","raw":"A. Fish, J. Flower, and J. Howse. A Reading algorithm for constraint diagrams. Proc. IEEE Symposium on Visual Languages and Formal Methods, New Zealand,","cites":null},{"id":42750446,"title":"An automated prover for Zermelo-Fraenkel set theory in Theorema.","authors":[],"date":"2002","doi":"10.1016\/j.jsc.2005.04.013","raw":"W. Windsteiger. An automated prover for Zermelo-Fraenkel set theory in Theorema. LMCS, 2002.","cites":null},{"id":42750430,"title":"Artificial intelligence: Structures and strategies for complex problem solving. Fourth Edition.","authors":[],"date":"2002","doi":null,"raw":"G.F. Luger. Artificial intelligence: Structures and strategies for complex problem solving. Fourth Edition. Addison Wesley: 2002.","cites":null},{"id":42750409,"title":"Automated Theorem Proving with Spider Diagrams.","authors":[],"date":"2004","doi":"10.1016\/j.entcs.2003.12.016","raw":"J. Flower, and G. Stapleton. Automated Theorem Proving with Spider Diagrams. Proc. Computing: The Australasian Theory Symposium, Elsevier science, 2004.","cites":null},{"id":42750433,"title":"Computers and the sociology of mathematical proof.","authors":[],"date":"1998","doi":"10.1007\/0-387-29831-2_7","raw":"D. MacKenzie. Computers and the sociology of mathematical proof. Proc. 3rd Northern Formal Methods Workshop, 1998. http:\/\/www1.bcs.org.uk\/DocsRepository\/02700\/2713\/mackenzi.pdf","cites":null},{"id":42750438,"title":"Focus windows: A new technique for proof presentation.","authors":[],"date":"2002","doi":"10.1007\/3-540-45470-5_30","raw":"F. Piroi and B. Buchberger. Focus windows: A new technique for proof presentation. In J. Calmet, B. Benhamou, O. Caprotti, L. Henocque, and V. Sorge, editors, Artificial Intelligence, Automated Reasoning and Symbolic Computation. Proceedings of Joint AICS\u20192002 - Calculemus\u20192002 Conference, Marseille, France, July 2002. Springer Verlag. http:\/\/www.risc.uni-linz.ac.at\/people\/buchberg\/papers\/2002-02-25-A.pdf [Accessed August 2003].","cites":null},{"id":42750406,"title":"Generalized best-first search strategies and the optimality of A\u2217.","authors":[],"date":"1985","doi":"10.1145\/3828.3830","raw":"R. Dechter, and J. Pearl. Generalized best-first search strategies and the optimality of A\u2217. Journal of the Association for Computing Machinery, 32, 3, p505-536. 1985.","cites":null},{"id":42750425,"title":"Generating Euler Diagrams.","authors":[],"date":"2002","doi":"10.1007\/3-540-46037-3_6","raw":"J. Flower, and J. Howse. Generating Euler Diagrams. Proc. Diagrams p.61-75, Springer-Verlag, 2002.","cites":null},{"id":42750435,"title":"HARP: A tableau-based theorem prover.","authors":[],"date":"1988","doi":"10.1007\/bf00244513","raw":"S. Oppacher and S. Suen. HARP: A tableau-based theorem prover. Journal of Automated Reasoning, 4, p69-100, 1988.","cites":null},{"id":42750443,"title":"Implementing Euler\/Venn reasoning systems,","authors":[],"date":"2001","doi":"10.1007\/978-1-4471-0109-3_21","raw":"N. Swoboda. Implementing Euler\/Venn reasoning systems, In Diagrammatic Representation and Reasoning, Anderson, M., Meyer, B., and Oliver, P., eds, p.371-386 Springer-Verlag, 2001.","cites":null},{"id":42750410,"title":"Learning search-control heuristics for automated deduction systems with folding architecture networks.","authors":[],"date":"1999","doi":null,"raw":"C. Goller. Learning search-control heuristics for automated deduction systems with folding architecture networks. Proc. European Symposium on Artificial Neural Networks. D-Facto publications, Apr 1999.","cites":null},{"id":42750428,"title":"Mathematical Reasoning with Diagrams,","authors":[],"date":"2001","doi":null,"raw":"M. Jamnik, Mathematical Reasoning with Diagrams, CSLI Publications, 2001.","cites":null},{"id":42750405,"title":"Natural language presentation and combination of automatically generated proofs.","authors":[],"date":null,"doi":"10.1007\/978-94-009-0349-4_9","raw":"B.I. Dahn and A. Wolf. Natural language presentation and combination of automatically generated proofs. Proc. Frontiers of Combining Systems, Muenchen, Germany, p175-192, 1996.","cites":null},{"id":42750440,"title":"or SUCCESS is not enough: Current technology and future directions in proof presentation.","authors":[],"date":"2001","doi":null,"raw":"J. Schumann and P. Robinson. [] or SUCCESS is not enough: Current technology and future directions in proof presentation. Proc. IJCAR workshop: Future directions in automated reasoning, 2001.","cites":null},{"id":42750426,"title":"SD2: A sound and complete diagrammatic reasoning system.","authors":[],"date":"2000","doi":"10.1109\/vl.2000.874376","raw":"J. Howse, F. Molina, and J. Taylor. SD2: A sound and complete diagrammatic reasoning system. Proc. IEEE Symposium on Visual Languages (VL2000), IEEE Computer Society Press p.402-408, 2000.","cites":null},{"id":42750439,"title":"The Logical Status of Diagrams.","authors":[],"date":"1994","doi":"10.1017\/cbo9780511574696","raw":"S.-J. Shin. The Logical Status of Diagrams. Camb. Uni. Press, 1994.","cites":null},{"id":42750445,"title":"The Visual Modelling Group technical report on spider diagram reasoning systems at www.cmis.brighton.ac.uk\/research\/vmg\/SDRules.html","authors":[],"date":null,"doi":null,"raw":"The Visual Modelling Group technical report on spider diagram reasoning systems at www.cmis.brighton.ac.uk\/research\/vmg\/SDRules.html","cites":null},{"id":42750444,"title":"Using DAG Transformations to Verify Euler\/Venn Homogeneous and Euler\/Venn FOL Heterogeneous Rules of Inference.","authors":[],"date":"2003","doi":"10.1016\/s1571-0661(04)80613-3","raw":"N. Swoboda and G. Allwein. Using DAG Transformations to Verify Euler\/Venn Homogeneous and Euler\/Venn FOL Heterogeneous Rules of Inference. Electronic Notes in Theoretical Computer Science, 72, No. 3 (2003).","cites":null},{"id":42750442,"title":"What can spider diagrams say?","authors":[],"date":"2004","doi":"10.1007\/978-3-540-25931-2_12","raw":"G. Stapleton, J. Howse, J. Taylor and S. Thompson. What can spider diagrams say? Proc. Diagrams 2004.","cites":null}],"documentType":{"type":1}},"contributors":["Blackwell, A.","Marriott, K.","Shimojima, A."],"datePublished":"2004-01-01","abstract":"An important aim of diagrammatic reasoning is to make it easier for people to create and understand logical arguments. We have worked on spider diagrams, which visually express logical statements. Ideally, automatically generated proofs should be short and easy to understand. An existing proof generator for spider diagrams successfully writes proofs, but they can be long and unwieldy. In this paper, we present a new approach to proof writing in diagrammatic systems, which is guaranteed to find shortest proofs and can be extended to incorporate other readability criteria. We apply the A* algorithm and develop an admissible heuristic function to guide automatic proof construction. We demonstrate the effectiveness of the heuristic used. The work has been implemented as part of a spider diagram reasoning tool","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Springer Verlag","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.brighton.ac.uk:2876<\/identifier><datestamp>\n      2015-04-21T10:48:07Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D47303030<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.brighton.ac.uk\/2876\/<\/dc:relation><dc:title>\n        Generating readable proofs: a heuristic approach to theorum proving with spider diagrams<\/dc:title><dc:creator>\n        Flower, Jean<\/dc:creator><dc:creator>\n        Masthoff, Judith<\/dc:creator><dc:creator>\n        Stapleton, Gem<\/dc:creator><dc:subject>\n        G000 Computing and Mathematical Sciences<\/dc:subject><dc:description>\n        An important aim of diagrammatic reasoning is to make it easier for people to create and understand logical arguments. We have worked on spider diagrams, which visually express logical statements. Ideally, automatically generated proofs should be short and easy to understand. An existing proof generator for spider diagrams successfully writes proofs, but they can be long and unwieldy. In this paper, we present a new approach to proof writing in diagrammatic systems, which is guaranteed to find shortest proofs and can be extended to incorporate other readability criteria. We apply the A* algorithm and develop an admissible heuristic function to guide automatic proof construction. We demonstrate the effectiveness of the heuristic used. The work has been implemented as part of a spider diagram reasoning tool.<\/dc:description><dc:publisher>\n        Springer Verlag<\/dc:publisher><dc:contributor>\n        Blackwell, A.<\/dc:contributor><dc:contributor>\n        Marriott, K.<\/dc:contributor><dc:contributor>\n        Shimojima, A.<\/dc:contributor><dc:date>\n        2004-01-01<\/dc:date><dc:type>\n        Contribution to conference proceedings in the public domain<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n          Flower, Jean, Masthoff, Judith and Stapleton, Gem  (2004) Generating readable proofs: a heuristic approach to theorum proving with spider diagrams  In: Proceedings of the Third International Conference, Diagrams 2004, Cambridge, UK, March 22-24, 2004.     <\/dc:identifier><dc:relation>\n        http:\/\/www.springerlink.com\/content\/uhbuhrncgxpd\/?MUD=MP<\/dc:relation><dc:relation>\n        10.1007\/978-3-540-25931-2_17<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.brighton.ac.uk\/2876\/","http:\/\/www.springerlink.com\/content\/uhbuhrncgxpd\/?MUD=MP","10.1007\/978-3-540-25931-2_17"],"year":2004,"topics":["G000 Computing and Mathematical Sciences"],"subject":["Contribution to conference proceedings in the public domain","PeerReviewed"],"fullText":"Generating Readable Proofs: A Heuristic\nApproach to Theorem Proving With Spider\nDiagrams\nJean Flower, Judith Masthoff, and Gem Stapleton\nThe Visual Modelling Group\nUniversity of Brighton, Brighton, UK\nwww.cmis.brighton.ac.uk\/research\/vmg\n{J.A.Flower,Judith.Masthoff,G.E.Stapleton}@bton.ac.uk\nAbstract. An important aim of diagrammatic reasoning is to make it\neasier for people to create and understand logical arguments. We have\nworked on spider diagrams, which visually express logical statements.\nIdeally, automatically generated proofs should be short and easy to un-\nderstand. An existing proof generator for spider diagrams successfully\nwrites proofs, but they can be long and unwieldy. In this paper, we\npresent a new approach to proof writing in diagrammatic systems, which\nis guaranteed to find shortest proofs and can be extended to incorporate\nother readability criteria. We apply the A\u2217 algorithm and develop an\nadmissible heuristic function to guide automatic proof construction. We\ndemonstrate the effectiveness of the heuristic used. The work has been\nimplemented as part of a spider diagram reasoning tool.\n1 Introduction\nIn this paper, we show how readability can be taken into account when generating\nproofs in a spider diagram reasoning system. In particular, we show how the A*\nheuristic search algorithm can be applied.\nIf diagrammatic reasoning is to be practical, then tool support is essential.\nProof writing in diagrammatic systems without software support can be time-\nconsuming and error prone.\nIn [4] we present a proving environment that supports reasoning with spider\ndiagrams. This proving environment incorporates automated proof construction:\nan algorithm generates a proof that one spider diagram entails another, provided\nsuch a proof exists. This algorithm usually produces long and somewhat unwieldy\nproofs. These unnatural proofs suffice if one only wishes to know that there exists\na proof. However, if one wishes to read and understand a proof then applying\nthe algorithm may not be the best approach to constructing a proof.\nReadability and understandability of proofs are important because they:\n\u2013 support education. The introduction of calculators has not stopped us teach-\ning numeracy. Similarly, automatic proof generators will not stop us teaching\nstudents how to construct proofs manually. An automated proof generator\ncan support the learning process, but only if it generates proofs similar to\nthose produced by expert humans [22].\n\u2013 increase notational understanding. People will need to write and verify the\nspecifications (premise and conclusion) given to the automated proof genera-\ntor. Specification is the phase where most mistakes can be introduced [11]. A\ngood understanding of the notation used is therefore needed. Reading (and\nwriting) proofs helps to develop that understanding.\n\u2013 provide trust in generated proofs. As discussed in [11], automated proof\ngenerators can themselves contain flaws1 and many people remain wary of\nproofs they cannot themselves understand [22].\n\u2013 encourage lateral thinking. Understanding a proof often leads to ideas of\nother theorems that could be proved.\nResearch has been conducted on how to optimize the presentation of proofs, op-\ntimizing the layout of proofs or annotating proofs with or even translating them\ninto natural language (see for example [15],[13],[1]). The diagrammatic reason-\ning community attempts to make reasoning easier by using diagrams instead\nof formulas. For instance, we are working on presenting proofs as sequences of\ndiagrams.\nIn this paper, we enhance the proving environment presented in [4] by de-\nveloping a heuristic approach to theorem proving in the spider diagram system.\nWe define numerical measures that indicate \u2018how close\u2019 one spider diagram is to\nanother and these measures guide the tool towards rule applications that result\nin shorter and, therefore, hopefully more \u2018natural\u2019 proofs. In fact, the method\nis guaranteed to find a shortest proof, provided one exists. Note that heuristic\napproaches have been used in automated theorem provers before, but mainly to\nmake it faster and less memory intensive to find a proof. This is a nice side effect\nof using heuristics, but our main reason is readability of the resulting proof.\nOften heuristics used are not numerical such as \u2018in general, this rule should be\napplied before that rule\u2019 (e.g. [12]).When numerical heuristics have been used\n(e.g. [5]), they have usually been used to find a proof quickly rather than to\noptimize the proofs.\nMany other diagrammatic reasoning systems have been developed, see [9]\nfor an overview. For example, the DIAMOND system allows the construction\nof diagrammatic proofs, learning from user examples. The kinds of diagrams\nconsidered are quite different to spider diagrams.\nIn [18] Swoboda proposes an approach towards implementing an Euler\/Venn\nreasoning system, using directed acyclic graphs (DAGs). The use of DAGs to\ncompare diagrams was the focus of [19] in which two diagrams are compared\nto assess the correctness of a single diagram transformation. It is possible that\nthe work on DAGs, if extended to assess a sequence of diagram transformations,\ncould show some similarity to the measures we give in section 4. The existing\nDAGs work does not create proofs but rather checks the validity of a proof\ncandidate.\nThe structure of this paper is as follows. In Section 2, we introduce a simpli-\nfied (unitary diagrams only) version of our spider diagram reasoning system. In\n1 If an algorithm has been proved correct, still the correctness proof or the implemen-\ntation could contain errors.\n2\nSection 3, we discuss the A* heuristic search algorithm that we have applied to\nthis reasoning system. In Section 4, we describe a so-called admissible heuristic\nfunction that measures the difference between two spider diagrams. In Section\n5, we briefly discuss how the heuristic diagrammatic proof generator has been\nimplemented, and evaluate its results. We conclude by discussing how the cost\nelement of A* can be used to further enhance understandability (the shortest\nproof is not necessarily the easiest to understand), how the heuristic can be used\nto support interactive proof writing, and what we expect from extending this\napproach to non-unitary spider diagrams and so-called constraint diagrams.\n2 Unitary spider diagrams\nIn this section, we briefly and informally introduce our diagrammatic reasoning\nsystem. For reasons of clarity, we restrict ourselves in this paper to so-called\nunitary spider diagrams and the reasoning rules associated with those. We will\nbriefly return to non-unitary diagrams in Section 6.\nSimple diagrammatic systems that inspired spider diagrams are Venn and\nEuler diagrams. In Venn diagrams all possible intersections between contours\nmust occur and shading is used to represent the empty set. Diagram d1 in Fig.\n1 is a Venn diagram. Venn-Peirce diagrams [14] extend the Venn diagram nota-\ntion, using additional syntax to represent non-empty sets. Euler diagrams exploit\ntopological properties of enclosure, exclusion and intersection to represent sub-\nsets, disjoint sets and set intersection respectively. Spider diagrams are based\nC a t sM i c e D o g s\nd 2d 1\nA B\nC\nFig. 1. A Venn diagram and a spider diagram.\non Euler diagrams. Spiders are used to represent the existence of elements and\nshading is used to place upper bounds on the cardinalities of sets. A spider is\ndrawn as a collection of dots (the feet) joined by lines. The diagram d2 in Fig.\n1 is a spider diagram. Sound and complete reasoning rules for various spider\ndiagram systems have been given, e.g. [4].\n2.1 Syntax and semantics of unitary spider diagrams\nIn this section, we will give an informal description of the syntax and semantics\nof unitary spider diagrams. Details and a formal description can be found at\n[17].\n\u2013 A contour is a labelled shape in the diagram used to denote a set.\n\u2013 A boundary rectangle is an unlabelled rectangle that bounds the diagram\nand denotes the universal set.\n3\n\u2013 A zone, roughly speaking, is a bounded area in the diagram having no other\nbounded area contained within it. More precisely, a zone can be described\nby the set of labels of the contours that contain it (the containing label set)\nand the set of labels of the contours that exclude it (the excluding label set).\nA zone denotes a set by intersection and subtraction of the sets denoted by\nthe contours that contain it and the contours that exclude it respectively.\n\u2013 A spider is a tree with nodes, called feet, placed in different zones. A spider\ntouches a zone if one of its feet appears in that zone. The set of zones a\nspider touches is called its habitat. A spider denotes the existence of an\nelement in the set represented by its habitat. Distinct spiders represent the\nexistence of distinct elements.\n\u2013 A zone can be shaded. In the set represented by a shaded zone, all of the\nelements are represented by spiders. So, a shaded zone with no spiders in it\nrepresents the empty set.\n\u2013 A unitary diagram is a finite collection of contours (with distinct labels),\nshading and spiders properly contained by a boundary rectangle.\nThe unitary diagram d2 in Fig. 1 contains three labelled contours and five\nzones, of which one is shaded. There are two spiders. The spider with one foot\ninhabits the zone inside (the contour labelled) Cats, but outsideDogs andMice.\nThe other spider inhabits the zone set which consists of the zone insideMice and\nthe zone inside Dogs but outside Cats. The diagram expresses the statement\n\u201cno mice are cats or dogs, no dogs are cats, there is a cat and there is something\nthat is either a mouse or a dog\u201d. A semantically equivalent diagram could be\ndrawn which presents the contours Dogs and Cats as disjoint.\nThe semantics for spider diagrams is model-based. A model assigns sets to\ndiagram contours, and zones to appropriate intersections of sets (and their com-\nplements). Zones which are absent from a diagram (for example if two contours\nare drawn disjoint) correspond to empty sets. Spiders assert the existence of (dis-\ntinct) elements in the sets and shading (with spiders) asserts an upper bound\non the cardinality of the sets. A zone which is shaded but untouched by spiders\ncorresponds to the empty set in any model, but a zone which has a single-footed\nspider and is shaded corresponds to a set with exactly one element. A full de-\nscription of the semantics can be found at [17].\n2.2 Reasoning Rules\nIn this section we will give informal descriptions of the reasoning rules for unitary\nspider diagrams. Each rule is expressed as a transformation of one unitary spider\ndiagram into another. Formal descriptions can be found at [21].\nRule 1 Add contour. A new contour can be added. Each zone is split into two\nzones (one inside and one outside the new contour) and shading is preserved.\nEach foot of a spider is replaced by a connected pair of feet, one in each of the\ntwo new zones. For example, in Fig. 2, diagram d2 is obtained from d1 by adding\nthe contour labelled B.\n4\nRule 2 Delete contour. A contour can be deleted. If, as a result, a spider has\ntwo feet in the same zone, these feet are contracted into a single foot.\nRule 3 Add shaded zone. A new, shaded zone can be added.\nRule 4 Delete shaded zone. A shaded zone that is not part of the habitat of\nany spider can be deleted. For example, in Fig. 2, diagram d3 is obtained from\nd2 by deleting a shaded zone.\nRule 5 Erase shading. Shading can be erased from any zone.\nRule 6 Delete spider. A spider whose habitat is completely non-shaded can\nbe deleted.\nRule 7 Add spider foot. A spider foot can be added to a spider in a zone it\ndoes not yet touch.\nWith the semantics as sketched in the previous section, each of these rules\nhas been proven to be sound. This means that an application of any rule to\na diagram yields a second diagram representing a semantic consequence of the\nfirst diagram. A sequence of diagrams and rule applications also gives a semantic\nconsequence, and in this logic system, is a proof.\nLet d1 and d2 be diagrams. We say d2 is obtainable from d1, denoted d1 ` d2,\nif and only if there is a sequence of diagrams \u3008d1, d2, ..., dm\u3009 such that d1 = d1,\ndm = d2 and, for each k where 1 \u2264 k < m, dk can be transformed into dk+1 by\na single application of one of the reasoning rules. Such a sequence of diagrams\nis called a proof from premise d1 to conclusion d2.\nA A B\nd 1 d 2\nA B\nd 3\nFig. 2. Applications of Add Contour and Delete Shaded Zone.\n3 A* applied to proof writing\nTo construct a proof, a rule needs to be applied to the premise diagram, followed\nby another rule to the resulting diagram, and so on, until the conclusion dia-\ngram is reached. At any stage in the proof, multiple rules might be applicable.\nFor instance, in Figure 2, many rules can be applied to diagram d1, such as Add\nContour B, Delete Contour A, Delete Spider, Erase Shading, and Add Spider\nFoot. Not all rules applications help to find a shortest proof (e.g., only apply-\ning Add Contour B to d1 would help to find a shortest proof to d3), and some\nrule applications might even make it impossible to find a proof (e.g., applying\nDelete Spider to d1 results in a diagram from which d3 can no longer be proven).\nHuman proof writers might intelligently choose the next rule to apply, in order\n5\nto reach the conclusion diagram as quickly as possible. The problem of decid-\ning which rules to apply to find a proof is an example of a more general class\nof so-called search problems, for which various algorithms have been developed\n(see [10] for an overview). Some of these algorithms, so-called blind-search algo-\nrithms, systematically try all possible actions. Others, so-called best-first search\nalgorithms, have been made more intelligent, and attempt (like humans) to in-\ntelligently choose which action to try first. A\u2217 is a well known best-first search\nalgorithm [6].\nA\u2217 stores an ordered sequence of proof attempts. Initially, this sequence only\ncontains a zero length proof attempt, namely the premise diagram. Repeatedly,\nA\u2217 removes the first proof attempt from the sequence and considers it. If the last\ndiagram of the proof attempt is the conclusion diagram, then an optimal proof\nhas been found. Otherwise, it constructs additional proof attempts, by extending\nthe proof attempt under consideration, applying rules wherever possible to the\nlast diagram.\nThe effectiveness of A\u2217 and the definition of \u201coptimal\u201d is dependent upon the\nordering imposed on the proof attempt sequence. The ordering is derived from\nthe sum of two functions. One function, called the heuristic, estimates how far\nthe last diagram in the proof attempt is from the conclusion diagram. The other,\ncalled the cost, calculates how costly it has been to reach the last diagram from\nthe premise diagram. We define the cost of applying a reasoning rule to be one.\nSo, the cost is the number of reasoning rules that have been applied to get from\nthe premise diagram to the last diagram (i.e. the length of the proof attempt).\nThe new proof attempts are inserted into the sequence, ordered according to the\ncost plus heuristic.\nA\u2217 has been proven to be complete and optimal, i.e. always finding the best\nsolution (because all reasoning rules have cost 1, this means the shortest proof), if\none exists, provided the heuristic used is admissible [2]. A heuristic is admissible\nif it is optimistic, which means that it never overestimates the cost of getting\nfrom a premise diagram to a conclusion diagram. As all reasoning rules have\ncost equal to one, this means that the heuristic should give a lower bound on\nthe number of proof steps needed in order to reach the conclusion diagram.\nThe amount of memory and time needed by A\u2217 depends heavily on the quality\nof the heuristic used. For instance, a heuristic that is the constant function zero\nis admissible, but will result in long and memory-intensive searches. The better\nthe heuristic (in the sense of accurately predicting the length of a shortest proof),\nthe less memory and time are needed for the search. In this paper, we present\na highly effective heuristic for A\u2217 applied to proof writing in a unitary spider\ndiagram reasoning system.\n4 Heuristic function for unitary diagrams\nAs discussed above, in order to apply A\u2217 we need a heuristic function that\ngives an optimistic (admissible) estimate of how many proof steps it would take\nto get from a premise diagram to the conclusion diagram. In this section, we\ndevelop various measures between two unitary diagrams. The overall heuristic\n6\nwe use is built from these measures. The heuristic gives a lower bound on the\nnumber of proof steps required and is used to help choose rule applications when\nconstructing proofs in our implementation.\nThere are four types of differences that can be exhibited between two uni-\ntary diagrams: between the contour labels, the zones, the shaded zones and the\nspiders.\nd 2\nA C\nd 1\nB C\nC D i f f  ( d 1 ,  d 2 )  =  2\nd 2\nB C\nC o n t o u r F o r m  ( d 1 )\nB C\nA d d Z o n e  ( d 1 ,  d 2 )  =  0R e m Z o n e  ( d 1 ,  d 2 )  =  1\nV e n n ( d 2 )\nB C\nV e n n ( C o n t o u r F o r m  ( d 1 ) )\nB C\n  A d d S h a d i n g  ( d 1 ,  d 2 )  =  0  R e m S h a d i n g  ( d 1 ,  d 2 )  =  1   R e m S p i d e r s  ( d 1 ,  d 2 )  =  1C h a n g e d S p i d e r s  ( d 1 ,  d 2 )  =  0\nd 2\nA C\nd 1\nB CC C B C B C\nU H ( d 1 , d 2 )  =  2 + 1 + 0 + 1 + m i n ( 0 + 1 + 0 , 2 )  =  5\nFig. 3. Calculating the heuristic: example 1.\n4.1 The contour difference measure\nThe only rules that alter a unitary diagram\u2019s contour set are Add Contour and\nDelete Contour, which respectively add and delete one contour at a time. Thus\nwe define the contour difference measure between diagrams d1 and d2 to be\nthe size of the symmetric difference of the label sets Cont(d1) (the set of labels\nof the contours of d1) and Cont(d2):\nCDiff(d1, d2) = |Cont(d2)\u2212 Cont(d1)|+ |Cont(d1)\u2212 Cont(d2)|\nThe contour difference between d1 and d2 in Figure 3 is given by\nCDiff(d1, d2) = |{A,C} \u2212 {B,C}|+ |{B,C} \u2212 {A,C}| = 2\nwhereas the contour sets in Figure 4 are equal, so CDiff(d1, d2) = 0.\n7\nd 2\nA C\nd 1\nA C\nC D i f f  ( d 1 ,  d 2 )  =  0\nd 2C o n t o u r F o r m  ( d 1 )  A d d Z o n e  ( d 1 ,  d 2 )  =  1R e m Z o n e  ( d 1 ,  d 2 )  =  0\nV e n n ( d 2 )\nA C\nV e n n ( C o n t o u r F o r m ( d 1 ) )   A d d S h a d i n g  ( d 1 , d 2 )  =  0   R e m S h a d i n g  ( d 1 , d 2 )  =  1    R e m S p i d e r s  ( d 1 , d 2 )  =  0C h a n g e d S p i d e r s  ( d 1 , d 2 )  =  1\nB\nB\nA C\nB\nA C\nB\nB\nA C\nB\nd 2\nA C\nd 1\nA C\nB\nB\nA\nB\nU H ( d 1 , d 2 )  =  0 + 0 + 0 + 0 + m i n ( 1 + 1 + 1 , 2 )  =  2\nFig. 4. Calculating the heuristic: example 2.\n4.2 The zone difference measures\nA diagram\u2019s zone set can be altered by the rules Add Contour, Delete Contour,\nAdd Shaded Zone, and Delete Shaded Zone. The calculation of CDiff identified\ncontour differences between d1 and d2, and Add and Delete Contour rules would\nhave to appear in any proof from d1 to d2 to fix these differences. We need to\ndetermine whether these rules are sufficient to account for changes in the zone\nsets, or whether other applications of rules to add or delete shaded zones are\nneeded. In order to calculate the zone difference measures for the heuristic, take\nd1 and apply the relevant Delete Contour and Add Contour rules to make a new\ndiagram, ContourForm(d1, d2) which has the same contour set as d2. If the zone\nsets of ContourForm(d1, d2) and d2 don\u2019t match, we may also need to use Add\nShaded Zone and\/or Delete Shaded Zone in any proof from d1 to d2.\nTwo zones are deemed equal if they have the same set of containing con-\ntour labels and the same set of excluding contour labels. Define the two zone\n8\ndifference measures between diagrams d1 and d2 to be\nAddZone(d1, d2) =\n{\n1 if Zones(d2) * Zones(ContourForm(d1, d2))\n0 otherwise\nRemZone(d1, d2) =\n{\n1 if Zones(ContourForm(d1, d2)) * Zones(d2)\n0 otherwise.\nThe sum CDiff(d1, d2) +AddZone(d1, d2) +RemZone(d1, d2) is an optimistic\nestimate of the number of applications of Add Contour, Delete Contour, Add\nShaded Zone and Delete Shaded Zone which are required in a proof from d1 to\nd2.\nIn Figure 3, the diagram ContourForm(d1) has a zone not present in d2 (the\nzone in both contours B and C), so RemZone(d1, d2) = 1. All zones in d2 are\npresent in ContourForm(d1), so AddZone(d1, d2) = 0. The sum of measures\nis three, and this corresponds to three rule applications: Remove Contour (A),\nAdd Contour (B) and Delete Shaded Zone (intersection of B and C) which\nhave to be present in any proof from d1 to d2. In Figure 4, diagram d2 has two\nzones not in ContourForm(d1): the zone in A and C and the zone in B and C.\nAlthough there are two extra zones, we still find that AddZone(d1, d2) = 1. The\nsum above, in this case, is 0 + 1 + 0 = 1 and any proof from d1 to d2 indeed\nrequires at least one step.\nP Q\nd 2d 1\nA B\nC\nA B P Q\nR\nd 3 d 4\nFig. 5. Examples to justify capping measures at one.\nFrom these examples alone, the limiting of AddZone and RemZone to a\nmaximum value of one may seem counterintuitive. In Figure 5, diagrams d1 and\nd2 have CDiff(d1, d2) = 1 and AddZone(d1, d2) = 1. Because there are two\nzones in d2 which are not present in ContourForm(d1, d2), one might conclude\nthat two applications of Add Shaded Zone would be required to transform d1 into\nd2, and a suitable AddZone measure would be two. However, we can add just one\nshaded zone to d1 before adding the contour C. For this reason, the AddZone\nmeasure is capped at a value of 1, even where ContourForm(d1, d2) has more\nthan one zone that is not in d1. Diagrams d3 and d4 in Figure 5 similarly justify\nthe capping of the RemZone measure at one.\n4.3 The shading difference measures\nSo far, we have captured differences between contour sets and zone sets. We also\nwant a way to compare the shading between diagrams. The shading can not only\nbe affected by the rule Erase Shading, but also by any of the rules required to\nmake the contour sets and the zone sets the same.\n9\nTo measure the difference in shading between d1 and d2, we take the di-\nagram ContourForm(d1, d2) and add shaded zones until the diagram is in\nVenn form (every possible zone is present, given the contour label set), giv-\ning V enn(ContourForm(d1, d2)). We also add shaded zones to d2 until d2 is\nin Venn form, giving V enn(d2). The shading difference measures between\ndiagrams d1 and d2 are defined to be\nAddShading(d1, d2) =\n\uf8f1\uf8f2\uf8f3\u221e if ShadedZones(V enn(d2))* ShadedZones(V enn(ContourForm(d1, d2)))0 otherwise\nRemShading(d1, d2) =\n\uf8f1\uf8f2\uf8f31 if ShadedZones(V enn(ContourForm(d1, d2)))* ShadedZones(V enn(d2))0 otherwise.\nThe allocation of \u221e as the AddShading measure indicates that there is no\nproof from d1 to d2. In the examples shown in Figures 3 and 4, a proof does\nexist between d1 and d2, and in both cases AddShading(d1, d2) = 0. Also, in\nboth figures, V enn(ContourForm(d1, d2)) has more shading than V enn(d2), so\nRemShading(d1, d2) = 1. The value of RemShading is capped at 1 for similar\nreasons to the capping of AddZone and RemZone.\nThe sum CDiff + AddZone+ RemZone+ AddShading + RemShading is\nan optimistic estimate of the number of applications of Add Contour, Delete\nContour, Add Shaded Zone, Delete Shaded Zone, and Erase Shading which are\nrequired in a proof from d1 to d2 (i.e. the sum is a lower bound on the number\nof proof steps required).\n4.4 The spider difference measures\nThe rules Delete Spider and Add Spider Foot change the number of spiders in\na diagram and the habitats of spiders, respectively. In addition, deleting and\nreintroducing a contour can also affect the habitats of spiders.\nWe can see that no rules introduce spiders, so if d2 has more spiders than d1\nthen we define the spider difference measure to be infinite (in effect, blocking the\nsearch for proofs between such diagrams). If we have fewer spiders in d2 than d1,\nthen the rule Delete Spider must have been applied and the difference between\nthe numbers of spiders contributes to the heuristic.\nIf a spider in d2 has a different habitat to all spiders in ContourForm(d1, d2)\n(i.e. it\u2019s unmatched in d1) then some rule must be applied to change the habitat\nof a spider in d1 to obtain the spider in d2. That rule could be Add Spider\nFoot. Alternatively, the deletion and reintroduction of a contour can change\nmany spiders\u2019 habitats. We say that n spiders in d2 are unmatched in d1 if\nthe bag subtraction Bag(habitats of spiders in d2)\u2212Bag(habitats of spiders in\nContourForm(d1, d2)) has n elements. Define\nRemSpiders(d1, d2) =\n{\u221e if NumSpiders(d1)\u2212NumSpiders(d2) < 0\nNumSpiders(d1)\u2212NumSpiders(d2) otherwise\n10\nChangedSpiders(d1, d2) = Number of spiders in d2 unmatched in d1.\nIn Figure 3, there is one spider in d1 and none in d2, so one application of\nthe Delete Spider rule is required in any proof from d1 to d2. The measure\nRemSpiders(d1, d2) = 1, but there are no unmatched spiders in d2, so\nChangedSpiders(d1, d2) = 0. In Figure 4, d1 and d2 have the same number of\nspiders, so RemSpiders(d1, d2) = 0. However, the spider in d2 is unmatched in\nd1 so ChangedSpiders(d1, d2) = 1.\n4.5 The unitary diagram heuristic\nWe have built seven measures by considering possible differences between the\npremise and conclusion diagrams. To give us a lower bound on the length of\na proof with premise d1 and conclusion d2 we take the sum of the measures\ndescribed above, but limit the contributions from AddZone, RemShading and\nChangedSpiders to 2. This is because zones, shading and spiders can change\nby applications of Delete Contour followed by Add Contour, as illustrated in\nFigure 4. Unless we cap the heuristic as shown, it will fail to be admissible, as\nrequired by the A* algorithm. Define the unitary diagram heuristic between\nd1 and d2 to be the sum\nUH(d1, d2) = CDiff(d1, d2) +RemZone(d1, d2)\n+ AddShading(d1, d2) +RemSpiders(d1, d2)\n+ min\n\uf8f1\uf8f2\uf8f3AddZone(d1, d2) +RemShading(d1, d2)+ChangedSpiders(d1, d2)2.\nLemma 1. Let d1 and d2 be unitary diagrams. If UH(d1, d2) =\u221e then d1 6` d2.\nTheorem 1. Let d1 and d2 be unitary diagrams. If there is a proof with premise\nd1 and conclusion d2 then that proof has length at least UH(d1, d2). That is, the\nunitary diagram heuristic is optimistic.\nThe proof strategy uses induction on lengths of proofs. Given a shortest proof\nlength n between d1 and d2, let dnext be the second diagram in the proof. The\nproof from dnext to d2 is length n\u22121 and so by induction, n\u22121 \u2265 UH(dnext, d2).\nWe consider the seven rules in turn which could have been applied to d1 to obtain\ndnext. In each case, we find a relationship between UH(d1, d2) and UH(dnext, d2)\nwhich allows us to deduce that n \u2265 UH(d1, d2).\n5 Implementation and Evaluation\nThe heuristic approach to proof-finding has been implemented in java as part\nof a proving tool (available at [20]). The user can provide diagrams and ask the\nprover to seek a proof from one diagram to another. The tool allows the user to\ngive a restriction on the rule-set used. Moreover, in order to assess the benefits\ngained from the heuristic defined in section 4, the user can choose between the\n11\nzero heuristic (ZH) and the unitary diagram heuristic (as defined above). The\nzero heuristic simply gives ZH(d1, d2) = 0, for any diagrams d1 and d2. The\nA\u2217 algorithm, when implemented with the zero heuristic, simply performs an\ninefficient breadth-first search of the space of all possible proof attempts (given\nthat we have assumed the cost of each rule application to be 1).\nBoth heuristics succeed in finding proofs - the zero heuristic taking longer\nthan the unitary diagram heuristic. The application records how many proof\nattempts were made during the search. This number can be thought of as a\nmemory and time burden. The savings made using our heuristic, over using\nthe zero heuristic, can be seen by comparing the number of proof attempts. In\nan extreme case, during the data collection described below, the zero heuris-\ntic required 70795 proof attempts while our heuristic only required 543 proof\nattempts.\nWe generated a random sample (size n = 2400) of pairs of unitary diagrams,\nd1 and d2, for which d1 ` d2. These diagrams had at most three contours, two\nspiders and had a shortest proof length of four steps between them (these choices\nwere arbitrary - similar results can be obtained by using different data sets). For\neach pair, we recorded the number of proof attempts each heuristic took to find a\nshortest proof from d1 to d2. Since we are interested in the proportional saving,\nwe calculated the ratio n1n2 where n1 is the number of proof attempts for the\nunitary diagram heuristic and n2 is the number of proof attempts for the zero\nheuristic. A histogram showing the ratios obtained and their frequencies can be\nseen in Figure 6, as can a scatter plot of the raw data.\n0 . 0 0 . 1 0 . 2\n0\n1 0 0\n2 0 0\n3 0 0\n4 0 0\nn 1 \/ n 2\nF\nr\ne\nq\nu\ne\nn\nc\ny\n0 1 0 0 0 0 2 0 0 0 0 3 0 0 0 0 4 0 0 0 0 5 0 0 0 0 6 0 0 0 0 7 0 0 0 0\n0\n1 0 0 0\n2 0 0 0\n3 0 0 0\nn 2\nn\n1\nFig. 6. Histogram showing the frequencies for each ratio and a scatter plot.\nWe found that the unitary diagram heuristic takes, on average, less than 4%\nof the number of proof attempts that the zero heuristic takes.\nThe A\u2217 search algorithm was implemented in two ways - one stopping con-\ndition guarantees that one shortest proof was found (as discussed above), and a\nstronger stopping condition guarantees that all shortest proofs were found. This\nsecond stopping condition was implemented so that the data collected was not\naffected by the order in which rules were applied in the search process. Even\nthough it\u2019s slower, the collection of all shortest proofs (instead of just one proof)\ncould be of value in terms of maximizing readability of the outcome. Using the\nstronger stopping condition, the unitary heuristic takes, on average, less than\n1.5% of the number of proof attempts that the zero heuristic takes.\n12\n6 Conclusion and further work\nIn this paper, we have demonstrated how a heuristic A\u2217 approach can be used\nto automatically generate optimal proofs in a unitary spider diagram reasoning\nsystem. We regard this as an important step towards generating readable proofs.\nHowever, our work has been limited in a number of ways.\nThe first limitation is that we have assumed the cost of applying each rule to\nbe equal. This results in the optimal proofs being found by A\u2217 being the shortest\nproofs. However, as already indicated in the introduction, the conciseness of a\nproof does not have to be synonymous with its readability and understandability.\nThe cost element of the evaluation function can be altered to incorporate other\nfactors that impact readability. For instance:\n\u2013 Comprehension of rules. There may be a difference in how difficult each rule\nis to understand. This might depend on the number of side effects of a rule.\nFor instance, Delete Spider only deletes a spider without any side effects,\nwhile Add Contour does not only add a new contour, but can also add new\nfeet to existing spiders. This might make an Add Contour application more\ndifficult to understand. In a training situation, a student might already be\nvery familiar with some rules but still new to other rules. We can model a\ndifference in the relative difficulty of rules by assigning different costs. As\nlong as we keep the minimum cost equal to 1, this would not impact the\nadmissibility of the heuristic.\n\u2013 Drawability of diagrams. As discussed in [7] not all diagrams are drawable,\nsubject to some well-formed conditions. These conditions were chosen to in-\ncrease the usability of diagrams, for instance, the diagram with two contours\nwhich are super-imposed could be hard for a user to interpret, and there is no\nway of drawing that diagram without concurrent contours, or changing the\nunderlying zone set. Ultimately, we want to present a proof as a sequence of\nwell-formed diagrams with rule applications between them. A proof would be\nless readable if an intermediate diagram could not be drawn. We can model\nthis by increasing the cost of a rule application if the resulting diagram is\nnot drawable.\nEmpirical research is needed to determine which other factors might impact\nreadability, what the relative understandability of the rules is and to what extent\nthat is person dependent, and how to deal with non-drawable diagrams.\nThe second limitation is that we have restricted ourselves to discussing the\ncase of unitary spider diagrams. To enhance the practical usefulness of this\nwork, we will need to extend this first to so-called compound diagrams, and\nnext to the much more expressive constraint diagrams. Compound diagrams are\nbuilt from unitary diagrams, using connectives unionsq and u to present disjunctive\nand conjunctive information. If D1 and D2 are spider diagrams then so are\nD1unionsqD2 (\u201cD1 or D2\u201d) and D1uD2 (\u201cD1 and D2\u201d). In addition to the reasoning\nrules discussed in Section 2.2 which operate on the unitary components, many\nreasoning rules exist that change the structure of a compound diagram [21].\nWe have started to investigate heuristic measures for compound diagrams. Our\n13\nimplementation (available on [20]) is capable of generating proofs for compound\ndiagrams, using either the zero heuristic, or a simple heuristic that is derived\nonly from the number of unitary components of the diagrams. Two rules were\nexcluded, namely D1 ` D1 unionsq D2, and False ` D1. We have defined modified\nversions of the unitary measures, which we expect to be able to integrate into\nan effective heuristic for compound diagrams, and we are exploring the use of\nadditional structural information.\nConstraint diagrams are based on spider diagrams and include further syn-\ntactic elements, such as universal spiders and arrows. Universal spiders represent\nuniversal quantification (in contrast, spiders in spider diagrams represent exis-\ntential quantification). Arrows denote relational navigation. In [3] the authors\ngive a reading algorithm for constraint diagrams. A constraint diagram reason-\ning system (with restricted syntax and semantics) has been introduced in [16].\nSince the constraint diagram notation extends the spider diagram notation, this\nis a significant step towards the development of a heuristic proof writing tool\nfor constraint diagrams. In [16], the authors show that the constraint diagram\nsystem they call CD1 is decidable. However there are more expressive versions of\nthe constraint diagram notation that may or may not yield decidable systems. If\na constraint diagram system does not yield a decidable system then a heuristic\napproach to theorem proving will be vital if we are to automate the reasoning\nprocess.\nIn addition to its use in automatic proof generation, our heuristic measure\ncan also be used to support interactive proof writing (e.g. in an educational\nsetting). It can advise the user on the probable implications of applying a rule\n(e.g. \u201cIf you remove this spider, then you will not be able to find a proof any\nmore\u201d, or \u201cAdding contour B will decrease the contour difference measure, so\nmight be a good idea\u201d). Possible applications of rules could be annotated with\ntheir impact on the heuristic value. The user could collaborate with the proof\ngenerator to solve complex problems. More research is needed to investigate how\nuseful our heuristic measures are in an interactive setting.\nAcknowledgment\nGem Stapleton thanks the UK EPSRC for support under grant number 01800274.\nJean Flower was partially supported by the UK EPSRC grant GR\/R63516.\nReferences\n1. B.I. Dahn and A. Wolf. Natural language presentation and combination of au-\ntomatically generated proofs. Proc. Frontiers of Combining Systems, Muenchen,\nGermany, p175-192, 1996.\n2. R. Dechter, and J. Pearl. Generalized best-first search strategies and the optimality\nof A\u2217. Journal of the Association for Computing Machinery, 32, 3, p505-536. 1985.\n3. A. Fish, J. Flower, and J. Howse. A Reading algorithm for constraint diagrams.\nProc. IEEE Symposium on Visual Languages and Formal Methods, New Zealand,\n2003.\n14\n4. J. Flower, and G. Stapleton. Automated Theorem Proving with Spider Diagrams.\nProc. Computing: The Australasian Theory Symposium, Elsevier science, 2004.\n5. C. Goller. Learning search-control heuristics for automated deduction systems with\nfolding architecture networks. Proc. European Symposium on Artificial Neural Net-\nworks. D-Facto publications, Apr 1999.\n6. P.E. Hart, N.J. Nilsson, and B. Raphael. A formal basis for the heuristic determina-\ntion of minimum cost paths. IEEE Transactions on System Science and Cybernetics,\n4, 2, p100-107, 1968.\n7. J. Flower, and J. Howse. Generating Euler Diagrams. Proc. Diagrams p.61-75,\nSpringer-Verlag, 2002.\n8. J. Howse, F. Molina, and J. Taylor. SD2: A sound and complete diagrammatic\nreasoning system. Proc. IEEE Symposium on Visual Languages (VL2000), IEEE\nComputer Society Press p.402-408, 2000.\n9. M. Jamnik, Mathematical Reasoning with Diagrams, CSLI Publications, 2001.\n10. G.F. Luger. Artificial intelligence: Structures and strategies for complex problem\nsolving. Fourth Edition. Addison Wesley: 2002.\n11. D. MacKenzie. Computers and the sociology of mathemati-\ncal proof. Proc. 3rd Northern Formal Methods Workshop, 1998.\nhttp:\/\/www1.bcs.org.uk\/DocsRepository\/02700\/2713\/mackenzi.pdf\n12. S. Oppacher and S. Suen. HARP: A tableau-based theorem prover. Journal of\nAutomated Reasoning, 4, p69-100, 1988.\n13. F. Piroi and B. Buchberger. Focus windows: A new technique for proof presenta-\ntion. In J. Calmet, B. Benhamou, O. Caprotti, L. Henocque, and V. Sorge, editors,\nArtificial Intelligence, Automated Reasoning and Symbolic Computation. Proceed-\nings of Joint AICS\u20192002 - Calculemus\u20192002 Conference, Marseille, France, July 2002.\nSpringer Verlag. http:\/\/www.risc.uni-linz.ac.at\/people\/buchberg\/papers\/2002-02-\n25-A.pdf [Accessed August 2003].\n14. S.-J. Shin. The Logical Status of Diagrams. Camb. Uni. Press, 1994.\n15. J. Schumann and P. Robinson. [] or SUCCESS is not enough: Current technol-\nogy and future directions in proof presentation. Proc. IJCAR workshop: Future\ndirections in automated reasoning, 2001.\n16. G. Stapleton, J. Howse, and J. Taylor. A constraint diagram reasoning system.\nProc. International conference on Visual Languages and Computing, Knowledge\nsystems institute, pp 263-270, 2003.\n17. G. Stapleton, J. Howse, J. Taylor and S. Thompson. What can spider diagrams\nsay? Proc. Diagrams 2004.\n18. N. Swoboda. Implementing Euler\/Venn reasoning systems, In Diagrammatic Rep-\nresentation and Reasoning, Anderson, M., Meyer, B., and Oliver, P., eds, p.371-386\nSpringer-Verlag, 2001.\n19. N. Swoboda and G. Allwein. Using DAG Transformations to Verify Euler\/Venn\nHomogeneous and Euler\/Venn FOL Heterogeneous Rules of Inference. Electronic\nNotes in Theoretical Computer Science, 72, No. 3 (2003).\n20. The Visual Modelling Group website. www.cmis.brighton.ac.uk\/research\/vmg.\n21. The Visual Modelling Group technical report on spider diagram reasoning systems\nat www.cmis.brighton.ac.uk\/research\/vmg\/SDRules.html\n22. W. Windsteiger. An automated prover for Zermelo-Fraenkel set theory in Theo-\nrema. LMCS, 2002.\n15\n"}