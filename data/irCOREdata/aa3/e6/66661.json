{"doi":"10.1017\/S0963548305007005","coreId":"66661","oai":"oai:dro.dur.ac.uk.OAI2:605","identifiers":["oai:dro.dur.ac.uk.OAI2:605","10.1017\/S0963548305007005"],"title":"Approximate counting and quantum computation.","authors":["Bordewich,  M.","Freedman,  M.","Lov\u00e1sz,  L.","Welsh,  D."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2005-10","abstract":"Motivated by the result that an `approximate' evaluation \\ud\nof the Jones polynomial of a braid at a $5^{th}$ root of unity can\\ud\nbe used to simulate the quantum part of any algorithm in the\\ud\nquantum complexity class BQP, and results relating BQP to the\\ud\ncounting class GapP, we introduce a form of additive approximation\\ud\nwhich can be used to simulate a function in BQP. We show that all\\ud\nfunctions in the classes \\#P and GapP have such an\\ud\napproximation scheme under certain natural normalisations. However\\ud\nwe are unable to determine whether the particular functions we are\\ud\nmotivated by, such as the above evaluation of the Jones\\ud\npolynomial, can be approximated in this way. We close with some\\ud\nopen problems motivated by this work","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66661.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/605\/1\/605.pdf","pdfHashValue":"965b53ba867dcd2743ab95aa316c16771bfd9b16","publisher":"Cambridge University Press","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:605<\/identifier><datestamp>\n      2011-06-14T15:41:15Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Approximate counting and quantum computation.<\/dc:title><dc:creator>\n        Bordewich,  M.<\/dc:creator><dc:creator>\n        Freedman,  M.<\/dc:creator><dc:creator>\n        Lov\u00e1sz,  L.<\/dc:creator><dc:creator>\n        Welsh,  D.<\/dc:creator><dc:description>\n        Motivated by the result that an `approximate' evaluation \\ud\nof the Jones polynomial of a braid at a $5^{th}$ root of unity can\\ud\nbe used to simulate the quantum part of any algorithm in the\\ud\nquantum complexity class BQP, and results relating BQP to the\\ud\ncounting class GapP, we introduce a form of additive approximation\\ud\nwhich can be used to simulate a function in BQP. We show that all\\ud\nfunctions in the classes \\#P and GapP have such an\\ud\napproximation scheme under certain natural normalisations. However\\ud\nwe are unable to determine whether the particular functions we are\\ud\nmotivated by, such as the above evaluation of the Jones\\ud\npolynomial, can be approximated in this way. We close with some\\ud\nopen problems motivated by this work.<\/dc:description><dc:subject>\n        Quantum computing<\/dc:subject><dc:subject>\n         Complexity<\/dc:subject><dc:subject>\n         Approximation<\/dc:subject><dc:subject>\n         Jones polynomial<\/dc:subject><dc:subject>\n         Tutte polynomial.<\/dc:subject><dc:publisher>\n        Cambridge University Press<\/dc:publisher><dc:source>\n        Combinatorics, probability and computing, 2005, Vol.14(5-6), pp.737-754 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2005-10<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:605<\/dc:identifier><dc:identifier>\n        issn:0963-5483<\/dc:identifier><dc:identifier>\n        issn: 1469-2163<\/dc:identifier><dc:identifier>\n        doi:10.1017\/S0963548305007005<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/605\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1017\/S0963548305007005<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/605\/1\/605.pdf<\/dc:identifier><dc:rights>\n        \u00a9 Cambridge University Press 2005.<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0963-5483","issn: 1469-2163","issn:0963-5483"," 1469-2163"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2005,"topics":["Quantum computing","Complexity","Approximation","Jones polynomial","Tutte polynomial."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n21 May 2008\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nBordewich, M. and Freedman, M. and Lovsz, L. and Welsh, D. (2005) \u2019Approximate counting and quantum\ncomputation.\u2019, Combinatorics, probability and computing., 14 (5-6). pp. 737-754.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1017\/S0963548305007005\nPublisher\u2019s copyright statement:\nCambridge University Press 2005.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nCombinatorics, Probability and Computing (2005) 14, 737\u2013754. c\u00a9 2005 Cambridge University Press\ndoi:10.1017\/S0963548305007005 Printed in the United Kingdom\nApproximate Counting and\nQuantum Computation\nM. BORDEWICH,1\u2020 M. FREEDMAN,2 L. LOVA\u00b4SZ2 and D. WELSH1\u2021\n1Mathematical Institute, University of Oxford, 24-29 St. Giles\u2019, Oxford, OX1\n(e-mail: magnusb@comp.leeds.ac.uk, dwelsh@maths.ox.ac.uk)\n2Microsoft Research, One Microsoft Way, Redmond, WA 98052, USA\n(e-mail: michaelf@microsoft.com, lovasz@microsoft.com)\nReceived 15 October 2003; revised 7 February 2005\nFor Be\u00b4la Bolloba\u00b4s on his 60th birthday\nMotivated by the result that an \u2018approximate\u2019 evaluation of the Jones polynomial of a\nbraid at a 5th root of unity can be used to simulate the quantum part of any algorithm in\nthe quantum complexity class BQP, and results relating BQP to the counting class GapP,\nwe introduce a form of additive approximation which can be used to simulate a function in\nBQP. We show that all functions in the classes #P and GapP have such an approximation\nscheme under certain natural normalizations. However, we are unable to determine whether\nthe particular functions we are motivated by, such as the above evaluation of the Jones\npolynomial, can be approximated in this way. We close with some open problems motivated\nby this work.\n1. Introduction\nThe quantum complexity class BQP consists of those decision problems that can be\ncomputed with bounded error, using quantum resources, in polynomial time. Relative to\nthe polynomial hierarchy of classical computation, it is known that\nBPP \u2286 BQP \u2286 PP \u2286 PSPACE,\nand at the moment none of these inclusions is known to be proper [1]. Recent work\nby Freedman, Kitaev, Larson and Wang [5] has shown that the \u2018quantum part\u2019 of\nany quantum computation can be replaced by an approximate evaluation of the Jones\npolynomial of a related braid. A classical polynomial time algorithm can convert a\nquantum circuit for an instance of such a problem, into a braid, such that the probability\nthat the output of the quantum computation is zero is a simple (polynomial time) function\n\u2020 Research funded by the EPSRC and Vodafone, and supported in part by ESPRIT Project RAND-APX.\n\u2021 Research supported in part by ESPRIT Project RAND-APX.\n738 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nof the Jones polynomial of the braid at a 5th root of unity. For an exact statement of this\nsee Freedman, Kitaev, Larsen and Wang [5], or the more detailed papers by Freedman,\nKitaev and Wang [6], and Freedman, Larsen and Wang [7, 8].\nIt therefore follows that if we take A(L, x) to be an oracle that returns the evaluation of\nthe Jones polynomial of a braid L at a point x, any BQP computation can be replicated by\na classical polynomial time algorithm with one call to A, i.e., BQP \u2286 PA. Since computing\nthe Jones polynomial is in general a #P-hard problem, this does not help. However, it\nis not an exact evaluation of the Jones polynomial that is required, but an approximate\nevaluation at a specific point for braids of a specific class. Hence we may look for a\nweaker oracle A\u2032 such that BQP \u2286 PA\u2032 .\nIn a different approach Fortnow and Rogers [4] link quantum complexity to the classical\ncomplexity class GapP. In particular they show that for any quantum Turing machine M\nrunning in time t(n) there is a GapP function f such that for all inputs x\nPr(M(x) accepts) =\nf(x)\n52t(|x|)\n.\nAgain evaluating a general GapP function exactly is #P-hard; however, one can simulate\nM using a polynomial algorithm with access to an oracle A\u2032\u2032, where A\u2032\u2032 is an oracle giving\nan approximation to the GapP function f.\nWith this motivation we examine the type of approximation needed in order to simulate\na quantum computation, and then consider the complexity of such approximations. It\nturns out that an additive approximation is sufficiently powerful. We should emphasize\nthat a polynomial time additive approximation scheme is weaker than the familiar and\nmuch studied fully polynomial randomized approximation scheme (FPRAS). However, it is\nwell known that any function which counts objects for which the corresponding decision\nproblem is NP-complete cannot have an FPRAS (unless NP = RP). We show below that\nall #P functions do have polynomial time additive approximation schemes under natural\nnormalizations. We also show that in two senses this is the best sort of approximation we\ncan hope to achieve in polynomial time (see Theorems 4.1, 4.3 and 4.4).\n2. Quantum computing\nA link L is a smooth submanifold of S3, consisting of c(L) disjoint simple closed curves.\nA braid on m strings is constructed as follows. Take m distinct points in a horizontal\nline (p1, p2, . . . , pm) and link them to m distinct points (q1, q2, . . . , qm) lying on a parallel\nline, by m disjoint simple arcs fi in R\n3, so that fi starts at pi and ends at q\u03c0(i) where \u03c0\nis a permutation. A braid can be closed in numerous ways, by identifying the points pi\nand qj in some way, creating a link. Similarly any link can be represented as a braid. In\nparticular, the plat closure of a braid on 2m strings is obtained by identifying the points\np2i\u22121 and p2i, and q2i\u22121 and q2i for 1 \u0001 i \u0001 m.\n2.1. Topological computing and the Jones polynomial\nOne of the major difficulties in building a quantum computer has been the sensitivity of\nthe system to outside interference. Freedman, Kitaev, Larson and Wang [5] introduced\nthe notion of topological quantum computing, in an attempt to make the computations less\nApproximate Counting and Quantum Computation 739\nsensitive to small disturbances. The basic idea is as follows. One can create pairs of special\nquasi-particles, called anyons, in a 2-dimensional plane sandwiched between two blocks\nof a superconductor. The anyons have a certain probability of annihilating each other\n(leaving a vacuum) when brought together. However, this probability changes, according\nto the laws of quantum mechanics when one anyon is moved around the other before\nthey are brought together. Even if it is moved in a complete circle around the other, on\nreaching its original position the probability of annihilation is changed. Thus a system\nof a large number of these particles can be used as a quantum computer for decision\nproblems; pairs of anyons are created, moved around relative to each other, and then a\npredefined pair of the anyons is brought together. If this pair annihilate each other leaving\na vacuum, this is taken to be an output of 0 (or rejection); if they do not it is taken\nto be an output of 1 (or acceptance). The paths in the 2-dimensional surface, combined\nwith a time dimension, give rise to a 3-dimensional representation of the \u2018computation\u2019\nas a braid. There remain major difficulties in constructing such a quantum computer, and\ncontrolling the movement of anyons. However, one of the important results of Freedman,\nKitaev, Larsen and Wang is that small changes in the paths of the anyons do not affect\nthe outcome of the computation; indeed it is determined by the isotopy class of the braid,\nand therefore stable under perturbations of the paths that do not change the braiding\nitself.\nThe way in which the probability changes is sufficiently subtle that such a quantum\ncomputer is universal in the following sense. The Kitaev\u2013Solovay theorem [12, 14] together\nwith the density theorem of Freedman, Larsen and Wang [7, 8] yields an algorithm which\ngiven any quantum circuit on m\/2 qubits and error parameter \u0002, outputs a braid on\nm strings using a polynomial number of crossings (polynomial in m and log \u0002\u22121). The\ntopological quantum computation using this braid efficiently simulates the quantum\ncircuit, (the probability of acceptance is within \u0002 of the correct value). Since an algorithm\nfor a BQP problem can be used to generate a quantum circuit for a given instance,\nthe above result gives an explicit method for finding an equivalent topological quantum\ncomputation, and so the class BQP is the same under either model.\nHence a quantum computation on m\/2 qubits is approximately represented by a braid b.\nIn showing that the topological quantum computation depends on the isotopy class of b\nalone [5], the following link L is considered. L is the plat closure of the composition of\nb\u22121, b and a small loop \u03b3 inserted (between b\u22121 and b) around the leftmost two strings\n(see Figures 1 and 2). Both b and b\u22121 are needed as any quantum computation must be\nreversible; the loop \u03b3 effects a measurement of the qubit represented by the leftmost pair\nof strings. The conclusions of [5] may then be summarized as the following theorem: refer\nto [5] for full details.\nTheorem 2.1. Let \u03c0 be a problem in BQP, with a polynomial time quantum algorithm A,\nand let I be an instance of \u03c0. For any \u0002 > 0, a link L may be determined in time polynomial\nin |I| and log \u0002 such that\u2223\u2223\u2223\u2223Pr(A(I) = 0) \u2212 11 + [2]25\n(\n1 +\n(\u22121)c(L)+w(L)(\u2212a)3w(L)VL(e2\u03c0i\/5)\n[2]m(L)\u221225\n)\u2223\u2223\u2223\u2223 < \u0002, (2.1)\n740 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nb\nFigure 1. The braid b.\nb\nb\u20131\n\u03b3\nminima\nFigure 2. The link L.\nwhere a = ei\u03c0\/10 and [2]5 = 2 cos \u03c0\/5 and c(L), w(L) and m(L) are the number of compon-\nents, writhe and number of minima of the link L respectively.\nThe minima of [5] are the individual joins in the plat closure at the bottom of the braid,\nhence m(L) is half the number of strings in b plus one. By construction, the number of\nstrings in b is twice the number of (qu)bits in the input, hence m(L) = |I | + 1. The writhe\nis defined for an oriented link, and is the number of \u2018positively oriented\u2019 crossings minus\nthe number of \u2018negatively oriented\u2019 crossings, with respect to the given orientation of L.\nIt is easily computable. The Jones polynomial is also defined for oriented links; however,\nthe formula above is independent of the orientation chosen for L. Since every crossing in\nb appears reversed in b\u22121, these do not contribute to the writhe of L, hence the writhe is\ndetermined by the four crossings involving \u03b3, and can only be \u22124, 0, or 4 (depending on\nthe orientation of the two strands passing through \u03b3). If L\u2217 denotes L with the orientation\nof one component reversed, then VL\u2217 (t) = t\n\u22123\u03bb\/2VL(t), where \u03bb is the contribution to the\nwrithe of L from crossings of the reversed component over (or under) the rest of L. Hence\nonly reversing \u03b3 or one of the leftmost two strings can affect the Jones evaluation, and it\nApproximate Counting and Quantum Computation 741\nis easily checked that this is compensated by the change in the terms involving the writhe.\nTo be consistent, we will retain the notation [2]5 for 2 cos \u03c0\/5 from [5] throughout.\nIt is Theorem 2.1 that gives rise to our interest in approximating VL(t). Further\nexplanation of the derivation of this equation is given in [18] where the special but\nsufficient case w(L) = 0 is considered (we could restrict attention to braids with writhe\nzero without affecting the main results). Although this formula involves an evaluation at\ne2\u03c0i\/5, similar results can be obtained for the nth root of unity for any n \u0002 5, n \u0005= 6 but\nthese involve multiple Ls.\nThe preceding paragraphs explain how an evaluation of a Jones polynomial can yield\nthe answer to a (general) quantum computation. There is a weak converse to this. Suppose\nwe have a quantum computer at our disposal with which to learn something about a Jones\nevaluation of a link L. We may assume without loss of generality (Freedman, Larsen and\nWang [7]) that our quantum computer is of the topological kind and thus nicely adapted\nto braids. We can (easily) write L as the plat closure of a braid b by starting with the\nlink diagram and pulling the overcrossings up and the undercrossings down. Let m be the\nnumber of strands of this braid b. If we wish to evaluate VL(\u03b1), \u03b1 = e\n2\u03c0i\/r , we encounter\nan important constant d = 2 cos \u03c0\/r. The norm |VL(\u03b1)| is bounded from above by dm\/2\nwith |VL(\u03b1)| = dm\/2 achieved only when L is the unlink on m\/2 components, a case which\noccurs when b is the identity braid. Our quantum computer will be able to provide an\nadditive approximation (see below) of |VL(\u03b1)| as a variable with range [0, dm\/2].\nGiven m marked points in the horizontal plane and the number \u03b1, there is a finite\ndimensional Hilbert space H on which m-strand braids act through a Jones representation\np. The m\/2 maxima (in the plat closure) determine a vector c in this space and the m\/2\nminima (in the plat closure) determine a vector in the dual H\u2217, which when identified\nwith H by the Hermitian inner product, is the same c.\nWe have\nVL(\u03b1)\ndm\/2\n= \u3008c|p(b)|c\u3009.\nFurthermore Prob(|0\u3009) = |\u3008c|p(b)|c\u3009|2, where Prob(|0\u3009) refers to the physical probability\nthat below the cups, after all the \u2018particles\u2019 have been fused in pairs, the vacuum |0\u3009 is\nobserved, that is, no nontrivial particles result from these fusions. The last formula reflects\nthe quantum mechanical rule that the probability of observing an outcome, in this case\n|0\u3009, is proportional to the square of the component of the state vector in the |0\u3009-direction.\nBecause the range of |VL(\u03b1)| depends exponentially on the number of strings in the\nbraid, m(b), our quantum computer will give much better information (sooner) if we\nsucceed in displaying L with, or nearly with, the minimal m(b), called the braid index\nof L.\nTurning to the computational question, it is a theorem of Thistlethwaite [15] that when\nL is an alternating link, with associated plane graph G, then\nVL(t) = \u03b1T (G;\u2212t,\u2212t\u22121)\nwhere \u03b1 is an easily computable function, and T is the Tutte polynomial of the planar\ngraph. It is known [17] that even for planar graphs, computing T (G; x, y) is #P-hard,\n742 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nexcept when (x, y) is one of a few special points, or lies on a hyperbola satisfying\n(x \u2212 1)(y \u2212 1) = q \u2208 {1, 2}.\nSince (\u2212e2\u03c0i\/n,\u2212e\u22122\u03c0i\/n), n \u0002 5, is not one of these \u2018easy\u2019 points, exact computation in\npolynomial time is not feasible (unless #P=P). It also seems unlikely that an FPRAS\nexists for these points. However, the notion of an FPRAS seems to be much stronger than\nthe kind of approximation that is needed in the current context. For any BQP language L\nthere is a quantum Turing machine M such that for all x \u2208 L, M accepts with probability\nat least 3\/4, and for all x \u0005\u2208 L, M accepts with probability at most 1\/4. Therefore all that\nwe require is to determine which quartile of its range VL(e\n2\u03c0i\/5) lies in. We return to this\ntopic in Section 5.\nWhen considering algorithms on braids or links, the size of the input is taken to be\nthe number of crossings. A quantum gate on m\/2 qubits is converted into a braid on m\nstrings of length polylog (1\/\u0002), therefore the number of crossings in the braid associated\nwith a BQP circuit is polynomially related to the number of gates in the BQP circuit.\nThis in turn is bounded by a polynomial in the input size, hence an algorithm will either\nbe polynomial with respect to both the number of crossings in the braid and the number\nof input qubits to the circuit, or neither.\n2.2. GapP functions\nThe class of counting functions which constitute #P is the set of functions that count\ncertificates of membership of a language belonging to NP, hence #P functions are\nconstrained to evaluate to non-negative integers. The class of functions GapP can be\nregarded as the closure of #P under subtraction, that is to say a function f : I \t\u2192 Z is\nin GapP if and only if there exist functions g, h \u2208 #P such that f(I) = g(I) \u2212 h(I) for all\nI \u2208 I. The class AWPP can be defined as follows [3]. A language L is in AWPP if and\nonly if there exist a polynomial p and a GapP function g such that for all I \u2208 I,\nI \u2208 L \u21d2 3\n4\n\u0001 g(I)\n2p(|I |)\n\u0001 1,\nI \u0005\u2208 L \u21d2 0 \u0001 g(I)\n2p(|I |)\n\u0001 1\n4\n. (2.2)\nThe increase in power of quantum computation over classical computation is that\nin a quantum computer there is an ability to cancel out computations paths. Fortnow\nand Rogers [4] show that this power is captured by the class GapP, in which a similar\neffect is seen. In particular they show that BQP \u2286 AWPP. It therefore follows that for a\nBQP language L, polynomial p and GapP function g satisfying (2.2), determining which\nquartile of the range [0, 2p(|I |)] contains g(I) would be enough to determine membership\nof L.\nTo summarize, our foremost problems can be interpreted as finding a suitable approx-\nimation for the Jones polynomial of a link, VL(t), the Tutte polynomial of an associated\nplanar graph, T (G; x, y), at a particular point, or for the GapP functions arising from\nBQP languages.\nApproximate Counting and Quantum Computation 743\n3. Approximation\nGiven a function \u03c8 : I \t\u2192 R for which no efficient exact evaluation algorithm is known,\none may be interested in an \u2018approximate\u2019 answer instead. A standard approach is to look\nfor a fully polynomial randomized approximation scheme (FPRAS) for the problem. If \u03c8\nis such a function and I \u2208 I is an input, then an FPRAS for \u03c8 is a randomized algorithm\nthat given any I \u2208 I, \u0002 > 0 will output \u03c8\u02c6(I, \u0002), such that\nPr[|\u03c8\u02c6(I, \u0002) \u2212 \u03c8(I)| > \u0002\u03c8(I)] < 1\/4,\nand the running time is polynomial in |I | and \u0002\u22121.\nHere one might be prompted to consider the following sort of approximation. Suppose\nwe know a range in which the answer lies. Can we say where in that range the answer\nlies? Is it in the top or bottom half of the range, or in which quartile? We shall see\nthat this approach is unlikely to be feasible, and in Section 3.1 we present an alternative.\nClearly this type of approximation depends on the nature of the range. For the moment\nlet us restrict our attention to the class of functions in #P. We will make the standard\nassumption that for a given NDTM M there exists a fixed polynomial p such that for\nany input x, all certificates have size p(|x|) (so the total number of possible certificates of\nM is 2p(|x|)). We would like to answer the following problem, denoted by \u03c0r: Given r, for\nwhich k is the number of accepting certificates for x between (k\u22121)\nr\n2p(|x|) and k\nr\n2p(|x|)?\nThe problem \u03c02 is simply to determine which inputs have more than half of all certi-\nficates as accepting certificates. The set of languages in this class is exactly the set PP\nof probabilistic polynomial time languages. Furthermore, \u03c02 is clearly Turing reducible\nto \u03c02s, for any positive integer s, since if \u03c02s(x) \u0001 s then \u03c02(x) = 1, otherwise \u03c02(x) = 2.\nHence it is no surprise that this approach to approximation is NP-hard for #SAT, indeed\nthe following lemma shows that any attempt to approximate #SAT in this way, or\nany problem with a parsimonious reduction to SAT, is unlikely to work. The proof is\nstraightforward and we omit it; details may be found in [2].\nLemma 3.1. For k \u2208 Z, deciding whether a CNF formula in n literals has more than 2n\u2212k\nsolutions is NP-hard.\nWhen k = 1 the same decision for disjunctive normal form (DNF) formulae is equivalent\nto that for SAT, since the negation of a SAT formula is in DNF, and hence for an instance\nF , we have #SAT(F) = 2n\u2212#DNF(F), where n is the number of literals. This observation\nleads to the following related lemma. Again, the proof is omitted and details may be\nfound in [2].\nLemma 3.2. For k \u2208 Z, deciding whether a DNF formula in n literals has at least 2n\u2212k\nsolutions is NP-hard.\nThis may seem more counterintuitive since not only is DNF in P, but also #DNF has\nan FPRAS [11]. On the other hand, the next lemma shows that the number of stable\n(independent) sets of vertices in a graph (#SS) can be approximated in this way, even\n744 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nthough it is #P-complete and does not admit an FPRAS unless NP = RP. Essentially\nthis is because the \u2018natural\u2019 upper bound on the number of stable sets, 2n, is far too big\nunless the graph has very few edges. For details of the proof see [2].\nLemma 3.3. Let G be a graph on n vertices. For r \u2208 Z, determining for which k, #SS(G) \u2208\n[ (k\u22121)\nr\n2n, k\nr\n2n) is computable in time polynomial in n and r.\nLemma 3.1 suggests that we cannot hope to fix a partition of the range and then\ndetermine in polynomial time in which section the answer lies; the difficulty associated\nwith an NP-complete decision problem can be shifted to exactly the boundary between\ntwo parts of our partition. We therefore consider an alternative method of approximation\nwhich will meet our needs.\n3.1. Additive approximation\nOur approach to approximation consists of determining a small section of the range\ndepending on the input, and in which we can say the answer lies with high probability.\nThis gives rise to an additive approximation.\nDefinition 1 (Additive Approximation (AA)). Given any function f : I \t\u2192 C and a nor-\nmalization u : Z+ \t\u2192 R+, an additive approximation for (f, u) is a probabilistic algorithm\nwhich, given any I \u2208 I, \u0002 > 0, produces an output f\u02c6(I) such that\nPr[|f(I) \u2212 f\u02c6(I)| > \u0002u(|I |)] < 1\/4,\nin time polynomial in |I | and \u0002\u22121.\nNote that the 1\/4 in the definition could be replaced by any \u03b4 \u2208 (0, 1\/2), since we could\nreduce this error probability in polynomial time by taking several runs of the algorithm.\nNote also that most of the time we shall be considering the case where f is real. In\ncontrast to the set of functions admitting an FPRAS, which is closed under addition\nbut not under subtraction (e.g., #DNF(f) has an FPRAS, but #SAT(f) = 2n \u2212 #DNF(f\u00af)\ndoes not), we have the following result, whose proof we leave to the reader.\nProposition 3.4. Suppose (f, u) and (g, v) admit AA algorithms, then there exists AA al-\ngorithms for (\u2212f, u), (f + g, u+ v) and (f \u2212 g, u+ v). If, in addition, |f(I)| \u0001 u(|I |) and\n|g(I)| \u0001 v(|I |) for all I , then there is an AA algorithm for (fg, uv).\nThe normalization is crucial. Since we are most interested in determining where in the\nrange of possible values the answer lies, we shall usually be taking u to be an upper\nbound on |f| depending only on input size. An additive approximation allows errors up\nto an absolute value of \u0002u(|I |), whereas an FPRAS allows only errors up to an absolute\nvalue of \u0002f(I). It is therefore a weaker notion of approximation, and it is easy to check\nthat any function that admits an FPRAS also admits an AA algorithm under any upper\nbound.\nApproximate Counting and Quantum Computation 745\nLemma 3.5. Let f : I \t\u2192 R be a function that admits an FPRAS, and let u : Z+ \t\u2192 R\nsatisfy |f(I)| \u0001 u(|I |) for all inputs I \u2208 I. Then (f, u) has an AA algorithm.\nNote also that a given function will have an AA with respect to some normalizations\nbut not others. For example, we show later that for the number of proper 3-colourings\nof a connected graph G on n vertices, PG(3) where PG is the chromatic polynomial of\nG, we have an AA for (PG(3), 2\nn). However, for any constant \u03b4 > 0, (PG(3), (2 \u2212 \u03b4)n)\ndoes not have an AA unless NP = RP (Theorem 4.4). In other words we can determine\nPG(3) to within an additive error \u00022\nn in polynomial time, but we cannot approximate to\nwithin an additive error \u0002(2 \u2212 \u03b4)n. Note that if (f(I), u(|I |)) has an AA, then for any fixed\npolynomial p, (f(I), u(|I |)\/p(|I |)) also does, since we can absorb the polynomial factor in\nthe normalization into \u0002 at only a polynomial slowing of the algorithm.\nIt is the determination of the \u2018best\u2019 normalization for a given function that causes the\ngreatest difficulties, particularly in relation to approximating VL(t). Nevertheless our first\npositive result shows that any function belonging to #P does have an AA algorithm under\nvery natural normalizations.\n4. Additive approximations for #P functions\nThe class of functions which constitute #P can be regarded as the set of functions that\ncount certificates of membership of a language belonging to NP. For a given NP-language\nL there will be infinitely many NDTMs which check membership of L, and the certificates\nfor a given input I will depend on the machine used in verification.\nThe main result of this section is that all such counting functions have additive ap-\nproximation schemes under the \u2018natural normalization\u2019 associated with the corresponding\nNDTM. For example, if we take f(G) to be the number of Hamiltonian circuits in a\ngraph G, then two possible NDTMs for checking membership of L are M1, which takes\nas certificates subsets of the edges, and checks that these form a cycle of length |V |,\nand M2, which takes as certificates an ordering of the vertices v1, v2, . . . , vn and checks\nthat the edges between any two adjacent vertices in the ordering, and between vn and v1,\ndo appear in the graph (to avoid double counting we must insist that relative to some\nfixed ordering of the vertices \u03c0 : V \t\u2192 1, . . . , n, we have \u03c0(v1) = 1 and \u03c0(v2) < \u03c0(vn)). In\neach case the number of good certificates for a given graph G is exactly the number\nof Hamiltonian circuits of G; however, M1 has 2\n|E(G)| possible certificates, while M2 has\n(|V | \u2212 1)!\/2 possible certificates. In either case the number of possible certificates is a\nnatural upper bound on the number of Hamiltonian circuits. We show below that there\nis an additive approximation algorithm under the normalization associated with any such\nbound.\nTheorem 4.1. Let f be a function in the class #P , with an associated NDTM M, so that,\nfor a given instance I , M has f(I) accepting certificates, each of length p(|I |). Then there\nexists an additive approximation algorithm for (f, 2p(|I |)) that runs in time polynomial in |I |\nand \u0002\u22121.\n746 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nProof. Given an instance I of f, we will select t computation paths, or certificates,\nuniformly at random from the 2p(|I |) possible. We then run M using these inputs, and let\nXi, i = 1 . . . t be indicator functions which take value 1 if and only if the ith computation\npath accepts I . The estimator for f(I) is then X = 2\np(|I |)\nt\n\u2211t\ni=1 Xi.\nClearly E[X] = f(I). It remains to show that we can select t only polynomially large,\nsuch that the error bounds given in Definition 1 are satisfied. First note from Chebyshev\u2019s\ninequality that\nPr\n[|X \u2212 f(I)| \u0002 \u00022p(|I |)] \u0001 Var(X)\n\u0002222p(|I |)\n\u0001 1\nt\nf(I)\n2p(|I |)\n(\n1 \u2212 f(I)\n2p(|I |)\n)\n\u00022\n\u0001 1\nt\u00022\n.\nNow if t = 4\u0002\u22122 + 1, we have\nPr\n[|X \u2212 f(I)| \u0002 \u00022p(|I |)] < 1\/4. \u0003\nTurning briefly to GapP functions, we get the following immediate corollary.\nTheorem 4.2. Let f be a GapP function such that f = g \u2212 h where g, h \u2208#P.\n(i) Suppose that there are additive approximations for (g, u) and (h, v), then there is an\nadditive approximation scheme for (f,max{u, v});\n(ii) Suppose that g(I) and h(I) have certificates of length p(|I |) for all I , then there is an\nadditive approximation scheme for (f, 2p).\nProof. From Proposition 3.4 we have that there is an additive approximation for\n(f, u+ v). From Definition 1 we can halve the permitted error for only a polynomial\nincrease in running time, hence there is an AA for (f, u+v\n2\n) and therefore also (f,max{u, v}),\nwhich gives (i). When g and h have certificates of length p, by Theorem 4.1 there are AA\nschemes for (g, 2p) and (h, 2p), (ii) now follows from (i).\nWe have seen that all functions contained in #P have an AA algorithm relative to\nnormalization by the size of the certificate space, and it is reasonable to ask if we could\ndo better. However, we give two results that suggest this is already the best we can do\nin general. First we will see that sharpening our approximation to a logarithmic scale for\nthe number of proper 5-colourings of a graph is NP-hard. Secondly, we show that the\nnormalization by the number of possible certificates cannot be improved significantly in\nthe case of the number of k-colourings of a graph.\nTheorem 4.3. Let PG(5) be the number of proper 5-colourings of a graph. Then for a general\ngraph G on n vertices, there cannot be an additive approximation algorithm for (log(PG(5) +\n1), 3n) that runs in time polynomial in n and \u0002\u22121 unless NP = RP.\nApproximate Counting and Quantum Computation 747\nProof. Consider an NDTM for PG(5) that takes as certificates any 5-colouring of the\ngraph, hence the certificates are of length n\flog 5\r = 3n, where n is the number of vertices\nin G. We show that an AA algorithm for (log(PG(5) + 1), 3n) would be able to solve the\nNP-complete problem of determining whether a graph is 5-colourable.\nLet G be a graph on n vertices and consider the following polynomial time transforma-\ntion. We form G+ by adding n isolated vertices to G. If G is not 5-colourable, then nor is\nG+. However, if G is 5-colourable, each 5-colouring can be extended to 5n 5-colourings of\nG+. Therefore, if G is not 5-colourable log(PG+(5) + 1) = 0, whereas if G is 5-colourable,\nlog(PG+(5) + 1) \u0002 log(5n.5! + 1)\n> 2n.\nHence an additive approximation algorithm for (log(PG+(5) + 1), 6n) could determine\nwhether or not G is 5-colourable in random polynomial time.\nTheorem 4.1 shows that for connected graphs there exists an AA algorithm for\n(PG(k), (k \u2212 1)n) as follows. We can take an arbitrary spanning tree on G, and take\nthe set of certificates to define colourings relative to this spanning tree, giving k(k \u2212 1)n\u22121\npossible certificates. We can then adjust the normalization by a constant factor (k \u2212 1)\/k.\nWe show that this cannot be improved, in the sense that the normalization (and therefore\nthe error) cannot be reduced by any exponential factor. We have already noted that the\nnormalization can be improved by any fixed polynomial factor.\nTheorem 4.4. If NP \u0005= RP then for any fixed k \u0002 3, \u03b4 > 0 there cannot be a polynomial\ntime AA algorithm for (PG(k), \u03c6(n)) for connected graphs G on n vertices, for any function\n\u03c6(n) of order O((k \u2212 1 \u2212 \u03b4)n).\nProof. Let \u03c6(n) \u0001 c(k \u2212 1 \u2212 \u03b4)n for sufficiently large n. Take r such that (k \u2212 1 \u2212 \u03b4) \u0001\n(k \u2212 1)1\u22121\/r. Given any graph G, we form a graph H by attaching a path of length n(r \u2212 1)\nto a vertex of G. Now\nPG(k)(k \u2212 1)n(r\u22121) = PH (k), (4.1)\nPG(k) =\nPH (k)(\n(k \u2212 1)1\u22121\/r)nr , (4.2)\nPG(k) =\ncPH (k)\n\u03c6(nr)\n\u03c6(nr)\nc\n(\n(k \u2212 1)1\u22121\/r)nr . (4.3)\nNow suppose that there is an AA algorithm for (PH (k), \u03c6(|H |)), then we can get an\napproximation P\u02c6H (k) within an additive error of\n1\n2c\n\u03c6(nr). Using P\u02c6H (k) and equation (4.2),\nwe obtain an approximation P\u02c6G(k). By equation (4.3), P\u02c6G(k) is within an additive error of\n1\/2, since\n\u03c6(nr)\nc\n(\n(k \u2212 1)1\u22121\/r)nr \u0001\n\u03c6(nr)\nc(k \u2212 1 \u2212 \u03b4)nr \u0001 1.\nSince PG(k) is integral, we can therefore determine it exactly.\n748 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\n5. Approximating VL(t) and related quantities\nWe have seen in Section 2.1 that our primary problem is to decide whether or not there\nexists an additive approximation scheme for (VL(e\n2\u03c0i\/5), [2]\nm\/2\n5 ) where L is the plat closure\nof a braid on m strings, indeed an additive approximation for the absolute value of the\nJones polynomial suffices. We make this precise in the following theorem.\nTheorem 5.1. Let A be a oracle which takes as input a braid b on m strings and \u0002 > 0, and\nreturns an additive approximation for (|VL(e2\u03c0i\/5)|, [2]m\/25 ), where L is the plat closure of b.\nThen BQP = PA.\nProof. Recall from Section 2.1 that given a braid on m strings, a topological quantum\ncomputer can be constructed such that the probability of output zero is |VL(e\n2\u03c0i\/5)|2\n[2]m5\nand\nthe computer runs in time polynomial in m. Given \u0002 > 0, using independent runs of this\ncomputer and a standard sampling approach, the probability of zero can be estimated\nto within an error of \u00022, where the number of runs is polynomial in \u0002\u22121. Hence we may\nestimate |VL(e2\u03c0i\/5)| to within an absolute error of \u0002[2]m\/25 in polynomial time. Therefore\nPA \u2286 BQP.\nSecondly, suppose we have a BQP language and an input x. By Theorem 2.1 we can\ndetermine a link L, of size polynomial in |x|, such that L satisfies equation (2.1), and the\nnumber of minima of L is |x| + 1. If x is in the language, Pr(0) < 1\/4, hence\n0 \u0001 1\n1 + [2]25\n(\n1 +\n(\u22121)c(L)+w(L)(\u2212a)3w(L)VL(e2\u03c0i\/5)\n[2]\n|x|\u22121\n5\n)\n< 1\/4,\n\u2212[2]|x|+15 [2]\u221225 \u0001 (\u22121)c(L)+w(L)(\u2212a)3w(L)VL\n(\ne2\u03c0i\/5\n)\n< [2]\n|x|+1\n5 [2]\n\u22122\n5\n(\n1 + [2]25\n4\n\u2212 1\n)\n,\n\u2223\u2223VL( e2\u03c0i\/5 )\u2223\u2223 < [2]|x|+15 0.39. (5.1)\nWhereas, if x is not in the language, Pr(0) > 3\/4, hence\n1\n1 + [2]25\n(\n1 +\n(\u22121)c(L)+w(L)(\u2212a)3w(L)VL(e2\u03c0i\/5)\n[2]\n|x|\u22121\n5\n)\n> 3\/4,\n(\u22121)c(L)+w(L)(\u2212a)3w(L)VL(e2\u03c0i\/5) > [2]|x|+15 [2]\u221225\n(\n3(1 + [2]25)\n4\n\u2212 1\n)\n,\n\u2223\u2223VL( e2\u03c0i\/5 )\u2223\u2223 > [2]|x|+15 0.65. (5.2)\nClearly use of an oracle giving an additive approximation for (|VL(e2\u03c0i\/5)|, [2]|x|+15 ) will en-\nable us to distinguish these two cases with probability at least 3\/4. Hence BQP \u2286 PA.\nWe saw in Section 2.1 the equivalence of the Jones polynomial and a specialization\nof the Tutte polynomial for alternating links, hence we would like an AA for a general\nplanar graph G for (\nT\n(\nG;\u2212e2\u03c0i\/5,\u2212e\u22122\u03c0i\/5), u),\nwhere u is some reasonable upper bound.\nApproximate Counting and Quantum Computation 749\nHyperbolae of the form Hq := (x \u2212 1)(y \u2212 1) = q play a crucial role in the manipulation\nof the Tutte polynomial; loosely speaking, the process of performing a tensor product on\nan input graph G with some other fixed graph N enables us to \u2018move around\u2019 the Tutte\nplane. That is, the new graph G \u2297 N satisfies\nT (G \u2297 N; x, y) = f(N; x, y)T (G;X,Y ), (5.3)\nwhere f and the arguments X,Y can be computed in time polynomial in |x|, |y| and |N|.\nHowever, for any choice of N, the new points X,Y satisfy\n(X \u2212 1)(Y \u2212 1) = (x \u2212 1)(y \u2212 1) = q. (5.4)\nThus, such transformations restrict us to remain on the initial hyperbola Hq; see [10] for\nfurther details. The close relationship between points on the hyperbola enables us to use\nan additive approximation at one point to get an additive approximation at any other\npoint (X,Y ) on the same hyperbola for which there exists a suitable planar N which\ntransforms (x, y) to (X,Y ) by (5.3).\nProposition 5.2. Let x, y \u2208 Q and N a planar graph on k vertices be fixed. Suppose there\nis an AA scheme for (T (G; x, y), u(n)) for any planar G on n vertices and m edges. Then\nthere is also an AA for\n(T (G;X,Y ), u(n+ m(k \u2212 2))),\nwhere X and Y are the points determined by the transformation in (5.3) (depending only on\nx, y and N).\nProof. Let X and Y be the points satisfying (5.3). Since G \u2297 N is planar (see the\nconstruction in [10]) we may use the AA scheme for\n(T (G \u2297 N; x, y), u(|V (G \u2297 N)|))\nto get an approximation to within an error \u0002u(|V (G \u2297 N)|) with probability at least 3\/4 in\npolynomial time. Note that |V (G \u2297 N)| = n+ m(k \u2212 2). Since the running time of the AA\nscheme is polynomial in \u0002\u22121, and f(N; x, y) is a constant, we can approximate to within\nan error of \u0002|f(N; x, y)|u(n+ m(k \u2212 2)) and still run in polynomial time. By (5.3) we have\nT (G;X,Y ) =\nT (G \u2297 N; x, y)\nf(N; x, y)\n.\nHence the AA for T (G \u2297 N; x, y) yields an AA for T (G;X,Y ) with error at most\n\u0002u(n+ m(k \u2212 2)) in polynomial time.\nBecause of the important role of these hyperbolae, it is natural to look at the hyperbolae\ncontaining the roots of unity (\u2212e 2\u03c0in ,\u2212e\u2212 2\u03c0in ). These are Hqn , where qn = 2 + 2 cos(2\u03c0\/n),\nwhich cut the x-axis at\nx = \u22121 \u2212 2 cos(2\u03c0\/n), (5.5)\ncorresponding to an evaluation of the chromatic polynomial at one of the well-known\nBeraha numbers Bn = 2 + 2 cos(2\u03c0\/n). Since for real x and y and any graph N, the related\n750 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\npoints X and Y will also be real, we cannot find an N such that we can directly relate\nT (G \u2297 N; 1 \u2212 B5, 0) and T (G;\u2212e 2\u03c0i5 ,\u2212e\u2212 2\u03c0i5 ). Whether or not we can find a point within\nabsolute value \u0002 of (1 \u2212 B5, 0) that can be directly related to (\u2212e 2\u03c0i5 ,\u2212e\u2212 2\u03c0i5 ) is an interesting\nongoing question. We present some positive results below, and return to these difficulties\nin Section 7.\nFirst note that by Theorems 4.1 and 4.2 we know that T (G; x, y), x, y \u2208 Z will have\nan AA scheme with respect to an appropriate normalization, since evaluations at these\npoints are GapP functions. However, the drawback is that often the naive normalization\nwill be too large. This will not always be the case, for example the point (1 \u2212 \u03bb, 0), \u03bb \u2208 Z,\ngives the number of proper \u03bb colourings, and by Theorems 4.3 and 4.4 here we have a\nbest possible normalization.\nWhen we consider the non-integer points, the situation is more complicated. A straight-\nforward sampling approach gives the following result.\nProposition 5.3. For rational (x, y) and a connected graph G, there exists a AA algorithm\nfor the following:\n(i) (T (G; x, y), y|E|(y \u2212 1)\u2212|V |+1) when {x = 1, y > 1},\n(ii) (T (G; x, y), x|E|(x \u2212 1)|V |\u2212|E|\u22121) when {x > 1, y = 1},\n(iii) (T (G; x, y), y|E|(x \u2212 1)|V |\u22121) when {x > 1, y > 1}.\nIn other regions, in particular where there are negative terms in the expansion of T ,\ncancellation between terms means that there is no longer a natural upper bound by which\nto normalize. We return to this problem in Section 7.\n6. An alternative approach\nReturning to our original motivation, at the moment we are unable to determine whether\nthere is an AA algorithm for (VL(e\n2\u03c0i\/5), [2]\nm\/2\n5 ) where L is the plat closure of a braid on\nm strings. However, we now show that in order to simulate a quantum computation it\nwould be sufficient to determine the sign of the real part of VL(e\n2\u03c0i\/5). Particularly in the\ncase that the writhe of L is zero, and hence VL(e\n2\u03c0i\/5) is real, this seems an easier problem.\nTheorem 6.1. Let A(L) be an oracle that returns the sign of the real part of the Jones\npolynomial of the link L evaluated at e2\u03c0i\/5. Then BQP \u2286 PA.\nProof. This proof follows that of Theorem 5.1. Suppose we have a BQP language and\nan input x. By Theorem 2.1 we can determine a link L, of size polynomial in |x|, such that\nL satisfies equation (2.1), and the number of minima of L is |x| + 1. We now assume that\nw(L) = 0; the proof in the cases w(L) = 4 and w(L) = \u22124 follow by a similar argument.\nSimplifying equation (2.1) in the case w(L) = 0, we have\nPr(0) =\n1\n1 + [2]25\n(\n1 +\n(\u22121)c(L)VL(e2\u03c0i\/5)\n[2]m(L)\u221225\n)\n. (6.1)\nApproximate Counting and Quantum Computation 751\nIf x is in the language, Pr(0) < 1\/4, hence\n1\n1 + [2]25\n(\n1 +\n(\u22121)c(L)VL(e2\u03c0i\/5)\n[2]\n|x|\u22121\n5\n)\n< 1\/4,\n(\u22121)c(L)VL(e2\u03c0i\/5) < [2]|x|\u221215\n(\n1 + [2]25\n4\n\u2212 1\n)\n,\n(\u22121)c(L)VL(e2\u03c0i\/5) < \u2212[2]|x|\u221215 0.09 < 0. (6.2)\nWhereas, if x is not in the language, Pr(0) > 3\/4, hence\n1\n1 + [2]25\n(\n1 +\n(\u22121)c(L)VL(e2\u03c0i\/5)\n[2]\n|x|\u22121\n5\n)\n> 3\/4,\n(\u22121)c(L)VL(e2\u03c0i\/5) > [2]|x|\u221215\n(\n3(1 + [2]25)\n4\n\u2212 1\n)\n,\n(\u22121)c(L)VL(e2\u03c0i\/5) > [2]|x|\u221215 1.71 > 0. (6.3)\nClearly use of an oracle giving an additive approximation for the sign of VL(e\n2\u03c0i\/5) will en-\nable us to distinguish these two cases with probability at least 3\/4. Hence BQP\u2286PA.\nIn the previous section we outlined the importance of the hyperbolae Hq := (x\u2212 1)(y\u2212\n1) = q to the Tutte polynomial. For x, y, X, Y and N related as in equation (5.3), we can\ndetermine the sign of T (G;X,Y ) if we can determine the sign of T (G \u2297 N; x, y).\nThis gives rise to the natural question of the complexity of determining whether a\nfunction is greater than or less than zero, in particular the Tutte polynomial, of which the\nJones is a specialization. It is immediate from the definitions that the Tutte is non-negative\nin the region x, y \u0002 0. At all other integer points on the axes the Tutte polynomial counts\neither colourings or flows, up to easy multiplicative factors. Since these factors may be\npositive or negative, we can always select one of either \u2018T (G; x, y) is non-negative\u2019 or\n\u2018T (G; x, y) is non-positive\u2019 that is true, in polynomial time. In the above situation we are\nnot concerned with cases in which the value is exactly zero, hence this would suffice. We\nconsider the situation at other points in the next section.\n7. Some combinatorial and complexity questions\nWe close with the following questions which have been prompted by this work.\nIn Section 5 we noted that we are unable to find a suitable normalization for\napproximating the Tutte polynomial when the expansion included negative terms. We\nreturn to this here and examine the chromatic polynomial to highlight the difficulties.\nWe have seen that for a connected graph G, we have an additive approximation\nfor (PG(\u03bb), (\u03bb \u2212 1)n)) for all \u03bb \u2208 Z+. However, we are most interested in an additive\napproximation at the non-integral Beraha numbers. One might hope to achieve the above\napproximation for all \u03bb \u2208 R>1; however, this seems unlikely as (\u03bb \u2212 1)n is not even close\n752 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nto being an upper bound for PG(\u03bb). Indeed, consider the complete graphs: for small \u03b4,\nPKn (1 + \u03b4) = (1 + \u03b4)(\u03b4)(\u22121 + \u03b4) \u00b7 \u00b7 \u00b7 (\u2212n+ \u03b4 + 1) (7.1)\n\u2248 (\u22121)n\u22122\u03b4(n \u2212 2)!. (7.2)\nThis prompts the first open question.\nQuestion 1. What is the best upper bound depending on \u03bb, n and m for |PG(\u03bb)| for all\n(planar) graphs G on n vertices and m edges?\nAs far as we are aware the best upper bound known [19] is\n|PG(\u03bb)| \u0001 |\u03bb|n\u2212m(|\u03bb| + 1)m \u03bb \u2208 C.\nFor general graphs we can make the following small improvement.\nProposition 7.1. Let G be a graph and let \u03bb \u2208 C, then\n|PG(\u03bb)| \u0001\n(\nm\nn\n\u2212 1\n)n\u2212m(\nm\nn\n)m\nfor\nm\nn\n\u0002 |\u03bb| + 1,\n|PG(\u03bb)| \u0001 (|\u03bb|)n\u2212m(|\u03bb| + 1)m for m\nn\n< |\u03bb| + 1.\nIf G is a connected graph then\n|PG(\u03bb)| \u0001\n(\nm\nn \u2212 1 \u2212 1\n)n\u2212m\u22121(\nm\nn \u2212 1\n)m\n|\u03bb| for m\nn \u2212 1 \u0002 |\u03bb \u2212 1|,\n|PG(\u03bb)| \u0001 (|\u03bb \u2212 1| \u2212 1)n\u2212m\u22121(|\u03bb \u2212 1|)m|\u03bb| for m\nn \u2212 1 < |\u03bb \u2212 1|.\nThese bounds hold for all \u03bb \u2208 C; however, the Beraha numbers have special character-\nistics. The evaluations of the chromatic polynomial at these points have some beautiful,\nbut not totally understood, properties [16]. The values begin 4, 0, 1, 2, 1 + \u03c4, 3, . . . and\nconverge towards 4, where \u03c4 is the golden ratio 1+\n\u221a\n5\n2\n. The integers in this series are clearly\ncentral to the theory of chromatic polynomials. Writing B5 = 1 + \u03c4, then for any plane\ntriangulation T on n vertices:\n|PT (B5)| \u0001 \u03c45\u2212n. (7.3)\nFor a connected graph G with average degree at least 3.24 (note that a planar triangulation\nhas average degree 6 \u2212 12\/n), the above proposition gives\n|PG(B5)| \u0001\n(\nm\nn \u2212 1 \u2212 1\n)n\u2212m\u22121(\nm\nn \u2212 1\n)m\nB5.\nHence we ask the following.\nQuestion 2. Is there a better bound for |PG(Bn)| than there is for an evaluation at a general\npoint?\nApproximate Counting and Quantum Computation 753\nFollowing the results of Section 6 we are also prompted to examine the complexity of\ndetermining whether the Tutte polynomial is greater than or equal to, or less than zero\nat a given point. Recall that this decision problem is trivial for x, y \u0002 0, and for integer\npoints on the axes. Again considering the specialization to the chromatic polynomial we\nask the following.\nQuestion 3. For fixed \u03bb \u2208 Q, is it NP-hard to decide whether PG(\u03bb) is greater than or equal\nto, or less than zero?\nNote that this is trivial for \u03bb \u2208 Z. It is also P-time decidable for \u03bb < 32\/27 by the\nfollowing theorem of Woodall [19] and Jackson [9].\nTheorem 7.2. Let G be a graph without loops on n vertices, \u03ba components and b blocks.\n(i) If \u03bb < 0, then PG(\u03bb) is nonzero with the sign of (\u22121)n.\n(ii) If 0 < \u03bb < 1, then PG(\u03bb) is nonzero with the sign of (\u22121)n\u2212\u03ba.\n(iii) If 1 < \u03bb < 32\n27\n, then PG(\u03bb) is nonzero with the sign of (\u22121)n\u2212\u03ba\u2212b.\nNote that PG(\u03bb) \u0005= 0 for \u03bb \u2208 Q\\Z, since the chromatic polynomial has integer coefficients.\nIt is easy to show the following.\n\u2022 Let \u03bb \u2208 Q\\Z. If deciding whether PG(\u03bb) > 0 is NP-hard, then it is also NP-hard to\ndecide whether PG(\u03bb+ 1) > 0 for a general graph G.\nHowever, since it is easy to decide for \u03bb < 32\/27, the converse cannot be true for all\n\u03bb \u2208 Q\\Z unless these questions are all in P. It would be interesting to know the answer to\nthe following questions.\nQuestion 4. Does there exist a critical \u03b1 > 0 such that deciding whether PG(\u03bb) is greater\nthan or less than zero is NP-hard for all rational \u03bb > \u03b1, \u03bb \u0005\u2208 Z?\nQuestion 5. Is this critical \u03b1 equal to 32\/27?\nAs before we are more interested in evaluating the chromatic polynomial at the Beraha\npoints than at general non-integers, and the graphs we are most interested in are planar.\nHence we ask the following specific question.\nQuestion 6. For planar graphs, is the problem of deciding whether PG(Bn) is greater or less\nthan zero NP-hard?\nFor any graph G, not necessarily planar, it is known that PG(Bn) \u0005= 0 for n \u0002 5, n \u0005= 6, 10,\n[13]. Also Tutte [16] has shown that for any planar triangulation the following equation\nholds, writing B10 = \u03c4\n\u221a\n5,\nPT (B10) =\n\u221a\n5\u03c43(n\u22123)(PT (B5))2. (7.4)\nSo PT (B10) > 0 for all plane triangulations T , indeed a simple reverse induction shows that\nfor any planar graph G, PG(B10) > 0 holds. Further, for any outerplanar graph G, we can\n754 M. Bordewich, M. Freedman, L. Lova\u00b4sz and D. Welsh\nform the planar graph G+ by adding a new vertex adjacent to all original vertices. Since\nPG+(\u03bb+ 1) = (\u03bb+ 1)PG(\u03bb)\nholds for all positive integers, it holds for all \u03bb \u2208 R. Noting that B10 = B5 + 1, we conclude\nthat PG(B5) > 0 for all outerplanar graphs G.\nAcknowledgements\nThe authors would like to thank the referee for many helpful comments and suggestions,\nin particular for suggesting a simpler proof of Theorem 4.3. We also thank Graham\nBrightwell and Colin McDiarmid for comments on an earlier version of this work [2].\nReferences\n[1] Adleman, L., DeMarris, J. and Huang, M. (1997) Quantum computability. SIAM J. Computing\n26 1524\u20131540.\n[2] Bordewich, M. (2003) The complexity of counting and randomised approximation. PhD thesis,\nNew College, Oxford University.\n[3] Fenner, S. (2003) PP-lowness and a simple definition of AWPP. Theory Comput. Syst. 36\n199\u2013212.\n[4] Fortnow, L. and Rogers, J. (1999) Complexity limitations on quantum computation. J. Comput.\nSyst. Sci. 59 240\u2013252.\n[5] Freedman, M., Kitaev, A., Larsen, M. and Wang, Z. (2003) Topological quantum computation.\nBull. Amer. Math. Soc. 40 31\u201338.\n[6] Freedman, M., Kitaev, A. and Wang, Z. (2002) Simulation of topological field theories by\nquantum computers. Commun. Math. Phys. 227 587\u2013603.\n[7] Freedman, M., Larsen, M. and Wang, Z. (2002) Density representations of braid groups and\ndistribution of values of Jones invariants. Commun. Math. Phys. 228 177\u2013199.\n[8] Freedman, M., Larsen, M. and Wang, Z. (2002) A modular functor which is universal for\nquantum computation. Commun. Math. Phys. 227 605\u2013622.\n[9] Jackson, B. (1993) A zero-free interval for chromatic polynomials of graphs. Combin. Probab.\nComput. 2 325\u2013336.\n[10] Jaeger, F., Vertigan, D. and Welsh, D. J. A. (1990) On the computational complexity of the\nJones and Tutte polynomials. Math. Proc. Camb. Phil. Soc. 108 35\u201353.\n[11] Karp, R., Luby, M. and Madras, N. (1989) Monte Carlo approximation algorithms for\nenumeration problems. J. Algorithms 10 429\u2013448.\n[12] Kitaev, A. (2002) Quantum computations: algorithms and error correction. Russian Math.\nSurvey 52:61 1191\u20131249.\n[13] Salas, J. and Sokal, A. (2000) Transfer matrices and partition-function zeros for\nantiferromagnetic Potts models. J. Statist. Phys. 98 551\u2013588.\n[14] Solovay, R. Private communications.\n[15] Thistlethwaite, M. B. (1987) A spanning tree expansion of the Jones polynomial. Topology 26\n297\u2013309.\n[16] Tutte, W. T. (1970) On chromatic polynomials and the golden ratio. J. Combin. Theory Ser. B\n9 289\u2013296.\n[17] Vertigan, D. and Welsh, D. J. A. (1992) The computational complexity of the Tutte plane: the\nbipartite case. Combin. Probab. Comput. 1 181\u2013187.\n[18] Wang, Z. (2003) Addendum: Derivation of the formula in [FKLW]. www.tqc.iu.edu.\n[19] Woodall, D. R. (1978) Zeros of chromatic polynomials. In Combinatorial Surveys: Proceedings\nof the Sixth British Combinatorial Conference (P. J. Cameron, ed.), Academic Press, London,\npp. 199\u2013223.\n"}