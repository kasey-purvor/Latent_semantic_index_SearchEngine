{"doi":"10.1016\/j.biosystemseng.2004.04.012","coreId":"140590","oai":"oai:dspace.lib.cranfield.ac.uk:1826\/1709","identifiers":["oai:dspace.lib.cranfield.ac.uk:1826\/1709","10.1016\/j.biosystemseng.2004.04.012"],"title":"Optimising Fungicide Applications on Winter Wheat using Genetic Algorithms.","authors":["Parsons, David J.","Te, Beest D."],"enrichments":{"references":[{"id":37942095,"title":"Adaptation in Natural and Artificial Systems.","authors":[],"date":"1992","doi":null,"raw":"Addison-Wesley, Reading, Massachusetts Holland J H (1992).  Adaptation in Natural and Artificial Systems.  MIT Press, Cambridge, Massachusetts Milne A E; Paveley N D; Audsley E; Livermore  P (2003).  A wheat canopy model for use in disease management decision support systems.  Annals of Applied Biology, 143, 265-274 Murali N S; Secher B J M; Rydahl P; Andreasen F M (1999).  Application of information technology in plant protection in Denmark: from vision to reality.  Computers and Electronics In Agriculture, 22, 109-115 Parsons D J (1998).  Optimising silage harvesting plans in a grass and grazing simulation using the revised simplex method and a genetic algorithm.  Agricultural Systems, 56 (1), 29-44 Paveley N D; Lockley D; Vaughan TB; Thomas J; Schmidt K (2000).  Predicting effective fungicide doses through observation of leaf emergence.  Plant Pathology, 49 (6), 748-766 Rijsdijk F H (1983).  The EPIPRE system.  In: Decision Making in the Practice of Crop Protection.  (Austin R B ed).  Monograph 25,  BCPC, Bracknell, 65-76 Thomas M  R; Garthwaite D  G; Banham A  R  (1997).  Pesticide Usage Survey Report 141: Arable crops in Great Britain 1996.  Defra Publications, London Whitley L D  (1989); The GENITOR algorithm and selective pressure: why rank-based allocation of reproductive trials is best.  In: Proceedings of the Third International Conference on Genetic Algorithms (ICGA).  (Schaffer J D ed).  Morgan Kauffman, San Francisco, 116-121 Zadoks J C (1981).  EPIPRE: a disease and pest management system for winter wheat developed in the Netherlands.  EPPO Bulletin 11, 365-369","cites":null},{"id":37942094,"title":"Decision support system for arable crops (DESSAC): an integrated approach to decision support. In: Pests and Disease,","authors":[],"date":"1998","doi":null,"raw":"Brooks D H (1998).  Decision support system for arable crops (DESSAC): an integrated approach to decision support.  In: Pests and Disease, Proceedings of an International Conference, Brighton, UK, 16-19 November, 1998.  BCPC, Bracknell, Volume 1, 239-246 Davis L (editor) (1991).  Handbook of Genetic Algorithms.  Van Nostrand Reinhold, New York Goldberg D E (1989).  Genetic Algorithms in Search, Optimization and Machine Learning.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-08-01T00:00:00Z","abstract":"A genetic algorithm is used in a decision support system to select the\ncombinations of chemicals and the timing of successive treatments for the\noptimal control of fungal diseases in winter wheat crops, using a simulation\nmodel to predict the performance of different treatments. The search space is\nlarge and discrete, making the use of conventional optimisation methods\nimpractical. Furthermore, the user requirements specify that the method must\nsupply lists of near-optimal solutions, which fits with the use of populations\nof solutions in the genetic algorithm. Substantial improvements in the\nperformance of the algorithm were obtained by tuning the fitness, selection,\nreproduction and replacement methods for the optimisation of short-term and\nlong-term decisions. These also ensured rapid convergence in the former and\nprevented premature convergence in the latter. The algorithm has proved to be\neffective at finding optimal and near optimal solutions within an acceptable\ntime. When compared with exhaustive searches for cases where this is possible\n(short-term planning with restricted choices), it typically finds 5\u20138 of the top\n10 plans and a similar number of the next 10. The results of the system in field\nand user trials have been go","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/140590.pdf","fullTextIdentifier":"http:\/\/dx.doi.org\/doi:10.1016\/j.biosystemseng.2004.04.012","pdfHashValue":"dd966fc54c6c2103cd15739ef446124c2f550f6f","publisher":"Elsevier Science B.V., Amsterdam","rawRecordXml":"<record><header><identifier>\noai:dspace.lib.cranfield.ac.uk:1826\/1709<\/identifier><datestamp>2011-10-10T11:41:48Z<\/datestamp><setSpec>hdl_1826_24<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>Optimising Fungicide Applications on Winter Wheat using Genetic Algorithms.<\/dc:title><dc:creator>Parsons, David J.<\/dc:creator><dc:creator>Te, Beest D.<\/dc:creator><dc:description>A genetic algorithm is used in a decision support system to select the\ncombinations of chemicals and the timing of successive treatments for the\noptimal control of fungal diseases in winter wheat crops, using a simulation\nmodel to predict the performance of different treatments. The search space is\nlarge and discrete, making the use of conventional optimisation methods\nimpractical. Furthermore, the user requirements specify that the method must\nsupply lists of near-optimal solutions, which fits with the use of populations\nof solutions in the genetic algorithm. Substantial improvements in the\nperformance of the algorithm were obtained by tuning the fitness, selection,\nreproduction and replacement methods for the optimisation of short-term and\nlong-term decisions. These also ensured rapid convergence in the former and\nprevented premature convergence in the latter. The algorithm has proved to be\neffective at finding optimal and near optimal solutions within an acceptable\ntime. When compared with exhaustive searches for cases where this is possible\n(short-term planning with restricted choices), it typically finds 5\u20138 of the top\n10 plans and a similar number of the next 10. The results of the system in field\nand user trials have been goo<\/dc:description><dc:publisher>Elsevier Science B.V., Amsterdam<\/dc:publisher><dc:date>2011-09-29T17:35:20Z<\/dc:date><dc:date>2011-09-29T17:35:20Z<\/dc:date><dc:date>2004-08-01T00:00:00Z<\/dc:date><dc:type>Article<\/dc:type><dc:identifier>D. J. Parsons and D. Te Beest, Optimising Fungicide Applications on Winter Wheat using Genetic Algorithms, Biosystems Engineering, Volume 88, Issue 4, August 2004, Pages 401-410.<\/dc:identifier><dc:identifier>1537-5110<\/dc:identifier><dc:identifier>http:\/\/dx.doi.org\/doi:10.1016\/j.biosystemseng.2004.04.012<\/dc:identifier><dc:identifier>http:\/\/dspace.lib.cranfield.ac.uk\/handle\/1826\/1709<\/dc:identifier><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["1537-5110","issn:1537-5110"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":[],"subject":["Article"],"fullText":" \n 1 \n \n Optimising Fungicide Applications on Winter Wheat using Genetic \nAlgorithms \nD.J.  Parsons1 & D. Te Beest2 \n1 Silsoe Research Institute, Wrest Park, Silsoe, Bedford, MK45 4HS, United Kingdom; \nemail of corresponding author: david.parsons@bbsrc.ac.uk \n2 Wageningen University, Postbus 16, 6700AA, Wageningen, The Netherlands; e-mail: \ndennis.tebeest@bbsrc.ac.uk \n \n \n \n \n \n \n \n \n \n \n \n \n \n* NOTICE: this is the author's version of a work that was accepted for publication in \nBiosystems Engineering. Changes resulting from the publishing process, such as peer review, \nediting, corrections, structural formatting, and other quality control mechanisms may not be \nreflected in this document. Changes may have been made to this work since it was submitted \nfor publication. A definitive version was subsequently published in Biosystems Engineering, \n88 (4) 2004, doi:10.1016\/j.biosystemseng.2004.04.012        \n \n \n 2 \nAbstract \n \nA genetic algorithm is used in a decision support system to select the combinations of \nchemicals and the timing of successive treatments for the optimal control of fungal diseases in \nwinter wheat crops, using a simulation model to predict the performance of different treatments.  \nThe search space is large and discrete, making the use of conventional optimisation methods \nimpractical.  Furthermore, the user requirements specify that the method must supply lists of \nnear-optimal solutions, which fits with the use of populations of solutions in the genetic \nalgorithm.  Substantial improvements in the performance of the algorithm were obtained by \ntuning the fitness, selection, reproduction and replacement methods for the optimisation of short-\nterm and long-term decisions.  These also ensured rapid convergence in the former and prevented \npremature convergence in the latter. \n \nThe algorithm has proved to be effective at finding optimal and near optimal solutions within \nan acceptable time.  When compared with exhaustive searches for cases where this is possible \n(short-term planning with restricted choices), it typically finds 5-8 of the top 10 plans and a \nsimilar number of the next 10.  The results of the system in field and user trials have been good. \n \n \n1.  Introduction \n \nIn the UK, approximately two million hectares of land is used to grow wheat, and each crop \nreceives on average 2.5 fungicide sprays (Thomas et al., 1997).  Hence, appropriate fungicide \napplication is an important part of cereal husbandry.  However there are around 20 appropriate \nchemical actives and at least one new chemical is introduced every year, replacing less effective \nold ones.  These are formulated in combinations into hundreds of products.  Each chemical has \ndifferent levels of control against different diseases.  Timing and dose both affect this degree of \ncontrol (Paveley et al., 2000).  Chemicals can be combined together to improve results.  Disease \nprogress is very complex and variable from year to year, site to site and variety to variety.  \nSurveys (Thomas et al., 1997) have shown that, as a result, the use of fungicides by farmers is \nlittle affected by likely disease pressure or variety.  Thus, some farmers are using inappropriate \nfungicide application.  It would benefit both the environment and the farmer\u2019s profit if more \nappropriate timings and doses could be used. \n \n 3 \n \nSeveral European countries have made use of information technology to assist growers with \ndisease control in wheat and other crops.  One of the first systems was EPIPRE in the \nNetherlands (Zadoks, 1981; Rijsdijk, 1983).  The name is derived from \u201cepidemic prediction and \nprevention.\u201d The  EPIPRE system used empirical models to relate observed disease levels to \nlikely losses.  Use of the system has now declined.  Germany has a web-based advisory system \ncalled proPlant Expert (www.proplantexpert.com).  It functions as an expert advisory system for \na range of crops, pests and diseases.  PC-Plant Protection, developed in Denmark (Murali et al.  \n1999) covers control of weeds, pests and diseases in wheat and other crops, including barley, \npeas and oilseed rape with an emphasis on reducing chemical use.  Models are used to assess the \nneed for control based on observations, then it gives recommendations of product choice and \ndose.  Approximately 2500 licences have been sold. \n \nWithin the UK, Decision Support Systems for Arable Crops ( DESSAC) was set up as a LINK \nproject, that is, one with joint government and industry funding.  The DESSAC system is \ndesigned as a personal computer-based platform to support the development of decision support \nsystems, providing access to farm, field, pesticide and weather databases (Brooks, 1998).  Wheat \nDisease Manager (WDM) is the first module and was developed in conjunction with the \nDESSAC platform.  It is designed for use by farmers and their advisors to support decisions \nrelating to the management of fungal disease on winter wheat.  Its approach is somewhat \ndifferent from the systems mentioned above, in that it uses semi-mechanistic crop and disease \ndevelopment models, and produces recommendations by optimising the control variables - \nchemicals, dose and timing - in the model. \n \nThere are four aspects to improving the application of fungicides to wheat crops: predicting \nthe effect on the diseases; predicting the impact of reduced disease on increased yield; \ntransferring this knowledge to the farmer or adviser; determining the optimum application of \nfungicides.  This paper focuses on the fourth aspect within WDM.  The models on which it is \nbased are described elsewhere and cover simulation of the wheat canopy (Milne et al., 2003), \nyield formation, foliar disease and disease of the stem base and ear. \n \nThe WDM module contains four components: the user interface, the process model, the \nfungicide module and the decision model.  The user interface allows the user to enter \n \n 4 \nobservations of crop state and disease level into the farm database, and to set the requirements \nfrom the models.  The process model is a collective term for the models outlined above, and \nreceives information from the weather database, farm database (variety, sowing date & \nobservations) and varieties database (disease resistance of wheat variety).  The fungicide module \nhandles the interactions with the database of information about chemicals, and validates spray \nprogrammes for compliance with constraints on spray timings and mixtures.  It allows the user to \nchoose the list of products to be considered by the decision model: typically a short list of 10-20 \nproducts preferred by the user.  The decision model, which is the subject of this paper, suggests \ncourses of action to the user by making use of all this information.   \n \nWinter wheat is attacked throughout its life by a number of fungal diseases of the stem, leaves \nand ear.  The four major spring foliar diseases in the UK are Septoria tritici, yellow rust \n(Puccinia striiformis), brown rust (Puccinia recondita) and powdery mildew (Erysiphe \ngramminis).  All of these diseases can cause substantial losses of grain yield if not properly \ncontrolled.  Stem base diseases such as eyespot can also cause yield losses and ear diseases \nincluding fusarium and sooty moulds can reduce the value of the grain.  The dispersal and \ndevelopment of these diseases are strongly influenced by weather variables, including \ntemperature, humidity, wind speed and rainfall.  The variables of importance differ from disease \nto disease.   \n \nThe number of possible choices available to the farmer, even within a short time period, is \nvery large: there are on the market over 200 fungicide products, containing between one and \nthree active ingredients, with different levels of activity against each disease.  Some of the \nproducts may also be mixed safely for application.  Furthermore, there is growing interest in \nmoving away from the standard doses towards adjusting the dose according to the disease risk.  \nThus, even if the choices are restricted to, for example, 20 well-known products, the number of \npossible two-spray programmes allowing one or two products per application over a four week \nperiod is almost 1,000,000 (20 single products and 380 mixtures on each date, giving 4002 \ncombinations, and 6 possible timing combinations with a minimum of 2 weeks between \napplications, as described in Section 2.2.2). \n \n \n 5 \n2.  Decision model \n \n2.1.  Requirements \n \nThe objective of the decision model is to maximise the margin over fungicide costs, that is the \nvalue of the grain produced less the cost of the chemicals and their application.  This will be \nreferred to simply as the margin.  This was a requirement from the users, who wanted the \noptimisation to be in terms of a financial objective, not yield maximisation or disease \nminimisation. \n \nThe decision model interacts with the process model through a collection of control variables. \n These are fairly complex, consisting of time of application, in discrete steps, dose, which could \nbe continuous, and chemicals, which may include mixtures.  There is also a requirement from the \nusers that the decision model should not simply provide a single optimum solution, but should \ngive a ranked list of near-optimal spray programmes. \n \nTaken together, these considerations motivated the choice of a genetic algorithm.  Firstly, it is \ncapable of being used with a black box simulation model.  Secondly, it is intrinsically suited to \ndiscrete variables, whether numerical or combinatorial.  Thirdly, the existence of a population \ncan be used to generate a list of near-optimal solutions in a very natural way.  A previous \napplication to a silage harvesting problem with somewhat similar structure had shown that \ngenetic algorithms were suited to problems of operation scheduling (Parsons, 1998).  The details \nof the operation of genetic algorithms can be found in reference works such as Holland (1992), \nGoldberg (1989) and Davis (1991). \n \nThe decision model is required for strategic or long-term planning prior to the fungicide \ntreatment period (the \u2018spraying season\u2019), which is taken to be 15 March to 15 July, and for \ntactical or short-term decision making during the season.  The different requirements for these \ntwo uses result in differences in implementation.  The intention is that the user should create and \nsave one or more long-term plans, then use the short-term mode to revise one as the season \nprogresses.  Each combination of variety and sowing date within a farm will require a different \nplan. \n \n \n 6 \nFor long-term planning, the time scale covers the whole of the spraying season (15 March-15 \nJuly: 122 days).  The user can choose to apply up to 4 sprays within this period, each of which \ncan contain up to three products, subject to restrictions on permitted mixtures, timing and doses.  \nThe algorithm must search the space of possible spray plans, which includes all permitted \nmixtures, doses and timings, thoroughly; for long-term planning, speed of operation is a \nsecondary consideration.  The use of the long-term mode is not restricted to pre-season planning: \nif the user feels that it is necessary, it can be used at any point in the season to create a new plan, \nin which only the sprays after that date will be optimised. \n \nFor short-term decision making, the emphasis is on revisions to an existing plan, which may \nbe required because the crop and disease have not developed as forecast at the start of the season. \n The system will have been updated with weather data and observations of the state of the crop \nand the amount of infection to allow more accurate predictions to be made.  Applications of \nsprays prior to the decision point will also have been recorded.  It is important for the system to \noperate quickly when used in this way.  This is achieved primarily by restricting the planning \nhorizon to 4 weeks.  When combined with other constraints, this limits the number of possible \nspray applications to one or two within that period.  As described below, this allows a more \nefficient encoding of the problem for use by the genetic algorithm.  The other decision variables \nare the same as for the long-term optimisation. \n \nIn addition, there are several constraints on the spray plans.  Firstly, there are restrictions \nimposed by pesticide approvals, such as the maximum total dose of a product applied during a \nseason or the minimum interval between spraying and harvest.  These have the force of law, and \nthe program is not permitted to break them.  Secondly, there are published approved mixtures of \nproducts.  Although these are not part of the formal approvals, the program will not recommend \nmixtures that are not on the approved list, although the user can use the program to experiment \nwith them.  Finally, a decision was taken to impose a minimum interval between applications of \n2 weeks, because this is approximately the interval before the emergence of the next unprotected \nleaf layer. \n \nThe algorithm also allows additional constraints to be imposed, such as fixing the date of one \nof the sprays, or fixing the contents of a spray.  This could be used to answer questions such as \n \n 7 \n\u201cWhat is the best product to spray today?\u201d or \u201cWhen would be the best time to spray product \nX?\u201d \n \n2.2.  Implementation \n \nThe key features of the use of a genetic algorithm for any problem are the method of encoding \nthe problem as a chromosome, the fitness function (related to the optimisation objective \nfunction), the method of selection of individuals for reproduction, the reproduction operators, \nand the method of replacement of old individuals by new ones.   \n \nThe encoding was necessarily somewhat different for the short- and long-term optimisations, \nbut initially they used similar fitness, selection, reproduction and replacement methods.  These \nwere chosen to give good performance in the short-term optimisation, but were found to be \nunsuitable for the long-term one.  For the short-term it was necessary to introduce strong \nselection pressures to ensure that the optimum plan was found quickly, but to balance this with \nmethods to preserve population diversity.  However, these choices caused premature \nconvergence to inferior solutions in the much larger long-term search space.  A systematic \ninvestigation resulted in changes to most of the options.  Substantial improvements were \nobtained, which are illustrated in the results section.  This illustrates the importance of tailoring \ngenetic algorithms to the problem being considered; they cannot simply be applied with the \ndefault settings. \n \n2.2.1.  Population size and run length \n \nAs the complexity of the problem varies dramatically, it is not possible to use a fixed \npopulation size and number of generations.  After experimenting to find values that gave \nacceptable speed, reliability and diversity of the final population with different sizes of problems, \nheuristics were derived to adjust these according to the length of the chromosome, which is used \nas a measure of the complexity of the problem.  The number of generations is proportional to the \nchromosome length, while the population size is proportional to its square: \nGenerations = 2 Length, \nPopulation = Length2\/10. \n \n \n 8 \n2.2.2.  Encoding \n \nThe way in which the problem variables are encoded as a chromosome can have a profound \neffect on the efficiency of a genetic algorithm.  In general, the chromosome should be as short as \npossible and avoid redundancy.  For the genetic operators to work well, short schemata within \nthe chromosome should carry significant information, as it is these that tend to be passed from \ngeneration to generation (Holland, 1992, chapter 4).  As far as possible constraints should be \nencoded into the structure of the chromosome, rather than imposed after it is decoded. \n \nA binary alphabet is used for the chromosome, that is it consists of a string of 0s and 1s.  It is \nconvenient to consider this as divided into several genes, each determining a feature of the spray \nplan: \n(1)  date(s) of spray(s) as relative week numbers; \n(2)  number of chemicals in each spray; \n(3)  choice of each chemical; and \n(4)  dose of each chemical in steps of 1\/4 dose. \nAll except the date genes are identical in both the short-term and long-term optimisations.  \nThese are explained in more detail below, but a simple example will help to illustrate the \nconstruction of the chromosome.  Consider the case where a short-term, one-spray \nprogramme with up to two products being mixed from a list of 16 possibilities is being \noptimised.  A programme containing a mixture of a half dose of product number 9 and a full \ndose of product number 2 applied 2 weeks from the current date would encode as \n01,11,1001,0010,1,010, \nwhere the commas indicate the divisions between the genes.  Taking the genes in that order, \n01 means a dose of (1+1)\/4, 11 means a dose of (3+1)\/4, 1001 is product 9, 0010 is product 2, \n1 means 1+1 products and 010 means week 2.  Note that the doses and the number of \nproducts cannot be 0, so 1 is added to the value of the gene interpreted as a binary number. \n \nA temporal resolution of 1 week is used for the dates, that is, the date of a spray is simply the \nnumber of weeks from the start of the decision period.  Given the inherent uncertainties and the \nfact that it may be impossible to spray on the optimum date due to weather or logistics, a finer \nresolution is inappropriate.  It also helps to reduce the size of the search space, so reducing the \ntime required to find a solution. \n \n 9 \n \nIn short-term mode, this means that there are five possible one-spray timings and six possible \ntwo-spray timings within the 4 week horizon, given the minimum interval of 2 weeks between \nsprays.  There is no simple, efficient representation for both one-spray and two-spray plans, so \nthey are considered separately and the results are combined after optimisation.  In each case the \ndate or dates can be represented by a gene of three bits.  For one spray this is treated as an integer \nrepresentation of the week number relative to \u2018today\u2019, as in the example above.  For two sprays it \nis mapped to a pair of week numbers using the representation shown in Table 1.  Clearly, in both \ncases, there are a few unused bit combinations.  These are treated as infeasible values. \n \nIn the long-term optimisation it is necessary to cover a much greater span of dates, and the \nuser can specify consideration of up to four sprays, so enumerating the combinations as above \nwould be much more complex.  If only one spray is being optimised, the encoding is essentially \nthe same as for the short-term case: a binary integer representing the week as an offset from \n\u2018today\u2019 or the start of the spraying season, whichever is later.  The gene is increased to 4 bits to \ngive it a range of 16 weeks (112 days).  This is slightly shorter than the spraying season (122 \ndays), but a spray programme containing a single spray in the last 10 days is highly unlikely to \nbe effective. \n \nWhen considering more sprays, it would be possible to give each a gene representing its date \nrelative to the starting point, but this would require multiple constraints to enforce the correct \nsequence and spraying intervals.  Parsons (1998) found that an efficient encoding of dates for \noperation sequences was to use genes that represent the intervals between the operations.  That \nis, the date gene for the second spray encodes the number of weeks after the first spray that it \nshould be applied, and so on.  Again, the genes are treated as integers, but an offset of 2 weeks is \nadded to each to enforce the constraint on the minimum interval between sprays.  When there is \nmore than one spray, each date gene is 3 bits, so the range spanned by two sprays is again16 \nweeks (7 + 2 + 7).  If 4 bits were used, as for the single spray, most of the search space would be \ninfeasible, or extend well outside the spraying season.  It is not possible to reduce this further \nwhen there are three or four sprays without excluding some reasonable solutions.  Inevitably, \nchromosomes arise that place the later sprays beyond the end of the spraying season.  Rather than \nrejecting these, the late sprays are simply ignored, so that they become plans with fewer, widely-\n \n 10 \nspaced sprays.  If they result in high margins, these will survive in the population, so the user\u2019s \nsetting is effectively the maximum number of sprays to apply. \n \nThe remainder of the chromosome consists of sets of genes representing the number and \nselection of chemicals in each spray and the corresponding doses.  The user may choose to mix \nup to three chemicals in each spray, so up to 2 bits are required to encode this as a binary integer. \n If the number of chemicals is fixed at 1, this gene is omitted.  Each spray is then represented by \nup to 3 gene pairs for chemical and dose.  The chemical selection is represented by a binary \ninteger, which simply indexes the chemical within the list of those available: either the full \ndatabase or a subset chosen by the user.  The length of the gene depends on the length of the list, \nand will contain unused values if this is not a power of 2.  The dose of each chemical is \nrepresented by 2 bits, which are mapped to \u00bc, \u00bd, \u00be or 1 full dose.  If the user wishes to impose \nconstraints, such as fixing the date of application or the chemical applied, this is easily \naccommodated by removing the corresponding gene. \n \nAs noted above, some chromosomes will not represent valid spray programmes.  In each case \nit would be possible to convert these to valid spray plans, but this would introduce a bias, so \ninstead they are treated as infeasible, that is, not in the permitted solution space of the \noptimisation.  Similarly, plans may be infeasible because they violate practical constraints, such \nas dose-time approvals or approved mixtures, which are built into the pesticides database in the \nsystem.  All infeasible spray plans are given a value of 80% of the margin for an unsprayed crop. \n This ensures that they will not survive in the population, but does not bias the distribution of \nobjective values to the extent that using an extreme value, such as 0, would.  This is significant \nwith some types of fitness function. \n \n2.2.3.  Fitness normalisation \n \nThe objective function - the margin, as defined in Section 2.1- has to be converted to a fitness \nvalue that will directly control the probability of selection of individuals for reproduction.  \nVarious types of linear and nonlinear mapping are possible, and the most appropriate for a given \nproblem depends on the distribution of values of the objective function both in the early stages \nand when close to convergence.   \n \n \n 11 \nFor the short-term optimisation, rank-based fitness scaling was found to work well.  This \napplies a linear transformation to the rank of each individual within the population, so that the \nbest has fitness 1.0 and the worst 0.5.  This imposes a high selection pressure even in the late \nstages of optimisation, because it means that individuals in the middle of the ranking have a \nfitness around 0.75 even if their objective function value is close to the maximum. This can lead \nto premature convergence, but, by selection of suitable population sizes and number of \ngenerations, produced quick and reliable performance. \n \nThe long-term optimisation uses a linear scaling of the objective function values so that the \nbest has fitness 1.0 and the worst 0.5.  Although this appears very similar to the above, it differs \nsignificantly in a population where there is a cluster of members close to the maximum with \nothers scattered at lower values, because all those close to the maximum will have fitness values \nclose to 1.0.  In this case, rank-based selection is biassed towards the better members of the \ncluster, which can cause premature convergence, whereas linear scaling gives them almost equal \nprobabilities of selection. \n \n2.2.4.  Selection \n \nIn each generation, a proportion of the population is selected for reproduction using a \nrandomised procedure (\u2018roulette wheel selection\u2019) in which the probability of an individual being \nselected is proportional to its fitness.  The proportion used is 0.15 for the short-term and 0.8 for \nthe long term.  Partial replacement was found to give better convergence and eliminate infeasible \nplans more rapidly than replacement of the whole population at each generation.  However, the \nimprovement over replacement of the whole population in each generation was marginal in the \nlong-term case, and further reducing the proportion replaced did not improve the results. \n \n2.2.5.  Reproduction \n \nReproduction consists of two operations: crossover and mutation.  Crossover takes two \nindividuals as parents and produces pairs of offspring by selecting one or more points in the \nchromosome at random and exchanging the strings for the two parents around these points.  The \nshort-term algorithm uses one-point crossover, whereas the long-term uses three crossover \npoints. \n \n 12 \n \nMutation randomly changes the value of one or more bits in the string, with an expectation of \n1 bit per chromosome in short-term and 2 in long-term.  Mutation encourages searching \nsubspaces of the problem space that are not spanned by the original population. \n \n2.2.6.  Replacement \n \nAfter reproduction new individuals replace old ones.  Initially this used a rank-based \nreplacement method similar to that employed in GENITOR (Whitley, 1989), in which new \nindividuals are allowed into the population if they have higher fitness than the worst existing \nmember.  This gave very rapid convergence and sometimes resulted in a final population of the \nshort-term optimisation containing only one or two distinct plans, thus failing to meet the users\u2019 \nrequirement for a set of options.  In order to maintain diversity, alternative replacement methods \nin which new individuals only have to compete with sub-populations were used.  This is known \nas tournament replacement and is applied in both versions, with slight differences.   \n \nIn the long-term optimisation, parental replacement is used: the tournament consists only of \nthe new individual and one of the parent chromosomes that generated it.  The parent is replaced \nif the new individual has higher fitness.  However, the algorithm is constructed with a small \nprobability of allowing the inferior of the two individuals to survive. This probability decreases \nas the algorithm proceeds in a process known as annealing.  In the short-term version the \ntournament contains nine other individuals selected to have the most similar chromosomes to the \nnew one.  The member of the tournament with the lowest fitness is removed.  This type of \ntournament is known as crowding replacement, because it tries to prevent the formation of \ncrowds of individuals with very similar genomes.   \n \nIn both cases, the best member of the old generation is always allowed to survive.  This is \nknown as elitism and ensures that the maximum fitness never decreases. \n \n2.3.  Post-processing \n \nThe two versions of the genetic algorithm described above were successful at producing \ndiverse populations of plans, but the upper ranks of the population were often still dominated by \n \n 13 \nplans containing only a few cost-effective products with different timings, doses and mixtures.  \nThe users preferred to see a wider range of products used, so a post processing step was added to \nreduce the repetition of products in the population.  The following rule is applied to the list \ndisplayed to the user, working from the top down: \nA plan is displayed provided that it contains at least one product that has not \nappeared in two previous plans. \n \nThis succeeds in producing a more acceptable list, because there is sufficient diversity in the \npopulation to ensure that plans with more than a few products have survived.  Of course, some \nproducts may still appear frequently, if they do so in combination with a variety of others.  \nThroughout the following section, which is concerned with the performance of the algorithm, the \nresults considered are the full populations produced before application of the post-processing \nstep. \n \n3.  Results \n \n3.1.  Short-term optimisation \n \nThe initial trials were conducted with the sprays restricted to single components.  This \nallowed comparisons to be made with the results of exhaustive searches, which became \nimpractical when complexity of the problem was increased.  Several scenarios were investigated, \nincluding early spring and late spring decisions.  In the early spring scenario, a fixed spray in the \nlate spring was sometimes included.  Similarly, in the late spring scenario an early fixed spray \nwas sometimes included.   \n \nAgronomically, the three main spray timings are often referred to as T1, T2 and T3.  The \nearliest, T1, is around growth stage 31-33 (first node detectable to third node detectable, or \napproximately leaf 3 emergence), and is significant in the control of stem-base diseases, such as \neyespot, as well as foliar diseases.  The next, T2, is around growth stage 39 (flag leaf emergence) \nand is very important because the flag leaf is normally the largest contributor to yield.  Finally, \nT3, comes around growth stage 59 (inflorescence emergence to anthesis) and may contribute to \npreserving the photosynthetic area and control of ear diseases.  The T2 spray is rarely omitted; a \n \n 14 \ntwo-spray programme will normally contain T1 and T2 or T2 and T3 depending on \ncircumstances. \n \nThese tests gave consistently good results with the true optimum (found by exhaustive search) \nbeing achieved in almost every case, together with a collection of near-optimal solutions.  Even \nwhere the optimum was not found, the difference in margin was much smaller than that arising \nfrom the natural variability in the system.  Figure 1 shows a typical result for an early season \nscenario (around T1).  The margins for the 24 best one-spray and two-spray plans are ranked.  In \nthis case, both sets show good diversity and the two-spray plans, corresponding to T1 and T2, are \nclearly superior.  In this scenario the levels of disease arising from the combination of variety \nand weather were too high to be controlled effectively by a single spray. \n \nFigure 2 compares the results for one spray with an exhaustive search.  It can be seen that the \ngenetic algorithm has found 6 of the top 10 solutions, which is typical of its performance.  Below \nthis there is a diverse population covering the range of the best 100 plans from the exhaustive \nsearch.  The algorithm thus meets both the requirements placed on it: optimisation and diversity. \n \n3.2.  Long-term optimisation \n \nOwing to the size of the search space used in the long-term optimisation, it was not practical \nto test the solutions by exhaustive evaluation, so a different procedure was used to test the \nperformance of the algorithm.  The stochastic nature of genetic algorithms means that the final \nresult may be sensitive to the sequence of numbers generated by the pseudo-random number \ngenerator (RNG), which can be changed by the value chosen to seed it.  If the genetic algorithm \nis robust, there should be little variation in the best member of the final population, but a poor \nalgorithm will result in wide variation.  The reduction in variability as a measure of performance \nwas used as the basis for testing.   \n \nEach configuration of the genetic algorithm was run with five randomly selected seed values \nand the results were recorded.  The configurations could then be compared in terms of the \nmaximum margin obtained for all five runs and the range of maxima.  A good configuration \nwould have a large maximum and a small range.  Given the uncertainties present in the field, a \nrange of a few pounds is not significant, but over \u00a310 is a cause for concern.  The results that \n \n 15 \nfollow represent a scenario early in the spraying season, about T1, at which point the short-term \noptimisation can also be run for comparison.  The tests were conducted with 5 different wheat \nvarieties with different levels of resistance to the main foliar diseases, particularly yellow rust \nand Septoria tritici.  Varieties with high resistance are likely to have less serious infections and \nso be less responsive to spraying.  The varieties used were Brigadier and Riband (low \nresistance), Consort and Rialto (moderate resistance) and Claire (high resistance). \n \nFor the initial testing, to allow a closer comparison with the short-term optimisation, the \nlength of the date gene was set to 2 bits for each spray in a multiple-spray programme and to 3 \nbits in a one-spray programme. The main settings that controlled the genetic algorithm, such as \nthe selection, crossover and replacement methods were also the same as the ones that were \nknown to work well in the short-term version.  This is referred to in the tables as the \u2018original \nconfiguration\u2019.  It was found that the short-term optimisation (Table 2) was actually producing \nhigher mean values than the long-term (Table 3).  This undesirable result was contrary to \nexpectations, because the search space for the short-term version is a subspace of that for long-\nterm, so the latter should be able to find every solution found by the former.  The long-term \nalgorithm also showed a very large range, especially on the low-resistance varieties.  Both of \nthese were indicative of defects in the configuration of the algorithm. \n \nSystematic testing of options within the genetic algorithm resulted in the configuration \ndescribed in Section 2.2.  This produced substantial improvements: the maximum and average \nmargins now always exceeded those found by the short-term algorithm, as they should.   The \nrange of maxima between runs had also been reduced dramatically, showing that the \nperformance was much more consistent (Table 4).  When the date genes were restored to the \nlength described in Section 2.2.2 (4 bits for single sprays and 3 bits per spray for multiple \nsprays), the margins improved substantially, as shown in Table 5, reflecting the fact that the \nsearch space included the full spraying season.  The range of variation between runs remained \nsmall, as required.  An inevitable consequence of these changes is that the long-term \noptimisation is slower than the short-term, by about a factor of 10.  This is acceptable, given that \nit will be used occasionally for planning, whereas short-term optimisation is intended for tactical \nmanagement decisions within the season. \n \n \n 16 \nOver the full range of 30 scenarios considered in this way, the changes described above \nimproved the maximum margin by over 10% in 11 of them, and over 20% in five.  These results \nillustrate the importance for effective operation of a genetic algorithm of tuning the settings \ncarefully and choosing the right encoding.  In this case, a partially redundant encoding (which \ngenerates some sprays beyond the end of the season) is preferable to a more compact one that \nfails to span the problem space. \n \n3.  Discussion \n \nAs the results show, the genetic algorithm used is successful in giving solutions to this \npractical problem.  For short term optimisation with single-component sprays, for which an \nobjective comparison is available, the performance is very good and the diversity of choices in \nthe final population meets the user requirements. \n \nA genetic algorithm is well-suited to this problem, because of its ability to handle different \ntypes of variables and produce a set of solutions.  For use in real-time, it also has the desirable \n\u2018anytime\u2019 property: the user can observe the objective function value and interrupt when the \nresult is felt to be good enough for practical purposes. \n \nThe plant-disease system is subject to large uncertainties: those intrinsic in biological systems \nand the effects of future weather.  These mean that absolute precision in locating the optimum is \nless important than locating alternatives that can be compared for their robustness across a \nseveral scenarios for future events.  The DESSAC system provides multiple weather sets for each \nsite, allowing such assessments to be made.  At present this has to be done manually, by \nselecting each set in turn, but this will be automated in future. \n \n3.1.  Field trials \n \nDuring development the system underwent two years of replicated plot trials on eight sites \nacross the UK.  In the first year, it was found to give a satisfactory selection of chemicals on \nmost sites, but tended to spray slightly late on many of them, which was not sufficiently \nrisk-averse where disease pressures were high.  This was due to the performance of the \nunderlying process model in its first year of trials.  Subsequent revisions have improved \n \n 17 \nperformance in more recent trials.  In the 2002 harvest season, trials intended to represent farm \npractice were conducted at six sites in the UK and Ireland, mainly on split fields, including two \nat one site (Paveley, N.  personal communication).  In comparison with the reference fields \nmanaged according to good agronomic practice, WDM achieved a higher yield on all fields \n(mean difference 0.5 t\/ha) and a higher margin on five of the seven (mean difference \u00a37\/ha).  \nSimultaneous trials in Denmark also gave good results, but are omitted from the means above \nbecause the protocols were different. \n \n3.2.  User trials \n \nPotential users of the system have been involved throughout its design and development to \nensure that it meets their needs.  Early designs were based on the results of extensive user \ninterviews, and these were then altered in response to user comment and tested again.  This was \nrepeated throughout the project.  In parallel with the field trials there have been two years of \nusability trials of prototypes, involving over 60 farmers and consultants in the second season.  In \ntotal, over 200 individuals have taken part in the evaluation of the software. \n \nUsers have sometimes been surprised by the suggestions provided by the optimisation, or \nperceived a preference for certain chemicals.  However, the suggestions were rarely bettered by \nmanual adjustments to the spray programme.  This confirmed that the optimisation was \naccurately reflecting the process model and showed a difference between intuition and the results \nof the model.  The one feature of the genetic algorithm itself that caused comment was the fact \nthat the list of solutions could differ on successive identical runs due to its stochastic nature.  To \nprevent this, the random number generator is now reseeded with a fixed value at the start of each \noptimisation. \n \nConclusions \n \nThe use of a genetic algorithm in a decision support system for the selection of fungicide \nspray plans in both the long-term strategic planning and short-term tactical revision modes of \noperation meets the requirement to produce a list of optimal and near-optimal programmes from \nwhich the user can select their preferred option.  The performance of the algorithm has been \ndemonstrated in systematic testing and the system has performed successfully in field trials. \n \n 18 \n \nIn order to test the algorithm for optimisation problems that were too large for exhaustive \nsearch methods to provide a benchmark, a method based on using the variation between \nrandomly seeded runs as a measure of robustness was developed. \n \nIt was a found that substantial changes in the configuration of the genetic algorithm were \nrequired to achieve good, robust performance in the long-term and short-term modes.  This \nillustrates the need to tailor the algorithm to the problem and to test the options carefully. \n \n \nAcknowledgements \n \nThe DESSAC project was supported by the Ministry of Agriculture Fisheries and Food (now \nDefra) through a number of programmes including LINK \u2018Technologies for Sustainable \nSystems\u2019 with joint funding from the Home-Grown Cereals Authority, the Biotechnology and \nBiological Sciences Research Council and Farmplan Computer Systems. \n \nThe genetic algorithm software used in this project is the SUGAL package written by Dr.  \nAndrew Hunter at the University of Sunderland, England. \n \nReferences \n \nBrooks D H (1998).  Decision support system for arable crops (DESSAC): an integrated \napproach to decision support.  In: Pests and Disease, Proceedings of an International Conference, \nBrighton, UK, 16-19 November, 1998.  BCPC, Bracknell, Volume 1, 239-246 \nDavis L (editor) (1991).  Handbook of Genetic Algorithms.  Van Nostrand Reinhold, New York \nGoldberg D E (1989).  Genetic Algorithms in Search, Optimization and Machine Learning.  \nAddison-Wesley, Reading, Massachusetts \nHolland J H (1992).  Adaptation in Natural and Artificial Systems.  MIT Press, Cambridge, \nMassachusetts \nMilne A E; Paveley N D; Audsley E; Livermore  P (2003).  A wheat canopy model for use in \ndisease management decision support systems.  Annals of Applied Biology, 143, 265-274 \n \n 19 \nMurali N S; Secher B J M; Rydahl P; Andreasen F M (1999).  Application of information \ntechnology in plant protection in Denmark: from vision to reality.  Computers and Electronics In \nAgriculture, 22, 109-115 \nParsons D J (1998).  Optimising silage harvesting plans in a grass and grazing simulation using \nthe revised simplex method and a genetic algorithm.  Agricultural Systems, 56 (1), 29-44 \nPaveley N D; Lockley D; Vaughan TB; Thomas J; Schmidt K (2000).  Predicting effective \nfungicide doses through observation of leaf emergence.  Plant Pathology, 49 (6), 748-766  \nRijsdijk F H (1983).  The EPIPRE system.  In: Decision Making in the Practice of Crop \nProtection.  (Austin R B ed).  Monograph 25,  BCPC, Bracknell, 65-76 \nThomas M  R; Garthwaite D  G; Banham A  R  (1997).  Pesticide Usage Survey Report 141: \nArable crops in Great Britain 1996.  Defra Publications, London \nWhitley L D  (1989); The GENITOR algorithm and selective pressure: why rank-based \nallocation of reproductive trials is best.  In: Proceedings of the Third International Conference on \nGenetic Algorithms (ICGA).  (Schaffer J D ed).  Morgan Kauffman, San Francisco, 116-121 \nZadoks J C (1981).  EPIPRE: a disease and pest management system for winter wheat \ndeveloped in the Netherlands.  EPPO Bulletin 11, 365-369 \n \n 20 \nTable 1.  Representation of date pairs as binary genes in short-term optimisation \n \nDate pair, \nweek numbers \n \nRepresentation \n0 2 0 \n 3 1 \n1 3 10 \n1 4 11 \n0 4 100 \n2 4 101 \n \n \n \nTable 2.  Results from 5 runs of short-term optimisation with 2 sprays and mixtures up \nto 3 products \n \n Margin, \u00a3 \nVariety Mean Min Max Range \nBrigadier 421 418 424 6 \nRiband 425 424 426 2 \nConsort 431 430 432 2 \nRialto 436 435 438 3 \nClaire 468 465 470 5 \n \n \n 21 \nTable 3.  Results from 5 runs of long-term optimisation with 2 sprays and mixtures up \nto 3 products using original settings and 2 bit date encoding \n \n Margin, \u00a3 Difference from \nVariety Mean Min Max Range short-term mean \nBrigadier 411 399 418 19 -10 \nRiband 408 398 417 19 -7 \nConsort 420 415 422 7 -11 \nRialto 429 423 437 14 -7 \nClaire 462 459 467 8 -6 \n \n \n \nTable 4.  Results from 5 runs of long-term optimisation with 2 sprays and mixtures up \nto 3 products using revised settings and 2 bit date encoding \n \n Margin, \u00a3 Difference from Difference from \nVariety Mean Min Max Range short-term mean mean in Table 3 \nBrigadier 424 423 424 1 3 13 \nRiband 427 423 429 6 2 19 \nConsort 433 430 435 5 2 13 \nRialto 440 438 441 3 4 11 \nClaire 468 68 468 0 0 6 \n \n 22 \nTable 5.  Results from 5 runs of long-term optimisation with 2 sprays and mixtures up \nto 3 products using revised settings and 3 bit date encoding \n \n Margin, \u00a3 Difference from \nVariety Mean Min Max Range mean in Table 4 \nBrigadier 514 512 516 4 90 \nRiband 509 508 511 3 82 \nConsort 518 516 519 3 85 \nRialto 522 519 524 5 82 \nClaire 536 536 537 1 68 \n \n \n 23 \n \nFig 1.  Comparison of best one-spray (+) and two-spray (x) programs in the results of the \ngenetic algorithm for an early season, short-term optimisation \n \n0 5 10 15 20 25\n300\n350\n400\n450\nM\nar\ngi\nn \nov\ner\n fu\nng\nic\nid\nes\n, \u00a3\n\/h\na\nRank\n \n \n 24 \n \n \nFig 2.  Comparison of best one-spray programs from exhaustive search (+) and genetic \nalgorithm (x) for an early season, short-term optimisation.  The horizontal line passes through \nthe 11th best plan from the exhaustive search; six of the genetic algorithm solutions lie above this \nline. \n0 10 20 30 40 50 60 70 80 90 100\n300\n350\n400\n450\nM\nar\ngi\nn \nov\ner\n fu\nng\nic\nid\nes\n, \u00a3\n\/h\na\nRank\n \n"}