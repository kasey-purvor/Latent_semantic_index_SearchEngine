{"doi":"10.1007\/s005000000050","coreId":"54029","oai":"oai:eprints.lincoln.ac.uk:2759","identifiers":["oai:eprints.lincoln.ac.uk:2759","10.1007\/s005000000050"],"title":"Genetic algorithm design of neural network and fuzzy logic controllers","authors":["Hunter, Andrew","Chiu, K. S."],"enrichments":{"references":[{"id":878754,"title":"A New Interpretation of Schema Notation that Overturns the Binary Encoding Constraint,&quot;","authors":[],"date":"1989","doi":null,"raw":"Antonisse H. (1989) &quot;A New Interpretation of Schema Notation that Overturns the Binary Encoding Constraint,&quot; Proceedings of the Third International Conference on Genetic Algorithms, 86-91, San Mateo, CA: Morgan Kaufmann","cites":null},{"id":879214,"title":"Adaptive Optimization of Intelligent Flow Control,","authors":[],"date":"1999","doi":null,"raw":"Chiu K. (1999) Adaptive Optimization of Intelligent Flow Control, Ph.D. Thesis, School of Computing, Engineering and Technology, University of Sunderland","cites":null},{"id":880532,"title":"Crossing Over Genetic Algorithms: The Sugal Generalised GA,&quot;","authors":[],"date":"1998","doi":null,"raw":"Hunter A. (1998) &quot;Crossing Over Genetic Algorithms: The Sugal Generalised GA,&quot; Journal of Heuristics, 4,2:179-192","cites":null},{"id":879404,"title":"Genetic Algorithms and Simulated Annealing,","authors":[],"date":"1987","doi":"10.1017\/s0263574700004215","raw":"Davis L. ed. (1987) Genetic Algorithms and Simulated Annealing, San Mateo, CA: Morgan Kaufmann","cites":null},{"id":878993,"title":"Genetic Design of Real-Time Fuzzy Logic Controllers,&quot;","authors":[],"date":"1997","doi":null,"raw":"Chiu K. and Hunter A. (1997) &quot;Genetic Design of Real-Time Fuzzy Logic Controllers,&quot; International conference EXPERSYS-97, Sunderland, U.K, 245-250","cites":null},{"id":880238,"title":"Genetic Design of Real-Time Neural Network Controllers,&quot;","authors":[],"date":"1997","doi":"10.1007\/bf01670149","raw":"Hunter A., Hare G., and Brown K. (1997) &quot;Genetic Design of Real-Time Neural Network Controllers,&quot; Neural Computing & Applications, 6:12-18","cites":null},{"id":880775,"title":"Genetic Programming: On the Programming of Computers by means of Natural Selection,","authors":[],"date":"1992","doi":"10.1007\/BF00175355","raw":"Koza J. (1992) Genetic Programming: On the Programming of Computers by means of Natural Selection, Cambridge, MA: MIT Press","cites":null},{"id":18451890,"title":"Numerical recipes in C: the art of scientific computing, 2 nd ed,","authors":[],"date":"1992","doi":"10.1016\/s0003-2670(00)82860-3","raw":"Press W., Teukolsky, S., Vetterling, W. and Flannery, B. (1992) Numerical recipes in C: the art of scientific computing, 2 nd ed, Cambridge University Press","cites":null},{"id":881291,"title":"Numerical recipes in C: the art of scientific computing, 2nd ed,","authors":[],"date":"1992","doi":"10.1137\/1036047","raw":null,"cites":null},{"id":879604,"title":"PVM: Parallel Virtual Machine,","authors":[],"date":"1994","doi":"10.1007\/3540617795_1","raw":"Geist A. etc. (1994) PVM: Parallel Virtual Machine, Cambridge, MA: The MIT Press","cites":null},{"id":881048,"title":"Real Time Control of Urban Drainage Systems,","authors":[],"date":"1987","doi":"10.1007\/978-3-0348-0436-3_8","raw":"Petersen S. (1987) Real Time Control of Urban Drainage Systems, M.sc. Thesis, Dept. of Environmental Engineering, Technical University of Denmark, August 1987, ISBN 87-89220-04-8","cites":null},{"id":879996,"title":"Real-Coded Genetic Algorithms, Virtual Alphabets, and Blocking,&quot;","authors":[],"date":"1990","doi":null,"raw":"Goldberg D. (1990) &quot;Real-Coded Genetic Algorithms, Virtual Alphabets, and Blocking,&quot; University of Illinois at Urbana-Champaign, Technical Report No. 90001","cites":null},{"id":879714,"title":"Tabu Search - Part I,&quot;","authors":[],"date":"1989","doi":"10.1287\/ijoc.1.3.190","raw":"Glover F. (1989) &quot;Tabu Search - Part I,&quot; ORSA Journal on Computing, 1,3:190-206","cites":null},{"id":879916,"title":"Tabu Search,","authors":[],"date":"1997","doi":"10.1007\/978-1-4615-6089-0","raw":"Glover F. and Laguna M. (1997) Tabu Search, Kluwer Academic Press","cites":null},{"id":881526,"title":"The Feasibility of Real Time Control of Combined Sewer Overflows,&quot; Civil Engineering Practice,","authors":[],"date":"1992","doi":null,"raw":"Schilling W. (1992) &quot;The Feasibility of Real Time Control of Combined Sewer Overflows,&quot; Civil Engineering Practice, 7,2:17-26","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2000-09","abstract":"Genetic algorithm design of neural network and fuzzy logic controller","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/54029.pdf","fullTextIdentifier":"http:\/\/eprints.lincoln.ac.uk\/2759\/1\/Hunter2000SoftComputingGeneticAlgorithmDesignOfNeuralNetwork.pdf","pdfHashValue":"d0ae1700eb166694174a21d1bf5543dc5253cfda","publisher":"Springer","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lincoln.ac.uk:2759<\/identifier><datestamp>\n      2013-03-13T08:40:40Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D6A6163735F47:6A6163735F47343030<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.lincoln.ac.uk\/2759\/<\/dc:relation><dc:title>\n        Genetic algorithm design of neural network and fuzzy logic controllers<\/dc:title><dc:creator>\n        Hunter, Andrew<\/dc:creator><dc:creator>\n        Chiu, K. S.<\/dc:creator><dc:subject>\n        G400 Computer Science<\/dc:subject><dc:description>\n        Genetic algorithm design of neural network and fuzzy logic controllers<\/dc:description><dc:publisher>\n        Springer<\/dc:publisher><dc:date>\n        2000-09<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/2759\/1\/Hunter2000SoftComputingGeneticAlgorithmDesignOfNeuralNetwork.pdf<\/dc:identifier><dc:identifier>\n          Hunter, Andrew and Chiu, K. S.  (2000) Genetic algorithm design of neural network and fuzzy logic controllers.  Soft computing, 4  (3).   pp. 186-192.  ISSN 1432-7643  <\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1007\/s005000000050<\/dc:relation><dc:relation>\n        10.1007\/s005000000050<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.lincoln.ac.uk\/2759\/","http:\/\/dx.doi.org\/10.1007\/s005000000050","10.1007\/s005000000050"],"year":2000,"topics":["G400 Computer Science"],"subject":["Article","PeerReviewed"],"fullText":"1 \nGenetic Algorithm Design of Neural Network \nand Fuzzy Logic Controllers \nKUAN-SHIU CHIU \nDept. of Information Management, Aletheia University, Taiwan. \nANDREW HUNTER \nSchool of Computing and Engineering Technology \nUniversity of Sunderland, Sunderland SR6 0DD, England, U.K.(\u2709)  \nE-mail: Andrew.Hunter@sunderland.ac.uk, cs0ksc@isis.sunderland.ac.uk \nPhone: (0191) 515 2778 \nFax: (0191) 515 2781 \nAbstract \nThis paper discusses the design of neural network and fuzzy logic controllers using genetic \nalgorithms, for real-time control of flows in sewerage networks. The soft controllers operate in a \ncritical control range, with a simple set-point strategy governing \"easy\" cases. The genetic \nalgorithm designs controllers and set-points by repeated application of a simulator. A comparison \nbetween neural network, fuzzy logic and benchmark controller performance is presented. Global \nand local control strategies are compared. Methods to reduce execution time of the genetic \nalgorithm, including the use of a Tabu algorithm for training data selection, are also discussed. The \nresults indicate that local control is superior to global control, and that the genetic algorithm design \nof soft controllers is feasible even for complex flow systems of a realistic scale. Neural network \nand fuzzy logic controllers have comparable performance, although neural networks can be \nsuccessfully optimised more consistently. \nGenetic Algorithms Real-Time Control Fuzzy Logic Control Neural Network \nControl \n1. Introduction \nCombined sewerage systems are used in many cities and countries. The same \npipes carry foul and storm flows in the system. Most of the time they function \nnormally. During heavy rainfall inflow may exceed capacity, leading to overflows \nwhich are environmentally damaging, and expensive to the company. Overflows \ncan be largely or entirely eliminated by construction of new storage tanks and \nsewers; however, such schemes are expensive and disruptive, as the systems are \n2 \ndistributed across wide geographical areas, particularly in major conurbations. \nSince inflows are seldom constant across the entire system, the incidence of \noverflow can in principle be reduced by real-time control (RTC) strategies, which \nadjust the flow among parts of the system under different loading. In practice, this \nmay be achieved by the installation of actuated penstocks that can be opened or \nclosed to control the flow past a certain point, together with sensor systems and \ncontrollers that operate the penstocks based upon measured depths at related \npoints [11]. \n \nStandard optimization techniques, such as linear and dynamic programming, have \nbeen applied to this type of problem, but without great success other than for very \nsimple networks [15]. Linear programming can be applied in simplified problems, \nbut alternative solutions are difficult to evaluate. Dynamic programming could be \nsuccessful if all possible configurations are tested, which requires sufficient \ncomputing resources. For a complex system, it is unrealistic. \n \nWe have previously shown that genetic design of neural networks [11] and fuzzy \nlogic controllers [2] is a feasible approach. However, there are key issues that \nthese earlier papers did not address: the extremely heavy computational \nrequirements, and the complexity issues raised by realistically scaled problems \n(the \"curse of dimensionality\" and  \"combinatorial explosion\"). This paper \nintroduces techniques to improve controller performance, to limit controller \ncomplexity and to reduce the training time.  \n \nIn section 2 standard approaches to control of flow systems are briefly introduced. \nSection 3 describes how the soft controllers are implemented, and how they are \noptimised using a genetic algorithm. Section 4 discusses a novel Tabu-based \nalgorithm that selects a subset of the training data for the genetic algorithm, \nmaintaining selective pressure with greatly reduced execution time. Section 5 \npresents experimental results, and section 6 concludes the paper. \n2. Standard Approaches to Flow Control \nThe most common approaches to flow control are based upon the On-Off control \nstrategy [13]. The output of the controller is a binary signal, interpreted as either \n3 \nOn or Off (i.e. the penstock is either fully open or fully closed). The controller \noutput signal is changed if the detected fluid level crosses a specified depth (the \nset point). The set-points are usually chosen heuristically by an expert, although it \nis also possible to deploy optimisation algorithms to select them. \n \nOn-Off control performs very adequately if a good set point is selected, but not \noptimally. One reason for the restricted performance is that the penstock may be \nopened and closed repeatedly during heavy rainfall. While closed, no flow at all is \npermitted, whereas in fact there is almost certainly some (reduced) capacity in the \nlower tanks. \n \nIn practice, Two-point or Three-point control is usually applied instead of On-Off \ncontrol. Two-point control is the simplest and most frequently applied method of \ndiscrete control. An example for Two-point control is a pump switch to fill a \nreservoir. The pump switches On at a low level and Off at a high level. Three-\npoint controllers are typically used for such regulators as sluice gates and weirs. \nThe output signal changes according to the three input points: minimum, middle, \nand maximum [17]. Since these approaches are similar, we use On-Off controllers \nfor benchmarking. \n3. Soft Controllers \nA wide range of soft computing techniques may be used to implement controllers, \nincluding neural networks [11], fuzzy logic [2], genetic programming [14], and \nclassifier systems [10]. In all cases, the controller's output signal gives the \npenstock setting, and the input signals are measurements of fluid depth in \nappropriate tanks. In global control, a single controller takes inputs from \nthroughout the system, and has outputs to all penstocks. In a local control system, \ninputs are from nearby tanks (typically those above and below the controller), and \nthere is a single output. In either case, processing of continuous variables is \nrequired to represent the inputs and outputs, making neural networks and fuzzy \nlogic systems a sensible choice. Both of them are well suited to handle continuous \nvariables. \n \n4 \nTo optimise the controllers, a learning algorithm is required. Reinforcement \nlearning methods, such as genetic algorithms, are feasible solutions (by \nreinforcement learning we mean search algorithms that work by generating \nproposed solutions and testing these to obtain a \"fitness\" or \"error\" value, that \nconstitutes the sole feedback on performance to the optimisation algorithm). \nThe genetic algorithm generates candidate controllers. To evaluate the fitness, \neach controller is embedded into a flow system simulator, which is executed one \nhundred times under different simulated weather conditions. The inflow \nsequences were generated using the Hydroworks simulation package [18], and are \nconsistent with real weather patterns. Each simulation has about 500 time-steps.  \nA count of the number of simulations that overflow provides a fitness value which \nis passed back to the genetic algorithm. Possible alternative optimisation \napproaches include Simplex [16] and Simulated Annealing [4], but these are not \nconsidered further here. \nIn recent papers the authors have shown how genetic algorithms can be used to \noptimise the weights and biases of neural network controllers in very simple \nsystems [11], and the membership functions and rule base of fuzzy logic \ncontrollers [2]. The experimental system architecture is shown in figure 1. \n \n \n \n \n \n \n \n \nFigure 1 The system configuration \n \nGenetic Algorithms Flow Simulator (RTC)\n01010101 \n01010101 \n01010101 \n01010101 \n01010101\n01010101\n01010101\n01010101 \nRTC \nParameters \nNo. of  Spills\n5 \n3.1 Hybrid Crisp\/Soft Controllers \nOn-Off control achieves reasonably good results, as the strategy of allowing flows \nthrough the system as rapidly as possible when it is not heavily loaded is basically \nsound. Recognising this, we can improve the performance of the soft controllers \nby deploying a simple set point rule (a crisp controller) under light or medium \nloading, and only switching on the soft controller during periods of heavy loading. \nWe therefore include a set point in our systems; when the fluid level is below the \nset point, the penstock is fully opened. When the fluid level is above the set point, \nthe soft controller is used to determine how far open the penstock should be held. \nThe soft controller is able to base this decision on the exact level of loading above \nand below the penstock, and (depending on the type of controller) on more global \ninformation. \n3.2 Computational Complexity \nThere are two major issues in genetic design of soft controllers: the extremely \nhigh computational cost, and the computational complexity (the so-called \n\"combinatorial explosion\" problem). \n \nIn our experiments, 100 different weather simulations are used, each containing \nabout 500 time-steps, so that the system is optimised to respond to a \nrepresentative range of possible conditions. During evaluation of a controller, the \nsimulator is executed (solving flow equations and running the soft controllers to \noperate the simulated penstocks) until an overflow occurs, or the simulation \ncompletes without overflow. The evaluation of a single chromosome therefore \nrequires up to 50,000 executions of each controller. A typical genetic algorithm \nfor a reasonably simple problem might involve a population of one hundred \nchromosomes run for one hundred generations, requiring a total of 10,000 \nchromosome evaluations, implying 500,000,000 controller executions in total. \n \nWith these computational requirements, it takes several hours to evolve the \ncontrollers on a Sun SPARCstation 5 workstation even for a simple two tank \nsystem; a thirty one tank system takes several days. Fortunately, this issue only \napplies during the initial evolution of the controllers. Once evolved, they can be \n6 \nembedded in the system and executed in real time. However, it is clearly still \ndesirable to reduce the time spent in evolving the solution. \n \nProblem complexity is a key issue in scaling up to real-world size problems. \nConsider first the case of fuzzy logic controllers. Fuzzy logic controllers are \nusually applied to problems with small number of inputs. An increase in the \nnumber of input variables causes an exponential growth in the number of rules \ngenerated. For example, in a thirty one tank system using a single global network \ncontroller, there are thirty input variables, and the maximum number of generated \nrules is 2e14, assuming that 3 fuzzy sets are used for each input variable. We \ninvestigated the use of the Combs method to address this issue, but this proved \nlargely unsuccessful; a more detailed discussion may be found in [3]. The \"curse \nof dimensionality\" issue makes fuzzy logic global control impossible for large \nsewerage networks. Global neural network controllers also have problems, if not \non quite the same scale as fuzzy logic controllers. \n \nLocal control avoids the complexity issue, at the price at sacrificing the possibility \nof optimal performance. Each controller takes only local inputs. The input \nvariables are selected so that the same controller can be deployed anywhere in the \nsystem (e.g. depths are expressed as a proportion of the tank depth, rather than \nexplicitly). The generic local controller is then embedded throughout the system, \nand \"globally\" optimised, in the sense that the genetic algorithm selects for \ncontrollers which when deployed en masse have desirable global dynamics. \n \nThe controllers, whether neural networks or fuzzy logic, are combined with \nsimple On-Off control. Each penstock is partially controlled using a set point on \nthe tank depth immediately below the penstock. The set point is also selected by \nthe genetic algorithm. If the fluid level does not exceed the set point, the penstock \nis kept open. Only when the fluid level is above the set point is the soft controller \ndeployed, thus allowing it to concentrate on modelling the critical part of the \nresponse curve. \n \n7 \nThe soft controller takes two input variables - the fluid depths in the tanks above \nand below. The level below is measured from the set point, rather than from the \nbottom of the tank. \n3.3 Controller Representation \nFloating-point chromosomes are used to encode both neural networks and fuzzy \nlogic controllers. There has been some dispute in the literature as to whether such \na high-cardinality representation is appropriate; Goldberg argues [8] that a binary \nencoding maximises the number of schemata per bit, whereas Antonisse [1] \ninterprets the schema definition differently, and concludes that the higher \ncardinality representation has more schemata. In a later paper, Goldberg [9] also \nrecognises that high cardinality representations are sometimes superior. \n \nFor neural networks (standard feedforward Multilayer Perceptron networks are \nused) the number of hidden units was fixed in preliminary experiments. Two \nhidden units are used for local controllers; the number varies in global controllers \naccording to system complexity. The chromosome contains all the weights and \nbiases of the network (plus an extra value for the set point). For the fuzzy logic \ncontrollers, the Mamdani approach with Min-Max-COG is used. Each \ninput\/output variable has three triangular fuzzy sets, requiring two floating-point \nnumbers for each variable. The two floating-point numbers are used for the base \nlengths of the fuzzy sets, one for the first\/third set and the other for the second. \nThe centres of the fuzzy sets are fixed. This keeps the chromosome representation \nas simple as possible. A position dependent encoding is implemented to construct \nthe fuzzy rule base, where every position corresponds to a rule. The value of an \nallele represents the output fuzzy set of the rule, and its locus the combination of \ninput fuzzy sets. Further details on the encoding of the fuzzy logic controllers are \ngiven in [3]. \n4. Selection of Data using Tabu Search \nThe Tabu Search, a modified hill-climbing algorithm, was introduced by Glover \n[6] [7]. The algorithm uses a flexible memory structure, the Tabu list, to prevent \nthe search from becoming trapped at locally optimal solutions. Tabu restrictions \nand aspiration criteria are used to drive the search into new regions. Tabu \n8 \nrestrictions discourage the reversal (or sometimes repetition) of past moves, \nwhereas aspiration criteria allow moves that would normally be disallowed by \nTabu status, if there are special circumstances that imply the status should be \noverridden. \n \nWe use a Tabu-like algorithm to select a subset of the training data (weather \nsimulations) for use on each generation. Only a subset of the data has \ndiscriminatory value at each generation (specifically, only a simulation that causes \nsome members of the population of controllers to overflow, and some not to, has \ndiscriminatory value). The set of discriminatory data changes over time - \nsimulations that are easy to control without flooding can be discarded as the \ngenetic algorithm converges, and simulations that initially caused flooding in the \nentire population can be usefully introduced later. Using such a subset reduces the \nexecution time on each generation, while maintaining selective pressure. \n \nIn the first generation, the entire set of 100 inflow sequences is used as the \ntraining data. Each controller is tested using the 100 sequences. The number of \ntimes that each causes an overflow is counted. After training, each sequence has \nan overflow count between 0 and 100. An overflow count of 0 means that the \nsequence has no discriminatory value, since all controllers passed the test; these \nsequences are discarded. On the other hand, an overflow count of 100 implies that \nit is extremely difficult to handle the sequence. No controllers passed the test at \nthe first generation, and possibly no controllers can pass throughout the entire \noptimisation procedure. Such sequences are put in the Tabu list for 1-15 tenures \n(the number chosen randomly). \n \nIn subsequent generations, 10 sequences are chosen. Sequences with a spill count \nbelow 20 are considered as unchallenging, and are placed in the discard list. The \nrest of the sequences are treated as candidates for selection in the next generation. \n \nA difficulty can arise if more than ninety sequences are put into the Tabu list, so \nthat not enough are available for controller evaluation. In this case, another Tabu \nconcept, the aspiration criteria, is brought into action. Sequences are randomly \nreselected from the discard list to form a full set of training data. \n9 \n \nExtensive experimental results are reported in [3], but have been omitted from this \npaper for brevity. In summary, they show that the algorithm is just as effective as \nusing the full set of data for training on each generation, but with a speed-up \nfactor of nine. \n5. Experimental Results \nExperiments were conducted on a network of Sun SPARCstation 5 machines. The \nsimulator is custom-written in the C programming language, as are the neural \nnetwork and fuzzy logic controllers, whereas the inflow sequences were generated \nwith a commercial simulation package, HydroWorks. The genetic algorithm is \nprovided by SUGAL, The SUnderland Genetic Algorithms Library [12]. The \nsimulator is capable of parallel execution using a Parallel Virtual Machine (PVM) \nenvironment [5]; however, as for the purposes of this paper a large number of \nsimulations needed to be run, concurrent execution was not used in this case. \n \nExperiments were conducted using four systems of varying complexity, with two, \nthree, ten and thirty one interconnected tanks respectively. The two tank system is \nthe simplest possible system, yet real-time control is still demonstrably superior to \nsimpler techniques. The three tank system is the simplest system that requires \nbalancing of conflicting requirements. The ten tank system is sufficiently large to \nillustrate the contrasting performance of local and global control strategies, and \nthe thirty one tank system is of comparable complexity with some real world flow \nsystems. We use a single source file for each weather simulation. In order to \nsimulate a weather pattern moving across a geographical area and increasing in \nintensity, a delay and scaling factor is used for the inflow into the up-stream \ntanks; see [3] for more details. \n \nThe experiments with soft controllers were conducted five times, and the bar \ncharts show the maximum and minimum performance across the five \nexperiments. \n10 \n5.1 Two Tank Experiments \nThe first group of experiments uses a minimal two tank system (see figure 2). \nThis system has two interconnected tanks, with an inflow to the upper tank and an \noutflow from the lower. A penstock is located on the jointing pipe. A spill is \ndeemed to occur if the fluid level in either tank passes the top. The soft controllers \nare compared with several benchmarks, discussed further below. We also report \nresults for soft controllers that act throughout the entire control range, and hybrid \ncrisp\/soft controllers that combine a set-point with a soft controller for the critical \nrange. \n \n \n \n \n \n \n \n \nFigure 2 A two tank system \n \n The Closed and Open benchmarks represent the situations where the penstock is \neither kept fully open or fully closed throughout the simulation. In the Fixed Best \nbenchmark, the penstock is kept at 42% throughout - this particular aperture was \nexperimentally determined to be the best fixed aperture. \n \nIn the On-Off control benchmark, a simple On-Off controller is applied, with the \nset-point at 96% of the tank depth; again, this was experimentally determined to \nbe the best set-point. \n\u2022= Storage levels are all 2.5 metre \n(m) and storage plan areas are \nall 400.0m2 \n\u2022= Penstock area is 0.04m2 \n\u2022= The pipe area for the lower \ntank is 0.09m2  \n\u2022= Penstock  discharge coefficient \nhas value of 2.0 \n\u2022= Outflow outlet restrictions is \n0.06m2 \n11 \n11%12%\n11%11%\n19%\n77%83%\n100%\n14%20%\n0%\n20%\n40%\n60%\n80%\n100%\nCl\nose\nd\nOp\nen\nFix\ned\n Be\nst\nOn\n-O\nff (\nbe\nst)\nTh\ne C\nom\nbs\nGA\n-Fu\nzzy\nGA\n-N\nN\nOp\ntim\num\nMethod\nN\num\nbe\nr o\nf S\npi\nlls\n \n \nFigure 3 A comparison of the number of spills in a two-tank system \nThe optimum spillage rate is calculable for this simple flow system, although not \nfor any more complex system. Since water can only exit the system through the \noutflow in the lower tank, and the speed of the outflow is related to the depth in \nthe lower tank, to get the optimal performance we maximise the rate of outflow by \nkeeping the lower tank as full as possible. This is done by initially opening the \npenstock fully, then as the level of the bottom tank nears the top, opening the \npenstock just sufficiently to keep it fully topped up. We calculate the optimal \naperture on each iteration by experimentally determining the largest aperture that \ndoes not cause overflow. \nIt is noticeable that, even on this very simple system, On-Off control does not \nachieve optimal performance, whereas the hybrid soft controllers do. The \nexception is the Combs method fuzzy controller, which performed relatively \npoorly. \n5.2. Three Tank Experiments \n \n \n \n \n \n \n \n \n \nFigure 4 A three tank sys\n40%\n76%80%\n92%98%\n0%\n20%\n40%\n60%\n80%\n100%\nClo\nse\nd\nOp\nen\nSa\nme\nDif\nfer\nen\nt\nOn\n-O\nff (\nbe\nst)\nTh\ne C\no\nMethod\nN\num\nbe\nr o\nf S\npi\nlls\nFigure 5 A comparison of the number of spi\n \nThe three tank system is shown in figure 4. It is no \ntheoretical optimum performance, as the simple str\nno longer applies. The fixed penstock benchmark is\nthe two penstocks could have different fixed setting\nof the benchmark are illustrated (one where the two\none where they have different apertures). Figure 5 s\ntank system. \n\u2022\n\u2022=\n\u2022=\n\u2022=  \n\u2022=\n\u2022=Storage levels are all 2.5 metre \n(m) \nStorage plan areas are 450.0m2, \n400.0m2, and 600.0m2 for the \ntwo upper tanks and the lower \ntank, respectively \nPenstock areas are 0.04m2 and \n0.05m2 for the upper penstock \nand the lower penstock, \nrespectively \nThe pipe area for the lower tank\nis 0.09m2  \nPenstock  discharge coefficient \nhas value of 2.0 \nOutflow outlet restrictions is \n0.06m2 12 \ntem \n3%21% 2% 2%\n42%\n12% 12%\nmb\ns\nGA\n-Fu\nzz\ny (\nloc\nal)\nGA\n-N\nN \n(lo\nca\nl)\nGA\n-N\nN \n(gl\nob\nal)\n \nlls in a three-tank system \nlonger possible to detemine the \nategy used in the two tank case \n complicated by the fact that \ns, and therefore two versions \n have the same aperture, and \nhows the results with the three \n13 \n \nEven the very modest increase in complexity from the two tank system has \nnoticeable effects. We again observe that the Combs method is inferior, and this \nwas abandoned for subsequent experiments. On-Off control proves noticeably \ninferior to the hybrid soft controllers. With this simple system, there is no \ndistinguishable difference in performance between the local and global \ncontrollers. \n \nNeural networks show a modest superiority over fuzzy logic in this instance, \nalthough it would be dangerous to draw general conclusions from this. \n5.2 Ten Tank Experiments \n3% 3% 26%\n72%\n95%95%100%\n89%\n4%\n0%\n20%\n40%\n60%\n80%\n100%\nClosed O pen F ixed  Best\n(100%)\nO n-O ff\n(best)\nG A-F uzzy\n(loca l)\nG A-NN\n(loca l)\nG A-NN\n(g loba l)\nMethod\nN\num\nbe\nr o\nf S\npi\nlls\n \n \nFigure 6 Local versus global control in a ten-tank system \nTo illustrate the difference in performance of local and global control strategies, a \nsystem containing ten tanks is presented. Global fuzzy control was not attempted, \nas the combinatorial explosion makes the Mamdani approach infeasible, and the \nCombs method proved markedly inferior even on the simple two tank and three \ntank systems. The results are shown in figure 6. They demonstrate quite clearly \nthe superiority of the simpler local control strategies. \n \nAs the global controller is required to model quite a complex transformation \nfunction, we experimented with a range of network complexities, containing from \ntwo to six hidden units, and both one and two hidden layers. The result reported is \nfor the best of these networks; see [3] for further details. \n14 \n5.4 Thirty-one Tank Experiments \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFigure 7 A 31 tank system \n\u2022= Penstocks are installed in each connection \n\u2022= Storage levels are all 2.5 metre (m) \n\u2022= Penstock areas are all 0.04 m2 unless stated by the connection symbol \nId: 2\nA: 100\nH: 1.0\nId: 3\nA: 200\nH: 1.5\nId: 4\nA: 100\nH: 2.0\nId: 5\nA: 100\nH: 1.5\nId: 6\nA: 200\nH: 2.0\nId: 7\nA: 100\nH: 1.5\nId: 1\nA: 100\nH: 2.0\nId: 8\nA: 100\nH: 0.5\nId: 12\nA: 100\nH: 0.0\nId: 18\nA: 100\nH: 0.5\nId: 22\nA: 200\nH: 0.5\nId: 26\nA: 200\nH: 1.0\nId: 29\nA: 200\nH: 0.5\nId: 31\nA: 200\nH: 0.0\nId: 9\nA: 100\nH: 0.5\nId: 10\nA: 200\nH: 1.0\nId: 11\nA: 100\nH: 1.0\nId: 13\nA: 100\nH: 0.5\nId: 14\nA: 100\nH: 1.0\nId: 15\nA: 100\nH: 2.0\nId: 16\nA: 200\nH: 0.5\nId: 17\nA: 100\nH: 0.5\nId: 19\nA: 100\nH: 0.0\nId: 20\nA: 100\nH: 0.5\nId: 21\nA: 200\nH: 0.0\nId: 23\nA: 100\nH: 2.0\nId: 24\nA: 100\nH: 1.5\nId: 25\nA: 200\nH: 0.5\nId: 27\nA: 100\nH: 1.0\nId: 28\nA: 200\nH: 1.0\nId: 30\nA: 200\nH: 0.5\n0.06\n0.03\n0.05\n0.03\nConnection\nInflow\nOutflow\n15 \n\u2022= Penstock discharge coefficient all have value of 2.0 \n\u2022= Outflow outlet restrictions are all 0.6 m2 \n\u2022= A indicates the storage plan area (m2) \n\u2022= H indicates the height of the tank base above a baseline \n \nThe thirty one tank system contains 14 up-stream tanks feeding into 17 \ndownstream tanks; see figure 7. The system includes reverse-flow dynamics \n(where flow can reverse along a near-horizontal pipe), and is of comparable scale \nto some real world problems [3]. Since this system includes a large number of \ntanks and penstocks, it seems reasonable that in On-Off control different set-\npoints might be used for each controller. Two On-Off benchmarks are therefore \nillustrated. In the first, a single common set-point is used (experimentally \noptimised). In the second, a genetic algorithm was used to select different set-\npoints for each controller. The results are shown in figure 8. Once again, it is clear \nthat the soft controllers have superior performance. \n \n37%\n22% 22%\n85%\n93%93%100%\n24%26%\n50%\n0%\n20%\n40%\n60%\n80%\n100%\nClosed Open Fixed Best\n(100%)\nOn-Off\n(same)\nOn-Off\n(GA)\nGA-Fuzzy GA-NN\nMethod\nN\num\nbe\nr o\nf S\npi\nlls\n \nFigure 8 A comparison of the number of spills in a 31-tank system \n6. Conclusion \nReal-time control of the flow in complex network systems such as sewerage \nsystems is an extremely difficult problem. The interaction between control actions \nin different parts of the system, combined with exogenous effects from rainfall, \nmake it almost impossible to design good control strategies \"by hand.\" \n \n16 \nSoft computing techniques can be used to implement controllers, by embedding \nthe controllers into a simulator, evaluating performance under a range of \nconditions, and feeding back an assessment of performance to guide a genetic \nalgorithm for optimisation. \n \nOur experiments have indicated that this approach is feasible for networks of \nrealistic scale, although to date we have used simplified flow dynamics in the \nsimulator. However, it is not anticipated that the inaccuracies in the simulator \ninvalidate the conclusion that automatic design is possible. \n \nTwo forms of soft controller have been investigated: neural networks and genetic \nalgorithms. Our experiments show that the performance of the two methods is \ncomparable; neural networks optimise well more consistently, but with sufficient \nruns fuzzy logic controllers usually match their performance. Fuzzy logic \ncontrollers also have the benefit of interpretability, and may be preferable in some \ncases for this reason. \n \nGlobal control has been shown to be infeasible, at least with the techniques we \nhave so far deployed. Possible alternatives that might address the problem include \nsparsely connected networks, and\/or weight decay\/elimination techniques, both \nthe subject of future work. Local control achieves significantly better control than \nthe conventional benchmark methods that were examined. \n \nA key issue is the extremely high computational cost involved in optimising the \ncontrollers. We have addressed this issue using several techniques: a hybrid \nscheme including a set point that simplifies the task required of the soft \ncontrollers; a PVM based concurrent genetic algorithm simulator; and a novel \nTabu-based algorithm that selects a training data subset on each generation of the \ngenetic algorithm without reducing selective pressure. \n \nIt is interesting to consider whether there are general classes of problem to which \nthis approach can be applied. We identify the following critical features in our \nsystem: \n \n17 \n\u2022= It consists of a directed network through which some \"commodity\" travels; \n\u2022= The network has a definite and limited \"loading capacity\" within each locale, \nand overloading is problematic; \n\u2022= The system may be under uneven load; \n \nThe generic approach is to adaptively restrict flow so as to avoid local \noverloading. Other problem-domains where this approach might apply, besides \nother fluid flow problems,  include goods supply networks, manufacturing system \nand discrete event simulations. \n7. References \n1. Antonisse H. (1989) \"A New Interpretation of Schema Notation that Overturns the Binary Encoding \nConstraint,\" Proceedings of the Third International Conference on Genetic Algorithms, 86-91, San Mateo, \nCA: Morgan Kaufmann \n2. Chiu K. and Hunter A. (1997) \"Genetic Design of Real-Time Fuzzy Logic Controllers,\" International \nconference EXPERSYS-97, Sunderland, U.K, 245-250 \n3. Chiu K. (1999) Adaptive Optimization of Intelligent Flow Control, Ph.D. Thesis, School of Computing, \nEngineering and Technology, University of Sunderland \n4. Davis L. ed. (1987) Genetic Algorithms and Simulated Annealing, San Mateo, CA: Morgan Kaufmann \n5. Geist A. etc. (1994) PVM: Parallel Virtual Machine, Cambridge, MA: The MIT Press \n6. Glover F. (1989) \"Tabu Search - Part I,\" ORSA Journal on Computing, 1,3:190-206 \n7. Glover F. and Laguna M. (1997) Tabu Search, Kluwer Academic Press \n8. Goldberg D. (1989) Genetic Algorithms in Search, Optimization, and Machine Learning, Addison-Wesley. \n9. Goldberg D. (1990) \"Real-Coded Genetic Algorithms, Virtual Alphabets, and Blocking,\" University of \nIllinois at Urbana-Champaign, Technical Report No. 90001 \n10. Holland J. (1992) Adaptation in Natural and Artificial Systems (2nd ed.), Cambridge, MA: MIT Press \n11. Hunter A., Hare G., and Brown K. (1997) \"Genetic Design of Real-Time Neural Network Controllers,\" \nNeural Computing & Applications, 6:12-18 \n12. Hunter A. (1998) \"Crossing Over Genetic Algorithms: The Sugal Generalised GA,\" Journal of Heuristics,  \n4,2:179-192 \n13. IAWPRC Task Group on RTC of UDS (1989) Real Time Control of Urban Drainage Systems - The State \nof the art, (ed. W. Schilling), Pergamon Press \n14. Koza J. (1992) Genetic Programming: On the Programming of Computers by means of Natural Selection, \nCambridge, MA: MIT Press \n15. Petersen S. (1987) Real Time Control of Urban Drainage Systems, M.sc. Thesis, Dept. of Environmental \nEngineering, Technical University of Denmark, August 1987, ISBN 87-89220-04-8 \n16. Press W., Teukolsky, S., Vetterling, W. and Flannery, B. (1992) Numerical recipes in C: the art of \nscientific computing, 2nd ed, Cambridge University Press \n17. Schilling W. (1992) \"The Feasibility of Real Time Control of Combined Sewer Overflows,\" Civil \nEngineering Practice, 7,2:17-26 \n18. Wallingford (1997) HydroWorks V3.3 Software http:\/\/www.wallingford-software.co.uk\/ accessed June 9, \n1999 \n"}