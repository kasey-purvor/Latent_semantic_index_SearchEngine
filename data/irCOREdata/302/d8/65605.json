{"doi":"10.1007\/s10055-008-0092-z","coreId":"65605","oai":"oai:dro.dur.ac.uk.OAI2:5274","identifiers":["oai:dro.dur.ac.uk.OAI2:5274","10.1007\/s10055-008-0092-z"],"title":"Computer game engines for developing first-person virtual environments.","authors":["Smith,  Shamus P.","Trenholme,  David."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2008-09-01","abstract":"Building realistic virtual environments is a complex, expensive and time consuming process. Although virtual environment development toolkits are available, many only provide a subset of the tools needed to build complete virtual worlds. One alternative is the reuse of computer game technology. The current generation of computer games present realistic virtual worlds featuring user friendly interaction and the simulation of real world phenomena. Using computer games as the basis for virtual environment development has a number of advantages. Computer games are robust and extensively tested, both for usability and performance, work on off-the-shelf systems and can be easily disseminated, for example via online communities. Additionally, a number of computer game developers provide tools, documentation and source code, either with the game itself or separately available, so that end-users can create new content. This short report overviews several currently available game engines that are suitable for prototyping virtual environments","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65605.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/5274\/1\/5274.pdf","pdfHashValue":"d1a60149e5f9780fb565d190a76ec228262e385f","publisher":"Springer","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:5274<\/identifier><datestamp>\n      2017-03-07T11:58:41Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Computer game engines for developing first-person virtual environments.<\/dc:title><dc:creator>\n         Smith,  Shamus P.<\/dc:creator><dc:creator>\n         Trenholme,  David.<\/dc:creator><dc:description>\n        Building realistic virtual environments is a complex, expensive and time consuming process. Although virtual environment development toolkits are available, many only provide a subset of the tools needed to build complete virtual worlds. One alternative is the reuse of computer game technology. The current generation of computer games present realistic virtual worlds featuring user friendly interaction and the simulation of real world phenomena. Using computer games as the basis for virtual environment development has a number of advantages. Computer games are robust and extensively tested, both for usability and performance, work on off-the-shelf systems and can be easily disseminated, for example via online communities. Additionally, a number of computer game developers provide tools, documentation and source code, either with the game itself or separately available, so that end-users can create new content. This short report overviews several currently available game engines that are suitable for prototyping virtual environments.<\/dc:description><dc:subject>\n        Virtual environments<\/dc:subject><dc:subject>\n         Computer game technology<\/dc:subject><dc:subject>\n         Game engines<\/dc:subject><dc:subject>\n         Reuse<\/dc:subject><dc:subject>\n         Prototyping.<\/dc:subject><dc:publisher>\n        Springer<\/dc:publisher><dc:source>\n        Virtual reality, 2008, Vol.12(3), pp.181-187 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2008-09-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:5274<\/dc:identifier><dc:identifier>\n        issn:1359-4338<\/dc:identifier><dc:identifier>\n        issn: 1434-9957<\/dc:identifier><dc:identifier>\n        doi:10.1007\/s10055-008-0092-z<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/5274\/<\/dc:identifier><dc:identifier>\n        https:\/\/doi.org\/10.1007\/s10055-008-0092-z<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/5274\/1\/5274.pdf<\/dc:identifier><dc:rights>\n        The original publication is available at www.springerlink.com\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn: 1434-9957"," 1434-9957","issn:1359-4338","1359-4338"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2008,"topics":["Virtual environments","Computer game technology","Game engines","Reuse","Prototyping."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n08 April 2009\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nSmith, Shamus P. and Trenholme, David. (2008) \u2019Computer game engines for developing first-person virtual\nenvironments.\u2019, Virtual reality., 12 (3). pp. 181-187.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1007\/s10055-008-0092-z\nPublisher\u2019s copyright statement:\nThe original publication is available at www.springerlink.com\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n Use policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without \nprior permission or charge, for personal research or study, educational, or not-for-profit purposes \nprovided that : \n \n\u0083 a full bibliographic reference is made to the original source \n\u0083 a link is made to the metadata record in DRO \n\u0083 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright \nholders.  \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nDurham Research Online \n Deposited in DRO:\n16 January 2009\nVersion of attached file:\nAccepted\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nSmith, Shamus P. and Trenholme, David. (2008) 'Computer game engines for developing first-person virtual\nenvironments.', Virtual reality., 12 (3), pp.\u0000181-187.\nFurther information on publishers website:\nhttp:\/\/dx.doi.org\/10.1007\/s10055-008-0092-z\nPublishers copyright statement:\nThe original publication is available at www.springerlink.com\u0000\u0000\nComputer game engines for developing first-person\nvirtual environments\nDavid Trenholme and Shamus P. Smith\u2217\nDurham University\nDurham DH1 3LE\nUnited Kingdom\nMarch 14, 2008\n1 Introduction\nBuilding realistic virtual environments is a complex, expensive and time consuming process [Lai02,\nRBFR03, SD00, SH01]. Lepuras and Vassilakis [LV05] note that state-of-the-art virtual environments\nare both costly to build and to maintain. In addition to generating virtual object models [Kes02, SW06],\nfor example buildings and scenery, a developer must also manage support for user interaction [BKLP05,\nSH06], any environment and object behaviours that are required, for example collision detection, and\nany non-visual features of the virtual world, for example audio cues and haptic feedback [PBT02].\nAlthough virtual environment development toolkits are available, many only provide a subset of the\ntools needed to build complete virtual worlds. Some features of virtual worlds such as wind, fire, smoke\nand water, and the provision for embodied autonomous agents [AB02], are particularly hard to simulate.\nIn addition, virtual environment toolkits often require additional programming skills and a substantial\ntime investment on the part of the developer.\nThe current generation of computer games present realistic virtual worlds featuring user friendly\ninteraction and the simulation of real world phenomena, for example gravity. Using computer games\nas the basis for virtual environment development has a number of advantages. Computer games are\nrobust and extensively tested [LV05], both for usability and performance, work on off-the-shelf sys-\ntems [RBFR03] and can be easily disseminated, for example via online communities. Many computer\ngame developers support modification of their game environments by releasing level editors, for example\nto modify the game environment, and tools to edit the game behaviour. This allows the reuse of the\nunderlining game engine technology, including 3D rendering, 2D drawing, sound, user input and world\nphysics\/dynamics [LJ02]. Therefore computer games can provide inexpensive state-of-the-art 3D virtual\nworlds that can be customised to experimental requirements in a short amount of time without extensive\nprogramming. This is a promising area of research that has already seen recent game technology used in\na variety of virtual environment domains including context-aware system evaluation [BE01, OLMD07], e-\nTourism1 [BMS07], human behaviour model testing [SBOC06], human-level AI research [Lai02, LAB+02],\nhuman-robot interaction simulation [LWH07, WLG03], information visualisation [KWGH05], interactive\nstorytelling [CCM02], laboratory accident simulation [BF03], landscape visualisation [HP02], large-scale\nreal-time ecosystem simulation [ROB02], phobia therapy [BCSJ+06, RBFR03], photorealistic environ-\nment walk-throughs [DB00], psychological experimenting [FHK+07], serious games [MRL+06] and virtual\nmuseums [LV05].\nA number of computer game developers provide tools, documentation and source code, either with\nthe game itself or separately available, so that end-users can create new content for the game called a\nmod or modification [Gui07]. For example, users can create new levels, maps, items or characters and\n\u2217Contact author - shamus.smith@durham.ac.uk, tel. +44(0)191 334 4284, fax +44(0)191 334 1701\n1The e-Tourism environment developed by Berger et al. [BMS07] uses the Torque Game Engine (see\nhttp:\/\/www.garagegames.com\/ [last access 17\/7\/07]). However, this game engine requires a commercial licence for non-\ngame development and will not be discussed here further.\n1\nadd them into the game, known as a partial conversion, or create an entirely new game by altering the\ngames source code, known as a total conversion.\nThis report overviews several currently available game engines that are suitable for prototyping virtual\nenvironments. Modern game engines have a modular structure so that they can be reused for different\ngames [LJ02]. Therefore, a game produced using an engine can be modified using the development\ntools provided with it in order to produce a virtual environment. Computer games in the First Person\nShooter (FPS) genre tend to have the greatest capability and resources for modification, so this report\nwill examine game engines for this game genre. There is a wide selection of 3D game engines available\nfor potential reuse2. Lewis and Jacobson [LJ02] observe that there are more than 600 commercial\ngame engines. However, the game engines considered here are those used in the most recently available\ncommercial computer games, thus representing more advanced technology which usually results in more\nrealistic environments. The Quake III Arena engine (see Section 3), although not as recent as the others,\nis also considered as it is different to the engine used for Quake IV, now the Doom 3 engine (see Section 4)\nand is still popular for modding.\n2 CryENGINE\nThe CryENGINE was created by software developers Crytek3 and used in the game Far Cry4 released\nin 2004.\nThe CryENGINE supports a number of features that are useful for creating immersive and realistic\ngames and virtual environments, such as a real-time editor, bump mapping, dynamic lights, a network\nsystem, an integrated physics system, shaders, shadow support and a dynamic music system. The\nnecessary development tools are integrated with the engine itself, including the CryENGINE Sandbox\nworld editing system. The engine supports all currently available hardware and it is updated with\nfurther hardware support when it becomes available. Licensed developers receive full source code and\ndocumentation for the engine and tools5.\nAdvantages to using the CryENGINE include the fact that the engine produces very high quality\ngraphics and visuals. The necessary development tools are provided with the engine and so can be\naccessed from games that use the engine, such as Far Cry. Also, the Sandbox editor is a very intuitive\ntool as it edits levels in real time, offering what you see is what you play feedback. Partial source code\nand documentation is included with a freely downloadable SDK6. Disadvantages with this engine include\nthat it has high demands on supporting hardware requirements for the high quality visual and audio\ncomponents and that there is only a small amount of fan-based community written documentation avail-\nable. This has implications for getting support if this engine is used in virtual environment development.\nHowever, there is a growing mod community at the official Crymod Modding Portal7.\n3 id Tech 3 Engine\nThe id Tech 3 engine is a game engine developed by id Software8 and was first used in the game Quake\nIII Arena9, released in 1999. It was previously known as the Quake III engine. The engine was the\nsuccessor to the Quake10 and Quake II11 engines, but much of the code is either new or has been re-\nwritten. Designed to be the ultimate multiplayer experience, QUAKE III Arena has become a defacto\nstandard for professional gamers and is the common choice for gaming tournaments around the world12.\nThis game engine has been succeeded by the Doom 3 engine (see Section 4).\n2For a comprehensive database of 3D engines see http:\/\/www.devmaster.net\/engines\/ [last access 17\/7\/07].\n3http:\/\/www.crytek.com [last access 14\/7\/07].\n4http:\/\/www.farcry-thegame.com [last access 14\/7\/07].\n5http:\/\/www.crytek.com\/technology\/index.php [last access 14\/7\/07].\n6http:\/\/crymod.com\/filebase.php [last access 18\/7\/07].\n7http:\/\/crymod.com\/ [last access 18\/7\/07].\n8http:\/\/www.idsoftware.com [last access 14\/7\/07].\n9http:\/\/www.idsoftware.com\/games\/quake\/quake3-arena\/ [last access 14\/7\/07].\n10An augmented reality gaming system based on the Quake engine is described in [PT02].\n11Network simulations using code based on the Quake II engine are described in [SA06]. Research into human-level AI\nusing Quake II is described in [Lai02].\n12http:\/\/www.idsoftware.com\/business\/history\/ [last access 14\/7\/07].\n2\nThe id Tech 3 engine supports 3D models in the MD3 file format, which uses per-vertex animation\nto store movement information, instead of skeletal animation. The MD3 format defines models in three\nseparate parts, e.g. head, torso and legs, so that each part can move independently. Each part of the\nmodel has its own texture set. Character models are lit and shaded using gouraud shading13 while\nthe map levels use lightmaps or gouraud shading, depending on the user\u2019s preference. Three different\nkinds of shadow are supported: blob shadow, a circle with faded edges at the feet of a character, and\ntwo other modes, which project an accurate shadow on the floor - the difference being that one mode\nis opaque while the other mode attempts to project shadow volumes in a medium-transparent black.\nHowever, none of these techniques clip shadow volumes, resulting in shadows passing through geometry.\nA high-level shader language is also included, as well as a method for rendering effects such as volumetric\nfog14.\nOne of the advantages of using this engine is that in addition to the Quake III game source code, the\nengine source code has been released under the GNU General Public License (GPL). The availability of\nthe full source code provides more flexibility in the customisation of game environments. Additionally\nthere is a large number of tutorials and articles that have been written for this engine and with the\nrelease of the source code15 in 2005, there is still an active development community. One disadvantage\nof using this engine is that game engine technology has progressed greatly since its original release in\n1999, and more advanced engines are available for use [KWGH05]. The more advanced engines can help\nwith realism and immersion in a virtual environment because of their greater graphical capabilities, for\nexample, in the generation of realistic shadows and lighting effects, and in game customisation with more\ndeveloper-oriented support tools.\nVirtual environments developed using this engine include environments for context-aware system\nevaluation [BE01], information visualisation [KWGH05] and psychological experimenting [FHK+07].\n4 id Tech 4 Engine\nThe id Tech 4 engine is a game engine developed by id Software and was first used in game Doom 316.\nid Tech 4 was previously known as the Doom 3 engine. The Doom 3 engine began as an enhancement of\nthe Quake III engine, which consisted of a complete rewrite of the renderer. However, it was decided to\nchange from the C programming language to C++, which required a complete restructuring and rewrite\nof the rest of the engine17.\nThe id Tech 4 engine provides several unique features, such as a unified lighting paradigm, where\nevery surface uses the same rendering pipeline, leading to visual consistency and fully dynamic shadows.\nAn in-game GUI feature is also provided, which enables interactive, resolution-independent surfaces,\nsuch as the computer screens in Doom 3. The engine also makes short map compilation times possible.\nThe level editor for this engine is built into games that use it and so can be accessed by anyone who\nowns any of these games. Greater flexibility is enabled when modding by the use of non-proprietary\nformats. Finally, the engine uses a strong and flexible scripting language, which can accomplish effects\nfrom changing entity behaviour to modifying variables in real time18.\nThe main advantage of using the Doom 3 engine is that it is a very powerful engine, capable of\nproducing realistic environments. Also, there is a large modding community, including a large number\nof tutorials and articles are available. However, similar to CryENGINE (Section 2), the hardware re-\nquirements of the engine are high, for example requirements for Doom 3 include: 100% DirectX 9.0b\ncompatible 64MB hardware accelerated video card, Pentium IV 1.5 GHz or Athlon XP 1500+ processor\nor higher, 384MB RAM, 2.2GB of uncompressed free hard disk space (plus 400MB for Windows swap\nfile) and 100% DirectX 9.0b compatible 16-bit sound card.\n13Gouraud shading is a method used in computer graphics to simulate the differing effects of light and colour across the\nsurface of an object to eliminate intensity discontinuities [FvFH90, pg736].\n14http:\/\/en.wikipedia.org\/wiki\/Quake III engine [last access 14\/7\/07].\n15The Quake III source code and development tools are available at http:\/\/www.idsoftware.com\/business\/techdownloads\/\n[last access 14\/7\/07].\n16http:\/\/www.idsoftware.com\/games\/doom\/doom3\/ [last access 14\/7\/07].\n17http:\/\/en.wikipedia.org\/wiki\/Doom 3 Engine [last access [14\/7\/07]\n18http:\/\/www.modwiki.net\/wiki\/Doom 3 engine [14\/7\/07].\n3\n5 Jupiter Extended (EX)\nJupiter EX is the latest version of a multi-platform game engine and development kit, developed by\nTouchdown Entertainment19 and used for the game F.E.A.R20.\nVisual technologies used in the engine include a DirectX 9 based renderer that uses materials for all\nobjects. Shaders are associated with each material and provide editable parameters, including texture\nmaps, colours and numeric constants. For lighting, Jupiter EX uses a unified Blinn-Phong per-pixel\nlighting model21, which allows each light to generate both diffuse and specular lighting consistently\nacross all solid objects in the environment. The lighting pipeline uses three passes: emissive, lighting\nand translucency. The engine also supports a data driven visual effects system, which allows the creation\nof key-framed effects that can be comprised of dynamic lights, particle systems, models and sounds. For\nexample, particle effects such as fire, steam and smoke can be produced. Havok physics22 have been\nincorporated into this version of the engine to simulate realistic physics and the Havok Vehicle Kit is\nincluded to support vehicles and simulate vehicle behaviour. A flexible animation system allows control\nof character movement and facial expressions23.\nJupiter EX includes a set of content creation tools, each with a different purpose. WorldEdit allows\ndesigners to create 3D environments and add objects and lighting. The results can be viewed in real time.\nModelEdit allows the designer to optimise models so that they interact correctly with the environment\nand other objects. It is also possible to define specific properties, assign texture IDs, attach objects to\nmodels and manipulate animation data. FxEdit can create and modify visual effects, without requiring\nre-compilation of the game, which increases the efficiency of the implement\/test cycle for special effects\n24. Other tools include ArchiveEdit, a tool used to package game assets into one archive for distribution,\nGDBEdit, the game database editor for changing things such as weapon damage, the interface etc.\nwithout changing source code, StringEdit, used to store and modify all strings that need to be localised\nand a number of plug-ins for importing\/exporting to modelling applications25.\nThe advantages of modifying games that use the Jupiter EX engine include the high level of graphical\nfidelity that can be achieved, which will improve realism and immersion. Also, the tools required for\nmodifying Jupiter EX games are logically separated into different applications and come with documen-\ntation. The main disadvantage is that the modding community is not as large for F.E.A.R, the most\npopular Jupiter EX game, as it is for other games such as Half-Life 2 (see Section 6) or Unreal Tourna-\nment 2003\/2004 (see Section 7). Therefore there are fewer community websites and fan written tutorials\navailable. Although documentation is included with the F.E.A.R SDK, it is not comprehensive, and this\nhas time implications for learning how to create environments and achieve certain modifications.\n6 Source Engine\nThe Source Engine was developed by the Valve Corporation26 and is most notably used in games such\nas Half-Life 227 and Counter-Strike: Source28. The Source Engine features include a high degree of\nmodularity and flexibility, lip synchronisation and facial expression technology and a realistic physics\nsystem.\nThe engine also supports particle effects, volumetric smoke and environmental effects such as fog\nor rain. An advanced artificial intelligence system is provided which enables sophisticated character\nnavigation, enabling characters to run, jump, climb stairs etc. The source code is written in C\/C++\nand classes can be modified or derived to create new entities, allowing a finer degree of control over\nmodifications. A high level of graphical fidelity can be achieved using the Source Engine because of its\nadvanced rendering features and detailed characters. Also, the materials system can be used to define\n19http:\/\/www.touchdownentertainment.com\/ [last access 14\/7\/07].\n20http:\/\/www.whatisfear.com [last access 14\/7\/07].\n21For details on Blinn and Phong lighting models see [Ebe07, pg96-97].\n22http:\/\/www.havok.com\/ [last access 18\/7\/07].\n23http:\/\/www.touchdownentertainment.com\/jupiterEX.htm [last access 14\/7\/07].\n24http:\/\/www.touchdownentertainment.com\/jupiterEX.htm [last access 14\/7\/07].\n25ftp:\/\/ftp.sierra.com\/pub\/sierra\/fear\/updates\/ [last access 14\/7\/07].\n26http:\/\/www.valvesoftware.com [last access 15\/7\/07].\n27http:\/\/www.Half-Life2.com\/ [last access 15\/7\/07].\n28http:\/\/counter-strike.net\/ [last access 15\/7\/07]\n4\nnot only what texture an item uses, but also what it is made from, which will affect the sound it makes\nwhen moved and its mass. All these features will improve the realism of a virtual environment29.\nThe level editor that is used to produce levels for games using the Source Engine is the Valve Hammer\nEditor, commonly referred to as Hammer. The editor uses brushes, called primitives, to construct a\nlevel. Apart from the construction of level architecture, Hammer is also used for creating level events\nand scripting30. Hammer is an additive-based level editor and uses CSG (constructive solid geometry)\noperations to add geometry to a void.\nDocumentation for the Source SDK is provided on the Valve Developer Community31 wiki, which was\ncreated by Valve and is the definitive and most comprehensive source of information on using the Source\nEngine. All the necessary tools for creating a mod and game content, e.g. via Hammer, are included with\nthe Source SDK, which is available after purchasing a Source-based game, i.e. Half-Life 2, and can be\ndownloaded using Valve\u2019s digital content delivery service called Steam32. The Source SDK also provides\na Create a Mod option, which copies the necessary source code and resources to a working directory.\nA large number of other websites provide their own discussion forums and tutorials, which range from\ngeneral introductions to the Source SDK tools to more specific tasks, see for example Interlopers.net33,\nfor design resources and Half-Life 2 tutorials, and Edit Life34, for Half-Life 2 Source mapping tutorials.\nThe main advantage of the Source Engine is that it has been designed from the ground up to be\nhighly modular, which means that modification of games developed using the Source Engine can be done\nto a very fine degree. Also, the popularity of the Source Engine for game modding has led to a very large\ncommunity of licensees and independent developers, who participate in forum discussions, write articles\nand create tutorials for the rest of the community to learn from. The Valve Developer Community\nprovides tutorials and technical references relevant to developing mods for Source-based games, such as\nHalf-Life 2. One of the disadvantages of the using the Source Engine is that the user will have to have\na Steam account to be able to use the mod. However, Steam accounts are free but initially require an\ninternet connection.\nVirtual environments developed using the Half-Life and Source Engine include systems to evaluate\nadaptive context-aware services [OLMD07], arachnophobia therapy [BCSJ+06, RBFR03], laboratory\naccident simulation [BF03] and serious games to teach food safety [MRL+06].\n7 Unreal Engine 2\nThe Unreal Engine is a powerful and widely used game engine developed by Epic Games35, the second\nversion of which was used to develop Unreal Tournament 200336 and its successor, Unreal Tournament\n200437. The core code is written in C++ and has been used in games on several platforms. UnrealEd 3,\nthe level editor, is included with Unreal Tournament 2003\/2004.\nThe engine supports high performance rendering, advanced animation features and high-quality dy-\nnamic lighting. Supported effects include a particle system for particles composed of sprites, meshes,\nlines and beams. The particle system supports various lifetime, texture, movement and collision options.\nAll particle features can be manipulated in real time in the editor. The texturing features of the engine\ninclude a material system that supports alpha-blending, i.e. transparency and blending of multiple layers\nof textures. High resolution textures that use efficient compression are also supported, which can help\nimprove realism. The Unreal Editor, UnrealEd, is a what you see is what you get content creation tool38.\nIn contrast with other game engine level editors, UnrealEd regards the game virtual world as a solid\nmass. UnrealEd is therefore a subtractive-based level editor where virtual worlds are carved from the\nsolid mass. This has the advantage of removing any possibility of BSP39 leaks, caused by gaps between\ngeometric primitives, when constructing environment spaces, as can happen when using Valve\u2019s Hammer,\n29http:\/\/www.valvesoftware.com\/files\/SOURCE InfoSheet.pdf [last access 15\/7\/07].\n30http:\/\/developer.valvesoftware.com\/wiki\/Hammer [last access 15\/7\/07].\n31http:\/\/developer.valvesoftware.com\/ [last access 15\/7\/07].\n32http:\/\/www.steampowered.com [last access 15\/7\/07].\n33http:\/\/www.interlopers.net\/ [last access 15\/7\/07].\n34http:\/\/www.editlife.net\/ [last access 15\/7\/07].\n35http:\/\/www.epicgames.com\/ [last access 16\/7\/07].\n36http:\/\/www.unrealtournament3.com\/ [last access 16\/7\/07].\n37http:\/\/www.unrealtournament.com\/ last access [16\/7\/07].\n38http:\/\/www.unrealtechnology.com\/html\/technology\/ue2.shtml [last access 16\/7\/07].\n39Binary space partitioning [Ebe07, pg354].\n5\nas the UnrealEd virtual world is totally encapsulated. Modification of games based on the Unreal Engine\n2 is further supported by inclusion of sample content and the source code for the engine and editor. The\nengine source code is written in C++. The engine also includes a scripting language, UnrealScript, which\ncan modify various aspects of the gameplay40.\nMany resources are available for modifying Unreal Engine based games, including Epic\u2019s Unreal\nDeveloper Network (UDN)41, which is the official support site for licensees and mod developers and\nprovides technical documentation as well as tutorials for the Unreal Engine and UnrealEd. There are also\na number of community websites that provide discussion forums and tutorials, for example Architectonic\nUT2003 Editing and Inspiration42 and UnrealWiki43.\nThe main advantage of the Unreal Engine 2 is that it has been available for a few years so there are\na considerable number of tutorials and articles on editing games that have been developed using it. The\nmain disadvantage is that there are now more recent engines with more advanced graphics technology\nthat will help to improve the realism of developed virtual environments.\nVirtual environments developed with the Unreal Engine include systems for acrophobia and claus-\ntrophobia therapy [RBFR03], virtual museums [LV05], interactive storytelling [CCM02], landscape vi-\nsualisation [HP02], large-scale real-time ecosystem simulation [ROB02], human behaviour model test-\ning [SBOC06], human-level AI research [Lai02, LAB+02], human-robot interaction simulation [LWH07,\nWLG03], photorealistic walk-throughs of the Florida Everglades and the Notre Dame Cathedral [DB00]\nand a low cost CAVE [Jac03].\n8 Summary\nMuch of the research and development being conducted in the gaming industry parallels ongoing work in\nthe virtual environment community [Zyd05]. Gershon et al [GSP06] observe that computer games fuse\nsoftware engineering, architecture, artificial intelligence, 3D graphics, art and sound effects with dramatic\nperformances, music and storytelling. Many of these features are required in virtual environments and\nreusable game engines have the potential to support this transition of technology.\nAll the engines considered in this report are suitable for developing non-game virtual environments.\nLewis and Jacobson [LJ02] note that in many cases it would be hard to imagine an application for which\none game engine would be suited and others not. All the engines listed provide some source code to\nusers. This is usually partial source code that can be altered and recompiled to affect the gameplay.\nFull source code, e.g. code for the engine, is typically only available to commercial licensees. However,\nthis does change over time as new game engines are developed and older engines are released as open\nsource projects. The existence of a strong and active online modding community, particularly with\nofficial developer support, is an important consideration, as is the minimum required specification for\noff-the-shelf hardware. Appendix A compares and contrasts some of the important features that relate\nto modification and editing of games using the engines considered in this report.\n9 Acknowledgements\nThis work was funded in part by the Nuffield Foundation (Grant URB\/34118)44.\nReferences\n[AB02] Jan M. Allbeck and Norman I. Badler. Embodied autonomous agents. In K. M. Stanney,\neditor, Handbook of Virtual Environments, pages 313\u2013332. Lawrence Erlbaum Associates,\n2002.\n40http:\/\/www.unrealtechnology.com\/html\/technology\/ue2.shtml [last access [16\/7\/07].\n41http:\/\/udn.epicgames.com [last access 16\/7\/07].\n42http:\/\/architectonic.planetunreal.gamespy.com\/ [last access 16\/7\/07].\n43http:\/\/wiki.beyondunreal.com\/ [last access 16\/7\/07].\n44http:\/\/www.nuffieldfoundation.org\/ [last access 15\/7\/07].\n6\n[BCSJ+06] Ste\u00b4phanie Bouchard, Sophie Co\u02c6te\u00b4, Julie St-Jacques, Genevie`ve Robillard, and Patrice Re-\nnaud. Effectiveness of virtual reality exposure in the treatment of arachnophobia using 3D\ngames. Technology and Health Care, 14:19\u201327, 2006.\n[BE01] Markus Bylund and Fredrik Espinoza. Using Quake III Arena to simulate sensors and\nactuators when evaluating and testing mobile services. In Extended abstracts of the ACM\nconference on human factors in computing systems (CHI 2001), pages 241\u2013242. ACM, 2001.\n[BF03] John T. Bell and H. Scott Fogler. Implementing virtual reality laboratory accidents using\nthe Half-Life game engine, WorldUp, and Java3D. In 2003 American Society for Engineering\nEducation Annual Conference & Exposition. American Society for Engineering Education,\n2003.\n[BKLP05] Doug A. Bowman, Ernst Kruijff, Joseph J. LaViola Jr., and Ivan Poupyrev. 3D User\ninterfaces: Theory and Practise. Addison Wesley, USA, 2005.\n[BMS07] Helmut Berger, Dieter Merkl, and Simeon Simoff. Open new dimensions for e-Tourism.\nVirtual Reality, 11:75\u201387, 2007.\n[CCM02] Marc Cavazza, Fred Charles, and Steven J. Mead. Emergent situations in interactive story-\ntelling. In Proceedings of the 2002 ACM Symposium on Applied Computing, pages 1080\u20131085.\nACM, 2002.\n[DB00] Victor DeLeon and Robert Berry, Jr. Bringing VR to the desktop: Are you game? IEEE\nMultiMedia, April-June:68\u201372, 2000.\n[Ebe07] David H. Eberly. 3D Game Engine Design: A practical approach to real-time computer\ngraphics. Morgan Kaufmann Publishers, Amsterdam, second edition, 2007.\n[FHK+07] Andreas Frey, Johannes Hartig, Andre\u00b4 Ketzel, Axel Zinkernagel, and Helfried Moosbrugger.\nThe use of virtual environments based on a medication of the computer game Quake III Arena\nin psychological experimenting. Computers in Human Behaviour, 23:2026\u20132039, 2007.\n[FvFH90] James D. Foley, Andres van Dam, Steven K. Feiner, and John F. Hughes. Computer Graph-\nics: Principles and Practice. Addison-Wesley, Reading, second edition, 1990.\n[GSP06] Nahum Gershon, Ben Sawyer, and J. R. Parker. Games and technology: Developing synergy.\nIEEE Computer, pages 129\u2013130, December 2006.\n[Gui07] Erik Guilfoyle. Half-Life 2 Mods for Dummies. Wiley Publishing, Inc, 2007.\n[HP02] Adrian Herwig and Philip Paar. Game engines: Tools for landscape visualization and plan-\nning? In Trends in GIS and Virtualization in Environmental Planning and Design, pages\n161\u2013172. Wichmann Verlag, 2002.\n[Jac03] Jeffrey Jacobson. Using \u201cCaveUT\u201d to build immersive displays with the Unreal Tournament\nengine and a PC cluster. In ACM Symposium on Interactive 3D Graphics, pages 221\u2013222.\nACM Press, 2003.\n[Kes02] G. Drew Kessler. Virtual environment models. In K. M. Stanney, editor, Handbook of Virtual\nEnvironments, pages 255\u2013276. Lawrence Erlbaum Associates, 2002.\n[KWGH05] Blazej Kot, Burkhard Wuensche, John Grundy, and John Hosking. Information visualisation\nutilising 3D computer game engines case study: A source code comprehension tool. In 6th\nACM SIGCHI New Zealand chapter international conference on computer-human interaction\n(CHINZ 2005), pages 53\u201360. ACM, 2005.\n[LAB+02] John E. Laird, Mazin Assanie, Benjamin Bachelor, Nathan Benninghoff, Syed Enam, Bradley\nJones, Alex Kerfoot, Colin Lauver, Brian Magerko, Jeff Sheiman, Devvan Stokes, and Scott\nWallace. A test bed for developing intelligent synthetic characters. In Artificial Intelligence\nand Interactive Entertainment: Papers from the 2002 AAAI Spring Symposium, pages 52\u2013\n56. AAAI, 2002.\n7\n[Lai02] John E. Laird. Research in human-level AI using computer games. Communications of the\nACM, 45(1):32\u201335, 2002.\n[LJ02] Michael Lewis and Jeffrey Jacobson. Game engines in scientific research. Communications\nof the ACM, 45(1):27\u201331, January 2002.\n[LV05] George Lepouras and Costas Vassilakis. Virtual museums for all: employing game technology\nfor edutainment. Virtual Reality, 8:96\u2013106, 2005.\n[LWH07] Michael Lewis, Jijun Wang, and Stephen Hughes. USARSim: Simulation for the study of\nhuman-robot interaction. Journal of Cognitive Engineering and Decision Making, 1(1):98\u2013\n120, 2007.\n[MRL+06] B. Mac Namee, P. Rooney, P. Lindstrom, A. Ritchie, F. Boylan, and G. Burke. Serious\nGordon: Using serious games to teach food safety in the kitchen. In 9th International\nConference on Computer Games: AI, Animation, Mobile, Educational & Serious Games\nCGAMES06, 2006.\n[OLMD07] Eleanor O\u2019Neill, David Lewis, Kris McGlinn, and Simon Dobson. Rapid user-centred evalu-\nation for context-aware systems. In Gavin Doherty and Ann Blandford, editors, Interactive\nSystems. Design, Specification and Verification. 13th Interactional Workshop, DSVIS 2006,\nvolume LNCS 4323, pages 220\u2013233. Springer, 2007.\n[PBT02] George V. Popescu, Grigore C. Burdea, and Helmuth Trefftz. Multimodal interaction mod-\nelling. In K. M. Stanney, editor, Handbook of Virtual Environments, pages 435\u2013454. Lawrence\nErlbaum Associates, 2002.\n[PT02] Wayne Piekarski and Bruce Thomas. ARQuake: The outdoor augmented reality gaming\nsystem. Communications of the ACM, 45(1):36\u201338, 2002.\n[RBFR03] Genevie`ve Robillard, Ste\u00b4phane Bouchard, Thomas Fournier, and Patrice Renaud. Anxiety\nand presence using VR immersion: A comparative study of the reactions of phobic and\nnon-phobic participants in therapeutic virtual environments derived from computer games.\nCyberPsychology & Behaviour, 6(5):467\u2013475, 2003.\n[ROB02] Scot Thrane Refsland, Takeo Ojika, and Robert Berry, Jr. Enhanced environments: Large-\nscale, real-time ecosystems. Presence, 11(3):221\u2013246, June 2002.\n[SA06] Anthony Steed and Cameron Angus. Enabling scalability by partitioning virtual environ-\nments using frontier sets. Presence, 15(1):77\u201392, February 2006.\n[SBOC06] Barry G. Silverman, Gnana Bharathy, Kevin O\u2019Brien, and Jason Cornwell. Human behaviour\nmodels for agents in simulators and games: Part II: Gamebot engineering with PMFserv.\nPresence, 15(2):163\u2013185, April 2006.\n[SD00] Shamus P. Smith and David J. Duke. Binding virtual environments to toolkit capabilities.\nComputer Graphics Forum, 19(3):C\u201381\u2013C\u201389, 2000.\n[SH01] Shamus P. Smith and Michael D. Harrison. Editorial: User centred design and implementa-\ntion of virtual environments. International Journal of Human-Computer Studies, 55(2):109\u2013\n114, 2001.\n[SH06] Shamus P. Smith and Jonathan Hart. Evaluating distributed cognitive resources for wayfind-\ning in a desktop virtual environment. In Y. Kitamura, D. Bowman, B. Fro\u00a8hlich, and\nW. Stu\u00a8rzlinger, editors, IEEE Symposium on 3D User Interfaces 2006, pages 3\u201310. IEEE,\n2006.\n[SW06] Shamus P. Smith and James S. Willans. Virtual object specification for usable virtual\nenvironments. In Annual Conference of the Australian Computer-Human Interaction Special\nInterest Group (OzCHI 2006). ACM, 2006.\n8\n[WLG03] J. Wang, M. Lewis, and J. Gennari. USAR : A game based simulation for teleoperation. In\n47th Annual Meeting of the Human Factors and Ergonomics Society, Denver, CO, 2003.\n[Zyd05] Michael Zyda. From visual simulation to virtual reality to games. IEEE Computer, pages\n25\u201332, September 2005.\nA Engine Comparison\nTable 1 compares and contrasts some of the important features that relate to modification and editing\nof games using the engines considered in this report.\n9\nEngine Level Source SDK Documentation Other\nname editor code\nCryENGINE Sandbox, Game source CryENGINE SDK includes Uses a real-time\nintegrated code available, MOD SDK, CryENGINE sandbox editor.\nwith comes with includes modding guide Paid license\nFarCry. CryENGINE documentation and FAQ, as required for full\nMOD SDK. and additional well as guides source code and\ntools. for other tools. documentation.\nid Tech 3 Q3Radiant Full source Toolchain id Software Released in\n\/Gtk code available available for provides 1999, graphics\nRadiant is from id Linux to help documentation look slightly\na separate Software\u2019s ftp with source for level dated, but still\ndownload. site. compilation. building,terrains, has an active\nAI and the community.\nshader system.\nid Tech 4 D3Edit Game source Doom 3 SDK, An official id Large\nintegrated code available, includes Maya Software website community, good\nwith comes with importer provides an amount of\nid Tech 4 Doom 3 SDK. source, vehicle introductory tutorials and\nbased demo and guide. documentation\ngames. sample Maya available.\nfiles.\nJupiter EX WorldEdit Game source F.E.A.R SDK, CHM file included F.E.A.R\ncomes code available, includes with SDK gives community not as\nwith comes with documentation an overview of large as for other\nF.E.A.R F.E.A.R SDK. and additional the tools, some games, but still\nSDK. level\/game tutorials and provides some\nediting tools. some references. useful tutorials.\nSource Hammer Game source Source SDK, Official Large community\ncomes code available, includes documentation providing\nwith comes with additional tools. available on comprehensive\nSource Source SDK. Requires Valve Developer tutorials and\nSDK. Steam account. Community. references.\nUnreal 2 UnrealEd, UnrealScript Karma physics Subset of official Paid license\nincluded game source SDK, but no documentation required for full\nwith code available separate SDK and tutorials source and UDN\nUnreal from UDN. for the engine. available on the access, but many\nbased Some tools Unreal Developer tutorials available\ngames. available from Network (UDN). from community.\nUDN.\nTable 1: Game engine comparison\n10\n"}