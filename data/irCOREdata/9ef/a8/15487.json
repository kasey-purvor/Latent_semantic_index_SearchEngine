{"doi":"10.1080\/09544820802310909","coreId":"15487","oai":"oai:dro.dur.ac.uk.OAI2:7138","identifiers":["oai:dro.dur.ac.uk.OAI2:7138","10.1080\/09544820802310909"],"title":"A methodology for quantitative estimates for the work and disturbance transformation matrices.","authors":["Matthews, Peter C.","Lomas, Chris D. W."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-08-01","abstract":"Modern design projects are typically undertaken concurrently in a virtual enterprise network of expert design and manufacture agents. The general need for agile response in turbulent environments is well documented and has been analysed at the manufacture phase. This paper proposes a framework to enable the simulation and analysis of an agile design methodology. This framework models the occurrence of an unexpected local event in a concurrent design project and how it propagates to the global project. The redistribution of the design work can be controlled within the virtual enterprise and the total redistribution impact can be measured. A four-level classification scheme for the severity of unexpected events is proposed. A trial design experiment is conducted, and a first-order quantitative analysis is performed based on Work Transformation Matrices (WTM) and a novel Disturbance Transformation Matrix (DTM). A design negotiation process based on the WTM\/DTM is proposed","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/15487.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/7138\/1\/7138.pdf","pdfHashValue":"e805799031be557c549a4995b513eab3a359d6a8","publisher":"Taylor & Francis","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:7138<\/identifier><datestamp>\n      2012-03-02T09:45:02Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        A methodology for quantitative estimates for the work and disturbance transformation matrices.<\/dc:title><dc:creator>\n        Matthews, Peter C.<\/dc:creator><dc:creator>\n        Lomas, Chris D. W.<\/dc:creator><dc:description>\n        Modern design projects are typically undertaken concurrently in a virtual enterprise network of expert design and manufacture agents. The general need for agile response in turbulent environments is well documented and has been analysed at the manufacture phase. This paper proposes a framework to enable the simulation and analysis of an agile design methodology. This framework models the occurrence of an unexpected local event in a concurrent design project and how it propagates to the global project. The redistribution of the design work can be controlled within the virtual enterprise and the total redistribution impact can be measured. A four-level classification scheme for the severity of unexpected events is proposed. A trial design experiment is conducted, and a first-order quantitative analysis is performed based on Work Transformation Matrices (WTM) and a novel Disturbance Transformation Matrix (DTM). A design negotiation process based on the WTM\/DTM is proposed. <\/dc:description><dc:subject>\n        Distributed design<\/dc:subject><dc:subject>\n         Axiomatic design<\/dc:subject><dc:subject>\n         Planning and workflow methodology<\/dc:subject><dc:subject>\n         Collaborative design tools<\/dc:subject><dc:subject>\n         Concurrent engineering.<\/dc:subject><dc:publisher>\n        Taylor & Francis<\/dc:publisher><dc:source>\n        Journal of engineering design, 2010, Vol.21(4), pp.413-425 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2010-08-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:7138<\/dc:identifier><dc:identifier>\n        issn:0954-4828<\/dc:identifier><dc:identifier>\n        issn: 1466-1837<\/dc:identifier><dc:identifier>\n        doi:10.1080\/09544820802310909 <\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/7138\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1080\/09544820802310909<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/7138\/1\/7138.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn:0954-4828","issn: 1466-1837"," 1466-1837","0954-4828"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":["Distributed design","Axiomatic design","Planning and workflow methodology","Collaborative design tools","Concurrent engineering."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n23 July 2010\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nMatthews, Peter C. and Lomas, Chris D. W. (2010) \u2019A methodology for quantitative estimates for the work\nand disturbance transformation matrices.\u2019, Journal of engineering design., 21 (4). pp. 413-425.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1080\/09544820802310909\nPublisher\u2019s copyright statement:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nA Methodology for Quantitative Estimates\nfor the Work and Disturbance\nTransformation Matrices\u2217\nP C Matthews\u2020 and CDW Lomas\nSchool of Engineering, Durham University\nDurham DH1 3LE, UK\nJuly 20, 2010\nAbstract\nModern design projects are typically undertaken concurrently in a virtual enter-\nprise network of expert design and manufacture agents. The general need for agile\nresponse in turbulent environments is well documented and has been analysed at the\nmanufacture phase. This paper proposes a framework to enable the simulation and\nanalysis of an agile design methodology. This framework models the occurrence of an\nunexpected local event in a concurrent design project and how it propagates to the\nglobal project. The redistribution of the design work can be controlled within the\nvirtual enterprise and the total redistribution impact can be measured. A four level\nclassification scheme for the severity of unexpected events is proposed. A trial design\nexperiment is conducted, and a first order quantitative analysis is performed based\non Work Transformation Matrices (WTM) and a novel Disturbance Transformation\nMatrix (DTM). A design negotiation process based on the WTM\/DTM is proposed.\n1 Introduction\nThe concepts of Agility and Design are well defined. Agility is seen to be the ability to\nrapidly react to changes in the environment, be they expected or not. When applied to\nmanufacture, this is seen to be the ability to change a manufacture resource rapidly to\nproduce a different assembly or product. Thus, an agile manufacturer is able to rapidly\nrespond to changes in product demand. Design is the process of transforming a set of\npotentially ill-defined customer requirements into an implementable solution. This process\nis undertaken for the design of physical products, systems, processes, and other services.\n\u2217Journal of Engineering Design, Volume 21, Issue 4 August 2010, pages 413\u2013425\n\u2020email: p.c.matthews@durham.ac.uk\n1\nThe design process is a combination of determining appropriate attributes for a product or\nsystem and then determining their values and\/or configuration. A number of methodologies\nexist for deployment in different application areas and different corporate cultures. As\ndesigns have become more complex, it has been necessary to migrate to concurrent design\nmethods [1]. However, concurrent design methods lack the ability to respond to unpredicted\nchanges in environmental conditions.\nAgile Design is therefore a design process in which the design team is able to rapidly\nrespond to a change in the design specification. These changes can either arise from a\ncustomer providing a revised specification or from the design process itself, for example\nwhen different aspects of the design introduce a conflict that must be resolved. It is\nassumed that these events are unexpected, and therefore not planned for. Agile Design\nseeks to mitigate the impact of these events on the total design process.\nThe need for diverse design teams is a shared property between Agile Design and Con-\ncurrent Design. These are both instances of Virtual Enterprises as they both lever resource\nnetworks to solve a design problem [2]. The distinction between these two methodologies is\nthe greater responsiveness that is core to Agile Design. Given a design brief, both methods\nuse competence profiling to suitably allocate design tasks to a pool of design agents. When\nan unpredicted event occurs, which could be either a late customer request, the failure of\nan agent, or some other external environmental impact, the concurrent design process is\ninterrupted. The impact of the event is evaluated, and the design process is restructured\naccordingly but with minimal impact to unaffected agents. The aim is to minimise the\ntotal impact to the design process. However, at the same time it is important to minimise\ncommunication between active agents as this delays progress. This is achieved by not only\nreviewing the directly impacted agents, but also their interfacing agents and their associ-\nated latencies. These two requirements are in conflict as to minimise total impact on the\ndesign requires thorough discussion between all relevant designers, which in turn requires\nsignificant time to be taken away from the total design process. These two contradicting\nrequirements provide the basis for optimising the management of the concurrent design\nprocess, thus providing the agility.\nThis paper will develop a set of foundations that will characterise Agile Design and\nprovide a set of requirements that must be met to enable Agile Design. A review of general\nAgile Design scenarios is presented, along guidelines for appropriate responses to ensure\nagile reaction. A model for project completion rate is presented and augmented to take\ninto account unexpected disturbances. A laboratory based design trial is then presented,\nwhich is analysed to estimate numerical values for the local (individual) work rates and\nthe quantitative impact that an unexpected event has on the overall design progress. This\nis then used as a basis for illustrating how the numerical model can be used to direct the\ndesigners to optimally undertake design negotiation once an unexpected event occurs.\n2\n2 Background\nAt its most basic, the design process takes us from an initial requirements specification\nthrough to the final set of manufacture plans [3]. This is represented by a single work\nthread, marked by a set of check points representing the design moving from one devel-\nopment phase to the next. It is at these check points where unsatisfactory work can be\nreferred back, either to the start of that phase or further back if more significant errors are\nfound. These design phases can be seen to consume time as a primary resource. However,\nthis simple representation does not provide for concurrency of work. As such, it forms the\nterminal part of a concurrent engineering project.\nConcurrent engineering is the distribution of the design, and potentially manufacture,\nwork between a number of agents [4]. These agents can then either recursively apply con-\ncurrent engineering again, or follow the basic linear design process if they are a \u2018terminal\u2019\nagent. The agents are selected according to their known expertise [5]. These agents are\nnetworked through a virtual enterprise while the project is underway. Through this net-\nwork, agents communicate as necessary. This concurrent engineering approach provides a\nmeans for rapidly creating enterprises with high degrees of competency without the need\nto support these competencies during projects which do not require the same competency\nprofile. Thus, the virtual enterprise has the benefits of a large, well found enterprise, with-\nout having to pay for the maintenance overhead of resources that are not required for other\nprojects.\nThe concept of agility in a manufacturing context has recently emerged [6, 7]. Most\nauthors agree that \u2018agility\u2019 is the ability to rapidly respond to some external and unexpected\nevent. The argument promoting agility is that it enables better survival in turbulent market\nconditions. However, most agile responses are tailored to changes in product demand, either\nin the form of production levels or in alternate design. The solutions to these tend to fall in\nline with traditional manufacture theory (for example, by applying Just-in-Time methods)\nor design modification (such as mass customisation applied after the initial product launch).\nThus, enterprises use the agile methods to enable them to respond to the market, based\non a given design.\nWhere designs require modification, change management methods provide a structure\nto enable managed modification of a design or manufacture process [7, 8]. There are two\naspects of change management: (1) the process of changing a given design, and (2) the\ndesign of artefacts such that they are more easily modified when needed. In the process of\nchanging a given design, care must be taken to avoid a change in one part of the design\nnegatively impacting some other part. This requires not only an understanding of how\nall aspects of the design interact with each other, but also a mechanism to rectify such\ncollisions when they occur. This can be particularly troublesome when the two conflicting\ndesign aspects are \u2018owned\u2019 by different agents in a virtual enterprise. If change is expected\nto a design, then the original design can be made such that changes can be easily applied.\nThis idea has also been extended to unexpected change, but where the nature of the\nchange has been anticipated, and therefore either a case-based reasoning approach can be\nadopted [9, 10] or a set of change procedures can be prescribed [11, 12]. Beyond this, there\n3\nis relatively little literature on changing the design mid-way through the design process.\nThis tends to be subsumed under failing a mid-way design check point, thereby sending\nthe design back to an earlier phase. However, such changes arise frequently due to the\ncustomer modifying the original specification.\nThe Design Structure Matrix (DSM) provides a means for representing the causal in-\nformation exchange structure between tasks within a design project [13]. This approach\nhas re-emerged as an active research area, in the first instance due to the ability of the\nDSM to represent iterations within the design process [14, 15, 16, 17, 18]. Iterations arise\nwhere two tasks mutually require information from each other: working on one task will\ninduce a small change in the other task, and vice-versa. The amount of rework per cy-\ncle for a set of fully concurrent tasks has been quantified using the Work Transformation\nMatrix (WTM) [14]. This provides a means for identifying the tasks that are most likely\nto require a greater number of iteration before arriving at an acceptable solution. The\nbasic WTM approach assumes a static design scenario. Further work has considered the\ndynamic nature of the product development process, and allowing for small perturbations\n[17]. Another approach considers the structure of the WTM to identify how to optimally\ndeploy resources to the various tasks to improve the convergence rates of the various task\ncompletion levels [18]. Both these extensions primarily concern the resource deployment to\nthe design process. Two alternative perspectives on this analysis is to consider where the\nresource availability changes and the unexpected (or externally induced) rework imposed\non a task or set of tasks.\nFinally, it is important to consider the human aspects of engineering projects. Where\nmultiple agents are responsible for different but interacting design aspects, it is important\nthat all parties co-operate. However, evidence shows that human nature tends to \u2018hide\u2019\nproblems in the hope that they can be resolved without needing to admit there ever\nwas a problem [19]. When the problem is not resolved, it then has an amplified effect\non the remainder of the design when it can no longer be hidden. Frequently, resolving\nthese problems requires changes to the design which results in the design process moving\nbackwards. While an agile design process will not change the problems arising due to\nhuman factors, it can mitigate the effects of these factors when they arise.\nThis paper will address how the design process can be made agile. By using concurrent\nengineering methodology as a starting point, a framework will be proposed that will enable\nanalysis of how unexpected events affect the concurrent design process. Given this analysis\ntool, it then becomes possible to test different design scenarios to handle an unexpected\nevent occurring during the design process. This framework will be strictly concerned with\nthe temporal aspects of a design project, and not with any other resource use. However,\nthe underlying principle can be readily adopted to these different resources.\n3 Analysis Framework\nThe basis of this agile design analysis framework stems from concurrent engineering and\nvirtual enterprise methodology. Specifically, given a design project, the project is decom-\n4\nposed into a number of independent tasks that are undertaken by different design agents.\nThe concurrent engineering view assumes that the next global phase of the project will\nthen be the combining of the component solutions into the final deliverable.\nThe analysis framework is based on the WTM to provide a quantitative model of the\ndesign process [14]. Using the WTM, the level of work remaining on each task is represented\nas a vector, x. With the linear model, the work remaining on each task after iteration t is\ngiven by:\nx(t + 1) = Ax(t) (1)\nIt should be noted that this only represents a set of concurrent tasks, as opposed to\niterations within a set of sequential tasks. However, for the purposes of this paper, it is\nsufficient to restrict the framework to the pure concurrent case.\nThe agile design framework considers what happens when some interruption occurs to\na design agent. The interruption events to be considered are those that incur additional\nwork to a task. This can be represented by adding a \u2018disturbance\u2019 term to Equation 1:\nx(t + 1) = Ax(t) + B\u03b4(t) (2)\nwhere \u03b4(te) 6= 0, when the unexpected event occurs and B represents the \u2018disturbance\ntransformation matrix\u2019 (DTM). The DTM represents how a significant disturbance in the\nproject propogates through to the whole project. This model does not address communi-\ncation latency: it is assumed that with modern communication technologies, this latency\nis not significant. It must be noted that there exist cases where this latency is significant,\nfor example where consideration must be given as a result of a message. However, for the\npurposes of this analysis, such latencies will be beyond the scope of this study.\nThis paper will consider the case where only one task, i.e. one component of x, is\naffected. However, the analysis can be expanded to consider events that would induce\nre-work in several tasks simulataneously. Under the single task analysis, the other tasks\nreceive the additional work in the next cycle as a result of the WTM.\nDepending on the nature of the event and how much slack was built into the project,\nsuch events potentially result in a global effect to the whole design project. For analysis\npurposes, four levels of (local) event severity have been categorised and these categories\nare described in terms of \u03b4 [20, 21]:\nTrivial: the problem can be resolved completely at the local level, a small time penalty is\nincurred. B\u03b4 is near-zero.\nMinor: the problem requires the agent to seek external assistance, or minor redeployment\nof part of the work to another partner within the virtual enterprise. \u03b4 only has one\nnon-zero component and B\u03b4 is moderate.\nMajor: the problem cannot be resolved by the agent or other member of the virtual enter-\nprise. A new member is needed to join the virtual enterprise, and the redeployment\n5\nof work and initiation of the new member to the project incurs a serious time penalty.\n\u03b4 has several non-zero components and B\u03b4 is significant.\nFatal: the problem cannot be resolved by the agent, and there exists no external agent\nthat can provide support. Effectively, the design is fundamentally flawed and is not\nrealisable. \u03b4 is such that A\u03b4, the resulting rework vector, is very close to x(0), the\noriginal level of work.\nAn event occurring during the design process effectively requires more time to be spent\nthan originally planned. This can be simply represented by in effect \u2018turning the clock\nback\u2019 on the design process. By mapping the proportion of work remaining onto the\ndesign lifecycle, the interruption is encoded as being an event that requires a particular\ntype of redesign work to be performed. The above categorical labels provide a fuzzy-like\nmapping between an unexpected event and the quantitative \u03b4 value that is to be added.\nThis provides an initial estimate to compute the amount of rework that will be induced\ninto other tasks. So if an event happens in the detailing stage, the severity of the event\ndetermines how far back the whole project is set back. For example a trivial event in the\ndetailing stage might only require the affected agent to restart this stage. The more serious\n\u2018minor\u2019 event might result in the agent returning to the embodiment stage while a \u2018major\u2019\nevent will result in a new agent starting this part of the design work from fresh. Another\npossibility in the \u2018minor\u2019\/\u2018major\u2019 cases is that several other design agents are affected, to\nthe respective degrees of the event classification. Finally, in the case of a \u2018fatal\u2019 event,\nit is assumed that the whole design collapses due to the event. In this case the design\nrequires fundamental rework and hence all agents will start from fresh, effectively under a\nnew virtual enterprise.\n3.1 Event sources\nExternal and unexpected events are the source of interrupts to the design process [22].\nThis paper shall distinguish three major sources of interrupt events: (1) late customer\ndesign brief change, (2) in-production design change, and (3) agent failure. The severity\nof the event will depend on the nature of the event and the ability of the relevant agent(s)\nto handle the event.\nCustomers, in general, do not provide flawless documentation and, depending on cir-\ncumstances, request unexpected design changes before the end of project. This customer\ndriven change requires the design to be reconsidered. At the trivial level, it could be a\nsimple matter of requesting a different material for the external body. More significant\nrequests are those that change the functionality or core design of the artefact.\nIn-production design changes are those that arise either internally due to identifying\nadditional design constraints or novel design solutions. Finally, agent failure represents the\nevent where an agent is not capable of delivering the solution as originally specified. The\nfailure of an agent effectively causes a design change request, which needs to be suitably\npropagated through the virtual enterprise.\n6\n3.2 Concurrent Design Representation\nBy distributing the design tasks to independent agents, each agent can be seen to perform\na classical single threaded design project. Using the Pahl and Beitz design phase categories\n[3], the normal state progression of any agent would be: Conceptual, Embodiment, Detail,\nand Manufacture. Depending on the design task and the agent\u2019s expertise, each agent\nwill require a different amount of time to complete each stage. The sum of these times\nrepresents the total time an agent requires to complete its task, assume no interruptions.\nNote that using this scheme does allow for agents to specialise in particular aspects of\nthe design process, for example a manufacturing agent will require zero time for the prior\ndesign activities.\n3.3 Agile Design Response\nThe state of the whole virtual enterprise is given by x, the work remaining per agent vector.\nWhen an interrupting event occurs to an agent, the effect is propagated through the WTM\nwhich represents the causal links of the global design project within the virtual enterprise.\nThe two extreme event types (trivial and fatal) do not require an agile design methodology\nto mitigate as they either are absorbed locally or globally destroy the project. However,\nthe minor and major event classes do provide an opportunity to apply agile design methods\nto minimise the total time penalty to the project.\nTo respond with agility requires that when an event occurs in the concurrent design\nprocess, all design agents are able to respond accordingly. In a non-agile system, the\npenalty is accumulated totally by the affected agent. In the agile system, other agents aim\nto reduce the impact of the event by being able to self-incur trivial events. The unmitigated\nimpact of the event can be identified by computing B\u03b4(te). This vector represents how the\nadditional work would be transfered to the other agents after one cycle.\nThus the required change due to the source event is in effect mitigated through the\nrelevant partners in the virtual enterprise. The aim of this analysis framework is to model\nand simulate such events to be able to test mitigation policies under laboratory conditions.\n4 Trial Experiment\nTo investigate the potential of the agile design framework, a trial experiment was run. The\nexperiment was based on designing a simple spoked bicycle wheel. The design process was\nrecorded, and subsequently analysed to numerically estimate the WTM and the DTM.\nFinally, the impact of the \u2018unexpected\u2019 event was assessed.\nThe primary aim of the trial experiment was to test the interupt method and subsequent\ndesign negotiation. This represents the main agile design tool, namely the redistribution of\nthe design rework between the design agents. For this trial, all the design and negotiation\nwork was left unsupervised. It was up to the designers themselves to determine how best to\nredistribute the work load. The observation of this process represented the secondary aim\nof the trial: to identify what information would designers need to optimise the negotiation\n7\nprocess. The aims of this experiment are to investigate the viability of collecting design\nevent data and to verify that the DTM is a reasonable process model, one trial will suffice.\nThe trial was performed using three researchers from within the School of Engineering.\nThey were all proficient, but not expert, at using the SolidWorks CAD package.\n4.1 Design Problem\nThe design task was to use a commerical CAD package to produce the detailed design for a\nspoked bicycle wheel. The design was partitioned into three components: the wheel rim, the\nspokes, and the wheel hub. The designers were supplied with sketches of each component\nand a basic specification of the wheel (rim width, depth, and outer diameter; and the inner\nhub diameter). Each designer was randomly allocated one component to design. With each\ncomponent, further domain knowledge was supplied. For each component, this contained\na series of suggested alternative designs and a rough indication of how difficult each would\nbe to achieve. This was to facilitate any design negotiation that might occur.\nThe first phase of the design process was for the designers to agree on the overall\nshape of the wheel. This was relatively superficial (e.g. it was not required to consider the\nstress the wheel would undergo), and was used to identify further design parameters that\nwould need to be agreed upon. These parameters determined the interfaces between the\ncomponents, for example the spoke diameter determined the minimum size for the holes\nin the hub and rim.\nOnce the designers felt that they had sufficiently defined the problem, they entered\nthe second phase of the design process. This was the detailed design phase in which the\ndesigners worked independently and represented the independent concurrent phase of the\ndesign project. On completing this phase, the components were checked to see that would\nfit together correctly, thus completing the design project.\n4.2 Experiment set up and execution\nThe design experiment was based around the design of a simplified bicycle wheel. This\nprovided a product with sufficient complexity (three interfacing components), but would\nbe sufficiently familiar to the designers that it would not require significant introduction\nbeyond supplying the designers with a small amount of \u2018specialist\u2019 knowledge that they\ncould use as a basis for design negotiation.\nThe experiment was run over a 90 minute period. The first fifteen minutes were used to\nexplain the objectives of the experiment and describe the data that was to be collected from\nthe design process. During this briefing period, the \u2018agile interupt\u2019 method was described\nto the subjects. The subjects were to use the interupt method whenever they realised\nthat their component would not interface easily with another. The interupt then started a\ndesign negotiation process which would aim to minimise the total time required to design\nthe interface on both components. The subjects were also informed that at some point\nduring the experiment, one designer would have a significant change imposed and that\nthey would therefore be using the interupt method at some point.\n8\nThe three designers were seated adjacently, in the order that the components interfaced\nto each other (hub\u2013spoke\u2013rim), and were randomly allocated a component to design. A\nvideo camera was used to capture the physical interactions between the designers and two\nobservers took notes on the nature of the interactions. The designers were asked to save\nsnapshots of their CAD status at regular intervals so that the progress could be tracked.\nIn addition, the designers were asked to record whenever they requested information from\nor interupted another designer. This would then be correlated against the video record.\nAs stated in the design problem, the first stage of the design required the designers to\ndetermine and agree on the internal design parameters. The three designers spent about six\nminutes discussing the general arrangement of the wheel (basic geometry, number of spokes,\ncomponent type selection). After this, the designers focused on their own components with\none interuption to check on the spoke diameter.\nThe observers waited until the spoke design was about 50% complete before introducing\nthe \u2018unexpected\u2019 event. The spoke design at that point was a thin rod, with a 90 degree\nbend at the base where it would connect into the hub. The event prohibited this bend in\nthe spoke, and hence required the spoke to be redesigned. The spoke designer considered\nthe possible alternatives, and decided to design a thicker spoke that would be screwed into\nthe hub. As the spoke would be thicker, fewer would be required. Once this strategy had\nbeen decided by the spoke designer, the other two designers were interupted. The rim\ndesigner needed only to modify the hole geometry and the number of holes in the rim. The\nhub designer entered into negotiation with the spoke designer on the nature of the new\nhub\u2013spoke interface. As a result of this negotiation, the new hub and spoke design were\nsignificantly different and basically needed to start from fresh. This event did not require\nan external member and the \u03b4 value only had one non-zero component (see Equation 5),\nhence the event is classified as a \u2018minor\u2019 event.\nOnce the new design had been negotiated between the spoke and hub designers and\nconfirmed the final geometry and spoke numbers with the rim designer, both returned to\nwork independently and completed their designs. Upon completion of all designers, a quick\ncheck was made to ensure the components would fit together successfully. Finally, a fifteen\nminute debrief was conducted.\n4.3 Data Analysis\nData was collected from three main sources: the video recording of the trial; notes taken\nby the observers during the trial; and the frequent CAD snapshots taken. Further data\non the amount of rework the participants felt they had to do was also collected during the\ndebriefing session, however this was largely subjective and for comparison purposes only.\nThe quantitative measure for task completion was based on the number of remaining\nopen problems. Each design task was analysed and all the open problems were enumer-\nated (see Table 1). The open problems were classified into two types: (1) team based\nproblems that needed negotiation and (2) implementation problems that were solved in-\ndividually. The team based problems primarily resolved component interface issues and\nincluded identifying design parameters and their values. Implementation problems resolved\n9\nTable 1: Open problems per design task.\nTask Team problems Individual problems Total\nRim 15 9 24\nSpoke 19 8 27\nHub 30 15 45\nhow to embody the chosen design in the CAD tool.\nWhile it was not possible to identify when each individual open problem was solved\n(or re-opened), the trial data provided sufficient cues to identify when blocks of problems\nwere solved. For example, the video record clearly shows when the rim designer leaves the\ndiscussion. At this point, it can be inferred that all designers have resolved all the team\nbased problems that involved the rim. Similarly, when the remaining two designers break\naway to work individually, it is clear that the remaining team based problems have been\ncleared. The timestamped CAD snapshots provide data on the resolution of individual\nproblems. Immediatelty after the unexpected event, detailed notes were taken by the\nobservers with regard to the problems that were re-opened. Again, it was not always\npossible to identify individual problems, rather blocks of problems that were re-opened\ntogether. Again, the video record provides timed cues as to when these problems are\nopened and the subsequent negotiations. Table 2 contains the event log of the trial which\nis graphically represented in Figure 1.\n4.4 Estimating the WTM and DTM\nFor the purposes of this trial, it was not appropriate to attempt to compute accurately\nthe numerical values for the WTM and DTM as discussed in Section 3. However, it is\ninteresting to consider the coarse first order estimates of the values of the matrices, as this\nprovides insights into how the negotiations between the designers should be structured. A\ncrude estimate of the initial disturbance can be read from the events log in Table 2. The\ndisturbance event can be seen in the first instance in Spoke event number 5 (te = 930)\nwhere 12 tasks are re-opened. In the next step (te + \u03b5 = 1012), this event has propagated\nto the Hub, where 31 tasks are opened (and another 4 tasks are opened in the Spoke). It\nrequires one more step before the event propagates to the Rim. As such, it can be inferred\nthat the discrete timed WTM and DTM take the following form:\nA \u2248\n\uf8eb\n\uf8ec\uf8ed 0.9986 0 00 0.9988 0\n0 0 0.9978\n\uf8f6\n\uf8f7\uf8f8 B \u2248\n\uf8eb\n\uf8ec\uf8ed 1 2 00.5 1 4\n0 0.25 1\n\uf8f6\n\uf8f7\uf8f8 . (3)\nFirst, it is worth noting that the A matrix is diagonal. This represents that in this\ntrial, provided there were no interruptions, the three components were able to be designed\nindependently. This does represent an artificial case and is a direct result of (1) the\n10\nTable 2: Progression of the design for each sub-task.\nTask Id t (s) \u2206OTask OTask Description\nRim 1 0 \u2014 24 Start\n2 238 9 15 Team work ends\n3 560 12 3 Individual CAD work progressing\n4 1012 1 2 Progress slows due to awareness of spoke\nevent\n5 1145 \u20134 6 Rim interupted by Hub and Spoke\n6 1224 4 2 Spoke hole(s) redefined\n7 1400 2 0 Rim finished\nSpoke 1 0 \u2014 27 Start\n2 238 11 16 Finished discussions with Rim\n3 620 4 12 Finished discusions with Hub\n4 725 11 1 Individual CAD work, embody simple\nspoke\n5 930 \u201312 13 Event occurs, rework induced in spoke\n6 1012 \u20134 17 Interupt Hub, results in additional open\nproblems\n7 1145 \u20133 20 Interupt Rim, further open problems\n8 1224 3 17 Negotiation with Rim finish\n9 1879 9 8 Negotiation with Hub finish\n10 2760 8 0 Spoke finished\nHub 1 0 \u2014 45 Start\n2 238 16 29 Finished discussions with Rim\n3 620 8 21 Finished discusions with Spoke\n4 725 6 15 Individual work: internal hub specification\n5 930 3 12 Started CAD work\n6 1012 \u201331 43 Spoke interupts, problems re-open\n7 1224 14 29 Rim related interface problems closed\n8 1879 8 21 Negotiation with Spoke finish\n9 1980 6 15 Individual work: internal hub specification\n10 3240 15 0 Hub finished\n11\n0 500 1000 1500 2000 2500 3000 3500\n0\n5\n10\n15\n20\n25\n30\n35\n40\n45\nTime elapsed (sec)\nR\nem\nai\nni\nng\n O\npe\nn \nPr\nob\nle\nm\ns\nHub measured\nSpoke measured\nRim measured\nFigure 1: Open problems for design tasks against time elapsed.\n12\nsimplicity of these components, which enabled (2) the designers to fully discuss and plan\ntheir work prior to engaging in their own independent work. This independent working was\nsupported by the evidence collected during the design session. The values of the diagonal\nwere obtained by least squares fitting to the observed data.\nSecond, there is a simple structure to B, the DTM. The diagonal elements, bii, are equal\nto unity. This represents that a component that induces a disturbance will collect the full\nimpact of that disturbance. Further, for non-zero entries, bij = b\n\u22121\nji . This represents the\nsymmetry that is a result of the pairwise negotiation process. It assumes that any change\nis negotiated to minimise the pairwise impact, but not necessarily minimise the global\nimpact. Finally, the zero entries represent component pairs that do not directly affect\neach other. In this case, b31 = b13 = 0 represents the rim and the hub having no directly\nobservable effect on each other. It is worth noting that this is based from the empirical\nobservations, and there is a possibility that these zeros are incorrect.\nThe values of the DTM matrix were obtained by solving the equation:\nB\u03b4(t = 930) = B\n\uf8eb\n\uf8ec\uf8ed 016\n0\n\uf8f6\n\uf8f7\uf8f8 =\n\uf8eb\n\uf8ec\uf8ed 3116\n4\n\uf8f6\n\uf8f7\uf8f8 (4)\nsubject to bii = 1, b13 = b31 = 0 and bij = b\n\u22121\nji for ij 6= (1, 3). This leaves only b21 and b23\nto be determined. Through matrix algebra: b12 \u00d7 16 = 31 and b32 \u00d7 16 = 4, i.e. b12 \u2248 2\nand b32 = 0.25. This completes the DTM matrix.\n4.5 Model Verification\nThe model was numerically verified using Equation 2, with matrix values taken from Equa-\ntion 3, and starting vector of x(t = 0) = (45, 27, 24)T. The disturbance was defined as:\n\u03b4(t) =\n{\n0 : (t 6= 930)\n(0, 16, 0)T : (t = 930)\n(5)\nThis disturbance function represents that at t = 930, a total of 16 problems were re-opened\nin the spoke component. Figure 2 displays the actual data and the model estimates for\nthe three components.\nOverall, as can be seen from Figure 2, the WTM\/DTM model provides a reasonable\nestimate of the actual (measured) number of open problems for each of the components.\nHowever, there are some noteworthy differences in each of the components. Recall, the\ndisturbance was created in the spoke component. The direct additive means in which the\nDTM component was included in the estimate model results in the new open problems\nbeing propagated to the other components at the same time as the new open problems\nare incurred in the originating component. This is due to the WTM\/DTM model not\nincluding any communication latency. However, the overall model fits the data relatively\nwell provided that the communication latency is not great, as is the case in this trial. As\ncan be seen in the Rim (Figure 2(a)) and Hub (Figure 2(c)) graphs, the model estimates the\n13\n0 500 1000 1500 2000 2500 3000 3500\n0\n5\n10\n15\n20\n25\nTime elapsed (sec)\nR\nem\nai\nni\nng\n O\npe\nn \nPr\nob\nle\nm\ns\nRim measured\nRim estimate\n(a) Rim\n0 500 1000 1500 2000 2500 3000 3500\n0\n5\n10\n15\n20\n25\n30\nTime elapsed (sec)\nR\nem\nai\nni\nng\n O\npe\nn \nPr\nob\nle\nm\ns\nSpoke measured\nSpoke estimate\n(b) Spoke\n0 500 1000 1500 2000 2500 3000 3500\n0\n5\n10\n15\n20\n25\n30\n35\n40\n45\nTime elapsed (sec)\nR\nem\nai\nni\nng\n O\npe\nn \nPr\nob\nle\nm\ns\nHub measured\nHub estimate\n(c) Hub\nFigure 2: Comparison between actual open problems (measured, solid line) and estimated\nopen problems (dashed line) as time elapsed.\n14\nadditional open problems before they were measured. With regard to the spoke component\n(Figure 2(b)), there is a considerable discrepancy between the model estimate and the\nobserved values prior to the event. Specifically, the model predicts slower progress than\nwas observed. Post-event, a much closer fit is achieved. A possible reason for this is\nthat the spoke design was significantly more complex, effectively reducing the rate of work\npossible on the new spoke. A more accurate model in this case would require to update\nthe WTM to reflect this relatively significant design modification.\n5 Discussion\nThe agile design methodology does assume, and requires, that the design project is being\nundertaken in a virtual enterprise environment. The aim of the agile design methodology\nis to enable rapid redeployment of design work when required due to an unforseen event\noccurring. These events are basically design change requirements, arising due either to\ncustomer request, internal request resulting from design work, or internal request due\nto an agent failing to fulfil its task. A classification for the severity of these events was\nproposed that covered the full spectrum. Within this severity spectrum, it has been argued\nthat the extreme classes are not appropriate for agile design methods. However, events\nclassified away from these extremes provide an opportunity for agile response.\nThe agile design methodology was tested using a simple trial case. A disturbance\nto the spoke design was introduced part way through the design process. The resulting\npropagation was observed and analysed. This disturbance resulted in a significant effect\non the hub design. By using some simple analysis on the number of problems that were\nre-opened as a result of this, a coarse WTM and DTM were estimated (Equation 3).\nThe DTM provides another means for identifying that the hub design has the most\nsignificant effect on the remainder of the design (see Equation 3, value 4 in B, the DTM\nmatrix representing the effect Hub has on the Spoke being the largest by a significant\nmargin). As a result, it can be argued that the hub design agent should lead the redesign\nnegotiation. Minimising the changes to the hub subsequently minimises the changes to the\nremainder of the design. This results in a more agile design process.\nThe trial primarily tested the process of interupting other design agents when an unex-\npected change was introduced. Without this, the affected design agent would have had a\nconsiderably greater challenge in providing a component that could still interface with the\nrest of the assembly, but still responded to the imposed change. In the case of this trial,\nthis would have resulted in an exceptionally long design process for the spoke, as a radically\ndifferent design would have been required rather than the simple change implemented in\nthis case.\nOverall, the estimates and quantitative model fitting were based on a single trial. How-\never, the data collection process and design negotiation processes illustrated that the DTM\nis a valid extension of the WTM model. Further, it can be seen that from inspection of\nthe DTM matrix, it becomes clear how the design change negotiations should be directed\nto minimise total design change.\n15\n6 Conclusions\nThis paper introduced a framework for representing and analysing agile design method-\nology based on concurrent engineering. This illustrated how the design state could be\nmapped out onto the virtual enterprise network, and provided a means for representing\nand measuring the effect of unexpected design events occur during the design process. The\nagile design methodology redistributes the design work after an event occurs according to\nthe severity. The framework would enable virtual enterprises to test various work redistri-\nbution policies using the WTM\/DTM and Monte Carlo methods to determine the most\nsuitable for different event types.\nThe next phase of this research will develop methods for computing more accurate\nnumerical values for the WTM and DTM. As a result of this trial, the project data that\nneeds to be collected has been identified. This will provide the high quality quantitative\ndesign project data that is required for \u2018solving\u2019 the WTM and DTM for a given product\ntype.\nOne aspect that has not been considered is the communication latency within a virtual\nenterprise. It has been assumed that when work is redistributed between agents, this\nonly results in the affected agents \u2018turning back the clock\u2019 on their design process. It\nwas assumed that this resetting of the design process incorporated any latency rather\nthan explicitly accounting for this. However, the trial data clearly illustrated the latency\nbetween the initial distrubance and when it finally propagates through to the rim designer.\nSuch latency can be avoided through analysis of the WTM, and research will conducted\non developing methods for bringing downstream design teams to the negotiation process\nmore rapidly.\nReferences\n[1] J Kusar, J Duhovnik, J Grum, and M Starbek. How to reduce new product develop-\nment time. Robotics and Computer-Integrated Manufacturing, 20:1\u201315, 2004.\n[2] L M Camarinha-Matos and H Afsarmanesh. Elements of VE infrastructure. Comput-\ners in Industry, 51:139\u2013163, 2003.\n[3] G Pahl and W Beitz. Engineering Design: A Systematic Approach. Springer-Verlag\nLondon, second edition, 1996.\n[4] D E Carter and B S Baker. Concurrent Engineering: The Product Development\nEnvironment for the 1990s. Addison-Wesley, 1991.\n[5] N D Armoutis and J Bal. Building the Knowledge Economy: Issues, Applications,\nand Case Studies, chapter E-Business through Competence Profiling, pages 474\u2013482.\nIOS Press, 2003.\n16\n[6] H C W Lau, C W Y Wong, K F Pun, and K S Chin. Virtual agent modelling of an\nagile supply chain infrastructure. Management Decision, 41(7):625\u2013634, 2003.\n[7] Z Jiang and R Y K Fung. An adaptive agile manufacturing control infrastructure\nbased on TOPNs-CS modelling. International Journal of Advanced Manufacturing\nTechnology, 22:191\u2013215, 2003.\n[8] C Terwiesch, C H Loch, and A De Meyer. Exchanging preliminary information in\nconcurrent engineering: Alternative coordination strategies. Organization Science,\n13(4):402\u2013419, 2002.\n[9] B Weber, W Wild, M Lauer, and M Reichert. Improving exception handling by\ndiscovering change dependencies in adaptive process management systems. In Business\nProcess Management Workshops, volume 4103 of Lecture Notes in Computer Science,\npages 93\u2013104. Springer, 2006.\n[10] S Rinderle and M Reichert. Data-driven process control and exception handling in\nprocess management systems. In Proceedings of Advanced Information Systems Engi-\nneering, volume 4001 of Lecture Notes in Computer Science, pages 273\u2013287. Springer,\n2006.\n[11] S Gonnet, G Henning, and H Leone. A model for capturing and representing the\nengineering design process. Expert Systems with Applications, 33(4):881\u2013902, 2007.\n[12] M Heller, D Jager, M Schluter, R Schneider, and B Westfechtel. A management\nsystem for dynamic and interorganizational design processes in chemical engineering.\nComputers & Chemical Engineering, 29(1):93\u2013111, 2004.\n[13] D V Steward. The Design Structure System: A method for managing the design of\ncomplex systems. IEEE Transactions on Engineering Management, 28:71\u201374, 1981.\n[14] R D Smith and S D Eppinger. Identifying controlling features of engineering design\niteration. Management Science, 43(3):276\u2013293, 1997.\n[15] M Carrascosa, S D Eppinger, and D E Whitney. Using the Design Structure Matrix to\nestimate product development time. In Proceedings of the DETC\u201998, DETC98\/DAC-\n6013, Atlanta, GA, 1998. ASME Design Engineering Technical Conferences.\n[16] R P Smith and J Morrow. Product development process modeling. Design Studies,\n20(3):237\u2013261, 1999.\n[17] A Yassine, N Joglekar, D Braha, S Eppinger, and D Whitney. Information hiding\nin product development: the design churn effect. Research in Engineering Design,\n14:145\u2013161, 2003.\n17\n[18] S G Lee, K L Ong, and L P Khoo. Control and monitoring of concurrent design\ntasks in a dynamic environment. Concurrent Engineering: Research and Applications,\n12(1):59\u201366, 2004.\n[19] D N Ford and J D Sterman. The Liar\u2019s Club: Concealing rework in concurrent\ndevelopment. Concurrent Engineering: Research and Applications, 11(3):211\u2013219,\n2003.\n[20] P C Matthews, C D W Lomas, N D Armoutis, and P G Maropoulos. Foundations of an\nagile design methodology. International Journal of Agile Manufacturing, 9(1):29\u201337,\n2006.\n[21] N D Armoutis, P G Maropoulos, P C Matthews, and C D W Lomas. Establishing agile\nsupply networks through competence profiling. International Journal of Computer\nIntegrated Manufacturing, 2008. in press.\n[22] N Ye. Information infrastructure of engineering collaboration in a distributed virtual\nenterprise. International Journal of Computer Integrated Manufacturing, 15(3):265\u2013\n273, 2002.\n18\n"}