{"doi":"10.1007\/s00530-008-0126-0","coreId":"70197","oai":"oai:eprints.lancs.ac.uk:12959","identifiers":["oai:eprints.lancs.ac.uk:12959","10.1007\/s00530-008-0126-0"],"title":"Characterising and exploiting workloads of highly interactive video-on-demand","authors":["Brampton, Andrew","MacQuire, Andrew","Fry, Michael","Rai, Idris","Race, Nicholas J. P.","Mathy, Laurent"],"enrichments":{"references":[{"id":16310190,"title":"A brief history of generative models for power law and lognormal distributions.","authors":[],"date":null,"doi":"10.1080\/15427951.2004.10129088","raw":"M. Mitzenmacher. A brief history of generative models for power law and lognormal distributions. Internet Mathematics, 1(2):226{251.","cites":null},{"id":16310167,"title":"Adaptive and lazy segmentation based proxy caching for streaming media delivery.","authors":[],"date":"2003","doi":"10.1145\/776322.776328","raw":"S. Chen, B. Shen, S. Wee, and X. Zhang. Adaptive and lazy segmentation based proxy caching for streaming media delivery. In Proceedings of the 13th International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV), pages 22{31, 2003.","cites":null},{"id":16310194,"title":"An analysis of live streaming workloads on the Internet.","authors":[],"date":"2004","doi":"10.1145\/1028788.1028795","raw":"K. Sripanidkulchai, B. Maggs, and H. Zhang. An analysis of live streaming workloads on the Internet. In Proceedings of the ACM SIGCOMM Internet Measurement Conference (IMC), Sicily, Italy, October 2004.","cites":null},{"id":16310165,"title":"Analysis of educational media server workloads.","authors":[],"date":"2001","doi":"10.1145\/378344.378348","raw":"J. Almeida, J. Krueger, D. Eager, and M. Vernon. Analysis of educational media server workloads. In Proceedings of the 11th International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV), Port Jeerson, New York, USA, June 2001.17","cites":null},{"id":16310187,"title":"Analysis of multimedia workloads with implications for Internet streaming.","authors":[],"date":"2005","doi":"10.1145\/1060745.1060821","raw":"L. Guo, S. Chen, Z. Xiao, and X. Zhang. Analysis of multimedia workloads with implications for Internet streaming. In Proceedings of the 14th International World Wide Web Conference (WWW), Chiba, Japan, May 2005.","cites":null},{"id":16310178,"title":"Analyzing client interactivity in streaming media.","authors":[],"date":"2004","doi":"10.1145\/988672.988744","raw":"C. Costa, I. Cunha, A. Borges, C. Ramos, M. Rocha, J. Almeida, and B. Ribeiro-Neto. Analyzing client interactivity in streaming media. In Proceedings of the 13th International World Wide Web Conference (WWW), New York, New York, USA, May 2004.","cites":null},{"id":16310171,"title":"Characterizing locality, evolution, and life span of accesses in enterprise media server workloads.","authors":[],"date":"2002","doi":"10.1145\/507670.507676","raw":"L. Cherkasova and M. Gupta. Characterizing locality, evolution, and life span of accesses in enterprise media server workloads. In Proceedings of the 12th International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV), Miami Beach, Florida, USA, May 2002.","cites":null},{"id":16310160,"title":"Characterizing user access to videos on the world wide web.","authors":[],"date":"2000","doi":"10.1117\/12.373516","raw":"S. Acharya, B. Smith, and P. Parnes. Characterizing user access to videos on the world wide web. In Proceedings of Multimedia Computing and Networking (MMCN), San Jose, California, USA, January 2000.","cites":null},{"id":16310162,"title":"Content distribution network.","authors":[],"date":null,"doi":"10.1007\/springerreference_73117","raw":"Akamai. Content distribution network. http:\/\/www.akamai.com.","cites":null},{"id":16310184,"title":"How heavytailed distributions aect simulation-generated time averages.","authors":[],"date":null,"doi":"10.1145\/1138464.1138467","raw":"G. S. Fishman and I. J. B. F. Adan. How heavytailed distributions aect simulation-generated time averages. ACM Transactions on Modeling and Computer Simulation (TOMACS), 16(2):152{173.","cites":null},{"id":16310181,"title":"Internet Trac Archive.","authors":[],"date":null,"doi":null,"raw":"P. Danzig, J. Mogul, V. Paxson, and M. Schwartz. Internet Trac Archive. http:\/\/ita.ee.lbl.gov.","cites":null},{"id":16310174,"title":"Measurement and analysis of a streaming media workload.","authors":[],"date":"2001","doi":null,"raw":"M. Chesire, A. Wolman, G. M. Voelker, and H. M. Levy. Measurement and analysis of a streaming media workload. In Proceedings of the 3rd USENIX Symposium on Internet Technologies and Systems, San Francisco, California, USA, March 2001.","cites":null},{"id":16310198,"title":"MediSyn: A synthetic streaming media service workload generator.","authors":[],"date":"2003","doi":"10.1145\/776322.776327","raw":"W. Tang, Y. Fu, L. Cherkasova, and A. Vahdat. MediSyn: A synthetic streaming media service workload generator. In Proceedings of the 13th International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV), Monterey, California, USA, June 2003.","cites":null},{"id":16310204,"title":"Understanding user behavior in large scale video-on-demand systems.","authors":[],"date":"2006","doi":"10.1145\/1218063.1217968","raw":"H. Yu, D. Zheng, B. Zhao, and W. Zheng. Understanding user behavior in large scale video-on-demand systems. In Proceddings of EuroSys, 2006.","cites":null},{"id":16310201,"title":"User Behaviour Analysis of a Video-On-Demand Service with a Wide Variety of Subjects and Lengths.","authors":[],"date":"2005","doi":"10.1109\/euromicro.2005.63","raw":"M. Vilas, X. Paneda, R. Garcia, D. Melendi, and V. Garcia. User Behaviour Analysis of a Video-On-Demand Service with a Wide Variety of Subjects and Lengths. In Proceedings of the 31st EUROMICRO Conference on Software Engineering and Advanced Applications, pages 330{337, 2005.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2009-02-01","abstract":"This paper presents a detailed characterisation of user behaviour for a series of interactive video experiments over a 12 month period, in which we served popular sporting and musical content. In addition to generic VCR-like features, our custom-built Video-on-Demand application provides advanced interactivity features such as bookmarking. The dramatic impact of such functionality on how users consume content is studied and analysed. We discuss in detail how this user behaviour can be exploited by content distributors to improve user experience. Specifically, we study how simple dynamic bookmark placement and interactivity-aware content pre-fetching and replication can reduce the impact of highly interactive media on CDN performance","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/70197.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/12959\/1\/worldcup%2Dv1.pdf","pdfHashValue":"17c03275321ef672f2127c033fd2a5b2269ee355","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:12959<\/identifier><datestamp>\n      2018-01-24T00:04:32Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Characterising and exploiting workloads of highly interactive video-on-demand<\/dc:title><dc:creator>\n        Brampton, Andrew<\/dc:creator><dc:creator>\n        MacQuire, Andrew<\/dc:creator><dc:creator>\n        Fry, Michael<\/dc:creator><dc:creator>\n        Rai, Idris<\/dc:creator><dc:creator>\n        Race, Nicholas J. P.<\/dc:creator><dc:creator>\n        Mathy, Laurent<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        This paper presents a detailed characterisation of user behaviour for a series of interactive video experiments over a 12 month period, in which we served popular sporting and musical content. In addition to generic VCR-like features, our custom-built Video-on-Demand application provides advanced interactivity features such as bookmarking. The dramatic impact of such functionality on how users consume content is studied and analysed. We discuss in detail how this user behaviour can be exploited by content distributors to improve user experience. Specifically, we study how simple dynamic bookmark placement and interactivity-aware content pre-fetching and replication can reduce the impact of highly interactive media on CDN performance.<\/dc:description><dc:date>\n        2009-02-01<\/dc:date><dc:type>\n        Journal Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:relation>\n        http:\/\/dx.doi.org\/10.1007\/s00530-008-0126-0<\/dc:relation><dc:identifier>\n        Brampton, Andrew and MacQuire, Andrew and Fry, Michael and Rai, Idris and Race, Nicholas J. P. and Mathy, Laurent (2009) Characterising and exploiting workloads of highly interactive video-on-demand. Multimedia Systems, 15 (1). pp. 3-17. ISSN 1432-1882<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/12959\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1007\/s00530-008-0126-0","http:\/\/eprints.lancs.ac.uk\/12959\/"],"year":2009,"topics":["QA75 Electronic computers. Computer science"],"subject":["Journal Article","PeerReviewed"],"fullText":"Multimedia Systems manuscript No.\n(will be inserted by the editor)\nCharacterising and Exploiting Workloads of Highly\nInteractive Video-on-Demand\nAndrew Brampton \u00b7 Andrew MacQuire \u00b7 Michael Fry \u00b7 Idris A. Rai \u00b7\nNicholas J. P. Race \u00b7 Laurent Mathy\nAbstract This paper presents a detailed character-\nisation of user behaviour for a series of interactive\nvideo experiments over a 12 month period, in which\nwe served popular sporting and musical content. In ad-\ndition to generic VCR-like features, our custom-built\nVideo-on-Demand application provides advanced inter-\nactivity features such as bookmarking. The dramatic\nimpact of such functionality on how users consume con-\ntent is studied and analysed. We discuss in detail how\nthis user behaviour can be exploited by content dis-\ntributors to improve user experience. Specifically, we\nstudy how simple dynamic bookmark placement and\ninteractivity-aware content pre-fetching and replication\ncan reduce the impact of highly interactive media on\nCDN performance.\nKeywords Interactive, Video-on-Demand, Sports,\nWorld Cup, Content Distribution\n1 Introduction\nIn recent years the Internet has increasingly been\nused to distribute bandwidth-intensive streaming me-\ndia. Due to the resources required to deliver such con-\ntent, dedicated Content Distribution Networks (CDNs)\nare often used to improve the experience of end-users.\nAs such systems evolve, users expect correspondingly\nimproved interactive functionality, something which is\nincreasingly difficult to achieve with diverse content\nAndrew Brampton \u00b7 Andrew MacQuire \u00b7 Idris A. Rai \u00b7 Nicholas\nJ. P. Race \u00b7 Laurent Mathy\nComputing Department, Lancaster University, Lancaster, UK\nE-mail: {brampton,macquire,rai,race,laurent}\n@comp.lancs.ac.uk\nMichael Fry\nUniversity of Sydney, Sydney, Australia\nE-mail: michael.fry@usyd.edu.au\ntypes exhibiting varied access patterns. In order to pro-\nvide a high quality of service, modern CDNs must there-\nfore be optimised to respond to user behaviour with\nregard to different content types.\nIn this paper, we study user behaviour for an in-\nteractive Video-on-Demand (VoD) system that serves\nusers with a selection of content. Broadly, we served\nvideos in the sporting and musical genres, with respec-\ntive examples being the entire 2006 FIFA World Cup\nand 2007 Eurovision Song Contest. A key distinguish-\ning element of our work is that by using our own VoD\nsystem, we could offer novel interactive functionality\nbeyond typical VCR-like features (i.e., the ability to\npause, resume and skip back and forth within a given\nvideo stream). The prime example of this is bookmark-\ning : direct links to points of interest within the video.\nAn example of a bookmark within our sporting content\ncould be a common event such the start of a match, or\na potentially more popular event, such as a goal. Like-\nwise, in our musical content, we would typically book-\nmark the beginning of each distinct piece. Our system\nalso allowed users to contribute their own bookmarks\nat any time, distinct from those added during the pub-\nlishing process.\nPrevious studies making use of entertainment con-\ntent have witnessed the classic start-to-finish playback\nmodel in their access patterns, with occasional VCR-\nlike interactivity. In our experiments, however, user be-\nhaviour proved highly dynamic. Users often chose to\nwatch (and replay) small segments of the full video,\nin a complete departure from the start-to-finish model.\nThe behaviour observed may also exist in other gen-\nres with popular highlight (e.g., educational, entertain-\nment, news, etc.). While our scope is limited to sparsely\naccessed content, we feel our results are of interest and\nare relevant to significant new genres of on-line video\ncontent\n2We carried out a statistical analysis of the observed\nworkload resulting from the dynamic user behaviour,\nand identified models, various metrics and workload\nproperties. These models can be used to drive simu-\nlations of the type of interactivity behaviour studied\nin this paper. We also discuss how delivery networks\ncan exploit the observed behaviour to improve user-\nperceived performance. For instance, we show that the\norder in which users view bookmarks can be predicted\nbased on previous activity, enabling CDNs to leverage\nthis data for performance gains. We also show how\nsimple dynamic bookmark placement techniques and\ninteractivity-aware content management techniques can\nimprove CDN resource usage and performance.\nThe remainder of this paper is structured as follows:\nSection 2 reviews and discusses previous work on VoD\nworkloads. Section 3 describes our experimental setup\nand methodology. Section 4 then analyses the traces\nwe obtained during our trial period and discusses their\nsignificance. Section 5 presents and explores two sim-\nple techniques content distribution networks can use to\nexploit the highly dynamic user behaviour found in our\nanalysis, in order to improve both user satisfaction and\nresource usage. Finally, Section 6 concludes the paper\nwith a brief summary of results and a discussion of fu-\nture work.\n2 Related Work\nMuch previous work on characterising user interaction\nhas involved authors analysing real-world traces, usu-\nally of at least one month in length. A commonly-\nused repository of such data is the Internet Traffic\nArchive (ITA) [8]. The ITA maintains a collection of\nboth large and small-scale log files from a number of\ndiverse sources; popular examples being the entire 1998\nFIFA World Cup\u2019s web server logs, or two months of\nlogs from the NASA Kennedy Space Center in 1995.\nUnfortunately, many publicly available log files are sim-\nilarly outdated. Although this may imply that they are\nlikely to be well studied, it equally means they may not\nbe suitable for characterising modern streaming access\npatterns with VCR-like interactivity. It is perhaps for\nthis reason that many works in this field have instead\nmade use of privately obtained data, often from large\nnetworks such as Akamai\u2019s [2] or anonymous sources for\nnon-disclosure reasons.\nDespite this, many common trends are still observed\namongst differing Video-on-Demand workloads, old and\nnew. For instance, it is often found that only a small\npercentage of objects account for the majority of overall\nrequests. Similarly, a small percentage of the requests\noften account for a large percentage of the overall data\ntransfer. Accordingly, numerous papers have therefore\npostulated that the popularity of objects follows a Zipf\ndistribution [7,13,6,12], although some have also indi-\ncated that this is not always the case [5,1]. In terms\nof Video-on-Demand session arrivals several suitable\n(and often heavy-tailed) models have been suggested,\ne.g., the Poisson, Pareto and Exponential distributions\netc. [3]. In general terms, it seems that access patterns\ndepend highly on the nature of the content. Costa et\nal. highlighted this during their examination of four\nVoD workloads in three domains (education, entertain-\nment video and entertainment audio). For instance, the\nauthors found that educational content was far more\npopular in the daytime on weekdays, whereas requests\nfor entertainment-based content were more evenly dis-\ntributed across the entire week. They also note how a\nsmall yet significant fraction of users begin playback\nat arbitrary positions within the video, and issue an\nincreasing number of requests in correlation with the\nvideo length. In terms of the requests issued, \u2018pause\u2019\nwas found to be, by far, the most common interaction.\nIt was also noted that the probability of a given in-\nteraction was dependent on the type of the previous\ninteractions, although the number of these actions was\nirrelevant [7].\nAnother common observation was that the popular-\nity of media segments was either roughly uniformly dis-\ntributed or skewed towards the beginning of videos [7,\n3]. This is a property of the start-to-finish playback\nmodel where users passively watch from the begin-\nning to the end with little interactivity. Following from\nthis, multiple authors have observed that a substan-\ntial percentage of media downloads are aborted before\ncompletion. Guo et al. suggest that this may be a re-\nsult of clients conducting \u201cpseudo-streaming\u201d; in other\nwords, simply playing back a downloading video file as\nit arrives. The authors note that in comparison with\nreal streaming, downloading\/pseudo-streaming content\nis neither bandwidth efficient, nor performance effec-\ntive [10,1].\nThe majority of previous work into characterising\nuser behaviour in Video-on-Demand systems has con-\nsidered simple or VCR-like interactivity exclusively.\nThe impact of newer interactivity features such as book-\nmarking has not yet been considered to our knowledge.\nAccordingly, we designed our experiment to allow for\nthe study of such effects, as discussed in the following\nsection.\n3(a) System setup\n10s 30s 60s60s 30s 10s tag\nKick Off\nGoal 1-0\nHalf-time\n2nd Half\nGoal 1-1\nGoal 2-1\nFull-time\nBookmarks\nUser Bookmarks\nNasty foul\nRed card\n(b) Player interface\nFig. 1: Video-On-Demand system diagrams\n3 Experimental Setup\nWe set up a simple, interactive Video-on-Demand sys-\ntem1. The system was divided into three main compo-\nnents: the capture server, the Video-on-Demand server,\nand a web interface as depicted in Figure 1.\nOur capture server recorded publicly-broadcast raw\nMPEG-2 streams of the programmes selected for our\nexperiments. Once this process completed, the system\ntranscoded the stream to high and low bitrate Macro-\nmedia Flash 7 FLV files (1 Mbps and 300 Kbps re-\nspectively). Administrators would then manually add\nmetadata to the system describing the files as well as\nmarking the location of key events within the videos.\nThese locations are referred to as bookmarks, and typi-\ncally included events of interest. Within our sport con-\ntent, for example, goals, fouls and similar occurrences\nwere bookmarked. The final FLV files were then trans-\nferred to the VoD server, making them accessible to\nthe users. The full procedure described typically took\naround twice the length of the recorded video, and so\nthe videos were available shortly after being aired.\nThe VoD system was an Apache webserver, which\nserved the Flash-based user interface over HTTP. This\nserver was only accessible to staff and students within\nLancaster University\u2019s campus, and those staff and stu-\ndents connecting remotely via the university\u2019s Virtual\nPrivate Network (VPN). To aid in logging, all requests\nmade through the user interface were verbose, allowing\nus to determine exactly which controls users pressed\nand when. Additionally, each playback window would\nmaintain a periodic (10 second) HTTP-request heart-\nbeat with the server, which was used to determine when\nconnectivity was unexpectedly lost.\n1 More information about the system and its source code is\navailable at http:\/\/www.rcdn.org\/\nTo handle user tracking, each user was assigned a\nunique session ID, which was stored within a HTTP\ncookie and their URLs. Each event that was logged\ncontained this identifier, allowing us to track individ-\nual users throughout their visit to the site. If, however,\na user blocked or deleted their cookie, they would ap-\npear to be new to the system upon each visit. We note\nwithin our analysis where this uncertainty could affect\nthe results.\nThe web interface consisted of two main sections:\nan index page allowing the user to select any available\nvideo from the system, and the player interface that\ndisplayed the video (as shown in Figure 1b). We were\naware that the user interface would constrain the users\u2019\nactions somewhat, and it was therefore designed to be\nas simple and generic as possible. Forward and back-\nward buttons were provided that allowed seeking 10,\n30 and 60 seconds in either direction. As these are rela-\ntively short distances, we also provided a seek bar which\nenabled users to seek to any arbitrarily chosen time. Fi-\nnally, a list of bookmarks was displayed to the users,\nwhich enabled them to jump directly to key events.\nBookmarks were added by an administrator, but later\nthe interface was extended to also allow users to submit\ntheir own bookmarks (via the tag button), which other\nusers could see and use. User bookmarks often covered\nevents that were not typically bookmarked, but were\nof particular interest (such as events that came under\nlater scrutiny).\n3.1 Content\nWe ran our experiments in two phases, firstly cover-\ning the 2006 FIFA World Cup and nine months later\na wider range of sport and musical events. The con-\ntent selections were chosen because they had points of\n4interest to bookmark, and would yield sufficient user\ndemand.\nThe first experiment made available a total of 66\nmatches from the World Cup (64 from the event it-\nself, and 2 pre-competition friendlies) starting from the\n9th of June 2006. Only results after the 13th of June\nwere analysed due to alterations made to the logging\nsystem and user interface before that date. Each match\nwas recorded from the beginning of the pre-match com-\nmentary through to the end of coverage, and at the\nvery least every goal, penalty, and match start\/end-\npoint (inclusive of half-time) was bookmarked.\nFrom the 13th of April 2007 we began covering new\ncontent as part of a second experimental study. This\ntime, our approach was designed to test various auto-\nnomic management techniques, and to revalidate our\nprevious experimental results. Furthermore, we wished\nto determine the relevance of our analysis\/models to\nother genres (such as music). Over the following two\nmonths we covered the last six matches from the 2007\nUEFA Champions League football tournament, some\nother miscellaneous football matches, seven Formula 1\nraces, as well as several recordings from music chan-\nnels and the 2007 Eurovision Song Contest semi-final\nand final. The football matches were bookmarked in the\nsame manner as the previous World Cup event. In the\nFormula 1 content we bookmarked the beginning and\nend of the race, as well as any noteworthy events such\nas a driver having to retire (after a crash or technical\ndifficulties). Within the musical content the beginning\nof each track was bookmarked with its corresponding\nartist and title. A similar approach was taken with the\nEurovision Song Contest, where the beginning of each\nsong was bookmarked with the name of the country\ntaking part.\nIn total there were 88 videos, each video on average\nwas 2.5 hours in length with a standard deviation of\n30 minutes. The maximum video length was 4 hours,\nand the minimum length 45 minutes. There were 695\nbookmarks, with each video having on average 7.8.\n4 Analysis\nIn this section, we use traces from our system to char-\nacterise user behaviour and the resulting workload. Us-\ning a combination of R-Square fitting and Kolmogorov-\nSmirnov Tests, models for the various features were de-\ntermined. Aggregated results are shown when applica-\nble, but in some cases it is more appropriate to show\nresults for individual videos. We noted in many cases\nthe features analysed were similar for each video, so\nfor simplicity we will specifically discuss two individ-\nual videos in greater detail: the World Cup\u2019s Argentina\nvs. Serbia and Montenegro match, and the Eurovision\nSong Contest final. Both were amongst the top 5 most\npopular videos and were representative of their genres\n(namely sport and music). We will refer to these files\nas arg-scg and eurovision respectively.\nThroughout the two experiments we observed a to-\ntal of 1800 unique users to the site, with each video\nreceiving on average 68.2 unique users (and an overall\nmaximum of 383). During this period we served 925\nhours of video, which equates to 3.3 terabits of data.\nWe received an average demand of 287\u00b131 requests per\nday, with Thursday being the most popular. Through-\nout the day we saw the typical diurnal sinusoidal access\npatterns averaging 12\u00b1 10 requests per hour, reaching\nits peak at midday with an average demand of 29 re-\nquests per hour.\nWe witnessed 123 unique users for arg-scg, and 131\nunique users for eurovision, who watched for a com-\nbined total of 29.1 hours and 79.6 hours respectively.\nNote that if an individual does not maintain the same\nHTTP cookie between sessions (e.g., their cookie is\ndeleted) they will appear as a new unique user. Equally,\nif two individuals share the same cookie, they will ap-\npear as a single unique user. While we expect these\ncases to be rare, they may however introduce error into\nthe unique user count.\n4.1 Interactions\nRecall that our system allowed various interactive oper-\nations, namely pausing, resuming, seeking forwards &\nbackwards, and jumping to bookmarks. This range of\noperations, combined with the nature of the content,\nhighly influenced user behaviour. As a result, for most\nusers we observed a complete departure from the typi-\ncal start-to-finish playback model that has been noted\nin previous work [7].\nTable 1 shows, over the duration of the experi-\nment, the frequency of each action and its correspond-\ning percentage against all other operations. Small for-\nward seeks were used a combined 24.9% of the time,\nwhereas backward seeking was only used 7.67%. These\nactions only accounted for the relatively small seeks\n(10, 30, and 60 seconds), whereas potentially large seeks\n(seek-bar and following bookmarks) made up 34.5% of\nall operations. The table also shows that in each ses-\nsion (a viewing of a single video), a user on average\nused backward actions once, bookmarks and seek bar\nactions 4.5 times, and forward actions 3.25 times.\nPrevious studies have shown that the most common\naction is pause\/resume [7], however we see that for our\ntraces, forward operations are by far the most common,\n5Action Frequency Percentage (%) Mean & Standard Deviation (\u03c3) per Session\nBack 10s 3098 4.50 0.59 (\u03c3 = 3.14)\nBack 30s 654 0.95 0.12 (\u03c3 = 0.83)\nBack 60s 1532 2.22 0.29 (\u03c3 = 1.90)\nForward 10s 7438 10.79 1.41 (\u03c3 = 8.61)\nForward 30s 1804 2.62 0.34 (\u03c3 = 2.93)\nForward 60s 7930 11.51 1.50 (\u03c3 = 7.38)\nSeek-bar 9902 14.37 1.88 (\u03c3 = 7.39)\nBookmarks 13857 20.11 2.62 (\u03c3 = 2.63)\nUser bookmarks 1236 1.79 0.23 (\u03c3 = 1.01)\nPause 11839 17.18 2.24 (\u03c3 = 7.65)\nResume 9616 13.96 1.82 (\u03c3 = 6.80)\nTable 1: Interactions observed throughout the experiment\nclosely followed by seeking to bookmarks. The table\nalso shows that the number of pause operations account\nfor 17.18% of all actions. Pausing not being the most\ncommon action can be explained by the short session\ndurations observed. This is in accordance with previous\nwork which found a positive correlation between session\ntime and the number of pause operations [14].\nTo better understand how users navigated through\na bookmarked video, we analysed the behaviour in the\narg-scg and eurovision videos, which had 10 and 24\nbookmarks respectively. In Figures 2a & 2b each point\nis a seek that is identified by a \u201cfrom\u201d time on the x-axis\nand a \u201cto\u201d time on the y-axis. A point x, y therefore\nrepresents a user that has jumped from their current\nplayback point x to a new point, y. Vertical and hor-\nizontal lines in the figures denote the position of the\nbookmarks. The diagonal line is a current-time marker\nsuch that seeks forward are points which lie above it,\nwhile seeks backward appear below it. Therefore, no\npoint can fall precisely on the diagonal. It is immedi-\nately obvious from the figures that many points are on\nhorizontal lines, implying that most seeks were to the\nbookmarks.\nThe forward seek buttons appear to have been\nmostly used for skipping to the next event, shown on\nboth figures as points slightly above the diagonal line\nbetween the bookmarks. This could be due to user unfa-\nmiliarity with the bookmark interface, or possibly users\nsimply browsing the video. Backward actions were typ-\nically used around bookmarks, where users would often\nre-watch the bookmarked event. In some cases users\nmay also have wished to see video immediately preced-\ning the bookmark. An example of this is shown in Fig-\nure 2a before the bookmark at time 2815, where users\nsought up to 75 seconds backwards to see more of the\nbuild up to the goal.\nClusters of points can also be seen on horizontal\nlines shortly after a vertical line, indicating that users\njumped from bookmark to bookmark. In fact, the con-\ncentration of clusters of point just above the diagonal\ntime reference indicates that users have a tendency to\nfollow bookmarks in sequence, as exemplified in Fig-\nure 2b.\nOverall, for both videos these results demonstrate\nthat users did not simply view continuously start-to-\nfinish, and were in fact highly influenced when pre-\nsented with bookmarks.\n4.2 Seek Distance\nThe understanding of locality is important for caching\nand pre-fetching algorithms. By looking at how far\nusers sought we can determine the probability of ac-\ncessing media nearby the playback point. We therefore\ndefine seek distance as the absolute difference, in sec-\nonds, between a user\u2019s current playback point and their\nrequested seek destination.\nFigures 3a & 3b display a CDF of seek distance\nfor backward and forward actions. A large proportion\nof seeks (between 50%-70%) are of a 15 seconds, 30\nseconds, or 60 seconds values. These seeks represent the\nshort seek button presses. 40% of backward seeks were\nless than or equal to 15 seconds in length. This property\ncould be exploited by keeping a small client side buffer\nof previously watched segments, which would satisfy\nmany backward seeks if the user has already viewed\nthem.\nEven though small seeks are the majority, there are\nbetween 30% and 50% of seeks which are further than\n60 seconds. These seeks consist of jumps to bookmarks\nor \u201cblind\u201d seeks with the seekbar. These long range\nseeks are log-normally distributed with a mean of 1968\nseconds and 1630 seconds for forward and backward\nseeks respectively. They can be fitted to log-normal\nmodels with parameters \u00b5 = 6.8269 and \u03c3 = 1.5953\nfor forward seeks, and \u00b5 = 6.3273 and \u03c3 = 1.7906 for\nbackward seeks. It can been seen that the backward dis-\ntribution has a greater positive skew than the forward\ndistribution, thus it will generate many small seeks.\n6 0\n 1000\n 2000\n 3000\n 4000\n 5000\n 6000\n 7000\n 8000\n 0  1000  2000  3000  4000  5000  6000  7000  8000\nTo\n ti\nm\ne \n(s\nec\non\nds\n)\nFrom time (seconds)\nJump forward\nJump back\n(a) Argentina vs. Serbia and Montenegro\n 0\n 500\n 1000\n 1500\n 2000\n 2500\n 3000\n 3500\n 4000\n 0  500  1000  1500  2000  2500  3000  3500  4000\nTo\n ti\nm\ne \n(s\nec\non\nds\n)\nFrom time (seconds)\nJump forward\nJump back\n(b) Eurovision (cropped at 4000 seconds for clarity)\nFig. 2: Jumps made by users within two videos\n 0\n 0.1\n 0.2\n 0.3\n 0.4\n 0.5\n 0.6\n 0.7\n 0.8\n 0.9\n 1\n 0  20  40  60  80  100  120  140  160  180  200\nCD\nF\nSeek Distance (seconds)\nForward Seeks\nBackward Seeks\n(a) Small scale\n 0\n 0.1\n 0.2\n 0.3\n 0.4\n 0.5\n 0.6\n 0.7\n 0.8\n 0.9\n 1\n 0  2000  4000  6000  8000  10000  12000  14000\nCD\nF\nSeek Distance (seconds)\nForward Seeks\nBackward Seeks\n(b) Large scale\nFig. 3: CDF of seek distance\nThese behaviours exhibit a high degree of spatial\nlocality, with the majority of seeks being within 60\nseconds. Regarding long-ranged seeks, the log-normally\ndistributed models imply that some very large distance\nseeks do occur, but the majority of seeks are shorter.\nOverall the seek distances exhibit a median of 60 sec-\nonds for forward seeks and 34 seconds for backward\nseeks.\n4.3 Popularity\nWe study popularity in terms of the number of viewers\nwho watched an object or a segment. An object in our\nsystem is a single video whereas a segment is a section\nof video one second in length.\nThe ranking for both object and segment popularity\nis shown in Figure 4. The eurovision, and arg-scg were\napproximately 10,000 seconds in length, causing 10,000\nsegments to be ranked for each video. Recall that only\n88 videos were available, so the lowest object rank is 88.\nOur analysis reveals that object popularity does not fol-\nlow the typical power-law distribution observed within\nCDNs [6,3,15] but instead is a normal distribution with\nparameters \u00b5 = 60 and \u03c3 = 32. This can be attributed\nto the nature of our videos and the relatively few new\nobjects each day.\nThe popularity of one-second segments for all the\nvideos exhibit a Weibull distribution with parameters\n\u03bb = 2.887 and k = 0.69527. Log-normal distributions\nprovide the best fits for the arg-scg and eurovision re-\nsults independently with parameters \u00b5 = 2.00, \u03c3 =\n0.587 and \u00b5 = 2.32, \u03c3 = 0.567 respectively. Note that\nlog-normal and Weibull distributions closely relate to\npower-law or heavy-tailed distributions [11,9]: they are\nskewed distributions where a small percentage of sam-\nples contributes to a sizeable weight of their distribu-\ntion. We observe that a small percentage, (the 10%\nmost popular segments), accounted for about 44% of all\nrequests. Previously, Costa et al. [7] found that for ed-\n7 1\n 10\n 100\n 1  10  100  1000  10000\nN\num\nbe\nr o\nf v\nie\nwe\nrs\nRank\nObject Popularity\nSegment Popularity (eurovision)\nSegment Popularity (arg-scg)\nFig. 4: Object and segment popularity\nucational and entertainment content, the popularity of\nsegments is roughly uniformly distributed with a slight\nskew towards the beginning for entertainment content.\nOur result, however, implies that there are segments\nwith orders of magnitude more viewers than others.\nTo illustrate the order-of-magnitude differences in\nviewers, we present Figures 5a & 5b which show the\npopularity of each second of video for arg-scg and eu-\nrovision respectively. The vertical lines signify the po-\nsition of the bookmarks; note for the eurovision video\nthere were no bookmarks after 6000 seconds since the\nperformances bookmarked were only in the first half. It\nis clear from the figures that there are peaks of popu-\nlarity, highly influenced by the bookmarks. In arg-scg\n(and in other sport content) we observe that most of\nthe bookmarks are equally popular. However, in the\neurovision (and other music genres), we observe there\nis a greater variance in the popularity of the book-\nmarks. This can be attributed to sports having numer-\nous events which all users wish to watch, however in\nmusic videos there may be only certain artists which\ninterest the user.\nPopularity metrics are important to many CDN al-\ngorithms as they help to decide which resources to al-\nlocate to each object. We have seen that bookmarked\nvideos provide a content format with specific segments\nof interest (goals, for example). This result emphasises\nthe use of partial caching techniques [4] to cache only\npopular segments.\n4.4 Longevity\nThe popularity of both videos and bookmarks in our\nsystem faded over time. We call the duration at which\nany such item remains utilised its longevity. The study\nof a video or bookmark\u2019s longevity can aid cache re-\nplacement policies, as well as other content manage-\nment decisions.\nFigure 6 shows the popularity of all our bookmarks\nversus the time they were first used. The figure suggests\nthat following an initial peak and a slight resurgence,\nthere was a rapid decrease in interest after a short\nperiod. R-Square fitting reveals that the bookmark\nlongevity can be suitably estimated using a Weibull dis-\ntribution with \u03bb = 3.10 and k = 0.615. This suggests\nthat the popularity exhibits long-tailed properties. We\nalso observe that 40% of the bookmark usage occurs\nwithin 24 hours, with the remainder slowly occurring\nover the following weeks.\nThe popularity of videos decreased over time, but\nthis is not true for the popularity of segments within\nthe videos. The segments which were popular when the\nvideo was first published were still popular within the\nvideo weeks later, long after the video had lost popu-\nlarity. This was tested on each video by calculating the\ndistribution of segment popularity for the first 50% of\nrequests versus the last 50% of requests. The difference\nin distributions was minor, with an average R-Square\nvalue of 0.9. On a visual inspection of the number of\nviewers per second, it was clear that the popularity still\nfocused around the bookmarks.\n4.5 Session Lengths\nSession length is the total time a user accessed a video,\nregardless of the actions they may have taken whilst\ndoing so. For example, a session may be longer than\nthe actual length of the video if the user chose to re-\nwatch segments, and\/or pause.\nFigures 7a & 7b show the CDF of both session and\ninter-seek times (discussion of inter-seek times follows\nin the next subsection). It can be observed from the ses-\nsion times that most users access each video for a very\nshort time relative to its overall length (possibly just\nwatching the events they are interested in). In particu-\nlar, note that in the arg-scg case around 80% of sessions\nlasted less than 15 minutes. Given that the video was\n2.2 hours in length, 15 minutes corresponds to only 11%\nof the total video. A similar result was found with eu-\nrovision, with 80% of sessions lasting less than 12% of\nthe total video duration. The average session duration\nwas found to be only 11 minutes and 18 minutes for\narg-scg and eurovision respectively.\nWe also found that a small minority (roughly 3%)\nof session durations were longer than the length of a\nvideo. Of these durations roughly 39% were between 3\nto 8 hours long. Our logs show that these users paused\nfor a long time before deciding to resume playback.\n8 0\n 20\n 40\n 60\n 80\n 100\n 0  1000  2000  3000  4000  5000  6000  7000  8000\nVi\new\ner\ns\nTime (seconds)\nKick Off\nGoal\nGoal\nGoal\nHalf-time\n2nd half\nGoal\nGoal\nGoal\nTime\n(a) Argentina vs. Serbia and Montenegro\n 0\n 20\n 40\n 60\n 80\n 100\n 120\n 140\n 0  2000  4000  6000  8000  10000\nVi\new\ner\ns\nTime (seconds)\n(b) Eurovision\nFig. 5: Number of viewers at each second of video (each vertical line represents the position of a bookmark)\n 0\n 100\n 200\n 300\n 400\n 500\n 600\n 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14\nR\neq\nue\nst\ns \npe\nr h\nou\nr\nTime online (days)\nFig. 6: Bookmark utilisation over time, following\ninitial usage\n4.6 Inter-seek Times\nInter-seek time is described as the duration for which\na user watched a section of a video before seeking to\na new location (disregarding any paused periods). This\ncan be useful, for example, to determine the amount to\nreplicate when using partial caching.\nFrom our logs, we found that on average a user per-\nformed 8.98 seek operations around a video, resulting in\na mean inter-seek time of 50.4 seconds. Figures 7a & 7b\nshow the CDF for inter-seek times as well as session\nlength. As the inter-seek times are generally shorter\nthan session times, this implies that the majority of\nusers viewed the content as a series of excerpts, usually\nunder a minute in length.\nThe inter-seek time in the music content was found\nto be on average longer. This is because the length of a\nbookmarked musical performance generally exceeds the\nlength of an event within a football match. Regardless\nof the difference in inter-seek times, we found that they\ncan be estimated by log-normal distributions. For in-\nstance, the inter-seek time for arg-scg can be modelled\nwith parameters \u00b5 = 2.15 and \u03c3 = 1.72.\nPrevious studies have found that the majority of\ninter-seek times are very short [14]. For educational\ncontent, inter-seek times have also been shown to be\nPoisson or Pareto distributed [3]. We however found\nonly two thirds of our videos had inter-seek times that\ncould be suitably modelled by a Pareto distribution,\nand none that could be modelled well with a Poisson\ndistribution. Models of inter-seek times can be used by\na delivery system to determine the size of video repli-\ncas and the time available to react before a user seeks\nelsewhere in the video.\n4.7 Sequence\nThe traces were analysed to study the extent to which\nusers\u2019 actions could be predicted. Since jumps to book-\nmarks made up a relatively large percentage of all re-\nquests, we limit this prediction to which bookmark will\nbe visited next. If a system could predict which book-\nmark would be requested next by a user, then it could\npro-actively respond in order to optimise content de-\nlivery. For example, based on the next predicted book-\nmark, the relevant segments could be pushed out by a\nserver with spare capacity, or pre-fetched by a client.\nWe call the order that bookmarks are viewed by a\nsingle user a sequence of bookmarks. Every user\u2019s se-\nquence can be aggregated together to form a directed\ngraph. Each node in the graph represents a bookmark\nwith links between them representing the probability of\nseeking to that bookmark next. Figure 8 shows a sec-\ntion of one of these directed graphs depicted as a tree\nfor clarity. The \u201cStart\u201d node represents the beginning\n9 0\n 0.2\n 0.4\n 0.6\n 0.8\n 1\n 1  10  100  1000  10000\nCD\nF\nTime (seconds)\nInter-seek times\nSession times\n(a) Eurovision\n 0\n 0.2\n 0.4\n 0.6\n 0.8\n 1\n 1  10  100  1000  10000\nCD\nF\nTime (seconds)\nInter-seek times\nSession times\n(b) Argentina vs. Serbia and Montenegro\nFig. 7: CDFs of session lengths and inter-seek times\n44.2 15.6 11.7 6.5 5.8 16.2\n80.0 11.8 8.2 50.0 37.5 6.3 6.3\n63.6 14.1 12.1 10.1\n75.0 17.1 7.9\nStart\nGoal 1-0 Unknown Goal 2-0 Kick Off End 7 Others\nGoal 2-0 Unknown 7 Others Unknown Goal 1-0 Goal 2-0 Start\nGoal 3-0 Unknown End 7 Others\nGoal 4-0 Half-time 7 Others\nFig. 8: Sequence diagram for Argentina vs. Serbia and\nMontenegro depicted as a tree\nof the video, and the \u201cEnd\u201d node represents the com-\npletion of a session. There is also an \u201cUnknown\u201d node\nwhich signifies when a seek to another bookmark has\nnot been made within 200 seconds of visiting the pre-\nvious bookmark (the observed upper bound for book-\nmarked events\u2019 length). For clarity, links with low prob-\nabilities have also been aggregated to form a \u201cN Oth-\ners\u201d node, where N is the number of aggregated links.\nIt is clear from the figure that there are multiple\nchoices to visit from each node, although there is gen-\nerally one link that is significantly more likely to be\nchosen. For example, the probability of viewing book-\nmark \u201cGoal 2-0\u201d immediately after \u201cGoal 1-0\u201d is 80%.\nWe can also see that following the \u201cKick Off\u201d bookmark\n50% of users did not visit another bookmark within 200\nseconds and instead continue to watch, this could indi-\ncate that this subset of users were interested in watch-\ning the full game instead of just the highlights. An in-\nteresting observation for caching is the occurrence of\nself-loops. 6% of links were between the same two book-\nmarks, which made up 6.5% of all requests.\n 0\n 0.1\n 0.2\n 0.3\n 0.4\n 0.5\n 0.6\n 0.7\n 0.8\n 0.9\n 1\n 0  20  40  60  80  100\nCD\nF\nSequence Graph Link Probability (%)\nAll links\nMost popular link from each state\nFig. 9: CDF of link probabilities for all videos\nTo understand how many bookmark-to-bookmark\nlinks are predictable, Figure 9 shows a CDF of proba-\nbilities for all links for all videos, as well as probabili-\nties for just the most popular link from each bookmark.\nFrom this figure we can conclude that 10% of all links\nhave more than a 58% chance of being followed. Look-\ning at just the most popular link from each bookmark\nwe observe that over half of the bookmarks have an out-\ngoing link with a probability over 50%; an encouraging\nresult for user predictability.\nIn this analysis we assumed that all users will visit\nthe bookmark in similar order, however in a large het-\nerogeneous environment this may not be true. Different\nsub-groups may wish to view a different set of events\npossibly in a different order to other sub-groups. Across\nour videos we did try and identify if there were groups\nof individuals that behaved differently to the majority,\nhowever none were found. This could possibly be due\nto our genre of media, with all sports fans wishing to\nsee the same events, in the natural sequential order.\n10\n 0\n 0.2\n 0.4\n 0.6\n 0.8\n 1\n 0  20  40  60  80  100  120  140  160  180\nCD\nF\nWait time (seconds)\nStart\nGoal 2-0\nGoal 1-0\nGoal 5-0\nGoal 4-0\nGoal 3-0\n(a) Argentina vs. Serbia and Montenegro\n 0\n 0.2\n 0.4\n 0.6\n 0.8\n 1\n 0  20  40  60  80  100  120  140  160  180\nCD\nF\nWait time (seconds)\nStart\nUnited Kingdom\nSerbia\nFinland\nRussia\nIreland\nUkraine\n(b) Eurovision\nFig. 10: CDFs of wait times\n4.8 Hotspot Length\nJumps to bookmarks comprised roughly 20% of all re-\nquests with an additional 32% of seeks being within 60\nseconds of a bookmark. Bookmarks form the majority\nof requests within the content, and represent the be-\nginning of a popular segment of video which we call a\nhotspot. The beginning of a hotspot is generally known\n(i.e., the bookmark point), but the end is not. Knowing\nthe length of the hotspot can be useful for numerous\ntasks such as caching and pre-fetching. We therefore\ndefine wait time as the time elapsed between a user\nfollowing a bookmark and seeking.\nFigures 10a & 10b show a CDF of wait times for\neach bookmark in the arg-scg and eurovision videos. It\ncan be seen that in the football match the wait times\nfollow a similar distribution, with the majority of users\nwaiting less than 40 seconds (this, for example, could\ncorresponds to the length of a run up to a goal). The\neurovision results are more varied with average wait\ntimes being much longer. This is due to the typical song\nin the Eurovision Song Contest being 180 seconds in\nlength. Finally, there is a \u201cStart\u201d bookmark listed in\nboth figures: this is the entry point into both videos,\nand does not correspond to any event.\nTo better understand the wait times, distributions\nwere fitted. In the general aggregated case a Weibull\nmodel fits best with parameters \u03bb = 24.594 and\nk = 0.7034. For individual bookmarks log-normal and\nWeibull models proved best in the majority of cases.\nWith these models the upper bound of a hotspots\u2019\nlengths can be extrapolated by using, for example, the\n95th percentile.\n4.9 User Behaviour Models\nModel fitting is important for understanding the dif-\nferent properties of the system, and aids in simulation\ncreation and algorithmic design. Various models have\nbeen discussed for the different parameters of the sys-\ntem. In all cases many models (e.g., normal, log-normal,\nexponential, Weibull, Pareto, Poisson, Zipf) were fitted\nto the data with varying success. Generally, more than\none distribution fitted well. This subsection will sum-\nmarise the analytical models found for each parameter.\nTable 2 gives an overview of the best matching mod-\nels for each metric discussed previously, with their cor-\nresponding R-square values. Of particular importance\nare the types of distribution which can have a signifi-\ncant impact on the system. For example, the Weibull\nand log-normal models are both long-tailed, and sys-\ntems may have to anticipate the skewed distribution to\ncope effectively.\nThe models shown so far are from aggregated results\nacross all the videos. Instead, it may be interesting to\nmodel the different metrics of each particular video.\nHowever due to the diversity in models and parameters\nit is not possible to show each model, so instead Ta-\nble 3 summaries which models fit with a R-square value\ngreater than 95%. The \u201cmax models\u201d column represents\nthe number of datasets that are of sufficient size to have\nmodels fitted. For example, there are 695 bookmarks,\nyet only 203 had enough data to be fitted to a hotspot\nlength, and of these, 165 fitted well to a Log-normal\nmodel, 135 to a Weibull models, etc.\n4.10 Summary\nOur results have shown that the interactivity options\navailable to users highly influence their behaviour. In\n11\nMetric Distribution R-square\nObject Popularity Normal ( \u00b5 = 60.129 , \u03c3 = 32.111 ) 0.97996\nSegment Popularity Log-normal ( \u00b5 = 0.551 , \u03c3 = 1.32 ) 0.98084\nWeibull ( \u03bb = 2.887 , k = 0.69527 ) 0.98284\nSession Length Log-normal ( \u00b5 = 4.73, \u03c3 = 1.90 ) 0.99779\nWeibull ( \u03bb = 233.17, k = 0.51125 ) 0.98666\nInter-seek times Log-normal ( \u00b5 = 1.2886, \u03c3 = 2.318 ) 0.99644\nWeibull ( \u03bb = 7.5243, k = 0.35646 ) 0.99353\nSeek Distance (forward) Log-normal ( \u00b5 = 7.2668, \u03c3 = 1.2194 ) 0.99567\nSeek Distance (backward) Log-normal ( \u00b5 = 7.195, \u03c3 = 1.3132 ) 0.99083\nHotspot Length Log-normal ( \u00b5 = 2.6361, \u03c3 = 1.388 ) 0.98463\nWeibull ( \u03bb = 24.594 , k = 0.7034 ) 0.99545\nBookmark Longevity Weibull ( \u03bb = 3.1004 , k = 0.61592 ) 0.99796\nTable 2: A summary of metrics with their corresponding distributions\nMetric Max Models Log-normal Weibull Pareto Normal Exponential Zipf No fit\nSegment Popularity 84 (from 88 videos) 61 65 12 58 42 13 17\nSession Length 81 (from 88 videos) 75 72 0 5 31 4 0\nInter-seek times 87 (from 88 videos) 83 83 54 1 3 55 3\nHotspot Length 203 (from 695 bookmarks) 165 135 91 5 48 53 22\nTable 3: Metrics for individual videos and their corresponding distributions\nparticular, it was found that the novel interactive fea-\nture of bookmarking played a pivotal role, leading to\naccess patterns quite dissimilar from previous related\nstudies that looked at VCR-like interactivity alone.\nThe combination of our content type and the addition\nof bookmarks led to users accessing content in rela-\ntively short segments sparsely distributed throughout\nthe length of the videos. Segment popularity is skewed\nwith the most popular segments clearly around the\nbookmarks, forming hotspots. From both a user and\na CDN\u2019s perspective, this can be viewed as advanta-\ngeous; users can reach interesting content more quickly\nthrough the bookmarks, and the increased locality of\ninterest means CDNs can respond more effectively by,\nfor example, prioritising hotspot replication.\nContent placement is an important and difficult\nproblem for CDNs. The CDN has to decide where\nwithin the network to replicate or cache content. Typi-\ncally the content is placed near to the users, and repli-\ncated as a whole. However, as we have seen, not all\nsegments within a piece of content are equal and a\nCDN can leverage this information to replicate cer-\ntain segments more than others. This is especially use-\nful when popularity nearly always concentrates around\nbookmarks, allowing the relevant segments to be repli-\ncated throughout the network before user demand in-\ncreases.\nA CDN could be designed to handle high levels\nof user interactivity, with relatively short sessions and\ninter-seek times. Our results have shown that hotspots\nfollowing bookmarks were orders of magnitude shorter\nthan the video containing them. Furthermore, it en-\ncourages the use of an agile delivery mechanism that al-\nlows distribution of small sparsely distributed segments\nquickly and efficiently.\nWe have also shown that users view the bookmarks\nin a similar order, giving them a degree of predictabil-\nity. This could allow a CDN to exploit pre-fetching tech-\nniques to improve the user\u2019s experience. For example, if\nthe CDN could predict the next segment the user will\nwatch, then this could be pre-fetched into the user\u2019s\nplayback buffer and when the user seeks to that seg-\nment there will be no delay caused by seek latency and\nbuffering.\nThe use of bookmarks depends on them being well\npositioned and of interest to the user. We noted in\nthe first experiment that 40% of bookmarks had at\nleast one user seek before the bookmark, with 30.7%\nof these seeks occurring within 5 seconds of jumping to\nthe bookmark. This perhaps represents users who were\nalmost immediately dissatisfied with the bookmark\u2019s lo-\ncation. We noted this happened consistently for roughly\n6% of the total bookmarks. Upon further inspection, it\nappeared the bookmarks were inadvertently misplaced.\nThis led to users performing additional seeks to find the\ncorrect location, thus placing extra load on the servers.\nIn Section 5, we explore and study the implications\nof two techniques designed to exploit some of the prop-\nerties suggested from our analysis.\n5 Techniques for Interactivity Support\nDuring our second video trial, we took the opportunity\nto go beyond characterising user behaviour, by test-\ning autonomic content management techniques in a live\nsystem. In this section we discuss and analyse a simple\n12\nScenario A\n1. Jumps to Bt 2. Watches for w\n3. Seeks to St (St < Bt)\nScenario B\n1. Jumps to Bt 2. Watches for w\n3. Seeks to St (Bt < St < Bt + w)\nScenario C\n1. Jumps to Bt 2. Watches for w\n3. Seeks to St (St > Bt + w)\nFig. 11: Different scenarios that may induce bookmark\nmovement\ndynamic bookmark placement technique, as well as an\ninteractivity-aware content pre-fetching method based\non the prediction of which bookmark would be viewed\nnext.\n5.1 Moving Bookmarks\nDuring our video trials, bookmarks were appropriately\npositioned by administrators before the video was pub-\nlished. It was previously noted that a small percentage\nof bookmarks were unintentionally misplaced. There\nare many reasons why a bookmark could be misplaced,\nsuch as human error, or a lack of insight into user re-\nquirements. For example: a bookmark could be placed\nbefore a penalty kick, but many users may first wish to\nsee the foul that led to the penalty. As such, it could\nbe beneficial if the system could autonomically detect\npoorly placed bookmarks and correct them based on\nfeedback derived from the user\u2019s actions.\nTo develop a reactive algorithm that moves book-\nmarks dependent on user behaviour, different possible\nscenarios should first be explained. Figure 11 shows\nthree different sequences of actions a user would follow\nshortly after seeking to a bookmark.\nScenario A shows the user briefly viewing the book-\nmark, then seeking to a time earlier than it. While this\ncould indicate that the bookmarked event was short\nand that the user wanted to view it again, it could\nequally imply that the bookmark was placed later than\nit should have been.\nScenario B is similar to Scenario A but differs in\nthat the user does not seek back to a point before\nthe bookmark; this means the user is simply replay-\ning footage, thus implying the bookmark is correctly\nplaced for that individual.\nScenario C represents a situation in which the user\u2019s\nmotives are difficult to determine. Since they watch\nbriefly then seek forward, several possibilities exist: the\nbookmarked event may have ended, the bookmark may\nhave been placed prematurely, or the user is simply\nseeking forward towards the next event.\nA further possibility, not shown in the figure, is for\na user to seek far away from a bookmark in either di-\nrection. Since it is unlikely their destination would be\nrelated to the bookmark, such an action would not in-\ndicate the bookmark was incorrectly placed.\nScenario A and Scenario C are therefore the only\nscenarios where the user\u2019s actions could indicate the\nbookmark is misplaced. All other actions should rein-\nforce the position of the bookmark to reduce future\nmovements once it is correctly placed. Additionally\nsince we are less sure of the user\u2019s intentions in Scenario\nC we should only make minor changes to the book-\nmark\u2019s placement to limit the impact of false-positives.\nAlgorithm 1 has been developed to identify these\nsituations and act appropriately with regard to moving\na bookmark. An exponential moving average (EMA)\nis used to recalculate the bookmark\u2019s position with a\nsmoothing constant \u03b1. The value used for \u03b1 is depen-\ndent on the identified scenario. Initially these values\nwere 0.1 and 0.05 allowing us to place greater con-\nfidence in the seeking-backward Scenario A than the\nseeking-forward Scenario C. These values were chosen\nas the intuitive first guesses for experimental purposes,\nand should be refined with future experiments. For our\ntesting scenario we also used maximum wait times of\n20 and 60 seconds for backward and forward seeks re-\nspectively. These maximum values were chosen because\nthey exceeded approximately 80% of all wait times.\nTo test this algorithm, several of the bookmarks\nin our second video trial (not our initial World Cup\nexperiment) were deliberately misplaced by different\namounts before they appeared on the live site. Over\ntime the bookmarks were moved autonomically by our\nalgorithm. For example, Figures 12a & 12b show the po-\nsition of a single bookmark as it was moved by the sys-\ntem with respect to time and received requests. In both\ncases the system responds and the bookmark quickly\nmoves to a new position, and then gradually converges\nuntil it becomes stable. In most cases the majority of\nmovements were only in one direction, but for a cou-\n13\n 7410\n 7415\n 7420\n 7425\n 7430\n26\/04 27\/04 28\/04 29\/04 30\/04 01\/05 02\/05 03\/05 04\/05 05\/05\nBo\nok\nm\nar\nk \nPo\nsi\ntio\nn\nTime (day\/month)\n(a) Position over time\n 7410\n 7415\n 7420\n 7425\n 7430\n 0  10  20  30  40  50  60  70  80  90\nBo\nok\nm\nar\nk \nPo\nsi\ntio\nn\nRequests (for this bookmark)\n(b) Position over requests for bookmarks\nFig. 12: Manchester United vs Milan single bookmark position\nAlgorithm 1 Bookmark moving algorithm\n\/\/ Bt is the location of the bookmark at time t\n\/\/ St is the location the user sought at time t\n\/\/ w is the time the user waited before seeking to St\nif St < Bt then\n\/\/ The user seeks backwards before the bookmark\nif w <= 20 and St > (Bt \u2212 60) then\n\/\/ The seek occurred within 20 seconds of viewing the\nbookmark and lands within 60 seconds of the bookmark\n\u03b1 = 0.1\nBt+1 = \u03b1St + (1\u2212 \u03b1)Bt\nend if\nelse if St > (Bt + w) then\n\/\/ The user seeks forward\nif w <= 60 and St < (Bt + 120) then\n\/\/ The seek occurred within 60 seconds of viewing the\nbookmark and lands within 120 seconds of the bookmark\n\u03b1 = 0.05\nBt+1 = \u03b1St + (1\u2212 \u03b1)Bt\nend if\nend if\nple of bookmarks the positions oscillated between two\nvalues. The most prominent example of this was a foul\nin a football match which led to a penalty. Some users\nwished to see the foul but others only wished to see\nthe penalty a minute later. In these small number of\ncases it is subjective to decide if a bookmark is correctly\nplaced, and in fact using this algorithm the bookmarks\nmay never converge to a single point. In such cases, it\nmay be best to bias the bookmark towards the earlier\nposition, so both the early and later events can easily\nbe seen.\nInstead of subjectively deciding if a bookmark has\nmoved to its correct location, we examined how much\ntraffic might have been saved by moving the bookmark\nto a new location. If, for example, a bookmark was\nmoved forward 10 seconds closer to the desired loca-\ntion, and a user views for 90 seconds, then by moving\nthe bookmark we have potentially stopped video being\ntransferred which might have normally been skipped\nover. A reduction of 10\/(90 + 10) = 10% is there-\nfore made. Of course, this is only true if the user does\nnot seek backward to watch the skipped 10 seconds, in\nwhich case we save nothing, and in fact incur an extra\nseek. Figure 13a displays a CDF of the potential reduc-\ntion in viewing duration per bookmark request from\nthe use of the algorithm. We can see that 16% of the\nrequests made no saving: these are accounted for by\nearly requests before the bookmarks were moved, and\nrequests where the user incurs an additional seek.\nFigure 13b illustrates how rapidly these reductions\nare made (and whether or not they are sustained)\nthrough a plot of the fractional potential saving versus\nthe number of requests received across all the moved\nbookmarks. For the first 20% of requests the reduc-\ntions are low yet they improve, and then stabilise at a\nreduction of between 30-40% per request. The 95% con-\nfidence intervals are quite wide in most cases (averaging\naround \u00b110 seconds) although this variance is mostly\ndue to differences in playback length and not the 16%\nof requests with no saving.\nWith minimal processing this simple algorithm has\nbeen able to reposition the bookmarks to more appro-\npriate locations based on observed user behaviour, re-\nsulting in consistent traffic reductions. The algorithm\ncan still be improved by fine tuning the \u03b1 values. Larger\nvalues would move the bookmark more quickly at the\ncost of increasing the probability of incorrect decisions.\nThis investigation has been left for future work.\n5.2 Predictive Pre-fetching\nDue to the increased interactivity of users and their de-\nparture from the start-to-finish model, it is no longer\n14\n 0\n 0.1\n 0.2\n 0.3\n 0.4\n 0.5\n 0.6\n 0.7\n 0.8\n 0.9\n 1\n 0  20  40  60  80  100\nCD\nF\nReduction in viewing duration (%)\n(a) CDF of percentage reduction in viewing duration\n 0\n 10\n 20\n 30\n 40\n 50\n 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1\nR\ned\nuc\ntio\nn \nin\n v\nie\nw\nin\ng \ndu\nra\ntio\nn \n(%\n)\nFraction of bookmark requests received\nSaving\n95% Confidence Interval\n(b) Percentage reduction in viewing duration versus received re-\nquests\nFig. 13: Reduction in viewing duration due to the algorithm\nwise to only pre-fetch ahead of the playback point. How-\never, as noted in Section 4.7 it is still possible to pre-\ndict which bookmark a user will view next, allowing\nthe client to intelligently pre-fetch content, benefitting\nboth clients and servers. For the clients, pre-fetching re-\nmoves seek latency when seeking to a pre-fetched seg-\nment, both in terms of the network seek latency in-\ncurred and also the time taken to buffer enough video\nfor playback, as well as helping to avoid buffer under-\nruns under poor network conditions. Similarly, on the\nserver side, pre-fetching can help reduce the peak server\nload by increasing the load at quieter times with pre-\nfetching requests, thus making the overall load more\nuniform.\nHowever, pre-fetching does come with a cost; re-\nsources are wasted if a segment is downloaded and never\nused. Deciding which segments to pre-fetch is there-\nfore an important task. We devised a set of pre-fetching\nstrategies which we tested within a simulator driven by\nthe eurovision trace obtained from our system. Clients\nwere provisioned with a dedicated link to the server, ca-\npable of transferring twice the bitrate required to play\nthe content. Once a client has fetched enough data to\nfill a 5 second playback buffer, half of their bandwidth\nis allocated to the pre-fetcher whilst the other half con-\ntinues to fill the playback buffer.\nFor simplicity, and because interest always formed\naround bookmarks, each strategy will only pre-fetch\nsegments immediately following a bookmark (i.e.,\nbookmark hotspots). In all experiments the amount of\neach hotspot pre-fetched was determined by varying the\npercentile of that particular hotspot\u2019s length model, as\ndescribed in Section 4.8. The details for each pre-fetch\nstrategy are listed below:\nAhead simply continues to pre-fetch ahead of the\nplayback point assuming the client has a unlimited\nbuffer. This is similar to what some existing stream-\ning applications do.\nAhead (to hotspot end) again simply continues\nto pre-fetch ahead of the playback point but only until\nthe end of hotspot associated with the bookmark being\nviewed.\nAhead (and Predictive) works in a similar way\nto Ahead (to hotspot end), however once it reaches the\nend of the hotspot it begins to use the Predictive pre-\nfetch scheme.\nPredictive uses knowledge observed from other\nusers as to which bookmark is likely to be requested\nnext, and thus starts to pre-fetch the bookmark\nhotspots in descending order of probability of being vis-\nited. The more users interacting with the system, the\nmore accurate the predictive knowledge becomes.\nSequence will pre-fetch bookmark hotspots in the\norder in which they appear within the video regardless\nof the current playback point. For example, in a football\nmatch the goals would be pre-fetched in a sequential\norder.\nSequence After again pre-fetches bookmark\nhotspots in the order in which they appear within the\nvideo; the difference being only hotspots that are after\nthe current playback point are fetched. For example, if\na user has yet to fetch the first bookmark\u2019s hotspot but\nis already viewing the second, then the first will not be\npre-fetched.\nTwo metrics were measured to determine how well\nthe different schemes behaved. The first metric dis-\nplayed in Figure 14a is the fraction of requests with\nzero seek latency. A seek latency of zero occurs when the\nuser has already pre-fetched a playback buffer\u2019s worth\n15\n 0.15\n 0.2\n 0.25\n 0.3\n 0.35\n 0.4\n 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1F\nra\nct\nio\nn \nof\n re\nqu\nes\nts\n w\nith\n z\ner\no \nse\nek\n la\nte\nnc\ny\nPrefetch Size (percentile of hotspot length)\nPredictive\nSequence After\nSequence\nAhead\nAhead (to hotspot end)\nAhead (and Predictive)\n(a) Fraction of requests with zero seek latency\n 0.4\n 0.5\n 0.6\n 0.7\n 0.8\n 0.9\n 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1\nAv\ner\nag\ne \nUs\nag\ne \nRa\ntio\nPrefetch Size (percentile of hotspot length)\nPredictive\nSequence After\nSequence\nAhead\nAhead (to hotspot end)\nAhead (and Predictive)\n(b) Usage ratio\nFig. 14: Various metrics for different pre-fetch schemes versus bookmark length\nof video from a requested seek point. The second met-\nric measured the ratio of fetched data which was never\nwatched, and therefore needlessly fetched. This usage\nratio is shown in Figure 14b.\nUsing the simple Ahead scheme 31% of seeks have\nzero latency, this is made up of seeks to segments that\nhave already been viewed, and small forward seeks into\nthe ahead buffer. Adapting this scheme to only pre-\nfetch to the end of the bookmarks (i.e. the Ahead (to\nhotspot end) scheme) has a minor negative effect on the\nseek latency, whilst increasing the average usage ratio.\nThe Sequence and Sequence After schemes are very\nsimilar, but the simple modification to the Sequence\nAfter scheme allowed it to achieve a lower seek latency\nwhilst not degrading its average usage ratio. This was\nbecause users had a tendency to not seek to a book-\nmark before the current playback point, and always go\nforward within the video, leaving the Sequence scheme\nstuck pre-fetching hotspots before the current playback\npoint.\nBoth the Predictive and the Sequence After schemes\nperform in a similar manner, with the Predictive\nschemes always outperforming the other. Due to this\nfact, the Sequence After scheme could be used in place\nof the Predictive scheme whilst knowledge is collected\nto improve the Predictive scheme\u2019s accuracy.\nThe best outcome was the combination of Ahead\nand Predictive schemes named Ahead (and Predictive).\nThis exploited the fact that users rarely viewed beyond\nthe end of a hotspot, and thus pre-fetching another\nhotspot was of benefit.\nIn the previous experiments the Predictive scheme\nwas primed with knowledge from all users, but in reality\nthis knowledge would be built up over time. To test how\nquickly this knowledge can be obtained we ran another\nset of experiments where the Predictive and Ahead (and\n 0.2\n 0.25\n 0.3\n 0.35\n 0  500  1000  1500  2000  2500  3000F\nra\nct\nio\nn \nof\n re\nqu\nes\nts\n w\nith\n z\ner\no \nse\nek\n la\nte\nnc\ny\nKnowledge\nPredictive 0.9\nAhead (and Predictive) 0.9\nPredictive 0.55\nAhead (and Predictive) 0.55\nFig. 15: How zero seek latencies is effected by amount\nof pre-fetch knowledge\nPredictive) schemes were primed with different amounts\nof knowledge. The results of this are shown in Figure 15.\nWe set the percentile hotspot length to 0.55 and 0.9\nwhich were chosen since 0.55 is where the seek latency\nbegan to stabilise, and 0.9 where the usage ratio be-\ngan to drop rapidly. The knowledge is ranked from 0\nto 3000 which represents the number of seek requests\nreceived. It can be seen that very quickly (within 250\nseek requests) the knowledge has become useful, and\neventually plateaus at 1500 seek requests. Any seek re-\nquests after this point just increase the confidence in\nthe knowledge and does not improve it.\n6 Conclusions and Future Work\nWe have presented a study and characterisation of user\nbehaviour for our interactive Video-on-Demand system.\nWe note that by adding simple bookmarks to points\nof interest within the media, the access patterns are\ngreatly influenced. This behaviour led to high levels\n16\nof seeking which created relatively-short and sparsely-\ndistributed segments with orders of magnitude more\npopularity than others.\nVarious distributions were fitted to the different\nmetrics considered, providing a greater understanding\nof how users interact with such systems. Beyond the\ninsight gained, the models constitute a valuable tool-\nbox for driving future simulations which require highly\ninteractive workloads.\nMany existing delivery mechanisms are not designed\nfor high levels of interactive behaviour and are instead\noptimised for classic start-to-finish streaming. CDNs\nmust therefore adapt to efficiently handle these kinds of\naccess patterns. They could, for example, take advan-\ntage of the long-tailed distributions of segment popu-\nlarity by replicating those that generate the most de-\nmand. For instance, we observed that 10% of segments\naccounted for 44% of all requests.\nThe departure from classic start-to-finish playback\nencourages the design of agile delivery mechanisms that\nallow quick seeking, and allow certain more popular\nsegments to be more highly distributed. We have seen\nthat adding bookmarks will highly influence the order\nin which users view the content, making the sequence\nof actions somewhat predictable. This can then be ex-\nploited by allowing users to pre-fetch content that they\nare predicted to need shortly, thus reducing any delays\nthey are likely to experience. However, we noted that\nbookmarks could be harmful by causing unnecessary\nseeks if incorrectly placed. This could be remedied for\nboth client and server by simply moving the bookmark\nautonomically based on observed user behaviour.\nSo far we have only considered bookmarks within\nmusic and sport videos, but bookmarks are equally ap-\nplicable in many other genres. For example, bookmarks\nare commonly found in the form of chapters on video\nDVDs. It is not clear if the same high levels of interac-\ntivity would be observed, or if the classic start-to-finish\nmodel would still be prevalent.\nFor a system to be fully autonomic the bookmarks\nshould perhaps be created automatically. This could\noccur after the system has detected a large number of\nrequests for a specific area of a video. A bookmark could\nthen be provisionally placed and its position refined by\na bookmark-moving algorithm, such as the one found\nin Section 5.1.\nDuring our experiment users were unhappy that we\n\u201cspoilt the experience\u201d of watching the sporting events\ncovered somewhat. This was because the user could\nquickly determine the final outcome of the event from\nthe bookmark names. The suggestion was made that\nwe avoid labelling the bookmarks and instead simply\ndescribe them as points of interest. This could equally\nwork if the bookmarks were autonomically created since\na system would be unable to name them itself. Note,\nunnamed bookmarks would only be useful if they are\ntypically accessed sequentially, and not based on their\nname alone.\nIt was clear that pre-fetching bookmark hotspots\nonly covered 35% of all viewed segments. Thus pre-\nfetching schemes should consider more segments. This\nof course would make it harder to decide which seg-\nments to pre-fetch next. The probability of making\na wrong decision could be reduced if the pre-fetching\ntechnique was modified, for example pre-fetching more\nthan one choice simultaneously.\nThe predictive pre-fetching algorithms used knowl-\nedge inferred from the observations of other users. For\nexample, if the majority of all users visited two book-\nmarks in the same order, it is likely the next user will\ndo the same. How this knowledge is collected, and how\nthis knowledge is disseminated is left open for future\nstudy. We did not discuss who would use this knowl-\nedge, indeed both the client and server could exploit it\ndifferently, each with respective pros and cons. For ex-\nample, if the client has spare capacity, it could start to\npre-fetch based on both its own previous behaviour and\nthat of the majority of other users. The server could\nalso decide to pre-replicate, or to push out segments\npredicted to be required when it has spare capacity.\nWhile not the case for all content, high levels of\ninteractivity are becoming more common, whilst users\nare both relying on and expecting Video-on-Demand\nservices to provide more advanced interactive function-\nality. Our study suggests that CDN mechanisms must\nimprove to handle more diverse applications, content\nand users. To achieve this, the development of new al-\ngorithms must be driven by models derived from real-\nistic characterised workloads. The development of such\nstrategies is reliant on gaining a deep understanding\nof the relevant workload parameters. The analysis and\nmodels presented in this paper aim to aid in this en-\ndeavour.\nReferences\n1. S. Acharya, B. Smith, and P. Parnes. Characterizing user\naccess to videos on the world wide web. In Proceedings of\nMultimedia Computing and Networking (MMCN), San Jose,\nCalifornia, USA, January 2000.\n2. Akamai. Content distribution network.\nhttp:\/\/www.akamai.com.\n3. J. Almeida, J. Krueger, D. Eager, and M. Vernon. Analysis\nof educational media server workloads. In Proceedings of\nthe 11th International Workshop on Network and Operating\nSystems Support for Digital Audio and Video (NOSSDAV),\nPort Jefferson, New York, USA, June 2001.\n17\n4. S. Chen, B. Shen, S. Wee, and X. Zhang. Adaptive and lazy\nsegmentation based proxy caching for streaming media de-\nlivery. In Proceedings of the 13th International Workshop on\nNetwork and Operating Systems Support for Digital Audio\nand Video (NOSSDAV), pages 22\u201331, 2003.\n5. L. Cherkasova and M. Gupta. Characterizing locality, evo-\nlution, and life span of accesses in enterprise media server\nworkloads. In Proceedings of the 12th International Work-\nshop on Network and Operating Systems Support for Digital\nAudio and Video (NOSSDAV), Miami Beach, Florida, USA,\nMay 2002.\n6. M. Chesire, A. Wolman, G. M. Voelker, and H. M. Levy.\nMeasurement and analysis of a streaming media workload.\nIn Proceedings of the 3rd USENIX Symposium on Internet\nTechnologies and Systems, San Francisco, California, USA,\nMarch 2001.\n7. C. Costa, I. Cunha, A. Borges, C. Ramos, M. Rocha,\nJ. Almeida, and B. Ribeiro-Neto. Analyzing client interac-\ntivity in streaming media. In Proceedings of the 13th Inter-\nnational World Wide Web Conference (WWW), New York,\nNew York, USA, May 2004.\n8. P. Danzig, J. Mogul, V. Paxson, and M. Schwartz. Internet\nTraffic Archive. http:\/\/ita.ee.lbl.gov.\n9. G. S. Fishman and I. J. B. F. Adan. How heavy-\ntailed distributions affect simulation-generated time aver-\nages. ACM Transactions on Modeling and Computer Simu-\nlation (TOMACS), 16(2):152\u2013173.\n10. L. Guo, S. Chen, Z. Xiao, and X. Zhang. Analysis of mul-\ntimedia workloads with implications for Internet streaming.\nIn Proceedings of the 14th International World Wide Web\nConference (WWW), Chiba, Japan, May 2005.\n11. M. Mitzenmacher. A brief history of generative models for\npower law and lognormal distributions. Internet Mathemat-\nics, 1(2):226\u2013251.\n12. K. Sripanidkulchai, B. Maggs, and H. Zhang. An analysis\nof live streaming workloads on the Internet. In Proceedings\nof the ACM SIGCOMM Internet Measurement Conference\n(IMC), Sicily, Italy, October 2004.\n13. W. Tang, Y. Fu, L. Cherkasova, and A. Vahdat. MediSyn:\nA synthetic streaming media service workload generator. In\nProceedings of the 13th International Workshop on Network\nand Operating Systems Support for Digital Audio and Video\n(NOSSDAV), Monterey, California, USA, June 2003.\n14. M. Vilas, X. Paneda, R. Garcia, D. Melendi, and V. Garcia.\nUser Behaviour Analysis of a Video-On-Demand Service with\na Wide Variety of Subjects and Lengths. In Proceedings of\nthe 31st EUROMICRO Conference on Software Engineering\nand Advanced Applications, pages 330\u2013337, 2005.\n15. H. Yu, D. Zheng, B. Zhao, and W. Zheng. Understanding\nuser behavior in large scale video-on-demand systems. In\nProceddings of EuroSys, 2006.\n"}