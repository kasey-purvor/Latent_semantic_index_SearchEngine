{"doi":"10.1109\/ITNEWS.2008.4488151","coreId":"70201","oai":"oai:eprints.lancs.ac.uk:12952","identifiers":["oai:eprints.lancs.ac.uk:12952","10.1109\/ITNEWS.2008.4488151"],"title":"Explicit application-network cross-layer optimisation","authors":["Pezaros, D.","Mathy, L."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2008-02-13","abstract":"The emergence of overlay network applications that rely on application-level decisions for many aspects of their operations (e.g. routing, content replication, etc) creates crosslayer interaction issues with ISP network operations. Indeed, the independent optimisation of a diverse set of objectives using layer-local information can lead to operational instability and sub-optimal resource usage. We argue that an explicit interaction between the application and network layers can provide benefits for each layer. We postulate that such cross-layer interaction must however fulfil two conditions to be pragmatic and acceptable: 1) no explicit information about the structure and operations of each layer must be ex-changed; 2) each layer must be able to independently set its own policies and objectives. Because we limit this interaction to application hosts and their access ISP, the proposed method is also incrementally deployable. We show, through evaluation of simple examples, that explicit cross-layer interaction does indeed bring performance benefits to all parties, for applications ranging from simple client-server to more complex overlay network scenarios","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:12952<\/identifier><datestamp>\n      2018-01-24T02:04:33Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Explicit application-network cross-layer optimisation<\/dc:title><dc:creator>\n        Pezaros, D.<\/dc:creator><dc:creator>\n        Mathy, L.<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        The emergence of overlay network applications that rely on application-level decisions for many aspects of their operations (e.g. routing, content replication, etc) creates crosslayer interaction issues with ISP network operations. Indeed, the independent optimisation of a diverse set of objectives using layer-local information can lead to operational instability and sub-optimal resource usage. We argue that an explicit interaction between the application and network layers can provide benefits for each layer. We postulate that such cross-layer interaction must however fulfil two conditions to be pragmatic and acceptable: 1) no explicit information about the structure and operations of each layer must be ex-changed; 2) each layer must be able to independently set its own policies and objectives. Because we limit this interaction to application hosts and their access ISP, the proposed method is also incrementally deployable. We show, through evaluation of simple examples, that explicit cross-layer interaction does indeed bring performance benefits to all parties, for applications ranging from simple client-server to more complex overlay network scenarios.<\/dc:description><dc:publisher>\n        IEEE<\/dc:publisher><dc:date>\n        2008-02-13<\/dc:date><dc:type>\n        Contribution in Book\/Report\/Proceedings<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:relation>\n        http:\/\/dx.doi.org\/10.1109\/ITNEWS.2008.4488151<\/dc:relation><dc:identifier>\n        Pezaros, D. and Mathy, L. (2008) Explicit application-network cross-layer optimisation. In: 4th International Telecommunication Networking Workshop on QoS in Multiservice IP Networks, 2008. IT-NEWS 2008. IEEE, pp. 185-190. ISBN 978-1-4244-1844-2<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/12952\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":null,"relations":["http:\/\/dx.doi.org\/10.1109\/ITNEWS.2008.4488151","http:\/\/eprints.lancs.ac.uk\/12952\/"],"year":2008,"topics":["QA75 Electronic computers. Computer science"],"subject":["Contribution in Book\/Report\/Proceedings","NonPeerReviewed"],"fullText":"Explicit Application-Network Cross-layer \nOptimisation \nDimitrios P. Pezaros, Laurent Mathy \nComputing Department, Lancaster University \nInfolab21, UK \n{dp, laurent}@comp.lancs.ac.uk \n \nAbstract\u2014 The emergence of overlay network applications that \nrely on application-level decisions for many aspects of their \noperations (e.g. routing, content replication, etc) creates cross-\nlayer interaction issues with ISP network operations. Indeed, the \nindependent optimisation of a diverse set of objectives using \nlayer-local information can lead to operational instability and \nsub-optimal resource usage. We argue that an explicit interaction \nbetween the application and network layers can provide benefits \nfor each layer. We postulate that such cross-layer interaction \nmust however fulfil two conditions to be pragmatic and \nacceptable: 1) no explicit information about the structure and \noperations of each layer must be ex-changed; 2) each layer must \nbe able to independently set its own policies and objectives. \nBecause we limit this interaction to application hosts and their \naccess ISP, the proposed method is also incrementally \ndeployable. We show, through evaluation of simple examples, \nthat explicit cross-layer interaction does indeed bring \nperformance benefits to all parties, for applications ranging from \nsimple client-server to more complex overlay network scenarios. \nI. INTRODUCTION \nThe increasing popularity of overlay networks to deploy \ncustomisable and reliable services at the application layer by \nimplicitly or explicitly taking control over routing can lead to \nsudden, highly variant and unpredictable traffic dynamics over \nthe underlying Internet infrastructure. File sharing, \napplication-level multicast, scalable object location and \nnetwork-embedded storage are only a few examples of such \noverlay services. Depending on the target application domain, \noverlays employ their own internal mechanisms and routing \nstrategy to optimise certain aspects of their performance. \nHaving multiple overlays simultaneously operating over \nsegments of the Internet, with each one independently and \ndynamically deciding how to route traffic, can be cost-\nineffective, and also work against traffic engineering and load \nbalancing policies adopted by ISPs at the underlay network \nlayer [10][8]. The root of the problem is simply that both the \noverlay and the underlay operate in an independent manner. \nMore fundamentally, layered network design has almost \nimposed a form of segregation in the decision making process \nat each layer. For instance, a network is often engineered and \nprovisioned considering matrices of traffic aggregates at large \ntime-scales that are very coarse-grained compared to overlay \nreaction times. On the other hand, applications, and overlay \nnetworks in particular, mostly consider the underlying \nnetwork as a black box. The application layer then routinely \nprobes the underlying network to solve tasks such as \nproximity estimation. Such probing has been observed to \ncreate \u201cping storms\u201d [11].  \n In order to address the scalability, overhead and stability \nissues of such globally-uncoordinated actions, it has been \nsuggested that a routing underlay service should reside above \nthe underlying Internet and expose global topology and\/or \nperformance information to assist applications and overlay \nnetworks in their operations [11]. However, exposing \ntopology and\/or any other operational network characteristics \nto the application layer may indeed prove impractical. For a \nstart, many ISPs may be reluctant to export such information \nwhich they often treat as trade secrets and competitive \nadvantage sensitive. Furthermore, exporting up-to-date and \nglobal information may not be scalable and contradict ISP\u2019s \nlocal policies. For instance, exporting global topology \ninformation not only may not scale to a net-work the size of \nthe Internet, but can also give applications the opportunity to \nby-pass ISP routing policies. Another approach to solve the \nlayer-interaction issues is to push support for the applications \ninto the network. This approach is classically exemplified by \ncaching. However, the proliferation of applications and \noverlay networks also means a proliferation of cache types, a \nproposition that may not be very attractive for ISPs, especially \nbe-cause caching can be a Digital Right Management liability \nand is often powerless in the face of end-to-end encryption. \nIn this paper, we postulate and demonstrate that some \napplication-network cross layer issues can be addressed by an \nexplicit interaction between the two layers, but without \nexplicit exchange of structural information. We envisage that \nISPs could deploy services that would take some (explicit) \ninput from applications and explicitly return hints about these \ninputs. Applications would then make use of these hints to try \nand improve their operation and perceived performance, while \nhopefully, the use of network hints by applications would also \nimprove performance at the network layer. An important point \nhere is that how inputs are treated to form hints, and how hints \nare used is entirely up to the respective layers: each layer\u2019s \nprerogative to set its own policies, and optimize its own \nperformance metrics, should be preserved. The remainder of \nthe paper is structured as follows. Section II de-scribes an ISP \nhint service based on the idea of input clustering and section \nIII outlines a number of applications using ISP hints. Section \nIV shows, through simulations, how simple ISP hint services \ncan be exploited by various applications to provide cross-layer \noptimization. Section V discusses our findings and concludes \nthe paper. \nII. ISP HINTS \nISP hints are a very general service offered by ISPs to local \nhosts and applications. We envisage that it takes the form of a \nrequest-response service between hosts and \u201chint servers\u201d \ninside the ISP (access) network. The idea behind ISP hint \nservices is very generic in the sense that the hint services are \nopen and non prescriptive. An ISP could basically offer a \nrange of such services, each taking specific inputs and \nreturning specific hints. Applications would choose the hint \nservice(s) that best fit their needs. As already pointed out, a \nsalient feature behind the ISP hint ser-vice idea is that all \nentities involved can choose policies and performance \noptimization targets as they see fit. That is, which hints to \nchoose and how to use them is up to the application, while \nwhich hint services to offer and how hints are computed is up \nto ISP. The goal is of course for all parties to gain from the \nuse of ISP hints. However, ISPs could take measures to incite \nor enforce use of hints (such measures are outside the scope of \nthis paper). \nTo fix ideas, we now describe two simple examples of ISP \nhint services, which we use in the remainder of the paper. The \nfirst such ISP hint service is called a \u201cdistance service\u201d. It \nsimply takes IP addresses as input and returns a distance \nmeasurement between each destination and the requester. The \nnotion of distance can obviously be specified and measured in \nnumerous ways, but again the advantage of using the ISP hints \nabstraction is that ISPs can choose which metric to provide \nand how to measure it, without even having to inform the \napplications (the requesters) of their choices. For instance, an \nISP may decide to use Autonomous System (AS) path length \nas a distance measurement, while another may base its \ndistance measurements on more complex embedded \ncoordinate systems [13][12]. The \u201cregion-aware clustering\u201d \nservice is another example of ISP hint service. Here, the ISP \nwould take a set of IP addresses as input, and return these \naddresses split into several subsets (clusters). In its simple \nversion, all the addresses in the same subset\/cluster would be \nreached, from this ISP, through the same egress border router. \nHowever, note again, that ISPs may want define \u201cregions\u201d in a \ndifferent way. For example, the clusters in the simple region-\naware clustering could be further split according to the second \nAS hop they would traverse, and so on and so forth. This latter \nversion of the service could be called \u201c2-level hierarchical \nregion-aware clustering\u201d. Note that the distance service based \non AS path length, and both region-aware services described \nabove can be implemented based solely on routing \ninformation available at an ISP. Indeed, all the information \nrequired can be extracted from a BGP Routing Information \nBase [17] and the corresponding hint services could therefore \nreadily be realized as an extension to BGP route servers. \nIII. APPLICATIONS USING ISP HINTS \nIn this section, we illustrate how applications can use ISP \nhints to improve their perceived performance. We limit our \ndiscussion to the content distribution in the form of file \ntransfers. The client-server paradigm is very often used for \nfile transfers (e.g. HTTP, FTP). In the simplest form of client-\nserver transfers, the server receives requests from the clients \nwhich it serves. The server usually accepts new requests as \nlong as it has enough local resources to accommodate them. \nOn the other hand, an enhanced server could exploit ISP hints \nto increase the perceived service quality of its clients. Indeed, \nby using the simple region-aware clustering service, a server \nis capable of ensuring some form of load-balancing between \nits ISP egress points, thus controlling the contention that exists \nbetween its clients inside the network. To do so, the server \ncould set a limit on the number of con-current connections \nthat it will open per cluster (i.e. ISP egress router), and use the \nsimple region-aware clustering for admission control. More \nspecifically, the server can use the ISP clustering service to \ndecide which request to serve (if the corresponding connection \nuses an egress for which the connection limit, a.k.a. threshold, \nhas not been reached) or queue. By limiting the number of \nconcurrent downloads and ensuring load-balancing, the \naverage download time should be reduced, improving user \nsatisfaction. We have implemented two client-server (CS) \nalgorithms and quantified the performance gains of employing \nISP hints services. A traditional CS algorithm has been \ndeveloped where one node serves simultaneous requests up to \na certain threshold value T, on an aggregate First-Come-First-\nServed (FCFS) basis. Upon reaching this threshold, further \nincoming requests are queued and served as soon as existing \ntransfers complete on a FCFS basis. An enhanced CS \nalgorithm has also been developed where the server uses ISP \nhints to perform load-balancing on the in-coming client \nrequests. As with traditional CS case, up to a threshold T \nclient requests are served simultaneously. However, in this \ncase, the server uses the region-awareness ISP hint to cluster \nincoming requests based on the egress links response traffic is \ngoing to be routed through. Traffic is then load-balanced over \nthe server\u2019s egress links. Three variants of this region-aware \nrequest clustering have been implemented. In the Simple \nClustering (SC) variant, the server clusters requests to regions \nbased on the first-hop egress link traversed by the response \ntraffic. The total simultaneous request threshold T is divided \nby the servers\u2019 \u03bd egress links and \u03c4 = T \/ \u03bd simultaneous \nrequests are served per-cluster. In the second-hop Flat \nClustering (FC) variant, the server groups requests based on \nthe second hop traversed by the response traffic, and performs \nload-balancing ignoring first hop information. Finally, in the \nsecond-hop Hierarchical Clustering (HC) variant, requests are \nclustered hierarchically based on the first and second hops \ntraversed by response traffic. The initial threshold T is divided \nby the number of first-hop egress links \u03bd to produce i first-hop \nthresholds \u03c4i\uf020 = T \/ \u03bd, each of which is further divided by the \nnumber of egress links attached to first hop i. In all variants, \nwhen the region-aware clusters are computed, requests are \nserved on an intra-cluster FCFS basis. \nAnother popular way to transfer files is through a file \nsharing Peer-to-Peer (P2P) overlay [6][9][14][5]. P2P file \nsharing comes in many flavours, so for this paper we chose to \nuse a simplified version of a Bittorent-like distribution overlay \nas a reference [2]. A generic simple overlay algorithm has \nbeen implemented that includes two different peer entities, a \ncentral tracker of the content; and normal peers acting as both \ncontent clients and providers. Each peer registers with the \ntracker either as a provider or as a requester for a certain piece \nof content. In the former case, the tracker updates its list of \nproviders, and in the latter case it acknowledges the client\u2019s \nregistration by sending back the list of currently available \nproviders for the specific content. If the list is too large, then a \nnumber of providers is chosen randomly and returned to the \nrequester. The client randomly selects a provider from the list \nto request the content from. If it is denied service (because the \nprovider has reached the maximum number of connections it \nwill serve), it randomly selects a different provider from its \nlist until either its request is accepted, or its providers\u2019 list is \nexhausted, in which case it times out and re-requests a \nproviders\u2019 list from the tracker after a certain time interval. \nUpon successful completion of a download, a peer registers \nitself as a provider with the tracker.  \nWe have developed a number of augmented and region-\naware overlay algorithm variants to demonstrate how the \noperation of this simple overlay can be optimised using \nexplicit cross-layer interaction through combinations of the \ntwo ISP hint services described in section II. The augmented \noverlay algorithm uses the ISP \u201cregion-aware clustering\u201d hint \n(as in the CS case described above) for the provider peers to \nload-balance their response traffic. At the same time, a \nprovider that has reached its simultaneous serving threshold \nexplicitly redirects further clients to the subset of peers \n(providers) it has already served through the same \u201cregional\u201d \ncluster that the incoming request came from. This way, \nproviders attempt to spread the overlay traffic load to diverse \nsegments of the underlay (Internet) infrastructure. Requesting \npeers choose among alternative providers either using a \nRandom function (Ran), or by employing the ISP \u201cdistance\u201d \nhint that returns an AS Proximity (ASP) metric and then \nselecting the least-AS-distant provider. Furthermore, a \nRegion-aware Overlay (RegO) algorithm has been developed \nwhich implements Random (Ran) provider selection and \nregion-aware load-balancing to requests. In contrast to the \naugmented algorithm where clients are only redirected to a \n\u201cregion\u201d-based subset of the alternative providing peers, \nRegO uses the central tracker entity that provides requesters \nwith all currently providing overlay peers. All variations of \nthe augmented and the RegO algorithms have been designed \nto implement first-hop (SC) and second-hop hierarchical (HC) \nregion-aware clustering to load-balance competing requests. \nIn the following section, we evaluate and quantify through \nsimulation the performance gains of employing explicit cross-\nlayer synergy for both the underlay and the overlay layers.  \nIV. EVALUATION \nA. Client-Server Load-Balancing \nWe have used the Network Simulator (ns-2) [18] to assess \nthe effect of the region-aware load-balancing for the client-\nserver case over a variety of Internet-wide topologies. A piece \nof content hosted by a single peer on the topology is \nsimultaneously fetched by a number of clients (assumed to be \ntriggered by an external stimulus, such as central web-based \nadvertisement). The server has a configurable threshold up to \nwhich it is willing to serve client peers. The source of the \nrequested content resides behind a number of egress links \nwhich we varied in different experimental runs. We have \nemployed 103 client nodes using both symmetric and random \nnode placement over Internet-wide AS topologies. Symmetric \nclient placement assumes the same number of clients attached \nto each AS. Under random client placement, clients are \nrandomly attached behind each AS using a multi-level number \ngenerator based on uniformly distributed random variables. \nWe have conducted multiple simulation runs over different \nedge-degree topologies and using a varying threshold value of \n5, 10 and 20 simultaneous transfers, to compare the mean \nindividual transfer throughput between the region-aware load-\nbalanced scenarios and the unbalanced aggregate FCFS case.  \nFigure 1 shows the percentage increase in throughput for \nthe different simultaneous transfer threshold values over \nsymmetric client node placement. Throughput has been \nmeasured as the number of bytes transferred between the \nserver and the client over the duration of the flow and \nresembles the widely used Bulk Transfer Capacity (BTC) \nmetric. The link bandwidths of each topology generated were \nuniformly distributed to accommodate for the randomness in \nthe actual available bandwidths over the Internet due to the \nvariable traffic dynamics of each segment. Figure 2 shows the \npercentage increase of transfer throughput over random client \nnode placement using the same threshold values and topology-\nwide link bandwidth distributions. It is evident that significant \nincrease in transfer throughput is achieved by the cluster-\nbased load-balancing algorithms with respect to the \nunbalanced aggregate FCFS mode of operation. \nOver symmetric client placement, even first-hop SC load-\nbalancing can achieve a steady over 10% mean throughput \nincrease as the simultaneous transfers and access edge degree \ngrow larger. Load-balancing based on second-hop FC and HC \nachieve throughput gains of up to above 20%. First-hop (SC) \nand second-hop hierarchical clustering (HC) show a steady \nand proportionally increasing trend with the number of \nsimultaneous transfers and access edge degrees. Second-hop \nFlat Clustering (FC) exhibits a less predictable performance \ngain due to equalising (in some cases) the per-egress (first-hop) \nload balancing, however, for increasing numbers of \nsimultaneous transfers this algorithm also shows a steadily \nanodic throughput gain. As expected, over random client \nplacement, the throughput gain is influenced by the uneven \nnumber of clients accessed through each egress link, and is \nhenceforth less deterministic. However, it is worth mentioning \nthat throughput increase is still achieved by region-aware \nload-balancing in all cases, and also that absolute throughput \nvalues are in many cases larger than those of the \ncorresponding threshold\/edge degree values over symmetric \nclient placement. \nOverall, it is evident that an ISP can spread popular content \nfaster to diverse segments of the Internet and minimise the \npersistence of incoming requests by employing a simple load-\nbalancing algorithm and information readily available within \nits BGP speakers. \n3\n4\n5\n6\n7\nPercentage Increase in Transfer Throughput\nSymmetric Overlay Node Placement\nAccess Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nFirst Hop Clustering\nSecond Hop Flat Clustering\nSecond Hop Hierarchical Clustering\n7\n8\n9\n10\n11\n12\n13\nPercentage Increase in Transfer Throughput\nSymmetric Overlay Node Placement\nAccess Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nFirst Hop Clustering\nSecond Hop Flat Clustering\nSecond Hop Hierarchical Clustering\n10\n12\n14\n16\n18\n20\n22\nPercentage Increase in Transfer Throughput\nSymmetric Overlay Node Placement\nAccess Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nFirst Hop Clustering\nSecond Hop Flat Clustering\nSecond Hop Hierarchical Clustering\n \nFig. 1  Throughput percentage increase of load-balancing client requests under symmetric node placement for varying simultaneous transfer threshold values. \n5.\n0\n5.\n5\n6.\n0\n6.\n5\n7.\n0\n7.\n5\n8.\n0\nPercentage Increase in Transfer Throughput\nRandom Overlay Node Placement\nAccess Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nFirst Hop Clustering\nSecond Hop Flat Clustering\nSecond Hop Hierarchical Clustering\n7\n8\n9\n10\n11\n12\nPercentage Increase in Transfer Throughput\nRandom Overlay Node Placement\nAccess Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nFirst Hop Clustering\nSecond Hop Flat Clustering\nSecond Hop Hierarchical Clustering\n10\n12\n14\n16\n18\n20\nPercentage Increase in Transfer Throughput\nRandom Overlay Node Placement\nAccess Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nFirst Hop Clustering\nSecond Hop Flat Clustering\nSecond Hop Hierarchical Clustering\n \nFig. 2  Throughput percentage increase of load-balancing client requests under random node placement for varying simultaneous transfer threshold values. \n \nB. Region-aware Overlay Algorithms \nWe have further investigated the gains of region-aware load \nbalancing for complete P2P file-sharing overlays over \nrepresentative AS-level Internet topologies. We have \nhypothesised that region-aware load balancing by every \nproviding peer will help the content to spread quickly over \ndiverse segments of the underlying infrastructure, and hence \nminimise the impact of persistent request and response traffic \non a single ISP that (implicitly) hosts the popular content. At \nthe same time, the ISP itself does not need to know anything \nabout the internals of the content other than to identify which \nrequests are for the same highly-popular object (through e.g. \nhashes), nor does it need to invest into infrastructural support \nfor services such as caching to minimise the additional stress \nover its links. We have evaluated the overlay\/underlay \ninteraction through comparative performance analysis of the \ndifferent algorithms. Brite topology generator [3] was used to \ngenerate a large variety of representative topologies to include \ndiverse topology models, AS node populations and minimum \nAS edge-degrees. We have generated a number of power-law \nAS-level topologies to include 100, 500, and 1000 nodes, each \nwith a minimum edge degree of 2, 3 and 4 links per leaf AS \n[1][4]. Each simulation focused on both the initial bursty \nphase of the overlay when all peers simultaneously fetch a \nnewly populated piece of content, and the steady-state phase \nof the system when content has spread among different peers. \nThe experiments assessed the overall performance gains of the \nexplicit underlay\/overlay synergy in spreading the so-called \nfirst chunk of content among the participating peers [15][16]. \nThe chunk size was set to 1MB. A constant threshold of 10 \nsimultaneous transfers has been used. The performance \nmetrics measured for all the algorithms and their variants were \nthe individual transfer throughput in KB\/s, and the mean and \nmaximum link stress over the complete Internet-wide \ntopology. As in the previous section, throughput is the BTC of \neach transfer, whereas mean and maximum link stress have \nbeen measured as the average and maximum number of flows \nactive over each link of the topology, at any given time. The \ncomparative results show that the region-aware algorithms \nimprove both aspects of overlay and underlay performance. \nFigure 3 shows the percentage improvement in mean \ntransfer throughput over different-size AS-level topologies, \nachieved by the cross-layer algorithms with respect to theit \npure overlay counterpart. The figure also shows the variations \nin throughput increase with respect to the minimum access \nedge degree of the topologies. Solid lines show the \nperformance gains of the cross-layer algorithms with first-hop \nsimple clustering (SC) and dashed lines show their second-\nhop hierarchical clustering (HC) counterparts. \n0\n10\n30\n50\n70\n100-Node Topology\nMin. Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n0\n10\n30\n50\n70\n500-Node Topology\nMin. Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n0\n10\n30\n50\n70\n1000-Node Topology\nMin. Edge Degree\nTh\nro\nug\nhp\nut\n P\ner\nce\nnt\nag\ne \nIn\ncr\nea\nse\n (%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n \nFig. 3  Percentage increase in mean individual transfer throughput for the cross-layer algorithms  \n0\n10\n20\n30\n40\n50\n100-Node Topology\nMin. Edge Degree\nLi\nnk\n-S\ntre\nss\n P\ner\nce\nnt\nag\ne \nD\nec\nre\nas\ne \n(%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n0\n10\n20\n30\n40\n50\n500-Node Topology\nMin. Edge Degree\nLi\nnk\n-S\ntre\nss\n P\ner\nce\nnt\nag\ne \nD\nec\nre\nas\ne \n(%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n0\n10\n20\n30\n40\n50\n1000-Node Topology\nMin. Edge Degree\nLi\nnk\n-S\ntre\nss\n P\ner\nce\nnt\nag\ne \nD\nec\nre\nas\ne \n(%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n \nFig. 4  Percentage decrease in topology-wide mean link stress for the cross-layer algorithms \n0\n10\n20\n30\n40\n100-Node Topology\nMin. Edge Degree\nLi\nnk\n-S\ntre\nss\n P\ner\nce\nnt\nag\ne \nD\nec\nre\nas\ne \n(%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n0\n10\n20\n30\n40\n500-Node Topology\nMin. Edge Degree\nLi\nnk\n-S\ntre\nss\n P\ner\nce\nnt\nag\ne \nD\nec\nre\nas\ne \n(%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n0\n10\n20\n30\n40\n1000-Node Topology\nMin. Edge Degree\nLi\nnk\n-S\ntre\nss\n P\ner\nce\nnt\nag\ne \nD\nec\nre\nas\ne \n(%\n)\n2 3 4\nASP-SC\nRan-SC\nRegO-SC\nASP-HC\nRan-HC\nRegO-HC\n \nFig.5  Percentage decrease in topology-wide maximum link stress for the cross-layer algorithms \n \nLikewise, figure 4 and figure 5 show the percentage \nimprovement in the topology-wide mean and maximum link \nstress for the same set of AS-level topologies. Although there \nseem to be no clear correlation between throughput nor link \nstress, and the topology size and edge degree, it is evident that \non average cross-layer algorithms outperform their simple \noverlay counterpart. For each algorithm, employing \nhierarchical clustering (HC) of the requesting peers \nconsistently outperforms simple clustering based on network \naccess link (SC). For mean transfer throughput, the augmented \noverlay algorithm with ASP provider selection exhibits \nsignificant gains over the rest of the algorithms, approaching \n50% optimisation. It is also worth noting that for the 1000-\nnode topology with a minimum edge degree of 4, all variants \nof the augmented algorithm provide mean link stress \nimprovement on the order of 40%. \nAn interesting general observation from the simulation \nexperiments is that the length of the content providers\u2019 list (i.e. \nthe number of alternative sources) is not of major importance \nneither for increased transfer throughput nor for reduced link \nstress. On the other hand, providing partial and diverse views \nof this list to different peers based on network-local \nknowledge coupled with provider selection based on \nminimum AS hop distance (ASP), consistently provides for \nfaster content replication as well as for improved network \nresource utilisation. \nV. DISCUSSION AND CONCLUSIONS \nIn this paper, we have proposed the concept of ISP hints as \nan elegant mean to provide application-network cross-layer \noptimization. ISP hints are obtained by an application through \nthe explicit interaction with its access ISP, yet they do not \ncontain any explicit information about the ISP's network \nstructure or policies. We have shown through extensive \nperformance evaluation that ISP hints provide synergistic \noptimisation benefiting both layers. The incentives for ISPs to \ndeploy hint services are many fold. For instance, it allows \nthem to reduce the impact of overlay applications on their \nnetwork, and consequently improve the service delivered to \nall applications. Actually, it is conceivable that an ISP may \nchoose to provide ISP hints to its customers to help it regain \nor maintain control over the traffic inside its network. \nIndeed, this is because the choice of hints and their \n\u201cvalues\u201d can be made to fit the policies and strategies of the \nISP and because clients whose ISP provides hints are unlikely \nto seek hints elsewhere which could jeopardize the local ISP\u2019s \noperations. Efficient ISP hints can be implemented from \ninformation readily available at the ISP. This makes hint \nservices incrementally deployable. Furthermore, we have \nshown that hints can be effectively used as an integral part of \nthe \u201csignalling\u201d and decision-making in applications. As a \nresult, their effectiveness is independent of whether the \napplications encrypt the content or not, giving ISP hints some \nedge over approaches such as, for instance, caching. For the \napplications and corresponding overlay networks, the \nadoption of the use of hints is equally beneficial as these can \ndramatically improve perceived performance. This is the case \nnot only in normal operational circumstances, but also in \nsituations of extreme stress. Indeed, in the event of a flash \ncrowd, for instance, and such situations have been shown to \nexists not only at fixed servers but also at overlay nodes \n[7][16], ISP hints can be very valuable in avoiding the \nbottleneck conditions, maintaining good levels of service and \nhelping diffuse the situation. We therefore trust that there are \nenough incentives for all parties concerned to support and \nadopt the deployment of ISP hints. However, an ISP could \nprovide further incentives to applications by affording better \nservice to those that make efficient use of hints. Considering \nthe example of P2P file distribution, an augmented region-\naware overlay could receive more network resource on the \nbasis that it tends to quickly \u201cshed\u201d load by redirecting \nrequests outside of the ISP network. On the other hand, an ISP \nmay want to try and enforce the use of hints by blocking or \nreducing the service of noncompliant applications. \nIn this paper, we have given some simple examples of ISP \nhints and how they can be used by applications. These are by \nno means restrictive: the possibilities opened by the \ndeployment and use of ISP hints seem boundless. \nREFERENCES \n[1] Barabasi, A., L., Albert, R., Emergence of scaling in random networks, \nScience, pages 509\u2013512, October 1999 \n[2] Bittorrent, http:\/\/bitconjurer.org\/BitTorrent\/ \n[3] Boston university representative internet topology generator (BRITE), \nhttp:\/\/www.cs.bu.edu\/brite\/  \n[4] Bu, T., Towsley, D., On distinguishing between Internet power law \ntopology generators, IEEE INFOCOM\u201902, New York, USA, June 23-\n27, 2002 \n[5] Direct Connect, http:\/\/www.neo-modus.com\/ \n[6] Gnutella, http:\/\/www.gnutella.com\/ \n[7] Izal, M, Urvoy-Keller, G., Biersack, E., W., Felber, P.A., Al Hamra, A., \nGarces-Erice, L.,. Dissecting BitTorrent: Five Months in a Torrent\u2019s \nLifetime, Passive and Active Measurement Workshop (PAM\u201904), April \n19-20, 2004, Antibes Juan-les-Pins, France \n[8] Karagiannis, T., Rodriguez, P., Papagiannaki, K., Should Internet \nservice providers fear peer-assisted content distribution?, Internet \nMeasurement Conference (IMC\u201905), October 19-21, 2005, Berkeley, \nCA, USA \n[9] Kazaa media desktop, http:\/\/www.kazaa.com\/ \n[10] Keralapura, C., C., R., Taft, N., Iannaconne, G., Can ISPs take the heat \nfrom overlay networks? In ACM Workshop on Hot Topics in \nNetworks (HotNets\u201904), November 15-16, 2004, San Diego, CA, USA \n[11] Nakao, A., Peterson, L., Bavier, A., A routing underlay for overlay \nnetworks, ACM SIGCOMM\u201903, August 25-29, 2003, Karlsruhe, \nGermany \n[12] Ng, T., S., E., Zhang, H., A Network Positioning System for the \nInternet, in USENIX\u201904, Boston, MA, , June 27-July 2, 2004 \n[13] Ng, T., S., E., Zhang, H., Predicting Internet networking distance with \ncoordinates-based approaches. In Proceedings of IEEE INFOCOM, \nJune 2002 \n[14] Overnet\/edonkey2000, http:\/\/www.edonkey2000.com\/ \n[15] Pouwelse, J., A., Garbacki, P., Epema, D.,H.,J., Sips, H.,J., A \nmeasurement study of the bittorrent peer-to-peer file-sharing system, \nDelft University of Technology Parallel and Distributed Systems \nReport Series, Technical Report PDS-2004-007, 2004. \n[16] Pouwelse, J., A., Garbacki, P., Epema, D.,H.,J., Sips, H.,J., The \nbittorrent p2p file-sharing system: measurements and analysis, the 4th \nInternational Workshop on Peer-to-Peer Systems (IPTPS\u201905), February \n24-25, 2005, Ithaca, NY, USA \n[17] Rekhter,Y., Li, T., Hares, S., A Border Gateway Protocol 4 (BGP-4), \nIETF, Network Working Group, RFC4271, January 2006 \n[18] The Network Simulator - ns-2, http:\/\/www.isi.edu\/nsnam\/ns\/  \n \n"}