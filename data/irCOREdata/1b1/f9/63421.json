{"doi":"10.1016\/S0098-3004(00)00040-6","coreId":"63421","oai":"oai:nora.nerc.ac.uk:2400","identifiers":["oai:nora.nerc.ac.uk:2400","10.1016\/S0098-3004(00)00040-6"],"title":"Geoscience after IT: Part E. Familiarization with IT background","authors":["Loudon, T.V."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":["Loudon, T.V."],"datePublished":"2000-04","abstract":"The geoscientist who wishes to move beyond basic techniques and day-to-day IT applications must know something of the underlying concepts and vocabulary of IT. Communication is vital, linking your desktop to the world. Generic computing tools, widely used in geoscience, can handle documents, geographic information and database management. More basic tools, including long-established programming languages like Fortran, retain an important niche. Recent developments, such as Java and a range of markup languages, bring new flexibility and precision to the geoscience record","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/63421.pdf","fullTextIdentifier":"http:\/\/nora.nerc.ac.uk\/2400\/1\/Part_E.pdf","pdfHashValue":"49316898d8f187408de654f3c176c045d9e990f7","publisher":"Pergamon Elsevier-Science Ltd, Oxford","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:nora.nerc.ac.uk:2400<\/identifier><datestamp>\n      2012-11-22T11:48:17Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D5338<\/setSpec><setSpec>\n      7375626A656374733D5339<\/setSpec><setSpec>\n      7375626A656374733D533130<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/nora.nerc.ac.uk\/id\/eprint\/2400\/<\/dc:relation><dc:title>\n        Geoscience after IT: Part E. Familiarization with IT background<\/dc:title><dc:creator>\n        Loudon, T.V.<\/dc:creator><dc:subject>\n        Computer Science<\/dc:subject><dc:subject>\n        Data and Information<\/dc:subject><dc:subject>\n        Earth Sciences<\/dc:subject><dc:description>\n        The geoscientist who wishes to move beyond basic techniques and day-to-day IT applications must know something of the underlying concepts and vocabulary of IT. Communication is vital, linking your desktop to the world. Generic computing tools, widely used in geoscience, can handle documents, geographic information and database management. More basic tools, including long-established programming languages like Fortran, retain an important niche. Recent developments, such as Java and a range of markup languages, bring new flexibility and precision to the geoscience record.<\/dc:description><dc:publisher>\n        Pergamon Elsevier-Science Ltd, Oxford<\/dc:publisher><dc:contributor>\n        Loudon, T.V.<\/dc:contributor><dc:date>\n        2000-04<\/dc:date><dc:type>\n        Publication - Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/nora.nerc.ac.uk\/id\/eprint\/2400\/1\/Part_E.pdf<\/dc:identifier><dc:identifier>\n         \n\n  Loudon, T.V..  2000  Geoscience after IT: Part E. Familiarization with IT background.   Computers & Geosciences, 26 (3, Sup). A31-A39.  https:\/\/doi.org\/10.1016\/S0098-3004(00)00040-6 <https:\/\/doi.org\/10.1016\/S0098-3004(00)00040-6>     \n <\/dc:identifier><dc:relation>\n        http:\/\/www.elsevier.com\/wps\/find\/journaldescription.cws_home\/398\/description#description<\/dc:relation><dc:relation>\n        doi:10.1016\/S0098-3004(00)00040-6<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/nora.nerc.ac.uk\/id\/eprint\/2400\/","http:\/\/www.elsevier.com\/wps\/find\/journaldescription.cws_home\/398\/description#description","doi:10.1016\/S0098-3004(00)00040-6"],"year":2000,"topics":["Computer Science","Data and Information","Earth Sciences"],"subject":["Publication - Article","PeerReviewed"],"fullText":"<<<Back to Table of Contents       \nOn to Part F: Familiarization with quantitative analysis>>> \n \n \nGeoscience after IT: Part E \n \nFamiliarization with IT Background \n \n \nT. V. Loudon \nBritish Geological Survey, West Mains Road, Edinburgh EH9 3LA, U.K. \ne-mail: v.loudon@bgs.ac.uk \n \n \nPostprint of article in Computers & Geosciences, 26 (3A) April 2000, pp. A31-A39 \n \n \nAbstract - The geoscientist who wishes to move beyond basic techniques and day-to-\nday IT applications must know something of the underlying concepts and vocabulary \nof IT. Communication is vital, linking your desktop to the world. Generic computing \ntools, widely used in geoscience, can handle documents, geographic information and \ndatabase management. More basic tools, including long-established programming \nlanguages like Fortran, retain an important niche. Recent developments, such as Java \nand a range of markup languages, bring new flexibility and precision to the \ngeoscience record. \n \nKey Words - Generic software, computer communications, programming languages, \nmarkup languages. \n \n \n1. The need to look at the IT background \n \nGeoscientists may have gone a long way to meeting their employers\u2019 immediate needs \nwhen they are familiar with the ways of working of a desktop computer and the \nsoftware required for their projects. To move ahead, however, they must be positioned \nto meet future demands. This calls for a fuller understanding of some underlying \nconcepts and some more advanced techniques that are now widely used in geoscience. \n \nIt is a big step to use a machine to help us organize our knowledge, and we should be \naware of the ideas, largely from mathematics, which make this possible. One of the \nproblems, and opportunities, of using computers, is that they manage and manipulate \ninformation in a different way from human beings. Some applications mimic earlier \ntechnology. Others, like quantitative modeling, are practicable only with a computer. \n \n2. What computers do \n \nComputers count. They can add two numbers together. They can compare two \nnumbers and decide which is the larger. They can carry out simple instructions, such \nas: store the value of a number. They can store, retrieve and act upon a sequence of \nsimple instructions, such as: obtain two numbers from specified locations, add them \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \ntogether, compare the result with a total calculated earlier, store the larger of the two \ntotals. Because they can do such things, they can perform the full range of \nmathematical operations that reduce to a sequence of additions, such as subtraction, \nmultiplication, exponentiation, converting to logarithmic or trigonometric functions.  \n \nComputers can be connected directly or through the telephone or other network, and \ndata can be passed from one to the other. Their striking characteristic, however, is not \nthe complexity of the underlying ideas, but their extreme simplicity. Their power \nstems from an ability to perform very large numbers of simple operations quickly, \ncheaply and accurately. They thus harness the power (and reflect the limitations) of \nmathematics without the need for laborious manual calculation. \n \nTheir importance in geoscience comes from the relevance of numbers and \nmathematics and from the ability to tie into advances in electronic engineering.  \n\u2022 Text characters can be coded as numbers. By ensuring that the numeric codes \nfollow a widely accepted standard for all computers (the ASCII code), \ncomputer text can be exchanged. Because the codes get bigger numerically in \nalphabetic order, text can be arranged and selected alphabetically. A few more \nsteps lead to the electronic library. \n\u2022 Points in space can be coded as numbers, using coordinate geometry. They can \nbe combined as complex images, such as photographs or satellite imagery, or \nas geometric objects in 2, 3 or more dimensions, such as the lines and surfaces \ndepicted on a geological map. A few more steps lead to the computer-based \nspatial model. \n\u2022 Numeric and graphical data, like a geochemical analysis or a downhole log, \ncan be recorded, selectively retrieved, analyzed and graphically displayed. As \nstandards are implemented, global integration of data can follow. \n\u2022 Processes in geoscience can be modeled by mathematical operations \nrepresented by computer programs. Together with global data, they can be \nassembled as a more complete representation of aspects of knowledge. \n\u2022 Text, imagery, spatial information, data, processes, telephone, video and audio \ncan be linked in a hypermedia representation of the recorded geoscience \nknowledge base. \nElectronic engineers and computer scientists have provided the tools. Progress in their \napplication depends on experts in subject fields, such as geoscience. \n \n3. The computing system \n \nSome knowledge of IT methods and procedures is essential to understand the \ndeveloping technology which now pervades the geoscience information life cycle. We \ncan start with some general, obvious and basic definitions and concepts. Computing \nequipment, including processors, memory, disk storage, printers, display units and \ncommunication facilities, is sometimes referred to as hardware. This is distinct from \nthe software, which includes the operating system, compilers and interpreters, and \napplications programs, which specify a sequence of computer operations to meet the \nneeds of the end user. The program is run by the processor, which executes, or carries \nout, the instructions under the control of the operating system, making comparisons \nand performing elementary arithmetic operations as required. The necessary parts of \nthe program, data, and final results are stored in main memory. Information that is \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \ntoo bulky to fit in main memory or will be required for a later session is held in \nsecondary memory, such as disk storage. \n \nWe can for convenience think of the computing system as three subsystems: process, \nrepository and interface. Data items are manipulated by processes, which follow a set \nof instructions supplied in the form of a computer program. The computer is designed \nto carry out a basic instruction set. This contains instructions for such tasks as moving \nan item of data from one location to another or performing simple mathematical \noperations on the data - add A to B, move A to B, compare A and B, and so on. \nAssembler language, which may be specific to the type of computer, is the means by \nwhich systems programmers, helped by a systems programming language such as C, \ncan build up a program as a sequence of basic instructions to carry out a specific task. \nMore complex instructions are written by applications programmers in a high-level \nlanguage, such as Fortran or Basic. This is translated by a compiler or interpreter into \nthe more basic instruction code with which the machine can operate. A compiler \nproduces a coded version of the entire program, which can be run efficiently \nwhenever required. An interpreter translates and runs the program line by line as it is \nentered, thus allowing greater flexibility for the programmer at the expense of more \nwork for the computer. An application program is based on an algorithm - the set of \nrules to be followed to solve the problem.  \n \nData, the records of observations and measurements, contain many individual values. \nSeveral values referring to different properties of one thing of interest are known as a \nrecord. Many records from many related items could be regarded as a database. At \none time, a database was seen as an all-inclusive set of connected records for an \norganization. Inevitably, however, many distinct collections of data are put together \nfor different purposes, and so we have a collection of databases known as a \nrepository. There may be weak connections between the databases that were not \nrealized or not taken into account when the data were collected. The repository might \nthen be termed a data warehouse and special \u201cdata mining\u201d programs devised to \ndecipher the links between the various datasets. Geoscience data are often recorded as \na table, sometimes known as a flat file, in which each vertical column refers to a \nparticular property or variable, and each horizontal row contains the values for a \nspecific item or instance (see part C, Fig. 1). A set of such tables, in which items are \ncross-referenced through key fields, and which are structured according to rules which \nreduce needless repetition of data, form a relational database, widely used in \ngeoscience. \n \nDevelopments such as hypertext, in which cross-references are embedded in a \ndocument, enable the reader to call up a related reference in the same or in another \ndocument by clicking on a highlighted word. Hypermedia extends this concept to \ninclude references to images (which may have clickable highlighted areas), video, \naudio, discussion groups and computer processes. Tabular, quantitative datasets and \nthe associated relational database management systems no longer dominate computer \ninformation. This greater flexibility is supported by the object-oriented approach (H \n5, J 2.4). A thing of interest is referred to as an object, which can be a data table, \ndocument, image, or any combination of hypermedia. The object is a self-contained \nentity and may include within it the processes or references to processes that are \nappropriate for manipulating the data it contains. Objects are placed within classes, \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nwhich are structured as a hierarchy, and inherit attributes, and relationships to other \nobjects, from classes at a higher level. \n \nThe interfaces, where parts of the system join, are often of interest. Of particular \ninterest is the user interface, through which the user communicates with the computer \nand vice versa. For many tasks it is convenient for the user to type in sequences of \ninstructions. Much communication, however, is now through a graphical user \ninterface or GUI. This uses windows, icons, menus and pointers (WIMP). The \nwindows are rectangular areas on the screen with a separate process (program) \nrunning in each. By pointing and clicking with the mouse the window can be moved, \nresized, hidden behind other windows or made visible by placing it on top, reduced to \na small icon, enlarged back to full size, or closed to remove it completely from the \nscreen. The actions of the computer can be initiated by typing instructions in the \nwindow, clicking on items in a menu (list of options) or on icons (small symbols that \nindicate pictorially what actions will result). \n \nThe interface between the repositories, where the objects are stored, and the user \nenvironment, in which they are assembled and processed, also deserves some \nattention. The users\u2019 application programs may be linked to the data through an \napplications program interface (API) which is compatible with both. If appropriate \nstandards are followed, finding the required objects can be delegated to an object \nrequest broker (ORB), a program, which is part of the middleware (L 2) between \nclient and server (E 4) and runs partly on each. \n \nThe purpose of the complexity is to enable operating systems to cope with the number \nand diversity of available sources, while providing the user with the ability to \nintegrate at the desktop the numerous objects of interest from a multitude of sources \n(distributed objects) while retaining ease of use. Underlying the access to distributed \nobjects is the ability of computers to communicate. \n \n4. Communication \n \nScientists working on the same project have generally tended to be in close proximity, \noften in the same building. This facilitated discussion and sharing of information. \nOver these short distances, it is economically feasible to connect computers with high \nbandwidth coaxial cables or fiber-optic cables, thus giving rapid data transfer. The \nlocal-area network (LAN) built up in this way can be supported by powerful \nsoftware. A wide range of computers and their operating systems are designed to be \ncompatible with such software, which can support a large network of many hundred \ndevices. A small office with only a handful of users can be networked with simpler \nsystems at lower cost. As the network grows, the task of designing and maintaining \nsystems becomes more complex, and an expert may be required to ensure that it is \nrobust and works consistently.  \n \nLocal area networks can be linked together through the worldwide network of \nnetworks - the Internet (D 2). Its protocols (the rules, definitions and conventions \nthat govern a cooperating activity) can also be used on a local network, thus ensuring \nthat the in-house network or intranet has the same characteristics, and can use the \nsame software, as the Internet. For example, Web browsers designed for global \ncommunication can also be used locally. The cost of providing high capacity links \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nover long distances is obviously much greater than that for links within a building. \nThe Internet has been in existence for many years since it began as a research project \nof the US government. But it is only in the last few years that faster modems, better \ncompression techniques and better software made it practicable to connect home or \noffice computers through telephone lines, fiber-optic cables, microwave and satellite \ntransmission. Telecommunications companies generally provide the physical links. \nInternet service providers (ISP) may contract to use some of this transmission \ncapacity, and resell smaller amounts, together with appropriate software and services, \nto local businesses and individuals.  \n \nThe emergence of third-generation mobile phone technology is freeing \ncommunication from physical connections (International Telecommunications Union, \n1999). Broadband wireless links are made practicable by cellular radio. The area to \nbe covered is divided into smaller patches called cells, each served by a low-power \ntransmitter. The same bands of the radio spectrum can be used in different cells. A \ncomputer tracks all subscribers, handing them over from transmitter to transmitter as \nthey cross each cell boundary. The wireless industry is likely to agree global standards \nin the early years of this century, and the overlap with the computer industry must \nincrease. Geoscientists in the field, and remotely-controlled devices, will be fully \nlinked to the information system.  \n \nWhere one computer is supplied with information by another, the two computers are \nknown as client and server. The server may be configured for this specific purpose \nand may supply several client computers with data and programs on request, possibly \nover a local area network. The server can be managed by specialist staff within the \norganization to ensure that secure, up-to-date information is available. A client \ncomputer, such as the one on your desk, may also access remote servers across a wide \narea network, to obtain information that is not available locally. The GUI (E 3) can \ndevelop into a network user interface. This also has a simple point-and-click \nprocedure to select actions, but the actions are not confined to the local computer and \nwindows can be connected to a remote server. This is achieved by means of a \nUniform Resource Locator (URL), which is a form of address standardized within \nthe Internet. It identifies the servers, of which a central list is maintained, and the file \nnames, which are assigned locally. The URL also has a prefix indicating the protocol \nin which the contents will be transmitted, and a suffix indicating their format, as \ndescribed later in this section. \n \nStandards are essential to ensure that the communicated information is meaningful to \nthe recipient. The Internet works because standard protocols (TCP\/IP) are used \nthroughout. The Internet Protocol (IP) defines the routing between computers. The \nTransmission Control Protocol (TCP) defines how data are wrapped in packets for IP \nto transmit. Other protocols, such as NFS (Network File System) and HTTP \n(Hypertext Transport Protocol) are compatible parts of the TCP\/IP suite. Most modern \noperating systems provide links to these protocols. A computer can be linked to the \nInternet, or to an Internet Service Provider, through a modem, a device that, by \nmodulating and demodulating the signal, allows computers to communicate over \ntelephone lines. Where available, an ISDN link (Integrated Systems Digital Network) \nmay offer higher speed at greater cost.  \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nA local network can be linked to the Internet through a router, a computer dedicated \nto controlling the traffic between the network and the outside world. Security is \nalways a problem with networked equipment, where interlopers prowl in search of \npasswords, credit card numbers and the like, in the hope of being able to obtain and \npossibly interfere with information to which they are not entitled. It may therefore be \nnecessary to have password protection on all shared resources on the local network, as \nwell as ensuring that password protection is adequately enforced on all machines \nconnected to the Internet. The router may be connected to a separate computer, which \nhas the task of maintaining security, providing a firewall between the local network \nand the outside world. Each device that can be accessed on the Internet has its own \nunique identification number (IP address) provided through the ISP or by the Internet \nInformation Center. For most geoscientists, arrangements for networking are handled \nby the local computer communications manager, who is responsible for organizing \nand maintaining the local network. \n \nTCP\/IP is an example of an open standard, agreed by national and international \nstandards organizations such as ANSI and ISO, and available for all manufacturers \nand suppliers to follow. There are also many ad hoc and proprietary standards that \nhave been defined within a company, such as the Windows standards defined by \nMicrosoft. The specifications of some proprietary systems, such as IBM\u2019s PC-DOS, \nhave been put in the public domain. A consequence is the availability of compatible \npersonal computers and software from many suppliers. \n \nPersonal computers can be self-contained, and if users are concerned only with their \nown computing, communication may be unnecessary. Even at this level, however, it \nmay be advantageous to download data and programs from a central server rather than \nstoring all that may be required on the local machine. Maintaining an adequate range \nof material in up-to-date versions can then be the responsibility of the systems \nmanager. Workgroup computing requires a degree of interaction between the \nparticipants that demands good communication. Geoscience is a worldwide activity, \nhowever, and to take full advantage of the potential benefits, global communication is \ncalled for. \n \nFortunately, the means of communication are available. They take a number of forms \n(D 2). The most widely used means of communication, accessed by many tens of \nmillions of users, is electronic mail (e-mail). The message is generally in \nstraightforward text. The e-mail address of the intended recipient may be hard to find, \nas there is not always a reliable equivalent of the telephone directory. Large files or \nthose with a more complex format, such as computer graphics or documents with a \ncomplicated layout, may be better sent by file transfer protocol (ftp). This involves \nestablishing a two-way link before transmission, and the complexities are normally \nconcealed from the user behind a simple drag-and-drop operation (using the mouse \nto move an icon from one point on the screen to another). Shared documents that are \nbeing worked on by a collaborating group might use a format suited to workgroup \nactivities, such as MS-Notes. Discussion groups can follow Usenet protocols that can \nbe found through Web search engines. Documents for the world at large can be \nprepared in hypertext markup language (HTML) (E 6) and made available through \nthe World Wide Web. \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nThe World Wide Web (WWW) consists of many millions of pages stored in standard \nformats on numerous servers throughout the world. It can be accessed through a Web \nbrowser - software that runs on desktop client computers, and allows users to make \ngeneral searches, follow links, and display documents held on the Web. The Web \npages are distributed across a wide range of servers and are connected through links \nthat are embedded in the pages. The link appears to the user as a highlighted phrase in \na text document or area on an image. Normally concealed from the reader, but \nembedded in the text at that point, is the address of a point in the Web pages in the \nform of a URL (Uniform Resource Locator). It looks something like this: <A \nHREF:=\u201chttp:\/\/www.bgs.ac.uk\/bgs\/w3\/free\/reports.html\u201d> text here <\/A> \n \nThe first item (tag) enclosed within angle brackets indicates the start of an anchor, \nwhich is the link to another document or to a point in a document. The second set of \nangle brackets <\/A> indicates the end of the anchor. On the reader\u2019s screen, the text \nwithin the anchor is highlighted (usually by printing in a different color) and \nunderlined to indicate that it is a \u201chot-spot\u201d. Placing the cursor within the anchor \nchanges the icon, typically to a pointing finger, and clicking activates the anchor. The \nHREF attribute contains a parameter within quote marks indicating the transfer \nprotocol (here, http means hypertext transfer protocol), the name of the server \n(www.bgs.ac.uk), the path and name of the document (\/bgs\/w3\/. . . indicates the \ndirectory and the file name) and the format (html means hypertext markup language). \nOptionally, it can move to a location marked by a flag in the original document. \nClicking on the hot-spot causes the specified Web page to be retrieved from the server \ncomputer, and displayed on the screen at the flagged point. \n \nThe server name indicates the country name (USA if none is specified), preceded by \nthe type of organization, such as com or org for a commercial organization, edu or ac \nfor academic community, gov for government organization, and so on. This is \npreceded by an abbreviation for the name of the organization (bgs for British \nGeological Survey) and the name of the computer (here, www is the web server). This \n\u201cdomain name\u201d identifies the specific server and is registered with the domain name \nserver (DNS) which links the domain name to its unique IP address. \n \nIn addition to retrieving hypertext documents, as has just been described, anchors can \npoint to other places in the same document, or can access images. These are held in \nother formats such as .gif or .jpeg, rather than .html. This information is included in \nthe anchor and is used by the browser to display the image correctly. Audio (.au) and \nvideo clips (.mpeg) can also be accessed from an anchor. The flexibility of this \nhypermedia system can be increased further by using the anchor to link to a computer \nprogram. This can then request information from the user through a simple form, and \ncan perform operations such as searching a database and listing retrieved items on the \nscreen. \n \nLike many facilities accessed from the desktop, the Web contains its own \ndocumentation. The facilities it offers are rapidly expanding. Rather than attempting a \ndescription here, it is better to explore the documentation of your own installation. An \nup-to-date account of the range of facilities is available. There are also guides to \nauthors, which describe the many types of tag that appear in angle brackets. They are \nnormally hidden from the viewer but control the appearance and structure of the page. \nInformation can be obtained by following links from the ISP, the Web search engines \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nor Web developers, such as the W3 consortium. Geoscientists can readily find their \nway to lists of relevant sites on the Web by using a search engine to find entries \ndealing with their own specialist subject. Alternatively, they can look at the Web \npages of organizations such as university departments or geological surveys which \nprovide links to related sources (Ingram, 1997, Butler, 1996). If you are new to the \ntask, a demonstration from a local expert familiar with the system can be very helpful, \nbut in the longer run there is no substitute for experience. \n \n5. Generic software systems \n \nInformation comes in various easily-recognized types: text (the ordinary language \nused in most documents); spatial or graphical information (such as that found in maps \nand diagrams); structured data (like the tables of data in a database); and information \nlike video or audio records that are less frequently found in this context.  \n \nConventionally, information products have one predominant information type, as in \nthe case of books and serials, maps, data files, video tapes. Major systems of \ncomputer software, mentioned in this section, also tend to focus on specific \ninformation types. These generic systems are designed to perform operations \nanalogous to familiar actions with conventional products, such as: go to page 52, \ncenter the map on this latitude and longitude, select data where a specified variable \nlies within a given range. The metaphors make the integrated systems easier to use, \nand they now provide most of the general computing tools for geoscience. \n \nThe close links between information types and software systems suggest that they \nmight give a good basis for organizing a course (or a book) on geoscience computing. \nThis structure has not been followed here, partly because of the belief, expanded in J \n1.8, that we should break away from these traditional divisions and explore ways to \nintegrate all the information types that have a bearing on an investigation. Links \namong generic systems are being built into many of the more recent products, easing \nthe task of integration. \n \nText documents are now generally prepared on a word processor. If they are \nsubsequently published, they will be indexed in numerous computerized library \ncatalogs, but only a few geoscience documents are at present archived as full digital \nrecords. For those that are, a markup language or a standard format (E 6, L 3) can \nensure that their content can be organized and printed appropriately by computer. \nDocument management software is available to manage and retrieve software from \na repository of such documents. \n \nSpatial information, which would normally be recorded on maps and cross-sections, \ncan be managed and manipulated on the computer by a geographic information \nsystem (GIS). The GIS makes it possible to establish, manage, analyze and display a \ndatabase of cartographic information. Contouring programs can interpolate three-\ndimensional data and display them as contour maps and cross-sections. Image-editing \nsoftware can manipulate and adjust other images, such as photographs and satellite \nimagery. Computer aided design (CAD) and scanning software help to capture data \nand draw maps and diagrams. Visualization programs present datasets graphically, to \nmake it easier to see the relationships between variables. \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nStructured data benefited from computer methods at an early stage in the development \nof IT, as they could be handled relatively easily and cost-effectively with long-\nestablished programming languages, such as Fortran. The tabular layout is appropriate \nfor much geoscience data as it enables like to be compared with like, and is well-\nsuited to computer analysis. Relational databases fitted this layout well, extending it \nto keep track of complicated relationships. Relational database management systems \n(RDBMS) provided the means to separate data management (input, editing, \ndeleting, updating, selecting, sorting and retrieving) from subsequent analysis and \npresentation. Statistical analysis and spreadsheet software make it possible to explore \nthe properties and relationships of the data, and other quantitative models throw light \non the underlying physical relationships. \n \nProcesses or computer programs are generally seen as distinct from the data, so that \nthey can be reused with many datasets, while one dataset can be analyzed by many \nprocesses. This separation is not always appropriate, as some data are dependent on a \nparticular process for their interpretation. For example, data points chosen to be \nrepresentative of surfaces or lines on a map may recreate the original only if a specific \nprocess is applied to them. In an object-oriented system (H 5), objects are seen as \nlinked data and processes, both of which, however, should remain reusable in other \ncontexts.  \n \nVideo and audio records have not been widely used for storing geoscience \ninformation. Now that they can be readily linked to hypermedia, however, there is \nconsiderable scope for their use in demonstrating, say, the appearance of a rock slice \nwhen rotated under crossed nicols, or a picture of a soil profile at the time of \nexcavation. Specialist software is available for compressing these files to reduce their \nlarge size for storage or communication. \n \n6. Programming languages \n \nThe importance of programming languages to the average user is diminishing. In most \napplications, user costs greatly outweigh machine costs. Building on the existing \nsoftware repertoire is preferable to writing new programs from scratch. For most \nusers, the well-established and commercially available generic systems, together with \nspecific application programs, are sufficiently flexible to meet their needs, and it is \nmore economical to buy than to build. Effort in selecting and understanding existing \nsystems may be more rewarding than gaining skills in a programming language. In \nthese circumstances, it is questionable whether it makes sense for a geoscientist to \nbecome a proficient programmer. The learning overhead is considerable, and practice \nis needed to remain fluent.  \n \nMost commercial systems deliberately hide the programming code from the user, and \nthe task is to learn the idiosyncrasies of the system and the means of achieving the \ndesired results. Until recently, software systems tended to be compartmentalized, \noften in a deliberate attempt to prevent the user\u2019s escape to rival systems through \nimporting or exporting data. Programming skills made it easier to cross the interface. \nThis is now less of a requirement as it is easier to find an exchange format supported \nby both systems. \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nHowever, good reasons remain for learning a computer language. For the applications \nprogrammer, a geoscience training supplemented by programming skills is a powerful \ncombination. In areas like the development of quantitative models, the needs of the \nindividual or the organization may be so specific that only home-made code will do, \ndetailing the programmer's instructions step by step. In other cases, standard software \nmay handle many of the tasks, but programming may be needed for specific additions. \nThere is a large amount of existing code written within organizations or available \nfrom colleagues or the literature, for example, Press et al. (1992) and Universal \nLibrary (1999). You need programming skills to modify it for the task in hand, or to \nkeep it up to date. Extensive libraries of high-quality subroutines are available for \nmathematical and statistical analyses, notably in Fortran. They can be included in \nyour own programs. It can also be argued that programming skills provide a deeper \nunderstanding of how the computer works and thus of how methods can best be \ndeveloped in future. A look through journals such as Computers and Geosciences \n(1997) suggests that extending the range of applications calls on an ability to program.  \n \nFor most users, it is worth knowing something about computer languages in general, \nas they have much in common. A short course in one language could also give useful \nbackground. Languages you are likely to encounter include Fortran, Pascal, Basic, C, \nC++ and Java. This section offers a very general introduction for the non-\nprogrammer. \n \nThe languages just mentioned are procedural, setting out line by line the sequence of \nprocedures which the computer is instructed to follow, as opposed to stating the \nobjectives and leaving the computer to select the method, as in SQL (mentioned later \nin this section). They deal with variables and resemble familiar algebraic formulas, \nsuch as x=1\/2(y+z)2.  In Fortran one might write X=0.5*(Y+Z)**2. This, however, is \nnot stating an equality. Rather it is indicating that the right-hand side should be \ncalculated, and stored in a variable called X. Perhaps = should be read as \u201cbecomes\u201d \nrather than \u201cequals\u201d. The meaning of the Fortran statement could be interpreted as \nfollows: the names X, Y and Z refer to storage locations; if the names have already \nbeen used in the program, look up their locations, otherwise assign new locations for \nthem; take the contents of Y and Z, apply the arithmetic operations indicated and store \nthe result in X. The \/ denotes division, * multiplication, and ** raising to a power. \nVariables are usually given names which the programmer can remember more easily \nthan X, Y and Z, thus: Distance = Time * Velocity. Data in sequence, as in time series \nor tables, are conveniently denoted by suffixes in algebra: y10 is the tenth \nmeasurement of y, yi is the ith. Similarly, in Fortran, Time(5), Time(I), or Height(I,J) \nwould represent the fifth and Ith measurements in a series called Time, and the entry \nin the Ith row and Jth column of a table of measurements (an array) called Height. \n \nIt is often necessary in a program to apply the same type of operation to each member \nof a series in turn. Rather than writing out each operation individually, it is written \nonce, using index variables such as I and J rather than numbers. It is then placed \nwithin a loop which is an instruction to perform the operation, or set of operations, \nwith stated values of indexes. In Fortran, it might look like: \n DO  I=1,15 \n  sequence of statements (operations) \n END DO \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nThe sequence of operations is performed from the beginning to the end, in this case 15 \ntimes. The variable I, which could also be the index of variables in the statements, \ntakes the values 1, 2, 3 . . . 15 in successive loops. To give the necessary flexibility, \nthe programmer can cause control to jump to another point in the program under \ndefined conditions. The command can be conditional on a variable having a \nparticular value or a value within a certain range.  \n IF (Height(I,J) < 500.0) THEN  \nwould indicate that control would pass to the next statement if the value of Height(I,J) \nis less than 500. Otherwise, control passes to a later statement that begins with the \nword ELSE. \n \nIt is thus possible, even without knowing much about a programming language, to get \nsome idea of the calculations by looking at a program. Generally, one statement goes \non one line, but & indicates that it continues on the next line. The ; separates short \nstatements on the same line. Comments are generally inserted to explain the program \nto anyone reading the code. They are introduced by ! and continue to the end of the \nline. They are ignored by the compiler.  \n \nA surprisingly complex set of calculations can be built up from these simple basic \nbuilding blocks. As the same set of operations can be useful in many different \napplications, they can be written as a self-contained subroutine or procedure, which \nis given a name and a means of indicating the variables on which it is to operate. \nThus, Subroutine Sum(X,N) might be written to calculate the total of the first N \nvalues of the series called X. The subroutine can be invoked by a statement in another \nroutine, such as Call Sum(Time, Number). Calling the subroutine is equivalent to \nrepeating all the code of the subroutine at that point. \n \nStatements are also required to instruct the computer to acquire data from a particular \nsource, or send it to a particular destination. It might, for example, request the user to \nenter information from the keyboard, or might read it from a disk, or send output to a \nscreen or printer. The READ and WRITE or PRINT statements in Fortran indicate the \nvariables holding the information, and where the data are to be acquired or delivered. \n \nFortran is a long-established programming language for scientific use, which has \nundergone substantial improvements over the years, and is still widely used in \ngeoscience. The huge investment in existing programs and expertise mean that it is \nlikely to remain in use for some time. It is a powerful language capable of \nrepresenting complex tasks in numerical calculation. It is a reasonably tolerant \nlanguage, allowing programmers to express the same idea in different ways, some \ninherited from earlier versions of the language. Programmers can consequently fall \ninto bad habits which make their programs difficult for others (and themselves) to \nunderstand and to maintain or modify. For training purposes, therefore, a simpler \nlanguage such as Pascal may be better because it takes a more stringent view of the \nway the sequences of commands (program code) are presented. It thus forces the user \nto acquire better programming habits. For less complex tasks, Basic in its various \nforms lacks the power of some other languages, but is simpler to learn and to run. \nBasic is interpreted, rather than compiled like Fortran (E 3), and it is therefore \npossible to spot mistakes as each statement is written, and the programmer can correct \nthem before proceeding. Visual Basic is widely used to give programming flexibility \nin a desktop environment. \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \n \nThe WIMP graphical user interface (E 3) is currently the norm for the desktop \ncomputer, and is a more recent development than Fortran. The interface is handled at \na deeper level in the computer software than the applications which were just \nmentioned, and special languages such as Motif have been written to help the \nprogrammer to organize the objects, such as the windows, cursors, icons, and menu-\nbars, which appear on the screen. More generally, languages such as C provide the \nbasic facilities to access the systems functions of the computer. C++ is its object-\noriented counterpart. Programming at this level is a specialized activity. It implies a \nneed to modify or extend the standard functions supplied by commercial systems, \nwhich may be as likely to confuse as to help the average user. \n \nA number of other specialized languages deserve a brief mention. The success of the \nWorld Wide Web has encouraged some language developments. Java is designed to \noperate within a virtual Java environment. In effect it runs in its own operating system \non the desktop client. The server supplies information to the client, including \n\u201capplets\u201d or small applications - processes or programs which operate on the \ninformation. The entire object, data and process, is thus supplied from the server. A \nsimple, low-cost client can take full advantage of the server\u2019s power. Furthermore, the \nclient can access a wide range of servers worldwide, receiving and combining applets \nfrom them all. The drawback is the heavy communications load and inefficiency in \nthe handling of the data. Perl is another language which is widely used on the Web, \nfor bringing to life information delivered by the server. \n \nMarkup languages place, within a document, symbols which can be read and operated \non by appropriate systems. Thus a text report or document can be marked up to \nidentify topics or the various sections, such as title, abstract, chapters, sections, \nparagraphs, references, or illustrations. The Standard General Markup Language \n(SGML) has been used in this role for some time (Seaman, 1999). The advantages of \nsubdividing a document in this way are considered in D 6. Here, it should be \nmentioned that HTML, the hypertext markup language, is a subset of SGML which is \nused in many Web documents (E 4), and that XML (extensible markup language), has \nrecently been developed as another simpler subset of SGML, with more powerful \nfacilities than HTML. Markup languages can also be used to subdivide three-\ndimensional graphical objects using VRML, the virtual reality markup language. \n \nPostscript is a page description language, describing the layout of text and images on \na page, in a form that can be edited or modified. The Postscript files which it \ngenerates are widely used in medium to high-quality printing. Acrobat offers some of \nthe features of HTML while preserving the page layout in a portable data format \n(PDF) (Kasdorf 1998).  LISP (LISt Processor) is another language used with text and \ngraphics, where the information is stored as a consecutive sequence (string or list) of \ncharacters or of points on a line. It found an important niche in work on machine \nintelligence, and has been used in cartographic and word processing applications. \nStructured Query Language (SQL) has been widely adopted as a standard interface \nfor querying relational databases (H 3). The advantage of this standard interface is \nthat information can be spread across several databases, each with their own data \nmanagement systems, and can still be processed by many clients. Communication is \nmade possible by adhering to the SQL standards. \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nComputer languages can thus be seen as rigorously defined interfaces between the \napplication and the operating system (Fortran, C), the GUI and the operating system \n(Motif), the client and the server (HTML, Java), the document and the printer \n(Postscript) and the database and the application (SQL). Numerous other languages, \nsuch as APL, Cobol and Ada have played their part in geoscience applications, but \nintroduce no new ideas at this point. Special-purpose languages are available for some \nsoftware products, enabling the user to modify or customize the products, without \ncompromising the original code. \n \nThe computer can follow with speed and accuracy a set of rules expressed as the \ninstructions for executing an algorithm. It lacks the capacity to understand the \nunderlying reasons or to make decisions about unexpected results, tasks at which \nhuman beings are much more adept. The systems analyst and user must therefore \ndecide what can better be done by machine and what should remain the task of the \nscientist. The best features of both can be combined in an interactive system (J 1.6) \nwhere the user can keep track of progress and guide the computer in its operations. \n \n7. References \n \nPress, W.H., Teukolsky, S.A., Vetterling, W.T., Flannery, B.P., 1992. Numerical \nRecipes in Fortran \u2013 the Art of Scientific Computing, 2nd edn. Cambridge University \nPress, Cambridge, 963pp. \n \n7.1 Internet references \n \nButler, J.C., 1996- . Another node on the Internet for those with interests in \ngeosciences, mathematics and computing. http:\/\/www.uh.edu\/~jbutler\/anon\/anon.html \n \nComputers & Geosciences, 1997- . Computers & Geosciences Online. \nhttp:\/\/www.elsevier.nl\/locate\/compgeosci \n \nIngram, P., 1997. The Virtual Earth: a tour of the World Wide Web for earth \nscientists.  http:\/\/atlas.es.mq.edu.au\/users\/pingram\/v_earth.htm \n \nInternational Telecommunications Union, 1999. IMT 2000: A vision of global access \nin the 21st century. http:\/\/www.itu.int\/imt\/ \n \nKasdorf, B., 1998. SGML and PDF - why we need both. The Journal of Electronic \nPublishing, June 1998, vol 3 (4). http:\/\/www.press.umich.edu\/jep\/03-04\/kasdorf.html \n \nSeaman, D., 1999. About Standard Generalized Markup Language (SGML).  \nhttp:\/\/etext.lib.virginia.edu\/sgml.html \n \nUniversal Library, 1999. Numerical recipes on-line. Hosted by Carnegie Mellon \nUniversity. http:\/\/www.ulib.org\/webRoot\/Books\/Numerical_Recipes\/ \n \n \n \n \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \nLoudon, T.V., 2000. Geoscience after IT: Part E  (postprint, Computers & Geosciences, 26(3A)) \n \n \nDisclaimer: The views expressed by the author are not necessarily those of the British \nGeological Survey or any other organization. I thank those providing examples, but should \npoint out that the mention of proprietary products does not imply a recommendation or \nendorsement of the product. \n \n<<<Back to Table of Contents       \nOn to Part F: Familiarization with quantitative analysis>>> \n \n"}