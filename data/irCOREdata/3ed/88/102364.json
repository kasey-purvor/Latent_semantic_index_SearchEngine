{"doi":"10.1109\/VETECS.2005.1543764","coreId":"102364","oai":"oai:epubs.surrey.ac.uk:1823","identifiers":["oai:epubs.surrey.ac.uk:1823","10.1109\/VETECS.2005.1543764"],"title":"On the Use of Packet-Level FEC and Data Carousels for the Delivery of Broadcast\/Multicast Services to Mobile Terminals","authors":["Chipeta, M","Karaliopoulos, M","Evans, B G","Tafazolli, R"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2005-01-01","abstract":"<p>In broadcast wireless networks, the options for reliable delivery are limited when there is no return link or a return link is not deemed cost-efficient due to the system resource requirements it introduces. In this paper we focus our attention on two reliable transport mechanisms that become relevant for the non real time delivery of files: packet-level Forward Error Correction (FEC) and data carousels. Both techniques perform error recovery at the expense of redundant data transmission and content repetition respectively. We demonstrate that their joint design may lead to significant resource savings.<\/p","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:epubs.surrey.ac.uk:1823<\/identifier><datestamp>\n      2017-10-31T14:03:16Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><setSpec>\n      6469766973696F6E733D656E67616E64706879736963616C736369656E636573:656C656374726F6E6963656E67696E656572696E67:63637372<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/epubs.surrey.ac.uk\/1823\/<\/dc:relation><dc:title>\n        On the Use of Packet-Level FEC and Data Carousels for the Delivery of Broadcast\/Multicast Services to Mobile Terminals<\/dc:title><dc:creator>\n        Chipeta, M<\/dc:creator><dc:creator>\n        Karaliopoulos, M<\/dc:creator><dc:creator>\n        Evans, B G<\/dc:creator><dc:creator>\n        Tafazolli, R<\/dc:creator><dc:description>\n        <p>In broadcast wireless networks, the options for reliable delivery are limited when there is no return link or a return link is not deemed cost-efficient due to the system resource requirements it introduces. In this paper we focus our attention on two reliable transport mechanisms that become relevant for the non real time delivery of files: packet-level Forward Error Correction (FEC) and data carousels. Both techniques perform error recovery at the expense of redundant data transmission and content repetition respectively. We demonstrate that their joint design may lead to significant resource savings.<\/p><\/dc:description><dc:date>\n        2005-01-01<\/dc:date><dc:type>\n        Conference or Workshop Item<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/epubs.surrey.ac.uk\/1823\/1\/fulltext.pdf<\/dc:identifier><dc:identifier>\n          Chipeta, M, Karaliopoulos, M, Evans, B G and Tafazolli, R  (2005) On the Use of Packet-Level FEC and Data Carousels for the Delivery of Broadcast\/Multicast Services to Mobile Terminals  In: 2005 IEEE 61st Vehicular Technology Conference.     <\/dc:identifier><dc:relation>\n        10.1109\/VETECS.2005.1543764<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/epubs.surrey.ac.uk\/1823\/","10.1109\/VETECS.2005.1543764"],"year":2005,"topics":[],"subject":["Conference or Workshop Item","NonPeerReviewed"],"fullText":"On the use of packet-level FEC and data carousels for \nthe delivery of broadcast\/multicast services to mobile \nterminals \nM. Chipeta, M. Karaliopoulos, B.G. Evans and R. Tafazolli \nMobile Communications Research Group,  \nCenter for Communications Systems Research, University of Surrey \nGuildford, GU2 7XH, United Kingdom \nEmail: m.chipeta@surrey.ac.uk \n \nAbstract\u2014In broadcast wireless networks, the options for reliable \ndelivery are limited when there is no return link or a return link is \nnot deemed cost-efficient due to the system resource requirements \nit introduces. In this paper we focus our attention on two reliable \ntransport mechanisms that become relevant for the non real time \ndelivery of files: packet-level Forward Error Correction (FEC) \nand data carousels. Both techniques perform error recovery at the \nexpense of redundant data transmission and content repetition \nrespectively. We demonstrate that their joint design may lead to \nsignificant resource savings. \nKeywords- packet-level FEC; data carousels; reliable multicast \nI. INTRODUCTION \nReliable transport is amongst the fundamental requirements \nfor the delivery of point-to-multipoint services in wireless \nenvironments, where transmission errors are more frequent than \nin wired networks. The mobility of the users exacerbates the \nsituation: signal reception quality is then affected by fading \neffects [1], while in cellular networks, cell handover may lead to \ntemporary loss of connectivity. Data loss may become \nunacceptable for the application requirements, so that some \nform of error recovery is mandatory. In many cases, a return \npath does not exist or is not efficient to provide, thus limiting the \navailable alternatives for error recovery. Packet-level Forward \nError Correction (FEC) [2]-[4] and data carousels [5] [6] are \npossible mechanisms in this context since they can work in \npush-type delivery mode without any user feedback. \nThe value of the two techniques is reflected in their broad \nuse in several wireless systems and in ongoing standardization \nwork. The Internet Engineering Task Force (IETF) has specified \na FEC building block for use in reliable multicast protocols [7] \n[8], whilst in the European Digital Video Broadcasting (DVB) \nstandard for broadcasting to mobile handheld terminals (DVB-H \nor DVB-Handheld [9]) packet-level FEC is adopted in the \nMulti-Protocol Encapsulation layer, an adaptation layer lying \nabove the radio transmission layers of the MPEG2\/DVB \ntransmission scheme. Data carousels, on the other hand, are one \nof the standard ways for DVB implementation over several \nmedia (cable, satellite, terrestrial radio) [10]. In Terrestrial \nUniversal Mobile Telecommunications System (T-UMTS), the \nstandard for third generation mobile cellular networks adopted \nin Europe and Asia, including Korea and Japan, the use of \npacket-level FEC and data carousels is considered in the context \nof Multimedia Broadcast Multicast Service (MBMS) framework \n[11]. The support of point-to-multipoint service over cdma2000, \nthe third generation radio interface adopted in North America, \nenvisages the encoding of radio access layer frames before \nforwarding them to the physical layer [12]. Finally, both \ntechniques are investigated for the design of the reliable \ntransport layer in the emerging Satellite Digital Multimedia \nBroadcasting system [13], a hybrid satellite-terrestrial system \nthat deploys a unidirectional satellite component for the delivery \nof point-to-multipoint services to large, geographically \ndispersed audiences, in close synergy with terrestrial mobile \ncellular networks. \nIn the following, we are not going to restrict our discussion \nto any of the aforementioned systems. We will rather investigate \nthe two techniques, specifically packet-level FEC and data \ncarousels, resorting to analytical approximations widely used in \nthe literature. We review some of this work in the following \nsection before presenting our contribution \u2013an investigation of \nencoded data broadcasting\u2013 in section II. Section III presents \nnumerical examples demonstrating the benefits of \nsuperimposing packet-level coding on data carousels. The \nresponsiveness of the data broadcast system increases and \nexperiences a maximum for certain values of coding overhead, \nbeyond which performance deteriorates. We conclude the paper \nin section IV. \nII. PROBLEM FORMULATION \nA. Broadcast scheduling and data carousels \nIn a so-called \u2018push\u2019 system, the broadcast network transmits \ndata towards the users not as a result of an explicit request on \nbehalf of one or more users, as in a \u2018pull\u2019 system, but rather \nunder the expectation that the transmitted content will appeal to \nsome of the target users. The network cannot know which item \neach user is interested in; nevertheless, on the basis of user \nsubscription profiles or historical data, it may know what is the \nrelative demand for various data at several levels of detail: for \nexample if audio is more popular than video data but also \nwhether video clip X is more popular than song Y. \nThis work is partially funded by European Commission in the context  of \nthe EU Research Framework Program 6 Integrated Project MAESTRO (Mobile \nApplications & sErvices based on Satellite and Terrestrial inteRwOrking), \nwebsite: http:\/\/www.ist-maestro.dyndns.org  \n0-7803-8887-9\/05\/$20.00 (c)2005 Crown Copyright\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 13,2010 at 15:04:39 UTC from IEEE Xplore.  Restrictions apply. \n 1 2 3 1 4 5 1 6 7 1 2 3 1 4 5\u2026 \u2026\nt1 t2\na a\nItem 1 is not \nfully retrieved\nItem 1 is not \nfully retrieved\nItem 1 is fully \nretrieved\nUser i \u201crequests\u201d\nitem 1\nItem 1 is stored at the \nterminal of user i\nResponse time for user i item 1 \nBroadcast schedule\n \nFigure 1.  Example of broadcast schedule and item response time \n \nConsider, therefore, that the network transmits M different \ndata items over a wireless broadcast link. An example may be a \nfile but it may also be a set of files or some other way of data \ngrouping. \nEach item i is characterized by its length iL , measured in \npackets, and a demand probability iq , with \u2211\n=\n=\nM\ni\niq\n1\n1 , reflecting \nthe interest of users in this particular content. With broadcast \nscheduling, these M items are organized in a schedule, which is \nrepeated continuously over the air, with the aim to minimize the \nmean response time S over all items. The response time for item \ni is defined as the time that elapses between time instant 1t  when \nthe user expresses his desire to access a certain item, to time \n2t when the item is retrieved from its schedule and is stored at \nhis terminal (Fig. 1). \nIn fact, at time 1t , the user will interact with his terminal via \nthe Man-Machine-Interface (MMI) and ask for the particular \ndata item. The user equipment will then read a predefined radio \nchannel where the announcements of broadcast data are made \nand will tune to the correct radio channel to retrieve the \nrequested data. How quickly this happens is a function of the \ntransmission medium quality and how frequently each data item \nappears in the schedule; in an optimum schedule design, the item \nfrequency of appearance in the schedule is closely related to the \nitem demand probabilities { }iq [14]. In particular, it is shown in \n[15] that under the optimum broadcast schedule design strategy, \nthe average response time is given by: \n( )\n2\n1\n21\n2\n1\n\uf8f7\uf8f7\uf8f8\n\uf8f6\n\uf8ec\uf8ec\uf8ed\n\uf8eb\n+\u22c5\u22c5\u22c5= \u2211\n=\nM\ni\niiiopt rlqS , (1) \nwhere ir  is the mean number of required re-appearances of data \nitem i in the schedule after its first appearance, so that it is fully \nretrieved in the presence of data loss. In general, data loss may \nbe due either to congestion or transmission errors. { }il  is the set \nof item lengths normalized with respect to the minimum item \nlength \ni\ni\ni\ni L\nL\nl\nmin\n= . (2) \nNote that, using (2), the response time is measured in time units \nequal to the transmission time T of the minimum-length item \nC\nL\nT\nii\nmin\n=  (3) \nwhere C is the link capacity in packets per second. \nAt the user terminal, there are two possibilities for retrieving \nan item: \n1) One-shot retrieval of data items: upon the appearance of \neach item in the schedule, the receiver will either retrieve \ncorrectly the whole item or not. When part of the item is not \nretrieved, correctly retrieved item parts are discarded rather than \nstored and the retrieval procedure begins from scratch upon the \nnext item appearance in the schedule. If p denotes the uniform \npacket error rate and pN  the number of item packets, the \nprobability Ip  that an item is not fully received within one \nappearance in the schedule becomes  \n( ) pNI pp \u2212\u2212= 11  (4) \nand the probability that the full item will be correctly retrieved \nby its nth appearance in the schedule after the user \u2018requests\u2019 it \nbecomes \n( ) ( ) 11 1\n1\n\u2265\u22c5\u2212= \u2212\n=\n\u2211 nppnP kIn\nk\nI\nC\nI  (5) \nto yield an ir  equal to \n( )\nI\nI\npi p\np\nNpr\n\u2212\n=\n1\n, . (6) \n2) Cumulative retrieval of data items: in contrast to the \nprevious scenario, the receiver stores that part of the item that \nwas received correctly, even if the whole item is not retrieved \ncorrectly. This requires appropriate data packaging that will \nallow the identification of correctly received data parts and \nlater, when all item parts are correctly retrieved, the reassembly \nof the item. \nNow, the probability that the item will have been \nreassembled by its nth appearance in the schedule is \n ( ) ( ) 11 \u2265\u2212= npnp pNnCI    (7) \nwhile ir  becomes \n ( ) ( )[ ]\u2211\u221e\n=\n+\n\u2212\u2212=\n0\n111,\nk\nNk\npi\nppNpr    (8) \n \nAuthorized licensed use limited to: University of Surrey. Downloaded on April 13,2010 at 15:04:39 UTC from IEEE Xplore.  Restrictions apply. \n0 2 4 6 8 100.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n1\nNumber of item appearances in the schedule\nP IC\np=0.5%\np=1%\np=5%\n \nFigure 2.  Cumulative (continuous lines) vs. one-shot retrieval (dashed lines) \nretrieval of items \u2013 iMqL ii \u2200== ,1,20 ) \n0 2 4 6 8 100.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n1\nNumber of item appearances in the schedule\nP IC\np=0.5%\np=1%\np=5%\n \nFigure 3.  Cumulative (continuous lines) vs. one-shot retrieval (dashed lines) \nretrieval of items \u2013 iMqL ii \u2200== ,1,100 ) \nFig. 2 and Fig. 3 plot (5) and (7) to draw a comparison \nbetween the two options for data retrieval in broadcast \nscheduling. As expected, the cumulative retrieval of items \naccelerates the acquisition of the full item when compared to the \none-shot retrieval technique. The performance gap between the \ntwo techniques increases with higher packet error rates and \nlarger items. In fact, the cumulative retrieval technique appears \nto be less sensitive to packet error rate and item length \nvariations, whereas with the one-shot retrieval, the time to \nacquire the full item may increase dramatically for large items, \neven under moderate packet error rates. On the other hand, the \none-shot retrieval technique is simpler since there is no \nrequirement to cache a partially received item and the overheads \nfrom data packaging can be reduced compared to the cumulative \nretrieval technique. \nB. Packet-level FEC \nPacket-level FEC (hereafter called FEC) has been one of the \nfundamental building blocks for the support of reliable \nmulticasting in wired networks [7]. Contrary to data carousels, \nwhere data transmissions are fully repeated, with FEC redundant \ninformation is added to the original data to make them more \nresilient to loss. The original data are structured into blocks of k \npackets and are used to produce the n packets of the FEC block, \nwhich will finally be transmitted to the network. The block can \nbe decoded correctly at the receiver as long as less than kn \u2212  \npackets are lost (Fig. 4). In general, codes can be classified as \nlarge or small [7]. Large codes can support large k and n, \nwithout a severe penalty in the processing complexity and \nencoding\/decoding speeds. With large codes, the size of the \noriginal data in a FEC block may coincide with the whole file. \nOn the contrary, small codes are limited to small values of k and \na large file will have to be split into several FEC blocks for \ntransmission, in order to avoid excessive overheads in terms of \nencoding\/decoding speed. \nIn the following, we only consider systematic small block \nerasure codes, such as Reed-Solomon (RS) codes, where a \nreceiver needs to collect at least k packets out of the n of the FEC \nblock to recover the original k. In contrast, large codes require \nmore than k packets to recover a given FEC block [7]. We can \ndefine the code rate nkR =  and its inverse, the stretch factor \nknSF \/= , which is a direct measure of the redundancy \u2013hence, \nthe additional capacity requirements\u2013 introduced by FEC. \nFor systematic small block codes ( )nk, , the FEC block error \nrate FBLER, namely the probability not to decode correctly a \nsingle FEC block, is  \n( ) ( ) \u22c5\u2212= \u2211\n+\u2212=\n\u2212\nn\nknj\njnjn\nj ppFBLER\n1\n1  (9) \nwhere p, as in (4) is the residual uniform packet error rate. \nTherefore, the probability to correctly retrieve a file consisting \nof NB FEC blocks, becomes \n( )\nBN\njnj\nF\nn\nknj\npp\nj\nn\nP \uf8f7\uf8f7\uf8f8\n\uf8f6\n\uf8ec\uf8ec\uf8ed\n\uf8eb\n\u2212\u22c5\u22c5\uf8f7\uf8f7\uf8f8\n\uf8f6\n\uf8ec\uf8ec\uf8ed\n\uf8eb\n\u2212= \u2211\n+\u2212=\n\u2212\n1\n11100,  (10) \nThe erasure correcting capability of the codes is a function of \nboth the SF and the size of FEC block k. Imagine, for example, \nthat we want to encode a file of 200kB into blocks of 500-byte \npackets. Fig. 5 plots 100,FP  under four different possible \ncombinations of { }.,, BNSFk  It is obvious that, for a given item \nsize, the probability to retrieve correctly the full item increases \nwith both k and SF. \n1 \u2026.2 k\n1 2 .. k k+1 n\n1 2 .. k k+1 n\nTransmission \/\nLossychannel\nCorrectly received\n1 k-13 k+2 k + a\n1 \u2026.2 k\nTo Encoding process\nAfter Decoding\nEncoded original Packets Parity Packets\nFEC header\nOriginal packets\nErasure packets\n \nFigure 4.  The encoding and decoding of a FEC block \nAuthorized licensed use limited to: University of Surrey. Downloaded on April 13,2010 at 15:04:39 UTC from IEEE Xplore.  Restrictions apply. \n10\u22122 10\u22121 100\n0\n0.2\n0.4\n0.6\n0.8\n1\nPacket error rate, p\nP F\n,1\n00\nk=20 NB=20 SF=1.2\nk=50 NB=8 SF=1.2\nk=50 NB=8 SF=1.4\nk=100 NB=4 SF=1.4\n \nFigure 5.  The probability of full file retrieval vs packet error rate \u2013L=400 \nC. Combined use of FEC and broadcast scheduling \nWe now consider an integrated carousel-FEC transmission \nscheme: files are organized in broadcast schedules for repeated \ntransmission after being FEC-encoded. In the general case, each \nfile\/item i may feature its own FEC parameters ( )ii nk ,  leading \nto different FBLERs; moreover, each item is of different length \nil , eventually corresponding to different number of FEC blocks \nper item iBN . Then, the minimum mean response time S can be \nderived as \n( ) ( )[ ]\n2\n1\n,,21\n2\n1,, \uf8f7\uf8f7\uf8f8\n\uf8f6\n\uf8ec\uf8ec\uf8ed\n\uf8eb\n+\u22c5\u22c5\u22c5= \u2211\n=\nM\ni\ni\nBiiii\ni\ni\niopt Nnkrlk\nnqnkS  (11) \nwhere ir  can still be derived from (6) and   (8) for the one-shot \nitem retrieval and cumulative item retrieval respectively, by \nsubstituting: \nBp\nFI\nNN\nPp\nFBLERp\n\u2192\n\u2212\u2192\n\u2192\n100,1 . (12) \nEquation (12) suggests that the optimum response time now \nbecomes a function of the vectors nk,  employed for the \nencoding of the different items.  \nIncrease of the FEC redundancy has a two-fold impact: on \nthe one hand, for given link capacity, it increases the equivalent \nitem sizes; hence, it increases the average response time in (12). \nOn the other hand, increase of the redundancy increases the \nprobability of one-shot retrieval of the whole file 100,FP . We \nspeculate that the choice of FEC parameters will not be made \nindependently for each item but will rather be rule based. We \nconsider two such rules in the following: \n1) Fixed redundancy for all items: the FEC block size and \nthe stretch factor are the same for all items, independent of their \nsize, namely \nji kk =  and ji nn = , jiji \u2260\u2200 ,, . \nNote that the resulting probability of correct item reception \nvaries according to the item size, i.e., \nj\nF\ni\nF PP 100,100, \u2260  \nIn this case, the objective that drives the design, together \nwith the minimization of the mean response time, is the \npreservation of a target link capacity overhead due to the use of \nFEC. \n2) Fixed probability of one-shot full item retrieval: the \nstretch factor varies from item to item but not randomly; \ninstead, for a given FEC block size of the ith item in  the size of \nFEC block in  for item j is adjusted so that \nji kk =  and \nj\nF\ni\nF PP 100,100, = , jiji \u2260\u2200 ,, . \nThis rule gives higher priority to the fair treatment of the \ndifferent types of content transmitted over the air, since it \nguarantees to all items equal probability of full retrieval upon \neach appearance in the schedule. \nIII. NUMERICAL EXAMPLES- DISCUSSION \nWe now present some numerical examples comparing the \nalternatives described in section II.A for the item retrieval \ntechnique and the rules introduced in section II.C for the FEC \nparameterization for different values of number of items and \nFEC block length. We consider two distributions for the item \ndemand probability, the uniform and the Zipf with skewness \nparameter \u03b8  equal to 1.25, while the item size may either be the \nfixed for all items or vary uniformly between two bounds 0l  and \n1l  (Table I).  \nIn all the plots that follow, the average response time is \nmeasured in time units equaling the transmission time of the \nminimum FEC block size. \nTABLE I.  DISTRIBUTIONS CONSIDERED FOR THE NUMERICAL \nEXAMPLES \nUniform Zipf \nItem demand \nprobability Mi\nMi\nq \u2264\u2264= 1,\n1\n \n( )\n( ) Mii\ni\niq\ni\n\u2264\u2264= \u2211 1,1\n1\n\u03b8\n\u03b8\n \nFixed Variable (increasing with i) \nItem length \n(FEC blocks) \nMiccil \u2264\u2264\u2265= 1,1,\n (default c=5) \n( ) \uf8fa\uf8fa\uf8fb\n\uf8f9\n\uf8ef\uf8ef\uf8f0\n\uf8ee\n+\u2212\u22c5\uf8f7\uf8f7\uf8f8\n\uf8f6\uf8ec\uf8ec\uf8ed\n\uf8eb\n\u2212\n\u2212\n= 0\n01 1\n1\nli\nM\nll\nroundli\nMill \u2264\u2264<\u2264 1,1 10  \n(default l0=1, l1=10) \nA. One-shot item retrieval versus cumulative item retrieval \nIt was shown earlier in section II.A that, in the absence of \nFEC, the cumulative item retrieval is clearly better than the \none-shot retrieval, since it results in lower response times. This \nis also clearly shown in the leftmost part of the curves in Fig. 6 \nand Fig. 7 ( 1=SF , i.e., no FEC protection), which plot the \nmean response time under the fixed redundancy rule for the data \nitem encoding. However, it is interesting to note that as more \nFEC redundancy is added, the curves corresponding to the two \nitem retrieval methods converge.  \nAuthorized licensed use limited to: University of Surrey. Downloaded on April 13,2010 at 15:04:39 UTC from IEEE Xplore.  Restrictions apply. \n1 1.2 1.4 1.6 1.8 210\n3\n104\n105\n106\n107\n108\nFEC stretch factor, SF\nN\nor\nm\nal\niz\ned\n re\nsp\non\nse\n ti\nm\ne,\n S\np=10\u22123\np=10\u22122\np=10\u22121\n \nFigure 6.  Cumulative (dashed line) retrieval vs one-shot retrieval (solid line) \nof items \u2013M=1000, k =50, fixed-length items with uniform demand distribution \n1 1.2 1.4 1.6 1.8 210\n2\n103\n104\n105\n106\nFEC stretch factor, SF\nNo\nrm\nal\nize\nd \nre\nsp\non\nse\n ti\nm\ne,\n S\np=10\u22123\np=10\u22122\np=10\u22121\n \nFigure 7.  Cumulative (dashed line) retrieval vs one-shot retrieval (solid line) \nof items \u2013M=1000, k =50, variable-length items with Zipf demand distribution) \nIn fact, there is an optimum SF value optSF , which minimizes \nthe average response time. Although the achieved minimum \nmean response times are higher when equally popular, \nfixed-length items are considered, the value where this happens, \noptSF , is independent of the item retrieval method. \nIncreasing the FEC redundancy beyond optSF , which varies \nwith p, has a steady adverse effect on the average response time. \nAt these values, the parameter ir  in (12) tends to zero, and optS  \neffectively increases linearly with the FEC stretch factor \n( )\n2\n1\n2\n1 22\n1, \uf8f7\uf8f7\uf8f8\n\uf8f6\n\uf8ec\uf8ec\uf8ed\n\uf8eb\n\u22c5\u22c5=\uf8f7\uf8f7\uf8f8\n\uf8f6\n\uf8ec\uf8ec\uf8ed\n\uf8eb\n\u22c5\u22c5\u22c5= \u2211\u2211\n==\nM\ni\nii\nM\ni\niiopt lq\nSFlSFqnkS  (13) \nIn other words, the difference between the two techniques \nreduces with ir , which is their differentiation factor at lower \nFEC redundancy levels reflecting the advantage of the \ncumulative over the one-shot item retrieval.  \n \nB. FEC design options: fixed redundancy versus fixed \nprobability of one-shot full item retrieval \nThe results shown so far have been obtained assuming fixed \nredundancy for all items, irrespective of their length. Fig. 8 \ncompares the two alternatives for the FEC redundancy per item. \nFor low redundancy levels, the second rule results in lower \nresponse times. Note, however, that this comes at a higher cost \nin terms of FEC overhead, since the SF value on the x-axis is \nonly the FEC overhead of the smallest item when the second rule \nis considered; largest items bear higher stretch factor values. \nTherefore, the gain in response time has to be weighed against \nthe additional redundancy. On the other hand, the optimum \nresponse times are practically independent of the followed rule \nwhen applying FEC to the items. Note that the respective rule \nhas an impact on response items only when variable-length \nitems are considered. \nTable II and Table III list the optimum response times, \ntogether with the respective FEC redundancy levels, under the \ntwo item retrieval techniques and the two rules for selecting the \ncode redundancy of data items. \n1 1.2 1.4 1.6 1.8 210\n2\n103\n104\n105\n106\n107\n108\nFEC stretch factor, SF\nN\nor\nm\nal\niz\ned\n re\nsp\non\nse\n ti\nm\ne,\n S\np=10\u22123\np=10\u22122\np=10\u22121\n \nFigure 8.  Fixed redundancy(solid line) versus fixed item success rate (dashed \nline) \u2013one-shot item retrieval, M=1000, k = 50, variable-length items with Zipf \ndemand distribution.  \nTABLE II.  ONE-SHOT RETRIEVAL ( )50,1000 == kM  \nUniform demand, fixed length Zipf demand, increasing length \nFixed SF Fixed PF,100 Fixed SF Fixed PF,100 p \ntopt SF topt SF topt SF topt SF \n10-3 2625.0 1.05 2625.0 1.05 470.7 1.05 468.4 1.00 \n10-2 2677.3 1.05 2677.3 1.05 479.3 1.05 484.1 1.05 \n10-1 3228.7 1.25 3228.7 1.25 577.4 1.25 583.7 1.25 \nTABLE III.  CUMULATIVE RETRIEVAL ( )50,1000 == kM  \nUniform demand, fixed length Zipf demand, increasing length \nFixed SF Fixed PF,100 Fixed SF Fixed PF,100 p \ntopt SF topt SF topt SF topt SF \n10-3 2625.0 1.05 2625.0 1.05 470.7 1.05 468.0 1.00 \n10-2 2676.8 1.05 2676.8 1.05 479.2 1.05 484.1 1.05 \n10-1 3227.0 1.25 3227.0 1.25 577.1 1.25 583.7 1.25 \nAuthorized licensed use limited to: University of Surrey. Downloaded on April 13,2010 at 15:04:39 UTC from IEEE Xplore.  Restrictions apply. \nC. The impact of number of items, M, and FEC block size, k \nThe optimum SF value, though dependent on the packet error \nrate, remains the same as the number of items increases (see \nTable IV), whereas the minimum average response time \nincreases. Longer broadcast schedules result in wider spacing of \nindividual items in the schedule, hence higher response times for \nindividual items. \nTable V, on the other hand, indicates that increase of the FEC \nblock size decreases the optimum response time and\/or the \noptSF . For the same stretch factor SF, larger FEC block sizes \nincrease the correcting capability of FEC, as it has been shown \nin Fig. 5, and accelerate the retrieval of individual items. The \nresponse time and SF both approach their respective minimum \npoints as k increases i.e., the benefits of large k diminish when k \nis very large. \nTABLE IV.  OPTIMUM MEAN RESPONSE TIMES AND FEC SF VALUES VS. \nNUMBER OF ITEMS M (ONE-SHOT RETRIEVAL WITH FIXED REDUNDANCY) \nM=100 M=200 M=500 M=1000 p topt SF topt SF topt SF topt SF \n10-3 87.2 1.05 144.6 1.05 283.5 1.05 470.7 1.05 \n10-2 88.9 1.05 147.3 1.05 288.7 1.05 479.3 1.05 \n10-1 107.2 1.25 177.5 1.25 347.9 1.25 577.4 1.25 \nFEC block size k = 50, variable-length items with Zipf demand distribution  \nTABLE V.  OPTIMUM MEAN RESPONSE TIMES AND FEC SF VALUES VS. \nFEC BLOCK SIZE k ( ONE-SHOT RETRIEVAL WITH FIXED REDUNDANCY) \nk=20 k=50 k=75 k=100 p topt SF topt SF topt SF topt SF \n10-3 2630.5 1.05 2625.0 1.05 2625.0 1.05 2625.0 1.05 \n10-2 2786.9 1.10 2677.3 1.05 2657.1 1.05 2643.2 1.05 \n10-1 3507.2 1.35 3228.8 1.25 3153.0 1.25 3132.6 1.25 \nNumber of items M = 1000, fixed-length items with uniform demand \nIV. CONCLUSIONS \nIn this paper we have performed a study of FEC-encoded data \nbroadcasting. The joint use of packet level FEC and data \ncarousels becomes highly relevant for multicasting in wireless \nenvironments, where a return path for user interactivity may \neither not exist or be cost-inefficient to use. \nThe average user response time, the key metric reflecting the \nresponsiveness of data broadcasting systems, can be \nsignificantly reduced when data enjoy the additional protection \nof FEC at the expense of redundancy overhead that decreases \nthe effective system capacity. Our analysis showed that for a \ngiven packet error rate, the FEC overhead may be tuned to \nminimize the average response time, whilst limiting the capacity \nwastage. This is a general trend that is independent of possible \nalternatives with respect to the way the application retrieves the \ndata of interest or the way the FEC overhead per data item is \ndetermined.  \nThe second interesting outcome is that the actual values of the \nminimum response time and the respective FEC settings are not \naffected by the way the item is retrieved. Although, in the \nabsence of FEC, the cumulative item retrieval accelerates \nsignificantly the response time, when FEC is added to the \nbroadcast items, its gain over the one-shot item retrieval \ntechnique fades out quickly and disappears when the average \nresponse time becomes minimum. Likewise, the optimum points \nare not sensitive to the way FEC is assigned to each data item. In \nfact, the mean response time is minimized when the FEC \nredundancy is just about enough to enable the full item retrieval \nupon their first appearance in the schedule. \nMore predictably, the optimum values of both FEC SF and \nresponse time are sensitive to the FEC block length, since higher \nblock lengths improve the erasure correction capability of the \nconsidered block codes. The optimum response time is also \nsensitive to the number of items accommodated in the schedule, \nas longer schedules result in higher optimum values thereof. \nIn this work we limited ourselves to small systematic block \ncodes. We are currently looking into ways to include other types \nof FEC codes in this study framework. The other direction for \nexpanding this study is the relaxation of the assumption for \nuniform packet error rates. Bursts of lost packets may be \nexperienced both in wireless environments, e.g., due to \ntemporary loss of connectivity, but also in wired networks, e.g., \ndue to router buffer management schemes that tend to discard \npackets in bursts. The analytical study of encoded data \nbroadcasting under burst packet loss is the natural follow-up of \nthis work. \nREFERENCES \n[1] S. R. Saunders, Antennas and propagation for wireless communication \nsystems, 2nd ed., John Wiley & Sons 2003. \n[2] C. Huitema, \u201cThe case for packet level FEC,\u201d in Proc. 5th IFIP \nInternational Workshop on Protocols for High Speed Networks, Oct. \n1996. \n[3] J. Nonnenmacher, E. Biersack and D. Towsley, \u201cParity-based loss \nrecovery for reliable multicast transmission,\u201d IEEE\/ACM Transactions on \nNetworking, vol. 6, issue 4, pp. 349\u2013361, August 1998. \n[4] J.W. Byers, M. Luby, M. Mitzenmacher and A. Rege, \u201cA digital fountain \napproach to reliable distribution of bulk data\u201d, in Proc. ACM SIGCOMM \n\u201898, pp. 56-67, Sept. 1998. \n[5] S. Acharya, R. Alonso, M. Franklin and S. Zdonik, \u201cBroadcast Disks: \nData Management for Asymmetric Communication Environments\",  in \nProc. of ACM SIGMOD Conference, pp. 199-210, May 1995. \n[6] C. J. Su and L. Tassiulas, \u201cBroadcast scheduling for information \ndistribution,\u201d in Proc. IEEE INFOCOM\u201997, Kobe, Japan, Apr. 1997. \n[7] M. Luby et al, \u201cThe use of FEC in reliable multicast\u201d, IETF RFC 3453, \nDecember 2002. \n[8] M. Luby et al., \u201cFEC building block\u201d, IETF RFC 3452, December 2002. \n[9] DVB Document A081, \u201cTransmission system for handheld terminals \n(DVB-H)\u201d, June 2004. \n[10] ETSI EN 301 192, \u201cDVB specification for data broadcasting\u201d, version \n1.4.1, November 2004. \n[11] 3GPP TS 22.246, \u201cMultimedia Broadcast\/Multicast Service (MBMS) \nuser services; Stage 1,\u201d version 6.1.0, March 2004. \n[12] J. Wang, R. Sinnarajah, T. Chen, Y. Wei and E. Tiedermann, \u201cBroadcast \nand multicast services in cdma2000\u201d, IEEE Communications Magazine, \npp. 76-82, February 2004. \n[13] N. Chuberre et al., \u201cSatellite Digital Multimedia Broadcasting for 3G and \nbeyond 3G systems,\u201d in Proc. 13th IST Mobile and Wireless \nCommunications Summit, Lyon, France, June 2004. \n[14] M. H. Ammar and J. W. Wong, \u201cOn the optimality of cyclic transmission \nin teletext systems,\u201d IEEE Transactions on Communications, vol. 35, no. \n1, pp. 68\u201372, January 1987. \n[15] N.H. Vaidya and S. Hameed, \u201cScheduling data broadcast in asymmetric \ncommunication environments\u201d, Wireless Networks, vol. 5, no. 3, pp. \n171-182, May 1999. \n \nAuthorized licensed use limited to: University of Surrey. Downloaded on April 13,2010 at 15:04:39 UTC from IEEE Xplore.  Restrictions apply. \n"}