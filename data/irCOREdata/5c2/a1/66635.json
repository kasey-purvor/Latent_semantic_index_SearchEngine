{"doi":"10.1109\/WPC.2002.1021329","coreId":"66635","oai":"oai:dro.dur.ac.uk.OAI2:651","identifiers":["oai:dro.dur.ac.uk.OAI2:651","10.1109\/WPC.2002.1021329"],"title":"Evaluating using animation to improve understanding of sequence diagrams.","authors":["Burd, E.L.","Overy, D.","Wheetman, A."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2002-06","abstract":"This paper describes an experiment whereby the benefit of using animation to improve thecomprehensibility of UML sequence diagrams is assessed. The paper hypothesizes that through animation the control flow of sequence diagram will become more evident. The development a system that seeks to enable stakeholders to better interpret UML modeling behaviour is described. This system aims to provide dynamic visualization through the use ofanimation techniques. A study to evaluate the extent to which the animation of a diagram can aid its interpretation is then described. The results of the study show that the animation system did improve the comprehensibility of the sequence diagram control flow thus improving the comprehensibility when compared to the comprehensibility of a traditional static representation. Finally, this paper discusses the reasoning for these results","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66635.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/651\/1\/651.pdf","pdfHashValue":"b707478923b42bce0521bf98253589ac2c5811f9","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:651<\/identifier><datestamp>\n      2010-11-01T14:56:55Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Evaluating using animation to improve understanding of sequence diagrams.<\/dc:title><dc:creator>\n        Burd, E.L.<\/dc:creator><dc:creator>\n        Overy, D.<\/dc:creator><dc:creator>\n        Wheetman, A.<\/dc:creator><dc:description>\n        This paper describes an experiment whereby the benefit of using animation to improve thecomprehensibility of UML sequence diagrams is assessed. The paper hypothesizes that through animation the control flow of sequence diagram will become more evident. The development a system that seeks to enable stakeholders to better interpret UML modeling behaviour is described. This system aims to provide dynamic visualization through the use ofanimation techniques. A study to evaluate the extent to which the animation of a diagram can aid its interpretation is then described. The results of the study show that the animation system did improve the comprehensibility of the sequence diagram control flow thus improving the comprehensibility when compared to the comprehensibility of a traditional static representation. Finally, this paper discusses the reasoning for these results. <\/dc:description><dc:subject>\n        UML sequence diagrams<\/dc:subject><dc:subject>\n         Modeling behaviour.<\/dc:subject><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n         10th International Workshop on Program Comprehension, IWPC'02, 27-29 June 2002, Paris, France ; proceedings. Piscataway, New Jersey: IEEE, pp. 107-113<\/dc:source><dc:date>\n        2002-06<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:651<\/dc:identifier><dc:identifier>\n        doi:10.1109\/WPC.2002.1021329 <\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/651\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/WPC.2002.1021329 <\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/651\/1\/651.pdf<\/dc:identifier><dc:rights>\n        \u00a9 2002 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2002,"topics":["UML sequence diagrams","Modeling behaviour."],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n01 November 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nBurd, E.L. and Overy, D. and Wheetman, A. (2002) \u2019Evaluating using animation to improve understanding of\nsequence diagrams.\u2019, in 10th International Workshop on Program Comprehension, IWPC\u201902, 27-29 June 2002,\nParis, France ; proceedings. Piscataway, New Jersey: IEEE, pp. 107-113.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/WPC.2002.1021329\nPublisher\u2019s copyright statement:\n2002 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for\nadvertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists,\nor to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nEvaluating Using Animation to Improve Understanding of Sequence\nDiagrams\nElizabeth Burd, Dawn Overy, Ady Wheetman\nThe Research Institute in Software Evolution\nUniversity of Durham\nSouth Road\nDurham, DH1 3LE, UK\nAbstract\nThis paper describes an experiment whereby the\nbenefit of using animation to improve the\ncomprehensibility of UML sequence diagrams is\nassessed. The paper hypothesizes that through\nanimation the control flow of sequence diagram will\nbecome more evident. The development a system that\nseeks to enable stakeholders to better interpret UML\nmodeling behaviour is described. This system aims to\nprovide dynamic visualization through the use of\nanimation techniques.  A study to evaluate the extent to\nwhich the animation of a diagram can aid its\ninterpretation is then described. The results of the study\nshow that the animation system did improve the\ncomprehensibility of the sequence diagram control flow\nthus improving the comprehensibility when compared\nto the comprehensibility of a traditional static\nrepresentation. Finally, this paper discusses the\nreasoning for these results.\n1. Introduction\nDespite the massive investment that companies place in\nIT and the recent growth in performance in both\nhardware and software, the Standish Group reports [1]\nthat only sixteen per cent of all projects are successful.\nOver a half are impaired while almost a third are\ncancelled.  These impairments manifest themselves in\nmany different ways.  Projects are often delivered late\nand may fall short of established quality standards.  The\nproduct may be unreliable due to insufficient testing,\ncontain redundant functionality or even be incomplete.\nSuch quality comprises maintainability.  From the point\nof view of the developers, it is common for the product\nto have exceeded its budget. When put into a global\nbusiness context, it is essential that issues relating to the\nperformance of the IT industry are addressed.\nIt is hard to identify one major cause of the crisis.\nHowever, work on the problem has led to the\nrecognition of a subset of crucial factors.  The early\nstages of a project\u2019s lifecycle are crucial to its success.\nAt each stage communication between developers and\nother stakeholders is undertaken.  Such communication\nmust be carried out successfully in order to achieve a\nvalid and verified set of requirements.  It is essential for\ndifferent stakeholders to convey system attributes in an\nobjective and unambiguous fashion, despite sometimes\nusing different languages.  The application of modelling\nto represent components of the project provides a way\nto overcome such communication difficulties.\nA model is an abstraction or higher level description of\nan entity or system. Modelling therefore allows the\ndesign of a system to be considered and visualised early\non.  This can be an enlightening process and can present\nadvantages and disadvantages of a system proposed\ndesign prior to the implementation stage. The shear size\nof todays systems far exceeds the understanding of any\none person.  The use of modelling is used to provide an\ninterpretable abstraction.\nThe need for system modeling was addressed by\nRumbaugh, Jacobson and Booch when they defined the\nUnified Modeling Language (UML).  It is a \u201cgeneral-\npurpose modeling language that is used to specify,\nvisualize, construct and document the artifacts of a\nsoftware system\u201d [2].  It is not a method advocating a\nstep-by-step process but a toolkit to allow the\ndescription of a system.  The semantics and notations\ninherent in models are exploited in UML to allow static\nand dynamic views that depict a system.  One of the\ngoals of UML is to allow the visualization of systems to\nenable interpretation and understanding by a wide\nvariety of people.  Such visualization is key to allow\nstakeholders to communicate in the same language and\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \ndevelopers to create a product that is exactly what the\ncustomer requires.\nVisualisation is the graphical representation of an entity\nto convey the semantics of that entity to the viewer.  As\nsystems become more complex, dynamic visualisation\nor animation may be a solution of combat this problem.\nAnimation has the potential to address many of these\nissues raised through improving the levels of\ncomprehension to allow requirements verification by\ntechnical and non-technical staff.  A system that can\ninteractively model and animate requirements could be\nused throughout the requirements engineering process\nby a number of stakeholders.  Thus the lack of customer\ninvolvement can be addressed directly.  Animation of a\nrequirements diagram such as a UML sequence diagram\ncan aid the stakeholders interpretation of the system and\ngive them a greater understanding of the product\nproposed to be developed.\n2. Background\nVisualisation of a model is one approach to aid its\nunderstanding.  The extent to which different types of\nvisualisation effect the assimilation process is unclear\nand much work has been focussed in this area. Eloi [3]\nsuggests that people carry underlying assumptions in\ntheir head, which when made explicit through model\nvisualisation can be used as an explicit rule of inference\nor shared with others.  He also suggests that\nparticipating in several visualisation sessions\nencourages the user to construct a dynamic mental\nmodel based on the animation itself.  This hypothesis is\ncorroborated by Letovsky\u2019s [4].  The visualisation\nsystem, combined with the existing knowledge base and\nboth handled by the assimilation process drives the\nevolution of the user\u2019s mental model.  Norman draws\nthe conclusion that a person\u2019s ability to run their mental\nmodel are severely limited, [5].  On this, Eloi comments\nthat visualisation support provides insight into a\nconceptual model.  He suggests that participating in a\nvisualization session can resolve differences between\ntheir mental model and what is perceived by the\nvisualization model\u201d i.e. visualization support facilitates\ncognition.  Work by Byrne et al [6] suggests that\ndynamic visualization provides more opportunity for the\nparticipant to make and test ad-hoc spontaneous mental\npredictions regarding the behaviour of the system.\nMaking and testing predictions are a form of active\nlearning, which supports cognition more than passive\nlearning.\nThis paper describes an experiment whereby the benefit\nof using animation to improve the comprehensibility of\nUML diagrams is assessed. The paper discusses the\ndevelopment a system that seeks to enable stakeholders\nto better interpret UML modeling behaviour so that they\nare more able to communicate and address problems.\nThe system aims to allow dynamic visualization through\nthe use of animation techniques.  A study to evaluate the\nextent to which the animation of a diagram can aid its\ninterpretation is then described and the results of the\nstudy are presented and discussed.\n3. Approach\nIt is hypothesized that through animation the dynamic\nnature of UML diagrams can be made more explicit.\nThis section describes the process adopted to test this\nhypothesis.\nIn order to investigate the benefit of animation to\nimprove the understandability of the dynamic UML\ndiagrams three main activities were performed. These\nwere:\n1. Identify requirements for the animation system\n2. Implement a system to animate sequence diagrams\n3. Compose an experiment to investigate if benefits\nthrough animation are achieved.\nEach of these activities will now been described in\nfurther detail.\n3.1 Identify Requirements for the animation\nsystem\nThe initial consideration for aiding the comprehension\nprocess through using animation was to determine what\naspects of the UML to animate. Clearly the benefits of\nFigure 1: Choices of animation technique\nMoving Symbol\nFlash\nColour\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \nanimation could best be utilized through the\nrepresentation of its dynamic aspects. Of these dynamic\naspects it is often sequence and collaboration diagrams\nthat are considered the hardest to comprehend and\ntherefore could receive the greatest assistance towards\nimproving comprehension. Since the sequence and\ncollaboration are semantically equivalent then the\nselection between these two model types is arbitrary.\nSequence diagrams were selected due to their more\nclearly defined layout properties.\nIn order to enhance the comprehensibility of the\nsequence diagram it is initially necessary to decide\nwhich concepts should be the focus of animation and\nwould best support understanding through animation.\nThe decision included considering object\ncreation\/deletion and message passing objects via\nactivations or messages. To achieve the animation\nmoving symbols could pass through the diagram to\nindicate the control flow, similar to Process Weaver [7],\nwhich uses a CASE tool to animate Petri Nets.\nAlternatively a more primitive animation effect is the\nuse of colour to highlight the control flow.  Examples of\nthese two approaches are highlighted in Figure 1.\nThe main representational property of sequence\ndiagrams is that of control flow. Therefore animation\nproperties are best utilized though the animation of\nthose aspects of the diagram that represent this flow of\ncontrol.  For this reason it was decided to animate the\nprocess of messages passing between the objects.\nThe choice of animation effect was then considered. If\nthe animation was to represent control flow between\nobjects then the best methods for highlighting ones\nattention to the change of control between objects needs\nto be found. For a sequence diagram having a symbol\nmoving across a message line using Process Weaver\ntechniques does not have any additional meaning within\na sequence chart. It is simply the fact that the message\nhas been sent there is no semantic meaning, for instance,\nin the speed of the message passing. Therefore, the\nsimpler animation technique where the entire message\npassing line is temporarily coloured and flashes once is\nadopted.\n3.2 Implement a system to animate sequence\ndiagrams\nA simple implementation has been developed. The\nsequence animation system is written in Java and takes a\nsingle input file that describes the sequence diagram to\nbe animated. The animation occurs on the basis of the\norder of the input file. This therefore means that data\nformat of the input file is critical, however, if the system\nproves successful then further enhancements to improve\nthe usability of the system can later be made.\nFigure 2: A simple sequence diagram in the\nanimator system\nA screen shot of a typical sequence diagram that could\nbe animated is shown in Figure 2. This figure shows the\nobject in square boxes at the top of the diagram and the\nlifelines of each object are represented by the lines\ndown from each object. The lifelines from top to bottom\nof the page represents passing time. The arrow between\nthe lifelines represents the message passing between\nobjects and is the aspect of the diagram that is animated.\nFor further details on sequence diagram specification\nand interpretation please refer to [2].\n3.3 Compose experiment to investigate if\nbenefits through animation are achieved\nIn order to investigate if the use of animation improves\nthe comprehensibility of sequence diagrams then it is\nnecessary to initially select a domain and scenario so an\nexperiment to be conducted. It was decided that a fairly\nsimple and familiar scenario should be adopted and thus\nthe scenario sending a fax was used.\nIn order to investigate comprehensibility at different\nlevels it was decided to investigate the benefits of\nanimation for simple UML sequence diagrams and\ncompare this to the benefit to comprehensibility for\nmore complex examples. The modification of the\nscenario was then necessary that portrayed different\nlevels of abstraction for the simple and complex\nsequence diagrams. A decision was made to have the\nscenario \u201csending a fax\u201d as reusable components could\nbe extended to provide sufficient combinations to model\nboth examples. The simple sequence diagram was\nprimarily concerned with a single use case, therefore the\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \ndecision to portray the best-case scenario for sending a\nfax was justified in terms of usability.   As a result of\nthis decision an instance sequence diagram was\ndesigned to represent a fax that could be successfully\nsent at the first attempt.  The complex sequence diagram\nwas developed to portray multiple paths through the\nsystem. Due to the numerous possibilities of\nunsuccessful path combinations that can arise when\nsending a fax, only one was represented to improve\nusability and visual simplicity.  The conditional\nbehaviour of the generic diagram depicted the phone\nline when it was free or busy. In addition to the\nsuccessful routing of the fax a report was generated\nrecursively. In UML terminology is more complex\ndiagram would be referred to as a generic sequence\ndiagram.\nOnce the scenario had been chosen and written in UML\nthen an experiment and questionnaire was produced to\ntest the hypothesis. The questionnaire was designed to\nbe discretionary and anonymous and its objective was to\ncompare the static (graphics) and animated versions of\nthe UML sequence diagrams to determine user\u2019s\ninterpretations before and after animation.  The\nquestionnaire comprised of ten questions and four\ndiagrams.  Two of these diagrams were supported by an\nanimated example. Users were instructed to annotate the\ndiagrams with their interpretation of the control flow for\nthe static and animated versions consecutively.\nFigure 3: A complex sequence diagram in the\nanimator system\nThe experiment and questionnaire compared the\nunderstanding of two sets of sequence diagrams. The\nfirst of these sequence diagrams was fairly simple (see\nFig 2) the second more complex (see Fig 3). By\ncomparing the static and animated interpretations, the\nbenefit of animation and participants comprehension of\nthe control flow was determined. The use of a complex\nand simple sequence diagram allowed investigations of\nhow complexity effects comprehension and how this\nunderstanding is helped or hindered through the\nprovision of animation. Both simple and complex\ndiagrams represent the same scenario but in the case of\nthe complex sequence diagram additional conditions are\nshown.\nIn addition, the questionnaire also offered opportunities\nfor participants to signify their animation preferences,\nprovide suggested improvements and comments and\nsuggest potential UML models for animation.\nParticipant\u2019s reactions were observed as they ran the\nanimated deliverables to clarify if the control flow was\nobvious from the animation.\nAn adequate sample was important to ensure fair\nrepresentations of participant\u2019s views were obtained.\nTherefore it was decided that people with different\nlevels of expertise in UML would act as the\nparticipants.  Forty people were distributed with a\nquestionnaire; fifteen had no prior knowledge of UML,\ntwenty had up-to-one year\u2019s knowledge, four had two-\nto-four year\u2019s knowledge and one had five or more, as\nidentified from the questionnaires.  Those with one\nyear\u2019s or less experience of UML were students at the\nUniversity of Durham, the others were experts working\nin industry. People with no prior knowledge of UML\nwere chosen randomly from outside the Computer\nScience domain. A larger sample was obtained for up-\nto-one year\u2019s knowledge as the second and third year\nComputer Science syllabuses incorporate UML in\nDurham. Obtaining expert knowledge proved to be\nmore difficult, due to the experts time commitments.\nBy utilising a UML devoted mailing list known as the\nObject Technology User\u2019s Group a minority of experts\noffered their time to complete the designated\nquestionnaire.  The mailing list provided a source of\nexperts who had common interests in object technology,\nwhich was ideal for evaluation purposes.  A different\nevaluation technique was adopted for the latter\nevaluation, as it was not possible to observe the experts\nrunning the programs.  Consequently class files for were\nsent via email with instructions outlined in the\nquestionnaire.\nAlthough slight variation in techniques were adopted it\nwas fundamental to obtain such feedback on this work\nto establish the benefits for comprehension for different\nlevels of expertise. The reasoning behind the sample\nwas to focus on participants who would benefit most\nfrom the animation such as people with no prior\nknowledge or minimal experience of UML.  Expert\nknowledge would then provide an industrial perspective\nand realisation of the effectiveness of the animation\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \n4. Results\nAfter collating the completed questionnaires the results\nwere analyzed. These are now presented within the\nfollowing sections. Initially the simple sequence\ndiagram is investigate followed by the more complex\nanalysis. Finally, some additional results obtained from\nthe questionnaire are presented.\n4.1 Simple UML Sequence Diagram\nBy analysing the annotated diagrams of the\nquestionnaire, it was determined whether the correct\ninterpretation of control flow had been established.\nTable.1 represents the results for the corresponding\nsimple sequence diagram interpretations.\nDiagram\ninvestigated\n(Fig.-2)\nCorrect\ninterpretation\nIncorrect\ninterpretation\nStatic 21 19\nAnimated 36 4\nTable 1: Summary of analysis results of simple\nsequence diagram\nThe results highlight that mistakes were made with both\nthe static and dynamic versions. However, in the case of\nthe animated version 90% of the participants interpreted\nthe control flow correctly.\n4.2 Complex UML Sequence Diagram\nTable.2 represents the results for the corresponding\ncomplex sequence diagram interpretations.\nDiagram\ninvestigated\n(Fig.- 3)\nCorrect\ninterpretation\nIncorrect\ninterpretations\nStatic 0 40\nAnimated 25 15\nTable 2: Summary of analysis results of complex\nsequence diagram\nThe results from individual questionnaires showed a\ntrend that participants did not expect a second control\nflow to represent the conditional branch.  Twelve\nparticipants attempted to account for the branching by\nannotating both conditional branches simultaneously but\ndid not account for recursive behaviour and six\nparticipants interpreted the control flow to be\nconsecutive.  Such interpretations did not match the\npredefined criteria in the study to qualify as a correct\ninterpretation.\n4.3 Other Results from Survey\nThe survey also queried which type of representation\nthe participants preferred; that is the static or dynamic\n(animated) representations of the sequence diagrams. In\nthe questionnaire participants were asked if the control\nflow was more obvious in the static or animated version\nto determine the significance of the animation. Table 3\nidentifies all preferences were for the animated version\nfor both simple and complex diagram.   However,\nindividual questionnaires identified that two participants\nmade additional comments that neither version was\nsignificantly more prominent, for the purpose of\ninterpreting the simple diagram.\nQuestion\nDescription Static Animated\nIn which simple\nsequence diagram was\nthe control flow more\nobvious.\n0 40\nIn which complex\nsequence diagram was\nthe control flow more\nobvious.\n0 40\nTable 3: Summary of participant preferences for\ntype of sequence diagram.\n5. Evaluation\nResults from the study illustrated an 80% decrease in\nmisinterpretations of the control flow when animation\nwas utilized in the simple sequence diagram.  Thus from\nthis figure it can be argued that for the simple sequence\ndiagram the benefit of animation was not significant\nsince the level of misinterpretations was reduced to only\n10%. However, this needs to be reviewed in light of the\nrelative simplicity of the sequence diagram being\ninterpreted. For such a simple diagram a much higher\nproportion of mistakes than one would expect were\nmade for the interpretation of control flow. For the\nsimple diagram the misinterpretations for the static\ndiagram was 48% of the participants. This seems to\nindicate, certainly from those new to the UML notation,\nsequence diagrams are hard to comprehend. For\nsoftware development this does imply significant\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \nproblems, as the original specification\nmisinterpretations may result in incorrect\nimplementations. In addition, the misinterpretations may\nadditionally lead to problems during maintenance.  If\nthe UML sequence diagrams are used to interpret the\nimplementation order for maintenance then the\nmisinterpretations may result in the addition of further\nerrors in the code. In addition, with technology now\navailable to reverse engineeer UML specifications from\nexisting code [8] it is more likely in future that these\ntypes of interpretations will be relied upon the\nimplement change requests.\nFor the complex sequence diagram a 62% decrease was\nrecorded for the control flow misinterpretations of the\nanimated diagram compared to the static representation.\nThere are a number of interesting features represented\nwithin this figure. The first of these is that for the static\ndiagram all questionnaire respondents misinterpreted\nthe control flow. This therefore seems to indicate that\nthe difficulties associated with interpretation of control\nflow from these diagrams is not restricted to those with\nrelatively little experience (one year or less) of the\nUML. In this case those with greater experience still\nmade mistakes in its interpretation. The second\nimportant aspect of the results of the analysis of the\ncomplex sequence diagram was that there was still a\nrelatively high proportion of mistakes made (38%) even\nwith animation. Thus this high level of errors does\nidentify issues of using sequence diagrams as means to\ndevelop or interpret software applications especially\nwith using staff with relatively little experience of the\nUML.\nMost importantly however this experiment would seem\nto indicate that through the use of animation dramatic\nreductions in the misinterpretation of the control flow\noccur. This would therefore seem to imply that by using\nanimation to aid the identification of the focal point of\nthe diagram, it has the potential to some extent, alleviate\nthe diagram interpretation complexity.\nThe unambiguous result of this experiment and survey\nis that participants liked using the animation application\nas a means of interpreting sequence diagrams. The\nparticipants felt that the animator gave life to the models\nand as such felt that it improved their comprehension of\ncontrol flow. The results of the experiment seem to\nconcur with this observation.\nWhile the results of the study seem to indicate a strong\npositive correlation that animation does significantly\nhelp with interpretation of the control flow of sequence\ndiagrams there are a number of other elements that were\nhard to exclude from the study that may have lead to the\npositive results. The first of the elements is that of the\npotential practice effect. In order to evaluate our\nhypothesis is was necessary to fix the order of\npresentation of diagrams; first the static representation\nwas shown followed by the animated representation.\nThis may have meant that the second viewing of the\ndiagram resulted in the improved understanding.\nHowever, to minimize this problem participants were\nallowed as long as they thought necessary to interpret\nthe static diagram. The other important element was that\nof the novelty of the application. The novelty aspect of\nthe animator may have encouraged participants to\nconcentrate harder on the control flow and therefore\nhave resulted in the improved comprehension. However,\nthis novelty element potentially improving\nconcentration is obviously a point in the system\u2019s\nfavour.\n6. Conclusions\nThis paper has conducted an experiment to investigate if\nanimation can aid the comprehension process.\nSpecifically this experiment examined if comprehension\nof control flow for sequence diagrams became more\nexplicit through the use of animation. That is that\nparticipants would make fewer errors in interpreting the\norder and meaning of the control flow using an\nanimated rather than a static representation. The\nexperiment additionally investigated if the complexity\nof the sequence diagram effected the results obtained.\nThe results of the study showed that UML diagrams\nwere hard to comprehend and participants made a\nnumber of errors in the interpretation of the control\nflow. However, the study in each trial showed an\nimprovement in comprehension (fewer mistakes made)\nin the animated diagram representation over that of the\nstatic representation. The trials investigating the varying\nlevels of complexity revealed that as the complexity of\nthe diagram so correspondingly did the number of\nerrors. However, in the case of the animated diagram\nthe number of errors were significantly fewer than for\nthe static diagram. The evaluation discussed some\nreasons why these findings were achieved.\nIn conclusion the animation effect proved a popular\naddition to aid comprehension and overall far fewer\nmistakes were made when this facility was available to\nusers.\nFurther work needs now to be conducted to investigate\nif these results apply to more experienced users (5 years\nplus). However it seems from an educational viewpoint\nthat animation does benefit those with little experience\nof the UML.\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \nReferences\n1 Standish Group (1995) \u201cChaos\u201d,\nhttp:\/\/www.standishgroup.com\/visitor\/chaos.htm.  Last\nvisited April 24 2000.\n2 Rumbaugh, James, Jacobson, Ivor & Booch, Grady\n(1999) \u201cThe Unified Modelling Language Reference\nManual\u201d, Addison-Wesley.\n3 Eloi, Regis (1998) \u201cAutomated Support for Animating\nKISS Workflow Models to Enhance Client\nUnderstanding\u201d, Thesis for Degree of Master of Science\nby Research in the University of Hull, submitted\nSeptember 1998.\n4 Letovsky, S. & Soloway, E. (1986) \u201cDelocalized Plans\nand Program Comprehension\u201d in IEEE Software, May\n1996, Vol. 19, No. 3, pages 41-48.\n5 Norman, D.A. (1983) \u201cSome observations on mental\nmodels\u201d in Gentner, Dedre & Stevens, Albert L. (eds)\n(1983) \u201cMental Models\u201d, Lawrence Erlbaum Associated,\nHillsdale, NJ, USA.\n6 Byrne, Michael D., Catrambone, Richard, Stasko, John\nT. (1996) \u201cDo Algorithm Animations Aid Learning?\u201d,\nGraphics, Visualization and Usability Center, Georgia\nInstitute of Technology, Atlanta, GA, Technical Report\nGIT-GVU-96-18, May 1996.\n7 Fernstr\u00f6m, Christer , (1993) \u201cProcess Weaver.  Adding\nProcess Support to UNIX\u201d in IEEE Press, September\n1993.\n8 DiLucca G.A., Fadoline A.R., De Carlini U., (2000)\n\u201cRecovering Class Diagrams from Data-Intensive\nLegacy Systems\u201d in International Conference on\nSoftware Maintenance, IEEE Press, October 2000.\nProceedings of the 10 th International Workshop on Program Comprehension (IWPC\u201902) \n1092-8138\/02 $17.00 \u00a9 2002 IEEE \n"}