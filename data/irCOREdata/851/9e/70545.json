{"doi":"10.1007\/BF01305318","coreId":"70545","oai":"oai:eprints.lancs.ac.uk:11698","identifiers":["oai:eprints.lancs.ac.uk:11698","10.1007\/BF01305318"],"title":"The Support of Mobile-Awareness in Collaborative Groupware","authors":["Cheverst, Keith","Blair, Gordon S.","Davies, Nigel","Friday, Adrian"],"enrichments":{"references":[{"id":16306098,"title":"A model for interface groups.","authors":[],"date":"1990","doi":"10.1109\/reldis.1991.145411","raw":"Oskiewicz E, Warne J, Olsen M. A  model for interface groups. APM\/TR.009.00. Architecture Projects Management Ltd, Cambridge,  UK, 1990","cites":null},{"id":16306077,"title":"An introduction to ANSAware 4.0. Architecture Projects Management Ltd,","authors":[],"date":"1992","doi":null,"raw":"APM Ltd. An introduction to ANSAware 4.0. Architecture Projects Management Ltd, Cambridge, UK, 1992. 6-  APM Ltd. The ANSA reference manual, release 01.00. Architecture Projects Management Ltd, Cambridge, UK,","cites":null},{"id":16306088,"title":"Awareness and coordination in shared workspace. In:","authors":[],"date":"1992","doi":"10.1145\/143457.143468","raw":"Dourish P.  Awareness and  coordination  in shared workspace.  In: Proceedings of the ACM  CSCW'92 Conference on Computer Supported Cooperative Work. Toronto, Canada. ACM Press, New York, 1992:107-114","cites":null},{"id":16306091,"title":"Collaboration awareness in support of collaboration transparency. In:","authors":[],"date":"1990","doi":"10.1145\/97243.97301","raw":"Lauwers J, Lan~z  K. Collaboration awareness in support of collaboration transparency.  In: Proceedings  of the ACM SIGCHI'90 Conference on Human Factors in Computing Systems.  Seattle, Washington. ACM Press, New York, 1990:303-211","cites":null},{"id":16306069,"title":"Cooperation without (reliable) communication: interfaces for mobile applications. Distributed Systems Engineering","authors":[],"date":"1995","doi":"10.1088\/0967-1846\/2\/3\/005","raw":"Dix A. Cooperation without (reliable) communication: interfaces for mobile applications. Distributed Systems Engineering 1995; 3:171-181","cites":null},{"id":16306105,"title":"Extensions to ANS Aware for advanced mobile applications. In:","authors":[],"date":"1996","doi":"10.1007\/978-0-387-34947-3_4","raw":"Friday A, Cheverst K, Davies Net al. Extensions to ANS Aware for advanced mobile applications.  In: Proceedings of the International Conference on Distributed Platforms. Dresden. Chapman and Hall, London, 1996:29-43 Correspondence  to:  Keith Cheverst, Distributed Multimedia Research Group, Department of Computing, Lancaster University, Lancaster LA1 4YR, UK. Email: kc@comp.lancs.ac.uk K. Cheverst et al","cites":null},{"id":16306103,"title":"Flexible user interface coupling in collaborative systems. In:","authors":[],"date":"1991","doi":"10.1145\/108844.108851","raw":"Dewan E Flexible user interface coupling in collaborative systems. In: Proceedings of the ACM CHI'91 Conference on Human Factors in Computing Systems. New Orleans, La. ACM Press, New York, 1991:41-48","cites":null},{"id":16306075,"title":"Friday A et al. Distributed systems support for adaptive mobile applications.","authors":[],"date":"1996","doi":"10.1109\/sdne.1996.502444","raw":"Davies N, Cheverst K, Friday A et al. Distributed systems support for adaptive mobile applications.  ACM Mobile Networks and Applications (special issue  on Mobile Computing -  System Services)  1996; 4:399-408","cites":null},{"id":16306066,"title":"Friday A et al. Supporting adaptive services in a heterogeneous mobile environment. In:","authors":[],"date":"1994","doi":"10.1109\/mcsa.1994.513475","raw":"Davies N, Cheverst K, Friday A et al. Supporting adaptive services in a heterogeneous mobile environment. In: Proceedings of  Workshop on Mobile Computing Systems and Applications (MCSA), Santa Cruz, Calif. IEEE Computer Society Press, Los Alamitos, Calif.,  1994","cites":null},{"id":16306084,"title":"Group. The Common Object Request Broker: architecture and specification, revision 2.2,","authors":[],"date":"1998","doi":"10.1007\/springerreference_64577","raw":"Object Management  Group. The Common Object Request Broker: architecture and specification,  revision 2.2, 1998. Available at: http:\/\/www.omg.org\/corba\/corbiiop.htm","cites":null},{"id":16306080,"title":"ITU recommendation X.902, open distributed processing- reference model - part 2. Foundations. International Standards Organization,","authors":[],"date":"1995","doi":null,"raw":"ISO\/IEC  10746-2.  ITU recommendation X.902,  open distributed processing- reference model - part 2. Foundations. International Standards Organization, 1995","cites":null},{"id":16306083,"title":"ITU recommendation X.903, open distributed processing - reference model - part 3. Architecture. International Standards Organization,","authors":[],"date":"1995","doi":null,"raw":"ISO\/IEC  10746-3.  ITU recommendation X.903,  open distributed processing -  reference model -  part 3. Architecture. International Standards Organization,  1995","cites":null},{"id":16306072,"title":"Mobile open systems technologies for the utilities industries. In: Dix A (ed) Remote cooperation: CSCW for mobile and tele-workers,","authors":[],"date":"1995","doi":"10.1007\/978-1-4471-1496-3_11","raw":"Davies N, Friday A, Blair G, et al. Mobile open systems technologies for the utilities industries.  In: Dix A  (ed) Remote cooperation: CSCW for mobile and tele-workers, Springer, Berlin Heidelberg New York, 1995:145-166","cites":null},{"id":16306101,"title":"Real time groupware as a distributed system: concurrency control and its effect on the interface. In:","authors":[],"date":"1994","doi":"10.1145\/192844.193011","raw":"Greenberg S,  Marwood D.  Real time groupware as a distributed system: concurrency control and its effect on the interface. In: Proceedings of the ACM CSCW'94 Conference on Computer Supported Cooperative Work. Chapel Hill, N. C. ACM Press, New York, 1994:22-26","cites":null},{"id":16306095,"title":"Services to support consistency in mobile collaborative applications. In:","authors":[],"date":null,"doi":"10.1109\/sdne.1996.502444","raw":"Cheverst K, Davies N, Friday Aet al. Services to support consistency in mobile collaborative applications. In: Proceedings of the 3rd International  Workshop on Services in Distributed Networked Environments (SDNE). Macao, China. IEEE Computer Society Press, Los Alamitos, Calif., 1996:27-34","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1999-03","abstract":"This paper explores the need for mobile-awareness in groupware designed for use in a mobile environment. The motivation for providing this additional form of awareness is that current groupware tends to assume a reliable and constant quality of communications that does not exist in a mobile environment. The implications of making this false assumption are twofold: first, systems that enforce certain ordering and reliability semantics across all operations can suffer drastic performance penalties; second, users are given insufficient awareness of (and control over) the effect of the unreliable communications environment on their collaboration. The support of mobile-awareness implies providing users with appropriate and sufficient inforraation to adapt their behaviour (and the behaviour of the system) in response to changes in the quality of group communications available. To support the development of mobile-aware groupware we have built a flexible Quality of Service (QoS)-based group service capable of providing group-oriented feedback to application level services","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/70545.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/11698\/1\/cheverst%2Dmobileaware%2Dieeepersonal1999.pdf","pdfHashValue":"d4feb61010eb92397b9d0c3244b0794803a3aceb","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:11698<\/identifier><datestamp>\n      2018-01-24T00:04:22Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        The Support of Mobile-Awareness in Collaborative Groupware<\/dc:title><dc:creator>\n        Cheverst, Keith<\/dc:creator><dc:creator>\n        Blair, Gordon S.<\/dc:creator><dc:creator>\n        Davies, Nigel<\/dc:creator><dc:creator>\n        Friday, Adrian<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        This paper explores the need for mobile-awareness in groupware designed for use in a mobile environment. The motivation for providing this additional form of awareness is that current groupware tends to assume a reliable and constant quality of communications that does not exist in a mobile environment. The implications of making this false assumption are twofold: first, systems that enforce certain ordering and reliability semantics across all operations can suffer drastic performance penalties; second, users are given insufficient awareness of (and control over) the effect of the unreliable communications environment on their collaboration. The support of mobile-awareness implies providing users with appropriate and sufficient inforraation to adapt their behaviour (and the behaviour of the system) in response to changes in the quality of group communications available. To support the development of mobile-aware groupware we have built a flexible Quality of Service (QoS)-based group service capable of providing group-oriented feedback to application level services.<\/dc:description><dc:date>\n        1999-03<\/dc:date><dc:type>\n        Journal Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:relation>\n        http:\/\/dx.doi.org\/10.1007\/BF01305318<\/dc:relation><dc:identifier>\n        Cheverst, Keith and Blair, Gordon S. and Davies, Nigel and Friday, Adrian (1999) The Support of Mobile-Awareness in Collaborative Groupware. Personal and Ubiquitous Computing, 3 (1 & 2). pp. 33-42. ISSN 1617-4909<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/11698\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1007\/BF01305318","http:\/\/eprints.lancs.ac.uk\/11698\/"],"year":1999,"topics":["QA75 Electronic computers. Computer science"],"subject":["Journal Article","PeerReviewed"],"fullText":"The Support of Hobite-Awareness in \nCottaborative Groupware \nKeith Cheverst, Gordon Blair, Nigel Davies and Adrian Friday \nDistributed Multimedia Research Group, Department of Computing, Lancaster University, Lancaster, UK \nAbstract= This paper explores the need for mobile-awareness in groupware d signed for use in a mobile nvironment. The motivation for \nproviding this additional form of awareness i  that current groupware t nds to assume a reliable and constant quality of communications that \ndoes not exist in a mobile nvironment. The implications ofmaking this false assumption are twofold: first, systems that enforce certain \nordering and reliability semantics across all operations can suffer drastic performance p nalties; econd, users are given insufficient awareness \nof (and control over) the effect of the unreliable communications e vironment on their collaboration. The support of mobile-awareness \nimplies providing users with appropriate and sufficient inforraation toadapt their behaviour (and the behaviour ofthe system) in response \nto changes in the quality of group communications available. To support the development of mobile-aware groupware we have built a \nflexible Quality of Service (QoS)-based group service capable of providing roup-oriented f edback toapplication level services. \nKeywords: Group service; Groupware; Mobile-awareness; Open distributed systeras; Wireless communications; U er interface design \n1. Introduct ion \nThe main argument of this paper concerns the \nneed for a new type of awareness, i.e. mobile- \nawareness, which provides group members with \nrelevant information concerning the effect hat the \nconstraints imposed by their mobile environment \nmight have on the group's collaboration. This \napproach couples and expands upon the notion of \nadaption [1] and the approach argued in [2], i.e. \nproviding users with increased levels of awareness \nto deal with the problems of group collaboration \nin the presence of unreliable communications. In \norder to investigate some of the issues regarding \nthe development ofthis class of groupware, we have \nexperimented with providing varying degrees of \nmobile-awareness through our MOST (Mobile \nOpen Systems Technologies) prototype groupware \napplication using our own flexible QoS (or Quality- \nof-Service)-based group service. \nThe identification of mobile-awareness arose \nfrom the extensive body of work carried out during \nthe MOST project [3]. This project worked closely \nwith a REC (Regional Electricity Company) in \norder to investigate the potential for using port- \nable and wireless technologies to improve collab- \noration between highly mobile field engineers \nin the safety-critical domain of the UK power \ndistribution industry. It was anticipated that by \nimproving collaboration, the operational efficiency \nof the REC could also be improved. Optimal \nefficiency is of prime importance to the REC \nbecause it has to manage the supply of electricity \nto approximately two million electricity consumers. \nProblems with the power distribution arise quite \nfrequently and, when such problems leave con- \nsumers without supply, there is a strong financial \nincentive for the REC to return supply as soon \nas possible. A control centre is responsible for \ncoordinating the work of field engineers and for \nmaintaining an up-to-date view of the network \nstate. For reasons of safety, it is crucial that such a \nview be maintained and that no inconsistencies \nregarding the current network state exist. For \nexample, the control centre needs to be certain \nthat a section of network has been \"earthed\" before \ninstructing a field engineer to perform a repair \non that section of network. In order to maintain \nthe consistency ofnetwork views the control centre \nimposes a sequential ordering on all operations \naffecting the network. \nWhen the MOST project started, the REC was \nin the process of changing over from a push-to-talk- \nbased PMR (Private Mobile Radio) communica- \ntions system to a more up-to-date connection- \noriented PMR system. One implication of this \nchange was that field engineers and control centre \npersonnel would no longer be able to collaborate \nvia a common broadcast channel. However, the \nnew system was capable of supporting mobile data, \nand the REC was keen to investigate the extent \nto which the new comraunications infrastructure \n\u000e9 Springer-Verlag London Ltd \nPersonal Technologies (1999) 3:33-42 \n34 \ncould support enhanced collaboration between its \nworkforce and the provision of mobile data services \nto its field engineers. \nFollowing an extensive requirements-capture \nexercise, the MOST team developed a prototype \ndistributed groupware application to enable multi- \nmedia collaboration between field engineers and \ncontrol centre personnel. Because of the highly \nmobile nature of field engineers, the application \nwas designed to run on handheld or highly portable \ncomputers using the companies wireless PMR \nsystem for group communications. This application \nwas arguably the first collaborative mobile applica- \ntion ever built which was capable of adaption in a \nmobile environment [4]. \nThe application was designed as an expandable \ntoolkit comprising a number of modules including \na shared GIS (Geographical Information System) \nmodule. This module supports both private and \npublic (i.e. group) modes of working. In group mode, \nthe module enables field engineers to perform \nspatially aware collaboration by supporting the \ndisplay and annotation of network schematics \nacross groups. Flexible WYSIWIS (or What You \nSee Is What I See) is supported by the GIS module \nby virtue of its support for real-world (i.e. North- \nEasting) coordinates as opposed to actual screen \ncoordinates. This approach enables engineers to \nview network schematics at different scales and \nlocations but still receive shared annotations. \nFigure 1 illustrates the user interface to the GIS \nmodule and shows the various tools available for \nannotating network schematics. \nThe MOST application was evaluated by real \nend-users in a trial scenario using the wireless \nGSM service for communications. This evaluation \nprovided a valuable set of implications regard- \ning the development of distributed groupware in \nconjunction with mobile technologies. \n2. The Impact of Mobile \nCommunications on \nDistributed Groupware \nMobile communications implies the utilisation \nof different networking technologies in order to \nFig. 1. Graphical user interface (GUI) to the Geographical Information System (GIS) :nodule. \nK. Cheverst e al \nmaintain etwork connectivity whilst mobile. For \nexample, mobile computers can be either discon- \nnected, weakly connected by low-speed wireless \nnetworks uch as GSM, or fully connected by high- \nspeed networks ranging from Ethemet o ATM. \nThe problem faced by developers when build- \ning mobile applications i that, when users roam \nbetween areas of different network infrastructure, \nrapid and massive fluctuations in the quality of \nservice provided by the underlying communica- \ntions infrastructure can occur. For example, auser \nmight begin the day with their portable computer \ndocked to a docking station with a high-bandwidth \n(i.e. 100 Mbps) ATM network link. Later on, the \nuser may choose to undock their portable and move \naround their department whilst maintaining \nnetwork connectivity hrough alower bandwidth, \nlocal area RF (radio frequency)-based, network \nsuch as WaveLan (providing a maximum band- \nwidth of 2 Mbps). When leaving the department \nbuilding, the user could still achieve network \nconnectivity by utilising the wide-area but low- \nbandwidth (i.e. 9.6 Kbps) GSM service. However, \nwhilst using this service the user might occasionally \nenter areas referred to as \"coverage blackspots\" and \nso lose network connectivity. \nOne of the MOST application's key requirements \nwas the ability to operate over both heterogeneous \nnetworking and processing architectures. In par- \nticular, the application was required to be capable \nof switching between analogue PMR, GSM and \nwired Ethernet-based networks and also capable \nof running on both portable windows-based PCs \nand legacy-based UNIX platforms. For this reason, \nMOST used the open distributed processing (ODP)- \nbased ANSAware [5] distributed systems toolkit \nas its development platform. ANSAware is a partial \nimplementation of the Advanced Networked \nSystems Architecture (ANSA) [6] and has been \ninfluential in the specification of the reference \nmodel for ODP (RM-ODP) [7,8] by the Inter- \nnational Standards Organization (ISO). In common \nwith more recent open standards, uch as CORBA \n(Common Object Request Broker Architecture) \n[9], RM-ODP is based around aclient-server a chi- \ntecture and is strongly object-oriented. \nThe ODP model can be viewed and managed \nfrom a number of different viewpoints. Of most \nrelevance to this paper is the computational view- \npoint which is based on a location-independent \nobject-based model of distributed systems. In this \nmodel, interacting entities are treated uniformly \nas objects, i.e. encapsulations of tate and behaviour. \nObjects are accessed through interfaces and objects \noffering services (known as servers) are made avail- \nable by exporting their interface r ference toa database \nof interface references known as a trader. An object \nwishing to interact with a service (known as a client) \nmust first import hat server's interface reference. \nOnce the client has the interface reference it can \nproceed to make an invocation on the server. \nRM-ODP-based platforms provide applica- \ntion developers with a number of abstractions or \ntransparencies for masking out various features of \na distributed computation. Two examples of the \ntransparencies provided are network transparency \nand processing transparency, which together enable \nsystems to operate over a variety of machine\/network \nconfigurations. Another transparency provided \nis group transparency. This gives the application \nprogrammer an abstraction for dealing with groups \nthat hides specific group details uch as the identity \nof individual group members. \nUnfortunately, when developing mobile-aware \ngroupware, these transparencies can hide from the \nprogrammer the details required for providing the \nuser with mobile-awareness. Forexample, the strict \nenforcement of network and group transparencies \nmakes it impossible for the application programmer \nto receive sufficient levels of feedback regarding \nchanges in the quality of communications available \nto individual group members. The result of this is \nthat mobile groupware developed using these \ntransparencies tends to hide group communica- \ntions problems from users and thus forces them to \nassume a constant level of communications quality. \nIn general, traditional distributed groupware \nsystems (and the support services available to \ndevelop them) tend to hide details concerning the \nstate of group communications from users and also \nassumes aconstant level of communications QoS. \n3. Mobile-Aware Distributed \nGroupware \nThe key to creating some form of compatibility \nbetween distributed groupware and mobile com- \nmunications is mobile-aware groupware. Such \ngroupware builds on the concept of awareness \n[10,11] to provide group members with feedback \nto make them fully aware (or rather as aware as \nthey wish to be) of the effect of group commun- \nications on their collaboration. Such awareness \nshould prevent group members from being forced \nto make (possibly false) assumptions regarding \nthe current state of their connectivity with the \nrest of the group. \nSupport of Mobile-Awareness in Collaborative Groupware \n35 \nr \n36 \nIn order to investigate some of the implications \nof supporting mobile awareness, the MOST team \ndeveloped an initial version of the MOST applica- \ntion which provided users a limited degree of \nmobile-awareness. This version of the application \nwas evaluated by a group of end-users in a trial \nscenario. Based on the results of this evaluation, an \nenhanced version of the application was developed \nthat tested the extent o which mobile-awareness \ncould be supported. The following sections describe, \nin turn, the initial and enhanced versions of the \nMOST application. \n3.1. The initial version of the \nMOST application \nThe initial version of the MOST application sup- \nported mobile-awareness by providing the end-user \nwith an awareness ofthe current state of group con- \nnectivity. This form of awareness i provided via \nthe graphical user interface (GUI) of the applica- \ntion's session manager module (shown i Fig. 2). \nIn more detail, the session manager's GUI com- \nprises a number of scrollable areas in order to \nmaximise the small display area available. The \ntop left-hand side of the window contains icons \nrepresenting the modules available to the user (the \nglobe represents the GIS module). On the top \nright-hand side of the window is a scrollable column \nof icons representing engineers who can participate \nin a collaboration and below this there are icons \nfor enabling members to be added and removed \nfrom the group membership. In the centre of the \nwindow is a row of \"member\" icons representing \ncurrent group members. Under each member's icon \nis a column of \"module\" icons that represent the \nmodules which that user is currently running. \nFeedback regarding the state of connectivity \nwithin the group is achieved by colouring these \n\"member\" icons depending on the represented \nmember's connectivity. For example, a discon- \nnected group member's icon is displayed with a red \nbackground, while a connected group member's \nicon is displayed with a green background. \nThis initial version of the prototype MOST \napplication was evaluated by members of the REC \nin a trial scenario in which a group of four users \nwere asked to collaborate using the shared GIS \nmodule in order to locate damage to a \"wiring pit\" \nand carry out a repair. The group members com- \nmunicated with one another using the wireless \nGSM service. During the collaboration, one member \nof the group had their phone switched off or a \nshort period of time. This was done to mimic the \nimpact on the group's collaboration of one of the \ngroup members entering acoverage black spot. \nDuring the trial, the collaborating group were \nsuccessfully able to use the application to affect \nthe repair. In addition, the end-users found that \nthe mobile-awareness information provided by \nthe session manager enabled them to realise the \nperiod of time during which total group commun- \nication was not available and the identity of the \nmember suffering disconnection from the group. \nThis enabled the r mainder of the group to adapt \nFig. 2. GUI to the initial session manager. \nK. Cheverst e al \nthe coordination of their collaboration until the \ndisconnected member regained connectivity with \nthe rest of the group. However, the users involved \nin the trial felt that the application did not give \nthem sufficient information regarding the way in \nwhich the constraints of operating in an unreliable \nmobile communications environment impacted \nupon their collaboration. More specifically, the \nfollowing criticisms were raised. \nInsufficient temporal feedback: End-users were \nconfused and frustrated when given no feedback \nor appreciation of the fact that establishing a\nconnection to the rest of the group using the GSM \nservice could take over 10 seconds and that \nsignificant delays could occur before their shared \noperations where received by all group members. \nInsufficient feedback on group consistency: \nDifficulties with communication a d connectivity \nwere not constant across all group members. For \nthis reason, end-users wished for feedback regarding \nthe identity of those particular group members who \nwere unable to receive their shared operation. It \nis important to note that one of the application's \nrequirements was to maintain ahigh level of data \navailability (even at the expense of possible incon- \nsistencies between group members), and therefore \nthe MOST application does not enforce either \ntotal or causal ordering. The potential for incon- \nsistency was generally acceptable to engineers \nproviding they were able to receive feedback should \nany inconsistencies arise. However, for certain \noperations engineers did require some form of \nconsistency guarantee. For example, an engineer \nmight require an operation to have atomic delivery \nsemantics, i.e. to be received by a certain set of \ngroup members or none at all. Similarly, an engineer \nmight require a shared operation to be received by \na certain quorum of group members. \nLack of support for managing the cost of group \noperations: One of the constraints imposed by a \nmobile communications infrastructure is cost. \nDepending on the service being used a cost may \nbe charged on a per second or a per byte basis (or \nnot at all). Where communication is provided by \nthe company's own PMR system, managing the \ncost of calls between collaborating engineers i not \nusually an issue. However, the REC collaborating \nwith the MOST project, despite using PMR, issued \na number of its engineers with cellular phones in \nan attempt o overcome the problems of PMR \ncoverage blackspots \n3.2. The enhanced version of the \nMOST application \nFollowing the criticisms described above, an \nenhanced version of the MOST application was \ndeveloped in order to investigate some of the ways \nin which additional mobile-awareness information \ncould be provided. The new version of the applica- \ntion was built to support a number of different \nforms of mobile-awareness. In order to enable the \nFig. 3. GUI for providing increased levels of awareness. \nSupport of Mobile-Awareness in Collaborative Groupware \n37 \n38 \nuser to control the extent to which awareness infor- \nmation should be provided by the user interface, \nusers are able to select different types of QoS in \nthe knowledge that the system will only provide \nawareness information concerning the types of \nQoS selected by the user. \nIn more detail, the session manager's GUI (as \nshown in Fig. 3) was extended to provide: \n1. a convenient and easy to use mechanism for \nassociating QoS-based requirements with \ngroup operations, e.g. reliability, cost, ordering \nand temporal requirements \n2. a clear and graphical method for receiving \nfeedback should the communications environ- \nment cause any of the QoS requirements to\nbe violated. \nThe user can specify QoS requirements using \nthe smaller \"guarantee\" icons (i.e. those labelled \nO,C,G,T and Q) positioned beneath each member \nicon and each module icon. These icons represent \nfrom left to right: required ordering, maximum cost, \nrequired reliability, maximum delay and required \nquorum. The user can toggle ach type of guarantee \nbetween active and inactive by simply clicking on \nthe appropriate icon. \nTo provide the required level of flexibility, the \nGUI enables QoS requirements to be made against \nboth individual group members and the entire col- \nlaborating roup. For example, an engineer could \nspecify the requirement that their next shared \noperation should be reliably received by the entire \ngroup but that only group member \"Joe\" needs to \nreceive the operation within 2 seconds. This flex- \nibility is important because certain group members, \ne.g. engaged in a monitoring process, might not have \nthe same requirements a other group members. \n3.3. The trade-off between complexity \nand ease-of-use \nWhen considering the issue of mobile awareness \none of the interesting issues that arises is the trade- \noffbetween ease of use and power\/complexity. The \nmobile-aware user interface described in section \n3.2 is clearly biased towards the power\/complexity \nside of this trade-off. Such an interface isprobably \ntoo complex to present to field engineers but did \nprove useful in highlighting the extreme level of \nmobile awareness that could be provided by a sys- \ntem and the potential for enabling end-users to \ncontrol certain elements of the system. \nExtensive valuation is required to determine \nthe optimum trade-off between the provision of \nawareness information and interface complexity. \nThis trade-off is likely to be highly dependent on \nthe collaborative task being performed and the \npreferences of individual users. For this reason, \nmore specific, but less flexible, user interfaces are \nlikely to be more appropriate for certain specific \ncollaborative tasks. For example, once using the \ncompanies PMR system for collaboration, field \nengineers could be given mobile-awareness infor- \nmation relating only to group connectivity and the \ntimeliness and reliability of group operations across \nall group members. In addition, by removing the \nability for engineers to establish collaborating groups \nindependently and launch application modules \nremotely, the user interface could be greatly simpli- \nfied whilst still providing the core level of mobile- \nawareness required. However, the user interface \nprovided to control centre personnel would need \nto provide the functionality ocontrol groups and \nto monitor the ordering of operations and the \nconsistency ofshared views. This interface would \ntherefore need to be more complex and demand \nfrom the user a greater level of technical expertise. \n4. Support Services for \nMobile-Aware Groupware \n4.1. Overview \nIn order to support he development of mobile- \naware distributed groupware, developers require \nnovel and flexible group services. In particular, \nsuch services need to provide flexible group and \nnetwork transparencies and also support he flow \nApplications etwork QoS requirements \nApphcafion \nPlat form + Protocols  \nCommunications I frnstrocttlre \n~ Feedback touser  \nT Feedback toapplication \nT Cb_anging network QoS \nFig. 4. Information flow required to support mobile applications. \nK. Cheverst et al \nService \nClient ~ 1, X l \nGroup Management'\\ ~ \/ \nInterface \nInterface Group \nObject \nFig. 5. The interface group abstraction. \nof information between the application, the platform \nand the communications i frastructure (Fig. 4). \nThe group service described in [12] was built to \nsupport he development ofmobile-aware group- \nware and was used to re-engineer the MOST group- \nware application. The group service is strongly \nbased on interface groups [13], which are part of \nthe ANSA model. An interface group provides a\nconvenient abstraction over certain group issues \nand is basically a collection of interfaces which are \nonly externally accessible through asingle service \ninterface and an associated group management \ninterface. When an object invokes an operation \non an interface group's ervice interface the opera- \ntion is propagated toall group members contained \nin the interface group's membership. The group \nmanagement interface is used to perform group \nmembership tasks such as joining and removing \nmembers from an interface group's membership. \nTo illustrate the interface group abstraction, \nconsider the shared GIS module. A client could \npropagate a GIS update operation to a group of \nGIS servers by simply invoking the update opera- \ntion on the service interface of the corresponding \ninterface group. Figure 5 illustrates a client invok- \ning an operation on the service interface of an \ninterface group comprising three members. \nIn a mobile environment, not all members of a \ncollaborating roup are likely to have the same \nquality of network connectivity, i.e. some members \nmight enter a \"coverage blackspot\" whilst others \nhave full connectivity. For this reason the group \nservice nables the application programmer selec- \ntively to break group transparency b supporting \nthe specification of QoS constraints that act on \nindividual group members, in addition to those that \nact on the group as a whole. \n4.2. Key properties \nIn order to support he development of mobile- \naware groupware the group service possesses the \nfollowing three key properties. \nFlexibility: One of the fundamental requirements \nof the group service is supporting flexible con- \nsistency between group members. As Greenberg \nand Marwood state [14], the degree of consistency \nrequired by any groupware system is application- \ndependent and therefore a \"one size fits all\" approach \nto manag-ing consistency is not suitable. In addi- \ntion, the fundamental consistency\/performance \ntrade-off implies that strengthening the system's \nconsistency guarantees results in a reduction of the \nsystem's responsiveness. Thus, in order to achieve \noptimum performance, it is important that support- \ning services only enforce the minimum level of \nconsistency required by the application. Further- \nmore, because an application's consistency (or \nperformance) requirements can change over time, \nsupport needs to be sufficiently flexible to react o \nany such changes. \nTo enable flexible consistency, the group service \nenables the relaxation of message ordering and \nreliability guarantees which, in a weakly connected \nenvironment, are extremely costly in terms of per- \nformance. Such a performance penalty is com- \npletely unnecessary if the shared operation being \npropagated does not require such strong uarantees. \nIn addition to message ordering and reliability \nrequirements, he group service nables the appli- \ncation programmer to specify (over time) combina- \ntions of the following constraints: \n1. The quorum of group members required to \nreceive a shared operation; by reducing the \nquorum size, group invocations can succeed \ndespite temporarily disconnected group mem- \nbers, although this obviously has an impact \non group consistency. \n2. The time-out period within which either the \nentire group or specific individual group mem- \nbers must acknowledge receipt of a shared \noperation; by increasing the length of time- \nout period, the programmer can effectively \ncontrol the degree of coupling exhibited by \ncertain parts of the system. It has been argued \nthat flexible coupling is an important require- \nment in groupware systems [15]; however, for \nmobile groupware the requirement is even \ngreater. For example, when group connectivity \nis good then a tightly coupled level of inter- \naction can be maintained by the system. \nHowever, if the level of group connectivity \nbecomes poor the level of coupling could be \nreduced. It is important o note that the \nsetting of a time-out period can be can stip. \nulated indirectly by the user through the user \nSupport of Mobile-Awareness in Collaborative Groupware \n39 \n4O \n. \ninterface, e.g. if the user requires feedback in \nthe event of their next group action not reach- \ning the group within 10 seconds. This means \nthat the programmer does not need to have \nadvanced knowledge of the timing character- \nistics of each operation. \nThe cost which the client is prepared to pay \nin order for either the entire group or specific \ngroup members to evaluate the shared opera- \ntion. Note that the group service utilises the \ncosting information (cost per byte, cost per \nsecond, etc.) provided by the underlying \nQEX protocol [16] in order to calculate the \ncost of propagating invocations to the group \nmembership. \nAbility to provide feedback: In order to enable \nfeedback to the application, the group service \nenables application programmers selectively to \nbreak group transparency b enabling them to asso- \nciate specific QoS-based requireraents with group \nupdates. If, when propagating a group update, one \nor more of these requirements cannot be met then \nthe service can provide feedback to the application. \nAbility to adapt: The group service is capable of \nperforming intelligent adaption, i.e. tailoring its \nbehaviour based on changes in the underlying \ncommunications infrastructure. For example, the \ngroup service can save resources by not attempting \nto propagate a group operation to any group \nmember who is known to be currently discon- \nnected and unreachable. To give a slightly more \nsophisticated example, consider asituation where \na user has requested that his or her next group \noperation eeds to be completed within 5 seconds. \nHowever, one of the group members has network \nconnectivity provided by a GSM handset with a \ncall set-up time of 10 seconds. In this situation, \nthe response of the group service depends upon \nwhether or not the group member equipped with \nGSM is connected at the time when the user issues \nthe group operation. If the group member was not \nconnected at the time then the group service \nshould not attempt to propagate the operation to \nthat member because the propagation could not \noccur within the specified time limit. \n4.3. Supported application \nprogramming interface (API) \nThe API supported by the group service can be \ndivided into three main areas of functionality. \nGroup management: This part of the API is con- \ncemed with supporting interface group administration, \nTable 1. Group management operations supported by the group service \nOperation Description \nSetPopulation Policy \nJoin \nLeave \nReturnNumMembers \nOperation accepts two integer parameters representing the maximum and minimum of group members permitted \nOperation accepts as parameters a property name and value pairing for joining a compatible service interface to \nthe group. Using this operation a client could, for example, instruct the group manager to join an interface \ninstance to the interface group with the property name \"GIS_Type\" and value \"Arc_Info\" \nOperation removes interface instances from the membership ofthe interface group by accepting a property \nname and value pairing for identifying the member to be removed \nOperation returns the number of members in the interface group \nTable 2. Supported API for group-oriented QoS \nOperation Description \nGetGroupQoS \nSetGroup TimeQoS \nSetGroupCostQoS \nSetGroupQuorumQoS \nSetGroupOrderingQoS \nSetGroupReliabilityQoS \nOperation returns astructure or profile showing which QoS guarantees a given client has chosen to stipulate \nOperation enables aclient to specify the time (in seconds) within which their subsequent group invocations \nneed to be serviced \nOperation enables aclient to specify the maximum cost (currently stipulated using units supported by the \nunderlying platform) that should be incurred for servicing subsequent group invocations \nOperation enables aclient to specify the quorum of group members required for servicing subsequent \ngroup invocations. The client can specify either an enumerated type, e.g. all or majority, or a cardinal value, \ne.g. two members \nOperation enables aclient to specify (using a boolean value) whether group ordering is required \nOperation enables aclient to specify (using a boolean value) whether group reliability is required \nK. Cheverst et al \nTable 3. Supported API for individual group member-oriented QoS \nOperation Description \nGetGroupMembersQoS \nSetGroupMembersTimeQoS \nSetGroupMembersCostQoS \nSetGroupMembersOrderingQoS \nSetGroupMembersReliabilityQoS \nOperation returns astructure detailing the QoS guarantees that the client has chosen to specify for \ndistributing operations toa specific member ofthe interface group \nOperation used to specify the time (in seconds) within which the client's group invocations eed to \nbe serviced by a specific group meraber \nOperation used to specify the maximum cost hat should be incurred for propagating subsequent \ngroup invocations toa specific group member \nOperation used to specify (using aboolean value) whether a specific group member must receive \ninvocations inorder \nOperation used to specify (using aboolean value) whether or not a specific group member must \nreceive group invocations \ne.g. adding members to and removing members \nfrom the interface group. The key operations \nsupported by this part of the API are described \nin Table 1. \nSpecification of QoS guarantees acting on the \nentire group membership: This part of the API \n(described in Table 2) enables a client to asso- \nciate a combination of group-based QoS guaran- \ntees with an invocation on the interface group's \nservice interface. \nSpecification of QoS guarantees acting on \nindividual group members: In order to enable \nclients to break group transparency completely, \nthe group service enables a client to specify a \ncombination of QoS guarantees on individual group \nmembers as opposed to the entire group. The opera- \ntions that form this part of the API are described \nin Table 3. Note that the notion of providing a \nquorum guarantee is not applicable for individual \ngroup members. \n5. Further Issues \nIn addition to the mobile awareness information \nprovided by the MOST application, information \non battery power constraints could also be made \naware to users collaborating in a mobile environ- \nment. Depending on the type of portable nd-system \nand wireless communications technology being \nused, the transmission of an invocation to the \ngroup service may consume a significant quantity \nof power. When this is the case, it may be approp- \nriate to inform the user of the effect on battery power, \nassociated with performing roup operations. \nIt is clearly necessary to devise and develop new \nmetaphors that can be used for making users aware \nof issues such as time, cost and power in a collab- \norative setting. Without such metaphors it is likely \nthat users will feel that they are being presented \nwith too much confusing information and this \ncould have a detrimental effect on their ability to \ncollaborate. This issue is of particular concern when \ndeveloping interfaces that support mobile aware- \nness for handheld systems with relatively small \nscreen displays. More specifically, careful considera- \ntion needs to be given to questions uch as: \n1. Where is it best to locate awareness informa- \ntion in the UI? \n2. To what extent do we enable users to specify \nwhat types of awareness they require ?\n3. How to provide users with the flexibility to \nspecify the types of awareness that they are \ninterested in whilst maintaining simplicity \nin the user interface? \nThe feasibility of supporting mobile-awareness \nrelies on finding appropriate answers to the above \nquestions. MOST has investigated these questions \nin one particular application domain, but it is clearly \nnecessary to research and evaluate the usefulness \nof supporting mobile-awareness in other applica- \ntion domains, and such research is ongoing. \n6. Summary \nThis paper has examined the problems associated \nwith using distributed groupware in a mobile com- \nmunications environment. The fundamental prob- \nlem is that current groupware tends to assume a \nreliable and constant quality of group communica- \ntions which, in a mobile environment, simply does \nnot exist. The implications of making this false \nassumption are twofold. First, systems that enforce \ncertain ordering and reliability semantics across \nall operations can suffer drastic performance pen- \nalties. Second, users will not be given sufficient \nawareness of (and control over) the effect of the \nSupport of Mobile-Awareness in Collaborative Groupware \n41 \nr \n42 \nunreliable communications environment on \ntheir collaboration. \nA new class of mobile-aware groupware is \nrequired in order to provide collaborating users \nwith an awareness of the way in which the con- \nstraints imposed by the communications envir- \nonment might affect group collaboration. Once \npresented with this awareness, users hould be able \nto intelligently adapt their collaboration i response \nto changes in the level of group communications. \nHowever, the problem with building mobile- \naware distributed groupware using existing devel- \nopment tools and services, such as those based on \nRM-ODP, is that they mask the programmer from \nlow-level networking and group-based details. This \nis a problem because in order to provide feedback \nto the user, applications require feedback from \nlower-level services regarding changes in group \nconnectivity. In order to address this need, a flex- \nible RM-ODP QoS-based group service has been \ndeveloped that provides the kind of feedback \nrequired by mobile-aware groupware systems. In \naddition to providing feedback, the group service \nalso enables the application programmer to control \nthe system's performance\/consistency trade-off by \nchanging certain group propagation strategies, i.e. \nby altering roup quorum and ordering requirements. \nReferences \n1. Davies N, Cheverst K, Friday A et al. Supporting adaptive \nservices in a heterogeneous mobile environment. In: Pro- \nceedings of Workshop on Mobile Computing Systems and \nApplications (MCSA), Santa Cruz, Calif. IEEE Computer \nSociety Press, Los Alamitos, Calif., 1994 \n2. Dix A. Cooperation without (reliable) communication: \ninterfaces for mobile applications. Distributed Systems \nEngineering 1995; 3:171-181 \n3. Davies N, Friday A, Blair G, et al. Mobile open systems \ntechnologies for the utilities industries. In: Dix A (ed) \nRemote cooperation: CSCW for mobile and tele-workers, \nSpringer, Berlin Heidelberg New York, 1995:145-166 \n4. Davies N, Cheverst K, Friday A et al. Distributed systems \nsupport for adaptive mobile applications. ACM Mobile \nNetworks and Applications (special issue on Mobile \nComputing - System Services) 1996; 4:399-408 \n5. APM Ltd. An introduction toANSAware 4.0. Architec- \nture Projects Management Ltd, Cambridge, UK, 1992. \n6- APM Ltd. The ANSA reference manual, release 01.00. \nArchitecture Projects Management Ltd, Cambridge, UK, \n1989 \n7. ISO\/IEC 10746-2. ITU recommendation X.902, open \ndistributed processing- reference model - part 2. Founda- \ntions. International Standards Organization, 1995 \n8. ISO\/IEC 10746-3. ITU recommendation X.903, open \ndistributed processing - reference model - part 3. \nArchitecture. International Standards Organization, 1995 \n9. Object Management Group. The Common Object Request \nBroker: architecture and specification, revision 2.2, 1998. \nAvailable at: http:\/\/www.omg.org\/corba\/corbiiop.htm \n10. Dourish P. Awareness and coordination in shared \nworkspace. In: Proceedings of the ACM CSCW'92 \nConference on Computer Supported Cooperative Work. \nToronto, Canada. ACM Press, New York, 1992:107-114 \n11. Lauwers J, Lan~z K. Collaboration awareness insupport of \ncollaboration transparency. In: Proceedings of the ACM \nSIGCHI'90 Conference on Human Factors in Computing \nSystems. Seattle, Washington. ACM Press, New York, \n1990:303-211 \n12. Cheverst K, Davies N, Friday Aet  al. Services to support \nconsistency in mobile collaborative applications. In: \nProceedings ofthe 3rd International Workshop on Services \nin Distributed Networked Environments (SDNE). Macao, \nChina. IEEE Computer Society Press, Los Alamitos, Calif., \n1996:27-34 \n13. Oskiewicz E, Warne J, Olsen M. A model for interface \ngroups. APM\/TR.009.00. Architecture Projects Management \nLtd, Cambridge, UK, 1990 \n14. Greenberg S, Marwood D. Real time groupware as a \ndistributed system: concurrency control and its effect on \nthe interface. In: Proceedings ofthe ACM CSCW'94 Con- \nference on Computer Supported Cooperative Work. \nChapel Hill, N. C. ACM Press, New York, 1994:22-26 \n15. Dewan E Flexible user interface coupling in collaborative \nsystems. In: Proceedings of the ACM CHI'91 Conference \non Human Factors in Computing Systems. New Orleans, \nLa. ACM Press, New York, 1991:41-48 \n16. Friday A, Cheverst K, Davies Net al. Extensions to ANS \nAware for advanced mobile applications. In: Proceedings \nof the International Conference on Distributed Platforms. \nDresden. Chapman and Hall, London, 1996:29-43 \nCorrespondence to: Keith Cheverst, Distributed Multimedia \nResearch Group, Department ofComputing, Lancaster Uni- \nversity, Lancaster LA1 4YR, UK. Email: kc@comp.lancs.ac.uk \nK. Cheverst et al \n"}