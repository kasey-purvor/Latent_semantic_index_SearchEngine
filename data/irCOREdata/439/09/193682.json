{"doi":"10.1016\/j.tcs.2004.02.046","coreId":"193682","oai":"oai:lra.le.ac.uk:2381\/1821","identifiers":["oai:lra.le.ac.uk:2381\/1821","10.1016\/j.tcs.2004.02.046"],"title":"Improved competitive algorithms for online scheduling with partial job values","authors":["Chin, F. Y. L.","Fung, S. P. Y."],"enrichments":{"references":[],"documentType":{"type":null}},"contributors":[],"datePublished":"2004","abstract":"This paper considers an online scheduling problem arising from Quality-of-Service (QoS) applications. We are required to schedule a set of jobs, each with release time, deadline, processing time and weight. The objective is to maximize the total value obtained for scheduling the jobs. Unlike the traditional model of this scheduling problem, in our model unfinished jobs also get partial values proportional to their amounts processed.\\ud\n\\ud\nNo non-timesharing algorithm for this problem with competitive ratio better than 2 is known. We give a new non-timesharing algorithm GAP that improves this ratio for bounded values of m, where m   can be the number of concurrent jobs or the number of weight classes. The competitive ratio is improved from 2 to 1.618 (golden ratio) which is optimal for m=2, and when applied to cases with m>2 it still gives a competitive ratio better than 2, e.g. 1.755 when m=3. We also give a new study of the problem in the multiprocessor setting, giving an upper bound of 2 and a lower bound of 1.25 for the competitiveness. Finally, we consider resource augmentation and show that O(log\u03b1) speedup or extra processors is sufficient to achieve optimality, where \u03b1 is the importance ratio. We also give a tradeoff result, showing that in fact a small amount of extra resources is sufficient for achieving close-to-optimal competitiveness","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/1821<\/identifier><datestamp>\n                2015-12-18T16:38:18Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_1116<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nImproved competitive algorithms for online scheduling with partial job values<\/dc:title><dc:creator>\nChin, F. Y. L.<\/dc:creator><dc:creator>\nFung, S. P. Y.<\/dc:creator><dc:description>\nThis paper considers an online scheduling problem arising from Quality-of-Service (QoS) applications. We are required to schedule a set of jobs, each with release time, deadline, processing time and weight. The objective is to maximize the total value obtained for scheduling the jobs. Unlike the traditional model of this scheduling problem, in our model unfinished jobs also get partial values proportional to their amounts processed.\\ud\n\\ud\nNo non-timesharing algorithm for this problem with competitive ratio better than 2 is known. We give a new non-timesharing algorithm GAP that improves this ratio for bounded values of m, where m   can be the number of concurrent jobs or the number of weight classes. The competitive ratio is improved from 2 to 1.618 (golden ratio) which is optimal for m=2, and when applied to cases with m>2 it still gives a competitive ratio better than 2, e.g. 1.755 when m=3. We also give a new study of the problem in the multiprocessor setting, giving an upper bound of 2 and a lower bound of 1.25 for the competitiveness. Finally, we consider resource augmentation and show that O(log\u03b1) speedup or extra processors is sufficient to achieve optimality, where \u03b1 is the importance ratio. We also give a tradeoff result, showing that in fact a small amount of extra resources is sufficient for achieving close-to-optimal competitiveness.<\/dc:description><dc:date>\n2009-12-08T16:13:44Z<\/dc:date><dc:date>\n2009-12-08T16:13:44Z<\/dc:date><dc:date>\n2004<\/dc:date><dc:type>\nArticle<\/dc:type><dc:identifier>\nTheoretical Computer Science, 2004, 325 (3), pp.467-478<\/dc:identifier><dc:identifier>\n0304-3975<\/dc:identifier><dc:identifier>\nhttp:\/\/www.sciencedirect.com\/science\/article\/pii\/S0304397504004219<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/1821<\/dc:identifier><dc:identifier>\n10.1016\/j.tcs.2004.02.046<\/dc:identifier><dc:language>\nen<\/dc:language><dc:relation>\nRAE 2007<\/dc:relation><dc:format>\nMetadata<\/dc:format>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["0304-3975","issn:0304-3975"]}],"language":null,"relations":["RAE 2007"],"year":2004,"topics":[],"subject":["Article"],"fullText":null}