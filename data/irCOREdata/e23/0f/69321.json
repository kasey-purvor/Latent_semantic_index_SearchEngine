{"doi":"10.1023\/A:1026758709480","coreId":"69321","oai":"oai:eprints.lancs.ac.uk:27225","identifiers":["oai:eprints.lancs.ac.uk:27225","10.1023\/A:1026758709480"],"title":"Adaptive Management of an Active Service Network.","authors":["Marshall, I. W.","Roadknight, C."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2000-10","abstract":"The benefits of active services and networks cannot be realised unless the associated increase in system complexity can be efficiently managed. An adaptive management solution is required. Simulation results show that a distributed genetic algorithm, inspired by observations of bacterial communities, can offer many key management functions. The algorithm is fast and efficient, even when the demand for network services is varying rapidly","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/69321.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/27225\/1\/27225.pdf","pdfHashValue":"a5dd90c7e636f6fc6913a3b5ef8b6a7b73e2228e","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:27225<\/identifier><datestamp>\n      2018-01-24T02:50:34Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Adaptive Management of an Active Service Network.<\/dc:title><dc:creator>\n        Marshall, I. W.<\/dc:creator><dc:creator>\n        Roadknight, C.<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        The benefits of active services and networks cannot be realised unless the associated increase in system complexity can be efficiently managed. An adaptive management solution is required. Simulation results show that a distributed genetic algorithm, inspired by observations of bacterial communities, can offer many key management functions. The algorithm is fast and efficient, even when the demand for network services is varying rapidly.<\/dc:description><dc:date>\n        2000-10<\/dc:date><dc:type>\n        Journal Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/eprints.lancs.ac.uk\/27225\/1\/27225.pdf<\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1023\/A:1026758709480<\/dc:relation><dc:identifier>\n        Marshall, I. W. and Roadknight, C. (2000) Adaptive Management of an Active Service Network. BT Technology Journal, 18 (4). pp. 78-84. ISSN 1573-1995<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/27225\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1023\/A:1026758709480","http:\/\/eprints.lancs.ac.uk\/27225\/"],"year":2000,"topics":["QA75 Electronic computers. Computer science"],"subject":["Journal Article","PeerReviewed"],"fullText":"Adaptive management of an Active Service Network\nIan W. Marshall and Chris Roadknight\nBT Adastral Park, Martlesham Heath, Ipswich, Suffolk, UK IP5 3RE\n{christopher.roadknight, ian.w.marshall}@bt.com\nAbstract.\nThe benefits of active services and networks cannot be realised unless the associated\nincrease in system complexity can be efficiently managed.  An adaptive management\nsolution is required.  Simulation results show that a distributed genetic algorithm,\ninspired by observations of bacterial communities, can offer many key management\nfunctions.  The algorithm is fast and efficient, even when the demand for network\nservices is rapidly varying.\nKeywords.  Active Network, Network Management, Genetic Algorithms, ALAN\nIntroduction.\nNew Internet services and features are currently being introduced more slowly\nthan users require, since existing human-intensive processes cannot cope with the rate of\nchange.  The problem can only get worse as customers gain experience of the Internet,\nand their expectations rise.  Clearly the management solutions for the future Internet must\nrequire significantly less manual intervention than at present. Active services [1, 2] are\nbased on programs supplied by the users of the services.  The programs run on devices\nowned by network operators or network service providers (such as caches, mirrors\nconference controllers and firewalls), and add value through manipulations such as\ntranscoding, filtering and state maintenance.  The aim is to enable users to have access to\nthe services they require (custom services), whilst avoiding any requirement for operators\nand providers to manage large numbers of services.  Active services should prevent the\ncurrent problems being exacerbated by increased diversity of demand, but will not in\nthemselves solve the current difficulties.  In order to fully realise the intended flexibility\nit will be necessary to combine active services with a highly automated management and\ncontrol system.  In this paper we motivate and describe a novel proposal for automating\nthe management of an active service network, inspired by observations of bacterial\ncommunities.  We also present some initial results that demonstrate our proposal can\naddress some of the key issues, and is worthy of considerable further study.\nControl and Management\nA future network providing active services will be unbounded in both scale and\nfunction.  The network will be constantly expanded, upgraded, and re-dimensioned.\nEven the hardware will probably become programmable [3].  An enormous range of\nservices will develop and evolve at an unprecedented rate.  It is impossible to predict\naccurately what the user defined services will look or behave like but the number of\nentities (independent software objects) could ultimately fill the IPv6 address space.  A\n\u2018global state\u2019 of the system will be impossible to ascertain due to its massive scale.  The\nequations of motion for the state space will be equally indeterminate due to the ever\nchanging complexity.  Even stochastic prediction will be infeasible due to the fractal\nproperties of the traffic [4,5].  In cases, such as this, where the system state and\/or the\nequation(s) of motion are not known, conventional methods of control and management\ndo not apply and adaptive methods of control must be used [6].\nConventional control of dynamic systems is based on monitoring state, deciding\non the management actions required to optimise future state, and enforcing the\nmanagement actions.  In classical control the decision is based on a detailed knowledge\nof how the current state will evolve, and a detailed knowledge of what actions need to be\napplied to move between any pair of states (the equations of motion for the state space).\nMany control schemes in the current Internet (SNMP, OSPF) are based on this form of\ncontrol.  There is also a less precise version known as stochastic control, where the\nknowledge takes the form of probability density functions (pdf), and statistical\npredictions.  All existing forms of traffic management are based on stochastic control,\ntypically assuming Poisson statistics.\nAdaptive control [6] is based instead on learning and adaptation.  The idea is to\ncompensate for lack of knowledge by performing experiments on the system and storing\nthe results (learning).  Commonly the experimental strategy is some form of iterative\nsearch, since this is known to be an efficient exploration algorithm.  Adaptation is then\nbased on choosing some actions that the system has learnt are useful, using a selection\nstrategy (such as a Bayesian estimator), and implementing the selected actions.  Unlike in\nconventional control, it is often not necessary to assume the actions are reliably\nperformed by all the target entities.  This style of control has been proposed for a range of\nInternet applications including routing [7], security [8,9], and fault ticketing [10].  As far\nas we are aware the work presented here is the first application of distributed adaptive\ncontrol to service configuration and management.\nHolland [11] has shown that Genetic Algorithms (GAs) offer a robust approach to\nevolving effective adaptive control solutions.  More recently many authors [12, 13, 14]\nhave demonstrated the effectiveness of distributed GAs using an unbounded gene pool\nand based on local action (as would be required in a multi-owner internetwork).\nHowever, many authors, starting with Ackley and Littman [15], have demonstrated that\nto obtain optimal solutions in an environment where significant changes are likely within\na generation or two, the slow learning in GAs based on mutation and inheritance needs to\nbe supplemented by an additional rapid learning mechanism.  Harvey [16] pointed out\nthat gene interchange (as observed in bacteria [17,18]) could provide the rapid learning\nrequired.  This was recently demonstrated by Furuhashi [19] for a bounded, globally\noptimised GA.  In this paper we demonstrate for the first time that an unbounded,\ndistributed GA with \u201cbacterial learning\u201d is an effective adaptive control algorithm for\nmany aspects of an active service provision system derived from the application layer\nactive network (ALAN) [1, 20].\nALAN\nALAN [1] is based on users supplying java based active code (proxylets) that runs\non edge systems (dynamic proxy servers - DPS) provided by network operators.  It is\nassumed that many proxylets will be multiuser, and most requests will be to \u201crun\u201d a\nproxylet that already exists in the network.  Messaging uses HTML\/XML and is normally\ncarried over HTTP. There are likely to be many DPSs at a physical network node.  It is\nnot the intention that the DPS is able to act as an active router.  ALAN is primarily an\nactive service architecture, and the discussion in this paper refers to the management of\nactive programming of intermediate servers.  Figure 1 shows a schematic of a possible\nDPS management architecture.\nFigure 1.  Schematic of proposed ALAN design\nThe DPS has an autonomous control system that performs management functions\ndelegated to it via policies (scripts and pointers embedded in XML containers).  Currently\nthe control system supports a conventional management agent interface that can respond\nto high level instructions from system operators [21].  This interface is also open to use\nby users (who can use it to run programs\/active services) by adding a policy pointing to\nthe location of their program and providing an invocation trigger.  Typically the\nmanagement policies for the program are included in an XML metafile associated with\nthe code using an XML container, but users can also separately add management policies\nassociated with their programs using HTTP post commands.  In addition the agent can\naccept policies from other agents and export policies to other agents. This autonomous\ncontrol system is intended to be adaptive.\nNot shown in the figure are some low level controls required to enforce sharing of\nresources between users, and minimise unwanted interactions between users.  There is a\nset of kernel level routines [22] that enforce hard scheduling of the system resources used\nby a DPS and the associated virtual machine that supports user supplied code.  In addition\nthe DPS requires programs to offer payment tokens before they can run.  In principle the\ntokens should be authenticated by a trusted third party.  At present these low level\nmanagement activities are carried out using a conventional hierarchical approach.  We\nhope to address adaptive control of the O\/S kernel supporting the DPS in future work.\nGenetic algorithms and bacteria\nGenetic Algorithms involve the recombination and replication of a genotype that\ncarries out a function or task.  Their success at carrying out the chosen task is then\nassessed and related to the reproductive potency of the \u2018organism1\u2019.  A common approach\n(eg. [23]) begins by creating a set of non-interacting 'organisms' whose genomes have a\nfixed size.  The fitness of each 'organism' is judged against a fixed metric (fitness\n                                                          \n1 In the context of a GA organism should not be interpreted as a biological term.  We use quote marks to\ndistinguish from more biological usage elsewhere in the paper\ncriterion), and the most fit members are allowed to combine pairwise and produce\noffspring, based on some mixture of their genotypes, which then replace the least fit\nmembers.  The process is repeated until the summed fitness of the community stops\nincreasing, at which point the most fit member is chosen as an optimum solution.\nDistributed GAs offer a less batch-style process by allowing 'organisms' to interact with\nan environment and\/or each other in order to accumulate fitness.  Reproduction in this\napproach is based on 'organisms' that have accumulated sufficient fitness to breed with\nthe nearest neighbour who has also crossed the fitness threshold for breeding [24].  Both\nmethods involve genetic fitness being passed onto the next generation, but the second is\nmuch more appropriate for Internet-based applications where global state is not known\nand evolution is continuous.\nBacteria are a set of metabolically diverse, simple, single-cell organisms [17].  Their\ninternal structure is simpler than many other types of living cells, with no membrane-\nbound nucleus or organelles, and short circular DNA.  This is because the genetic\nstructure of bacteria a relatively simple.  It has been demonstrated that only around 250\ngenes are required to code for an independent self-sustaining bacterium [25] and highly\ncompetent bacteria for whom the entire genome is known have only 2-3000 genes [26].\nAs a result bacteria can reproduce within 30 mins of 'birth'.  In addition Bacterial\nevolution 'transcends Darwinism' [18]. While asexual reproduction ensures survival of\nthe fittest, a more Lamarkian2 mechanism of evolution occurs in parallel, with individuals\ncapable of exchanging elements of their genetic material (plasmids) during their lifetime,\nin response to environmental stress, and passing the acquired characteristics to their\n                                                          \n2 Lamark was an 18th century French scientist who argued that evolution occurs because organisms can\ninherit traits, which have been acquired by their ancestors during their lifetime.\ndescendants.  This exchange is known as plasmid migration. Plasmid migration allows\nmuch quicker reaction to sudden changes in influential environmental factors and can be\nmodelled as a learning mechanism.  Sustaining fitness in a complex changing fitness\nlandscape has been shown to require evolution together with a fast learning mechanism\n[14].  It is vital that the learning is continuous, and does not require off-line training as\nwith many neural net based approaches [27]. When a population of E.Coli (a common\nbacterium) is introduced to a new environment adaptation begins immediately, with\nsignificant results apparent in a few days (i.e. O(1000)3 generations)  [28].  Despite the\nrapid adaptation bacterial communities are also remarkably stable.  Fossils of\ncommunities (stromatolites) that lived 3.5 billion years ago in Australia appear identical\nto present day communities living in Shark Bay on Australia\u2019s West coast.  Bacteria thus\nhave many of the properties (simplicity, resilience, rapid response to change) that are\ndesirable for network entities.  It seems it would be perfectly possible to simulate a single\nbacterial genome (2000 or so rules and an interpreter) on every single embedded\nprocessor embedded in possible future Internet devices\nIn similar biological systems such as protocists4, where the probability of mutation\noccuring during the copying of a gene is around 1 in a billion adaptive evolution can\noccur within 1m generations (O(1000)yrs).  GAs typically evolve much faster since the\ngeneration time is O(100)ms and the mutation rate is raised to 1 in a million but\nadaptation can still only deal with changes on a timescale of O(10)s.  Using bacterial\nlearning (plasmid interchange) in a GA will improve this to O(10)ms, and substantially\nimprove its performance when faced with rapid change.  Important properties of a\n                                                          \n3 O(10) means of the order of 10\n4 Unicellular organisms with nuclei\ncommunity of bacteria have been modeled very accurately using a distributed GA [29].\nQualitatively it seems clear that basing adaptive control of the Internet on a distributed\nGA, and using observations of bacterial behaviour to motivate improvements to the GA is\nlikely to be a constructive research method.  The objective of this paper is to provide\nsome quantitative results that support this argument.  Quantitative proof is the topic of\nongoing work.\nAlgorithm Details.\nOur proposed solution makes each DPS within the network responsible for its\nown behaviour.  The active service network is modelled as a community of cellular\nautomata.  Each automaton is a single DPS that can run several programs (proxylets)\nrequested by users.  Each proxylet is considered to represent an instance of an active\nservice.  Each member of the DPS community is selfishly optimising its own (local) state,\nbut 'selfishness' of this kind has been widely used as a basis for modeling biological\nsystems [30], where commonly cooperation is an emergent property of coevolution (or\ncompetition) [31].  Partitioning into selfishly adapting sub-systems has also been shown\nto be a viable approach for the solving of other complex and non-linear problems [32].\nIn this paper we discuss results from an implementation that supports up to 10\nactive services. The control parameters given below are examples provided to illustrate\nour approach.  Our current implementation has up to 1000 vertices connected on a\nrectangular grid (representing the network of transport links between the dynamic proxy\nservers). Each DPS has an amount of genetic material that codes for the rule set by which\nit lives. There is a set of rules that control the DPS behaviour. There is also a selection of\ngenes representing active services. These define which services each node will handle\nand can be regarded as pointers to the actual programs supplied by users.  The service\ngenes also encode some simple conditionals that must be satisfied for the service to run.\nCurrently each service gene takes the form {x,y,z} where:\nx.  is a character representing the type of service requested (A-J)\ny.  is an integer between 0 and 200 which is interpreted as the value in a statement of the\nform \"Accept request for service [Val(x)] if queue length < Val(y)\".\nz.  is an integer between 0 and 100 that is interpreted as the value in a statement of the\nform \"Accept request for service [Val(x)] if busyness < Val(z)% \"\nIf either condition is not satisfied the service does not run\nThe system is initialised by populating a random selection of network vertices\nwith DPSs (active nodes), and giving each DPS a random selection of the available\nservice genes.  Requests are then entered onto the system by injecting a random sequence\nof characters (representing service requests), at a mean rate that varies stochastically, at\neach vertex in the array.  If the vertex is populated by a DPS, the items join a queue.  If\nthere is no DPS the requests are forwarded to a neighbouring vertex. The precise\nalgorithm for this varies and is an active research area, however the results shown in this\npaper are based on randomly selecting a direction in the network and forwarding along\nthat direction till a DPS is located.  This is clearly sub-optimal but is easy to implement.\nIn any case a different routing algorithm would not change the qualitative form of the\nmain results since the algorithm is not predictive and makes no assumptions regarding the\ntraffic pdf. In fact the traffic arriving at each DPS using this simple model shows some\nLong Range Dependency (LRD), but significantly less than real WWW traffic [5].  LRD\nat the servers can be easily increased by adding a history dependency to the traffic\nsources, but this slows down the simulation without changing the results significantly,\nand has not been used in the results reported here.  Each DPS evaluates the items that\narrive in its input queue on a FIFO principle.  If the request at the front of the queue\nmatches an available service gene, and the network provider has specified a value for that\nservice in the DPS control rules, the service will run.  In the simulation the request is\ndeleted and deemed to have been served, and the node is rewarded by the value of one\nexecution of the service.  This value is set by the operator to a number between 1 and 100\nand should equal or exceed the temporal cost of the service (also a number between 1 and\n100 in the simulation).  In the simulations presented here cost and value were equal for\nall services.  If there is no match the request is forwarded and no reward is given.  Each\nDPS is assumed to have the same processing power, and can handle the same request rate\nas all the others.  In the simulation time is divided into epochs (to enable independent\nprocessing of several requests at each DPS before forwarding rejected requests).  An\nepoch allows enough time for a DPS to execute 3-4 service requests, or decide to forward\n30-40 (i.e. forwarding incurs a small time penalty).  An epoch is estimated to represent\nO(100)ms. The busyness of each DPS is calculated by combining the busyness at the\nprevious epoch with the busyness for the current epoch in a 0.8 to 0.2 ratio, and is related\nto the revenue provided for processing a service request.  For example, if the node has\nprocessed three requests this epoch (assume 25 points each) it would have 75 points for\nthis epoch, if its previous cumulative busyness value was 65 then the new cumulative\nbusyness value will be 67.  This method dampens any sudden changes in behaviour.  A\nbrief schematic of this is shown in figure 2.\nFigure 2  Future ALAN model.  Live DPS nodes have a green bar, empty vertices\nare empty.  Incoming requests (a,b,c,d) are routed to the nearest live DPS by an\nunderlying transport network (not shown)\nThe DPS also has rules for reproduction, evolution, death and plasmid migration.\nIt is possible to envisage each DPS as a bacterium and each request for a service as food.\nThe revenue earned when a request is handled is then analagous with the energy released\nwhen food is digested.  This analogy is consistent with the metabolic diversity of\nbacteria, capable of using various energy sources as food and metabolising these in an\naerobic or anaerobic manner.\nGenetic diversity is created in at least 2 ways, mutation and plasmid migration.\nMutation involves the random alteration of just one value in a single service gene, for\nexample:\n\"Accept request for service A if DPS < 80% busy\" could mutate to to \"Accept request for\nservice C if DPS < 80% busy\" or alternatively could mutate to \"Accept request for\nservice A if DPS < 60% busy\".\nPlasmid migration involves genes from healthy individuals being shed or\nreplicated into the environment and subsequently being absorbed into the genetic material\nof less healthy individuals.  If plasmid migration doesn't help weak strains increase their\nfitness they eventually die.  If a DPS acquires more than 4-6 service genes through\ninterchange the newest genes are repressed (registered as dormant). This provides a long\nterm memory for genes that have been successful, and enables the community to\nsuccessfully adapt to cyclic variations in demand.  Currently, values for queue length and\ncumulative busyness are used as the basis for interchange actions, and evaluation is\nperformed every five epochs.  Although the evaluation period is currently fixed there is\nno reason why it should not also be an adaptive variable.\nIf the queue length or busyness is above a threshold (both 50 in this example), a\nrandom section of the active genome is copied into a 'rule pool' accessible to all DPSs. If\na DPS continues to exceed the threshold for several evaluation periods, and there are\nvacant vertices, it replicates its entire genome into the nearest network vertex where a\nDPS is not present. Healthy nodes with a plentiful revenue supply thus reproduce by\nbinary fission.  Offspring produced in this way are exact clones of their parent.\nIf the busyness is below a different threshold (10), a service gene randomly\nselected from the rule pool is injected into the DPS's genome.  If a DPS is 'idle' for\nseveral evaluation periods, its active genes are deleted, if dormant genes exist, these are\nbrought into the active domain, if there are no dormant genes the node is switched off.\nThis is analogous to death by nutrient deprivation.\nSo if a node with the genome {a,40,50\/c,10,5} has a busyness of >50 when\nanalysed, it will put a random rule (e.g. c,10,5) into the rule pool.  If a node with the\ngenome {b,2,30\/d,30,25} is later deemed to be idle it may import that rule and become\n{b,2,30\/d,30,25\/c,10,5}.\nThe algorithm described above is an example of a distributed GA and uses earned\nrevenue as the fitness function.\nExperiments\nOne of the key questions for ALAN management is proxylet placement. Given\nthat the number of DPSs will be large, and the number of proxylets unbounded, the\ncorrect algorithm will be one that needs as little human\/manual intervention as possible,\nas the manual optimisation of proxylet placement soon becomes untenable. Any\nautomated algorithm must also deal with the fact that demand for services will vary in a\nchaotic manner as observed for the WWW [5]. Proxylets must thus replicate and\ndistribute very rapidly, and also persist for long time periods.  To demonstrate that our\nproposal can meet these requirements a simple experiment involving repeated increases\nin load on the simulated network of DPSs was carried out.  In this experiment there was a\nfixed set of active services.\nThe average age (expressed in epochs) of all requests on the network was\nmeasured, this was used as our quality of service (QoS) measurement.  The QoS was\nmeasured over time as the average load on the network was increased in a series of\nsignificant steps, 1, 4, 12, 30, 45, 60 times the initial load.  Figure 3 shows how the QoS\nreacts to these increases.\n0 1000 2000\nTime (Epochs)\nLa\nte\nnc\ny \n(E\npo\nch\ns)\nFigure 3.  QoS reaction to sequential increases in load over time.\nAt 60 times the initial rate, the network was 95% loaded, yet performance had\ndegraded very little.  This shows the algorithm evolves efficient solutions.  A short period\nof worsened service was observed, followed by a return to more acceptable QoS as the\nnetwork adapted (by spawning more nodes and spreading genes for busy services to\nactive nodes that were less busy). The system is reactive, so there will always be some\ndelay in responding to increases in load. The noise in the plot primarily represents the\nresponse of the network to the noise introduced in the traffic model.  The return to a\nstable, sufficient level of performance took ~50 epochs each time the load was increased.\nThis initial result was extremely encouraging so a more realistic experiment was\nperformed.\nAn active services network must respond rapidly to the introduction of new\nservices, enabling them to spread to wherever there is demand, whilst providing a stable\nquality of service for existing services.  When a user develops a new proxylet, or an\nimproved version of an existing proxylet, he should not be required to identify all the\nlocations where it should be stored and\/or run.  Typically the user lacks both the time and\nthe knowledge to make such a decision for himself and in any case cannot predict\ndemand from other users of his program.  At the same time if a user introduces a new\nservice he should not be able to access his service until he has paid the appropriate fee.\nOur second experiment illustrates the handling of new active services by the\ncommunity of DPSs.  The network was allowed to self-optimise to handle a set of 6\nactive services.  A new service gene was introduced after 550 epochs, along with some\ndemand for the service provided by the corresponding proxylet.  Initially the network\nprovider gave no value to the network for this new service request as the user had not yet\npaid.  It can be seen that for 2 epochs some requests are handled (hence the dropping rate\nis momentarily >0) but the network soon fails to execute any of the requests for the new\nservice.  This is because any proxylets for this service are not earning their DPS any\nrevenue, and their genes are therefore being replaced by more lucrative genes.  This\nillustrates how the autonomous controls deal with the introduction of malicious code\nintended to defraud the operator.  A reward is granted (the operator updates the DPS rule\nbase from which all active DPSs inherit when payment is received from the users' bank)\nfor the service after 1000 epochs. The request dropping rate soon decreases as the\nproxylet spreads around the network. Within 200 epochs the service is being provisioned\nas successfully as any other (fig 4).  Note the adaptation is slower than for existing\nservices in the first experiment as the active service network has no memory of the new\nservice and cannot adapt by reviving dormant genes.\n0\n20\n40\n60\n80\n100\n120\n0 200 400 600 800 1000 1200 1400 1600 1800\nTime (epochs)\nIntroduction\nof worthless\nservice\nNew\nservice\ngiven value\nPerformance of existing services\nFigure 4.  Service provisioning consequences of introducing a new service.\nFigure 5 shows the results of the same experiment expressed in terms of handling\nlatency.  Initially no latency is given for the new service as no nodes are processing it (the\nlatency is actually infinite, but this would not show on the graph). When the new service\ngene is introduced (this time the DPS rules indicating the revenue earned from handling\nare changed simultaneously) there is a period of high latency as the plasmid distributes\naround the network but soon its latency is similar to that for the other services.  In an\nimplemented network the revenue would ideally be a property of the service request.\nThis would eliminate operator intervention entirely.  We have chosen to illustrate the case\nwhere the operator retains control to demonstrate that our proposal could easily be\nintegrated with existing management schemes.\n0\n5\n10\n15\n20\n25\n30\n35\n40\n700 900 1100 1300 1500 1700\nIntroduction of \nservice with \nequal revenue \nvalue\nTime (epochs)\nFigure 5.  Latency Consequences of introducing a new service\nThe simple experiments we have shown illustrate that our algorithm can automate\nkey aspects of performance, configuration, account and security management of the\nservices in an active service network.  It is also clear that the network will adaptively\nwork around faults until they either die, or are manually repaired.  Our approach has also\nshown it can deal with rapidly varying noisy traffic sources, without manual intervention,\nand can make effective use of the available resources, whilst adapting rapidly to major\nchanges.  We feel confident that further work on the proposals we are making will prove\nboth productive and rewarding\nConclusions.\nActive networks will require extensive use of adaptive control techniques,\nparticularly at the point where user supplied code has to be managed.  The most obvious\ncontrol point is the programmable device, which is the DPS in our ALAN approach. An\nautonomous adaptive control agent for Dynamic proxy servers in an active network has\nbeen proposed, based on a novel genetic algorithm inspired by observation of real\nbacterial communities.  Simulations have shown that the proposed agent can handle key\naspects of fault, configuration, account, performance and security management\nsuccessfully in a large scale, dynamic environment.  The agent is thus a promising\napproach that deserves further study and detailed comparison with other approaches.\nReferences.\n[1] M. Fry and A. Ghosh \u201cApplication Layer Active Networking\u201d Computer Networks, 31, 7, pp. 655-667,\n1999.\n[2] E. Amir, S. McCanne, R. Katz, \u201cAn active service framework and its application to real time\nmultimedia transcoding\u201d Computer Communications review 28, 4, pp178-189, Oct 1998.\n[3] E. Sanchez, M. Sipper, J. O. Haenni, J. L. Beuchat, A. Stauffer, and A. P\u00e9rez-Uribe, \"Static and\ndynamic configurable systems\", IEEE Transaction on Computers, 48, 6, pp. 556-564, June 1999.\n[4] V. Paxson and S. Floyd, \"Wide Area Traffic: The Failure of Poisson Modelling\", IEEE\/ACM\nTransactions on Networking, 3, 3, pp 226-244, 1995.\n[5] M. Crovella and A. Bestavros, \"Self-Similarity in World Wide Web Traffic: Evidence and Possible\nCauses\", IEEE\/ACM Transactions on Networking, 5, 6, pp 835-846, Dec 1997.\n[6] Y.Z. Tsypkin. \"Adaptation and learning in automatic systems\", Mathematics in Science and\nEngineering Vol 73, Academic press, 1971.\n[7] G. DiCaro and M. Dorigo, \"AntNet: Distributed stigmergic control for communications networks\", J.\nArtificial Intelligence Research, 9, pp. 317-365, 1998.\n[8] D.A. Fisher and H.F. Lipson, \"Emergent algorithms - a new method of enhancing survivability in\nunbounded systems\", Proc 32nd Hawaii international conference on system sciences, IEEE, 1999\n[9] M. Gregory, B. White, E.A. Fisch and U.W. Pooch, \"Cooperating security managers: A peer based\nintrusion detection system\", IEEE Network, 14, 4, pp.68-78, 1996.\n[10] L. Lewis, \"A case based reasoning approach to the management of faults in telecommunications\nnetworks\", Proc. IEEE conf. on Computer Communications (Vol 3), pp. 1422-29, San Francisco, 1993.\n[11] J.H. Holland, \"Adaptation in Natural and Artificial Systems\" MIT press, 1992.\n[12] S. Forrest and T. Jones, \"Modeling Complex Adaptive Systems with Echo\", In Complex Systems:\nMechanisms of Adaptation, (Ed. R.J. Stonier and X.H. Yu), IOS press pp. 3-21, 1994.\n[13] R. Burkhart, \"The Swarm Multi-Agent Simulation System\", OOPSLA '94 Workshop on \"The Object\nEngine\", 7 September 1994.\n[14] G. Booth, \"Gecko: A Continuous 2D World for Ecological Modeling\", Artificial Life, 3, pp. 147-163,\nSummer 1997.\n[15] D.H. Ackley and M.L. Littman, \"Interactions between learning and evolution\". pp. 487-507 in\nArtificial Life II (ed C.G. Langton, C. Taylor, J.D.Farmer and S. Rasmussen), Adison Wesley, 1993.\n[16] I. Harvey, \"The Microbial Genetic Algorithm\", unbublished work, 1996, available at\nftp:\/\/ftp.cogs.susx.ac.uk\/pub\/users\/inmanh\/Microbe.ps.gz\n[17] S. Sonea and M. Panisset, \"A new bacteriology\" Jones and Bartlett, 1983.\n[18] D.E. Caldwell, G.M. Wolfaardt, D.R. Korber and J.R. Lawrence, \"Do Bacterial Communities\nTranscend Darwinism?\" Advances in Microbial Ecology, Vol 15, p.105-191, 1997.\n[19] N.E. Nawa, T. Furuhashi, T. Hashiyama and Y. Uchikawa, \"A Study on the Relevant Fuzzy Rules\nUsing Pseudo-Bacterial Genetic Algorithm\" Proc IEEE Int Conf. on evolutionary computation 1997.\n[20] I.W. Marshall et. al., \"Active management of multiservice networks\", Proc. IEEE NOMS2000 pp981-3\n[21] I.W. Marshall et. al. \"Application Layer Programmable Internetwork Environment\", British Telecom.\nTechnol. J., 17, 2, pp 82-94, April 1999.\n[22] D.G. Waddington and D. Hutchison, \"Resource Partitioning in General Purpose Operating Systems,\nExperimental Results in Windows NT\", Operating Systems Review, 33, 4, 52-74, Oct 1999.\n[23] D. Goldberg, \"Genetic Algorithms in Search, Optimization and Machine Learning\", Addison-Wesley,\n1983.\n[24] D. Whitely, \"The GENITOR algorithm and selection pressure: Why rank-based allocation of\nreproductive trials is best\", In Proc. Third International Conference on Genetic Algorithms (ed. J.D.\nSchaffer), pp.116-121, Morgan Kaufman, 1989.\n[25] Hutchison CA, Peterson SN, Gill SR, Cline RT, White O, Fraser CM, Smith HO, Venter JC, \" Global\ntransposon mutagenesis and a minimal Mycoplasma genome\", Science, 286, pp2165-9, Dec 10 1999\n[26] H.Ochman, J.G.Lawrence and E.A.Groisman, \" Lateral gene transfer and the nature of bacterial\ninnovation\", Nature, 405, pp299-305, May 18 2000\n[27] C.M. Roadknight, G.R. Balls, D. Palmer-Brown and G.E. Mills, \"Modelling of complex\nenvironmental data\", IEEE Transactions on Neural Networks, 8, 4, pp 852-862, 1997.\n[28] R.E. Lenski and M. Travisano, \"Dynamics of Adaptation and Diversification\", Proc. Nat Acad. Sci.\n91, pp 6808-6814, 1994.\n[29] J.U. Kreft, G. Booth, and J.W.T. Wimpenny, \"BacSim, a simulator for individual-based modelling of\nbacterial colony growth\", Microbiology, 144, pp. 3275-3287, 1997.\n[30] R. Dawkins, \"The Selfish Gene\", Oxford University Press, 1976.\n[31] L.Margulis and L.Olendzenski, \"Environmental evolution\", MIT Press 1992\n[32] S. Kauffman, \"The origins of order\", Oxford University Press 1993\n"}