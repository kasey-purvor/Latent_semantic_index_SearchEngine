{"doi":"10.1007\/978-3-540-25931-2_12","coreId":"8524","oai":"oai:eprints.brighton.ac.uk:2864","identifiers":["oai:eprints.brighton.ac.uk:2864","10.1007\/978-3-540-25931-2_12"],"title":"What can spider diagrams say?","authors":["Stapleton, Gem","Howse, John","Taylor, John","Thompson, Simon"],"enrichments":{"references":[{"id":42750479,"title":"A case study of the design and implementation of heterogeneous reasoning systems.","authors":[],"date":"2002","doi":"10.1007\/978-94-010-0550-0_1","raw":"N. Swoboda and G. Allwein. A case study of the design and implementation of heterogeneous reasoning systems. In Logical and Computational Aspects of ModelBased Reasoning. Kluwer Academic, 2002.","cites":null},{"id":42750478,"title":"A constraint diagram reasoning system.","authors":[],"date":"2003","doi":null,"raw":"G. Stapleton, J. Howse, and J. Taylor. A constraint diagram reasoning system. In Proceedings of International Conference on Visual Languages and Computing, pages 263\u2013270. Knowledge Systems Institute, 2003.","cites":null},{"id":42750464,"title":"A reading algorithm for constraint diagrams.","authors":[],"date":"2003","doi":"10.1109\/hcc.2003.1260220","raw":"A. Fish, J. Flower, and J. Howse. A reading algorithm for constraint diagrams. In Proceedings of IEEE Symposium on Visual Languages and Formal Methods, pages 161\u2013168. IEEE, 2003.","cites":null},{"id":42750472,"title":"Constraint diagrams: Visualising invariants in object oriented models.","authors":[],"date":"1997","doi":"10.1145\/263700.263756","raw":"S. Kent. Constraint diagrams: Visualising invariants in object oriented models. In Proceedings of OOPSLA97, ACM SIGPLAN Notices, 1997.","cites":null},{"id":42750463,"title":"Lettres a une princesse d\u2019allemagne,","authors":[],"date":null,"doi":"10.5962\/bhl.title.16687","raw":"L. Euler. Lettres a une princesse d\u2019allemagne, 1761. vol 2, Letters No. 102-108.","cites":null},{"id":42750466,"title":"On diagram tokens and types.","authors":[],"date":"2002","doi":"10.1007\/3-540-46037-3_18","raw":"J. Howse, F. Molina, S-J. Shin, and J. Taylor. On diagram tokens and types. In Proceedings of Diagrams 2002, LNCS, pages 76\u201390. Springer-Verlag, April 2002.","cites":null},{"id":42750485,"title":"On the diagrammatic and mechanical representation of propositions and reasonings. The London, Edinburugh and Dublin Philosophical Magazine and","authors":[],"date":null,"doi":"10.1080\/14786448008626877","raw":"J. Venn. On the diagrammatic and mechanical representation of propositions and reasonings. The London, Edinburugh and Dublin Philosophical Magazine and Journal of Science, 9:1\u201318, 1880.","cites":null},{"id":42750474,"title":"Reasoning with extended Venn-Peirce diagrammatic systems.","authors":[],"date":"2001","doi":null,"raw":"F. Molina. Reasoning with extended Venn-Peirce diagrammatic systems. PhD thesis, University of Brighton, 2001.","cites":null},{"id":42750468,"title":"Spider diagrams: A diagrammatic reasoning system.","authors":[],"date":"2001","doi":"10.1006\/jvlc.2000.0210","raw":"J. Howse, F. Molina, J. Taylor, S. Kent, and J. Gil. Spider diagrams: A diagrammatic reasoning system. Journal of Visual Languages and Computing, 12(3):299\u2013 324, June 2001.","cites":null},{"id":42750470,"title":"Spider diagrams. In available from www.cmis.brighton.ac.uk\/research\/vmgSDRules.,","authors":[],"date":"2003","doi":null,"raw":"J. Howse, G. Stapleton, and J. Taylor. Spider diagrams. In available from www.cmis.brighton.ac.uk\/research\/vmgSDRules., 2003.","cites":null},{"id":42750447,"title":"The Decision Problem. Solvable Classes of Quantificational Formulas.","authors":[],"date":"1979","doi":"10.1145\/1008902.1008905","raw":"B. Dreben and D. Goldforb. The Decision Problem. Solvable Classes of Quantificational Formulas. Addison Wesley Publishing Company Inc., 1979.","cites":null},{"id":42750477,"title":"The Logical Status of Diagrams.","authors":[],"date":"1994","doi":"10.1017\/cbo9780511574696","raw":"S.-J. Shin. The Logical Status of Diagrams. Cambridge University Press, 1994.","cites":null},{"id":42750480,"title":"Using DAG transformations to verify Euler\/Venn homogeneous and Euler\/Venn FOL heterogeneous rules of interence.","authors":[],"date":"2002","doi":"10.1016\/s1571-0661(04)80613-3","raw":"N. Swoboda and G. Allwein. Using DAG transformations to verify Euler\/Venn homogeneous and Euler\/Venn FOL heterogeneous rules of interence. In International Workshop on Graph Transformation and Visual Modeling Techniques, pages 84\u201398, Barcelona, October 2002.","cites":null}],"documentType":{"type":1}},"contributors":["Blackwell, A.","Marriott, K.","Shimojima, A."],"datePublished":"2004-01-01","abstract":"Spider diagrams are a visual notation for expressing logical statements. In this paper we identify a well known fragment of first order predicate logic, that we call ESD, equivalent in expressive power to the spider diagram language. The language ESD is monadic and includes equality but has no constants or function symbols. To show this equivalence, in one direction, for each diagram we construct a sentence in ESD that expresses the same information. For the more challenging converse we show there exists a finite set of models for a sentence S that can be used to classify all the models for S. Using these classifying models we show that there is a diagram expressing the same information as S","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Springer","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.brighton.ac.uk:2864<\/identifier><datestamp>\n      2015-04-20T15:45:10Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D47303030:47343030<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.brighton.ac.uk\/2864\/<\/dc:relation><dc:title>\n        What can spider diagrams say?<\/dc:title><dc:creator>\n        Stapleton, Gem<\/dc:creator><dc:creator>\n        Howse, John<\/dc:creator><dc:creator>\n        Taylor, John<\/dc:creator><dc:creator>\n        Thompson, Simon<\/dc:creator><dc:subject>\n        G400 Computing<\/dc:subject><dc:description>\n        Spider diagrams are a visual notation for expressing logical statements. In this paper we identify a well known fragment of first order predicate logic, that we call ESD, equivalent in expressive power to the spider diagram language. The language ESD is monadic and includes equality but has no constants or function symbols. To show this equivalence, in one direction, for each diagram we construct a sentence in ESD that expresses the same information. For the more challenging converse we show there exists a finite set of models for a sentence S that can be used to classify all the models for S. Using these classifying models we show that there is a diagram expressing the same information as S.<\/dc:description><dc:publisher>\n        Springer<\/dc:publisher><dc:contributor>\n        Blackwell, A.<\/dc:contributor><dc:contributor>\n        Marriott, K.<\/dc:contributor><dc:contributor>\n        Shimojima, A.<\/dc:contributor><dc:date>\n        2004-01-01<\/dc:date><dc:type>\n        Contribution to conference proceedings in the public domain<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n          Stapleton, Gem, Howse, John, Taylor, John and Thompson, Simon  (2004) What can spider diagrams say?  In: Proceedings of the 3rd International Conference, Diagrams 2004, Cambridge, UK, 22-24 March, 2004.     <\/dc:identifier><dc:relation>\n        http:\/\/link.springer.com\/chapter\/10.1007%2F978-3-540-25931-2_12<\/dc:relation><dc:relation>\n        10.1007\/978-3-540-25931-2_12<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.brighton.ac.uk\/2864\/","http:\/\/link.springer.com\/chapter\/10.1007%2F978-3-540-25931-2_12","10.1007\/978-3-540-25931-2_12"],"year":2004,"topics":["G400 Computing"],"subject":["Contribution to conference proceedings in the public domain","PeerReviewed"],"fullText":"What Can Spider Diagrams Say?\nGem Stapleton1, John Howse1, John Taylor1, and Simon Thompson2\n1 Visual Modelling Group,\nUniversity of Brighton, UK\nwww.cmis.brighton.ac.uk\/research\/vmg\n{g.e.stapleton, john.howse, john.taylor}@brighton.ac.uk\n2 University of Kent,\nCanterbury, UK\ns.j.thompson@kent.ac.uk\nAbstract. Spider diagrams are a visual notation for expressing logical\nstatements. In this paper we identify a well known fragment of first order\npredicate logic, that we call ESD, equivalent in expressive power to the\nspider diagram language. The language ESD is monadic and includes\nequality but has no constants or function symbols. To show this equiva-\nlence, in one direction, for each diagram we construct a sentence in ESD\nthat expresses the same information. For the more challenging converse\nwe show there exists a finite set of models for a sentence S that can be\nused to classify all the models for S. Using these classifying models we\nshow that there is a diagram expressing the same information as S.\n1 Introduction\nEuler diagrams [2] exploit topological properties of enclosure, exclusion and in-\ntersection to represent subset, disjoint sets and set intersection respectively. Di-\nagram d1 in figure 1 is an Euler diagram and expresses that nothing is both a\ncar and a van. Venn diagrams [13] are similar to Euler diagrams. In Venn di-\nagrams, all possible intersections between contours must occur and shading is\nused to represent the empty set. Diagram d2 in figure 1 is a Venn diagram and\nalso expresses that no element is both a car and a van.\nMany visual languages have emerged that extend Euler and Venn diagrams.\nOne such language is Venn-II introduced by Shin [9]. Diagram d3 in figure 1\nis a Venn-II diagram. In addition to what is expressed by the underlying Venn\ndiagram, it also expresses, using an x-sequence, the set Cars\u222aV ans is not empty.\nVenn-II diagrams can express whether a set is empty or not empty. Shin [9] shows\nthat Venn-II is equivalent in expressive power to a first order language that she\ncalls L0. The language L0 is a pure monadic language (i.e. all the predicate\nsymbols are \u2018one place\u2019) that does not include constants or function symbols.\nAnother visual language, called Euler\/Venn, based on Euler diagrams is dis-\ncussed in [12]. These diagrams are similar to Venn-II diagrams but, instead\nof x-sequences, constant sequences are used. Diagram d4 in figure 2 is an Eu-\nler\/Venn diagram and expresses that no element is both a car and a van and\n2 Gem Stapleton et al.\nC a r s V a n s\nd 1\nC a r s V a n s\nd 2\nC a r s V a n s\nd 3\nFig. 1. An Euler diagram, Venn diagram and a Venn-II diagram.\nC a r s V a n s\nd 4\nf o r d f o r d\nC a r s V a n s\nd 6\nC a r s V a n s\nd 5\nFig. 2. An Euler\/Venn diagram and two spider diagrams.\nthat there is something called \u2018ford\u2019 that is either a car or a van. In [12] Swoboda\nand Allwein give an algorithm that determines whether a given monadic first\norder formula is observable from a given diagram. If the formula is observable\nfrom the diagram then it may contain weaker information than the diagram (i.e.\nthe formula is a consequence of the information contained in the diagram).\nLike Euler\/Venn diagrams, spider diagrams are based on Euler diagrams.\nRather than allowing the use of constant sequences3 as in Euler\/Venn diagrams,\nspiders denote the existence of elements. The spider diagram d5 in figure 2\nexpresses that no element is both a car and a van and there are at least two\nelements, one is a car and the other is a car or a van. The spider diagram\nd6 expresses that there are exactly three vans that are not cars. By allowing\nlower and upper bounds (by the use of shading and spiders) to be placed on the\ncardinality of sets, spider diagrams increase expressiveness over Venn-II.\nWe show, but do not include any proofs, that the spider diagram language\nis equivalent in expressive power to a fragment of first order logic that we call\nESD (for the Expressiveness of Spider Diagrams). The language ESD extends\nL0 by adding equality, so ESD is monadic predicate logic with equality.\nIn section 5, we address the task of mapping each diagram to a sentence\nexpressing the same information, showing that spider diagrams are at most as\nexpressive as ESD. In section 6 we show that ESD is at most as expressive as\nspider diagrams. We will outline Shin\u2019s algorithmic approach to show L0 (in\nwhich there is no equality) is not more expressive than Venn-II. It is simple to\nadapt this algorithm to find a spider diagram that expresses the same informa-\n3 In some spider diagram languages, given spiders [5] represent constants but for\nour purposes spiders represent existential quantification.\nLecture Notes in Computer Science 3\ntion as a sentence in ESD that does not involve equality. However, for sentences\nin ESD that do involve equality, the algorithm does not readily generalize.\nThus, the task of showing that there exists a diagram expressing the same\ninformation as a sentence involving equality is challenging and we take a different\napproach. To motivate our approach we consider relationships between models\nfor diagrams. We consider the models for a sentence and show that there is a\nfinite set of models that can be used to classify all the models for the sentence.\nThese classifying models can then be used to construct a diagram that expresses\nthe same information as the sentence.\n2 Spider Diagrams\nIn diagrammatic systems, there are two levels of syntax: concrete (or token)\nsyntax and abstract (or type) syntax [4]. Concrete syntax captures the physical\nrepresentation of a diagram. Abstract syntax \u2018forgets\u2019 semantically unimportant\nspatial relations between syntactic elements in a concrete diagram. We include\nthe concrete syntax to aid intuition but we work at the abstract level.\n2.1 Informal Concrete Syntax\nA contour is a simple closed plane curve. Each contour is labelled. A bound-\nary rectangle properly contains all contours. The boundary rectangle is not a\ncontour and is not labelled. A basic region is the bounded area of the plane\nenclosed by a contour or the boundary rectangle. A region is defined recur-\nsively as follows: any basic region is a region; if r1 and r2 are regions then the\nunion, intersection and difference of r1 and r2 are regions provided these are\nnon-empty. A zone is a region having no other region contained within it. A\nregion is shaded if each of its component zones is shaded. A spider is a tree\nwith nodes (called feet) placed in different zones. The connecting edges (called\nlegs) are straight lines. A spider touches a zone if one of its feet appears in that\nregion. A spider is said to inhabit the region which is the union of the zones it\ntouches. This union is called the habitat of the spider.\nA concrete unitary (spider) diagram is a single boundary rectangle to-\ngether with a finite collection of contours, shading and spiders. No two contours\nin the same unitary diagram can have the same label.\nExample 1. Spider diagram d6 in figure 2 has two contours and four zones. The\nshaded zone contains three spiders, each with one foot.\n2.2 Formal Abstract Syntax\nWe can think of the contour labels used in our diagrams as being chosen from a\ncountably infinite set, L.\nDefinition 1. An abstract unitary (spider) diagram, d, (with labels in L)\nis a tuple \u3008L,Z,Z\u2217, SI\u3009 whose components are defined as follows.\n4 Gem Stapleton et al.\n1. L = L(d) \u2282 L is a finite set of contour labels.\n2. Z = Z(d) \u2286 {(a, L\u2212 a) : a \u2286 L} is a set of zones such that\n(i) for each label l \u2208 L there is a zone (a, L\u2212 a) \u2208 Z(d) such that l \u2208 a and\n(ii) the zone (\u2205, L) is in Z(d).\n3. Z\u2217 = Z\u2217(d) \u2286 Z is a set of shaded zones.\n4. SI = SI(d) \u2282 Z+ \u00d7 (PZ \u2212 {\u2205}) is a finite set of spider identifiers such\nthat\n\u2200(n1, r1), (n2, r2) \u2208 SI \u2022 r1 = r2 \u21d2 n1 = n2\nIf (n, r) \u2208 SI we say there are n spiders with habitat r.\nWhen we reason with a spider diagram, the contour set may change, which is\nwhy we define an abstract zone to be a pair. Zone (a, b) is included in a but\nnot included in b. Every contour in a concrete diagram contains at least one\nzone, captured by condition 2 (i). In any concrete diagram, the zone inside the\nboundary rectangle but outside all the contours is present, captured by condition\n2 (ii). In order to give a unique abstraction from a concrete diagram we use spider\nidentifiers (essentially a bag of spiders) rather than an arbitrary set of spiders.\nA B\nd 2\nA B\nd 1\nFig. 3.\nExample 2. Diagram d1 in figure 3 has abstract description\n1. contour labels {A,B},\n2. zones {(\u2205, {A,B}), ({A}, {B}), ({B}, {A})({A,B}, \u2205)},\n3. shaded zones {({B}, {A})} and\n4. spider identifiers {(1, {({B}, {A})}), (1, {({A}, {B}), ({B}, {A})})}.\nWe define, for unitary diagram d, the Venn zone set to be V Z(d) = {(a, b) :\na \u2286 L(d) \u2227 b = L(d)\u2212 a}. If Z(d) = V Z(d) then d is said to be in Venn form.\nIf z \u2208 MZ(d) = V Z(d)\u2212 Z(d) then z is missing from d. Spiders represent the\nexistence of elements and regions (an abstract region is a set of zones) represent\nsets \u2013 thus we need to know how many elements we have represented in each\nregion. The number of spiders inhabiting region r1 in d is denoted by S(r1, d).\nThe number of spiders touching r1 in d is denoted by T (r1, d), for more details\nsee [6]. In d1, figure 3, ({B}, {A}) is inhabited by one spider and touched by two\nspiders.\nUnitary diagrams form the building blocks of compound diagrams. If D1 and\nD2 are spider diagrams then so are (D1tD2) (\u201cD1 or D2\u201d) and (D1uD2) (\u201cD1\nLecture Notes in Computer Science 5\nand D2\u201d). Some diagrams are not satisfiable and we introduce the symbol \u22a5,\ndefined to be a unitary diagram interpreted as false. Our convention will be to\ndenote unitary diagrams by d and arbitrary diagrams by D.\n2.3 Semantics\nRegions in spider diagrams represent sets. We can express lower and, in the\ncase of shaded regions, upper bounds on the cardinalities of the sets we are\nrepresenting as follows. If region r is inhabited by n spiders in diagram d then\nd expresses that the set represented by r contains at least n elements. If r is\nshaded and touched by m spiders in d then d expresses that the set represented\nby r contains at most m elements. Thus, if d has a shaded, untouched region, r,\nthen d expresses that r represents the empty set. Missing zones also represent\nthe empty set. To formalize the semantics we shall map contour labels, zones\nand regions to subsets of some universal set. We assume that no contour label\nis a zone or region and that no zone is a region (regions are sets of zones). We\ndefine Z and R to be the sets of all abstract zones and regions respectively.\nDefinition 2. An interpretation of contour labels, zones and regions, or\nsimply an interpretation, is a pair (U, \u03a8) where U is a set and \u03a8 : L\u222aZ\u222aR \u2192\nPU is a function mapping contour labels, zones and regions to subsets of U such\nthat the images of the zones and regions are completely determined by the images\nof the contour labels as follows:\n1. for each zone (a, b), \u03a8(a, b) =\n\u22c2\nl\u2208a\n\u03a8(l) \u2229\n\u22c2\nl\u2208b\n\u03a8(l) where \u03a8(l) = U \u2212 \u03a8(l) and\nwe define\n\u22c2\nl\u2208\u2205\n\u03a8(l) = U =\n\u22c2\nl\u2208\u2205\n\u03a8(l) and\n2. for each region r, \u03a8(r) =\n\u22c3\nz\u2208r\n\u03a8(z) and we define \u03a8(\u2205) =\n\u22c3\nz\u2208\u2205\n\u03a8(z) = \u2205.\nWe introduce a semantics predicate which identifies whether a diagram expresses\na true statement, with respect to an interpretation.\nDefinition 3. Let D be a diagram and let m = (U, \u03a8) be an interpretation. If\nD =\u22a5 then the semantics predicate, PD(m) is \u22a5. If D (6=\u22a5) is a unitary\ndiagram then the semantics predicate, PD(m), of D is the conjunction of the\nfollowing three conditions.\n(i) Distinct Spiders Condition. For each region r in PZ(d)\u2212 {\u2205}, |\u03a8(r)| \u2265\nS(r, d).\n(ii) Shading Condition. For each shaded region r in PZ\u2217(d) \u2212 {\u2205}, |\u03a8(r)| \u2264\nT (r, d)\n(iii) Missing Zones Condition Any zone, z, in MZ(d) satisfies \u03a8(z) = \u2205.\nIf D = D1 t D2 then the semantics predicate, PD(m), of D is PD(m) =\nPD1(m) \u2228 PD2(m). If D = D1 uD2 then the semantics predicate, PD(m), of\nD is PD(m) = PD1(m) \u2227 PD2(m). We say m satisfies D, denoted m |= D, if\nand only if PD(m) is true. If m |= D we say m is a model for D.\nExample 3. Interpretation m = ({1, 2}, \u03a8) partially defined by \u03a8(A) = {1} and\n\u03a8(B) = {2} is a model for d1 in figure 3 but not for d2.\n6 Gem Stapleton et al.\n3 The Language ESD\nSpider diagrams can express statements of the form \u2018there are at least n elements\nin A\u2019 and \u2018there are at most m elements in A\u2019. A first order language equivalent\nin expressive power to the spider diagram language will involve equality, to allow\nus to express the distinctness of elements, and monadic predicates, to allow us to\nexpress x \u2208 A. In order to define such a language we require a countably infinite\nset of monadic predicate symbols, P, from which all monadic predicate symbols\nwill be drawn.\nDefinition 4. The first order language ESD (for Expressiveness of Spider Di-\nagrams) consists of the following.\n1. Variables, x1, x2, ... of which there are countably many.\n2. Atomic formulae,\n(a) if xi and xj are variables then (xi = xj) is an atomic formula,\n(b) if Pi \u2208 P and xj is a variable then Pi(xj) is an atomic formula.\n3. Formulae, which are defined inductively.\n(a) Atomic formulae are formulae.\n(b) \u22a5 and > are formulae.\n(c) If p and q are formulae so are (p \u2227 q), (p \u2228 q) and \u00acp.\n(d) If p is a formula and x is a variable then (\u2200x p) and (\u2203x p) are formulae.\nWe define VAR, F and S to be the sets of variables, formulae and sentences\n(formulae with no free variables) of the language ESD respectively.\nWe shall assume the standard first order predicate logic semantic interpretation\nof formulae in this language, with the exception of allowing a structure to have\nan empty domain.\n4 Structures and Interpretations\nWe wish to identify when a diagram and a sentence express the same information.\nTo aid us formalize this notion, we map interpretations to structures in such a\nway that information is preserved. Throughout we shall assume, without loss of\ngenerality, that L = {L1, L2, ...} and P = {P1, P2, ...}. Define U to be the class\nof all sets. The sets in U form the domains of structures in the language ESD.\nDefinition 5. Define INT to be the class of all interpretations for spider dia-\ngrams, that is\nINT = {(U, \u03a8) : U \u2208 U \u2227 \u03a8 : L \u222a Z \u222aR \u2192 PU}.\nDefine also ST R to be the class of structures for the language ESD, that is\nST R = {m : U \u2208 U \u2227m = \u3008U,=m, Pm1 , P\nm\n2 , ...\u3009},\nwhere P mi is the interpretation of Pi in the structure m (that is, P\nm\ni \u2286 U) and\nwe always interpret = as the diagonal subset of U \u00d7 U , denoted diag(U \u00d7 U).\nLecture Notes in Computer Science 7\nWe define a bijection, h : INT \u2192 ST R by\nh(U, \u03a8) = \u3008U, diag(U \u00d7 U), \u03a8(L1), \u03a8(L2), ...\u3009.\nDefinition 6. Let D be a diagram and S be a sentence. We say D and S are\nexpressively equivalent if and only if h provides a bijective correspondence\nbetween their models, that is\n{h(I) : I \u2208 INT \u2227 I |= D} = {m \u2208 ST R : m |= S}.\n5 Mapping from Diagrams to Sentences\nTo show that the spider diagram language is not more expressive than ESD,\nwe will map diagrams to expressively equivalent sentences. An \u03b1-diagram is a\nspider diagram in which all spiders inhabit exactly one zone [8]. Such diagrams\nhave nice properties, for example, unitary \u03b1-diagrams only contain conjunctive\ninformation (spider legs represent disjunctive information).\nTheorem 1. Let D1 be a spider diagram. There exists a spider diagram, D2,\nthat is a disjunction of unitary \u03b1-diagrams and semantically equivalent to D1\n(i.e. D1 and D2 have the same models).\nWe will map each unitary \u03b1-diagram to an expressively equivalent sentence in\nESD. This enables us to map each disjunction of unitary \u03b1-diagrams to an\nexpressively equivalent sentence and, by theorem 1, this is sufficient to show that\nthe spider diagram language is not more expressive than the language ESD.\nL 1 L 2\nd 1\nL 1\nL 3\nd 2\nFig. 4. Two \u03b1-diagrams: from diagrams to sentences.\nExample 4. In diagram d1, figure 4, there are three spiders, one outside both\nL1 and L2, the other two inside L2 and outside L1. Diagram d1 is expressively\nequivalent to the sentence\n(\u2203x1 \u00acP1(x1)\u2227\u00acP2(x1))\u2227(\u2203x1\u2203x2 P2(x1)\u2227P2(x2)\u2227\u00acP1(x1)\u2227\u00acP1(x2)\u2227x1 6= x2).\nIn diagram d2, no elements can be in L3 and not in L1, so d2 is expressively\nequivalent to sentence\n\u2200x1 \u00ac(P3(x1) \u2227 \u00acP1(x1)).\nThe disjunction of these sentences is expressively equivalent to d1 t d2. For\ngeneral d1 and d2, the disjunction of their expressively equivalent sentences is\nexpressively equivalent to d1 t d2.\n8 Gem Stapleton et al.\nTo construct sentences for diagrams, it is useful to map zones to formulae.\nDefinition 7. Define function ZOF : Z\u00d7VAR \u2192 F (ZOF for \u2018zone formula\u2019)\nby, for each (a, b) \u2208 Z \u2212 {(\u2205, \u2205)} and variable xj,\nZOF((a, b), xj) =\n\u2227\nLk\u2208a\nPk(xj) \u2227\n\u2227\nLk\u2208b\n\u00acPk(xj)\nand ZOF((\u2205, \u2205), xj) = >.\nWe use the function ZOF to construct a sentence of ESD for each zone in a\nunitary \u03b1-diagram. We shall take these zone sentences in conjunction to give a\nsentence for the diagram. We define D\u03b10 to be the class of all unitary \u03b1-diagrams\nand D\u03b1 to be the class of all disjunctions of unitary \u03b1-diagrams.\nDefinition 8. The partial function ZS : Z \u00d7D\u03b10 \u2192 S (ZS for \u2018zone sentence\u2019)\nis specified for unitary \u03b1-diagram d and zone z in V Z(d) as follows.\n1. If z is not shaded and not inhabited by any spiders then ZS(z, d) = >.\n2. If z is not shaded and inhabited by n > 0 spiders then\nZS(z, d) = \u2203x1...\u2203xn(\n\u2227\n1\u2264j<k\u2264n\n\u00ac(xk = xj) \u2227\n\u2227\n1\u2264k\u2264n\nZOF(z, xk)).\n3. If z is shaded or missing and not inhabited by any spiders then\nZS(z, d) = \u2200x1 \u00acZOF(z, x1).\n4. If z is shaded and inhabited by n > 0 spiders then\nZS(z, d) = \u2203x1...\u2203xn(\n\u2227\n1\u2264j<k\u2264n\n\u00ac(xk = xj) \u2227\n\u2227\n1\u2264k\u2264n\nZOF(z, xk) \u2227\n\u2200xn+1 (\n\u2228\n1\u2264j\u2264n\nxn+1 = xj \u2228 \u00acZOF(z, xn+1))).\nDefinition 9. Define DS : D\u03b1 \u2192 S (DS for \u2018diagram sentence\u2019) as follows. Let\nD be a disjunction of unitary \u03b1-diagrams.\n1. If D =\u22a5 then DS(D) =\u22a5.\n2. If D (6=\u22a5) is a unitary \u03b1-diagram then DS(D) =\n\u2227\nz\u2208V Z(D)\n(ZS(z,D)).\n3. If D = D1 tD2 then DS(D) = (DS(D1) \u2228 DS(D2)).\nTheorem 2. Let D be a disjunction of unitary \u03b1-diagrams. Then D is expres-\nsively equivalent to DS(D).\nHence the language of spider diagrams is at most as expressive as ESD.\n6 Mapping from Sentences to Diagrams\nWe now consider the more challenging task of constructing a diagram for a\nsentence. Since every formula is semantically equivalent to a sentence obtained\nby prefixing the formula with \u2200xi for each free variable xi (i.e. constructing its\nLecture Notes in Computer Science 9\nuniversal closure) we only need to identify a diagram expressively equivalent to\neach sentence.\nShin\u2019s approach for Venn-II and her language L0 (ESD without equality) is\nalgorithmic [9], which we now outline. To find a diagram expressively equiva-\nlent to a sentence she first converts the sentence into prenex normal form, say\nQ1x1...QnxnG where G is quantifier free. If Qn is universal then G is trans-\nformed into conjunctive normal form. If Qn is existential then G is transformed\ninto disjunctive normal form. Quantifier Qn is then distributed through G and\nas many formulae are removed from its scope as possible. All n quantifiers are\ndistributed through in this way. A diagram can then be drawn for each of the\nsimple parts of the resulting formula. To adapt this algorithm to sentences in\nESD that do not involve equality is straightforward.\nThis algorithm does not readily generalize to arbitrary sentences in ESD\nbecause = is a dyadic predicate symbol which means nesting of quantifiers cannot\nnecessarily be removed. Thus we take a different approach, modelled on what\nappears in [1], pages 209-210. To establish the existence of a diagram expressively\nequivalent to a sentence we consider models for that sentence. To illustrate the\napproach we consider relationships between models for \u03b1-diagrams. We begin be\nconsidering a particular example.\nL 1 L 2\nd\nFig. 5. Extending models for a diagram.\nExample 5. The diagram in figure 5 has a minimal model (in the sense that\nthe cardinality of the universal set is minimal) U = {1, 2, 3}, \u03a8(L1) = {1},\n\u03a8(L2) = {2, 3} and, for i 6= 1, 2, \u03a8(Li) = \u2205. This model can be used to generate\nall the models for the diagram. To generate further models, we can add elements\nto U and we may add these elements to images of contour labels if we so choose.\nWe can also rename the elements in U . As an example, the element 4 can be\nadded to U and we redefine \u03a8(L2) = {2, 3, 4} to give another model for d.\nNo matter what changes we make to the model, we must ensure that the zone\n({L1}, {L2}) always represents a set containing exactly one element or we will\ncreate an interpretation that does not satisfy the diagram.\nIf a sentence, S, is expressively equivalent to a unitary \u03b1-diagram, d, then we\nwill be able to take a minimal model for S and use this model to generate all\nother models for S in the same manner as above. Given a structure, we will\ndefine a predicate intersection set. This set is analogous to the image of a zone\nin an interpretation.\n10 Gem Stapleton et al.\nDefinition 10. Let m be a structure and X and Y be finite subsets of P (the\ncountably infinite set of predicate symbols). Define the predicate intersection\nset in m with respect to X and Y , denoted PI(m,X, Y ), to be\nPI(m,X, Y ) =\n\u22c2\nPi\u2208X\nPmi \u2229\n\u22c2\nPi\u2208Y\nPmi .\nWe define\n\u22c2\nPi\u2208\u2205\nPmi =\n\u22c2\nPi\u2208\u2205\nPmi = U where U is the domain of m.\nIn the context of ESD, we will identify all the structures that can be generated\nfrom a given structure, m, by adding or renaming elements subject to cardinality\nrestrictions. We will call this class of structures generated by m the cone of m.\nFor each sentence, S, we will show that there is a finite set of models, the union\nof whose cones give rise to only and all the models for S. Central to our approach\nis the notion of similar structures with respect to S. To define similar structures\nwe use the maximum number of nested quantifiers in S.\nExample 6. Let S be the sentence \u2200x1 P1(x1) \u2227 \u2200x1 \u2203x2 x1 6= x2. The formula\n\u2200x1 P1(x1) has one nested quantifier and \u2200x1 \u2203x2 x1 6= x2 has two nested quan-\ntifiers. Therefore the maximum number of nested quantifiers in S is two. Now, n\nnested quantifiers introduce n names, and so it is only possible to talk about (at\nmost) n distinct individuals within the body of the formula. This has the effect\nof limiting the complexity of what can be said by such a formula. In the par-\nticular case here, this observation has the effect that if a model for S has more\nthan two elements in certain predicate intersection sets then S cannot place an\nupper bound on the cardinalities of these predicate intersection sets.\nThe interpretation of P1 has to have all the elements, of which there must be\nat least two. Also S constrains the predicate intersection set PI(m, \u2205, {P1}) to\nhave cardinality zero. As an example, we consider two models, m1 and m2 with\ndomains U1 = {1, 2, 3, 4} and U2 = {1, 2, 5, 6, 7} respectively that are partially\ndefined by P m11 = {1, 2, 3, 4} and P\nm2\n1 = {1, 2, 5, 6, 7}. Now\n|PI(m1, \u2205, {P1})| = |\u2205| = 0 < 2 and |PI(m2, \u2205, {P1})| = |\u2205| = 0 < 2.\nAlso\n|PI(m1, {P1}, \u2205)| = |U1| \u2265 2 and |PI(m2, {P1}, \u2205)| = |U2| \u2265 2,\nso S cannot place an upper bound on |PI(m, {P1}, \u2205)|. We can think of m1 and\nm2 extending m3 with domain U3 = {1, 2} where P\nm3\n1 = {1, 2} and Pj = \u2205, for\nall j 6= 1.\nDefinition 11. Let S be a sentence and define q(S) to be the maximum number\nof nested quantifiers in S and P (S) to be the set of monadic predicate symbols\nin S. Structures m1 and m2 are called similar with respect to S if and only\nif for each subset X of P (S), either\n1. PI(m1, X, P (S)\u2212X) = PI(m2, X, P (S)\u2212X) or\nLecture Notes in Computer Science 11\n2. |PI(m1, X, P (S)\u2212X) \u2229 PI(m2, X, P (S)\u2212X)| \u2265 q(S)\nand for all subsets Y of P (S) such that X 6= Y , PI(m1, X, P (S) \u2212 X) \u2229\nPI(m2, Y, P (S)\u2212 Y ) = \u2205. Adapted from [1].\nIn the previous example, m1, m2 and m3 are all similar with respect to S.\nLemma 1. Let m1 and m2 be similar structures with respect to sentence S.\nThen m1 is a model for S if and only if m2 is a model for S, [1].\nLemma 1 essentially tells us that any model for a sentence, S, with cardinality\ngreater than 2|P (S)|q(s) can be restricted to give another model for S with car-\ndinality at most 2|P (S)|q(s). If the cardinality of model m for sentence S is at\nmost 2|P (S)|q(s) then we say m is a small model for S. Otherwise we say m is\na large model for S.\nDefinition 12. Let S be a sentence and m1 be a small model for S. The cone\nof m1 given S, denoted cone(m1, S), is a class of structures such that m2 \u2208\ncone(m1, S) if and only if for each subset X of P (S), there exists an injective\nmap, fX : PI(m1, X, P (S)\u2212X) \u2192 PI(m2, X, P (S)\u2212X) which is bijective when\n|PI(m1, X, P (S)\u2212X)| < q(s).\nThe cone of m given S contains models for S that can be restricted to (models\nisomorphic to) m. We can think of elements of cone(m,S) as enlarging m in\ncertain \u2018directions\u2019 (adding elements to predicate intersection sets) and \u2018fixing\u2019\n(keeping predicate intersection sets the same) m in others .\nm e\nn l a r\ng i n g\n P I (\nm , {\nP 1}\n, { P 2\n} ) P ( S ) = { P 1 , P 2 }\n| P I ( m , { P 1 } , { P 2 } ) | = 2\n| P I ( m , { } , { P 1 , P 2 } ) | = 2\n| P I ( m , { P 2 } , { P 1 } ) | = 0\n| P I ( m , { P 1 , P 2 } , { } ) | = 0\nq ( S )  = 2\ne n l a r g i n g  P I ( m , { } , { P 1 , P 2 } )\nc o n e ( m , S )\nm 1\nFig. 6. Visualizing cones.\nExample 7. Let S be the sentence \u2203x1\u2203x2P1(x1) \u2228 P2(x2) and consider m =\n\u3008{1, 2, 3, 4},=m, {1, 2}, \u2205, \u2205, ...\u3009. A visual analogy of cone(m,S) can be seen in\nfigure 6. Structure m1 = \u3008{1, 2, 3, 4, 5, 6},=\nm1 , {1, 2, 5}, \u2205, \u2205, ...\u3009 can be obtained\nfrom m by enlarging PI(m, \u2205, {P1, P2}) and PI(m, {P1}, {P2}) by adding el-\nements to these sets (and the domain), but keeping PI(m, {P2}, {P1}) and\nPI(m, {P1, P2}, \u2205) fixed. Another element of cone(m,S) is the structure m2 =\n\u3008{7, 8, 9, 10},=m2 , {7, 8}, \u2205, \u2205, ...\u3009. Here, m2 renames the elements in m. The\nstructure m3 = \u3008{1, 2, 3, 4},=\nm3 , {1}, \u2205, \u2205, ...\u3009 is not in cone(m,S), since there is\nnot an injective map from PI(m, {P1}, {P2}) \u2192 PI(m3, {P1}, {P2}).\n12 Gem Stapleton et al.\nExample 8. Let S be the sentence \u2200x\u2200y x = y and consider the structure m1 =\n\u3008{1},=m1 , \u2205, \u2205, \u2205, ...\u3009 which satisfies S. We have the following cone for m1:\ncone(m1, S) = {m2 \u2208 ST R : |PI(m1, \u2205, \u2205)| = |{1}| = |PI(m2, \u2205, \u2205)|}.\nThe class cone(m1, S) contains only structures that are models for S but does\nnot contain them all, for example m3 = \u3008\u2205, \u2205, ...\u3009 satisfies S but m3 is not in\ncone(m1, S). All models for S are in the class cone(m1, S) \u222a cone(m3, S). In\nthis sense, m1 and m3 classify all the models for S. We can draw a diagram\nexpressively equivalent to S using information given by m1 and m3. This diagram\nis a disjunction of two unitary diagrams, shown in figure 7. The unitary diagram\narising from m1 has one spider, no contours and is entirely shaded. That arising\nfrom m3 has no spiders, no contours and is entirely shaded.\nd 1 d 2\nFig. 7. A diagram expressively equivalent to \u2200x\u2200y x = y.\nWe will show that, given a sentence, S, there is a finite set of small models, the\nunion of whose cones give rise to only and all the models for S. We are able to\nuse these models to identify a diagram expressively equivalent to S. In order to\nidentify such a finite set we require the notion of partial isomorphism between\nstructures.\nDefinition 13. Let m1 and m2 be structures with domains U1 and U2 respec-\ntively. Let Q be a set of monadic predicate symbols. If there exists a bijection\n\u03b3 : U1 \u2192 U2 such that\n\u2200Pi \u2208 Q\u2200x \u2208 U1 \u2022 x \u2208 P\nm1\ni \u21d4 \u03b3(x) \u2208 P\nm2\ni\nthen m1 and m2 are isomorphic restricted to Q and \u03b3 is a partial isomor-\nphism.\nIf m1 and m2 are isomorphic restricted to P (S) then m1 is a model for S if\nand only if m2 is a model for S. Also, there are finitely many small models for\nsentence S, up to isomorphism restricted to P (S).\nDefinition 14. Let S be a sentence. A set of small models, class(S), for S is\ncalled a classifying set of models for S if for each small model, m1, for S\nthere is a unique m2 in class(S) such that m1 and m2 are isomorphic, restricted\nto P (S).\nLecture Notes in Computer Science 13\nTheorem 3. Let class(S) be a classifying set of models for sentence S. Then\nclass(S) is finite and\n\u22c3\nm\u2208class(S)\ncone(m,S) contains all and only models for S.\nDefinition 15. Let m be a small model for sentence S. The unitary \u03b1-diagram,\nd, representing m, is defined as follows 4.\n1. The contour labels arise from the predicate symbols in P (S):\n{Li \u2208 L : \u2203Pi \u2208 P \u2022 Pi \u2208 P (S)}.\n2. The diagram is in Venn form:\nZ(d) = {(a, b) : a \u2286 L(d) \u2227 b = L(d)\u2212 a}.\n3. The shaded zones in d are given as follows. Let X be a subset of P (S) such\nthat |PI(m,X,P (S)\u2212X)| < q(S). The zone (a, b) in Z(d) where a = {Li :\nPi \u2208 X} is shaded.\n4. The number of spiders in each zone is the cardinality of the set |PI(m1, X,\nP (S)\u2212X)| where X gives rise to the containing set of contour labels for that\nzone. The set of spider identifiers is then given by:\nSI(d) = {(n, r) : \u2203X \u2022 X \u2286 P (S) \u2227 |PI(m,X,P (S)\u2212X)| > 0\u2227\nn = |PI(m,X,P (S)\u2212X)| \u2227 r = {(a, b) \u2208 Z(d) : a = {Li : Pi \u2208 X}}}.\nWe write REP(m1, S) = d. Let class(S) be a set of classifying models for S.\nDefine D(S) to be a disjunction of unitary diagrams, given by\nD(S) =\nm\u2208class(S)\nREP(m,S),\nunless class(S) = \u2205, in which case D(S) =\u22a5.\nExample 9. Let S be the sentence \u2203x1P1(x1) \u2228 \u2200x1P1(x1). To find a classifying\nset of models we must consider structures of all cardinalities up to 2|{P1}|\u00d7q(S) =\n21 \u00d7 1 = 2. There are six distinct structures (up to isomorphism restricted to\nP (S)) with cardinality at most 2. Four of these structures are models for S and\nare listed below.\n1. m1 = \u3008\u2205, \u2205, ...\u3009,\n2. m2 = \u3008{1},=\nm2 , {1}, \u2205, \u2205, ...\u3009,\n3. m3 = \u3008{1, 2},=m3 , {1}, \u2205, \u2205, ...\u3009,\n4. m4 = \u3008{1, 2},=\nm4 , {1, 2}, \u2205, \u2205, ...\u3009.\nTherefore, the class cone(m1, S)\u222a cone(m2, S)\u222a cone(m3, S)\u222a cone(m4, S) con-\ntains only and all the models for S. We use each of these models to construct a\ndiagram. Models m1, m2, m3 and m4 give rise to d1, d2, d3 and d4 in figure 8\nrespectively. Diagram d1 t d2 t d3 t d4 is expressively equivalent to S. This is\nnot the \u2018natural\u2019 diagram one would associate with S.\nTheorem 4. Let S be a sentence and class(S) be a set of classifying models for\nS. Then S is expressively equivalent to D(S).\nHence the language of spider diagrams and ESD are equally expressive.\n4 In fact, d is a \u03b2-diagram [8] (every zone is shaded or inhabited by at least one spider).\n14 Gem Stapleton et al.\nd 1\nL 1\nd 2\nL 1\nd 3\nL 1\nd 4\nL 1\nFig. 8. Constructing diagrams from models.\n7 Conclusion\nIn this paper we have identified a well known fragment of first order predicate\nlogic equivalent in expressive power to the spider diagram language. To show\nthat the spider diagram language is at most as expressive as ESD, we identified\na sentence in ESD that expressed the same information as a given diagram. To\nshow that ESD is at most as expressive as the language of spider diagrams we\nconsidered relationships between models for sentences. We have shown that it is\npossible to classify all the models for a sentence by a finite set of models. These\nmodels can be used to define a spider diagram expressively equivalent to S.\nThe spider diagram language extends to the far more expressive constraint\ndiagram language [7]. Constraint diagrams allow relational navigation (expres-\nsions involving two place predicates). The diagram in figure 9 is a constraint\ndiagram. In addition to the information provided by the underlying spider di-\nagram, it expresses that \u2018for all x in B \u2212 A, the relational image of x under g\nis A and there is a y in A \u2212 B whose relational image under f is an element\nof C\u2019. It is currently unknown what fragment of first order predicate logic can\nC\nBA\nf\ng\nFig. 9. A constraint diagram.\nbe expressed using constraint diagrams. Various constraint diagram languages\nexist. The simplest of these restricts the syntactic components and the semantic\ninterpretation of the diagrams [10]. In [3] the authors give a reading algorithm\nfor interpreting more expressive constraint diagrams.\nSome logical assertions are more naturally expressed in one language than\nanother. This may lead to the development of heterogeneous reasoning systems.\nAn example of such a system based on first order predicate logic and Euler\/Venn\ndiagrams can be found in [11]. We plan to develop a heterogeneous reasoning\nLecture Notes in Computer Science 15\nsystem incorporating constraint diagrams. The other languages included may\nbe influenced by the expressiveness of the languages involved. Thus it will be\nuseful to know how expressive constraint diagrams are. This work on the expres-\nsiveness of spider diagrams will lay the foundations for an investigation into the\nexpressiveness of constraint diagrams.\nAcknowledgment Gem Stapleton thanks the UK EPSRC for support under\ngrant number 01800274. John Howse, John Taylor and Simon Thompson are par-\ntially supported by the UK EPSRC grant numbers GR\/R63516 and GR\/R63509\nfor the reasoning with diagrams project. Thanks also to Andrew Fish and Jean\nFlower for their comments on earlier drafts of this paper.\nReferences\n1. B. Dreben and D. Goldforb. The Decision Problem. Solvable Classes of Quantifi-\ncational Formulas. Addison Wesley Publishing Company Inc., 1979.\n2. L. Euler. Lettres a une princesse d\u2019allemagne, 1761. vol 2, Letters No. 102-108.\n3. A. Fish, J. Flower, and J. Howse. A reading algorithm for constraint diagrams. In\nProceedings of IEEE Symposium on Visual Languages and Formal Methods, pages\n161\u2013168. IEEE, 2003.\n4. J. Howse, F. Molina, S-J. Shin, and J. Taylor. On diagram tokens and types. In\nProceedings of Diagrams 2002, LNCS, pages 76\u201390. Springer-Verlag, April 2002.\n5. J. Howse, F. Molina, J. Taylor, S. Kent, and J. Gil. Spider diagrams: A diagram-\nmatic reasoning system. Journal of Visual Languages and Computing, 12(3):299\u2013\n324, June 2001.\n6. J. Howse, G. Stapleton, and J. Taylor. Spider diagrams. In available from\nwww.cmis.brighton.ac.uk\/research\/vmgSDRules., 2003.\n7. S. Kent. Constraint diagrams: Visualising invariants in object oriented models. In\nProceedings of OOPSLA97, ACM SIGPLAN Notices, 1997.\n8. F. Molina. Reasoning with extended Venn-Peirce diagrammatic systems. PhD\nthesis, University of Brighton, 2001.\n9. S.-J. Shin. The Logical Status of Diagrams. Cambridge University Press, 1994.\n10. G. Stapleton, J. Howse, and J. Taylor. A constraint diagram reasoning system.\nIn Proceedings of International Conference on Visual Languages and Computing,\npages 263\u2013270. Knowledge Systems Institute, 2003.\n11. N. Swoboda and G. Allwein. A case study of the design and implementation of\nheterogeneous reasoning systems. In Logical and Computational Aspects of Model-\nBased Reasoning. Kluwer Academic, 2002.\n12. N. Swoboda and G. Allwein. Using DAG transformations to verify Euler\/Venn\nhomogeneous and Euler\/Venn FOL heterogeneous rules of interence. In Interna-\ntional Workshop on Graph Transformation and Visual Modeling Techniques, pages\n84\u201398, Barcelona, October 2002.\n13. J. Venn. On the diagrammatic and mechanical representation of propositions\nand reasonings. The London, Edinburugh and Dublin Philosophical Magazine and\nJournal of Science, 9:1\u201318, 1880.\n"}