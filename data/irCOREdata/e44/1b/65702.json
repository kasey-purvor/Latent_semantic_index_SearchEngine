{"doi":"10.1016\/j.aei.2007.05.001","coreId":"65702","oai":"oai:dro.dur.ac.uk.OAI2:5045","identifiers":["oai:dro.dur.ac.uk.OAI2:5045","10.1016\/j.aei.2007.05.001"],"title":"A Bayesian support tool for morphological design.","authors":["Matthews, P. C."],"enrichments":{"references":[],"documentType":{"type":0.5555555556}},"contributors":[],"datePublished":"2008-04-01","abstract":"Dynamic computer based support tools for the conceptual design phase have provided a long-standing challenge to develop. This is largely due to the 'fluid' nature of the conceptual design phase. Design evaluation methods, which form the basis of most computer design support tools, provide poor support for multiple outcomes. This research proposes a stochastic-based support tool that addresses this problem. A Bayesian Belief Network (BBN) is used to represent the causal links between design variables. Included in this research is an efficient method for learning a design domain network from previous design data in the structure of a morphological design chart. This induction algorithm is based on information content. A user interface is proposed to support dynamically searching the conceptual design space, based on a partial design specification. This support tool is empirically compared against a more traditional search process. While no compelling evidence is produced to support the stochastic-based approach, an interesting broader design search behaviour emerges from observations of the use of the stochastic design support tool","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65702.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/5045\/1\/5045.pdf","pdfHashValue":"ba7fbb5af82fea02037b637ed5ba7909f160a99a","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:5045<\/identifier><datestamp>\n      2011-09-14T15:30:23Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        A Bayesian support tool for morphological design.<\/dc:title><dc:creator>\n        Matthews, P. C.<\/dc:creator><dc:description>\n        Dynamic computer based support tools for the conceptual design phase have provided a long-standing challenge to develop. This is largely due to the 'fluid' nature of the conceptual design phase. Design evaluation methods, which form the basis of most computer design support tools, provide poor support for multiple outcomes. This research proposes a stochastic-based support tool that addresses this problem. A Bayesian Belief Network (BBN) is used to represent the causal links between design variables. Included in this research is an efficient method for learning a design domain network from previous design data in the structure of a morphological design chart. This induction algorithm is based on information content. A user interface is proposed to support dynamically searching the conceptual design space, based on a partial design specification. This support tool is empirically compared against a more traditional search process. While no compelling evidence is produced to support the stochastic-based approach, an interesting broader design search behaviour emerges from observations of the use of the stochastic design support tool.<\/dc:description><dc:subject>\n        Bayesian belief network<\/dc:subject><dc:subject>\n         Data mining<\/dc:subject><dc:subject>\n         Decision support<\/dc:subject><dc:subject>\n         Conceptual design<\/dc:subject><dc:subject>\n         Information content.<\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        Advanced engineering informatics, 2008, Vol.22(2), pp.236-253 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2008-04-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:5045<\/dc:identifier><dc:identifier>\n        issn:1474-0346<\/dc:identifier><dc:identifier>\n        doi:10.1016\/j.aei.2007.05.001<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/5045\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1016\/j.aei.2007.05.001<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/5045\/1\/5045.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["1474-0346","issn:1474-0346"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2008,"topics":["Bayesian belief network","Data mining","Decision support","Conceptual design","Information content."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n30 July 2008\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nMatthews, P. C. (2008) \u2019A Bayesian support tool for morphological design.\u2019, Advanced engineering\ninformatics., 22 (2). pp. 236-253.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.aei.2007.05.001\nPublisher\u2019s copyright statement:\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n Use policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without \nprior permission or charge, for personal research or study, educational, or not-for-profit purposes \nprovided that : \n \n\u0083 a full bibliographic reference is made to the original source \n\u0083 a link is made to the metadata record in DRO \n\u0083 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright \nholders.  \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nDurham Research Online \n Deposited in DRO:\n30 July 2008\nVersion of attached file:\nAccepted\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nMatthews, P. C. (2008) 'A Bayesian support tool for morphological design.', Advanced\nengineering informatics., 22 (2), pp.\u0000236-253.\nFurther information on publisher\u0000s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.aei.2007.05.001\nP.C. Matthews \u2217\nAdvanced Mechanics Research Group, School of Engineering, Durham University,\nDurham DH1 3LE, UK\nA Bayesian support tool for Morphological\nDesign\nAbstract\nDynamic computer based support tools for the conceptual design phase have pro-\nvided a long-standing challenge to develop. This is largely due to the \u2018fluid\u2019 nature\nof the conceptual design phase. Design evaluation methods, which form the basis of\nmost computer design support tools, provide poor support for multiple outcomes.\nThis research proposes a stochastic-based support tool that addresses this problem.\nA Bayesian Belief Network (BBN) is used to represent the causal links between de-\nsign variables. Included in this research is an efficient method for learning a design\ndomain network from previous design data in the structure of a morphological design\nchart. This induction algorithm is based on information content. A user-interface is\nproposed to support dynamically searching the conceptual design space, based on\na partial design specification. This support tool is empirically compared against a\nmore traditional search process. While no compelling evidence is produced to sup-\nport the stochastic based approach, an interesting broader design search behaviour\nemerges from observations of the use of the stochastic design support tool.\nKey words: Bayesian belief network, data mining, decision support, conceptual\ndesign, information content\nPreprint submitted to Elsevier Science July 30, 2008\n1 Introduction\nThe conceptual design stage occurs during the earliest parts of the design\nprocess. This is where a design specification is transformed into an abstract\nsolution, representing the core concepts of the final design. The fluid nature of\nthe conceptual design stage provides a challenge when developing deterministic\nmodels of a design at this phase. Specifically, it is difficult to explicitly define\nmetrics for concept quality and this is left to the subjective expertise of the\ndesign team. The nature of conceptual design means that it is possible for a\n\u2018good\u2019 concept to be poorly detailed and thus result in a poor final product and\nvice versa: a \u2018poor\u2019 concept can be carefuly developed through the detailing\nphase to result in a \u2018good\u2019 final product. The terms \u2018good\u2019 and \u2018poor\u2019 in\nthis case are context dependent, and cover such criteria as technical quality,\ncommercial success, and aesthetics. In general, good concepts are more readily\ntransformed into good final products while poor concepts require greater effort\nto attain a similar final high quality level.\nFor the purposes of this research, a working definition of the conceptual de-\nsign stage is required. There is general agreement that the conceptual stage\nis where designers transform the initial technical specification into a general\nform that defines the overall aspects of the product [1,2,3]. A core aspect of\nthe research presented here relies on using machine learning techniques that\nrequire databases of prior design examples. These databases of conceptual de-\nsigns require defining, and hence there is a need to define conceptual design.\nIn this context, conceptual design will be considered in a morphological sense:\nthe design will be structured into a set of parametric and characteristic vari-\n\u2217 Phone: +44 191 334 2538; fax: +44 191 334 2407\nEmail address: p.c.matthews@durham.ac.uk (P.C. Matthews).\n2\nables [1,4,5]. Against each of these variables, a designer will have to select a\nconceptual solution. The combination of all these solutions then generates the\nfinal design concept. Generating \u2018good\u2019 design using this approach relies on\nthe designer understanding the interaction between the design variables.\nA potential approach to the challenge of understanding the relationships be-\ntween the design variables is to adopt a stochastic perspective for the con-\nceptual design phase. This allows for a more flexible representation of the\ndesign domain where multiple outcomes are possible. By using Bayesian Be-\nlief Networks (BBNs) to model a design domain, it is possible to work with\npartially defined design concepts. As more of the design is specified, the more\naccurate the model becomes at predicting how the remainder of the design is\nlikely to be. An interesting and powerful aspect of the BBN is that it does\nnot distinguish between the design parameters that are directly controlled by\nthe designer and design characteristics, which are determined as a result of\nthe designer\u2019s decisions on the design parameters. This allows a designer to\nspecify the characteristics at the outset and to then be guided towards design\nparameters that are likely to secure these characteristics.\nThe BBN guided design search process claims four key effects. First, that a\nsatisfactory design domain model can be induced from previous design exem-\nplars, and that this explicit design model is of use to a designer. Second, that\nit is possible to start the design search based on a partial design definition\nthat may include design characteristic values as opposed to being required to\ninitiate the search by estimating design parameter values. Third, the design\nsearch heuristics for using the BBN suggest an efficient path through the de-\nsign process. Fourth, the resulting designs are produced efficiently and are of\nsimilar or higher quality than designs produced without this BBN support\n3\ntool. These claims will be illustrated and tested within this paper.\nThis research has developed a method for inducing a BBN from a database of\nprior design exemplars using a novel information metric (Section 4). Once the\nBBN has been instantiated, an interactive search tool is used that dynamically\nguides the designer to the most likely design based on the current partial\ndesign state (Section 5). This search method is extensively illustrated using a\ndesign scenario that forms the central application of this paper (Section 6).\nThe empirical work seeking evidence of the benefits of this method is then\ndescribed (Section 7). The paper concludes with a discussion of this method\nand some future development avenues for this stochastic approach.\nTo illustrate the ideas being developed, three examples are provided. First, a\nconceptual bridge design is used as a means to describe the overarching con-\ncepts that form the basis of the Bayesian design support tool. The bridge de-\nsign space has been explored in previous machine learning for design research\nfrom both an analytical and empirical perspective [6]. Second, an aircraft wing\ndesign example is used to provide an in-depth illustration of the mechanics of\nthe Bayesian approach. These two examples provide well understood and real-\nworld relevant examples to illustrate the background of this design support\ntool. The third example is provided in the empirical trial. This illustrates how\nthe Bayesian network structure is induced from prior data and the prototype\nuser interface that a designer would use during the design process. This ex-\nample represents the central application of the Bayesian decision support tool\nin this paper.\n4\n2 Background\nThe first task in the design process can be argued as determining the speci-\nfication of the final constructed artefact or product. The specification will be\na combination of \u2018demands\u2019 that the design must fulfil and weighted wishes,\nwhich represent desirable but not essential aspects of the design. This specifi-\ncation can be expressed as a simple list of necessary and desired features [7] or\nencoded as an \u2018acceptability function\u2019 [8]. For example, a bridge must stretch\nacross a minimum span and be able to support a given load. The span re-\nquirement is a necessary feature, while the load requirement can either be\nencoded as a desirable (support a load of 4 lane traffic is desirable, 2 lane\ntraffic is necessary) or, as the load-bearing of the bridge can be computed, as\nan acceptability function. The specification guides a designer towards gener-\nating concepts that fulfil the demands. Alternative designs are discriminated\nbetween how well they either fulfil the wishes or evaluate against the accept-\nability function. Provided the specification does not impose overly restrictive\ndemands, the designer is still left with a large conceptual design space to ex-\nplore. For example, there are several alternative approaches to creating a 4\nlane bridge, e.g. a cable-stayed bridge, cantilever bridge, etc. This search is\nfrequently supported by using a morphological matrix, where each design vari-\nable has a set of possible solution values, of which one value must be selected\nfor each variable.\nConceptual design is by definition fluid. While there is a degree of constraint\nimposed through the use of morphological matrices, there is ample flexibility\nduring the detail and embodiment stages where the design is crystallised into\nan artefact that can be manufactured [1]. Specifically, a good concept will be\n5\neasily transformed in the later design stages into a good final design. Similarly,\na poor concept will require extensive effort to be transformed into a good final\ndesign, and therefore has a higher likelihood of resulting in a poor final design.\nFor example, consider a bridge across a wide river. A good design concept\nwould be a cable-stayed bridge as this is an efficient structure that can easily\nspan a significant distance. However, it would be possible to elect to design a\nwooden bridge. Such a bridge would require great care in design to ensure it\nwould be able to meet the specification, and as a result there are many more\npossibilities for it to fail that specification and hence result in a poor final\ndesign. This definition of good\/bad concept can frequently only be measured,\nwith whatever metric is appropriate for that product, after the final product\nhas been produced. This is of little use during the conceptual stage of the\ndesign process. Also, the notion of a \u2018good\u2019 final design is domain and context\nsensitive. A designer will have a notion of what aspects of the final design\nare desirable, and a good designer will create concepts that are more likely to\nhave these outcomes.\nAs a means for resolving the lack of explicit overall quality measure, an alter-\nnative, stochastic, approach is adopted. This stochastic approach is fundamen-\ntally that a good concept has a high probability of resulting in a good final\ndesign, whereas a poor concept has a low probability of being transformed\ninto a good design. This leads to a stochastic view of the design process: the\nprobability of a good design at the end of the process depends on the quality of\nthe initial design concept. Such an approach has been adopted for conceptual\naircraft optimisation, where a hybrid deterministic and stochastic approach is\ntaken [9,10].\nThe fluidity of the conceptual design phase means it is difficult to provide\n6\nconcrete evaluation tools. The bridge case study [6] described a partial causal\nmodel which was effectively a set of monotonic trends, for example, \u2018increas-\ning tower height reduces tower stiffness which in turn reduces bridge stiffness\u2019.\nMethods exist for creating \u2018robust\u2019 designs, and through objective evaluation\ntechniques, guide the designer towards concepts that will be able to tolerate\nchanges in the original specification [11,12]. In effect, these methods aim to\nprovide the most generic design solution that is acceptable. These methods\nrequire a pre-defined evaluation function for the design that encodes the origi-\nnal design specification. An alternative stochastically driven method is to bias\ntowards design refinements that do not have \u2018spiky\u2019 probability distribution\nfunctions (PDFs) [8]. Such spiky PDFs lack robustness as any deviation from\nthe peak will result in a significant reduction in the likelihood of design success.\nThe approach taken in this paper is to provide guidance on the order that\ndesign variables should be determined. This designer guidance concept is sim-\nilar to the Signposting [13], change propagation [14], and other causal graph\nmethodologies [15]. These approaches are based on prior task ordering and\nthen, using the state of design information, to direct the designer to the next\nsuitable task to perform. The approach introduced in this paper, however, uses\nthe shape of the dynamically computed design variable PDFs rather than pre-\ndefined domain rules to determine the order that the design variables should\nbe determined. This approach has been used for the design and analysis of\nturbine blades when including probabilistic effects of safety and worst case\nscenarios [10].\nGood concept-stage design models are difficult to obtain. This is because at\nthis stage there typically is a lack of accurate information regarding the in-\nteraction between the design variables [16,17]. The methods for creation of\n7\ndomain models can be represented on a spectrum ranging from expert based\nthrough to fully algorithmic. The expert based end of the spectrum provides\nhigh quality transparent models, however these require considerable time in-\nvestment from domain experts, which can be prohibitive. At the other extreme,\npure machine learning methods tend to provide complex and opaque models,\nwhich while accurate, do not necessarily provide a designer with significant\ninsight into the domain. This research aims to address the algorithmic induc-\ntion of design models from previous design exemplars, with the specific aim\nof inducing models that are more easily interpreted by human designers.\nThe motivating factors for this research are in part the cognitive aspects that\naffect and constrain human designers [18]. These include the range of model\ncomplexities that can be intuitively handled; the nature of understanding a\ndesign domain; the latent differences between novice and expert designers;\nand what constitutes an intuitive interface to a stochastically based design\ndomain model. Such stochastic modelling approaches have been attempted in\ndomains where \u2018natural\u2019 uncertainties exist. Vibration analysis and the asso-\nciated failures of structures under vibration is challenging to compute, and\nhence a stochastic approach provides a simpler method of predicting failure\n[19]. In a similar manner, assessing flood risks can not be performed determin-\nistically. By creating a set of simple probabilistic models, it has been possible\nto assess the risk by combining these simple models [20]. Both these stochastic\napproaches are founded on building small stochastic partial domain models,\nand then combining these to provide an overall stochastic domain model. This\nallows for a designer to rapidly assess risks by only modifying the relevant par-\ntial model and then investigating how this affects the global design.\n8\n3 Bayesian Design\nUncertainty is a factor in any modelling context. Incorporating this uncer-\ntainty in deterministic models is a challenging task. Methodologies have been\ndeveloped for controlling the uncertainty in early design scenarios [21,22].\nThese approaches enable designers to use design models that can provide\nsuitable simulation models that are able to provide direction in the design\nprocess, albeit with occasionally imperfect predictions. The nature of uncer-\ntainty means that it must be modelled stochastically. As described in the\nprevious section, the relationship between the decisions made during the con-\nceptual design stage and the final quality of the product is non-deterministic,\ncomplex and uncertain. From an optimisation perspective, this problem is\ncharacterised by the lack of high quality numerical models that allow optimi-\nsation algorithms to search the design space. An approach to bridge this gap\nis the use of surrogate or meta-models [17,23,24]. By using a simplified model\nof a more complete but complex model, it is possible to rapidly search the\ndesign space for areas that are more likely to provide promising results. These\nsurrogate models are created by either sampling the design space directly or\ntaking samples from the more complex and costly models.\nBayesian design is the use of Bayesian Belief Networks (BBNs) to support the\nmodelling of the stochastic perspective for the design process. This provides a\ncausal model for a set of design observations or variables [25]. These Bayesian\nmodels are represented graphically, where the observations are the graph nodes\nand the causal links are the directed edges that connect the nodes. As these\nnetworks tend to be relatively sparse, namely that nodes are typically only\nattached to a small subset of other nodes, this significantly simplifies the\n9\ncomputational effort required to make inferences given a set of observations.\nAs observations are made, these provide information to the model. The model\nuses these observations to make informed estimates on the values of the non-\nobserved variables. For a non-observed variable, it is possible to compute its\ninformed (conditional) PDF. Effectively, the available information biases the\nunobserved variable\u2019s PDF.\nThis research uses Bayesian ideas to develop a novel design decision support\ntool. Four core benefits are claimed from implementing a design methodology\nbased around the use of this design support tool:\n(1) That a suitably good design domain model can be induced from prior\ndesign examples, and this model is useful to designers;\n(2) That the design search process can begin with a partial design specifica-\ntion that includes design characteristics;\n(3) That the proposed design search heuristics lead to an efficient yet flexible\ndesign search path; and\n(4) That the resulting designs are at least of equal merit as designs that\nwould arise from a more \u2018traditional\u2019 search method.\nThese claims will be argued through illustration and empirical evidence. Sec-\ntion 6 provides an illustration of how the initial machine learning process\ninduces the Bayesian design domain model and how this model is then used\nas part of a dynamic search process. This provides supporting evidence for\nthe first three claims. Section 7 describes the empirical study which provides\nsupporting evidence for the last two claims.\nA powerful aspect of using machine learning techniques to induce a design do-\nmain model is that the order in which aspects of the design are specified can\n10\nWeight\nStructure\nStrength (Req)\nStrength (Max)\nWeight Strength\nMaterial\nStructure\nMaterial\nFlow Capacity\nFlow Capacity\nCharacteristic\nParameter\nKey:\nFigure 1. Alternate design models \u2014 Top: \u2018classical\u2019 function based approach where\ndesign characteristics are functions of design parameters; Bottom: stochastic per-\nspective where design characteristics and perspectives are treated as \u2018variables\u2019.\nbe challenged. It is no longer necessary to first specify the design parameters\nand then either calculate or estimate the resulting design characteristics from\nthese parameter settings. From a Bayesian perspective, all measurable aspects\nof the designs are treated as \u2018observed variables\u2019. In the design context, the\nobserved variables are the design parameters and characteristics. The distinc-\ntion between these is primarily that design parameters are directly determined\nby the designer while the values of the design characteristics are a result of the\ndesign parameters. For the purposes of this work, this distinction is removed,\nas it is impossible in general to infer the causal order between the design vari-\nables based only on a set of design examples. For example, when designing\na bridge, one of the design parameters is the width of the bridge. The wider\nthe bridge, the greater the potential flow across the bridge, which is a design\ncharacteristic of the bridge. However, a greater potential flow across the bridge\nwill require a stronger bridge, which can be achieved through a number of al-\nternatives, e.g. material choice, structural design, etc., all of which are design\nparameters again.\n11\nThe benefits of removing this distinction are illustrated in Figure 1. Under\nthe scheme where design characteristics are seen as \u2018outputs\u2019 of functions of\ndesign parameters, the design process must identify design parameter val-\nues such that the outputs of independent functions match up. This can be\nchallenging, particularly when the functions in question do not have inverse\nfunctions. Using the illustration from the previous paragraph, the outputs are\nthe design characteristics flow capacity and bridge strength (Figure 1). In this\nsimplified case, flow capacity is a function of bridge width, required strength\nis a function of flow capacity, and bridge strength is a function of material and\nstructural design. For a successful design, bridge strength must exceed the re-\nquired bridge strength determined by the flow capacity. Depending on which\naspects of the bridge are specified, this determines how a designer must pro-\nceed: either compute directly the function outputs where possible or identify\nsuitable function inputs to match the desired outputs. Under the stochastic\nperspective, where the distinction in removed, it is possible to merge the two\nstrength variables so that the matching is done implicitly. Under this scheme,\nit no longer matters which design variables are specified, as the process to\ndetermine the variable values is the same regardless.\nBayesian design is a stochastic view of design, and is particularly appropriate\nfor routine early design tasks, due to the fluid nature of the early design phases.\nUnder the stochastic view, each design variable has a PDF. These PDFs can\neither be obtained through sampling previous designs or hand coded [26]. The\nPDF is a mapping from the values the design variable can take (design space)\nto the probability of that variable taking that value. The probability of a\nvariable taking on a particular value represents is a measure of how frequently\nthat variable takes that value in final (e.g. detail phase) designs. This can be\n12\ninterpreted as a measure of the design knowledge or experience that exists for\nachieving that given design variable value. Thus, where low probabilities are\nencountered, this provides a warning that a potential challenge lies ahead in\nachieving that position in the design space.\nAs these PDFs are computed within a BBN, the PDFs will be biased where\nrelevant information is available. Relevant information in this context are ob-\nservations taken from neighbouring nodes within the network. The updated\nconditional PDFs (CPDFs) now take into account the knowledge that exists\nabout a subset of designs from the domain, as defined by the relevant infor-\nmation that has been added. So, where previously setting a design variable\nto particular value might have appeared difficult to achieve by nature of the\nlow probability of this outcome, it is possible that given the additional infor-\nmation this becomes a much more likely outcome. A schematic illustration is\ngiven in Figure 2. This figure represents the distribution function of a design\nvariable that is conditionally dependent on some other design variable. On the\nleft hand function, the parent variable is unspecified and therefore providing\nno information about how the child distribution will be affected. This unaf-\nfected child distribution is quite \u2018wide\u2019, suggesting that for this variable, most\nsettings are of equal likelihood. When the parent variable is set, this alters the\ndistribution function of the child, in this case narrowing it down towards the\nhigher values of the child variable state. The use of design variable based dis-\ntribution functions in design has been reported in the design analysis of heat\ntransfer in turbine blades enabling a designer to design for specific reliability\n[10], project planning and management by computing the probability distri-\nbutions of individual task lead times [27], and decision making for scientific\ninvestment strategies based on distributions of risks associated with various\n13\nDesign Variable Design Variable\nPr\nob\nab\nilit\ny\nPr\nob\nab\nilit\ny\nFigure 2. Schematic illustration of how a design variable\u2019s PDF changes when the\nparent variable is specified. The function on the left is the marginal distribution\nand the right represents the updated distribution given further information.\nalternative options [28].\nThis leads into exploiting design BBN as a design support tool. A designer will\nstart with a specification that defines a subset of the design variables. These\ndefined variables can be considered as observations and thus be entered into\nthe BBN. The BBN can now provide CPDFs for the unobserved variables.\nThese unobserved variables were not part of the specification, and hence it\nmay be assumed that the designer is free to set these arbitrarily. However,\nit will be assumed that the designer wishes to specify a design concept that\nhas the greatest probability of resulting in a good product, and therefore be\na concept that requires the least effort during the detailing phases to produce\na good final design. Hence, the designer should be attracted to set design\nvariables to their most likely states, as these represent the states where the\nmost knowledge and\/or experience exists.\nWhere a number of different variables require determining, a simple ordering\nheuristic can be applied. Design variables with narrow \u2018spiky\u2019 distributions\nshould be determined first, proceeding through the variables with the \u2018flattest\u2019\nPDFs being last. As a PDF must sum to unity, a simple approach is to consider\nthe difference between the PDF\u2019s maximum and minimum values. The greater\nthis difference is, the \u2018spikier\u2019 the PDF is. This heuristic ensures that design\n14\nvariables with narrow likely ranges are set suitably as early as possible. If this\nis not done, it is possible that through the setting of another design variable,\nthe \u2018narrow\u2019 design CPDF disappears altogether, thus representing a highly\nunlikely design. In effect, this is the stochastic equivalent of over constraining\na design. Similarly, the \u2018flat\u2019 PDFs are likely to become spikier as more of\nthe design is defined. By monitoring how each individual PDF changes with\neach additional design variable setting, it is possible to dynamically guide a\ndesigner through the order in which the design variables should be set, in a\nmanner similar to the methodology proposed to minimise the effects due to\nchange propogation [14]. It is worth noting, however, that these are no more\nthan guiding heuristics. Designers are at liberty to navigate through the design\ndomain based on their personal experience or instincts.\n3.1 Qualitative illustration\nA hypothetical wing design example is used to provide a qualitative illustra-\ntion of the Bayesian design methodology. Wing design is a well understood\ndomain with known deterministic models. Hence, this does not represent a\ntypical application domain for the Bayesian tool, but provides a context in\nwhich insights into the underlying algorithmic mechanisms of the Bayesian\ndesign decision support tool can be made. Further, in this illustrative case the\nmodel structure is assumed to be known a priori. Under the full application\nof this methodology, the model structure would be induced from prior design\ndata. Finally, by modelling the wing domain with three design variables, this\nprovides the simplest possible non-trivial BBN structure.\nThis wing design domain will be defined by one design parameter: wing geom-\n15\nGL\nD\nFigure 3. Bayesian Belief Network for hypothetical wing design (G = wing geometry,\nL = lift, and D = drag).\netry (effectively representing chord thickness), and two design characteristics:\nwing lift and wing drag. Figure 3 illustrates the causal relationship between\nthese design variables: namely that the wing geometry determines both the\nlift and drag factors. For simplicity in this hypothetical example, it is assumed\nthat lift and drag are independent of each other.\nTwo design scenarios are illustrated. The first is where the \u2018parent\u2019 variable\nis known, in this case the wing geometry. This is used to then determine es-\ntimates on the wing lift and drag factors. The second scenario starts with a\nknown \u2018child\u2019 variable, in this case the wing lift factor. This scenario illus-\ntrates how the Bayesian design then directs the designer to determine the\nwing geometry and place an estimate on the lift factor.\nThe underlying domain rules are illustrated in Figure 4. There are two basic\ndomain rules, one for each of the design characteristics determined by the\nvalue of the design parameter, wing geometry in this case. These rules are\nsummarised by: as wing geometry increases, both lift and drag factors in-\ncrease. However, nominal lift increases at a diminishing rate but the spread of\npossible lift values widens. Conversely, nominal drag increases at an acceler-\nating rate while the spread of possible drag levels reduces. It is assumed that\nthese domain rules are not explicitly known by the designer, and hence that\nthe designer is strictly using the Bayesian support tool for guidance. However,\n16\nLi\nft\nD\nra\ng\nWing Geometry Wing Geometry\n25%\n50%\n75%\n75%\n25%\n50%\nFigure 4. Rules governing the hypothetical wing design, with contours (dashes)\nrepresenting the distributions from the nominal rules (solid).\nby providing these domain rules explicitly in this illustration, it is possible to\nbetter understand the nature of the Bayesian design support tool\u2019s output.\n3.1.1 Specified Parent Variable\nIn the first design scenario, the wing geometry has been predetermined to\naccommodate the various flight control systems and fuel storage. The wing\ngeometry has been set to \u2018low\u2019. The designer wishes to determine what lift is\npossible to be obtained from this wing and what drag is to be expected from\nthis design.\nThe designer enters the low value for the wing geometry into the design sup-\nport tool. This then provides the conditional PDF\u2019s given by:\nfL(x)=P(L = x |G = low) (1)\nfD(x)=P(D = x |G = low) (2)\nThese distributions are obtained by considering the distributions presented in\nFigure 4 at the given wing geometry value, effectively projecting the distri-\nbution from this geometry value. The projected distributions are presented\nin Figure 5. From here it can be seen that the \u2018lift\u2019 distribution is \u2018spikier\u2019\n17\nLi\nft\nD\nra\ng\nWing Geometry Wing Geometry\n25%\n50%\n75%\n75%\n25%\n50%\nP(\nL |\n G\n=lo\nw)\nP(\nD \n| G\n=lo\nw)\nLift Drag\nFigure 5. The projection of the domain rules onto the conditional probability dis-\ntribution function, given a specified geometry (heavy vertical lines on top plots).\nthan the \u2018drag\u2019 distribution, and hence the design heuristic is to determine\nthe lift variable first. The distribution suggests that the designer should ex-\npect a lower lift value for the given wing geometry. The designer is at liberty\nto select a high lift value, but this would be expected to be significantly more\ndifficult to fulfil in the later design stages. As drag is independent of lift (un-\nder this domain model), the setting of the lift value does not affect the drag\ndistribution. The designer is at liberty to select the drag target for this design,\nbut is suggested to aim for the mode of the distribution.\n3.1.2 Specified Child Variable\nIn the second design scenario, the design specifies that the wing is required\nto provide a high lift factor. Hence, the wing lift factor has been set to \u2018high\u2019,\nand the designer wishes to determine what wing geometry would achieve this\nlift and obtain an estimate on the expected drag factor for this design.\n18\nThe designer enters the high value for the lift factor into the design support\ntool. In this case, as the \u2018lift\u2019 design variable is a child variable in the model,\nthe distribution function for the wing geometry represents a likelihood distri-\nbution rather than a probability distribution. The distinction between these\nis that the integral of the likelihood function can be greater than unity, which\nis the case when a number of wing geometries are highly likely to provide\nthe specified lift. However, the principles behind using the distributions as a\nsupport tool for selecting variable values remains the same: the designer is\nencouraged to select the value where the distribution peaks, as this represents\nthe most likely outcome given the currently specified design.\nThe distribution functions in this case are given by (see Figure 6):\nfG(x)=P(L = high |G = x) (3)\nfD(x)=P(D = x) (4)\nIt is worth noting that the distribution function for the drag is simply the\na priori drag distribution. This is as the domain model in this hypothetical\nexample has lift and drag as independent variables. Therefore, with only lift\nbeing set, there is no relevant information with respect to drag and hence the\nbaseline drag distribution results as the drag PDF.\nThe designer uses the \u2018spiky distribution first\u2019 heuristic to determine which\nvariable should be set next. In this case, the drag distribution is the spikier\nand hence it is determined next. As drag is not part of the specification,\nthe designer is directed to selecting the mode value of the drag distribution.\nHowever, the designer is at liberty to use their engineering judgement to select\na drag value slightly below the mode, as this provides for a more efficient final\n19\nLi\nft\nD\nra\ng\nWing Geometry Wing Geometry\n25%\n50%\n75%\n75%\n25%\n50%\nlik\n(L=\nhig\nh |\n G\n)\nDrag\nP(\nD)\nWing Geometry\nFigure 6. The likelihood distribution for wing geometry, given that the wing lift\nhas been specified. Note that the drag distribution function remains the baseline\ndistribution.\nwing design.\nThe wing likelihood distribution now needs to be recomputed, as it is affected\nby the additional information given by setting the drag variable. This distri-\nbution is given by (see Figure 7):\nf \u2032G(x) = P(L = high, D = low |G = x) (5)\nThe geometry likelihood distribution has now been narrowed from the dis-\ntribution in the previous iteration. Again, the variable value determination\nheuristic suggests that the design should set the value to the distribution\u2019s\nmode, in this case a \u2018middle\u2019 value for wing geometry. This finalises the de-\nsign, and provides a realistic design specification to be taken forward to the\nnext design stage.\n20\nLi\nft\nD\nra\ng\nWing Geometry Wing Geometry\n25%\n50%\n75%\n75%\n25%\n50%\nlik\n(L=\nhig\nh |\n G\n)\nWing Geometry\nDrag Contribution\nLift Contribution\nFigure 7. The likelihood distribution for the wing geometry where both lift and\ndrag have been specified (solid line). The contributions for both lift and drag are\nillustrated (dashed lines).\n4 Inducing Bayesian Networks\nTo use BBNs as a design support tool, it is essential to acquire a sufficiently\naccurate BBN in the first instance. The first step to achieve this is the creation\nof a suitable representation or encoding of the design domain. This provides a\ndefinition of the conceptual design space of the domain under consideration. A\nsimple, but suitable, representation format is a design vector [29]. The design\nparameters and characteristics form the variable components of the vector. As\ndiscussed in the previous section, these are to be the nodes of the BBN.\nThe next step is identifying the causal links between these design variable\nnodes. One method for achieving this is to use an expert (or panel of experts)\nto manually identify the links. While this is expected to produce accurate\nmodels, it is a time consuming exercise. As the domain becomes more complex\n21\nin terms of number of design variables, the complexity of the model creation,\nin terms of number of potential arcs, increases quadratically with the number\nof design variables. Further, once the nodes have been linked, the PDFs and\nCPDFs that are associated with the nodes and arcs respectively must be\ndefined. This requires significantly greater consideration than identifying the\ncausal links. As a result, the expert crafted BBN is not appealing.\nThis paper develops an alternative method for identifying the causal links\nin the BBN by applying data mining techniques to a database of previous\ndesign exemplars. This data mining algorithm analyses the given database\nand creates a network that provides a sufficiently close representation of the\nstochastic phenomenon observed in the database. Data mining algorithms use\nthree main metrics to determine model quality: validity, understandability, and\ninterestingness [30]. Validity measures what proportion of the data can be cov-\nered by the model. Understandability provides a complexity measure that can\nrepresent how easy it is for a designer to understand a model. Finally, interest-\ningness measures the novelty of representation of a model in a design domain.\nThese metrics have been listed in order of difficulty of measuring. Validity\ncan be measured directly against the database supplied. Understandability\nrequires a measure of human ability to understand a given model. Interest-\ningness must be measured against the current state of domain knowledge and\ncombined with a subjective element supplied by the domain expert.\n4.1 Information Content based metric\nMost efficient BBN inducing algorithms require that the overall causal order\nis known prior to running the algorithm. However, where this ordering is\n22\nMeasure pairwise\nI(A,B) for all A, B Partial models\nCombine models\nwith min info content\nSingle\nModel? Final BBN\nCompute info\nfor combined model\nYes\nNo\nFigure 8. Flowchart representing the greedy BBN learning algorithm.\nnot known, the complexity of most BBN graph inducing algorithms explodes\nto O(n!), where n is the number of domain variables. In this research, it\nis assumed that the causal order of the design variables is not known prior\nto running the algorithm. In terms of computational resources, this places a\nsignificant constraint for inducing BBN graphs for realistic design problems.\nInformation content has been used in engineering applications ranging from\narguments for basing a design theory [31] through to enhancing the diagnostic\nand maintenance process [32]. For the purposes of this research, the informa-\ntion content approach enables a significant reduction in the computational\ncomplexity involved in learning graphical models. Chen et al. [33] describe a\ngraph inducing algorithm based on measuring the conditional independence\nbetween pairs of variables. Where the causal order of the variables is not\nknown, they show that the graph can be learnt with O(n4) complexity. In this\nresearch, this idea has been adapted to create a novel greedy algorithm that\nfurther reduced the computational complexity down to O(n2). This greedy\napproach has been tested on some well known databases and performs well\nin terms of identifying the correct BBN. The overall process is illustrated in\nFigure 8.\nThe graph search algorithm developed in this research implements a breadth-\nfirst greedy search heuristic based on a measure of the information content\nof the conditional probability distribution. Recall the definition of conditional\n23\nprobability:\nP(B = b |A = a) = P(B = b, A = a)\nP(A = a)\n(6)\nWhere the events A and B are independent, P(B,A) = P(B)P(A). Hence,\nwhen A and B are independent P(B|A) = P(B). By considering the differ-\nence between the observed conditional and prior probability distributions, it\nis possible to measure the mean variance in this difference:\nI(A,B) = E[P(B |A)\u2212 P(B)]2 (7)\nThe variation, I, represents how much more information is contained in the\nconditional probability distribution above the information contained in the\nprior probability distribution. A large value for I indicates that the conditional\nprobability distribution contributes greatly to the knowledge of the domain\nwhile a small value indicates that the two variables are likely to be reasonably\nindependent of each other.\nThe graphical model search algorithm begins by measuring the pairwise infor-\nmation content between each variable pair. This is computed for both direc-\ntions, as in general I(A,B) 6= I(B,A). For each design variable, the system\nis seeded with a partial model containing the given variable and the variable\nthat has the greatest information content of its conditional probability distri-\nbution. Where a partial model would be repeated, the variable with the next\nhighest information content is selected.\nThese partial models are ordered in increasing information content order. The\nnext step is to merge partial models with low information content, creating\na new partial model whose information content is given by the sum of its\n24\nparts. The two models with the lowest information content scores and a shared\nvariable are merged, resulting in one fewer partial model. Where there are\nmore than two candidate models for combining, the tie breaker is determined\nby (1) resulting model complexity followed by (2) lower information score. This\nis repeated until all partial models are exhausted. The above greedy algorithm\nresults in a single graphical model.\n5 Implementation\nTo empirically test the design heuristics described in Section 4, it was necessary\nto implement the stochastic algorithms: one algorithm to induce the domain\nmodel and another to implement the interactive design search. To ensure wide\naccess to the algorithm, it was decided to implement the interactive design\nsupport tool using Microsoft\u2019s Visual Basic (VB) within Excel. Most office\ndesktops have access to Excel, and thus a large population of potential beta-\ntesters exists.\nThe code is structured in two parts: The first part is a one-shot machine\nlearning algorithm that uses Equation 7 to induce the network from a given\ndataset of prior design exemplars. As this only needs to be run once, it was\nwritten in Matlab rather than VB. While this restricts the ability for arbitrary\nusers to use their own datasets, this was not a part of the user trial. The\nsecond part of the code represents the user interface to the BBN. Figure 9\ncontains the flowchart for the iterative and designer led search process. This\nwas encoded as a VB macro that reads the current design state from the Excel\ndesign spreadsheet and computes the PDFs of the unspecified design variables.\nThese PDFs are extracted from the database of design exemplars that resides\n25\nSpecification\nEntry\nCompute and\ndisplay PDF\u2019s\nUpdate\/further\nspecify design\nAny\nvariables\nleft?\nConceptual\nDesign\nN\nY\nFigure 9. Flowchart representing the overall design search process.\non a separate worksheet. The conditional PDFs are computed from the joint\nprobabilities that can be extracted by frequency counting within the database.\nThe remainder of this section will focus on the user interface.\n5.1 Data structure\nThe data structures for the interactive design search tool are based on the sim-\nple native structures available within Excel. There are three types of data that\nneed storing: (1) the database of previous design exemplars; (2) the network\nstructure; and (3) the current design state. Each of these is held in a separate\nExcel worksheet. While this is not a highly efficient approach, it does provide\na very simple representation that can be easily manipulated by a designer.\nTypically, a designer would be interested only in the design status worksheet.\nHowever, the designer also has the capacity to edit the BBN directly in the\ncase that it is believed to be inaccurate. Also, the designer is able to edit the\nexemplar database, either by removing data points or adding further ones.\nHowever, if the manually edited data had an impact on the network, this\nwould not be possible for the user to determine directly.\nThe design status worksheet lists each design variable on a separate row (see\nFigure 12 for a screen shot). The first column contains the variable name. In\nthe next column, the variable value is placed, when known. The remaining\ncolumns are used to display the PDF for the given variable. The PDF is\ncomputed for all possible values the design variable can take. This is a simple\n26\ntask, as the all the design variables have been discretised and so there are only\na small number of values to consider. The designer then uses the PDFs as a\nguide to determining the next design variable value.\nSimilarly to the design status worksheet, each row of the network worksheet\ncontains the network data for a single variable. The first column contains the\nvariable name. The remaining columns contain the immediate causal \u2018parents\u2019\nof the variable. For each variable, X, these represent the set of variables that\nX is causally dependent on. This set of parent variables is typically denoted\npi(X). Hence, in the BBN, the CPDF of X is expressed by P(X|pi(X)).\nFinally, the dataset worksheet simply contains a set of previous exemplar\ndesigns. Each design is listed on a separate row. The columns in this case\ncontain the different design variables.\n5.2 Interactive algorithm\nThe interaction between designer and the code is centred around the unspec-\nified design variables. For illustration purposes, denote the unspecified design\nvariable as Y . To provide direct guidance, the information supplied for each\nunspecified design variable is reduced to a single dimension, namely the PDF\nfor that design variable. Depending on the status of adjacent design variables,\nthere are two main cases to be considered: (1) Y is a non-terminal node in\nthe BBN tree and (2) Y is a terminal node. The BBNs that are induced from\nthe greedy learning algorithm are tree structures: no node has more than one\nchild, or alternatively, any variable can causaly only affect one other variable.\nHowever, a variable can have several parent variables that have a causal effect\non it.\n27\nThe first case is straightforward. The aim here is to compute the CPDF defined\nby P(Y = y|pi(Y )) for all y values that the design variable Y takes. The CPDF\nonly uses the specified parent design variables. That is, if one of the members\nof pi(Y ) has not been specified, it is excluded from consideration. Thus, if none\nof the parents have been specified, then the CPDF reduces to the PDF of the\ndesign variable Y .\nIn the second case, where the unspecified design variable Y is a terminal node,\nthe code considers the child node of Y . As a BBN is a tree graph, there is\nonly one child of Y . Let X = pi\u22121(Y ) be the unique child of Y . The designer\nis then presented with the following distribution:\nP(X|Y = y, pi(X)) (8)\nThere are now two further sub-cases to consider: X has been specified and X\nhas not been specified. Where X has been specified, the algorithm proceeds\nto compute the probabilities of achieving this specified value for all possible\nvalues Y = y that the unspecified design variable can take. Again, only the\nknown values of pi(X) are considered. In the second case, where X has not\nbeen specified, the only information that can be used to guide the designer is\nthe PDF of the unspecified variable Y . This is as Y is a terminal variable, so\nthere are no further parents that will affect it, and it is independent to the\nother parents of X, namely pi(X).\nIt should be noted that in this second case, Equation 8 is not a proper PDF\nas it does not necessarily sum to 1. This function measures the likelihood of\nachieving the already determined value of X. However, for the purposes of\nidentifying a good value for Y , the same argument applies, namely that a\ndesigner should focus on those values that provide a suitably high likelihood\n28\nfor achieving X\u2019s value.\nAll the PDFs are computed dynamically at run time by counting suitable\nexemplars from the database. The complexity of this process is O(Nn), where\nN is the size of the database and n is the dimensionality of the design space.\n5.3 Designer heuristics\nThe final aspect to be considered is how the displayed PDFs are interpreted by\nthe designer as two heuristics for the design search process. For each unspec-\nified design variable, the relevant PDF for that variable is displayed in the\ncolumns adjacent to the design specification. As argued earlier (Section 3),\nthe first heuristic that guides the order in which variables are determined\nsuggests that the designer focuses initially on the variables with narrow dis-\ntributions and then moves onto variables with ever wider distributions. The\nsecond heuristic guides the designer to the value that each variable should be\nset to. It is suggested that the designer selects the value that has an acceptably\nhigh probability associated with it. This represents the most likely outcome\nfor the design, or conversely, the design with the greatest likelihood of success.\n6 Empirical study domain: Preliminary Car Design\nFor the purposes of illustrating and arguing the benefits of the Bayesian de-\nsign support tool, a simple conceptual car design domain is used. This design\nexample will be used in two forms: the first will be to provide an illustration of\nhow the dynamic search support tool operates (this section), and will provide\nevidence for Claims 1\u20133 (recall Section 3). The second form (Section 7) will be\n29\nthe basis for the empirical trial which provides empirical evidence supporting\nfurther evidence for Claim 3 and evidence for Claim 4.\nFor this laboratory based trial, the well known machine learning car design\ndatabase was used [34]. This database contains a sample of 1728 fully de-\nscribed designs. The design domain is defined by ten variables, of which six\nare design parameters (the target purchase price; the expected maintenance\ncost; the designed safety level; the number of doors; the number of passen-\ngers; and the volume of luggage that can be carried) and the remaining four\nare design characteristics (the overall cost of ownership; the comfort level;\nthe technology level; and the overall car acceptability). All the variables are\ndiscrete, and hence this fully defines the domain\u2019s morphological matrix, and\na more detailed description of the variables is listed in Table 1. The original\ncar design database was constructed using a set of predetermined rules. The\nstructure of these rules is provided in Figure 10. This known rule structure\nmakes it possible to evaluate the quality of the machine learnt domain model.\nThe car database was first loaded into Matlab and passed to the BBN learning\nalgorithm. This generated a network representing the causal links between the\ndesign variables. The algorithm identifies exactly as many arcs as there are\ndesign variables. This resulted in a non-tree structure. In a tree structure each\nnode, with the exception of the root node, should have a single child. The\nstructure that was produced by the learning algorithm had the \u2018safety\u2019 node\nlinked to both the \u2018technology\u2019 and \u2018car acceptability\u2019 nodes. By considering\nthe information content of these two arcs coming out of the safety node, the\narc with the lower information content was deleted. The resulting tree net-\nwork that was learnt from the dataset had an identical causal structure to\nthe underlying rule structure used to create original the design database, as\n30\nTable 1\nCar design morphology table: variable names, abbreviations, and description. The\ndescriptions include the possible variable values. Design parameters are in lower\ncase and the design characteristics are in upper case.\nName (abbreviation) Description\nbuying (buy) Purchase price for car (low, medium, high, very\nhigh)\nmaintenance (mnt) Expected maintenance cost for car (low,\nmedium, high, very high)\ndoors (drs) Number of doors on car (2, 3, 4, 5+)\npersons (pers) Number of passengers (2, 4, 5+)\nluggage (lug) Available luggage volume (small, medium, big)\nsafety (safe) Designed safety level (low, medium, high)\nCOMFORT (CMFT) Comfort level of car (unacceptable, acceptable,\ngood, very good)\nPRICE (PRC) Total cost of ownership (unacceptable, accept-\nable, good, very good)\nTECHNOLOGY (TECH) Technology level of car (unacceptable, accept-\nable, good, very good)\nCAR (CAR) Overall acceptability of car (unacceptable, ac-\nceptable, good, very good)\nillustrated in Figure 10. As the model induction algorithm produced an exact\nreplica of the original rule structure, this provides evidence for Claim 1. Sub-\nsequently, this network was encoded in the Excel spreadsheet, along with the\ndesign database.\n6.1 Illustration of a Stochastic search\nThe Excel spreadsheet, coupled with a Visual Basic macro, provides the \u2018user\ninterface\u2019 to the stochastic design tool as shown in Figure 11. For illustration\npurposes, one of the empirical design scenarios is described in this section.\nThis illustrates Claim 2: how the design is initially partially specified, and\n31\nPurchase Cost\nof Ownership\nTotal Cost\nCar\nAcceptability\nTechnology\nLevel\nLevel\nComfort\nPassengers\nMaintenance Safetly Level\nNo of Doors Luggage vol\nFigure 10. Rule structure for the conceptual car domain.\nFigure 11. Screen shot from the design support tool, prior to any specified design\nvariables.\nhow the stochastic search heuristics guide the designer to further refine the\ndesign specification.\nThe \u2018accessible luxury\u2019 design scenario specified a combination of design pa-\nrameters and characteristics. The specified design parameters were: the car\nshould have low maintenance costs; be a four-door design; and have a high\n32\nsafety level. The car was to have the following characteristics: it should have a\n\u2018very good\u2019 comfort level and it should have a \u2018good\u2019 acceptability level. This\nspecification was translated into design variable settings, and entered into the\nExcel spreadsheet. Figure 12 is a screen shot taken after the initial design\nspecification was entered, and the VB macro run.\nTable 2 contains the output of the stochastic search tool for each subsequent\nstep after the initial specification was entered. For each step the likelihood of\neach remaining open variable setting is displayed. In the table, the variable\nname in boldface represents the variable that was determined at that step.\nThe value it was set to is similarly in boldface. To summarise, the stochastic\nsearch method suggested the following course of action:\n(1) Technology level: set to \u2018very high\u2019\n(2) Luggage space: set to \u2018high\u2019\n(3) Overall cost of ownership: set to \u2018low\u2019\n(4) Passengers: set to \u20184\u2019\n(5) Purchase price: set to \u2018low\u2019\nIn this scenario there were four occasions where the guidance to selecting the\nvariable value was ambiguous. For example, determining the overall cost of\nownership (\u2018PRICE\u2019) placed equal weight between selecting \u2018low\u2019 or \u2018high\u2019\n(see Step 3 in Table 2). In this case, as the car is intended to be \u2018accessible\u2019,\nso the designer selects \u2018low\u2019. Had the designer selected \u2018high\u2019, this changes\nthe options that are offered two steps later when selecting the purchase price\nwhere the designer is offered \u2018high\u2019 or \u2018very high\u2019. Overall, this represents an\nefficient and flexible search process, illustrating Claim 3.\n33\nFigure 12. Screen shot from the \u2018Accessible Luxury\u2019 design specification and initial\nPDF computation.\n6.2 \u2018Traditional\u2019 design search\nA traditional approach to completing the design specification would in the\nfirst instance need to consider the design parameters and characteristics sep-\narately. While specifying the design parameters remains possible, as this is\ndone directly by the designer, no information is made available immediately\nregarding the likely values the design characteristics would take on. These de-\nsign characteristic values are only to be obtained if the designer has knowledge\nabout the relationship between the design parameters and the characteristics.\nWithout this knowledge, a designer must determine all design parameters and\nthen obtain the design characteristics through more costly detail analysis or\nprototyping.\nThis approach was implemented using a similar user interface. Here, the sub-\njects could specify only the design parameters. When sufficient information\n34\nTable 2\nSearch path for the unspecified design variables for the \u2018Accessible luxury\u2019. Selected\nvariable\/value typeset in bold.\nStep Variable PDF\/Likelihood\n1 buying 0.25 0.25 0.25 0.25\npersons 0 0.33 0.67\nluggage 0 0.33 0.67\nPRICE 0.5 0 0.5 0\nTECH 0 0 0 1\n2 buying 0.25 0.25 0.25 0.25\npersons 0 0.33 0.67\nluggage 0 0.33 0.67\nPRICE 0.5 0 0.5 0\n3 buying 0.25 0.25 0.25 0.25\npersons 0 1 1\nPRICE 0.5 0 0.5 0\n4 buying 1 1 0 0\npersons 0 1 1\n5 buying 1 1 0 0\nwas available, the interface reported the computable design characteristics.\nThe subjects still had the rule structure network to hand (Figure 10), and\ntherefore could use this as a limited guide to the design search process.\nThe reverse approach where the designer specifies the design characteristics\nand then searches for appropriate design parameters is not directly possible\nwith a traditional search. Where little or no knowledge exists, the designer\nmust guess initial design parameter settings and then test. This must be re-\npeated until either a sufficiently good design is achieved or enough knowledge\nis generated to be able to understand the design domain sufficiently well for\nthe purposes of meeting the specification.\n35\nBoth these approaches require performing extensive number of experiments\nwhere the designer lacks knowledge on the nature of the relationships between\nthe various design variable.\n6.3 Summary of the effects of Bayesian design\nThe car design case study provided in this section illustrates the first three of\nthe four claims made in Section 3. The first claim is that the machine learning\nalgorithm induces a suitably good domain model from a set of prior design\nexamples. The algorithm produced a graph structure with one arc too many\nfor it to be a tree structure, as required for a BBN. By using the information\ncontent heuristic, it was possible to identify which arc should be deleted and\nthis resulted in the same structure that generated the data in the first instance.\nThe second claim is that the design search process can begin with a partial\ndesign specification. This was demonstrated by starting the design search with\na specification on a subset of both design parameters and characteristics. The\ninteractive search tool then guided the design refinement process, variable by\nvariable. For each variable, the various possible settings were ordered according\nto the probability of a successful outcome. The designer is encouraged to follow\nthis \u2018path of greatest likelihood\u2019, but is not compelled to. The illustration of\nthis search process thus provides evidence for the third claim, namely that the\ndesign search heuristics lead to an efficient yet flexible design search path.\n36\n7 Empirical comparison of two design tools\nThe stochastic design tool was compared to the \u2018traditional\u2019 design approach\nthrough experiment. In addition to measuring the time taken on each design\ntask and analysing these designs, it was also possible to observe the different\nsearch tactics that emerged from both approaches. The design merit was de-\ntermined by whether the design fulfilled the specification in each case. This\ncomparison between the stochastic design tool and a more traditional approach\nprovides empirical evidence supporting Claims 3 and 4 from Section 3.\n7.1 Methodology\nFundamentally, the experiment tested for differences between the design search\ntime and the nature of the final designs arising from the two different search\ntools. Four different design specifications (or scenarios) were provided with\nthe following characteristics: (1) only design parameters specified (\u2018people car-\nrier\u2019); (2) only design characteristics specified (\u2018sports car\u2019); (3) both design\nparameters and characteristics specified (\u2018accessible luxury\u2019); and (4) an in-\nfeasible specification (\u2018imported car\u2019). The final, \u2018infeasible\u2019 specification was\ndesigned to test the ease of identifying a suitable modification to the specifi-\ncation so that it became feasible.\nThe subjects were randomly allocated one of the two design search tools.\nAfter a briefing on the experiment, they were allowed 45 minutes to complete\nand record the four designs. The designs were recorded using a paper-based\nform. Throughout the experiment, the researcher was available to resolve any\nqueries. The researcher was also in a position to observe directly the use of\n37\nthe two different design tools.\nOn completion of the experiment, the design and time data were collated for\nstatistical analysis. This provided a population-based comparison approach\nfor the two sources of designs. The hypothesis under test was that the results\nof the two different design tools were samples from two different populations\nagainst the null hypothesis being that the two different sets of designs were\nfrom the same population.\n7.2 Execution\nThe design subjects were taken from the third year of a four year Master\u2019s\nof Engineering degree course and randomly divided into two groups. Prior to\nthe design work, the subjects were given an overview of both approaches and\na summary of the design context. This material was also provided as a hand-\nout, should further reference to the material have been needed. In addition,\nthe researcher was available for support if required.\nEach subject was provided with a computer running the appropriate version\nof the design search tool. They were instructed to search the design space for\neach specification until they were satisfied with their conceptual design. This\ndesign was then recorded on the paper forms by noting down the values for\neach of the design variables. In addition, the subjects were asked to record\nstart and finish times.\nThroughout the search process, observations were made on the different usage\nof the two design search tools. This was primarily to evaluate the effectiveness\nof the user interface.\n38\n7.3 Data analysis\nThe data collected from the 17 design subjects was grouped according to\nthe four design tasks. There were nine subjects using the traditional (\u2018rule-\nbased\u2019) design search tool and eight subjects using the stochastic search tool.\nBy considering the means, standard deviations, and population sizes for each\ndesign variable in each task, a two tailed t-test was used to determine the\nprobability that the two sets of design variable observations came from the\nsame population [35].\nThe results are presented in Table 3 grouped by design task. For each design\ntask, the variables are annotated on whether they were part of the specification\nor not along with the t-test probability that the samples from the two different\ndesign tools arose from the same population.\nAs the trial used small samples (nBayes = 8 and nTrad = 9), it shall be assumed\nthat the 10% significance level provides evidence that the observations occur\nfrom different populations. Where this is the case, these have been highlighted\nin Table 3 using boldface. The entries where there is strong evidence both for\n(t \u2264 10%) and against (t \u2265 10%) the hypothesis have been highlighted.\nAlthough there is not conclusive evidence that most variable settings either\nbelong to the same sample population or not, all designs that were produced\nwere of similar merit in the sense that they met the specification (with the\nexception of \u2018Imported Car\u2019, which represented an unfeasible design specifica-\ntion). Thus, it can be concluded that the designs produced using this prototype\nstochastic design search tool are of at least equal merit to those produced using\na more traditional method and hence providing empirical evidence to Claims 3\n39\nTable 3\nResults from the t-test analysis (nBayes = 8 and nTrad = 9). For each design task, the\ntop row denotes with a check (\n\u221a\n) if the variable was part of the design specification.\nThe t-values in boldface represent supporting evidence at the 10% level: t \u2264 10%\nindicates samples arose from different populations and t \u2265 90% indicates samples\narose from the same population.\nbuy mnt drs pers lug safe CMFT PCE TECH CAR\nPeople Carrier\nSpec\n\u221a \u221a \u221a \u221a\nt (%) 41 93 0.5 100 10 30 0.6 38 36 10\nSports Car\nSpec\n\u221a \u221a \u221a\nt (%) 32 67 83 0.6 36 48 6 73 31 67\nAccessible Luxury\nSpec\n\u221a \u221a \u221a \u221a \u221a\nt (%) 19 15 12 12 27 30 8 5 92 7\nImported Car\nSpec\n\u221a \u221a \u221a \u221a \u221a \u221a \u221a\nt (%) 91 56 100 100 57 81 9 39 11 75\nand 4.\n7.4 Model analysis\nA final note must be made regarding the nature of the stochastic model. In\nSection 4, three main data mining algorithm metrics were referred to. These\nmeasure an algorithm\u2019s ability to produce models with validity, understand-\nability, and interestingness [30]. No formal definitions were provided for these\nmetrics, but they serve as useful guidelines for assessment. In this case, the\nvalidity of the model is clear: the algorithm reproduced the source model and\nhence performed well on this measure. Understandability and interestingness\n40\nare more subjective metrics. The model produced is a simple tree structure,\nwhich indicates a relatively easy model to understand as there is a clear and\ntractable path that determines the affect of local changes on the global de-\nsign state. The final metric, interestingness, is not possible to evaluate for this\ndesign domain, due to the artificial nature of this test domain.\n8 Discussion\nThe t-test analysis results in Table 3 does not provide strong evidence either\nfor accepting or rejecting the original hypothesis that there is a difference\nin the resulting designs using this stochastic search tool. In each design task,\nthere is evidence supporting both options. It would be expected that the design\nvariables in each specification would arise from the same population, however\nit can be seen that this conjecture is both strongly supported and rejected. In\nTable 3 an example of this is provided in the \u2018People Carrier\u2019 design, where\nboth \u2018maintenance\u2019 and \u2018luggage\u2019 form part of the specification, but the t-test\nvalues are at opposite ends of the spectrum. To a lesser extent, this would\nalso be expected in the remaining, designer determined, design variables. In\naddition, for a large number of the samples, the t-test does not provide strong\nsupport that the populations are from the same or different populations. This\nfinal issue is in part due to the small sample size that is typical in subject-based\ndesign research.\nAnother possible reason for the lack of clear differentiation, or otherwise, of\nthe two samples arises from the nature of the design problem. The conceptual\ncar problem was selected due to the availability of data and previous analytic\nwork thereon in the machine learning domain. The car design domain is largely\n41\nintuitive, that is, the design model is roughly aligned with what an informed\nengineer would expect of a car design model (for example, increasing the\nnumber of doors on a car results in an increased comfort level). It was not\npossible to measure the effect this had on either search tool.\nThe designers reported little problem with the final design task, the infeasible\ndesign specification. This was not surprising, as these design students were\nable to rapidly identify that this design task was infeasible and were prepared\nto challenge and modify the original specification to be able to produce a\n\u2018workable\u2019 design concept.\nFrom observations made while the designers were searching the design space,\nsome interesting search behaviour emerged. In the traditional, rule-based,\nsearch method designers would complete all the design parameters so that\nthe design characteristics would all be evaluated. This design would typically\nnot meet all the requirements, and so the designer would need to modify the\ndesign parameters. This modification process would typically involve the de-\nsigner \u2018hunting\u2019 around the first attempt by rapidly testing different parameter\nsettings and noting their effect on the design characteristics. The designers\nusing the stochastic search tool also developed a hunting method, however\nrather than observing the direct affect of changing a design variable, these\ndesigners would review the global change on the design space. This enabled\nthe stochastic-based designers to gather more information and better consider\ntheir decisions, however this was at the cost of requiring more time per design.\n42\n9 Conclusions\nThere are two aspects to this stochastic design search method: inducing the\nBBN design model from previous design exemplars and using the BBN as a\nsearch tool. The information based induction algorithm appears to perform\nwell, based on a series of tests using databases taken from known source mod-\nels. The car design database provided an example of this, where it identified\nthe network structure with a single extra arc. This spurious arc was easy to\nidentify, as it was the arc with less information from one of two potential arcs\nthat broke the tree structure. As such, this provides evidence of good model\nvalidity, as discussed in Section 3.\nUsing the BBN induced from the design database as a dynamic morphology\nsearch tool offers an efficient search strategy when the two search heuristics are\nemployed. The feasible design scenarios mainly followed the search heuristics,\nwith the designer rarely \u2018deviating\u2019 from the first ranked choice. Further trials\nare needed where the designer does not follow these suggestions. This would\nsupport the measuring of the model understandability.\nWhere a designer starts with an infeasible design, as per the final design\nscenario, the stochastic search tool simply reports constant zero PDFs for\nthe unspecified variables. All designers referred to the rule structure diagram\nto identify the \u2018neighbouring\u2019 design variables for modification. However, no\nguidance was provided on which would be the best variable to modify in a\nparticular situation. An improvement in the stochastic search tool would be to\nprovide some form of guidance to identify fruitful modifications to the current\npartial over-constrained design specification. This would allow the designer\nto \u2018unblock\u2019 the infeasible design specification using a minimal change to the\n43\noriginal specification. Investigating this aspect will begin to suggest means for\nidentifying the interestingness of the models.\nUsing the BBNs with the two search heuristics provides an efficient concep-\ntual design search tool. The two heuristics aid the designer to first identify\nthe next design variable that should be determined, followed by which value\nwould provide the most robust design. A powerful aspect of the BBN approach\nis that the designer need not distinguish design parameters from design char-\nacteristics. This allows a designer to specify design characteristics that are\nnot normally under a designer\u2019s direct control. However, it must be empha-\nsised that the designer is not constrained by the design heuristics and is free\nto explore the morphological design space in other sequences. This offers the\ndesigner the flexibility that is essential during the conceptual design stage.\n10 Future work\nFurther work is required in a number of areas. Research is needed on how to\ndevelop a more intuitive user interface to the BBN. There is a need for a metric\nfor PDF \u2018spikiness\u2019 versus \u2018flatness\u2019. This is critical as it will not be possible\nfor a designer to identify the narrowest of PDFs in a design domain with\nconsiderably more variables. Another key area for further work is to develop\nmethods for identifying design variables in infeasible design specifications that\ncould be fruitfully slackened. Currently, the designer only has the network to\nidentify neighbouring variables but no information on which variable should\nbe modified. Alternatively, designers could benefit from better understanding\nof the meaning of the PDF profiles. It is not clear how much experience is\nneeded with this design data feedback method before a designer can rapidly\n44\ninterpret the presented information.\nThe stochastic design search tool was compared to a rule-based tool that\nwould rapidly evaluate designs as they were created. This is not a realistic\nsituation, and provided a challenging datum to compare the stochastic search\ntool against. Further experimentation with more realistic conceptual evalua-\ntion tools should be performed.\nFinally, this work was based on an artificial database with a fully tested set\nof designs (in terms of the design parameters). Further investigations are re-\nquired where this is not the case, as this represents real design situations.\nThis should also involve a less \u2018intuitive\u2019 case, where a typical designer would\nnot be expected to have little prior expectation on how the design domain is\nstructured or behaves.\nAcknowledgements\nThis research is funded by a Nuffield Foundation Award to Newly Appointed\nLecturers in Science, Engineering and Mathematics (Grant number: NAL\/008-\n46\/G). Thanks must also be given to the design students who provided their\ntime to support the empirical work.\nReferences\n[1] G. Pahl, W. Beitz, Engineering Design: A Systematic Approach, 2nd Edition,\nSpringer-Verlag London, 1996.\n[2] N. Cross, Engineering Design Methods: Strategies for Product Design, John\n45\nWiley, Chichester, UK, 1994.\n[3] K. T. Ulrich, S. D. Eppinger, Product Design and Development, 2nd Edition,\nMcGraw-Hill, Boston, MA, 2000.\n[4] B. Hollins, S. Pugh, Successful Product Design, Butterworths, 1990.\n[5] F. Zwicky, The morphological approach to discovery, invention, research and\nconstruction, in: F. Zwicky, A. G. Wilson (Eds.), New Methods of Thought and\nProcedure, Springer-Verlag, 1967.\n[6] Y. Reich, Design knowledge acquisition: Task analysis and a partial\nimplementation, Knowledge Acquisition 3 (3) (1991) 237\u2013254.\n[7] S. Pugh, Total Design, Addison-Wesley, 1990.\n[8] D. R. Wallace, M. J. Jakiela, W. C. Flowers, Design search under probabilistic\nspecification using genetic algorithms, Computer Aided Design 28 (5) (1996)\n405\u2013421.\n[9] G. Lomdardi, G. Mengali, F. Beux, A hybrid genetic based optimization\nprocedure for aircraft conceptual analysis, Optimization and Engineering 7 (2)\n(2006) 151\u2013171.\n[10] R. S. R. Gorla, Probabilistic heat transfer and structural analysis of a turbine\nblade, International Journal of Turbo and Jet-engines 22 (1) (2005) 1\u201311.\n[11] G. Taguchi, E. A. Elsayed, T. C. Hsiang, Quality Engineering in Production\nSystems, McGraw-Hill, 1989.\n[12] A. Ziv-Av, Y. Reich, SOS \u2014 subjective objective system for generating optimal\nproduct concepts, Design Studies 26 (5) (2005) 509\u2013533.\n[13] P. J. Clarkson, J. R. Hamilton, Signposting: a parameter-driven task-based\nmodel of the design process, Research in Engineering Design 12 (1) (2000) 18\u2013\n38.\n46\n[14] P. J. Clarkson, C. Simons, C. M. Eckert, Predicting change propagation in\ncomplex design, Journal of Mechanical Design 126 (5) (2004) 788\u2013797.\n[15] S. Gentil, J. Montmain, Hierarchical representation of complex systems for\nsupporting human decision making, Advanced Engineering Informatics 18 (3)\n(2004) 143\u2013159.\n[16] J. E. Pacheco, C. H. Amon, S. Finger, Bayesian surrogates applied to conceptual\nstages of the engineering design process, Journal of Mechanical Design 125 (4)\n(2003) 664\u2013672.\n[17] N. Kovac, I. Sarajcev, D. Poijak, A numerical-stochastic technique for\nundergraound cable system design, IEE Proceedings: Generation, Transmission\nand Distribution 153 (2) (2006) 181\u2013186.\n[18] G. A. Miller, The magical number seven, plus or minus two: some limits on our\ncapacity for processing information, Psychological Review 63 (1956) 81\u201397.\n[19] L. Katafygiotis, S. H. Cheung, Domain decomposition method for calculating\nthe failure probability of linear dynamic systems subjected to Gaussian\nstochastic loads, ASCE Journal of Engineering Mechanics 132 (5) (2006) 475\u2013\n486.\n[20] H. Apel, A. H. Thieken, B. Merz, G. Bloschl, A probabilistic modelling system\nfor assessing flood risks, Natural Hazards 38 (1\u20132) (2006) 79\u2013100.\n[21] N. V. Sahinidis, Optimization under uncertainty: State-of-the art and\nopportunities, Computers & Chemical Engineering 28 (6\u20137) (2004) 971\u2013983.\n[22] D. J. Pons, J. K. Raine, Simulation of key performance characteristics under\nuncertainty, Proceedings of the Institution of Mechanical Engineers Part B:\nJournal of Engineering Manufacture 219 (1) (2005) 151\u2013162.\n[23] I. G. Osio, C. H. Amon, An engineering design methodology with multistage\nBayesian surrogates and optimal sampling, Research in Engineering Design 8 (4)\n47\n(1996) 189\u2013206.\n[24] V. C. P. Chen, K. L. Tsui, R. R. Barton, M. Meckesheimer, A review on design,\nmodelling and applications of computer experiments, IIE Transactions 38 (4)\n(2006) 273\u2013291.\n[25] F. V. Jensen, Bayesian Networks and Decision Graphs, Statistics for\nEngineering and Information Science, Springer, New York, NY, 2001.\n[26] B. H. Thacker, D. S. Riha, S. H. K. Fitch, L. J. Huyse, J. B. Pleming,\nProbabilistic engineering analysis using the NESSUS software, Structural Safety\n28 (1\u20132) (2006) 83\u2013107.\n[27] S. H. Cho, S. D. Eppinger, A simulation-based process model for managing\ncomplex design projects, IEEE Transactions on Engineering Management 52 (3)\n(2005) 316\u2013328.\n[28] S. S. Farid, J. Washbrook, N. J. Titchener-Hooker, Combining multiple\nquantitative and qualitative goals when assessing biomanufacturing strategies\nunder uncertainty, Biotechnology Progress 21 (4) (2005) 1183\u20131191.\n[29] T. N. S. Murdoch, N. R. Ball, Machine learning in configuration design,\nArtificial Intelligence for Engineering Design, Analysis and Manufacturing 10\n(1996) 101\u2013113.\n[30] S. Mitra, S. K. Pal, Data mining in soft computing framework: A survey, IEEE\nTransactions on Neural Networks 13 (1) (2002) 3\u201314.\n[31] N. P. Suh, The Principles of Design, Oxford Series on Advanced Manufacturing,\nOxford University Press, Oxford, UK, 1990.\n[32] L. Qu, L. Li, J. Lee, Enhanced diagnostic certainty using information entropy\ntheory, Advanced Engineering Informatics 17 (3\u20134) (2003) 141\u2013150.\n48\n[33] J. Chen, R. Greiner, J. Kelly, D. Bell, W. Liu, Learning bayesian networks from\ndata: An information-theory based approach, Artificial Intelligence 137 (1\u20132)\n(2002) 43\u201390.\n[34] C. L. Blake, C. J. Merz, UCI repository of machine learning databases, http:\n\/\/www.ics.uci.edu\/\u223cmlearn\/MLRepository.html (1998).\n[35] E. Kreyszig, Advanced Engineering Mathematics, eighth Edition, Wiley, New\nYork, NY, 1999.\n49\n"}