{"doi":"10.1016\/j.tcs.2003.12.015","coreId":"66667","oai":"oai:dro.dur.ac.uk.OAI2:597","identifiers":["oai:dro.dur.ac.uk.OAI2:597","10.1016\/j.tcs.2003.12.015"],"title":"Dichotomies for classes of homomorphism problems involving unary functions.","authors":["Feder,  T.","Madelaine,  F. R.","Stewart,  I. A."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-02","abstract":"We study non-uniform constraint satisfaction problems where the underlying signature contains constant and function symbols as well as relation symbols. Amongst our results are the following. We establish a dichotomy result for the class of non-uniform constraint satisfaction problems over the signature consisting of one unary function symbol by showing that every such problem is either complete for L, via very restricted logical reductions, or trivial (depending upon whether the template function has a fixed point or not). We show that the class of non-uniform constraint satisfaction problems whose templates are structures over the signature $\\lambda_2$ consisting of two unary function symbols reflects the full computational significance of the class of non-uniform constraint satisfaction problems over relational structures. We prove a dichotomy result for the class of non-uniform constraint satisfaction problems where the template is a $\\lambda_2$-structure with the property that the two unary functions involved are the reverse of one another, in that every such problem is either solvable in polynomial-time or NP-complete. Finally, we extend some of our results to the situation where instances of non-uniform constraint satisfaction problems come equipped with lists of elements of the template structure which restrict the set of allowable homomorphisms","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66667.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/597\/1\/597.pdf","pdfHashValue":"7355d7b68540cb3033b6e55701318b7b01150923","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:597<\/identifier><datestamp>\n      2011-06-03T16:15:03Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Dichotomies for classes of homomorphism problems involving unary functions.<\/dc:title><dc:creator>\n        Feder,  T.<\/dc:creator><dc:creator>\n        Madelaine,  F. R.<\/dc:creator><dc:creator>\n        Stewart,  I. A.<\/dc:creator><dc:description>\n        We study non-uniform constraint satisfaction problems where the underlying signature contains constant and function symbols as well as relation symbols. Amongst our results are the following. We establish a dichotomy result for the class of non-uniform constraint satisfaction problems over the signature consisting of one unary function symbol by showing that every such problem is either complete for L, via very restricted logical reductions, or trivial (depending upon whether the template function has a fixed point or not). We show that the class of non-uniform constraint satisfaction problems whose templates are structures over the signature $\\lambda_2$ consisting of two unary function symbols reflects the full computational significance of the class of non-uniform constraint satisfaction problems over relational structures. We prove a dichotomy result for the class of non-uniform constraint satisfaction problems where the template is a $\\lambda_2$-structure with the property that the two unary functions involved are the reverse of one another, in that every such problem is either solvable in polynomial-time or NP-complete. Finally, we extend some of our results to the situation where instances of non-uniform constraint satisfaction problems come equipped with lists of elements of the template structure which restrict the set of allowable homomorphisms.<\/dc:description><dc:subject>\n        Computational complexity<\/dc:subject><dc:subject>\n         Constraint satisfaction<\/dc:subject><dc:subject>\n         Dichotomies.<\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        Theoretical computer science, 2004, Vol.314(1-2), pp.1-43 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2004-02<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:597<\/dc:identifier><dc:identifier>\n        issn:0304-3975<\/dc:identifier><dc:identifier>\n        doi:10.1016\/j.tcs.2003.12.015<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/597\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1016\/j.tcs.2003.12.015<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/597\/1\/597.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0304-3975","issn:0304-3975"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":["Computational complexity","Constraint satisfaction","Dichotomies."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n10 October 2008\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nFeder, T. and Madelaine, F. R. and Stewart, I. A. (2004) \u2019Dichotomies for classes of homomorphism problems\ninvolving unary functions.\u2019, Theoretical computer science., 314 (1-2). pp. 1-43.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.tcs.2003.12.015\nPublisher\u2019s copyright statement:\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nDichotomies for classes of homomorphism problems\ninvolving unary functions\nToma\u00b4s Feder\u2217,\n268 Waverley St., Palo Alto, CA 94301, U.S.A.\nFlorent Madelaine\u2020,\nDe\u00b4pt. math-info BP 7151 15, Universite\u00b4 de La Re\u00b4union,\nav. Rene\u00b4 Cassin, 97715 Saint Denis, France.\nIain A. Stewart\u2021,\nDepartment of Computer Science, University of Durham,\nScience Labs, South Road, Durham DH1 3LE, U.K.\nNovember 18, 2003\nAbstract\nWe study non-uniform constraint satisfaction problems where the underlying signa-\nture contains constant and function symbols as well as relation symbols. Amongst\nour results are the following. We establish a dichotomy result for the class of\nnon-uniform constraint satisfaction problems over the signature consisting of one\nunary function symbol by showing that every such problem is either complete for\nL, via very restricted logical reductions, or trivial (depending upon whether the\ntemplate function has a fixed point or not). We show that the class of non-uniform\nconstraint satisfaction problems whose templates are structures over the signature\n\u03bb2 consisting of two unary function symbols reflects the full computational signif-\nicance of the class of non-uniform constraint satisfaction problems over relational\nstructures. We prove a dichotomy result for the class of non-uniform constraint\nsatisfaction problems where the template is a \u03bb2-structure with the property that\n\u2217e-mail: tomas@theory.stanford.edu\n\u2020e-mail: florent.madelaine@univ-reunion.fr. Much of this work was undertaken\nwhilst at the University of Leicester.\n\u2021e-mail: i.a.stewart@durham.ac.uk. Much of this work was undertaken whilst at the\nUniversity of Leicester.\n1\nthe two unary functions involved are the reverse of one another, in that every such\nproblem is either solvable in polynomial-time or NP-complete. Finally, we extend\nsome of our results to the situation where instances of non-uniform constraint sat-\nisfaction problems come equipped with lists of elements of the template structure\nwhich restrict the set of allowable homomorphisms.\n1 Introduction\nConstraint satisfaction problems consist of finding assignments of values to\nvariables subject to constraints on the values which can be simultaneously\nassigned to certain specified subsets of variables [23]. They are of great\nimportance in computer science and artificial intelligence, and have strong\nlinks with database theory, combinatorics and universal algebra. For ex-\nample, the general constraint satisfaction problem is nothing other than\nthe conjunctive-query containment problem from database theory and the\nhomomorphism problem from combinatorics [2]; and there is a strong link\nbetween the tractability of constraint satisfaction problems and the study\nof the closure of relations under certain operations in universal algebra [16].\nThis diversity has meant that the study of these constraint satisfaction prob-\nlems has progressed on a number of different fronts and according to different\nmotivations.\nOur formulation of constraint satisfaction involves the existence of a\nhomomorphism from one finite structure to another, and in this paper we\nare concerned with the computational complexity of constraint satisfaction\nproblems when the structures involved are restricted. The general constraint\nsatisfaction problem, CSP, has: as its instances pairs of finite structures\n(A,B) over the same signature; and as its yes-instances instances (A,B)\nfor which there is a homomorphism from A to B. The general constraint\nsatisfaction problem is trivially in NP (non-deterministic polynomial-time)\nand is easily shown to be NP-complete (via polynomial-time many-one re-\nductions); and it is usual to restrict the problem so that all finite structures\ncome from some specific class of finite structures or, further, so that the sec-\nond component, the template, of any instance is some fixed finite structure.\nThe former problems are called uniform constraint satisfaction problems, as\nthe two structures in an instance can be arbitrarily drawn from the given\nclass of structures, whilst the latter problems are called non-uniform con-\nstraint satisfaction problems, as the second structure in an instance must\nbe a given fixed structure (rather than thinking of instances of non-uniform\nconstraint satisfaction problems as pairs of finite structures (A, T ), with T\n2\nfixed, we simply think of them as finite structuresA, with yes-instances those\ninstances A for which there exists a homomorphism to T ). The computa-\ntional complexity of these restricted problems is then studied with the ulti-\nmate goal being a classification as to the conditions under which a (uniform\nor non-uniform) constraint satisfaction problem has a given computational\ncomplexity.\nThere are two outstanding and well-known results which illustrate this\nattempt at classification. The first was established by Schaefer [21] who\ncompletely classified the complexity of a non-uniform constraint satisfaction\nproblem when the template is a finite structure whose domain consists of\ntwo elements, i.e., the template is a Boolean structure. He showed that if\nthe template belongs to one of six specific classes of Boolean structures then\nthe non-uniform constraint satisfaction problem is solvable in polynomial-\ntime, otherwise it is NP-complete. Note the dichotomy here: a non-uniform\nconstraint satisfaction problem with a Boolean template is either inP (deter-\nministic polynomial-time) or is NP-complete (recall that, in general, if P 6=\nNP then there is an infinite collection of distinct classes of polynomial-time\nequivalent problems between P and NP: see [11], for example). The second\nresult is due to Hell and Nes\u02c7etr\u02c7il [13] who showed that if all structures in-\nvolved are finite undirected graphs (without self-loops) then the non-uniform\nconstraint satisfaction problem is solvable in polynomial-time if the template\nis bipartite, otherwise it is NP-complete (again, note the dichotomy).\nIt is with such dichotomy results that we are concerned in this paper.\nApart from those established by Hell and Nes\u02c7etr\u02c7il and by Schaefer, there\nare many others, of one flavour or another: see [1, 3, 5, 6, 8, 9, 10, 19, 20]\nfor a selection. Let us discuss some of these results further as they have a\ndirect bearing on our contributions and provide much of our motivation.\nPerhaps the focal paper as regards the classification of non-uniform con-\nstraint satisfaction problems is [10] for it was in that paper that Feder and\nVardi (inspired by the results of Hell and Nes\u02c7etr\u02c7il and of Schaefer) posed\nthe question of whether it might be the case that every non-uniform con-\nstraint satisfaction problem is solvable in polynomial-time or NP-complete.\nIn more detail, Feder and Vardi essentially: considered the relationship be-\ntween the class of non-uniform constraint satisfaction problems and a logic,\nMMSNP, embodying essential characteristics of constraint satisfaction; con-\nsidered sub-classes of non-uniform constraint satisfaction problems which\nreflect the full computational significance of the whole class; and studied\nrequirements for tractability as regards non-uniform constraint satisfaction\nproblems. It is the second of these investigations which is particularly rele-\nvant to our studies; and key is Feder and Vardi\u2019s result that the problem of\n3\ndeciding whether the class of non-uniform constraint satisfaction problems\nover relational structures has a dichotomy is equivalent to that of deciding\nwhether the class of non-uniform constraint satisfaction problems involving\ndigraphs has a dichotomy (we later make precise our definitions of classes\nsuch as these and of our notion of equivalence: indeed, definitions of all con-\ncepts mentioned here are defined in full later on). That is, the (sub-)class\nof non-uniform constraint satisfaction problems consisting of the class of\nnon-uniform constraint satisfaction problems involving digraphs reflects the\nfull computational significance of the class of non-uniform constraint sat-\nisfaction problems over relational structures (in fact, Feder and Vardi also\nprovided other even more restricted classes of non-uniform constraint satis-\nfaction problems involving digraphs which reflect the full computational sig-\nnificance of the class of relational non-uniform constraint satisfaction prob-\nlems, e.g., the class where the template digraph is necessarily balanced).\nWhilst Feder and Vardi\u2019s question as to whether the class of non-uniform\nconstraint satisfaction problems exhibits a dichotomy is still unanswered,\nsignificant partial positive results have been proven, notably, though not\nalways, for classes where the template is a digraph of a particular type (we\nrefer the reader to Feder and Vardi\u2019s equivalence result mentioned above).\nFor example, in [6] it was proven that the class of non-uniform constraint\nsatisfaction problems where the template is a digraph in the form of an ori-\nented cycle has a dichotomy. Furthermore, the search for a classification\nof non-uniform constraint satisfaction problems has resulted in the study\nof a number of related concepts. For example, if every instance A of some\nnon-uniform constraint satisfaction problem comes complete with a list Uu\nof elements of the template T , for every element u \u2208 |A|, then the problem\nof deciding whether there is a homomorphism \u03d5 from A to T with the ad-\nditional property that for every element u \u2208 |A|, \u03d5(u) \u2208 Uu, is known as a\nlist homomorphism problem. It has been proven that every list homomor-\nphism problem where the template is a reflexive undirected graph (that is,\nevery vertex has a self-loop) is solvable in polynomial-time, if the template\nis an interval graph, and NP-complete otherwise [7]. If the template is an\nirreflexive undirected graph (that is, no vertex has a self-loop) then the list\nhomomorphism problem is solvable in polynomial-time, if the complement\nof the template is a circular arc graph of clique cover number 2, and NP-\ncomplete otherwise [8]. Finally, if the template is a general undirected graph\n(that is, a vertex may or may not have a self-loop) then it is still the case\nthat the list homomorphism problem is either solvable in polynomial-time\nor NP-complete [9].\nAll of the results mentioned above concern non-uniform constraint satis-\n4\nfaction problems over relational structures. Our study in this paper is essen-\ntially of non-uniform constraint satisfaction problems where the underlying\nsignature contains constant and function symbols as well as relation sym-\nbols; and our results can be summarized as follows. After presenting basic\ndefinitions and concepts in Section 2, in Section 3 we consider the class of\nnon-uniform constraint satisfaction problems over a signature consisting of\none unary function symbol. We show a dichotomy in that every such problem\nis either complete for L (deterministic log-space), via very restricted logical\nreductions, or trivial (depending upon whether the template function has a\nfixed point or not). In Sections 4 and 5, we consider the class of non-uniform\nconstraint satisfaction problems over a signature \u03bb2 consisting of two unary\nfunction symbols, as well as over signatures consisting of a mix of constant,\nfunction and relation symbols. Amongst other results, we show that the\nclass of non-uniform constraint satisfaction problems whose templates are\n\u03bb2-structures reflects the full computational significance of the class of non-\nuniform constraint satisfaction problems over relational structures; and we\nestablish similar results when the template is even further restricted. In Sec-\ntion 6, we prove a dichotomy result for the class of non-uniform constraint\nsatisfaction problems where the template is a \u03bb2-structure with the property\nthat the two unary functions involved are the reverse of one another. Finally,\nin Section 7 we extend some of our results to the situation where instances\nof non-uniform constraint satisfaction problems come equipped with lists.\nIn particular: we show that any list homomorphism problem where the tem-\nplate consists of a single unary function is solvable in polynomial-time; and\nwe prove that there is a dichotomy result for the class of list homomorphism\nproblems where the template consists of an arbitrary number of unary func-\ntions (the complexity of such a list homomorphism problem is determined\nby whether the template admits a choice majority function, similarly to as\nin [7, 8, 9]).\n2 Basic definitions\nA signature consists of a finite collection of constant symbols, function sym-\nbols and relation symbols, and each function and relation symbol has an\nassociated arity. A finite structure A over the signature \u03c3, or \u03c3-structure,\nconsists of a finite set |A|, the domain or universe, together with a con-\nstant cA (resp. function fA, relation RA) for every constant symbol c (resp.\nfunction symbol f , relation symbol R) of \u03c3, with functions and relations\nbeing of the appropriate arity (we often dispense with superscripts in the\n5\nnames of our constants, functions and relations when it is clear as to which\nstructure we are dealing with). The size of a structure A is the size of the\ndomain and is denoted |A| also. A structure is relational if it is over a signa-\nture consisting entirely of relation symbols (which we refer to as a relational\nsignature).\nA homomorphism \u03d5 : A \u2192 B from a \u03c3-structure A to a \u03c3-structure B is\na map \u03d5 : |A| \u2192 |B| such that:\n\u2022 any constant of A is mapped to the corresponding constant of B;\n\u2022 if f is a function symbol of arity a then\nfA(u1, u2, . . . , ua) = v \u21d2 f\nB(\u03d5(u1), \u03d5(u2), . . . , \u03d5(ua)) = \u03d5(v),\nfor all u1, u2, . . . , ua, v \u2208 |A|;\n\u2022 if R is a relation symbol of arity b then\nRA(u1, u2, . . . , ub) holds \u21d2 R\nB(\u03d5(u1), \u03d5(u2), . . . , \u03d5(ub)) holds,\nfor all u1, u2, . . . , ub \u2208 |A|.\nIf there exists a homomorphism from A to B then we write A \u2192 B.\nLet C be a class of finite structures. The uniform constraint satisfaction\nproblem CSPC has: as its instances pairs (A,B) of structures from C over\nthe same signature; and as its yes-instances those instances (A,B) for which\nthere exists a homomorphism from A to B. The size of an instance (A,B)\nis |A| + |B|. If all structures in C are over the same signature and T \u2208 C\nthen the non-uniform constraint satisfaction problem CSPC(T ) has: as its\ninstances structures A \u2208 C; and as its yes-instances those instances A for\nwhich there exists a homomorphism from A to T . The size of an instance\nA is |A|. If C is the class of all \u03c3-structures and T is a \u03c3-structure then\nwe abbreviate CSPC(T ) by CSP(T ). We should add that the individual\ntractability of an infinite collection of non-uniform constraint satisfaction\nproblems {CSPC(T ) : T \u2208 C} does not automatically yield the tractabil-\nity of the uniform constraint satisfaction problem CSPC; for it may be the\ncase that the size of the template, whilst a constant in a non-uniform prob-\nlem, might play an exponential role in some time bound (see [17] for an\nexamination of this issue).\nWe shall be involved with problems solvable in L and complete for this\ncomplexity class. As regards completeness, the notion of reduction we work\nwith comes from finite model theory and is the quantifier-free projection.\n6\nBefore giving a definition of a quantifier-free projection, we present an exam-\nple of a quantifier-free projection from one problem to another. As it turns\nout, we will need this actual reduction later on. The reader is referred to, for\nexample, [14, 15, 22] for more on quantifier-free projections and other logical\nreductions (especially [15]), and their relevance as low-resource reductions:\nwe only sketch the issues here.\nLet the signature \u03c32++ consist of the binary relation symbol E and the\ntwo constant symbols c and d. We can think of a \u03c32++-structure as a di-\ngraph, possibly with self-loops, with two designated vertices (which may be\nidentical). The problem DTC0,1 has: as its instances the class of \u03c32++-\nstructures which, when considered as digraphs with self-loops, have the\nproperty that every vertex has out-degree at most 1; and as its yes-instances\nthose instances with the property that there is a path in the digraph from the\nvertex c to the vertex d. The problem DTC1 has: as its instances the class\nof \u03c32++-structures which, when considered as digraphs with self-loops, have\nthe property that every vertex has degree exactly 1; and as its yes-instances\nthose instances with the property that there is a path in the digraph from\nthe vertex c to the vertex d.\nWe shall derive four quantifier-free formulae over the signature \u03c32++ and\nwe shall use our formulae to describe, given an instance A of DTC0,1, an\ninstance \u03c1(A) of DTC1: the first formula will define the vertex set of \u03c1(A);\nthe second formula will describe the edge relation of our instance; and the\nthird and fourth formulae will describe the source and target vertices.\nThe domain of \u03c1(A) is |A|2. We assume that, regardless of the signa-\nture, we always have a binary relation succ at our disposal that is always\ninterpreted as a successor relation on the domain of any structure, i.e., as\na relation of the form:\n{(ij , ij+1) : j = 0, 1, . . . , n\u2212 1},\nwhen the domain of a structure of size n is {i0, i1, . . . , in\u22121}, and also two\nconstant symbols, 0 and max, that are always interpreted as the least\nand greatest elements, respectively, of the successor relation succ (more\nof this successor relation later). Let us suppose for simplicity that the\nelements of |A| are {0, 1, . . . , n \u2212 1} and abbreviate \u2018succ(u,w)\u2019 by \u2018w =\nu + 1\u2019. The vertices of {(u,w) : w = 0, 1, . . . , n \u2212 1} will form a path\n(u, 0), (u, 1), . . . , (u, n \u2212 1) in \u03c1(A), with a self-loop at (u, n \u2212 1), except\nthat:\n\u2022 if (u,w) is an edge of EA, where u 6= w, then there is no edge\n((u,w), (u,w + 1)) in \u03c1(A) nor self-loop ((u, n \u2212 1), (u, n \u2212 1)), if\n7\nw = n\u2212 1, but there is an edge ((u,w), (w, 0)) in \u03c1(A); and\n\u2022 if (u, u) is an edge of EA then there is no edge ((u, u), (u, u + 1)) in\n\u03c1(A) but there is a self-loop ((u, u), (u, u)).\nThe source vertex of \u03c1(A) is the vertex (cA, 0) and the target vertex is\n(dA, 0). It is easy to see that an instance A of DTC0,1 is a yes-instance\nif, and only if, the instance \u03c1(A) is a yes-instance of DTC1 (as whenever\nu 6= w, there is an edge (u,w) in EA if, and only if, there is a path from\nvertex (u, 0) to vertex (w, 0) in \u03c1(A)).\nThe formulae \u03c80, \u03c8E , \u03c8c and \u03c8d describing the above construction are\nas follows:\n\u03c80(x1, x2) \u2261 x1 = x1\n\u03c8E(x1, x2, y1, y2) \u2261 (x1 = y1 \u2227 y2 = x2 + 1 \u2227 \u00acE(x1, x2))\n\u2228(x1 = y1 \u2227 x2 = y2 = max \u2227 \u00acE(x1,max))\n\u2228(x1 6= x2 \u2227 y1 = x2 \u2227 y2 = 0 \u2227 E(x1, x2))\n\u2228(x1 = x2 \u2227 x1 = y1 \u2227 x2 = y2 \u2227 E(x1, x2))\n\u03c8c(x1, x2) \u2261 x1 = c \u2227 x2 = 0\n\u03c8d(x1, x2) \u2261 x1 = d \u2227 x2 = 0\nThe formula \u03c80(x1, x2) tells us that the vertex set of \u03c1(A) is the whole of\n|A|2 (it might have restricted the vertex set to be some appropriately defined\nsubset of |A|2 but in this case didn\u2019t); and \u03c8E , \u03c8c and \u03c8d describe the edge\nrelation, the source vertex and the target vertex of \u03c1(A), respectively.\nSo, we can say that DTC1 is a quantifier-free first-order translation of\nDTC0,1 (as the defining formulae are quantifier-free first-order); but we can\nactually say more. Note that the above formula \u03c8E is of the following form:\n\u2228\n{(\u03b1i \u2227 \u03b2i) : i = 1, 2, . . . , k},\nfor some k \u2265 1, where:\n\u2022 each \u03b1i is a conjunction of atoms and negated atoms not involving any\nrelation or function symbols of the underlying signature (\u03c32++ in the\nillustration above);\n\u2022 the \u03b1i\u2019s are mutually exclusive, i.e., for any valuation on the variables\n(and constants) of any \u03b1i and \u03b1j , where i 6= j, it is not the case that\nboth \u03b1i and \u03b1j hold;\n\u2022 each \u03b2i is an atom or a negated atom (over the underlying signature).\n8\nIndeed, the formulae \u03c8c and \u03c8d are trivially of this form too; and, further-\nmore, \u03c80 is a quantifier-free first-order formula not involving any relation or\nfunction symbols of the underlying signature. Hence, there is a quantifier-\nfree projection from the problem DTC0,1 to the problem DTC1. It was\nproven in [22] that DTC0,1 is complete for L via quantifier-free projections;\nand consequently DTC1 is also complete for L via quantifier-free projections.\nQuantifier-free projections are so called because the defining formulae\nare quantifier-free first-order and any \u2018bit\u2019 of a target instance, e.g., edge of\n\u03c1(A), above, depends only upon at most one \u2018bit\u2019 of the source structure,\ne.g., edge of A, above. They are extremely restricted reductions between\nproblems and can easily be translated into other restricted circuit-based\nor model-based reductions, e.g., logtime-uniform NC1-reductions, used in\ncomplexity theory (see [14]). The (built-in) successor relation and the two\nassociated constants give us an ordering of our data which often enables us\nto model machine-based computations where all data (such as input strings\nand instantaneous descriptions) is ordered.\nWe have one final remark: in our example above, we used quantifier-\nfree first-order formulae to describe an edge relation and two constants.\nWe can equally well use such formulae to describe functions by treating an\nm-ary function f as an (m + 1)-ary relation Rf where for any elements\nu1, u2, . . . , um, there exists exactly one w such that Rf (u1, u2, . . . , um, w)\nholds (constants, i.e., 0-ary functions, are described in this way too).\n3 One unary function\nIn this section we show that the class of non-uniform constraint satisfaction\nproblems with template a unary function has a dichotomy: such a problem\nis either L-complete (via quantifier-free projections) or trivial.\nLet \u03bb1 be the signature consisting of one unary function symbol f . The\ndecision problem Hom-Alg1 is the problem CSPC, where C is the class of all\n\u03bb1-structures (we introduce the notation Hom-Alg , here and in what follows,\nto accentuate the algebraic aspect of function symbols).\nLet A be a \u03bb1-structure and let \u03c32 = \u3008E\u3009, where E is a binary rela-\ntion symbol (so, \u03c32-structures are digraphs, possibly with self-loops). The\ndigraph of A is the \u03c32-structure A\u02d9 = \u3008|A|, E\u3009, where E(u,w) holds if, and\nonly if, f(u) = w (note that it may be the case that E(u, u) holds in A\u02d9).\nThe proof of the following lemma is trivial.\nLemma 1 Let A and B be \u03bb1-structures. Then A \u2192 B if, and only if,\nA\u02d9 \u2192 B\u02d9.\n9\nProposition 2 The problem Hom-Alg1 is in L.\nProof By Lemma 1, we can assume that we are given pairs of digraphs of\nunary functions as instances rather than pairs of unary functions.\nLet A\u02d9 be the digraph of some unary function A. Then, in general, A\u02d9\nconsists of a collection of connected components where each component is\na directed cycle, which may have any length greater than 0 (and so may\nbe a self-loop), some of whose vertices are roots of in-trees (our notion of\nconnectivity in a digraph is with respect to the underlying undirected graph).\nThese components can be visualized as in Fig. 1. We call these components\ncycles with pendant in-trees. We define the length of a cycle with pendant\nin-trees as the length of the directed cycle.\n.\nan in-tree a directed cycle with pendant in-trees\ndirected cycle\nin-trees\n. ..\n......\n..\n.\n.\n.\nFigure 1. The components of the digraph of a unary function.\nLet (A\u02d9, B\u02d9) be a pair of digraphs of unary functions where |A\u02d9|+ |B\u02d9| is n.\nSuppose that there is a homomorphism taking some connected component\nA0 of A\u02d9 to a connected component B0 of B\u02d9. If A0 is a cycle with pendant\nin-trees of length \u03b3 then B0 must be a cycle with pendant in-trees of length\n\u03b4 where \u03b4 divides \u03b3. Furthermore, if A0 and B0 are cycles with pendant\nin-trees of lengths \u03b3 and \u03b4, respectively, and \u03b4 divides \u03b3 then there is a\nhomomorphism from A0 to B0. Hence, the following is a necessary and\nsufficient condition for a homomorphism from A\u02d9 to B\u02d9 to exist.\n\u2022 For every cycle with pendant in-trees of length \u03b3 in A\u02d9, there must\nexist a cycle with pendant in-trees of length \u03b4 in B\u02d9 where \u03b4 divides \u03b3.\nThis condition can easily be verified using O(logn) space. For example,\nwe can ascertain whether a vertex u lies on the cycle of a cycle with pendant\n10\nin-trees in A\u02d9 by walking along the path emanating from u and stopping after\nn moves (when u doesn\u2019t lie on a cycle) or after we have returned to u (when\nu does lie on a cycle). By counting as we walk, we obtain the length of the\ncycle (if u lies on a cycle). We can then work through the vertices of B\u02d9\nchecking to see whether they lie on the cycle of a cycle with pendant in-\ntrees in B\u02d9; and if a vertex does lie on the cycle of a cycle with pendant\nin-trees then we can check whether the length of this cycle divides c. Hence,\nthe problem Hom-Alg1 \u2208 L.\nProposition 3 The problem Hom-Alg1 is L-hard (via quantifier-free pro-\njections).\nProof Let A be an instance of DTC1 (and so is a \u03c32-structure). Define\nthe unary function fA as follows. The domain of fA is |A|\n2 \u00d7 {0, 1} and:\n\u2022 if c = d then:\n\u2013 fA((u,w, b)) = (c, c, 0), for all (u,w, b) \u2208 |A|\n2 \u00d7 {0, 1};\n\u2022 if c 6= d then:\n\u2013 if (u,w) \u2208 E where u 6= d, w 6= c and u 6= w then fA((u, u, 0)) =\n(u,w, 0) and fA((u,w, 0)) = (w,w, 0)\n\u2013 if (u, u) \u2208 E where u 6= d then fA((u, u, 0)) = (u, u, 1) and\nfA((u, u, 1)) = (u, u, 0)\n\u2013 fA((d, d, 0)) = (c, c, 0)\n\u2013 for any element (u,w, b) \u2208 |A|2 \u00d7 {0, 1} \\ {(d, c, 0)} for which\nfA((u,w, b)) is still undefined, define fA((u,w, b)) = (d, c, 0), and\ndefine fA((d, c, 0)) = (d, c, 1).\nEssentially, apart from the trivial case where c = d, the digraph of fA is\nobtained from the digraph whose edge relation is E as follows:\n\u2022 take a copy of the digraph (with self-loops) whose edge relation is E,\nand replace any edge emanating from vertex d with the edge (d, c);\nand\n\u2022 replace every edge (u,w), apart from the edge (d, c), by a pair of edges\n(u, eu,w) and (eu,w, w), where eu,w is a new vertex.\n11\nOther vertices are actually introduced in the formal constructive process\n(defined above), with two of these vertices being (d, c, 0) and (d, c, 1). The\nconstruction is completed by introducing edges from all vertices, apart from\n(d, c, 0), to (d, c, 0); and also an edge from (d, c, 0) to (d, c, 1). Now define\nthe function gA to have domain {0, 1} and to be such that gA(0) = 1 and\ngA(1) = 0. We claim that A \u2208 DTC1 if, and only if, (fA, gA) 6\u2208 Hom-Alg1.\nThe trivial case is straightforward (note that if the digraph of fA has\na self-loop then there is not a homomorphism from fA to gA): so suppose\nhenceforth that c 6= d. Suppose that there is a path in the digraph whose\nedge relation is E from vertex c to vertex d. Then in the digraph of fA,\nthere is a odd length cycle with pendant in-trees of length greater than 1.\nHence, there is no homomorphism from fA to gA.\nSuppose that there is not a path in the digraph whose edge relation is\nE from vertex c to vertex d. Then all components of the digraph of fA are\neven length cycles with pendant in-trees. Hence, there is a homomorphism\nfrom fA to gA.\nThe construction of the unary functions fA and gA from A can easily be\ndescribed by quantifier-free projections (see, e.g., [22] for concrete illustra-\ntions of logical formulae describing translations between problems) and so\nthe result follows as DTC1 is L-complete via quantifier-free projections.\nThe following is now immediate from Propositions 2 and 3.\nTheorem 4 The problem Hom-Alg1 is L-complete (via quantifier-free pro-\njections).\nThe problem Hom-Alg1 is uniform in the sense that any unary function\ncan appear as either the first or second component of an instance. We obtain\nnon-uniform versions of Hom-Alg1 by fixing the second component. The\nproblem Hom-Alg1(T ), for some \u03bb1-structure T , is the problem CSP(T ).\nThe following is immediate from the proofs of Propositions 2 and 3.\nTheorem 5 Let T be the \u03bb1-structure corresponding to the unary function\nf whose domain is {0, 1} and f(0) = 1 and f(1) = 0. The problem Hom-\nAlg1(T ) is L-complete (via quantifier-free projections).\nHence, not only is the uniform problem Hom-Alg1 L-complete, there are\nalso non-uniform problems Hom-Alg1(T ) that are L-complete (moreover,\neven when T has only two elements).\nActually, we can say more about non-uniform problems of the form Hom-\nAlg1(T ). Whilst the proof of Proposition 3 is such that the template has a\n12\ndigraph that is a cycle of length 2, we can actually replace this template with\nany \u03bb1-structure T so long as the digraph of T has a cycle of pendant in-trees\nof length at least 2 as follows. Suppose that T\u02d9 has cycles of pendant in-trees\nof lengths \u03b41, \u03b42, . . . , \u03b4k, for some k > 0. Adopting the terminology of the\nproof of Proposition 3 and with reference to this proof, in our construction\nprocess when we replace an edge of the digraph of fA with a path of 2 edges,\ninstead we replace the edge with a path of \u03b41\u03b42 . . . \u03b4k edges. So, if there is a\npath in the digraph whose edge relation is E from vertex c to vertex d then\nthe digraph of fA has a cycle with pendant in-trees of length \u03b3.\u03b41\u03b42 . . . \u03b4k+1,\nfor some \u03b3 \u2265 1, and all other cycles with pendant in-trees (if there are any)\nhave lengths divisible by \u03b41\u03b42 . . . \u03b4k. Also, if there is no such path in the\ndigraph whose edge relation is E then the digraph of fA is such that every\ncycle with pendant in-trees has length divisible by \u03b41\u03b42 . . . \u03b4k. Hence, we\nobtain the following corollary.\nCorollary 6 Let T be any \u03bb1-structure that is without a fixed point. The\nproblem Hom-Alg1(T ) is L-complete (via quantifier-free projections).\nTrivially, if the \u03bb1-structure T has a fixed point then Hom-Alg1(T ) con-\nsists of every \u03bb1-structure and is identical to the problem Hom-Alg1(T1),\nwhere fT1 is the function whose domain has one element. Note that whereas\nthe \u2018trivial\u2019 cases of Hom-Alg1(T ) are identical to Hom-Alg1(T1), so there is\nan analogous remark to be made about Hell and Nes\u02c7etr\u02c7il\u2019s dichotomy: the\n\u2018trivial\u2019 cases, here the cases where the problem is solvable in polynomial-\ntime, are identical to the case where the template graph consists of a solitary\nedge.\n4 Two unary functions\nWe now consider the class of non-uniform constraint satisfaction problems\nwith template two unary functions. Let \u03bb2 be the signature consisting of\nthe two unary function symbols f and g. We define the decision problem\nHom-Alg2 to be the problem CSPC, where C is the class of pairs of \u03bb2-\nstructures; and for any \u03bb2-structure T , we define the problem Hom-Alg2(T )\nto be the problem CSP(T ). Our main result in this section is that whether\nthis class of problems has a dichotomy is at least as hard as whether the class\nof non-uniform constraint satisfaction problems with template an arbitrary\nrelational structure has a dichotomy; where by \u2018dichotomy\u2019 we mean that\nevery such problem is either in P or complete for NP via polynomial-time\n13\nTuring-reductions (we actually prove the converse result later). We then go\non to prove a restricted version of this result.\nIn future, for brevity, we shall refer to whether the class of non-uniform\nconstraint satisfaction problems with template two unary functions has a\ndichotomy as the problem \u2206(\u03bb2), and do likewise for other similar prob-\nlems. For example, whether the class of non-uniform constraint satisfaction\nproblems with template an arbitrary relational structure has a dichotomy\nis the problem \u2206(\u03c3 : \u03c3 relational); and whether the class of non-uniform\nconstraint satisfaction problems with template a digraph has a dichotomy is\nthe problem \u2206(\u03c32). We denote the fact that the problem \u2206(\u03bb2) is at least\nas hard as \u2206(\u03c3 : relational), for example, by \u2206(\u03c3 : relational) \u2264 \u2206(\u03bb2).\nRemark 7 From now on, whenever we talk about a dichotomy, we mostly\nmean whether every problem is either in P or is complete for NP via\npolynomial-time Turing-reductions. We reserve the notation \u2018NP-complete\u2019\nto mean complete for NP via polynomial-time (many-one) reductions. Most\ndichotomy results, notably those due to Schaefer and to Hell and Nes\u02c7etr\u02c7il\nmentioned in the Introduction, are such that every problem is in P or\nis NP-complete. If a problem is NP-complete then it is complete for\nNP via polynomial-time Turing-reductions but it is unknown whether the\nconverse is true. Furthermore, all reductions in Section 5 of [10], where\nvarious dichotomy problems over relational signatures are considered, in-\nvolve polynomial-time reductions; and so the resulting dichotomy problems\ntherein are with respect to P and NP-completeness via polynomial-time\nreductions (as opposed to P and NP-completeness via polynomial-time\nTuring-reductions as it is for us in this paper).\nWe shall begin by detailing a transformation of a \u03c32-structure G, which\nwe regard as a simple digraph with vertex set V (G) and edge set E(G) (and\npossibly with self-loops), into a \u03bb2-structure \u03bb2(G). The \u03bb2-structure \u03bb2(G)\nis defined as follows.\n\u2022 The domain of \u03bb2(G) consists of:\n{1, 2, 3, 4} \u222a {vu : u \u2208 |G|} \u222a {eu,w : u,w \u2208 |G| are such that\nEG(u,w) holds}.\n\u2022 f(1) = 2, f(2) = 1, f(3) = 2, f(4) = 1, g(1) = 4, g(2) = 3, g(3) = 4\nand g(4) = 3 in \u03bb2(G).\n\u2022 If vu \u2208 |\u03bb2(G)| then f(vu) = 3 and g(vu) = 1 in \u03bb2(G).\n14\n\u2022 If eu,w \u2208 |\u03bb2(G)| then f(eu,w) = vu and g(eu,w) = vw in \u03bb2(G).\nThe \u03bb2-structure \u03bb2(G) can be visualized in Fig. 2.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1 2\n3 4\nv\nv\neu,w\nf\ng\nu\nw\nFigure 2. The \u03bb2-structure \u03bb2(G).\nConsider an arbitrary \u03bb2-structure F . We write the digraph (resp.\ngraph) F to denote the digraph (resp. graph) with vertex set |F| where\nthere is a directed (resp. undirected) edge (x, y) if, and only if, either\nf(x) = y or g(x) = y in F (unlike in the previous section, we no longer\ntake the trouble to differentiate between a \u03bb2-structure and the digraph it\ndescribes). The f-digraph (resp. f-graph) of F is the subdigraph (resp.\nsubgraph) of the digraph (resp. graph) F obtained by retaining only the\nedges resulting from the unary function f (the g-digraph and the g-graph of\nF are defined similarly).\nThe \u03bb2-structure F is bipartite if it is bipartite as a graph, and connected\nif it is connected as a graph. A neighbour of a vertex x in the digraph F is\nany vertex y for which there is an edge (x, y) or (y, x).\nLemma 8 Let G and H be \u03c32-structures. Then G \u2192 H if, and only if,\n\u03bb2(G)\u2192 \u03bb2(H).\nProof Suppose that \u03c8 : G \u2192 H. Define the map \u03d5 : |\u03bb2(G)| \u2192 |\u03bb2(H)| as\nfollows:\n\u2022 \u03d5(i) = i, for any i \u2208 {1, 2, 3, 4};\n\u2022 \u03d5(vu) = v\u03c8(u), for any vu \u2208 |\u03bb2(G)|; and\n15\n\u2022 \u03d5(eu,w) = e\u03c8(u),\u03c8(w), for any eu,w \u2208 |\u03bb2(G)|.\nIt is straightforward to check that the map \u03d5 is a homomorphism.\nConversely, suppose that \u03d5 : \u03bb2(G) \u2192 \u03bb2(H) is a homomorphism. In\nboth \u03bb2(G) and \u03bb2(H), the elements 1 and 2 are the only elements x for\nwhich f(f(x)) = x; so, in particular, \u03d5(1) \u2208 {1, 2}. If vu \u2208 |\u03bb2(G)| then\ng\u03bb2(G)(vu) = 1; and so \u03d5(1) = \u03d5(g\n\u03bb2(G)(vu)) = g\n\u03bb2(H)(\u03d5(vu)) 6= 2, because 2\nis not the image of any element of |\u03bb2(H)| under g. Hence, \u03d5(1) = 1; and\nconsequently \u03d5(2) = 2, \u03d5(3) = 3 and \u03d5(4) = 4.\nIf vu \u2208 |\u03bb2(G)| then g\n\u03bb2(G)(vu) = 1. Hence, g\n\u03bb2(H)(\u03d5(vu)) = 1, with\nthe result that \u03d5(vu) = vu\u2032 , for some u\n\u2032 \u2208 |H|. If eu,w \u2208 |\u03bb2(G)| then\nf\u03bb2(G)(eu,w) = vu and g\n\u03bb2(G)(eu,w) = vw. Hence, f\n\u03bb2(H)(\u03d5(eu,w)) = \u03d5(vu)\nand g\u03bb2(H)(\u03d5(eu,w)) = \u03d5(vw), with the result that \u03d5(eu,w) = eu\u2032,w\u2032 , for some\nu\u2032, w\u2032 \u2208 |H|.\nDefine the map \u03c8 : |G| \u2192 |H| by \u03c8(u) = u\u2032, where \u03d5(vu) = vu\u2032 , for each\nu \u2208 |G|. Consider u,w \u2208 |G| such that EG(u,w) holds. By above, \u03d5(eu,w) =\neu\u2032,w\u2032 , for some eu\u2032,w\u2032 \u2208 |\u03bb2(H)|. By above, f\n\u03bb2(H)(\u03d5(eu,w)) = \u03d5(vu) = v\u03c8(u)\nand g\u03bb2(H)(\u03d5(eu,w)) = \u03d5(vw) = v\u03c8(w). Hence, u\n\u2032 = \u03c8(u) and w\u2032 = \u03c8(w),\nwith EH(\u03c8(u), \u03c8(w)) holding. Consequently, \u03c8 is a homomorphism.\nProposition 9 Let H be a \u03c32-structure. There is a polynomial-time Turing-\nreduction from Hom-Alg2(\u03bb2(H)) to CSP(H).\nProof Let F be a \u03bb2-structure. Since \u03bb2(H) is bipartite, there exists no\nhomomorphism from F to \u03bb2(H) unless F is also bipartite; so let us assume\nthat F is bipartite (with some unique bipartition). We may also assume\nthat F is connected, as otherwise we deal with each connected component\nin turn.\nColour the elements of |F| black or white according to the side of the\nbipartition they lie on. If there exists a homomorphism \u03d5 from F to \u03bb2(H)\nthen there are two possibilities: all the elements coloured black are mapped\nto 2, 4 or an element corresponding to a vertex of H, and all the elements\ncoloured white are mapped to 1, 3 or an element corresponding to an edge\nof H; or all the elements coloured black are mapped to 1, 3 or an element\ncorresponding to an edge of H, and all the elements coloured white are\nmapped to 2, 4 or an element corresponding to a vertex of H. We start\nwith the first possibility (and subsequently handle the second possibility in\nexactly the same way).\nLet H1 be the digraph, i.e., \u03c32-structure, having a single vertex \u03bd and\na single edge \u01eb = (\u03bd, \u03bd). Since there is a homomorphism from H to H1, the\n16\nproof of Lemma 8 yields that there is a homomorphism \u03c4 from \u03bb2(H) to\n\u03bb2(H1), given by:\n\u2022 \u03c4(i) = i, for i \u2208 {1, 2, 3, 4};\n\u2022 \u03c4(vu) = \u03bd, for u \u2208 |H|; and\n\u2022 \u03c4(eu,w) = \u01eb, for eu,w \u2208 {eu,w : u,w \u2208 |H| and E\nH(u,w) holds}.\nSuppose that \u03d5 is a homomorphism from F to \u03bb2(H). The homomorphism\n\u03c4\u03d5 enables us to label every element of F , in the natural way, with an\nelement of {1, 2, 3, 4, \u03bd, \u01eb}.\nOur strategy in developing our algorithm (to satisfy the statement of\nthe theorem) is essentially to initially label every element x of |F| with a\nset of elements of {1, 2, 3, 4, \u03bd, \u01eb} so that each element might constitute a\nlegitimate value for \u03c4\u03d5(x), via any resulting homomorphism \u03d5, and then to\nreason so that we can reduce these label sets and:\n\u2022 either obtain an element with an empty label set, in which case a\nhomomorphism \u03d5 cannot exist; or\n\u2022 obtain a collection of digraphs whereby answers as to whether these\ndigraphs are in CSP(H) will enable us to ascertain whether there exists\na homomorphism \u03d5.\nConsider the f -digraph of F . This is of the form of a disjoint union of\ndirected cycles with pendant in-trees. For each element x in this f -digraph,\ndefine \u03b4f (x) to be the length of the longest walk whose end-point is the\nelement x (note that we allow elements to be repeated on a walk). So, in\nparticular, if x is an element in a directed cycle then \u03b4f (x) = \u221e. For each\nelement x of our f -digraph, consider the possible label set \u039b(x) of x. There\nare a number of possibilities.\n(1) If \u03b4f (x) > 1 and x is coloured black then \u039b(x) \u2286 {2}.\n(2) If \u03b4f (x) = 1 and x is coloured black then \u039b(x) \u2286 {2, \u03bd}.\n(3) If \u03b4f (x) = 0 and x is coloured black then \u039b(x) \u2286 {2, 4, \u03bd}.\n(4) If \u03b4f (x) > 2 and x is coloured white then \u039b(x) \u2286 {1}.\n(5) If \u03b4f (x) \u2208 {1, 2} and x is coloured white then \u039b(x) \u2286 {1, 3}.\n(6) If \u03b4f (x) = 0 and x is coloured white then \u039b(x) \u2286 {1, 3, \u01eb}.\n17\nSuppose that we are in Case (3). There are two further cases: either\nthere exists some y such that gF (y) = x or there doesn\u2019t. In the first case,\nthe value 2 cannot lie in \u039b(x); and in the second case, we may as well remove\nthe value 4 from \u039b(x), as we could amend any corresponding homomorphism\n\u03d5 so that \u03d5(x) = 2.\nSuppose that we are in Case (6). There are two further cases: either\nthere exists some y such that gF (y) = x or there doesn\u2019t. In the first case,\nthe value \u01eb cannot lie in \u039b(x); and in the second case, we may as well remove\nthe value 3 from \u039b(x), as we could amend any corresponding homomorphism\n\u03d5 so that \u03d5(x) = 1.\nSo, the result is that every element x of |F| can be labelled with one of\nthe following sets:\n{1}, {2}, {2, \u03bd}, {4, \u03bd}, {1, 3}, {1, \u01eb}.\nWe can consider some connected g-digraph within F in exactly the same\nway. Defining \u03b4g with respect to this connected g-digraph rather than a\nconnected f -digraph yields a number of possibilities.\n(1) If \u03b4g(x) > 1 and v is coloured black then \u039b(x) \u2286 {4}.\n(2) If \u03b4g(x) = 1 and x is coloured black then \u039b(x) \u2286 {4, \u03bd}.\n(3) If \u03b4g(x) = 0 and x is coloured black then \u039b(x) \u2286 {2, 4, \u03bd}.\n(4) If \u03b4g(x) > 2 and x is coloured white then \u039b(x) \u2286 {3}.\n(5) If \u03b4g(x) \u2208 {1, 2} and x is coloured white then \u039b(x) \u2286 {1, 3}.\n(6) If \u03b4g(x) = 0 and x is coloured white then \u039b(x) \u2286 {1, 3, \u01eb}.\nSuppose that we are in Case (3). There are two further cases: either\nthere exists some y such that fF (y) = x or there doesn\u2019t. In the first case,\nthe value 4 cannot lie in \u039b(x); and in the second case, we may as well remove\nthe value 2 from \u039b(x), as we could amend any corresponding homomorphism\n\u03d5 so that \u03d5(x) = 4.\nSuppose that we are in Case (6). There are two further cases: either\nthere exists some y such that fF (y) = x or there doesn\u2019t. In the first case,\nthe value \u01eb cannot lie in \u039b(x); and in the second case, we may as well remove\nthe value 3 from \u039b(x), as we could amend any corresponding homomorphism\n\u03d5 so that \u03d5(x) = 1.\n18\nSo, the result is that every element x of |F| can be labelled with one of\nthe following sets:\n{3}, {4}, {2, \u03bd}, {4, \u03bd}, {1, 3}, {1, \u01eb}.\nNote that evaluating the two analyses above might result in an element\nlabelled by the empty set. If this is so then there can exist no homomorphism\n\u03d5 (from F to \u03bb2(H) where all the elements coloured black are mapped to\n2, 4 or an element corresponding to a vertex of H, and all the elements\ncoloured white are mapped to 1, 3 or an element corresponding to a edge of\nH). Hence, we may assume that every element of F is labelled with one of\nthe following sets:\n{1}, {2}, {3}, {4}, {\u03bd}, {\u01eb}, {2, \u03bd}, {4, \u03bd}, {1, 3}, {1, \u01eb}\n(note that our evaluation of the two analyses might enable us to deduce that\n\u039b(x) = {\u03bd} or {\u01eb}).\nRecall our \u03bb2-structure \u03bb2(H1) (with domain {1, 2, 3, 4, \u03bd, \u01eb}). Abbre-\nviate f and g in \u03bb2(H1) by f1 and g1, respectively; and for any set S \u2286\n{1, 2, 3, 4, \u03bd, \u01eb}, define f1(S) = {f1(i) : i \u2208 S} and g1(S) = {g1(i) : i \u2208 S}.\nSuppose that x, y \u2208 |F| (where possibly x = y) and fF (x) = y. Then\nany label set of y must be contained in f1(\u039b(x)). Hence, we can replace \u039b(y)\nwith \u039b(y) \u2229 f1(\u039b(x)). The same can be said if x, y \u2208 |F| and g\nF (x) = y.\nWe now repeatedly perform the above modification until either we obtain\nstability or an element with an empty label set. If we obtain an element\nwith an empty label set then there can be no homomorphism \u03d5: otherwise,\nthere is still a chance that such a homomorphism \u03d5 exists.\nWe can now delete any element x of |F| that is labelled with the set {1}\n(resp. {2}, {3}, {4}) as if the homomorphism \u03d5 exists then: the value of\n\u03d5 at x is necessarily 1 (resp. 2, 3, 4); and this will be consistent with any\nresulting value of \u03d5 at any neighbouring element in the digraph F . Hence,\nlet us assume: that every element of |F| is labelled with one of the sets\n{\u03bd}, {\u01eb}, {2, \u03bd}, {4, \u03bd}, {1, 3} and {1, \u01eb}; and that the resulting digraph F\nis connected (as otherwise we deal with the connected components one-by-\none).\nWe shall now prove the following claim: if F is such that every element\nis labelled either {\u03bd} or {\u01eb} then there is a homomorphism from F to \u03bb2(H)\nwhich takes every element of |F| to an appropriate (w.r.t. its label set) ele-\nment of |\u03bb2(H)| if, and only if, there is a homomorphism from the following\ndigraph H\u2032 to H:\n\u2022 the vertex set of H\u2032 is {x : x \u2208 |F| is labelled {\u03bd}}; and\n19\n\u2022 for every x, y \u2208 |H\u2032|, there is an edge (x, y) if, and only if, there is an\nelement z \u2208 |F| labelled {\u01eb} such that fF (z) = x and gF (z) = y.\nSuppose that \u03c8 : F \u2192 \u03bb2(H) (where the homomorphism respects the\nlabel sets). Let x \u2208 |H\u2032|. So, x \u2208 |F| and is labelled {\u03bd}. Hence, \u03c8(x) = vu,\nfor some u \u2208 |H|. Define \u03d5 : |H\u2032| \u2192 |H| by \u03d5(x) = u.\nSuppose that (x, y) is an edge of the digraph H\u2032. Hence, \u03c8(x) = vu and\n\u03c8(y) = vw, for some u,w \u2208 |H|. By definition, there is z \u2208 |F| labelled {\u01eb}\nsuch that fF (z) = x and gF (z) = y. So, f\u03bb2(H)(\u03c8(z)) = \u03c8(x) = vu and\ng\u03bb2(H)(\u03c8(z)) = \u03c8(y) = vw; and by the definition of \u03bb2(H), (u,w) is an edge\nof the digraph H. Hence, \u03d5 : H\u2032 \u2192 H.\nConversely, suppose that \u03d5 : H\u2032 \u2192 H. Let x \u2208 |F| be labelled {\u03bd}; so,\nx \u2208 |H\u2032|. Define \u03c8(x) = v\u03d5(x) \u2208 |\u03bb2(H)|. Let z \u2208 |F| be labelled {\u01eb}; so,\nfF (z) = x, for some x with x labelled {\u03bd}, and gF (z) = y, for some y with\ny labelled {\u03bd}. Define \u03c8(z) = e\u03d5(x),\u03d5(y) \u2208 |\u03bb2(H)|.\nSuppose that fF (z) = x; and so z is labelled {\u01eb} and x is labelled\n{\u03bd}. We have that f\u03bb2(H)(\u03c8(z)) = f\u03bb2(H)(e\u03d5(x),\u03d5(y)), for some y \u2208 |F|; and\nso f\u03bb2(H)(\u03c8(z)) = v\u03d5(x) = \u03c8(x). A similar argument for the case when\ngF (z) = y yields that \u03c8 : F \u2192 \u03bb2(H), and so we have proved our claim.\nLet us return to the situation prior to the statement of our claim. Sup-\npose that x \u2208 |F| is labelled with either {\u03bd} or {\u01eb}. As F is connected,\nthis effectively fixes every label set to consist of at most one element, and\nwe can remove elements from |F| labelled {1}, {2}, {3} or {4} (as above).\nThe above claim yields the result (note that we did not require F to be\nconnected to prove our claim).\nAlternatively, suppose that there does not exist an element x \u2208 |F|\nlabelled with either {\u03bd} or {\u01eb}. Choose some element x \u2208 |F| and remove\none element from \u039b(x). This effectively forces every other label set to have\nsize at most one, and we can remove elements from |F| labelled {1}, {2},\n{3} or {4} (as above). Removing the alternative element from \u039b(x) results\nin a similar scenario. Regardless, the above claim yields the result.\nHence, we obtain the main theorem of this section.\nTheorem 10 For any \u03c32-structure H, the problem CSP(H) is polynomial-\ntime Turing-equivalent to the problem Hom-Alg2(\u03bb2(H)). Thus, any non-\nuniform constraint satisfaction problem where the template is a relational\nstructure is polynomial-time Turing-equivalent to a non-uniform constraint\nsatisfaction problem where the template is a \u03bb2-structure of the form \u03bb2(H),\nfor some \u03c32-structure H.\n20\nProof The first part of the theorem follows immediately from Lemma 8\nand Proposition 9. The second part follows from Theorem 10 of [10].\nEssentially, Theorem 10 tells us that \u2206(\u03c3 : relational) \u2264 \u2206(\u03bb2) and\nthat \u2206(\u03c32) \u2264 \u2206(\u03bb2) ([10] tells us that \u2206(\u03c3 : relational) \u2264 \u2206(\u03c32) and\n\u2206(\u03c32) \u2264 \u2206(\u03c3 : relational), i.e., that \u2206(\u03c32) \u2261 \u2206(\u03c3 : relational)).\nWe can obtain a yet more restricted version of Theorem 10, in terms of\nthe structure \u03bb2(H).\nA matching is a unary function h such that h(x) 6= x and h(h(x)) = x,\nfor all x. Let F be a \u03bb2-structure. We shall define a \u03bb2-structure \u00b5(F)\nthat is bipartite and where the function g in \u00b5(F) is a matching. The\ndomain of \u00b5(F) consists of two disjoint copies of |F|; so, for every element\nx \u2208 |F|, there are two elements x1, x2 \u2208 |\u00b5(F)| (the former we call an\nindex-1 element, the latter an index-2 element). We define g(x1) = x2 and\ng(x2) = x1 in \u00b5(F). Also, if f(x) = y in F then we define f(x1) = y2 in\n\u00b5(F); and if g(x) = y in F then we define f(x2) = y1 in \u00b5(F).\nSuppose that we construct the structure \u00b5(F) from the structure F .\nWe can undo the construction of \u00b5(F) to get not only F but also the \u03bb2-\nstructure Fs, by swapping the indices 1 and 2 on the corresponding pairs of\nelements of \u00b5(F). So, for example, if f(x1) = y2 in \u00b5(F) then g(x) = y in\nFs; that is, Fs is F with f and g swapped.\nLemma 11 For any \u03bb2-structures F and F\n\u2032:\n\u2022 if F \u2192 F \u2032 then \u00b5(F)\u2192 \u00b5(F \u2032); and\n\u2022 if F is connected and \u00b5(F)\u2192 \u00b5(F \u2032) then either F \u2192 F \u2032 or Fs \u2192 F\n\u2032.\nProof Suppose that \u03d5 : F \u2192 F \u2032. Define \u03c8 : |\u00b5(F)| \u2192 |\u00b5(F \u2032)| by \u03c8(x1) =\n\u03d5(x)1 and \u03c8(x2) = \u03d5(x)2. Let x1, y2 \u2208 |\u00b5(F)| be such that f\n\u00b5(F)(x1) = y2;\nand so fF (x) = y. Thus, fF\n\u2032\n(\u03d5(x)) = \u03d5(y), and so f\u00b5(F\n\u2032)(\u03d5(x)1) = \u03d5(y)2,\nwith f\u00b5(F\n\u2032)(\u03c8(x1)) = \u03c8(y2). The other case for f\n\u00b5(F) is handled similarly,\nand the fact that \u03c8 preserves g\u00b5(F) is trivial. Hence, \u03c8 : \u00b5(F)\u2192 \u00b5(F \u2032).\nSuppose that F is connected and that \u03c8 : \u00b5(F) \u2192 \u00b5(F \u2032). Define\n\u03d5 : |F| \u2192 |F \u2032| by \u03d5(x) = y\u2032 if {\u03c8(x1), \u03c8(x2)} = {y\n\u2032\n1, y\n\u2032\n2} (note that \u03d5 is\nwell-defined). Suppose that fF (x) = y; and so f\u00b5(F)(x1) = y2. Hence,\nf\u00b5(F\n\u2032)(\u03c8(x1)) = \u03c8(y2). There are two possibilities: every index-1 element of\n\u00b5(F) is mapped under \u03c8 to an index-1 element of \u00b5(F \u2032); or every index-1\nelement of \u00b5(F) is mapped under \u03c8 to an index-2 element of \u00b5(F \u2032) (this\nis because F is connected). Suppose that {\u03c8(x1), \u03c8(x2)} = {x\n\u2032\n1, x\n\u2032\n2} and\n21\n{\u03c8(y1), \u03c8(y2)} = {y\n\u2032\n1, y\n\u2032\n2}. Thus, either f\nF \u2032(x\u2032) = y\u2032 or gF\n\u2032\n(x\u2032) = y\u2032. More-\nover, whether fF\n\u2032\n(x\u2032) = y\u2032 or gF\n\u2032\n(x\u2032) = y\u2032 is independent of x and y. Sim-\nilarly, if gF (x) = y then either gF\n\u2032\n(x\u2032) = y\u2032 or fF\n\u2032\n(x\u2032) = y\u2032. Consequently,\neither F \u2192 F \u2032 or Fs \u2192 F\n\u2032.\nCorollary 12 For any \u03c32-structure H, the problem CSP(H) is polynomial-\ntime Turing-equivalent to the problem Hom-Alg2(\u00b5(\u03bb2(H))). Thus, any\nnon-uniform constraint satisfaction problem where the template is a rela-\ntional structure is polynomial-time Turing-equivalent to a non-uniform con-\nstraint satisfaction problem where the template is a \u03bb2-structure of the form\n\u00b5(\u03bb2(H)), for some \u03c32-structure H.\nProof Let F be a \u03bb2-structure. We shall transform F so that F is of the\nform \u00b5(F \u2032) and where F \u2192 \u00b5(\u03bb2(H)) if, and only if, either F\n\u2032 \u2192 \u03bb2(H) or\nF \u2032s \u2192 \u03bb2(H).\nWe may assume that F is connected (otherwise we work with each con-\nnected component in turn) and bipartite (otherwise we define F \u2032 to be\nany \u03bb2-structure not in Hom-Alg2(\u00b5(\u03bb2(H)))). If there is a homomorphism\nF \u2192 \u00b5(\u03bb2(H)) then, for any element x \u2208 |F|, the elements x and g\nF (gF (x))\nmust map to the same element of |\u00b5(\u03bb2(H))|. Thus, we can identify the\nelements x and gF (gF (x)) in F as a single element x. Of course, this may\nresult in fF or gF being multiple-valued at x, and if this is the case then\nwe identify the two values of fF or the two values of gF . Note that there is\na homomorphism from the amended F to \u00b5(\u03bb2(H)) if, and only if, there is\na homomorphism from the original F to \u00b5(\u03bb2(H)) (a homomorphism from\na multiple-valued F must respect all functional identities). We iterate this\nprocess until we can go no further. Eventually, we obtain that F is connected\nand bipartite, and that gF is a matching.\nWe may pair up elements x1 and x2 for which g\nF (x1) = x2 and g\nF (x2) =\nx1 so that all elements indexed by 1 (resp. 2) are on the same side of the\nbipartition of F . Hence, F = \u00b5(F \u2032) where: F \u2032 has a single element x for\neach pair (x1, x2); f\nF \u2032(x) = y if fF (x1) = y2; and g\nF \u2032(x) = y if gF (x2) = y1.\nBy Lemma 11, F \u2192 \u00b5(\u03bb2(H)) if, and only if, either F\n\u2032 \u2192 \u03bb2(H) or F\n\u2032\ns \u2192\n\u03bb2(H). So, by Proposition 9, there is a polynomial-time Turing-reduction\nfrom Hom-Alg2(\u00b5(\u03bb2(H))) to CSP(H).\nConversely suppose that G is a \u03c32-structure. Let G\n\u2217 be the disjoint\nunion of G and H. We shall show that G \u2192 H if, and only if, \u00b5(\u03bb2(G\n\u2217))\u2192\n\u00b5(\u03bb2(H)).\nSuppose that G \u2192 H. Then G\u2217 \u2192 H and \u03bb2(G\n\u2217)\u2192 \u03bb2(H) by Lemma 8.\nSo, \u00b5(\u03bb2(G\n\u2217))\u2192 \u00b5(\u03bb2(H)) by Lemma 11.\n22\nConversely, suppose that \u00b5(\u03bb2(G\n\u2217)) \u2192 \u00b5(\u03bb2(H)). As \u03bb2(G\n\u2217) is con-\nnected, we can apply Lemma 11 to obtain that either \u03bb2(G\n\u2217) \u2192 \u03bb2(H) or\n\u03bb2(G\n\u2217)s \u2192 \u03bb2(H). In the former case, we get that G\n\u2217 \u2192 H by Lemma 8. In\nthe latter case, we get that \u03bb2(G\n\u2217)\u2192 \u03bb2(H)s. However, if we denote by Hs\nthe digraph H where all edges are reversed then it is straightforward to see\nthat \u03bb2(H)s = \u03bb2(Hs); and so by Lemma 8, G\n\u2217 \u2192 Hs and thus H \u2192 Hs.\nIf \u03c8 : H \u2192 Hs then the same map \u03c8 is a homomorphism from Hs to H.\nThus, composing homomorphisms gives us that G\u2217 \u2192 H. Hence, there is a\npolynomial-time reduction from CSP(H) to Hom-Alg2(\u00b5(\u03bb2(H))), and the\nresult follows.\nEssentially, Corollary 12 tells us that \u2206(\u03c3 : relational) \u2264 \u2206(\u03bb2 :\nbipartite, g a matching). Thus, if we wish to establish dichotomy results for\nnon-uniform constraint satisfaction problems with template a \u03bb2-structure,\nbut without resolving \u2206(\u03c3 : \u03c3 relational), then we need to restrict the tem-\nplates beyond being bipartite with one of the unary functions a matching.\nWe shall consider restricted structures later in this paper.\n5 Constants, unary functions and relations\nIn this section we prove what amounts to the converse of Theorem 10. We\nthen go on to examine the complexity of problems of the form Hom-Alg2(T )\nfor certain elementary \u03bb2-structures T .\nTheorem 13 Let B be some \u03c3-structure where \u03c3 consists of constant sym-\nbols, unary function symbols and relation symbols. There exists a rela-\ntional signature \u03c3\u2032 and a \u03c3\u2032-structure B\u2032 such that CSP(B) and CSP(B\u2032)\nare polynomial-time equivalent.\nProof Let \u03c3 = \u3008c1, . . . , ck, f1, . . . , fl, R1, . . . , Rm\u3009, where each ci (resp. fi,\nRi) is a constant (resp. unary function, relation) symbol; and let \u03c3\n\u2032 =\n\u3008C1, . . . , Ck, F1, . . . , Fl, R1, . . . , Rm\u3009, where each Ci is a unary relation sym-\nbol and each Fi is a binary relation symbol. Define the \u03c3\n\u2032-structure B\u2032 as\nfollows:\n\u2022 |B\u2032| = |B|;\n\u2022 for each i \u2208 {1, 2, . . . , k}, CB\n\u2032\ni = {c\nB\ni };\n\u2022 for each i \u2208 {1, 2, . . . , l} and for any u,w \u2208 |B\u2032|, FB\n\u2032\ni (u,w) holds if,\nand only if, fBi (u) = w; and\n23\n\u2022 for each i \u2208 {1, 2, . . . ,m}, RB\n\u2032\ni = R\nB\ni .\nSuppose that A\u2032 is a \u03c3\u2032-structure. Suppose further than CA\n\u2032\ni = \u2205, for\nsome i \u2208 {1, 2, . . . , k}: so I = {i : CA\n\u2032\ni = \u2205 where 1 \u2264 i \u2264 k} is non-\nempty. For every i \u2208 I, add a new element to the domain of A\u2032 and set the\nrelation Ci of the amended structure to consist of the set containing only\nthe corresponding new element (keep all the other relations as they are).\nClearly, the amended structure A\u2032 is in CSP(B\u2032) if, and only if, the original\nstructure A\u2032 is in CSP(B\u2032). Hence, we assume that every relation CA\n\u2032\ni , for\ni \u2208 {1, 2, . . . , k}, is non-empty.\nWe shall now amend A\u2032 so that in the amended structure, A\u2032\u2032, for every\ni \u2208 {1, 2, . . . , l} and for every u \u2208 |A\u2032\u2032|, there is at least one w \u2208 |A\u2032\u2032| such\nthat FA\n\u2032\u2032\ni (u,w) holds. We begin by defining the \u03c3\n\u2032-structure B\u2032p as follows:\n\u2022 |B\u2032p| = |B\n\u2032|p, where |B\u2032| contains p elements;\n\u2022 for every i \u2208 {1, 2, . . . , k}, C\nB\u2032\np\ni = \u2205;\n\u2022 for every i \u2208 {1, 2, . . . , l} and for any u\u00af, v\u00af \u2208 |B\u2032p|, F\nB\u2032\np\ni (u\u00af, v\u00af) holds if,\nand only if, vj = f\nB(uj), for every j \u2208 {1, 2, . . . , p}; and\n\u2022 for every i \u2208 {1, 2, . . . ,m}, R\nB\u2032\np\ni = \u2205.\nLet v\u00af \u2208 |B\u2032p| be such that all components of v\u00af are distinct, and let w \u2208 |B\n\u2032|.\nThen w appears as some coordinate in v\u00af: w.l.o.g. assume that w appears as\nthe first coordinate. Define the map \u03d5wv\u00af : |B\n\u2032\np| \u2192 |B\n\u2032| as:\n\u03d5wv\u00af (u\u00af) = u1.\nIt is straightforward to verify that \u03d5wv\u00af is a homomorphism from B\n\u2032\np to B\n\u2032.\nObserve that there exists a homomorphism from B\u2032p to B\n\u2032 which maps any\nchosen element of |B\u2032p| whose coordinates are all distinct to any chosen ele-\nment of |B\u2032|.\nWe construct the \u03c3\u2032-structure A\u2032\u2032 as follows. First, fix some element\nu\u00af \u2208 |B\u2032p| for which all the components are distinct. Define:\n\u2022 |A\u2032\u2032| = |A\u2032| \u00d7 |B\u2032p|;\n\u2022 for each i \u2208 {1, 2, . . . , k}, CA\n\u2032\u2032\ni ((w, v\u00af)) holds if, and only if, v\u00af = u\u00af and\nCA\n\u2032\ni (w) holds;\n\u2022 for each i \u2208 {1, 2, . . . , l} and for any (w1, v\u00af\n1), (w2, v\u00af\n2) \u2208 |B\u2032\u2032|,\nFA\n\u2032\u2032\ni ((w1, v\u00af\n1), (w2, v\u00af\n2)) holds if, and only if, either (v\u00af1 = v\u00af2 = u\u00af and\nFA\n\u2032\ni (w1, w2) holds) or (w1 = w2 and F\nB\u2032\np\ni (v\u00af\n1, v\u00af2) holds); and\n24\n\u2022 for every i \u2208 {1, 2, . . . ,m} and for any (w1, v\u00af\n1), (w2, v\u00af\n2), . . . , (wa, v\u00af\na) \u2208\n|A\u2032\u2032|, RA\n\u2032\u2032\ni ((w1, v\u00af\n1), (w2, v\u00af\n2), . . . , (wa, v\u00af\na)) holds if, and only if, v\u00af1 =\nv\u00af2 = . . . = v\u00afa = u\u00af and RA\n\u2032\ni (w1, w2, . . . , wa) holds (where a is the arity\nof Ri).\nThe structure A\u2032\u2032 can be depicted in Fig. 3, where the relations Ci and Ri\nare omitted and an arrow labelled i from one vertex to another denotes that\nthe associated pair of vertices is in the binary relation Fi. Note that the\nsubstructure of A\u2032\u2032 induced by the set of elements |A\u2032| \u00d7 {u\u00af} is isomorphic\nto A\u2032.\nvertices of the\nform (w, u)\n_\ni\ni\ni\ni\nj\nj\npcopies of B'\nj\nFigure 3. The \u03c3\u2032-structure A\u2032\u2032.\nSuppose that there is a homomorphism from A\u2032 to B\u2032. Then this homo-\nmorphism can be extended to a homomorphism of A\u2032\u2032 to B\u2032 by utilizing the\nobservation at the end of the paragraph in which the construction of B\u2032p is\ndetailed. Conversely, if there is a homomorphism from A\u2032\u2032 to B\u2032 then the re-\nstriction of this map to the set of elements |A\u2032|\u00d7{u\u00af} yields a homomorphism\nfrom A\u2032 to B\u2032. So, A\u2032 \u2208 CSP(B\u2032) if, and only if, A\u2032\u2032 \u2208 CSP(B\u2032).\nSuppose that w1, w2 \u2208 |A\n\u2032\u2032| are such that w1 6= w2 and both C\nA\u2032\u2032\ni (w1) and\nCA\n\u2032\u2032\ni (w2) hold, for some i \u2208 {1, 2, . . . , k}. The structure obtained from A\n\u2032\u2032\nby identifying w1 and w2 is such that there is a homomorphism to B\n\u2032 if, and\nonly if, there is homomorphism from A\u2032\u2032 to B\u2032 (as B\u2032 has been derived from\nB by \u2018converting\u2019 the constants and functions into relations mirroring these\nconstants and functions). Suppose that w1, w2, w3 \u2208 |A\n\u2032\u2032| are such that w2 6=\nw3 and both F\nA\u2032\u2032\ni (w1, w2) and F\nA\u2032\u2032\ni (w1, w3) hold, for some i \u2208 {1, 2, . . . , l}.\n25\nThe structure obtained from A\u2032\u2032 by identifying w2 and w3 is such that there\nis a homomorphism to B\u2032 if, and only if, there is homomorphism from A\u2032\u2032\nto B\u2032. By repeatedly identifying vertices (if necessary) as above, we may\nassume that A\u2032\u2032 is such that: for every i \u2208 {1, 2, . . . , k}, there is exactly\none element in CA\n\u2032\u2032\ni ; and for every i \u2208 {1, 2, . . . , l} and for every w1 \u2208 |A\n\u2032\u2032|,\nthere is exactly one element w2 \u2208 |A\n\u2032\u2032| such that FA\n\u2032\u2032\ni (w1, w2) holds. Finally,\nlet A be the \u03c3-structure obtained from A\u2032\u2032 in the natural way. Clearly,\nA\u2032\u2032 \u2208 CSP(B\u2032) if, and only if, A \u2208 CSP(B). Moreover, A can be constructed\nfrom A\u2032 in time polynomial in the size of A\u2032.\nConversely, let A be a \u03c3-structure. Let A\u2032 be the \u03c3\u2032-structure obtained\nfrom A in the natural way. Clearly, A \u2208 CSP(B) if, and only if, A\u2032 \u2208\nCSP(B\u2032); and A\u2032 can be constructed from A in time polynomial in the size\nof A. The result follows.\nA corollary of Theorems 10 and 13 is that \u2206(\u03c3 : relational) \u2261 \u2206(\u03bb2).\nNow let us turn to non-uniform constraint satisfaction problems CSP(T )\nwhere the \u03bb2-structure T is bipartite and where the g-digraph is a single di-\nrected cycle. For any such \u03bb2-structure T , let us define a \u03bb3-structure T\u02dc ,\nwhere \u03bb3 consists of the unary function symbols f , g1 and g2, with the prop-\nerty that both g1 and g2 are matchings. Let T1 and T2 form the bipartition\nof |T |. The domain of T\u02dc is |T |; if x1 \u2208 T1 then g\nT\u02dc\n1 (x1) = g\nT (x1), with\ngT\u02dc1 (g\nT (x1)) = x1; if x2 \u2208 T2 then g\nT\u02dc\n2 (x2) = g\nT (x2), with g\nT\u02dc\n2 (g\nT (x2)) = x2;\nand f T\u02dc is defined identically to fT . The problem Hom-Alg3(T\u02dc ) is CSP(T\u02dc ).\nTheorem 14 Let T be a \u03bb2-structure that is bipartite and whose g-digraph\nis a directed cycle. The problem Hom-Alg2(T ) is polynomial-time Turing-\nequivalent to the problem Hom-Alg3(T\u02dc ). In consequence, there exists such a\n\u03bb2-structure T with the property that Hom-Alg2(T ) is complete for NP via\npolynomial-time Turing-reductions.\nProof Let S be a \u03bb3-structure. We may clearly assume that S is bipartite\n(as otherwise S 6\u2208 Hom-Alg3(T\u02dc )) and connected (as otherwise we take each\nconnected component in turn). Furthermore, just as we did in the proof\nof Corollary 12, we may assume that gS1 and g\nS\n2 are matchings. Fix some\nelement u \u2208 |S|. First, we shall ascertain (using an oracle for Hom-Alg2(T ))\nwhether there is a homomorphism from S to T\u02dc where u is mapped to an\nelement of T1 (as in the construction of T\u02dc above: we proceed similarly when\nlooking for a homomorphism mapping u to an element of T2).\nWe begin by constructing a \u03bb2-structure Fu. Begin with the domain |S|\n(we shall extend it presently). Assume that a homomorphism of S to T\u02dc (if it\n26\nexists) takes u to an element of T1. As S is connected and bipartite, we can\nnow determine which side of the bipartition every element of |S| is mapped\nto. If w \u2208 |S| maps to T1 then we define g\nFu(w) = gS1 (w); otherwise we\ndefine gFu(w) = gS2 (w). The function f\nFu is identical to fS . Trivially, \u03d5 is\na homomorphism from S to T\u02dc mapping u to an element of T1 if, and only if,\n\u03d5 is a homomorphism from Fu to T mapping u to an element of T1 (recall\nthat gS1 and g\nS\n2 are matchings).\nFor every v \u2208 T1, form the structure Fu + Tv by taking disjoint copies\nof Fu and T and identifying the elements u \u2208 |Fu| and v \u2208 |T |. Note that\nthis yields a \u2018structure\u2019 where the functions f and g have multiple values;\nand any homomorphism from Fu+ Tv to T , say, must respect all functional\nidentities (as in the proof of Corollary 12).\nSuppose that Fu \u2192 T where u is mapped to an element v \u2208 T1. Then\nFu + Tv \u2192 T . Conversely, suppose that \u03c8 : Fu + Tv \u2192 T , for some v \u2208 T1.\nSuppose further that the element u of Fu+Tv (that is, the element resulting\nfrom the identification) is mapped under \u03c8 to an element of T2. Thus, \u03c8\nrestricted to the copy of T in Fu+ Tv is a homomorphism of T to T taking\nevery element of T1 to T2 and vice versa. Hence, by composing maps we get\nthat there is a homomorphism of Fu+Tv to T taking u to an element of T1;\nand so Fu \u2192 T where u is mapped to an element of T1. Hence, Fu \u2192 T\nwhere u is mapped to an element of T1 if, and only if, Fu + Tv \u2192 T , for\nsome v \u2208 T1.\nJust as we did in the proof of Corollary 12, we resolve the multiple\nvalues of any Fu + Tv by repeatedly identifying any multiple values until\nthe functions f and g become single-valued. We denote the resulting \u03bb2-\nstructure by Fu(Tv). Just as in Corollary 12, there is a homomorphism from\nFu + Tv to T if, and only if, there is a homomorphism from Fu(Tv) to T .\nHence, there is a polynomial-time Turing-reduction from Hom-Alg3(T\u02dc ) to\nHom-Alg2(T ).\nConversely, let F be a \u03bb2-structure. Again, we can assume that F is\nconnected and bipartite. We proceed as we did above and fix some element\nu \u2208 |F|. We shall ascertain whether there is a homomorphism from F to\nT where u is mapped to an element of T1. This time, we construct a \u03bb3-\nstructure Su. If w \u2208 |F| maps to an element of T1 in T then we define\ngSu1 (w) = g\nF (w); otherwise we define that gSu2 (w) = g\nF (w). The function\nfSu is identical to fF . This only partially defines the functions g1 and g2 of\nSu. Nevertheless, it is straightforward to see that there is a homomorphism\nF to T where u is mapped to an element of T1 if, and only if, there is a\nhomomorphism Su to T\u02dc where u is mapped to an element of T1. However,\nby proceeding as we did in the proof of Theorem 13 (where we built the\n27\nstructure A\u2032\u2032 from A\u2032 and B\u2032), from Su and T\u02dc we can build a \u03bb3-structure,\ncall it Su also, where the functions g1 and g2 are fully defined and where:\nthere is a homomorphism from the partially defined Su to T\u02dc where u is\nmapped to an element of T1 if, and only if, there is a homomorphism from\nthe fully defined Su to T\u02dc where u is mapped to an element of T1.\nLet v \u2208 T1. Just as we did above, we can form the structure Su + T\u02dcv by\nidentifying u \u2208 |S| and v \u2208 |T\u02dc |. Again, the functions g1 and g2 of Su + T\u02dcv\nmay have multiple values and again we use our process of identification\nto yield the structure Su(T\u02dcv). Reasoning as above yields that there is a\npolynomial-time Turing-reduction from Hom-Alg2(T ) to Hom-Alg3(T\u02dc ).\nBy Corollary 12, there exists a bipartite \u03bb2-structure F\n\u2032 for which the\nfunction g is a matching and for which Hom-Alg2(F\n\u2032) is complete for NP\nvia polynomial-time Turing reductions. Define the bipartite \u03bb3-structure S\nfrom F \u2032 by setting: |S| = |F \u2032|; fS = fF\n\u2032\n; gS1 = g\nF \u2032 ; and gS2 is a matching\nsuch that the gS1 -graph and the g\nS\n2 -graph form a single cycle. By above,\nthere exists a \u03bb2-structure F such that: the g\nF -digraph is a directed cycle;\nS = F\u02dc ; and Hom-Alg2(F) and Hom-Alg3(S) are polynomial-time Turing-\nequivalent.\nAn instance of the problem Hom-Alg2(F\n\u2032) is an instance of the prob-\nlem Hom-Alg3(S) where the function g2 is not defined. As above, we can\nmodify this instance so that g2 is defined and there is a homomorphism\nfrom this amended instance to S if, and only if, there is a homomorphism\nfrom the original instance to S. Hence, Hom-Alg3(S) is complete for NP\nvia polynomial-time Turing-reductions; and so Hom-Alg2(F) is complete for\nNP via polynomial-time Turing-reductions.\nTheorem 14 is a general result that relates non-uniform constraint sat-\nisfaction problems with templates \u03bb2-structures in which one of the unary\nfunctions is a cycle with non-uniform constraint satisfaction problems with\ntemplates \u03bb3-structures in which two of the unary functions are matchings.\nIt also tells us that even when we restrict our template T in the problem\nHom-Alg2(T ) so that it is bipartite and its g-digraph is a directed cycle,\nthe resulting problem can still be complete for NP via polynomial-time\nTuring-reductions (note that we make no statement as regards the degree of\ndifficulty of the problem \u2206(\u03bb2 : bipartite, g-digraph a directed cycle)). In\nfact, we can restrict the size of T to be as small as possible and, further,\nobtain a complete problem for NP via polynomial-time reductions.\nCorollary 15 There exist \u03bb2-structures T and T\u02c6 such that :\n28\n\u2022 |T | = 3, the g-digraph is a directed cycle, the f-digraph is connected\nand Hom-Alg2(T ) is NP-complete; and\n\u2022 |T\u02c6 | = 6, the g-digraph is a directed cycle, the f-digraph is connected,\nT\u02c6 is bipartite and Hom-Alg2(T\u02c6 ) is NP-complete.\nProof Define the \u03bb2-structure T to have: domain {0, 1, 2}; function f\nT\ndefined as fT (0) = 1, fT (1) = 0 and fT (2) = 0; and function gT defined as\ngT (0) = 1, gT (1) = 2 and gT (2) = 0. Note that for any element x \u2208 |T |, the\npossible values for (fT (x), fT (gT (x)), fT (gT (gT (x)))) are (1, 0, 0), (0, 1, 0)\nand (0, 0, 1), when x is 0, 2 and 1, respectively.\nConsider the problem 1-in-3-SAT, defined over the signature \u03c33 = \u3008R\u3009,\nwhere R is a relation symbol of arity 3: an instance is a \u03c33-structure A,\nwhich is viewed as a collection of clauses of 3 distinct boolean variables via\n{Xi, Xj , Xk} is a clause if, and only if, R\nA(i, j, k) holds, where i 6= j 6= k 6=\ni; and a yes-instance is an instance for which there is a truth assignment\nmaking exactly one of the 3 boolean variables in each clause true. This\nproblem is NP-complete [21].\nSuppose we are given an instance A of 1-in-3-SAT where the clauses are\nC1, C2, . . . , Cm over the boolean variables X1, X2, . . . , Xn. Define functions\nf and g over\n{1, 2, . . . ,m} \u222a {1\u02d9, 2\u02d9, . . . , n\u02d9} \u222a S,\nwhere S is as yet undefined, as follows. For each: i \u2208 {1, 2, . . . ,m}:\nif clause Ci = {Xa(i), Xb(i), Xc(i)} then define f and g such that\nf(i) = \u02d9a(i); f(g(i)) = \u02d9b(i); and f(g(g(i))) = \u02d9c(i).\nThe set S is chosen so as to facilitate these conditions. In more detail,\nS = {ri, si : i = 1, 2, . . . ,m} and for each i = 1, 2, . . . ,m:\n\u2022 f(i) = \u02d9a(i);\n\u2022 g(i) = ri; f(ri) = \u02d9b(i);\n\u2022 g(ri) = si; f(si) = \u02d9c(i);\nand f(u) = u and g(u) = u, for any as yet undefined u. Denote by F the\n\u03bb2-structure whose functions f and g are as defined above.\nSuppose that \u03d5 : {X1, X2, . . . , Xn} \u2192 {0, 1} is a satisfying truth as-\nsignment for the instance A of 1-in-3-SAT. Define the function \u03c8 from\n{1, 2, . . . ,m} \u222a {1\u02d9, 2\u02d9, . . . , n\u02d9} \u222a S to {0, 1, 2} as follows.\n29\n\u2022 For each i \u2208 {1, 2, . . . ,m}:\n\u2013 if (\u03d5(Xa(i)), \u03d5(Xb(i)), \u03d5(Xc(i))) = (1, 0, 0) then \u03c8(i) = 0;\n\u2013 if (\u03d5(Xa(i)), \u03d5(Xb(i)), \u03d5(Xc(i))) = (0, 1, 0) then \u03c8(i) = 2;\n\u2013 if (\u03d5(Xa(i)), \u03d5(Xb(i)), \u03d5(Xc(i))) = (0, 0, 1) then \u03c8(i) = 1.\n\u2022 For each i \u2208 {1, 2, . . . ,m}:\n\u2013 \u03c8(ri) = g\nT (\u03c8(i));\n\u2013 \u03c8(si) = g\nT (gT (\u03c8(i))).\n\u2022 For each j \u2208 {1, 2, . . . , n}, \u03c8(j\u02d9) = \u03d5(Xj).\nWe claim that \u03c8 is a homomorphism from F to T .\nSuppose that the truth assignment \u03d5 is such that\n(\u03d5(Xa(i)), \u03d5(Xb(i)), \u03d5(Xc(i))) = (1, 0, 0).\nConsider the identity fF (i) = \u02d9a(i). Then fT (\u03c8(i)) = fT (0) = 1; and\n\u03c8( \u02d9a(i)) = \u03d5(Xa(i)) = 1. Similarly, all other functional identities can be so\nverified. A similar analysis follows should the truth assignment \u03d5 be such\nthat (\u03d5(Xa(i)), \u03d5(Xb(i)), \u03d5(Xc(i))) is (0, 1, 0) or (0, 0, 1). Thus, \u03c8 : F \u2192 T .\nConversely, suppose that \u03c8 : F \u2192 T . Define the truth assignment\n\u03d5 : {X1, X2, . . . , Xn} \u2192 {0, 1} by:\n\u2022 \u03d5(Xa(i)) = 1 if \u03c8(i) = 0, and 0 otherwise;\n\u2022 \u03d5(Xb(i)) = 1 if \u03c8(i) = 2, and 0 otherwise;\n\u2022 \u03d5(Xc(i)) = 1 if \u03c8(i) = 1, and 0 otherwise.\nThe map \u03d5 is clearly well-defined and a satisfying truth assignment for the\ninstance A. Hence, Hom-Alg2(T ) is NP-complete.\nLet A be an arbitrary \u03bb2-structure. Define the \u03bb2-structure A\u02c6 as follows:\n\u2022 the domain |A\u02c6| = {x : x \u2208 |A|} \u222a {x\u02c6 : x \u2208 |A|};\n\u2022 if fA(x) = y then f A\u02c6(x) = x\u02c6 and f A\u02c6(x\u02c6) = y, for x \u2208 |A|; and\n\u2022 if gA(x) = y then gA\u02c6(x) = x\u02c6 and gA\u02c6(x\u02c6) = y, for x \u2208 |A|.\n30\nFor any x \u2208 |A|, \u02c6\u02c6x denotes the element x.\nSuppose that \u03c8 : A \u2192 T . Define the map \u03c8\u02c6 : |A\u02c6| \u2192 |T\u02c6 | by \u03c8\u02c6(x) = \u03c8(x)\nand \u03c8\u02c6(x\u02c6) = \u02c6\u03c8(x), for x \u2208 |A|. Let x, y \u2208 |A\u02c6| be such that f A\u02c6(x) = y. Then\neither x \u2208 |A| and y = x\u02c6; or x = u\u02c6, for some u \u2208 |A|, and fA(u) = y \u2208\n|A|. In the former case, as \u03c8\u02c6(x) = \u03c8(x) \u2208 |T |, we have that f T\u02c6 (\u03c8\u02c6(x)) =\n\u02c6\n\u03c8\u02c6(x) = \u02c6\u03c8(x) = \u03c8\u02c6(x\u02c6) = \u03c8\u02c6(y). In the latter case, fA(u) = y \u2208 |A|; and so\nfT (\u03c8(u)) = \u03c8(y). Thus, f T\u02c6 ( \u02c6\u03c8(u)) = \u03c8(y) and f T\u02c6 (\u03c8\u02c6(u\u02c6)) = \u03c8\u02c6(y); that is,\nf T\u02c6 (\u03c8\u02c6(x)) = \u03c8\u02c6(y). The case for when gA\u02c6(x) = y is identical; and so we have\n\u03c8\u02c6 : A\u02c6 \u2192 T\u02c6 .\nConversely, suppose that \u03c8\u02c6 : A\u02c6 \u2192 T\u02c6 . There are two cases: when \u03c8\u02c6\nmaps elements of |A| to elements of |T |; and when \u03c8\u02c6 maps elements of\n{x\u02c6 : x \u2208 |A|} to elements of |T |. Let us consider the first case. Define\n\u03c8 : |A| \u2192 |T | by \u03c8(x) = \u03c8\u02c6(x). Let x, y \u2208 |A| be such that fA(x) = y. So,\nf A\u02c6(x\u02c6) = y and f T\u02c6 (\u03c8\u02c6(x\u02c6)) = \u03c8\u02c6(y). But f A\u02c6(x) = x\u02c6 and so f T\u02c6 (\u03c8\u02c6(x)) = \u03c8\u02c6(x\u02c6).\nThus, fT (\u03c8(x)) = \u03c8(y). The situation when gA(x) = y is similar.\nAlternatively, when \u03c8\u02c6 maps elements of {x\u02c6 : x \u2208 |A|} to elements of\n|T |, we define \u03c8(x) =\n\u02c6\n\u03c8\u02c6(x). Let x, y \u2208 |A| be such that fA(x) = y. So,\nf A\u02c6(x) = x\u02c6 and f A\u02c6(x\u02c6) = y, with f T\u02c6 (\u03c8\u02c6(x)) = \u03c8\u02c6(x\u02c6) and f T\u02c6 (\u03c8\u02c6(x\u02c6)) = \u03c8\u02c6(y).\nBut as \u03c8\u02c6(x\u02c6) \u2208 |T |, f T\u02c6 (\u03c8\u02c6(x\u02c6)) =\n\u02c6\n\u03c8\u02c6(x\u02c6); and so\n\u02c6\n\u03c8\u02c6(x\u02c6) = \u03c8\u02c6(y) with \u03c8(y) =\n\u02c6\n\u03c8\u02c6(y) = \u03c8\u02c6(x\u02c6). Also, as \u03c8\u02c6(x) 6\u2208 |T |, f T\u02c6 (\n\u02c6\n\u03c8\u02c6(x)) = \u03c8\u02c6(x); so fT (\n\u02c6\n\u03c8\u02c6(x)) = \u03c8\u02c6(x\u02c6)\nwith fT (\u03c8(x)) = \u03c8(y). The situation when gA(x) = y is similar. Hence,\n\u03c8 : A \u2192 T and consequently, Hom-Alg2(T\u02c6 ) is NP-complete and the result\nfollows.\nWe stated prior to Corollary 15 that this corollary was optimal in terms\nof the size of the structures T and T\u02c6 . That this is true for T is obvious;\nand we now show that this is true for T\u02c6 also.\nLemma 16 Let T\u02c6 be a bipartite \u03bb2-structure of size 4 whose g-digraph is a\ndirected cycle. The problem Hom-Alg2(T\u02c6 ) is solvable in polynomial-time.\nProof Let T\u02c6 be a bipartite \u03bb2-structure of size 4, with domain {0, 1, 2, 3},\nand whose g-digraph is the directed cycle (0, 1, 2, 3). Let A be an arbitrary\n\u03bb2-structure. Without loss of generality, we may assume that A is connected\n(otherwise we handle each connected component separately). Furthermore,\nsuppose that \u03d5 is a homomorphism from A to T\u02c6 taking the element u \u2208 |A|\nto the element 0 \u2208 |T\u02c6 |: this effectively determines which side of the biparti-\ntion of T every element of |A| must map to under \u03d5 (if we can determine, in\n31\npolynomial-time, whether such a homomorphism exists then this will clearly\nsuffice to yield the result).\nWe shall build a set of clauses, C, corresponding to A, each clause con-\nsisting of 2 Boolean literals. The underlying set of Boolean variables is\n{Xv : v \u2208 |A|}. For every instantiation g\nA(v, w), where v, w \u2208 |A|, include\nclauses in C as follows.\n(a) If \u03d5(v) \u2208 {0, 2} then include the clauses {\u00acXv, Xw} and {Xv,\u00acXw}\nin C.\n(b) If \u03d5(v) \u2208 {1, 3} then include the clauses {\u00acXv,\u00acXw} and {Xv, Xw}\nin C.\nSuppose that \u03c8 is a satisfying truth assignment for the resulting set of clauses\nC. Suppose further that v is such that \u03d5(v) \u2208 {0, 2} (resp. \u03d5(v) \u2208 {1, 3}):\nif \u03c8(Xv) is true then we interpret this as dictating that \u03d5(v) = 0 (resp.\n\u03d5(v) = 1); and if \u03c8(Xv) is false then we interpret this as dictating that\n\u03d5(v) = 2 (resp. \u03d5(v) = 3). If gA(v, w) holds then the fact that \u03c8 is a satis-\nfying truth assignment ensures that gT\u02c6 (\u03d5(v), \u03d5(w)) holds. Extending C by\nsimilarly including clauses for every instantiation of the form fA(v, w) yields\nthat if the resulting set of clauses C is satisfiable then there is homomor-\nphism from A to T\u02c6 . Conversely, if there is a homomorphism from A to T\u02c6\nthen this homomorphism can be translated, using our interpretation above,\ninto a satisfying truth assignment for C. Thus, the problem Hom-Alg2(T\u02c6 )\ncan be reduced, in polynomial-time, to the problem of whether a collec-\ntion of clauses of size 2 is satisfiable, which is well-known to be solvable in\npolynomial-time (see, for example, [18]). The result follows.\n6 Reversing problems\nWe have seen so far that even restrictions of the problem \u2206(\u03bb2) can be as\nhard to resolve as the (very general) problem \u2206(\u03c3 : \u03c3 relational). In this\nsection, we prove a dichotomy result for the class of non-uniform constraint\nsatisfaction problems with template a pair of unary functions one of which\nis the reverse of the other.\nRecall that the digraph of a unary function, f , say, is such that each\ncomponent consists of a directed cycle with pendant in-trees. Suppose that\nthe unary function g is such that its digraph is obtained from that of f by\nreversing the directions of the edges of the directed cycle and leaving all\n32\nother edges as they are. Then we say that g is the reverse of f . If T is a \u03bb2-\nstructure for which fT is the reverse of gT then the problem Hom-Alg2(T )\nis called a reversing problem.\nWhen the unary functions f and g are the reverse of one another, for any\nelement u on the directed cycle in the digraph of f (or g), define the height\nof u to be the length of the longest path ending at u but so that no element\non this path apart from u lies on the directed cycle (there are similarities\nbetween the height of u and the values \u03b4f (u) and \u03b4g(u) from the proof of\nProposition 9).\nTheorem 17 The problem CSP(T ) can be solved in polynomial-time when\nT is a structure over a signature containing only constant symbols and unary\nfunction symbols, so long as:\n(a) every unary function of T has a digraph that is a disjoint union of\ndirected cycles;\n(b) there is one unary function symbol in the signature; or\n(c) there are two unary function symbols, f and g, in the signature, and\nthe functions fT and gT are the reverse of one another such that\nthe corresponding directed cycles, (t0, t1, t2, t3) and (t3, t2, t1, t0), have\nlength 4 and either :\n\u2013 the height of each ti is at most 1; or\n\u2013 t0 and t2 have height at most 2 and t1 and t3 have height 0.\nProof (a) Let T be over the signature \u03c3 consisting of a number of unary\nfunction symbols and constant symbols, where every unary function has a\ndigraph that is a disjoint union of directed cycles. Let A be a \u03c3-structure\nand fix some element u \u2208 |A|. Suppose that there is a homomorphism\n\u03d5 : A \u2192 T taking u to t, for some t \u2208 |T |. This fixes the value (under \u03d5)\nof each element in the connected component of the digraph A containing\nu; and it is straightforward to check whether the resulting map is indeed\na homomorphism (of this connected component of the digraph A: how we\nconsider A as a digraph, and the notion of connected component, should be\nclear given the definitions prior to Lemma 8). We do this for each element\nt \u2208 |T | and for each connected component of A to obtain our polynomial-\ntime algorithm.\n(b) Let T and A be over the signature \u03c3 consisting of one function\nsymbol and a number of constant symbols. The \u03c3-structures A and T are\n33\nboth disjoint unions of directed cycles with pendant in-trees (with possibly\nadditional constants). We take each directed cycle with pendant in-trees\nin A in turn. Fix some element u \u2208 |A| which lies on the directed cycle\nof some directed cycle with pendant in-trees B. Suppose that there is a\nhomomorphism \u03d5 : B \u2192 T taking u to t, for some t \u2208 |T | (and so t must lie\non the cycle of some directed cycle with pendant in-trees in T ). This fixes\nthe value of each element in the directed cycle of B. Let us assume that\nsuch a partial homomorphism exists. If there are no constants lying on the\npendant in-trees in B then it is trivial to determine whether \u03d5 can extended\nto a homomorphism of B to T (see the proof of Proposition 2).\nSuppose that cB is a constant lying on some pendant in-tree in B such\nthat in the path from the constant to the root of the in-tree (that is, the\nelement on both the in-tree and the directed cycle) there are no other con-\nstants. The map \u03d5 must take cB to cT and whether this is possible can easily\nbe verified. Moreover, if this is possible then the image of every element of\n|B| on the path in B from cB to the root of the pendant in-tree is fixed. If\nthere are no other constants lying on some pendant in-tree in B then the\nmap \u03d5 can trivially be extended to a homomorphism of B to T .\nLet us suppose that dB is some other constant lying on some pendant\nin-tree in B such that in the path p from dB to an element of |B| for which\nthe value under \u03d5 has already been set, there are no other constants. The\nmap \u03d5 must take dB to dT and whether this is possible can easily be verified.\nMoreover, if this is possible then the image of every element of |B| on the\npath p in B is fixed. We continue similarly with other constants in B until\neither we obtain a homomorphism of B to T or we show that one cannot\nexist. We repeat the above for each element t \u2208 |T | and for each directed\ncycle with pendant in-trees of A to obtain our polynomial-time algorithm.\n(c) Let T be over the signature \u03c3 consisting of the unary function sym-\nbols f and g and a number of constant symbols. Suppose further that fT\nand gT are the reverse of one another where the corresponding directed cy-\ncles are (t0, t1, t2, t3) and (t3, t2, t1, t0), respectively, and the height of each\nti is at most 1. Let A be some \u03c3-structure and let B be the connected com-\nponent of the digraph A containing some fixed element u \u2208 |A| which lies\non a cycle in the digraph A (B may also have some constants but we shall\nignore them for the moment, until we specifically return to them later).\nSuppose that there is a homomorphism \u03d5 : B \u2192 T taking u to ti, for some\nfixed i \u2208 {0, 1, 2, 3} (recall, for the moment we are ignoring any constants).\nThe values under \u03d5 of the elements of |B| of non-zero in-degree are fixed in\nthe following sense: for every element v \u2208 |B| of non-zero in-degree, we can\nimmediately ascertain whether \u03d5(v) \u2208 {t0, t2} or whether \u03d5(v) \u2208 {t1, t3}\n34\n(note that the digraph T is bipartite). We say that some v \u2208 |B| of non-zero\nin-degree has parity {0, 2} if \u03d5(v) is necessarily in {t0, t2}; and parity {1, 3}\nif \u03d5(v) is necessarily in {t1, t3}.\nSuppose that v and w are elements of |B| of non-zero in-degree. If\nfB(v) = w then include the ordered pair (v, w)f in the collection of or-\ndered pairs P ; and if gB(v) = w then include the ordered pair (v, w)g in the\ncollection P .\nSuppose that v is an element of |B| of in-degree 0, with fB(v) = w and\ngB(v) = z, and where w and z have parity {0, 2}. If t0 has height 0 then\ninclude the ordered pair (w, z)0 in P ; and if t2 has height 0 then include the\nordered pair (w, z)2 in P .\nSuppose that v is an element of |B| of in-degree 0, with fB(v) = w and\ngB(v) = z, and where w and z have parity {1, 3}. If t1 has height 0 then\ninclude the ordered pair (w, z)1 in P ; and if t3 has height 0 then include the\nordered pair (w, z)3 in P .\nFrom the collection P of ordered pairs, build the set \u03c0 of clauses of size\n2 over the set of Boolean variables {Xv : v \u2208 |B|} as follows.\n\u2022 If (v, w)f \u2208 P and v has parity {0, 2} then we include the clauses\n{Xv,\u00acXw} and {\u00acXv, Xw} in \u03c0.\n\u2022 If (v, w)f \u2208 P and v has parity {1, 3} then we include the clauses\n{Xv, Xw} and {\u00acXv,\u00acXw} in \u03c0.\n\u2022 If (v, w)g \u2208 P and v has parity {0, 2} then we include the clauses\n{Xv, Xw} and {\u00acXv,\u00acXw} in \u03c0.\n\u2022 If (v, w)g \u2208 P and v has parity {1, 3} then we include the clauses\n{Xv,\u00acXw} and {\u00acXv, Xw} in \u03c0.\n\u2022 If (v, w)0 \u2208 P then we include the clause {\u00acXv,\u00acXw} in \u03c0.\n\u2022 If (v, w)1 \u2208 P then we include the clause {\u00acXv,\u00acXw} in \u03c0.\n\u2022 If (v, w)2 \u2208 P then we include the clause {Xv, Xw} in \u03c0.\n\u2022 If (v, w)3 \u2208 P then we include the clause {Xv, Xw} in \u03c0.\nSuppose that there is a truth assignment \u03c4 satisfying \u03c0. Let us use \u03c4 to\nderive a mapping \u03d5 : |B| \u2192 |T |.\n\u2022 If v has non-zero in-degree in B then:\n\u2013 if v has parity {0, 2} and \u03c4(Xv) = true then set \u03d5(v) = t0;\n35\n\u2013 if v has parity {0, 2} and \u03c4(Xv) = false then set \u03d5(v) = t2;\n\u2013 if v has parity {1, 3} and \u03c4(Xv) = true then set \u03d5(v) = t1;\n\u2013 if v has parity {1, 3} and \u03c4(Xv) = false then set \u03d5(v) = t3.\n\u2022 If v has zero in-degree in B then \u03d5(v) is as dictated by \u03d5(fB(v)) and\n\u03d5(gB(v)) (note that as yet it is not clear that \u03d5(v) is well-defined).\nSuppose that v \u2208 |B| is such that \u03d5(v) is not well-defined. For this\nto be the case, we must have that \u03d5(fB(v)) = \u03d5(gB(v)) \u2208 {t0, t1, t2, t3}\nand that \u03d5(fB(v)) has height 0. If \u03d5(fB(v)) = t0 then, by construction,\n(fB(v), gB(v))0 \u2208 P and the clause {\u00acXfB(v),\u00acXgB(v)} is in \u03c0. Thus, either\n\u03c4(XfB(v)) or \u03c4(XgB(v)) is false; that is, either \u03d5(f\nB(v)) or \u03d5(gB(v)) is t2,\nwhich yields a contradiction. The cases when \u03d5(fB(v)) = t1, t2 and t3 are\nsimilar. Consequently, \u03d5 is well-defined.\nSuppose that v, w \u2208 |B| are such that fB(v) = w and that v has non-zero\nin-degree. Suppose further that the parity of v is {0, 2}. Thus, (v, w)f is\nin P and the clauses {Xv,\u00acXw} and {\u00acXv, Xw} are in \u03c0. Hence, \u03c4(Xv) =\n\u03c4(Xw) and by the construction of \u03d5, either (\u03d5(v) = t0 and \u03d5(w) = t1)\nor (\u03d5(v) = t2 and \u03d5(w) = t3). In both cases, f\nT (\u03d5(v)) = \u03d5(w). Similar\nreasoning can be applied should the parity of v be {1, 3}. Hence, \u03d5 respects\nthe function fB; and identical reasoning shows that \u03d5 respects the function\ngB too. The arguments above showing that \u03d5 is well-defined imply that \u03d5\nis a homomorphism from B to T .\nConversely, if there exists a homomorphism \u03d5 : B \u2192 T then reversing\nthe above procedure and arguments yields a satisfying truth assignment for\nthe clauses of \u03c0.\nIt only remains to deal with any constants which might appear in B.\nThe appearance of constants further constrains the possible homomorphisms\nfrom B to T , and this can be reflected by including suitable clauses in \u03c0. For\nexample, suppose that: CB = v; v has non-zero in-degree and parity {0, 2};\nand CT = t0. In this case we include a clause {Xv} (which forces \u03c4(Xv)\nto be true in any satisfying truth assignment on the clauses of \u03c0; and so\n\u03d5(v) to be t0, according to our construction). Alternatively, suppose that:\nCB = v; v has zero in-degree; and CT = t1. In this case we include clauses\n{\u00acXfB(v)} and {XgB(v)}.\nThus, the problem of deciding whether there is a homomorphism from\nB to T taking u to some fixed ti, where i \u2208 {0, 1, 2, 3}, can be reduced\nto the satisfiability problem for clauses of size at most 2, which is solvable\nin polynomial-time (see, for example, [18]). Hence, the problem of deciding\n36\nwhether there is a homomorphism from A to T can be solved in polynomial-\ntime.\nNow suppose that fT and gT are the reverse of one another where the\ncorresponding directed cycles are (t0, t1, t2, t3) and (t3, t2, t1, t0), respectively,\nand where t0 and t2 have height at most 2 and t1 and t3 have height 0. Let A\nbe some \u03c3-structure and let B be the connected component of the digraph A\ncontaining some fixed element u \u2208 |A| which lies on a cycle in the digraph A\n(B may also have some constants). Suppose that there is a homomorphism\n\u03d5 : A \u2192 T taking u to ti, for some fixed i \u2208 {0, 1, 2, 3}. Either such a\n\u03d5 can easily be verified not to exist or the values under \u03d5 of many of the\nelements of |B| are effectively fixed at some value from {t0, t1, t2, t3}(using\nsimple reasoning, like if \u03d5(v) = t1 and f\nB(w) = v then \u03d5(w) = t0). Let us\nassume that such a partial homomorphism exists.\nLet F \u2286 |B| be the set of elements whose values under \u03d5 are fixed. Note\nthat given v, v\u2032, v\u2032\u2032 \u2208 |B| \\ F , it cannot be the case that v, v\u2032 and v\u2032\u2032 are all\ndistinct and (v, v\u2032) and (v\u2032, v\u2032\u2032) are edges in the digraph B (as this would\nmean that the value \u03d5(v\u2032\u2032) is effectively fixed). So, partition |B| \\F into the\ndisjoint sets: L1, consisting of those elements v for which either f\nB(v) or\ngB(v) is in F ; and L2, consisting of those elements v for which neither f\nB(v)\nnor gB(v) is in F .\nSuppose that v \u2208 L1. Note that either f\nB(v) 6\u2208 F or gB(v) 6\u2208 F (as\notherwise the value of \u03d5(v) would effectively be fixed). Suppose, for example,\nthat fB(v) \u2208 F . Then it must be the case that \u03d5(fB(v)) \u2208 {t0, t2}. If\n\u03d5(fB(v)) = t0 then \u03d5(v) must either be t3 or in the pendant in-tree with root\nt0 (where there is an edge (\u03d5(v), t0) in the digraph T ); and if \u03d5(f\nB(v)) = t2\nthen \u03d5(v) must either be t1 or in the pendant in-tree with root t2 (where\nthere is an edge (\u03d5(v), t2) in the digraph T ). In the former case, label v with\nthe set {t3, p0}; and in the latter case, with the set {t1, p2}. Do likewise for\nevery element of L1: the label sets are drawn from {t3, p0}, {t1, p2}, {t3, p2}\nand {t1, p0}. Note that this process might even enable us to deduce that\nthe partial homomorphism \u03d5 cannot be extended to a full homomorphism\n(assume in the following that this is not the case).\nAs B must necessarily be bipartite if there is a homomorphism to T , we\nmay assume that there are no functional relationships between the elements\nof L1. Hence, we may assume that in the digraph B, there is an edge from\nevery element of L1 to an element of L2. In the same vein, we may assume\nthat there are no functional relationships between elements of L2; and so\nboth fB(v) and gB(v) are in L1, for every element v \u2208 L2.\nWe shall now construct a conjunction \u03c0 of clauses of at most 2 literals\n(over a set of boolean variables) in such a way that \u03c0 is satisfiable if, and only\n37\nif, the partial homomorphism \u03d5 can be extended to a full homomorphism\nfrom B to T . Suppose that the element v \u2208 L1 is labelled with the set\n{t3, p0}, for example. Then the clauses\n{tv3, p\nv\n0} and {\u00act\nv\n3,\u00acp\nv\n0}\nare clauses in the conjunction; and we add clauses likewise for every labelling\nof every element of L1. Note that any truth assignment satisfying both\n{tv3, p\nv\n0} and {\u00act\nv\n3,\u00acp\nv\n0} makes exactly one of t\nv\n3 and p\nv\n0 true; which we will\ninterpret as meaning that element v is mapped to t3 or an element in the\npendant in-tree with root t0 (where there is an edge (\u03d5(v), t0)).\nLet v \u2208 L1 be such that, for example, v is labelled with the set {t3, p0}\nand gB(v) = w, where w \u2208 L2. Include in \u03c0 the clauses\n{\u00actv3, t\nw\n2 }, {\u00acp\nv\n0, t\nw\n0 }, {t\nw\n2 , t\nw\n0 } and {\u00act\nw\n2 ,\u00act\nw\n0 }\nto reflect the facts that: if v maps to t3 then w must map to t2; if v maps\nto an element in the pendant in-tree with root t0 (where there is an edge\n(\u03d5(v), t0)) then w must map to t0; and w must map to either t0 or t2. Do\nlikewise for every edge in the digraph B from an element of L1 to an element\nof L2.\nLet v \u2208 L2 be such that, for example, g\nB(v) = w, where w \u2208 L1 and w\nis labelled with the set {t3, p0}. Include in \u03c0 the clauses\n{\u00actw3 , t\nv\n0}, {\u00acp\nw\n0 , q\nv\n0}, {t\nv\n0, q\nv\n0} and {\u00act\nv\n0,\u00acq\nv\n0}\nto reflect the facts that: if w maps to t3 then v must map to t0; if w maps\nto an element in the pendant in-tree with root t0 (where there is an edge\n(\u03d5(v), t0)) then v must map to an element in the pendant in-tree with root\nt0 (where there is a path of length 2 to the root t0); and v must map to\neither t0 or an element in the pendant in-tree with root t0 (where there is a\npath of length 2 to the root t0). Do likewise for every edge in the digraph\nB from an element of L2 to an element of L1.\nFinally, if the pendant in-tree in T with root t0 (resp. t2) has height\n0 then assign every boolean variable of the form pv0 and q\nv\n0 (resp. p\nv\n2 and\nqv2) the value false; and if the pendant in-tree in T with root t0 (resp.\nt2) has height 1 then assign every boolean variable of the form q\nv\n0 (resp.\nqv2) the value false (this restricts the maps allowed). Denote the resulting\nconjunction by \u03c0.\nLet s0 be an element in T in the pendant in-tree with root t0 for which\n(s0, t0) is an edge in the digraph T (if such an element exists); and let r0\n38\nbe an element in T in the pendant in-tree with root t0 for which (r0, s0) is\nan edge in the digraph T (if such an element exists). Nodes s2 and r2 are\ndefined likewise.\nSuppose that there is a satisfying truth assignment of \u03c0. Interpreting\nthis truth assignment as described above, except that if pv0 (p\nv\n2, q\nv\n0 , q\nv\n2) is\nset at true under this assignment then map the element v to the element s0\n(resp. s2, r0, r2), yields an extension of our partial homomorphism \u03d5 which\nobeys all functional dependencies in B, i.e., a homomorphism from B to T .\nConversely, suppose that there is an extension of our partial homomorphism\n\u03d5 to a homomorphism from B to T . Then there exists an extension of our\npartial homomorphism \u03d5 to a homomorphism \u03d5\u2032 from B to T so that all\nelements of |B| \\ F that are mapped to an element of |T | \\ {t0, t1, t2, t3} are\nmapped to one of the elements of {s0, s2, r0, r2} (this is because the constants\nin B and T have no real role to play as to whether an extension of \u03d5 exists or\nnot). Consequently, such a homomorphism \u03d5\u2032 immediately translates into\na satisfying truth assignment of \u03c0. As the satisfiability problem for clauses\nof size at most 2 is solvable in polynomial-time (see, for example, [18]), as\nto whether there is a homomorphism from B to T , taking u to ti, can be\ndecided in polynomial-time. We repeat the above for each element ti, for\ni = 0, 1, 2, 3 (with u fixed), and for each connected component of A (with\nsuitably chosen fixed element) to obtain our polynomial-time algorithm.\nIt turns out that the reversing problems not covered by Theorem 17 are\nNP-complete (via polynomial-time reductions).\nTheorem 18 The problem Hom-Alg2(T ), where f\nT and gT are the reverse\nof one another, is NP-complete if one of the following conditions holds:\n(a) the directed cycles (t0, t1, . . . , tl\u22121) and (tl\u22121, tl\u22122, . . . , t0) correspond-\ning to fT and gT , respectively, are such that t0 has height 1 and either\nl = 3 or l \u2265 5;\n(b) the directed cycles (t0, t1, t2, t3) and (t3, t2, t1, t0) corresponding to f\nT\nand gT , respectively, are such that t0 has height 3; or\n(c) the directed cycles (t0, t1, t2, t3) and (t3, t2, t1, t0) corresponding to f\nT\nand gT , respectively, are such that t0 has height 2 and t1 has height at\nleast 1.\nProof (a) Consider the retract problem for an undirected cycle of length\nl, RETCYC(l) for short, where: an instance is an undirected graph G and a\n39\nsubgraph H, a cycle of length l; and a yes-instance is an instance for which\nthere is a homomorphism \u03d5 from G toH such that \u03d5(u) = u, for every vertex\nof the cycle H. This problem is known to be NP-complete when l = 3 or\nwhen l \u2265 5 (the case for cycles of odd length is a special case of the proof\nof the main result in [13]; and the case for cycles of even length at least 6\ncan be found in [6, 4]). We shall describe a polynomial-time reduction from\nRETCYC(l) to Hom-Alg2(T ).\nLet (G,H) be an instance of RETCYC(l). We shall construct a \u03bb2-\nstructure F corresponding to (G,H). Actually, our structure F will be only\npartially defined; but by proceeding as we did in the proof of Theorem 13, we\ncan obtain a fully defined \u03bb2-structure for which there is a homomorphism\nto T if, and only if, there is a homomorphism from the partially defined\nstructure to T . Take a set S of elements isomorphic to the vertex set of G.\nFor every element of s \u2208 S, introduce l additional elements us0, u\ns\n1, . . . , u\ns\nl\u22121\nand define f(usi ) = u\ns\n(i+1)mod l, for each i \u2208 {0, 1, . . . , l \u2212 1}. Furthermore,\ndefine f(s) = us0 (all elements so introduced are distinct). Note that this\nhas the effect that in any homomorphism from the eventual structure F to\nT , every element so far introduced must map to ti or to some element t for\nwhich fT (t) = gT (t) = ti, for some i \u2208 {0, 1, . . . , l \u2212 1}.\nLet u and v be distinct elements of S. We now detail three constructions\nto be subsequently used in order to obtain our eventual structure F . Note\nthat in each of these constructions, we introduce additional elements into the\ndomain of F . Using the above construction, we may clearly assume that in\nany homomorphism from the eventual structure F to T , every such element\nintroduced must map to ti or to some element t for which f\nT (t) = gT (t) = ti,\nfor some i \u2208 {0, 1, . . . , l \u2212 1}.\nConstruction 1 By add the \u03b1-edge (u, v) we mean introduce additional el-\nements u\u2032 and v\u2032 to |F| and define that gF (u\u2032) = u, gF (v\u2032) = v and\nfF (u\u2032) = v\u2032. This ensures that in any homomorphism from the eventual\nstructure F to T , u and v must map to some ti and tj , respectively, where:\nif ti has height 0 then j = (i + 1) mod l is the only possibility; and if ti\nhas non-zero height then both j = (i \u2212 1) mod l and j = (i + 1) mod l\nare possibilities. Furthermore, any i and j are viable (subject to the above\nconstraints).\nConstruction 2 Consider the directed cycle (t0, t1, . . . , tl\u22121) in T (corre-\nsponding to fT ). Suppose that there is a path of length r in this cycle\nfrom ti such that some element tj on this path has height 1. If this is the\ncase then we say that ti can r-see an element of height 1. Let r be the\nsmallest non-negative integer with the property that every ti can r-see an\n40\nelement of height 1 but, if r 6= 0, there is some element tj which cannot\n(r \u2212 1)-see an element of height 1. If r > 0 then fix j0 as some index for\nwhich tj0 cannot (r \u2212 1)-see an element of height 1.\nBy add the \u03b2-edge (u, v) we mean introduce additional elements so that\nthere is a path of (r+1) \u03b1-edges from u to some (new) element w, followed\nby a path of r g-edges from w to v (a g-edge is just a pair of elements u\u2032 and\nv\u2032 for which gF (u\u2032) = v\u2032, and similarly for an f -edge: if r = 0 then u = w).\nThis ensures that in any homomorphism from the eventual structure F to\nT , it is possible for u to map to any ti and for v to map to t(i\u22121)mod l and\nt(i+1)mod l: furthermore, these are the only two possibilities if i = j0. Note\nthat any i and j are viable (subject to the above constraints).\nConstruction 3 By add the \u03b3-edge (u, v) we mean introduce additional sets\nof elements \u0393p so that for every p \u2208 {0, 1, . . . , l \u2212 1}: there is an f -edge\nfrom a new element up0 to u; there is a path of p f -edges from u to some\n(new) element wp; followed by a \u03b2-edge (wp, xp), where xp is a new element;\nfollowed by a path of p g-edges from xp to v; and there is an f -edge from\na new element vp0 to v (the different sets \u0393p of new elements introduced are\ndisjoint). It is certainly the case that there is a homomorphism from any\n\u03b3-edge to T ; and our construction ensures that in any homomorphism from\nthe eventual structure F to T , u and v must map to some elements ti and\ntj . However, we can say more.\nSuppose that u and v map to elements ti and tj , respectively, in some\neventual homomorphism \u03d5 from the eventual structure F to T . Consider\nthe distinguished element tj0 . There exists a value p so that the element\nwp \u2208 \u0393p must map to tj0 via \u03d5; and consequently, from above, x\np must map\nto either t(j0\u22121)mod l or t(j0+1)mod l, with both these values possible. Thus, v\nmust map to either t(i\u22121)mod l or t(i+1)mod l, with both these values possible.\nThat is, either j = (i \u2212 1) mod l or j = (i + 1) mod l; and any i and j are\nviable (subject to the above constraints).\nWe now extend F using these constructions (recall that F \u2019s current state\nis as it was prior to the descriptions of our constructions). For every pair\nof elements u, v \u2208 S for which (u, v) is an undirected edge of G \\ H, add\nthe \u03b3-edge (u, v) to F (to be more specific, add either the \u03b3-edge (u, v) or\nthe \u03b3-edge (v, u)). The fact that there is a homomorphism of G to H fixing\neach vertex of H if, and only if, there is a homomorphism from F to T , is\nimmediate from our constructions; and this, allied with the fact that F can\nbe constructed from (G,H) in polynomial-time, yields the result.\n(b) Consider some instance A of the problem 1-in-3-SAT; that is, a col-\nlection C1, C2, . . . , Cm of subsets of {X1, X2, . . . , Xn} of size 3. We shall\n41\ndescribe an instance F of Hom-Alg2(T ), where T is as in the statement of\nthe theorem.\nThere are elements c0, c1, c2 and c3 in |F| for which:\nfF (c0) = c1; f\nF (c1) = c2; f\nF (c2) = c3; and f\nF (c3) = c0.\nThere are elements d0, d1 and d2 for which:\nfF (d0) = d1; f\nF (d1) = d2; and f\nF (d2) = g\nF (d2) = c0.\nIn particular, we may assume that any eventual homomorphism from F to\nT must map c0 to t0.\nFor every i \u2208 {1, 2, . . . ,m}, there is an element Ci in |F| as well as other\nelements so that fFgFfF (Ci) = c0 (all nodes so introduced are distinct).\nThis has the effect that in any eventual homomorphism from F to T , the\nelement Ci must be mapped to:\n(1) an element not in the directed cycle in T but for which in the digraph\nT there is a path of length 3 to t0 where no element on this path is in\nthe directed cycle apart from t0;\n(2) an element not in the directed cycle in T but for which in the digraph\nT there is an edge to t0; or\n(3) the element t3.\nFor every j \u2208 {1, 2, . . . , n}, introduce an elementXj to |F|. Fix an order-\ning on the Boolean variables in each clause inA. If clause Ci = {X\n1\ni , X\n2\ni , X\n3\ni }\nthen introduce additional elements so that:\nfFfFgF (Ci) = X\n1\ni ; f\nFfFfFfFfF (Ci) = X\n2\ni ; and g\nFfFgFfFgF (Ci) = X\n3\ni\n(again, all nodes so introduced are distinct). Note that the resulting \u03bb2-\nstructure F is partially defined. This does not create any difficulties as,\nagain, by proceeding as we did in the proof of Theorem 13, we can obtain a\nfully defined \u03bb2-structure for which there is a homomorphism to T if, and\nonly if, there is a homomorphism from the partially defined structure to T .\nLet \u03d5 be a homomorphism from F to T ; and let Ci = {X\n1\ni , X\n2\ni , X\n3\ni }\nbe a clause of A, for some i \u2208 {1, 2, . . . ,m}. From above, there are three\ndifferent possibilities for \u03d5(Ci) (here, Ci refers to the element Ci of |F| and\nnot the clause Ci of A). In case (1), (\u03d5(X\n1\ni ), \u03d5(X\n2\ni ), \u03d5(X\n3\ni )) = (t0, t2, t0);\nin case (2), (\u03d5(X1i ), \u03d5(X\n2\ni ), \u03d5(X\n3\ni )) = (t2, t0, t0); and in case (3), (\u03d5(X\n1\ni ),\n42\n\u03d5(X2i ), \u03d5(X\n3\ni )) = (t0, t0, t2). Interpreting t0 as true and t2 as false yields a\nsatisfying truth assignment for A.\nConversely, if there is a satisfying truth assignment for A then applying\nreasoning similar to that above yields a homomorphism from F to T . As F\ncan be constructed in polynomial-time, the result follows.\n(c) Consider some instance A of the problem 1-in-3-SAT; that is, a col-\nlection C1, C2, . . . , Cm of subsets of {X1, X2, . . . , Xn} of size 3. We shall\ndescribe an instance F of Hom-Alg2(T ), where T is as in the statement of\nthe theorem.\nThere are elements c0, c1, c2 and c3 for which\nfF (c0) = c1; f\nF (c1) = c2; f\nF (c2) = c3; and f\nF (c3) = c0.\nThere are elements d0, d1 and d2 for which\nfF (d0) = d1; f\nF (d1) = g\nF (d1) = c0; and f\nF (d2) = g\nF (d2) = c1.\nIn particular, we may assume that any eventual homomorphism from F to\nT must map c0 to t0.\nFor every i \u2208 {1, 2, . . . ,m}, there is an element Ci in |F| as well as other\nelements so that gFfF (Ci) = c0 (all nodes so introduced are distinct). This\nhas the effect that in any eventual homomorphism from F to T , the element\nCi must be mapped to:\n(1) an element not in the directed cycle in T but for which in the digraph\nT there is a path of length 2 to t0 where no element on this path is in\nthe directed cycle apart from t0;\n(2) an element not in the directed cycle in T but for which in the digraph\nT there is an edge to t1; or\n(3) the element t0.\nFor every j \u2208 {1, 2, . . . , n}, introduce an element Xj into |F|. Fix an\nordering on the Boolean variables in each clause in A. If clause Ci =\n{X1i , X\n2\ni , X\n3\ni } then introduce additional elements so that:\ngFgF (Ci) = X\n1\ni ; f\nFfFfFfF (Ci) = X\n2\ni ; and f\nFgF (Ci) = X\n3\ni\n(again, all nodes so introduced are distinct). Note that the resulting \u03bb2-\nstructure F is partially defined. This does not create any difficulties as,\nagain, by proceeding as we did in the proof of Theorem 13, we can obtain a\n43\nfully defined \u03bb2-structure for which there is a homomorphism to T if, and\nonly if, there is a homomorphism from the partially defined structure to T .\nLet \u03d5 be a homomorphism from F to T ; and let Ci = {X\n1\ni , X\n2\ni , X\n3\ni } be a\nclause of A, for some i \u2208 {1, 2, . . . ,m}. From above, there are three different\npossibilities for \u03d5(Ci). In case (1), (\u03d5(X\n1\ni ), \u03d5(X\n2\ni ), \u03d5(X\n3\ni )) = (t0, t2, t0);\nin case (2), (\u03d5(X1i ), \u03d5(X\n2\ni ), \u03d5(X\n3\ni )) = (t0, t0, t2); and in case (3), (\u03d5(X\n1\ni ),\n\u03d5(X2i ), \u03d5(X\n3\ni )) = (t2, t0, t0). Interpreting t0 as true and t2 as false yields a\nsatisfying truth assignment for A.\nConversely, if there is a satisfying truth assignment for A then applying\nreasoning similar to that above yields a homomorphism from F to T . As F\ncan be constructed in polynomial-time, the result follows.\nAn immediate corollary from Theorems 17 and 18 is the following di-\nchotomy result.\nCorollary 19 Every reversing problem is either solvable in polynomial-time\nor NP-complete.\nProof Consider some reversing problem Hom-Alg2(T ). Let l denote the\nlength of the directed cycles corresponding to the unary functions fT and\ngT .\nIf l = 1 or l = 2 then fT and gT are identical; and part (b) of Theorem 17\nyields that our reversing problem is solvable in polynomial-time.\nIf l = 3 or l \u2265 5 and, further, every element on the directed cycles\ncorresponding to fT and gT has height 0 then part (a) of Theorem 17\nyields that our reversing problem is solvable in polynomial-time.\nIf l = 3 or l \u2265 5 and, further, some element on the directed cycles\ncorresponding to fT and gT has height greater than 0 then part (a) of\nTheorem 18 yields that our reversing problem is NP-complete.\nIf l = 4 then part (c) of Theorem 17 and parts (b) and (c) of Theorem 18\ncover all other cases.\n7 Adding lists\nConsider some structure T . A list in T is a unary relation over |T | (de-\nscribing a set of elements of |T |). In this section we consider the addition\nof a list or lists to templates. We shall show that some of our results can be\nextended when the templates are augmented with lists.\nWe begin with some definitions. Let H be some digraph. A choice\nmajority function \u03c7 is a ternary function on |H| with the property that if\n\u03c7(x, y, z) = w and \u03c7(x\u2032, y\u2032, z\u2032) = w\u2032 then:\n44\n(i) if (x, x\u2032), (y, y\u2032) and (z, z\u2032) are edges of H then (w,w\u2032) is too;\n(ii) w \u2208 {x, y, z}; and\n(iii) if two out of x, y and z are equal to the same value v then w = v.\nWe can define a choice majority function for structures over arbitrary re-\nlational signatures in a similar way (we only remark that every one of the\nstructures relations must satisfy condition (i) of the definition). A crucial\nresult in what follows will be Theorem 25 of [10] where it is proven that if\nT is a relational structure which admits a choice majority function then the\nproblem CSP(T ) is uniformly polynomial-time solvable.\nLet H be a digraph. We say that H is levelled if we can assign a non-\nnegative integer lev(v) to each vertex v so that for every edge (u, v) of H,\nlev(u) = lev(v) + 1. We call lev(v) the level of v. We say that a levelled\ndigraph is orderly levelled if every vertex v can be assigned an integer ord(v),\nthe order , so that: if u and v are distinct vertices then ord(u) 6= ord(v); and\nif (u, v) and (u\u2032, v\u2032) are edges ofH with lev(u) = lev(u\u2032) and ord(u) < ord(u\u2032)\nthen ord(v) \u2264 ord(v\u2032). We say that a digraph H is almost orderly levelled\nif there exists an orderly levelled digraph H\u2032 such that H is obtained from\nH\u2032 by identifying two vertices u and v in H\u2032, where: u is the unique vertex\nof H\u2032 with lev(u) = 0; and if lev(v) = m, with m > 0, then v has the\nsmallest order from all vertices of level m. (The above properties are similar\nto properties defined in [12].)\nWe begin by considering the problem CSP(T ), where T is over the sig-\nnature consisting of one unary function symbol and an arbitrary number\nof unary relation symbols; that is, an extension of the scenario studied in\nSection 3 (recall that in the absence of any unary relation symbols, CSP(T )\nis in L). Actually, the consideration of such a problem CSP(T ) is really an\nextension of the scenario in part (b) of Theorem 17, as a constant can be\nmodelled as a unary relation containing exactly one element.\nReferring to the proof of Theorem 17, one can easily verify that the\nproofs of parts (a) and (c) of that theorem hold when the signature con-\ntains, in addition, an arbitrary number of unary relation symbols (in brief,\nthe proofs of (a) and (c) are based around a systematic construction of\na homomorphism, where the homomorphism is incrementally constructed\naccording to \u2018deterministic\u2019 reasoning, and the presence of lists just rules\nout some potential homomorphisms). However, the proof of part (b) of\nTheorem 17 does not hold when there are unary relation symbols present.\nNevertheless, it turns out that there is an alternative proof of the analogue\nto part (b) of Theorem 17 when there are unary relation symbols present.\n45\nTheorem 20 Let H be a digraph.\n(a) If H is almost orderly levelled then H admits a choice majority func-\ntion.\n(b) If H is the digraph of a unary function f then each connected compo-\nnent of H is almost orderly levelled.\nConsequently, if T is a \u03c3-structure where \u03c3 consists of a unary function\nand an arbitrary number of unary relations then the problem CSP(T ) can\nbe solved uniformly in polynomial-time.\nProof (a) Let H\u2032 be an orderly levelled digraph such that H is obtained\nfrom H\u2032 by identifying the vertices u and v of H\u2032, where u is the unique\nvertex of level 0, and where lev(v) = m > 0 and v has the smallest order\nfrom all vertices of level m. Let us order the set of pairs {(lev(v), ord(v)) :\nv is a vertex of H\u2032} lexicographically. Furthermore, we refer to the sets of\nvertices whose levels differ by a multiple of m as layers.\nDefine the function \u03c7(x, y, z) as follows.\n(1) If x, y and z are in three different layers then \u03c7(x, y, z) = x.\n(2) If exactly two of x, y and z are in different layers then \u03c7(x, y, z) is the\nvalue from this pair of values occurring first in the list x, y, z.\n(3) If x, y and z are in the same layer then \u03c7(x, y, z) is the value w out\nof {x, y, z} for which (lev(w), ord(w)) is neither the minimum nor the\nmaximum out of {(lev(x), ord(x)), (lev(y), ord(y)), (lev(z), ord(z))}.\nFor any triple of vertices (x, y, z) of H\u2032, define the type of (x, y, z) as (1), (2)\nor (3), according to the definition of \u03c7.\nWe shall now verify that \u03c7 is a choice majority function (clearly, it\nsuffices to verify condition (i) of the definition). Let (x, x\u2032), (y, y\u2032) and\n(z, z\u2032) be edges of H\u2032. First, note that the type of (x, y, z) is identical to\nthe type of (x\u2032, y\u2032, z\u2032); and that if (x, y, z) and (x\u2032, y\u2032, z\u2032) have type (1) or (2)\nthen trivially (\u03d5(x, y, z), \u03d5(x\u2032, y\u2032, z\u2032)) is an edge of H\u2032. Suppose that both\n(x, y, z) and (x\u2032, y\u2032, z\u2032) have type (3). Consider, for example, (x, x\u2032) and\n(y, y\u2032). Suppose that (lev(x), ord(x)) \u2264 (lev(y), ord(y)). If lev(x) < lev(y)\nthen trivially lev(x\u2032) < lev(y\u2032), with (lev(x\u2032), ord(x\u2032)) < (lev(y\u2032), ord(y\u2032)). If\nlev(x) = lev(y) and ord(x) < ord(y) then, by definition, ord(x\u2032) \u2264 ord(y\u2032),\nwith (lev(x\u2032), ord(x\u2032)) \u2264 (lev(y\u2032), ord(y\u2032)). Consequently, (lev(x), ord(x)) \u2264\n(lev(y), ord(y)) implies that (lev(x\u2032), ord(x\u2032)) \u2264 (lev(y\u2032), ord(y\u2032)), and so\n46\n(\u03c7(x, y, z), \u03c7(x\u2032, y\u2032, z\u2032)) is an edge ofH\u2032. Thus, \u03c7 is a choice majority function\nfor H\u2032.\nConsider the digraph H obtained from H \u2032. Every vertex of H inherits\nits layer from that in H \u2032 (recall, H is formed from H \u2032 by identifying u and\nv, and u and v are in the same layer). Within any layer, the vertices of H\ninherit their relative order from that in H \u2032 (within their layer in H \u2032, u is the\nfirst vertex in the order with v the second). Referring to the above proof,\nthe definition of the function \u03c7 for H is identical to that of the definition\nof \u03c7 for H \u2032. Moreover, the proof above applies to the function \u03c7 for H and\nthus \u03c7 is a choice majority function for H.\n(b) Assume that H is connected. Let x be any vertex of H belonging\nto the unique cycle in the digraph H, which has length m \u2265 1, say, and let\ny = f(x) (note that y may be identical to x). Define the digraph H\u2032 by\nincluding a new vertex x\u2032, removing the edge (x, y) and including the edge\n(x\u2032, y). So, x\u2032 has in-degree 0 and x has out-degree 0 in H\u2032; and H\u2032 is an\nin-tree with root x. Define lev(z) to be the depth of any vertex z in the\nin-tree H\u2032 (rooted at x); and define ord(z) to be the order z is visited in a\nbreadth-first search of H\u2032 starting at the root x, taking care to ensure that\nx\u2032 has the least order of all vertices whose level is m, where m is the length\nof the unique cycle. Thus, H\u2032 is orderly levelled and H is almost orderly\nlevelled.\nNow, consider some instance F of the problem CSP(T ), where T is a\n\u03c3-structure and \u03c3 consists of a unary function f and an arbitrary number\nof unary relations. Suppose, for the moment, that the digraphs F and T\nare both connected (that is, the digraphs described by fF and fT are both\nconnected). Let F1 and T1 be the restrictions of F and T to the signature\n\u03bb1 = \u3008f\u3009, respectively. By (a) and (b), T1 is almost orderly levelled and T1\nadmits a choice majority function. By Theorem 25 of [10], if any digraph\nH admits a choice majority function then the problem CSP(H\u2032), where H\u2032\nis H augmented with an arbitrary number of lists, can be solved in time\npolynomial in the size of an instance of the problem and also the size of\nH. Hence, as to whether there is a homomorphism from F1 to T1 can be\ndetermined in time polynomial in |F1| and |T1|.\nThere is a homomorphism from F to T if, and only if, there is a homo-\nmorphism from every connected component of F to some connected com-\nponent of T . Thus, we obtain that the problem CSP(T ) can be solved in\ntime polynomial in both the size of the instance and the size of T .\nNote that even though we have shown, in Section 3, that Hom-Alg1(T ) is\nin L, we do not know whether the analogous problem where lists are present\n47\nis in L: all we have been able to show is that it is in P.\nThe fact that the proof of part (c) of Theorem 17 holds in the presence\nof lists, and the trivial observation that the proof of Theorem 18 holds in\nthe presence of lists, yield the following corollary.\nCorollary 21 Let T be a structure over the signature consisting of two\nunary function symbols and an arbitrary number of unary relation symbols,\nwhere the two functions of T are the reverse of one another. The problem\nCSP(T ) is either solvable in polynomial-time or NP-complete. That is,\nevery reversing problem with lists is either solvable in polynomial-time or\nNP-complete.\nNote that Theorem 20 can be applied to other classes of digraphs. An\nunbalanced oriented cycle is a cycle with each edge oriented in some direction\nbut which is not a levelled digraph. It was shown in [6] that unbalanced\noriented cycles are almost orderly levelled digraphs. Thus, Theorem 20 and\nthe result from [10] cited in the proof of Theorem 20 yield the following\ncorollary.\nCorollary 22 Let T be a structure over the signature consisting of a binary\nrelation symbol and an arbitrary number of unary relation symbols, where\nthe digraph described by the binary relation is an unbalanced oriented cycle.\nThe problem CSP(T ) can be solved uniformly in polynomial-time.\nWe end this section by considering constraint satisfaction problems with\na template T , over some signature \u03c3, but where any instance of the problem\nis a \u03c3-structure A augmented with a list Uu of elements of |T |, for every\nelement of u \u2208 |A|. Such an instance is a yes-instance if there exists a homo-\nmorphism \u03d5 : A \u2192 T for which \u03d5(u) \u2208 Uu, for every u \u2208 |A|. Essentially,\nthe lists attached to A restrict the set of potential homomorphisms. We\ndenote the above problem by CSP(T + all lists).\nA digraph H is N -free if it does not have vertices x, x\u2032, y and y\u2032, with\nx 6= x\u2032 and y 6= y\u2032, such that (x, y), (x, y\u2032) and (x\u2032, y\u2032) are edges of H.\nTheorem 23 Let T be over a structure \u03c3 which consists of the binary re-\nlation symbols H1, H2, . . . , Hr, where r \u2265 1.\n(a) If T admits a choice majority function then the problem CSP(T +\nall lists) can be solved in polynomial-time.\n(b) If the digraph described by HTi is N -free, for all i \u2208 {1, 2, . . . , r},\nand T does not admit a choice majority function then the problem\nCSP(T + all lists) is NP-complete.\n48\nFurthermore, every digraph associated with a unary function is N -free. Con-\nsequently, if T \u2032 is a structure over the signature consisting of the unary\nfunction symbols f1, f2, . . . , fr then the problem CSP(T\n\u2032+ all lists) is either\nsolvable in polynomial-time or NP-complete.\nProof (a) This follows immediately from Theorem 25 of [10].\n(b) Suppose that for each i \u2208 {1, 2, . . . , r}, the digraph described by HTi\nis N -free. We shall now define a particular \u03c3-structure F with attached lists\n(henceforth, when we refer to F we shall mean F with these attached lists).\nThe domain of F consists of {(u, v, w) : u, v, w \u2208 |T |}.\n\u2022 If u, v, w \u2208 |T | are all distinct then the list associated with the element\n(u, v, w) of |F|, that is, U(u,v,w), is defined as {u, v, w}.\n\u2022 If u, v, w \u2208 |T | are such that at least two of {u, v, w} are identical, with\nthis value being x, then the list associated with the element (u, v, w)\nof |F|, that is, U(u,v,w), is defined as {x}.\n\u2022 For each i \u2208 {1, 2, . . . , r}, if u, v, w, u\u2032, v\u2032, w\u2032 \u2208 |T | then ((u, v, w),\n(u\u2032, v\u2032, w\u2032)) \u2208 HFi if, and only if, (u, u\n\u2032), (v, v\u2032), (w,w\u2032) \u2208 HTi (note\nthat if ((u, v, w), (u\u2032, v\u2032, w\u2032)) \u2208 HFi then, since H\nT\ni is N -free, the only\npairs in HTi where the first component is in {u, v, w} and the second\ncomponent is in {u\u2032, v\u2032, w\u2032} are (u, u\u2032), (v, v\u2032) and (w,w\u2032)).\nThe construction of F is such that there is a correspondence between the\nset of homomorphisms from F to T and the set of choice majority functions\nadmitted by T . To see this, note that the list associated with any element\n(u, v, w) \u2208 |F| contains the potential images of the element (u, v, w) under\nsome choice majority function (see conditions (ii) and (iii) of the definition\nof a choice majority function); and the relations HF1 , H\nF\n2 , . . . , H\nF\nr ensure\nthat condition (i) of the definition of a choice majority function is adhered\nto.\nThere is a straightforward algorithm to determine whether there is a\nhomomorphism from F to T ; and consequently whether T admits a choice\nmajority function. We think of HF1 , H\nF\n2 , . . . , H\nF\nr as describing digraphs\nsuper-imposed on the same set of vertices: so, let us denote the resulting\nunderlying undirected graph by G. Our algorithm can be described as a\nrepeated application of the procedure below (until it can no longer be ap-\nplied).\nTake some (u, v, w) \u2208 |F|, where u, v and w are all distinct. If there is a\npath of (undirected) edges in G from (u, v, w) to some vertex (v\u2032, v\u2032, u\u2032)\n49\n(resp. (v\u2032, u\u2032, v\u2032), (u\u2032, v\u2032, v\u2032)), where u\u2032 6= v\u2032 and where each vertex on\nthe path apart from the last is such that all components are distinct,\nthen remove the element w (resp. v, u) from U(u,v,w).\nThe algorithm is such that if some list U(u,v,w) becomes empty, through\nrepeated applications of the above procedure, then the algorithm outputs\nthat no homomorphism exists; otherwise the output is that a homomorphism\ndoes exist.\nIf our algorithm responds that no homomorphism exists then we must\nverify whether this is truly the case. There is clearly a sub-tree of G\n(not necessarily induced) consisting of three paths from a vertex (u, v, w),\nwhere u, v and w are all distinct, to vertices (v0, v0, u0), (v1, u1, v1) and\n(u2, v2, v2), where ui 6= vi, for i = 0, 1, 2, and where these paths may have\nvertices in common. Any homomorphism \u03d5 from F to T must be such that\n\u03d5((v0, v0, u0)) = v0; and so if (u\n\u2032, v\u2032, w\u2032) is the penultimate vertex on the\npath from (u, v, w) to (v0, v0, u0) (hence, u\n\u2032, v\u2032 and w\u2032 are all distinct) then\nit cannot be the case that \u03d5((u\u2032, v\u2032, w\u2032)) = w\u2032, as this would imply that either\n(v\u2032, v0), (w\n\u2032, u0) and (w\n\u2032, v0) are in H\nF\ni , for some i \u2208 {1, 2, . . . , r}, or (v0, v\n\u2032),\n(u0, w\n\u2032) and (v0, w\n\u2032) are in HFi , for some i \u2208 {1, 2, . . . , r} (and so contradict\nthe fact that the digraph described by each HFi is N -free). Reasoning sim-\nilarly back up the path to vertex (u, v, w) yields that it cannot be the case\nthat \u03d5((u, v, w)) = w. Analogous arguments for the paths from (u, v, w) to\n(v1, u1, v1) and (u2, v2, v2) yield that the algorithm\u2019s response is correct.\nConversely, suppose that our algorithm responds that a homomorphism\nexists. Then, on termination of our algorithm, the list associated with every\nvertex is non-empty. Let (u, v, w), (u\u2032, v\u2032, w\u2032) \u2208 |F| be such that u, v and w\nare all distinct and u\u2032, v\u2032 and w\u2032 are all distinct. Clearly: u 6\u2208 U(u,v,w) if,\nand only if, u\u2032 6\u2208 U(u\u2032,v\u2032,w\u2032); v 6\u2208 U(u,v,w) if, and only if, v\n\u2032 6\u2208 U(u\u2032,v\u2032,w\u2032); and\nw 6\u2208 U(u,v,w) if, and only if, w\n\u2032 6\u2208 U(u\u2032,v\u2032,w\u2032). Thus, define the function \u03d5 from\n|F| to T as follows. If (u, v, w) \u2208 |F| then define \u03d5((u, v, w)) as the first\nelement (with respect to the order u, v, w) from U(u,v,w) on termination.\nThis function \u03d5 is well-defined and, by construction of F , a homomorphism\nfrom F to T . Hence, our algorithm correctly determines whether there\nexists a homomorphism from F to T .\nNow suppose that T does not admit a choice majority function. From\nabove, there is a \u03c3-structure H corresponding to the undirected tree in G,\nalluded to above, which consists of three paths from a vertex (w0, w1, w2),\nwhere w0, w1 and w2 are all distinct (and were formerly called u, v and w),\nto vertices x0 = (v0, v0, u0), x1 = (v1, u1, v1) and x2 = (u2, v2, v2), where\nui 6= vi, for i = 0, 1, 2. Amend H so that the list associated with element x0\n50\n(resp. x1, x2) is {u0, v0} (resp. {u1, v1}, {u2, v2}).\nLemma 24 (a) If \u03d5 : H \u2192 T then:\n\u2013 \u03d5(x0) = u0, \u03d5(x1) = v1 and \u03d5(x2) = v2;\n\u2013 \u03d5(x0) = v0, \u03d5(x1) = u1 and \u03d5(x2) = v2; or\n\u2013 \u03d5(x0) = v0, \u03d5(x1) = v1 or \u03d5(x2) = u2.\n(b) There exist homomorphisms \u03d5 : H \u2192 T extending the partial maps:\n\u2013 \u03d5(x0) = u0, \u03d5(x1) = v1 and \u03d5(x2) = v2;\n\u2013 \u03d5(x0) = v0, \u03d5(x1) = u1 and \u03d5(x2) = v2; and\n\u2013 \u03d5(x0) = v0, \u03d5(x1) = v1 or \u03d5(x2) = u2.\nProof (a) Suppose that \u03d5 : H \u2192 T . If \u03d5(xi) = vi, for some i \u2208 {0, 1, 2},\nthen by arguing as we did above when we proved our algorithm correct,\n\u03d5((w0, w1, w2)) 6= wi. Without loss of generality, suppose that \u03d5(x0) = u0.\nLet (u\u2032, v\u2032, w\u2032) be the penultimate vertex on the path in G from (w0, w1, w2)\nto (v0, v0, u0). As \u03d5 is a homomorphism and the digraph described by each\nHFi is N -free (see also the parenthetical remark made in the definition of\nF , above), we must have that \u03d5((u\u2032, v\u2032, w\u2032)) = w\u2032. Reasoning similarly back\nup the path to (w0, w1, w2) yields that \u03d5((w0, w1, w2)) = w2. Hence, again\nby reasoning as we did when we proved our algorithm correct, we must have\nthat \u03d5(x1) = v1 and \u03d5(x2) = v2.\n(b) Without loss of generality, suppose that \u03d5 is a partial map from |H|\nto |T | such that \u03d5(x0) = u0, \u03d5(x1) = v1 and \u03d5(x2) = v2. For any element\n(u\u2032, v\u2032, w\u2032) of |H|, define \u03d5((u\u2032, v\u2032, w\u2032)) = w\u2032. By arguing as we have done\npreviously, this yields a homomorphism \u03d5 : H \u2192 T .\nNow, consider the following \u03c3-structure K10. Take the distinct set of\nelements {pi, qi, zi : i = 0, 1, 2} and disjoint copies of H as follows.\n\u2022 For each i \u2208 {0, 1, 2}, include a copy of H by identifying the elements:\npi and x0; qi and x1; and zi and x2.\n\u2022 For each i \u2208 {0, 1, 2}, include a copy of H by identifying the elements:\npi and x0; qi\u22121 and x1; and zi\u22122 and x2, where subtraction is modulo\n3.\n\u2022 The list associated with element z0 is {u2}, with all other lists being\nas in H (and so, for example: the list associated with p0, p1 and p2 is\n{u0, v0}; the list associated with q0, q1 and q2 is {u1, v1}; and the list\nassociated with z1 and z2 is {u2, v2}).\n51\nRename the element p1 with the name y0 and the element q2 with the name\ny1. The construction of K\n1\n0 can be visualized as in Fig. 4.\nLemma 25 (a) If \u03d5 : K10 \u2192 T then:\n\u2013 \u03d5(y0) = u0 and \u03d5(y1) = u1; or\n\u2013 \u03d5(y0) = v0 and \u03d5(y1) = v1.\n(b) There exist homomorphisms \u03d5 : K10 \u2192 T extending the partial maps:\n\u2013 \u03d5(y0) = u0 and \u03d5(y1) = u1; and\n\u2013 \u03d5(y0) = v0 and \u03d5(y1) = v1.\nProof Throughout we reason as we did earlier and in Lemma 24 but with\nrespect to the different copies of H, which are composed to form K10, and\nusing Lemma 24.\n= p\n1\np\n2\nz\n0\nz\n1\nz\n2\n= q\n2\nq\n1\nq\n0\np\n0\ncopies of H\ny\n1\ny\n0\nFigure 4. The \u03c3-structure K10.\n(a) Suppose that \u03d5 : K10 \u2192 T . As \u03d5(z0) = u2, we must have that\n\u03d5(q1) = v1 and \u03d5(p2) = v0 (by considering the copy of H corresponding to\np2, q1 and z0). Also, \u03d5(q0) = v1 and \u03d5(p0) = v0 (by considering the copy of\nH corresponding to p0, q0 and z0).\nSuppose that \u03d5(y0) = u0. Thus, \u03d5(z1) = v2 and \u03d5(z2) = v2. Hence,\n\u03d5(y1) = u1.\nSuppose that \u03d5(y0) = v0. Thus, \u03d5(z1) = u2 and \u03d5(y1) = v1 (and\n\u03d5(z2) = u2).\n52\n(b) Follows by extending the partial maps of part (a) to homomorphisms\nof K10 to T using Lemma 24.\nThere is an analogous result to Lemma 25 except where: the \u03c3-structure\nis K21; the elements of T are {u1, v1, u2, v2}; and the distinguished elements\nare denoted y1 and y2 (instead of y0 and y1), respectively (so, K\n1\n0 has dis-\ntinguished vertices denoted y0 and y1, and K\n2\n1 has distinguished vertices\ndenoted y1 and y2; with the y1 of K\n1\n0 different from the y1 of K\n2\n1).\nLet A be an instance of 1-in-3-SAT; that is, a collection of clauses\nC1, C2, . . . , Cm of 3 Boolean variables over the set {X1, X2, . . . , Xn}. Con-\nstruct the \u03c3-structure B (where every element has an associated list) as\nfollows.\n\u2022 For every i \u2208 {1, 2, . . . , n}, there are elements X0i , X\n1\ni and X\n2\ni .\n\u2022 For every i \u2208 {1, 2, . . . , n}, introduce a copy of K10 (resp. K\n2\n1) by\nidentifying X0i with y0 and X\n1\ni with y1 (resp. X\n1\ni with y1 and X\n2\ni with\ny2).\n\u2022 For every j \u2208 {1, 2, . . . ,m}, if Cj = {Xj0 , Xj1 , Xj2} then introduce a\ncopy of H by identifying X0j0 with x0, X\n1\nj1\nwith x1 and X\n2\nj2\nwith x2.\nAll elements and copies so introduced are distinct (apart from where they\nare identified) and the lists at each element are inherited from the par-\nticular copies of H, K10 and K\n2\n1. The \u03c3-structure B can be visualized\nas in Fig. 5 where we show the portion of B corresponding to a clause\n{Xj0 , Xj1 , Xj2}.\ncopy of H\n... .........\nXj0\n0\nXj0\n1\nXj0\n2\nXj1\n0\nXj1\n1\nXj1\n2 Xj2\n0\nXj2\n1\nXj2\n2\ncopy of K\n0\n1 copy of K\n1\n2\nFigure 5. The \u03c3-structure B.\nSuppose that A is a yes-instance of 1-in-3-SAT; and so there is a satisfy-\ning truth assignment \u03c8, making exactly one variable in every clause true. If,\nfor some i \u2208 {1, 2, . . . , n}: \u03c8(Xi) = true then set \u03d5(X\n0\ni ) = u0, \u03d5(X\n1\ni ) = u1\n53\nand \u03d5(X2i ) = u2; otherwise set \u03d5(X\n0\ni ) = v0, \u03d5(X\n1\ni ) = v1 and \u03d5(X\n2\ni ) = v2.\nLemmas 24 and 25 yield that the partial map \u03d5 can be extended to a homo-\nmorphism from B to T . Conversely, suppose that there is a homomorphism\n\u03d5 from B to T . If, for some i \u2208 {1, 2, . . . , n}: \u03d5(X0i ) = u0, \u03d5(X\n1\ni ) = u1 and\n\u03d5(X2i ) = u2 then define \u03c8(Xi) = true; and if \u03d5(X\n0\ni ) = v0, \u03d5(X\n1\ni ) = v1 and\n\u03d5(X2i ) = v2 then define \u03c8(Xi) = false (by Lemma 25, this truth assign-\nment \u03c8 is well defined). By Lemma 24, \u03c8 is a satisfying truth assignment.\nConsequently part (b) of the theorem follows.\nEvery vertex in the digraph of a unary function has out-degree 1; and\nso such a digraph is N -free. The result follows.\nNote that, from Theorem 23, whether the problem CSP(T \u2032+all lists) is\nsolvable in polynomial-time or NP-complete is solely determined by whether\nT has a choice majority function or not.\nAcknowledgement\nThe second two authors would like to thank Eric Allender for a useful dis-\ncussion and guidance.\nReferences\n[1] A.A. Bulatov, A.A. Krokhin and P. Jeavons, Constraint satisfaction\nproblems and finite algebras, Proceedings of 27th International Collo-\nquium on Automata, Languages and Programming, ICALP\u201900 (ed. U.\nMontanari, J.D.P. Rolim and E. Welzl), Lecture Notes in Computer\nScience Vol. 1853, Springer-Verlag, Berlin (2000) 272\u2013282.\n[2] A.K. Chandra and P.M. Merlin, Optimal implementation of conjunctive\nqueries in relational databases, Proceedings of 9th ACM Symposium on\nTheory of Computing (1977) 77\u201390.\n[3] J. Diaz, M. Serna and D.M. Thilikos, The complexity of restrictive\nH-coloring, Discrete Applied Mathematics, to appear.\n[4] P. Dukes, H. Emerson and G. MacGillivray, Undecidable generalized\ncolouring problems, Journal of Combinatorial Mathematics and Com-\nbinatorial Computing 28 (1998) 97\u2013112.\n[5] M. Dyer and C. Greenhill, The complexity of counting graph homo-\nmorphisms, Random Structures and Algorithms 17 (2000) 260\u2013289.\n54\n[6] T. Feder, Classification of homomorphisms to oriented cycles and of k-\npartite satisfiability, SIAM Journal of Discrete Mathematics 14 (2001)\n471\u2013480.\n[7] T. Feder and P. Hell, List homomorphisms to reflexive graphs, Journal\nof Combinatorial Theory (Series B) 72 (1998) 236\u2013250.\n[8] T. Feder, P. Hell and J. Huang, List homomorphisms and circular-arc\ngraphs, Combinatorica 19 (1999) 487\u2013505.\n[9] T. Feder, P. Hell and J. Huang, Bi-arc graphs and the complexity of\nlist homomorphisms, Journal of Graph Theory 42 (1999) 61\u201380.\n[10] T. Feder and M. Vardi, The computational structure of monotone\nmonadic SNP and constraint satisfaction: a study through Datalog\nand group theory, SIAM Journal of Computing 28 (1998) 57\u2013104.\n[11] M.R. Garey and D.S. Johnson, Computers and Intractability : A Guide\nto the Theory of NP-Completeness, Freeman (1979).\n[12] W. Gutjahr, E. Welzl and G. Woeginger, Polynomial graph colourings,\nDiscrete Applied Mathematics 35 (1992) 29\u201345.\n[13] P. Hell and J. Nes\u02c7etr\u02c7il, On the complexity of H-colouring, Journal of\nCombinatorial Theory (Series B) 48 (1990) 92\u2013110.\n[14] N. Immerman and S. Landau, The complexity of iterated multiplica-\ntion, Information and Computation 116 (1995) 103\u2013116.\n[15] N. Immerman, Descriptive Complexity , Springer-Verlag (1998).\n[16] P.G. Jeavons, D.A. Cohen and J.K. Pearson, Constraints and universal\nalgebra, Annals of Mathematics and Artificial Intelligence 24 (1998)\n51\u201367.\n[17] P.G. Kolaitis and M.Y. Vardi, Conjunctive-query containment and con-\nstraint satisfaction, Proceedings of 17th ACM Symposium on Principles\nof Database Systems (1998) 205\u2013213.\n[18] C.H. Papadimitriou, Computational Complexity , Addison Wesley, 1994.\n[19] A. Puricella and I.A. Stewart, A generic greedy algorithm, partially-\nordered graphs and NP-completeness, Proceedings of 27th International\nWorkshop on Graph-Theoretic Concepts in Computer Science, WG\u201901\n55\n(ed. A. Brandstaedt and V.B. Le), Lecture Notes in Computer Science\nVol. 2204, Springer-Verlag, Berlin (2001) 306-316.\n[20] A. Puricella and I.A. Stewart, Greedy algorithms, H-colourings and\na complexity-theoretic dichotomy, Theoretical Computer Science 290\n(2003) 1897\u20131913.\n[21] T.J. Schaefer, The complexity of satisfiability problems, Proceedings of\n10th ACM Symposium on Theory of Computing (1978) 216\u2013226.\n[22] I.A. Stewart, Completeness of path-problems via logical reductions, In-\nformation and Computation 121 (1995) 123-134.\n[23] E.P.K. Tsang, Foundations of Constraint Satisfaction, Academic Press\n(1993).\n56\n"}