{"doi":"10.1145\/945445.945451","coreId":"15626","oai":"oai:eprints.erpanet.org:74","identifiers":["oai:eprints.erpanet.org:74","10.1145\/945445.945451"],"title":"Preserving Peer Replicas By Rate-Limited Sampled Voting in LOCKSS","authors":["Muliadi, Yanto","Baker, Mary","Rosenthal, David S. H.","Maniatis, Petros","Roussopoulos, Mema","Giuli, T.J."],"enrichments":{"references":[{"id":9468971,"title":"[3] Association of Research Libraries.","authors":[],"date":"2000","doi":"10.1080\/00048623.2000.10755137","raw":"[3] Association of Research Libraries. ARL Statistics 2000-01. http:\/\/www.arl.org\/stats\/arlstat\/01pub\/intro.html, 2001.","cites":null},{"id":698181,"title":"A Case for Redundant Arrays of Inexpensive Disks (RAID).","authors":[],"date":"1988","doi":"10.1145\/971701.50214","raw":"Katz. A Case for Redundant Arrays of Inexpensive Disks (RAID). In Proceedings of the ACM SIGMOD International Conference on Management of Data, pages 109\u2013116, Chicago, IL, USA, June 1988.","cites":null},{"id":698183,"title":"A Digital Preservation Network Appliance Based on OpenBSD.","authors":[],"date":"2003","doi":null,"raw":"[31] David S. H. Rosenthal. A Digital Preservation Network Appliance Based on OpenBSD. In Proceedings of BSDcon 2003, San Mateo, CA, USA, September 2003.","cites":null},{"id":9468998,"title":"Byzantine Quorum Systems.","authors":[],"date":"1998","doi":"10.1007\/s004460050050","raw":"[24] Dahlia Malkhi and Michael Reiter. Byzantine Quorum Systems. The Journal of Distributed Computing, 11(4):203\u2013213, October 1998.","cites":null},{"id":9468981,"title":"Compliance Defects in Public-Key Cryptography.","authors":[],"date":"1996","doi":null,"raw":"[11] Don Davis. Compliance Defects in Public-Key Cryptography. In Proceedings of the 6th USENIX Security Symposium, pages 171\u2013178, San Jose, CA, USA, July 1996.","cites":null},{"id":699650,"title":"EBay\u2019s Figurine Scandal: Auction Site Merchant Disappears With The Goods. Wall","authors":[],"date":"2002","doi":null,"raw":null,"cites":null},{"id":698185,"title":"Economic Measures to Resist Attacks on a Peer-to-Peer Network. In","authors":[],"date":"2003","doi":"10.1145\/1165389.945451","raw":"[33] David S. H. Rosenthal, Mema Roussopoulos, Petros Maniatis, and Mary Baker. Economic Measures to Resist Attacks on a Peer-to-Peer Network. In Proceedings of Workshop on Economics of Peer-to-Peer Systems, Berkeley, CA, USA, June 2003.","cites":null},{"id":9468977,"title":"Electronic Storage Media.","authors":[],"date":"2003","doi":null,"raw":"[9] ConservationOnline. Electronic Storage Media. http:\/\/palimpsest.stanford.edu\/bytopic\/electronic-records\/el 2003.","cites":null},{"id":9468975,"title":"Freenet: A Distributed Anonymous Information Storage and Retrieval System.","authors":[],"date":"2000","doi":"10.1007\/3-540-44702-4_4","raw":"[8] Ian Clarke, Oskar Sandberg, Brandon Wiley, and Theodore W. Hong. Freenet: A Distributed Anonymous Information Storage and Retrieval System. In Hannes Federrath, editor, Proceedings of the Workshop on Design Issues in Anonymity and Unobservability, volume 2009 of Lecture Notes in Computer Science, pages 46\u201366, Berkeley, CA, USA, July 2000. Springer.","cites":null},{"id":698187,"title":"How to 0wn the Internet in Your Spare Time.","authors":[],"date":"2002","doi":null,"raw":"How to 0wn the Internet in Your Spare Time. In Proceedings of the 11th USENIX Security Symposium, pages 149\u2013167, San Francisco, CA, USA, August 2002. [36] US Government. Web Design and Usability Guidelines. http:\/\/usability.gov\/guidelines\/softhard.html.","cites":null},{"id":698180,"title":"Inferring Internet Denial-of-Service Activity.","authors":[],"date":"2001","doi":null,"raw":"Inferring Internet Denial-of-Service Activity. In Proceedings of the 10th USENIX Security Symposium, August 2001. [29] David A. Patterson, Garth Gibson, and Randy H.","cites":null},{"id":698179,"title":"Long Term Data Resilience Using Opinion Polls.","authors":[],"date":"2003","doi":"10.1109\/pccc.2003.1203705","raw":"Rosenthal. Long Term Data Resilience Using Opinion Polls. In 22nd IEEE Intl. Performance Computing and Communications Conference, Phoenix, AZ, USA, April 2003. [27] Dru Mogge. Seven Years of Tracking Electronic Publishing: The ARL Directory of Electronic Journals, Newsletters and Academic Discussion Lists.","cites":null},{"id":9469030,"title":"Mazi` eres. Tangler: A Censorship-Resistant Publishing System Based On Document Entanglements.","authors":[],"date":"2001","doi":"10.1145\/502001.502002","raw":"[38] Marc Waldman and David Mazi` eres. Tangler: A Censorship-Resistant Publishing System Based On Document Entanglements. In Proceedings of the 8th ACM Conference on Computer and Communications Security, pages 126\u2013135, Philadelphia, PA, USA, November 2001.","cites":null},{"id":698188,"title":"Murphy\u2019s Law and Computer Security.","authors":[],"date":"1996","doi":null,"raw":"[37] Wietse Venema. Murphy\u2019s Law and Computer Security. In Proceedings of the 6th USENIX Security Symposium, San Jose, CA, USA, July 1996.","cites":null},{"id":9468993,"title":"Narses: A Scalable, Flow-Based Network Simulator.","authors":[],"date":"2002","doi":null,"raw":"[21] TJ Giuli and Mary Baker. Narses: A Scalable, Flow-Based Network Simulator. Technical Report arXiv:cs.PF\/0211024, Computer Science Department, Stanford University, Stanford, CA, USA, November 2002. [22] Michael Keller, Victoria Reich, and Andrew Herkovic.","cites":null},{"id":9468985,"title":"New Directions in Cryptography.","authors":[],"date":"1976","doi":"10.1109\/tit.1976.1055638","raw":"[14] Whit\ufb01eld Di\ufb03e and Martin E. Hellman. New Directions in Cryptography. IEEE Transactions on Information Theory, IT-22(6):644\u2013654, November 1976.","cites":null},{"id":9468996,"title":"OceanStore: An Architecture for Global-Scale Persistent Storage.","authors":[],"date":"2000","doi":"10.1145\/356989.357007","raw":"[23] John Kubiatowicz, David Bindel, Yan Chen, Steven Czerwinski, Patrick Eaton, Dennis Geels, Ramakrishan Gummadi, Sean Rhea, Hakim Weatherspoon, Westley Weimer, Chris Wells, and Ben Zhao. OceanStore: An Architecture for Global-Scale Persistent Storage. In Proceedings of the 9th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2000), pages 190\u2013201, Cambridge, MA, USA, November 2000.","cites":null},{"id":9468990,"title":"On Memory-Bound Functions for Fighting Spam.","authors":[],"date":"2003","doi":"10.1007\/978-3-540-45146-4_25","raw":"On Memory-Bound Functions for Fighting Spam. In Advances on Cryptology (CRYPTO 2003), Santa Barbara, CA, USA, August 2003. To appear.","cites":null},{"id":9468972,"title":"Oznur Ozkasap, Zhen Xiao, Mihai Budiu, and Yaron Minsky. Bimodal Multicast.","authors":[],"date":"1999","doi":"10.1145\/312203.312207","raw":"[4] Kenneth Birman, Mark Hayden, Oznur Ozkasap, Zhen Xiao, Mihai Budiu, and Yaron Minsky. Bimodal Multicast. ACM Transactions on Computer Systems, 17(2):41\u201388, 1999.","cites":null},{"id":698184,"title":"Permanent Web Publishing.","authors":[],"date":"2000","doi":"10.1045\/june2001-reich","raw":"[32] David S. H. Rosenthal and Vicky Reich. Permanent Web Publishing. In Proceedings of the USENIX Annual Technical Conference, Freenix Track (Freenix 2000), pages 129\u2013140, San Diego, CA, USA, June 2000.","cites":null},{"id":9468984,"title":"Perspective: Decrypting The Secret to Strong Security.","authors":[],"date":"2003","doi":null,"raw":"[13] Whit\ufb01eld Di\ufb03e. Perspective: Decrypting The Secret to Strong Security. http:\/\/news.com.com\/2010-1071-980462.html, January 2003.","cites":null},{"id":9468973,"title":"Practical Byzantine Fault Tolerance.","authors":[],"date":"1999","doi":"10.1145\/571637.571640","raw":"[5] Miguel Castro and Barbara Liskov. Practical Byzantine Fault Tolerance. In Proceedings of the 3rd Symposium on Operating Systems Design and Implementation (OSDI 1999), New Orleans, LA, USA, February 1999. USENIX Association. [6] Yuan Chen, Jan Edler, Andrew Goldberg, Allan Gottlieb, Sumeet Sobti, and Peter Yianilos. A Prototype Implementation of Archival Intermemory.","cites":null},{"id":9468999,"title":"Preserving Peer Replicas By Rate-Limited Sampled Voting.","authors":[],"date":"2003","doi":"10.1145\/945445.945451","raw":"[25] Petros Maniatis, Mema Roussopoulos, TJ Giuli, David S. H. Rosenthal, Mary Baker, and Yanto Muliadi. Preserving Peer Replicas By Rate-Limited Sampled Voting. In Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, Bolton Landing, NY, USA, October 2003. [26] Nikolaos Michalakis, Dah-Ming Chiu, and David S. H.","cites":null},{"id":9468992,"title":"Pricing via Processing. In","authors":[],"date":"1992","doi":"10.1007\/3-540-48071-4_10","raw":"[18] Cynthia Dwork and Moni Naor. Pricing via Processing. In Advances on Cryptology (CRYPTO 1992), volume 740 of Lecture Notes in Computer Science, pages 139\u2013147. Springer, 1993. [19] Electronic Frontier Foundation. Digital Millennium Copyright Act (DMCA) Archive. http:\/\/www.eff.org\/IP\/DMCA\/.","cites":null},{"id":698182,"title":"Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart.","authors":[],"date":"1994","doi":"10.1145\/191177.191194","raw":"[30] Michael Reiter. Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart. In Proceedings of the 2nd ACM Conference on Computer and Communications Security, pages 68\u201380, Fairfax, VA, USA, November 1994.","cites":null},{"id":698186,"title":"Storage Management and Caching in PAST, A Large-scale, Persistent Peer-to-peer Storage Utility.","authors":[],"date":"2001","doi":"10.1145\/502059.502053","raw":"[34] Antony Rowstron and Peter Druschel. Storage Management and Caching in PAST, A Large-scale, Persistent Peer-to-peer Storage Utility. In Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles, pages 188\u2013201, Chateau Lake Louise, Ban\ufb00, AB, Canada, October 2001. [35] Stuart Staniford, Vern Paxson, and Nicholas Weaver.","cites":null},{"id":699648,"title":"Tangler: A Censorship-Resistant Publishing System Based On Document Entanglements.","authors":[],"date":"2001","doi":"10.1145\/502001.502002","raw":null,"cites":null},{"id":9468970,"title":"The Eternity Service.","authors":[],"date":"1996","doi":null,"raw":"[2] Ross J. Anderson. The Eternity Service. In Proceedings of the 1st International Conference on the Theory and Applications of Cryptology (PRAGOCRYPT 1996), Prague, Czech Republic, 1996.","cites":null},{"id":9468987,"title":"The Free Haven Project: Distributed Anonymous Storage Service.","authors":[],"date":"2000","doi":"10.1007\/3-540-44702-4_5","raw":"[15] Roger Dingledine, Michael J. Freedman, and David Molnar. The Free Haven Project: Distributed Anonymous Storage Service. In Hannes Federrath, editor, Proceedings of the Workshop on Design Issues in Anonymity and Unobservability, volume 2009 of Lecture Notes in Computer Science, pages 67\u201395, 21Berkeley, CA, USA, July 2000. Springer.","cites":null},{"id":9468988,"title":"The Sybil Attack.","authors":[],"date":"2002","doi":"10.1007\/3-540-45748-8_24","raw":"[16] John Douceur. The Sybil Attack. In Proceedings of the 1st International Workshop on Peer-to-Peer Systems (IPTPS 2002), pages 251\u2013260, Boston, MA, USA, March 2002. [17] Cynthia Dwork, Andrew Goldberg, and Moni Naor.","cites":null},{"id":699649,"title":"Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code.","authors":[],"date":"2002","doi":"10.1109\/csac.2002.1176279","raw":"[39] Matthew Williamson. Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code. In Proceedings of the 18th Annual Computer Security Applications Conference, Las Vegas, Nevada, USA, December 2002.","cites":null},{"id":9468983,"title":"Using Client Puzzles to Protect TLS.","authors":[],"date":"2001","doi":null,"raw":"[12] Drew Dean and Adam Stubble\ufb01eld. Using Client Puzzles to Protect TLS. In Proceedings of the 10th USENIX Security Symposium, Washington, DC, USA, August 2001.","cites":null},{"id":9468994,"title":"What is a Library Anymore,","authors":[],"date":"2003","doi":"10.5210\/fm.v8i5.1053","raw":"What is a Library Anymore, Anyway? First Monday, 8(5), May 2003. http:\/\/www.firstmonday.org\/issues\/issue8_5\/keller\/index.html.","cites":null},{"id":9468979,"title":"Wide-area Cooperative Storage with CFS.","authors":[],"date":"2001","doi":"10.1145\/502034.502054","raw":"[10] Frank Dabek, M. Frans Kaashoek, David Karger, Robert Morris, and Ion Stoica. Wide-area Cooperative Storage with CFS. In Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles, pages 202\u2013215, Chateau Lake Louise, Ban\ufb00, AB, Canada, October 2001.","cites":null},{"id":9469034,"title":"Wing\ufb01eld. EBay\u2019s Figurine Scandal: Auction Site Merchant Disappears With The Goods. Wall","authors":[],"date":"2002","doi":null,"raw":"[40] Nick Wing\ufb01eld. EBay\u2019s Figurine Scandal: Auction Site Merchant Disappears With The Goods. Wall Street Journal, Feb 22nd, 2002. APPENDIX A. ECONOMIC CONSIDERATIONS We use a memory-bound function (MBF) scheme due to Dwork et al. [17]. Here we brie\ufb02y describe it and compute appropriate costs to impose on poll initiation and voting. Recall that S is the size of the AU in cache lines. 22A.1 Overview of a Memory Bound Function Scheme The goal of the MBF is to cause the prover of the necessary e\ufb00ort to incur a number C of cache misses and thus RAM accesses. If each of these takes t seconds, the prover must have used C   t seconds on a real computer. Memory bandwidths vary signi\ufb01cantly less among commonly available architectures than CPU speeds do, making MBFs superior in provable e\ufb00ort to the CPU-bound functions previously proposed [12, 18]. The scheme we use has two adjustable parameters, the cost, l, of verifying an e\ufb00ort proof and the ratio, E, between l and the cost of constructing the proof. We measure all costs in cache misses, so a proof costs E   l cache misses to construct and l cache misses to verify. Dwork et al. describe an MBF scheme that uses an incompressible \ufb01xed public data set T larger than any cache it is likely to meet. In our case, a gigabyte would be practical. An e\ufb00ort prover who must expend e\ufb00ort E   l is given as challenge a nonce n (so that the prover cannot reuse older e\ufb00ort proofs) and the values of E and l. In response, the prover must perform a series of pseudo-random walks in the table T. For each walk, the prover starts from a di\ufb00erent position s of his choosing and computes a one-way value A based on n, s and the encountered elements of table T. The walk is dependent on n and s; it is constructed so that the number of encountered elements is l, and fetching each encountered element causes an L1 cache miss. Each walk, therefore, causes l cache misses. The prover stops when he computes a value A that has 0 bits in its least signi\ufb01cant log2 E positions. With the given MBF scheme, it is expected the prover will try E walks with di\ufb00erent starting positions s before \ufb01nding an appropriate starting position s \u2032; this costs the prover C = E   l cache misses. The s \u2032 that yielded the appropriate A is the e\ufb00ort proof. The veri\ufb01er need only perform the random walk on T starting with the n he chose and the s \u2032 sent by the prover; this costs the veri\ufb01er V = l cache misses. If the resulting value A from this walk has the proper 0-bits in its last log2 E positions, the veri\ufb01er accepts the e\ufb00ort proof as valid. We \ufb01rst describe how we use the MBF scheme in the construction and veri\ufb01cation of votes. We then describe how we impose costs on vote construction and veri\ufb01cation and how we choose appropriate parameters for each of these. A.2 Vote Construction and Veri\ufb01cation A.2.1 Construction As described in Sections 4.1.5 and 4.1.11, vote construction is divided into rounds. Each round consists of two parts: the construction of an MBF proof of e\ufb00ort and the hashing of a portion of the document. The portion of the document hashed in each round has twice as many content blocks as the previous round, 2 i\u22121 blocks in round i, or r = \u2308log2(B + 1)\u2309 rounds for a content of B blocks (we explain why in Section A.3). We design vote construction in a way that ensures the order of computation for each stage; speci\ufb01cally, we wish to ensure that voters cannot precompute or parallelize different stages of the construction of a vote (although individual stages of MBF proof construction may be parallelizable [17]). A vote contains the MBF proofs and content hashes computed during the two stages of every vote construction round. We denote the list of MBF e\ufb00ort proofs for the r rounds of vote construction as [s1,...,sr] and the list of the corresponding content hashes as [H1,...,Hr]. At round i, the MBF proof computation stage takes as input the nonce ni (we explain how we build this nonce below) and the proof parameters Ei and li, returning the proof si and the output value Ai (see Section A.1). This is followed by the content hash stage of round i, which computes the hash h(si Ai content \u2212 blocki), where   denotes bit string concatenation, h is our cryptographic hash function, and content \u2212 blocki denotes the portion of the content that we hash during round i (to be determined in Section A.3). The output of the hashing stage is the hash value Hi. Because the proof and output of the MBF proof computation are included in the input to the cryptographic hash function h, the vote constructor cannot precompute Hi before having determined the MBF proof si and the corresponding output value Ai. We include both si and Ai in the hash (as opposed to only the proof si) to ensure that it is hard for the vote constructor to precompute Hi values for all possible sis. Instead, si and Ai together come from a large enough range of possible values that precomputing all likely hashes Hi by brute-force is intractable. The nonce ni input into the MBF proof e\ufb00ort computation of the i-th round must be such that precomputing an e\ufb00ort proof for round i before the MBF proof e\ufb00ort computation or content hashing stage of round i \u2212 1 is intractable. For the \ufb01rst round of vote construction, n1 must be such that the voter cannot start computing its vote until it receives the challenge of the poll initiator. As a result, n1 = h(challenge pollID voterAddress), and for i > 1, ni = h(si\u22121 Ai\u22121 Hi\u22121 challenge pollID voterAddress). A.2.2 Veri\ufb01cation Vote veri\ufb01cation is also divided into rounds, with MBF and hashing stages in each round. The initiator, guided by the list of MBF e\ufb00ort proofs and hashes contained in the Vote it receives, veri\ufb01es the computations of the voter using its local copy of the document. At round i, the MBF proof veri\ufb01cation stage takes as input the nonce ni (see Section A.2.1), the proof parameters Ei and li, and the proof si (included in the message) and constructs the output value Ai (see Section A.1). If this value ends in log2 Ei 0-bits, the veri\ufb01er accepts the e\ufb00ort proof. Otherwise, the veri\ufb01er deems the vote invalid. If the veri\ufb01er has yet to deem the vote disagreeing, it proceeds with the content hashing stage of the vote veri\ufb01-cation. Speci\ufb01cally, it computes the hash of its appropriate local content blocks: H \u2032 i = h(si Ai content \u2212 blocki). If the resulting hash H \u2032 i is di\ufb00erent from the value Hi contained in the vote, the veri\ufb01er deems the vote disagreeing and only veri\ufb01ers MBF e\ufb00orts in the remaining rounds.","cites":null}],"documentType":{"type":null}},"contributors":[],"datePublished":"2003-01-01","abstract":"The LOCKSS project has developed and deployed in a world-wide test a peer-to-peer system for preserving access to journals and other archival information published on the Web. It consists of a large number of independent, low-cost, persistent web caches that cooperate to detect and repair damage to their content by voting in \"opinion polls.\" Based on this experience, we present a design for and simulations of a novel protocol for voting in systems of this kind. It incorporates rate limitation and intrusion detection to ensure that even some very powerful adversaries attacking over many years have only a small probability of causing irrecoverable damage before being detected.","downloadUrl":"","fullTextIdentifier":"http:\/\/eprints.erpanet.org\/74\/","pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:eprints.erpanet.org:74<\/identifier><datestamp>\n      2004-12-02<\/datestamp><setSpec>\n      7374617475733D756E707562<\/setSpec><setSpec>\n      7375626A656374733D42:4241<\/setSpec><setSpec>\n      7375626A656374733D42:4247<\/setSpec><setSpec>\n      7375626A656374733D41:4141<\/setSpec><setSpec>\n      7375626A656374733D43:4344<\/setSpec><setSpec>\n      7375626A656374733D43:4346<\/setSpec><\/header><metadata><oai_dc:dc xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Preserving Peer Replicas By Rate-Limited Sampled Voting in LOCKSS<\/dc:title><dc:creator>\n        Muliadi, Yanto<\/dc:creator><dc:creator>\n        Baker, Mary<\/dc:creator><dc:creator>\n        Rosenthal, David S. H.<\/dc:creator><dc:creator>\n        Maniatis, Petros<\/dc:creator><dc:creator>\n        Roussopoulos, Mema<\/dc:creator><dc:creator>\n        Giuli, T.J.<\/dc:creator><dc:subject>\n        CF Repositories<\/dc:subject><dc:subject>\n        BA Archiving<\/dc:subject><dc:subject>\n        CD Migration<\/dc:subject><dc:subject>\n        BG Storage<\/dc:subject><dc:subject>\n        AA General Resources<\/dc:subject><dc:description>\n        The LOCKSS project has developed and deployed in a world-wide test a peer-to-peer system for preserving access to journals and other archival information published on the Web. It consists of a large number of independent, low-cost, persistent web caches that cooperate to detect and repair damage to their content by voting in \"opinion polls.\" Based on this experience, we present a design for and simulations of a novel protocol for voting in systems of this kind. It incorporates rate limitation and intrusion detection to ensure that even some very powerful adversaries attacking over many years have only a small probability of causing irrecoverable damage before being detected. <\/dc:description><dc:date>\n        2003-01-01<\/dc:date><dc:type>\n        Preprint<\/dc:type><dc:identifier>\n        http:\/\/eprints.erpanet.org\/74\/<\/dc:identifier><dc:format>\n        pdf http:\/\/eprints.erpanet.org\/74\/01\/0303026.pdf<\/dc:format><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2003,"topics":["CF Repositories","BA Archiving","CD Migration","BG Storage","AA General Resources"],"subject":["Preprint"],"fullText":null}