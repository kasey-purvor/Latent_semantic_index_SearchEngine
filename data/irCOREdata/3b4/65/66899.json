{"doi":"10.1016\/j.firesaf.2008.11.004","coreId":"66899","oai":"oai:dro.dur.ac.uk.OAI2:5488","identifiers":["oai:dro.dur.ac.uk.OAI2:5488","10.1016\/j.firesaf.2008.11.004"],"title":"Rapid prototyping a virtual fire drill environment using computer game technology.","authors":["Smith,  Shamus P.","Trenholme,  David"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2009-05-01","abstract":"Conducting fire evacuation drills in modern buildings under realistic fire conditions can be difficult. Typical fire drills do not feature dynamic events such as smoke filled corridors, fires in unexpected places or blocked fire exits that require on the spot decisions from evacuees. One alternative is the use of virtual environments. Virtual environments can support the training and observation of fire evacuee behaviours in 3D virtual buildings. However complex virtual environments can be difficult to build. This paper explores how the reuse of computer game technology can aid in the rapid prototyping of virtual environments which can be populated with fire drill evacuation scenarios. Over a three week period, a single developer constructed a realistic model of a real world building to support virtual fire drill evaluations. While participants in a user study found the simulated environment realistic, performance metrics indicated clustering in the results based on participants\u2019 previous gaming experience","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66899.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/5488\/1\/5488.pdf","pdfHashValue":"9b5c63813bd9c0a4483d5ffb312cbf947d5d866f","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:5488<\/identifier><datestamp>\n      2017-03-07T14:23:03Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Rapid prototyping a virtual fire drill environment using computer game technology.<\/dc:title><dc:creator>\n        Smith,  Shamus P.<\/dc:creator><dc:creator>\n        Trenholme,  David<\/dc:creator><dc:description>\n        Conducting fire evacuation drills in modern buildings under realistic fire conditions can be difficult. Typical fire drills do not feature dynamic events such as smoke filled corridors, fires in unexpected places or blocked fire exits that require on the spot decisions from evacuees. One alternative is the use of virtual environments. Virtual environments can support the training and observation of fire evacuee behaviours in 3D virtual buildings. However complex virtual environments can be difficult to build. This paper explores how the reuse of computer game technology can aid in the rapid prototyping of virtual environments which can be populated with fire drill evacuation scenarios. Over a three week period, a single developer constructed a realistic model of a real world building to support virtual fire drill evaluations. While participants in a user study found the simulated environment realistic, performance metrics indicated clustering in the results based on participants\u2019 previous gaming experience.<\/dc:description><dc:subject>\n        Virtual reality<\/dc:subject><dc:subject>\n         Virtual fire drill<\/dc:subject><dc:subject>\n         Fire evacuation<\/dc:subject><dc:subject>\n         Game engines<\/dc:subject><dc:subject>\n         Rapid prototyping<\/dc:subject><dc:subject>\n         Evaluation.<\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        Fire safety journal, 2009, Vol.44(4), pp.559-569 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2009-05-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:5488<\/dc:identifier><dc:identifier>\n        issn:0379-7112<\/dc:identifier><dc:identifier>\n        doi:10.1016\/j.firesaf.2008.11.004<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/5488\/<\/dc:identifier><dc:identifier>\n        https:\/\/doi.org\/10.1016\/j.firesaf.2008.11.004<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/5488\/1\/5488.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn:0379-7112","0379-7112"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2009,"topics":["Virtual reality","Virtual fire drill","Fire evacuation","Game engines","Rapid prototyping","Evaluation."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n08 May 2009\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nSmith, Shamus P. and Trenholme, David. (2009) \u2019Rapid prototyping a virtual fire drill environment using\ncomputer game technology.\u2019, Fire safety journal., 44 (4). pp. 559-569.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.firesaf.2008.11.004\nPublisher\u2019s copyright statement:\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n \n \n \nDurham Research Online \n \nDeposited in DRO: \n8 May 2009 \n \nPeer-review status of attached file: \nPeer-reviewed \n \nPublication status of attached file: \nAccepted for publication \n \nCitation for published item: \nSmith, Shamus P. and Trenholme, David. (2009) 'Rapid prototyping a virtual fire drill \nenvironment using computer game technology.', Fire safety journal., 44 (4). pp. 559-569. \n \nFurther information on publisher\u2019s website: \nhttp:\/\/dx.doi.org\/10.1016\/j.firesaf.2008.11.004 \n \n \n \n \n \n \n \n \n \nUse policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior \npermission or charge, for personal research or study, educational, or not-for-profit purposes provided that : \n \n\uf0a7 a full bibliographic reference is made to the original source \n\uf0a7 a link is made to the metadata record in DRO \n\uf0a7 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders. \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nRapid Prototyping a Virtual Fire Drill Environment\nusing Computer Game Technology\u2217\nShamus P. Smith\u2020, David Trenholme\nDurham University, Durham DH1 3LE\nUnited Kingdom\nAbstract\nConducting fire evacuation drills in modern buildings under realistic fire conditions can be\ndifficult. Typical fire drills do not feature dynamic events such as smoke filled corridors, fires in\nunexpected places or blocked fire exits that require on the spot decisions from evacuees. One\nalternative is the use of virtual environments. Virtual environments can support the training and\nobservation of fire evacuee behaviours in 3D virtual buildings. However complex virtual\nenvironments can be difficult to build. This paper explores how the reuse of computer game\ntechnology can aid in the rapid prototyping of virtual environments which can be populated with\nfire drill evacuation scenarios. Over a three week period, a single developer constructed a realistic\nmodel of a real world building to support virtual fire drill evaluations. While participants in a user\nstudy found the simulated environment realistic, performance metrics indicated clustering in the\nresults based on participants previous gaming experience.\nKeywords: Virtual reality; Virtual fire drill; Fire evacuation; Game engines; Rapid prototyping;\nEvaluation.\n1 Introduction\nConducting fire evacuation drills in modern buildings under realistic fire conditions can be difficult [11].\nDuring fire drills, building occupants typically exit at a leisurely pace, without having to deal with\npanic inducing events such as smoke filled corridors, fires in unexpected places or blocked fire exits. Ko\net al. [15] observe that there \u201cis always an uncertainty regarding the exact situation evacuees would\nfind themselves in an emergency evacuation\u201d. In addition, fire evacuation drills are either considerably\n\u2217Fire Safety Journal, Volume 44, Issue 4, May 2009, Pages 559-569, doi:10.1016\/j.firesaf.2008.11.004\n\u2020Contact author - shamus.smith@durham.ac.uk, tel. +44(0)191 334 4284, fax +44(0)191 334 1701\n1\ndisruptive when they occur unannounced or tediously uneventful if routinely practiced [30]. There has\nbeen considerable work done on modelling human behaviour in response to fire events (for recent\nexamples see [10, 20, 24, 26, 32, 45]) but detailed evacuation behaviour of individual building occupants\ncan be somewhat unpredictable [27, 30].\nOne alternative is the use of virtual environments to simulate fire evacuation scenarios. However\nbuilding realistic virtual environments is a complex, expensive and time consuming process [17, 31, 37].\nIn addition to generating virtual object models [14], for example buildings and scenery, a developer\nmust also manage support for user interaction [5], any dynamic or world behaviours that are required,\nfor example collision detection, and any non-visual features of the virtual world, for example audio\ncues [25]. Although virtual environment development toolkits are available, many only provide a subset\nof the tools needed to build complete virtual worlds [4]. Some features of virtual worlds such as wind,\nfire, smoke and water, and the provision for embodied autonomous agents [1], are particularly hard to\nsimulate. In addition, virtual environment toolkits often require additional programming skills and a\nsubstantial time investment on the part of the developer.\nIn recent years, work in the video game and virtual reality industries has been overlapping [2, 47].\nThe current generation of computer games present realistic virtual worlds featuring user friendly\ninteraction and the simulation of real world phenomena, for example gravity. Using computer games as\nthe basis for virtual environment development has a number of advantages. Computer games are\nrobust and extensively tested [18], both for usability and performance, work on off-the-shelf\nsystems [31] and can be easily disseminated, for example via online communities. Many computer game\ndevelopers support modification of their game environments by releasing level editors, i.e. to modify\nthe game environment, and tools to edit the game behaviour. This allows the reuse of the underlying\ngame engine technology, including 3D rendering, 2D drawing, sound, user input and world\nphysics\/dynamics [19]. These advanced features allow game engines to create realistic simulations and\nthe modular nature of game engines means they are general enough to be adapted for different games\nor applications, which allow them to be reused [19].\nThis paper describes the use of commercial off-the-shelf computer game development tools to\nrapidly develop a virtual environment to test fire drill behaviours in a 3D virtual model of a real world\nbuilding. We explored how reusing computer game technology can simplify the modelling of virtual\nbuildings, the generation of effects such as fire and smoke - which are typically difficult to program -\nand the inclusion of realistic audio cues, such as fire alarms. A user study was conducted in three fire\ndrill scenarios to evaluate the usability and realism of the developed virtual environment.\nThe remainder of this paper is as follows. Section 2 describes related work and Section 3 defines a\nnumber of computer game technologies that were considered. Section 4 describes the development of\n2\nthe virtual fire drill environment and Section 5 outlines the evaluation study. The results of the\nevaluation study are described in Section 6, followed by a discussion in Section 7. Conclusions and\nfuture work are presented in Section 8.\n2 Related Work\nThere are three areas of related work relevant to the research presented here; model-based fire\nevacuation tools, virtual reality for fire evacuation simulation and the reuse of computer game\ntechnology.\n2.1 Model-based Fire Evacuation Tools\nFires in buildings and enclosed areas are a high consequence hazard that can result in the loss of life.\nTherefore there is continuing interest in the use of computer simulations to identify preventative\nmeasures for fire risks. This includes simulations and tools to support (i) human behaviour modelling\nin the presence of fires and other dangers such a terrorist threats, (ii) the design and operation of\nstructures in the presence of fires, and (iii) modelling the spread of fire and smoke1.\nIt is common for mathematical models to be used to simulate the evacuation of large numbers of\nindividuals from enclosed spaces. One example of this is the EXODUS system [8]. EXODUS is based\non an expert system that predicts the motion and behaviour of individuals with a set of heuristic rules.\nThe system uses the interaction of several subsystems, namely movement, behaviour, passenger, hazard\nand toxicity, to predict evacuation results. Recent updates to the system have included the capability\nto model the impact of smoke, heat and toxic gases on the physical abilities of evacuees and to allow\nthe modelling of adaptive behaviour from the simulated evacuees, for example modified behaviour\nbased on an evacuees\u2019 familiarity with the building they are in [10].\nShen [32] considers the Evacuation Simulation Model (ESM), which is a network model consisting\nof stocks - representing rooms, corridors etc. - and flows - passages between objects represented by\nstocks. ESM can simulate the optimised evacuation, the phased evacuation and the evacuability of a\nbuilding, as the percentage of successful evacuees to the total occupants. Therefore, ESM can evaluate\nthe evacuation safety of buildings. ESM is a useful tool for evaluating evacuation performance and the\nsafety of a building because of its flexibility and other features, such as tracing the movement of\noccupants and predicting possible victims. Also see [44] where simulation efficiency is considered in\nmodelling buildings with a fine grain representation of zones of interest, for example the fire floor, and\n1A full summary of computer simulations for building evacuation is outside the scope of the current paper and the\nreader is directed to [11, 44].\n3\na more course grain representation for the remain parts of the building.\nJohnson [12] describes the use of the Glasgow Evacuation Simulator (GES) which was specifically\ndeveloped to model the behaviour of large groups of people. In [12] the GES is used in the context of\nterrorist threats which has many commonalities to fire evacuation modelling, for example from\nmodelling the evacuation of spectators from an indoor event to modelling security staff as an analogy\nto fire rescue teams. Johnson and Nilsen-Nygaard [13] consider evacuation simulators in the context of\ncounter terrorism, and in particularly in modelling of human behaviour in response to improvised\nexplosive devices. An important benefit of such tools is that they can be used to explore alternate\nintervention strategies as part of the training and planning of emergency service teams [13].\nMetro station fire safety analysis in China is considered in [46]. The simulated analysis of\noccupant evacuation from metro stations can provide a reference for both the design and safe operation\nof metro stations. Through simulations, a benchmark for the evacuation of deeply buried metro\nstations has been developed to show minimum requirements for occupant safety based on predictions of\nthe quality of smoke produced.\nQin et al. [28] consider how numerical simulations play an important role in investigating the\nspread of smoke in large buildings. They note that smoke is often the main cause of deaths in an\nindoor fire. In the context of a fire in an atrium, [28] describes different natural and mechanical smoke\nexhaust systems.\nFire simulation can also be an important tool for fire investigation. Shen et al. [33] observe how\nfire simulation tools can \u201creconstruct fire processes, explain fire development and demonstrate smoke\nmovement through describing the configuration of fuel, effects of ventilation, design of the building, the\nimpact of manual or automatic systems and fire source.\u201d Fire scene reconstruction supported by\ncomputer simulation can provide information for fire investigators in a way that is not easily supported\nthrough traditional fire scene investigation techniques.\nThe majority of fire evacuation simulators are used to predict evacuee behaviour or to critique the\nlayout of buildings or other environments that require emergency evacuation. In order to argue for\nrealism in the simulations, the rules governing the simulated evacuees\u2019 behaviour are typically\ncompared to other models [20, 44], to government evacuation requirements [46], to data of actual\nevacuations [8, 10] or through comparison to known evacuee behaviours [13, 24, 26, 45]. In contrast,\nthe work here considers fire evacuation in the context of simulated fire drills. We are interested in\nevaluating the evacuee behaviour of actual humans to simulated fire threats. However, conducting fire\nevacuation drills in modern buildings under realistic fire conditions can be difficult. One alternative is\nthe use of virtual reality simulations with actual human participants.\n4\n2.2 Virtual Reality for Fire Evacuation Simulation\nRen et al. [30, 29] present a virtual environment developed to simulate the evacuation of an\nunderground station. The article highlights two main reasons why evacuation may fail: poor layout of\nthe building or improper action taken by occupants due to panic or unfamiliarity with evacuation\nprocedures. Virtual environment training can be used to help identify problems with layout and help\nfamiliarise occupants with evacuation routines, which would be dangerous and expensive in a real\nbuilding. The virtual environment was developed in Vega2, a real-time scene simulation platform.\nHowever, Ren et al. [30] observe that Vega did not provide a complete set of the features needed to\nbuild virtual worlds and separate software was needed to model the 3D building, in Multigen Creator3,\nand generating fire\/smoke effects, in the Fire Dynamics Simulator4.\nLouka and Balducelli [21] describe the use of virtual reality technology in the context of\nemergency operation support and training as the only feasible alternative to full-scale fire tests inside\ntunnels. Data relating to the simulation can be managed by a single database and other simulation\ntools, e.g. for fire and smoke, can act on this data. Louka and Balducelli [21] discuss the different types\nof hardware and software available and how they can affect presence [36], the degree to which the user\naccepts the computer generated experience as real, and immersion, which depends on the hardware\nbeing used. A distinction is made between virtual reality training simulators - where the knowledge\nencoded in such systems is only used to present a realistic environment to move around in - and\ntraining systems - where training functionality is integrated, which guides the user to teach a correct\nprocedure or remedy incorrect actions. By this classification, the system considered in the work\ndescribed here is a virtual reality training simulator.\nA virtual reality based feasibility study of evacuation time is compared to a traditional,\nmathematical, method for calculating evacuation planning in [34]. A virtual reality model of a building\nis created, using 3D WebMaster, to compare time\/reactions of a user to that calculated mathematically,\nin a number of different scenarios, e.g. with and without smoke\/signs. The study concluded that a\nvirtual reality simulation is a viable alternative to traditional calculation methods in evaluating zoning\nplans, evacuation times and location of exits. In addition to showing that virtual environments are\nuseful in this kind of application, Shih et al. [34] demonstrate that a virtual environment can help\nprovide results that might not otherwise be predicted by mathematical calculations.\nTang et al. [41] describe the use of a virtual environment to investigate the influence of various\nemergency signs in aiding way-finding behaviours of building users in the event of an emergency. Three\n2http:\/\/www.multigen.com\/products\/runtime\/vega prime\/ [last access 12\/11\/2008].\n3http:\/\/www.multigen.com\/products\/database\/creator\/index.shtml [last access 12\/11\/2008].\n4http:\/\/www.fire.nist.gov\/fds\/ [last access 12\/11\/2008].\n5\nscenarios were tested with old-version emergency signs, new-version emergency signs and a control\ngroup with no emergency signs. The groups without signs took far longer to exit the virtual building\nand there were gender differences in way-finding ability with males exhibiting better way-finding skills.\nThere is little information in the paper about the virtual environment apart from that it was developed\nin Quest 3D5, a commercial tool for creating real-time 3D applications.\nIn contrast to actual fire drills, virtual environment overcome the disadvantages of high cost, poor\nrepetitiveness and danger [29]. However the development of realistic virtual environments themselves\ncan be a complex, expensive and time consuming process. In addition, developing virtual environments\ntypically requires a number of specialist developer skills and access to, and the integration of, multiple\nsub components. For example the system described in [29] requires access and knowledge of (i) Vega, a\nreal-time scene simulation platform, (ii) Multigen Creator, a 3D modeller used for the virtual building,\n(iii) Fire Dynamics Simulator, used to provide fire science support, and (iv) Visual C++.Net, for\ncustom code development.\nThe work in this paper investigates an alternative approach in the reuse of computer game assets\nand the use of existing off-the-shelf game engines to rapidly develop and support fire drill simulations.\nThis follows recent trends in the reuse of computer game technology in non-game applications.\n2.3 Computer Game Technology Reuse\nMac Namee et al. [22] describe the development of Serious Gordon, a virtual environment to teach food\nsafety. The Source engine developed by Valve Corporation6, used in the game Half-Life27, was reused\nin the construction of the environment. Mac Namee et al. [22] discuss how particular attention was\npaid to the story of the game to provide an interesting scenario that was also realistic and covered the\nnecessary learning outcomes. Also they provide an overview of how game play elements from the base\ngame, Half-Life2, that were deemed unnecessary were removed and other game assets were modified.\nThe major challenge identified was the need to balance the competing goals to teach and to entertain.\nA modification of Quake III Arena8 was used to test the suitability of using computer games for\npsychological experimenting. Frey et al. [7] found that using virtual environments to collect data can\ncompromise the internal validity of the data as some people have previous experience with virtual\nenvironments, e.g. people who play computer games. An investigation was carried out to see if training\nin a virtual environment can help reduce these individual differences in user performance and through\nthe modification of Quake III Arena, several virtual environments were built. Frey et al. [7] found that,\n5http:\/\/www.quest3d.com\/ [last access 12\/11\/2008].\n6http:\/\/www.valvesoftware.com [last access 12\/11\/2008].\n7http:\/\/www.Half-Life2.com\/ [last access 12\/11\/2008].\n8http:\/\/www.idsoftware.com\/games\/quake\/quake3-arena\/ [last access 12\/11\/2008].\n6\nafter training, the performance of non-players and inexperienced players had improved to a greater\nextent than that of experienced players which partially removed the differences in performance due to\nprevious experience.\nThe use of game engines in producing a visual walkthrough application for a virtual office is\ndescribed in [35]. The virtual office was designed in a 2D CAD application before being converted to\n3D and imported into UnrealED, the map\/level editor for the Unreal Engine game engine9.\nShiratuddin and Thabet [35] note several advantages of using game engines for creating virtual\nwalkthroughs, such as low cost, network support, collision detection, support for a high frame rate and\nrelatively low hardware requirements. Also they note that the use of a 3D game engine can greatly\nimprove real-time walkthrough experiences as needed in virtual reality applications.\nBell and Fogler [3] describe an ongoing project to create a series of virtual reality based\nsimulations for laboratory accidents using a variety of different platforms. The project is based on the\nidea that real life experiences of lab safety procedures and accidents will have a greater impact than\njust reading rules and guidelines. Since it is too expensive and dangerous to simulate this in real life, a\nvirtual reality simulation is used to be as close as possible to real life experiences. One of the scenarios,\nthe proper storage of chemicals, has been implemented using the Half-Life10 game engine. The\nHalf-Life game engine was suitable in this case because it is easily modified, provides sophisticated\nlighting effects, can trigger actions by user movement and show explosions.\n3 Computer Game Technology\nA number of computer game developers provide tools, documentation and source code, either with the\ngame itself or separately available, so that end-users can create new content for the game called a mod\nor modification [9]. For example, users can create new levels, maps, items or characters and add them\ninto the game, known as a partial conversion, or create an entirely new game by altering the games\nsource code, know as a total conversion.\nThis section overviews several currently available game engines that are suitable for prototyping\nvirtual environments (also see [42]). Modern game engines have a modular structure so that they can\nbe reused for different games [19]. Computer games in the First Person Shooter (FPS) genre tend to\nhave the greatest capability and resources for modification, so this section will examine game engines\nfor this game genre. There is a wide selection of 3D game engines available for potential reuse11. Lewis\nand Jacobson [19] observe that there are more than 600 commercial game engines. However, the game\n9http:\/\/www.unrealtechnology.com\/ [last access 12\/11\/2008].\n10see http:\/\/www.valvesoftware.com\/games.html [last access 12\/11\/2008].\n11For a comprehensive database of 3D engines see http:\/\/www.devmaster.net\/engines\/ [last access 12\/11\/2008].\n7\nengines considered here are those used in the most recently available commercial computer games, thus\nrepresenting more advanced technology which usually results in more realistic environments.\n3.1 CryENGINE\nThe CryENGINE was created by software developers Crytek12 and used in the game Far Cry13\nreleased in 2004. The CryENGINE supports a number of features that are useful for creating\nimmersive and realistic games and virtual environments, such as a real-time editor, dynamic lights, a\nnetwork system, an integrated physics system, shaders, shadow support and a dynamic music system.\nThe necessary development tools are integrated with the engine itself, including the CryENGINE\nSandbox world editing system. Licensed developers receive full source code and documentation for the\nengine and tools14.\nAdvantages to using the CryENGINE include that the engine produces very high quality graphics\nand visuals. The necessary development tools are provided with the engine and so can be accessed from\ngames that use the engine, such as Far Cry. Also, the Sandbox editor is a very intuitive tool as it edits\nlevels in real time, offering what you see is what you play feedback. Partial source code and\ndocumentation is included with a freely downloadable SDK15. A disadvantage with this engine is that\nit has high demands on supporting hardware requirements for the high quality visual and audio\ncomponents.\n3.2 id Tech 3 Engine\nThe id Tech 3 engine is a game engine developed by id Software16 and was first used in the game\nQuake III Arena17, released in 1999. Designed to be the ultimate multiplayer experience, Quake III\nArena has become a defacto standard for professional gamers and is the common choice for gaming\ntournaments around the world.\nAdvantages to using this engine include that in addition to the Quake III game source code, the\nengine source code has been released under the GNU General Public License (GPL). The availability of\nthe full source code provides more flexibility in the customisation of game environments. Additionally\nthere are a large number of tutorials and articles that have been written for this engine and with the\nrelease of the source code in 2005, there is still an active development community. One disadvantage of\nusing this engine is that game engine technology has progressed greatly since its original release in\n12http:\/\/www.crytek.com [last access 12\/11\/2008].\n13http:\/\/www.farcry-thegame.com [last access 12\/11\/2008].\n14http:\/\/www.crytek.com\/technology\/cryengine-2\/specifications\/ [last access 12\/11\/2008].\n15http:\/\/crymod.com\/filebase.php [last access 12\/11\/2008].\n16http:\/\/www.idsoftware.com [last access 12\/11\/2008].\n17http:\/\/www.idsoftware.com\/games\/quake\/quake3-arena\/ [last access 12\/11\/2008].\n8\n1999, and more advanced engines are available for use [16].\n3.3 id Tech 4 Engine\nDeveloped by id Software, the id Tech 4 engine was first used in the game Doom 318. id Tech 4 was\npreviously known as the Doom 3 engine. The id Tech 4 engine provides several unique features, such as\na unified lighting paradigm, where every surface uses the same rendering pipeline, leading to visual\nconsistency and fully dynamic shadows. The engine also makes short map compilation times possible.\nThe level editor for this engine is built into games that use it and so can be accessed by anyone who\nowns any of these games.\nThe main advantage of using the id Tech 4 engine is that it is a very powerful engine, capable of\nproducing realistic environments. Also, there is a large modding community, including a large number\nof tutorials and articles are available. However, similar to CryENGINE (Section 3.1), the hardware\nrequirements of the engine are high, for example requirements for Doom 3 include: 100% DirectX 9.0b\ncompatible 64MB hardware accelerated video card, Pentium IV 1.5 GHz or Athlon XP 1500+\nprocessor or higher, 384MB RAM, 2.2GB of uncompressed free hard disk space (plus 400MB for\nWindows swap file) and 100% DirectX 9.0b compatible 16-bit sound card.\n3.4 Jupiter Extended (EX)\nJupiter EX is the latest version of a multi-platform game engine and development kit developed by\nTouchdown Entertainment19 and used for the game F.E.A.R20. Jupiter EX includes a set of content\ncreation tools, each with a different purpose. WorldEdit allows designers to create 3D environments\nand add objects and lighting. ModelEdit allows the designer to optimise models so that they interact\ncorrectly with the environment and other objects. FxEdit can create and modify visual effects, without\nrequiring re-compilation of the game, which increases the efficiency of the implement\/test cycle for\nspecial effects. Other tools include ArchiveEdit, a tool used to package game assets into one archive for\ndistribution and GDBEdit, the game database editor for changing things such as weapon damage, the\ninterface etc. without changing source code.\nThe advantages of modifying games that use the Jupiter EX engine include the high level of\ngraphical fidelity that can be achieved, which will improve realism and immersion. Also, support tools\nrequired for modifying Jupiter EX games are available and logically separated into a number of\ndifferent applications and come with documentation. The main disadvantage is that the modding\n18http:\/\/www.idsoftware.com\/games\/doom\/doom3\/ [last access 12\/11\/2008].\n19http:\/\/www.touchdownentertainment.com\/ [last access 12\/11\/2008].\n20http:\/\/www.whatisfear.com [last access 12\/11\/2008].\n9\ncommunity is not as large for F.E.A.R, the most popular Jupiter EX game, as it is for other games\nsuch as Half-Life2 or Unreal Tournament 2003\/2004.\n3.5 Source Engine\nThe Source Engine was developed by the Valve Corporation21 and is most notably used in games such\nas Half-Life222 and Counter-Strike: Source23. The Source Engine features a high degree of modularity\nand flexibility, lip synchronisation and facial expression technology and a realistic physics system. The\nengine also supports particle effects, volumetric smoke and environmental effects such as fog and rain.\nAn advanced artificial intelligence system is provided which enables sophisticated character navigation,\nenabling characters to run, jump, climb stairs etc.\nThe level editor that is used to produce levels for games using the Source Engine is the Valve\nHammer Editor, commonly referred to as Hammer. All the necessary tools for creating a mod and\ngame content, e.g. via Hammer, are included with the Source SDK, which is available after purchasing\na Source-based game, e.g. Half-Life2, and can be downloaded using Valve\u2019s digital content delivery\nservice called Steam24. Documentation for the Source SDK is provided on the Valve Developer\nCommunity25 wiki, which was created by Valve and is the definitive and most comprehensive source of\ninformation on using the Source Engine.\n3.6 Unreal Engine 2\nA powerful and widely used game engine developed by Epic Games26, Unreal Engine 2 was used to\ndevelop Unreal Tournament 200327 and its successor, Unreal Tournament 2004. UnrealEd 3, the level\neditor, is included with Unreal Tournament 2003\/2004. The engine supports high performance\nrendering, advanced animation features and high-quality dynamic lighting.\nModification of games based on the Unreal Engine 2 is further supported by inclusion of sample\ncontent and the source code for the engine and editor. The engine source code is written in C++. The\nengine also includes a scripting language, UnrealScript, which can modify various aspects of the\ngameplay28. Many resources are available for modifying Unreal Engine based games, including Epic\u2019s\nUnreal Developer Network (UDN)29, which is the official support site for licensees and mod developers\nand provides technical documentation as well as tutorials for the Unreal Engine and UnrealEd.\n21http:\/\/www.valvesoftware.com [last access 12\/11\/2008].\n22http:\/\/www.Half-Life2.com\/ [last access 12\/11\/2008].\n23http:\/\/counter-strike.net\/ [last access 12\/11\/2008]\n24http:\/\/www.steampowered.com [last access 12\/11\/2008].\n25http:\/\/developer.valvesoftware.com\/ [last access 12\/11\/2008].\n26http:\/\/www.epicgames.com\/ [last access 12\/11\/2008].\n27http:\/\/www.unrealtournament3.com\/ [last access 12\/11\/2008].\n28see http:\/\/www.unrealtechnology.com\/ [last access [12\/11\/2008].\n29http:\/\/udn.epicgames.com [last access 12\/11\/2008].\n10\n3.7 Game Engine Selection\nAll the engines considered in this section are suitable for developing non-game virtual environments.\nLewis and Jacobson [19] note that in many cases it would be hard to imagine an application for which\none game engine would be suited and others not. Particle effects, which are needed to simulate fire and\nsmoke in the target virtual environment, are supported in all the engines considered. Also all the\nengines provide some source code to users; usually partial source code that can be altered and\nrecompiled to affect the actual game play.\nThe Source engine was chosen for the fire evacuation simulator as it provides everything required\nto produce a high quality virtual environment and has extensive support included with the Source\nsoftware developers kit (SDK), e.g. the world editor Hammer and the games source code. The technical\nfeatures of the Source engine were also more than adequate for the requirements of the problem\ndomain, e.g. support for particle effects such as fire and smoke and additional properties that are\nparticularly relevant to a fire drill simulator including allowing fire entities to ignite other fire entities,\ngiving the impression of a spreading fire, which will help increase the realism of the environment.\n4 Virtual Fire Drill Environment\n4.1 Building Layout\nThe building chosen to be modelled was the Computer Science department at Durham University. The\ndepartment building consists of three floors with a number of offices, meeting rooms and a reception on\nthe first floor. Three exits were identified: the main entrance on the ground floor, a rear exit on the\nfirst floor and a connecting corridor between Computer Science and the Engineering department on the\nsecond floor.\nFloor plans of all three floors of the department were used to determine the layout and relative\nscale of corridors, doors and rooms. Elements in the real building that would act as audio and visual\ncues to someone during a fire evacuation were identified in the department and their positions added to\nthe plans so that they could be accurately included in the final model. These included fire alarm\ntriggers, fire alarm sirens, fire exit signs and fire extinguishers. Photographs of various areas of the\ndepartment were taken to aid texturing the 3D model.\n4.2 Fire Simulation\nOne of the main features required of the game engine was support for fire and smoke effects. Using the\nSource Engine and Hammer, this was accomplished by using fire entities, which are objects that\n11\ngenerate fire at their origin and smoke effects above the flame. The smoke can be toggled on\/off, the\nheight of the flame can be specified and fires can be set to have an infinite duration, i.e. fires that will\nburn forever. Figure 1 shows views of the real building and the virtual building with a collection of fire\nentities positioned close together.\nFigure 1: Virtual model view (left) including fire entities and accompanying smoke and real world view\n(right) of a stairwell.\nThe spread of fire through the virtual environment is an important part of the fire evacuation\nsimulations. This was achieved by placing several fire entities in close proximity to each other and only\nigniting the fire entities at the fire start point. Although this did not produce a completely accurate\nrepresentation of how a fire might spread in a real building, it was a useful method for quickly\nproducing a fire that spreads over time.\n4.3 3D Virtual Building Model\nThe main geometry for the model of the Computer Science department was created using Hammer, the\nlevel editor for games using the Source engine (see Figure 2). The three main floors of the department\nwere created separately, using photographs and floor plans for reference. Most of the offices themselves\nwere not modelled, on the assumption that their doors would be locked and they would be unreachable\nin the final model.\nOnce the level geometry was completed, basic object props were added to the model to make it\nmore accurately represent the department and increase its realism. Lights and light fittings were added\nto the ceiling, chairs and other furniture, such as filing cabinets, corkboards and shelves, were placed in\nappropriate places in the corridors (see Figure 3). Glass windows were added in some areas, such as the\nmain office reception.\nSource engine games, such as Half-Life2, provide a number of resources that can be reused in their\nmodifications. However there was a problem with the story genre of the game being modified. Since\nHalf-Life2 is set in a futuristic, dystopian world, many of the props available to user modifications\nreflect this, i.e. they appear damaged or \u201cdistressed\u201d to some extent, and would look out of place in a\n12\nFigure 2: The completed model geometry in the Hammer editor.\nComputer Science department. In some cases, this limited the assets that could be reused from the\noriginal game and meant that new, customised media had to be created.\nFigure 3: Virtual model (left) and real building (right) views of the Computer Science Department.\n4.4 Fire Drill Evacuation Scenarios\nThree fire drill evacuation scenarios were created. This was achieved by having three copies of the same\nmap, so that the 3D building model was identical in all three scenarios, but with fire entities placed in\ndifferent locations to define unique escape routes for each scenario. In each scenario, a trigger is placed\nin the staffroom - on the top floor of the building - so that when the user enters, a timer will start and\nthe user is told to wait. Three seconds later, a fire breaks out triggering an audio cue fire alarm and\nclosing all the smoke stop doors in the corridors, which are initially open.\nWhen the fire alarm sounds, the user is instructed to find an exit, and in doing so must navigate\nthrough the virtual building avoiding any routes blocked by fire and smoke. There is only one viable\n13\nexit in each scenario, which is only enabled once the fire starts. When the user reaches an exit, another\ntrigger causes the virtual environment to fade out and the user is informed of their success and the\nscenario ends.\nExplicit fire science, as found in fire evacuation simulators such as [10, 28, 33], is lacking from the\nthree scenarios. Due to the exploratory approach to the prototype development only limited fire and\nsmoke, as provided by the base game technology, was included. Smoke is explicitly linked to fire\nentities so that where there are more fire entities there is thicker smoke. Also the fire entities were set\nto expand as time progressed. Therefore users in the environment who returned to a fire site would find\nboth a larger fire and more smoke30.\nThe full 3D model and fire drill scenarios were completed in three weeks by a single developer (the\nsecond author). This is indicative of the support provided by the game technology and the rapid\nnature of reusing game assets. This allowed the developer to concentrate on the content construction\nand the prototyping of the evacuation scenarios.\nIn all three scenarios, the user, navigating the building in first-person perspective, is the only\nperson in the virtual world. When evaluating the developed environment we were primarily interested\nin usability and environment realism. Early trials of the environment featured computer controlled\nnon-player characters (NPCs). However, initial experiments with NPC movement, based on game\nsupported scripting, had NPCs being trapped in rooms with fires. It was felt that this would distress\nusers in an evaluation study and interfere with their own evacuation from the virtual environment.\nTherefore no NPCs were included in the user study environments31.\nA user study of the fire drill evacuation scenarios was conducted to investigate the usability and\nrealism of the constructed virtual environment and whether the computer game development tools are\nsuitable for rapidly prototyping virtual environments. The study aimed to collect performance metrics\nof building evacuation times, subjective responses from questionnaires and video\/audio data for later\nanalysis.\n5 Evaluation Study\nTwelve participants volunteered for the study and were recruited through university mailing lists. They\nconsisted of 2 females and 10 males with ages ranging between 18 and 52. All participants used\ncomputers on a daily basis and for work activities. Eleven participants used computers for educational\nactivities and nine participants used computers for entertainment. Seven participants reported\n30The lack of fire science provided by the game technology will be discussed further in Section 7.\n31The use of NPCs and the inclusion of other human participants is part of our future work and will be considered in\nSection 8.\n14\nfrequent, i.e. at least once a week, computer game usage describing themselves as novices (0),\nexperienced players (5) and expert players (2). Participants were paid four pounds (UK\u00a3) for\nparticipation and all twelve participants completed the three fire evacuation scenarios. The evaluation\nstudy was approved after independent scrutiny by the Ethics Committee of the Department of\nComputer Science, Durham University.\nThe evaluation was carried out in an empty office. The equipment consisted of an ERGO\nNotebook PC with Twin Intel 1.66GHz CPU\u2019s, 504MB of RAM, Windows XP SP2 and a standard\nmouse. The fire evacuation mod was loaded into the single player version of Half-Life2 in offline mode.\nNavigation in the environment was by the arrow keys on the Notebook PC and a standard mouse.\n5.1 Procedure\nDemographic, computer usage and computer game usage data was gathered in a pre-session\nquestionnaire. A consent form was also signed by all participants. This included explicit permission for\nthe use of video footage collected during the sessions.\nOn entering the study room, the evaluator (the second author) introduced the equipment and\nexplained its function. The participants were given an information sheet outlining the tasks that they\nwere about to attempt, i.e. to evacuate the building in the event of a fire alarm. In each scenario, the\nparticipants started on the ground floor of the virtual building and were requested to navigate to the\nstaff room on the 3rd floor32 and to wait. Three seconds after entering the staff room a fire alarm\nsounded. Participants were then instructed to exit the building.\nCooperative evaluation [43] was used in the evaluations. This is a concurrent think-aloud verbal\nprotocol where users are encouraged to treat the evaluation as a shared experience with the evaluator\nand may ask questions at any time. As the sessions were recorded on video, the verbal protocol allowed\nevacuation decisions to be elicited and captured, for example any movement decisions participants\nmade while evacuating the virtual building. Cooperative evaluation has been successfully used in a\nnumber of virtual environment evaluations [23, 39, 40].\nAfter completing the three scenarios participants were thanked for their help and asked to\ncomplete a post-session questionnaire. This questionnaire contained questions about their satisfaction\nwith the interface, realism of the simulation and engagement with the scenarios.\n32In navigating to the 3rd floor of the building from the ground floor using a stairwell allowed the participants to gain\nexperience in using the arrow keys to move in the virtual building.\n15\nN = 12 Scenario 1 Scenario 2 Scenario 3\nAverage 165.83 66 138.58\nStd Dev. 82.75 31.84 70.13\nMax. 350 137 328\nMin. 73 34 76\nTable 1: Time taken, in seconds, to evacuate the virtual building over the three scenarios.\n6 Results\nThe main objectives of the evaluation studies were to investigate the usability and realism of the\nvirtual environment and whether public domain game development tools are suitable for rapidly\nprototyping virtual environments. We were also interested in any differences in participant behaviour\nbased on previous gaming experience.\n6.1 Performance Metrics\nTable 1 summarises the time taken, in seconds, to evacuate the virtual building over the three scenarios.\nThe scenarios were also walked through in the real building, obtaining a time of 82 seconds for\nscenario 1, 40 seconds for scenario 2 and 60 seconds for scenario 3. The results for the virtual\nenvironment show that the times are generally longer than in real life, which could be due to interface\ncontrol issues or unfamiliarity with virtual environments, although they follow a similar pattern, i.e.\nscenario 2 took less time to complete than scenarios 1 and 3.\nThe variance in times within a scenario could be explained by the amount of previous experience\nthe participants had with virtual environments or experience with FPS games. This could give\nparticipants an advantage when navigating in 3D virtual environments. Therefore in the pre-session\nquestionnaire, the participants were asked to indicate their level of experience with computer games.\nFigure 4: Average time taken in a scenario by participants of each experience level.\nFigure 4 shows that the evacuation times for each scenario were affected by the amount of gaming\nexperience of the participant, with more experienced participants completing the scenarios in less time.\n16\nHowever, the overall pattern for the three scenarios within an experience group stays the same.\n6.2 Participant Questionnaires\nFive of the questions in the post-session questionnaires provided a numerical scale for the participants\nto indicate preferences with 1 representing a low score and 7 representing a high score. The data\ngathered through these questions has been summarised in Figure 5.\nFigure 5: Box plot summary of questionnaire results.\nFigure 5 shows that the responses to most of the questions did not vary greatly, as the\ninterquartile ranges do not show a large spread. In most cases, it is the minimum values that differ\nmost significantly from the rest of the results, i.e. there is a negative skew. The box plot for the\nquestion referring to the attention\/focus of the participants shows that all participants selected 6 or 7,\nimplying that nothing broke concentration of any participant significantly. The interquartile range for\nthe question referring to navigation difficulty shows a larger spread of responses than for the other\nquestions, which could be due to the amount of previous experience participants had with playing\ncomputer games or navigating virtual environments.\nIn addition Figure 5 shows that for the realism of the virtual environment, ratings were generally\nhigh with the mean being slightly less than six. The four participants who were the quickest to\nevacuate were all gamers - two experienced, two experts, three of whom rated the realism as six and\nthe other rating it as a seven. Out of the four participants who took the longest to evacuate, there were\ntwo non-gamers and two experienced gamers. Their ratings had a slightly larger spread, one rating\nrealism as five, two rating realism as a six and one as a seven. These results indicate that the model\nprovided a high degree of realism. Participants who were familiar with the building being modelled, i.e.\nstaff and students from the Computer Science department, commented that some familiar objects that\nthey would expect to see were missing, which if present may have helped with their orientation in the\nvirtual space.\nThe virtual environment was also rated on the realism of the fire evacuation task itself. The\n17\nratings were on average between five and six, but there was a larger negative skew. The four\nparticipants who were the quickest to evacuate all rated the fire evacuation task as six. However, the\nfour participants who took the longest all gave different ratings: two, four, five and seven. Some of the\ncomments on unrealistic elements in this area were that the fires were in unrealistic places, for example,\non a stairwell. Participants commented that it was sometimes difficult to tell where the smoke was\ncoming from and other cues such as heat indicators would have helped to make it more realistic.\n6.3 Participant behaviour\nFinally, the suitability of using game engines for producing training simulators was considered, with\nrespect to participant behaviour within the fire evacuation scenarios. One possible disadvantage of\nusing game engines for training simulators is that participants who are experienced with playing games\nmay treat the simulation like a game, ignoring danger cues and not interacting with the environment as\nthey would in real life.\nThere were two problems that did arise that may be due to the fact that the simulation had been\ncreated using a game engine. The first problem was that most participants did not expect to use a\nwindow exit in the third scenario when all the other exits were blocked. Five participants (42%)\ndecided to look for a window to either signal for help or use it as an escape route, but the other seven\nparticipants (58%) did not try the windows until they were suggested as a possibility by the evaluator.\nThis may have been due to most participants assuming that this kind of functionality was not available\nin the virtual environment, as the only other elements for interaction were doors.\nThe second problem was that in the third scenario, few participants avoided opening doors with\nsmoke coming under them. This was intentionally added to the scenario to test evacuee behaviours to\nthis dangerous situation. Nine participants (75%) either hesitated to approach because of the smoke or\ngot so close that their avatar was injured by the heat from the fire behind the door, but still opened the\ndoor to make sure the route was blocked. Only three participants (25%) decided not to open the doors\nbecause of the smoke. In an actual fire, the heat and sound of the fire would be more apparent and\nwould do more to discourage people from opening the doors than just the visual cues from the smoke.\nIn both cases, the game-based environment has interfered with the participants expectations of\nenvironment veracity. Two possible solutions are (i) a reconfiguration of input and output channels for\nthe interaction and (ii) increasing the level of realism. For the evacuations described in this paper, user\ninput and output was via a standard laptop. Navigation was enabled via the laptops arrow keys. As\nthis is a common gaming key layout, changing this may avoid participants moving into a gaming\nmindset33. Also moving the output channel to a large external monitor may help users relate better to\n33In post evaluation demonstrations of the environment, a Xbox 360 controller was used for navigation. This significantly\n18\nthe first-person experience. The aim would be to modify the level of realism and immersion in the\nscenario to increase the degree of presence to the point where the user accepts the computer generated\nexperience, at least temporarily, as real [21].\n7 Discussion\nRealism in virtual environments plays an important role in supporting any higher levels goals such as\nuser training or accessing user awareness of, in this case hazardous, situations. In the context of fire\ndrills, realism requirements are in (i) the built environment, (ii) the behaviour of the fire, and smoke,\nand (iii) the features of the scenario, for example fire placement, exit routes and crowd behaviour.\nIn most virtual environment developments there are tradeoffs between environment realism. In\nmany cases this is a resource issue. Photo-realistic environments are expensive to build and\ncomputational expensive to render and display. However, particularly in this case, a non-realistic\nenvironment may influence user behaviour, for example with users treating the exercise as only a game.\nOne way to avoid this is to import as many real environment assets into the virtual environment as\npossible. In the fire drill environment, floor plans were used to provide an accurate layout of the virtual\nbuilding and digital photos of common textures were used to populate the virtual building, for example\nfloor tiles, staircase features and wall posters. In this way the environment context, as a multi-storey\nbuilding included expected features such as fire exit signs, thus providing a realistic context for the\nvirtual fire drills. However it is also important that the fires encountered are also realistic.\nThe level of fire science used in the work presented here is limited to what was provided by the\ncore game engine. Fire entities had associated smoke, damaged user avatars if they moved too near and\nover time spread within room boundaries. As evacuation times in the tested scenarios were brief, on\naverage less than four minutes, there was little need for extensive modelling of the fires. Primarily the\ndrills were to identify user behaviour to the presence of fire and how users navigated escape routes. If\nscenarios required users to be in the building longer, for example if they were trapped by fires before\nrescue or if the virtual building was significantly larger (i.e. [44, 46]), then there would be a\nrequirement for more complex fire and smoke behaviour. The effects of fire and smoke on the\nenvironment, for example fire moving between floors, and the toxic effects of fumes on users would be\nnecessary. Fortunately, game engines can facilitate some of these behaviours, for example reducing the\nhealth of users when under water in games could be modified to indicate the effects of smoke and\nfumes. Also many game engines provide access to source code (see [42]) so, if required, more realistic\nfire science behaviour could be integrated, for instance via the Fire Dynamics Simulator34. This would,\nintensified game-like behaviour with participants regularly jumping down stairwells and running through fires.\n34http:\/\/www.fire.nist.gov\/fds\/ [last access 12\/11\/2008].\n19\nhowever, be at the cost of development time and require additional developer skills.\nIt is also important that the definition of the scenarios themselves match user expectations. In the\nevaluation study, three fire drill scenarios were used. Each was designed to be unique, single participant\nbased, with single valid escape route and having special features of interest to test participants\u2019 fire\ndrill behaviour, for example closed doors with smoke coming underneath. Some participants felt that\nrealism in the scenarios had been compromised by the scenario construction. For example, during the\nevaluations, comments were made on the placement of the fires. Participants encountered fires on\nopposite sides of the building, forcing them down a single escape path. In the type of building that was\nmodelled, a fire with a number of separate start points, particularly in areas without flammable\nmaterial, such as in stairways, would be very unlikely. Also the sterile nature of the virtual\nenvironment influenced the realism of the scenarios. Participants commented on the emptiness of some\ncorridors, i.e. the lack of corridor clutter and other evacuees, and participants familiar with the actual\nbuilding noted that some features were missing from the virtual building. Again, there is a trade-off\nbetween the accuracy of the virtual building representation, the addition of NPCs and development\ntime. With a rapid prototyping approach some simplification is inevitable. However, the final aim of a\nfire drill environment will also determine building realism. If the aim is to test evacuations from a\nparticular real world building then there will be some minimum realism requirements for the virtual\nrepresentation. The virtual building must be recognisable and have features that allow training in the\nvirtual world to influence real world behaviour. Alternatively, if the aim is to elicit participants\u2019\ncurrent fire drill behaviour or to train for behaviour improvement, then a more generic building, with\nset fire events and computer-based crowds, may be preferable.\nThere are also number of game-oriented issues that have been identified. Prior experience of\ninteracting with virtual environments can have a notable increase in user\u2019s performance in virtual\nenvironment evaluations [6, 7]. As one of the most commonly encountered virtual environments is the\nmodern 3D computer game, this can be problematic in environments using game technology. To\nbalance gaming experience in such evaluations, participants could either be pre-screened for gaming\nability to balance any experimental groups, or all participants could be trained [7] to an experience\nbenchmark, for example reaching some ability threshold before commencing the actual evaluation.\nBoth methods could be costly in requiring additional environments to be developed and in the added\ntime to test or train participants. There are clearly cost benefit trade-offs to these issues and gathering\nevidence to support this is ongoing research [38].\nOne issue with the use of off-the-shelf technology is that of licensing. The importance of this to a\ndevelopment will be in the nature of the individual project. Many game engines are free to use for\nnon-commercial applications and provide software development kits (SDKs) for this purpose (see [42]).\n20\nHowever, in order to access complete source code of a game engine, which may be required to integrate\naccurate fire science, complex NPC behaviour or custom networking, full licensing may be needed35.\nHowever, the nature of rapid prototyping is that the developed product is only a prototype or proof of\nconcept, and in such cases may be thrown away before development of a full product begins. Therefore\ncomputer game technology provides an inexpensive development environment for identifying\nrequirements and evaluating initial user behaviour to fire features and events. In some cases, resources\ndeveloped for the prototype could be imported into a latter development. Although there is a lack of\ninterchange formats between game engines, as many use proprietary formats, some game engines, such\nas the Source Engine, provide a text-based format. In this case map and level information could be\nexchanged and reused between developments.\nAs game engine technology develops, more realistic fire science will be available within core game\nengines. Also complex NPC behaviour is now becoming available for addition into game modifications.\nFinally, there is an expanding game modification community worldwide, producing ever more complex\ngame modifications and third-party tools to integrate new and existing technology into game engines.\nLinking realistic fire science to the usability and robustness of game technology has great promise for\nrapidly prototyping simulations of custom buildings for fire evaluation drills.\n8 Conclusions and Future Work\nVirtual environments can support the training and observation of fire evacuee behaviours in virtual 3D\nmodels based on real world buildings. However complex virtual environments can be difficult to build.\nThis paper has shown how the reuse of computer game technology can aid the rapid prototyping of a\nfire evacuation virtual environment. Over a three week period, a single developer constructed a realistic\nmodel of a real world building which was populated with fire drill evacuation scenarios and evaluated.\nWhile participants found the simulated environment realistic, performance metrics indicated clustering\nin the results based on participants gaming experience.\nIt was found that a participants previous experience at playing computer games played an\nimportant part in their experience of a game engine-based simulation. Therefore, this could affect\nresults in other virtual environment simulations.\nSome dangerous behaviour was exhibited by participants, for example ignoring smoke coming from\nunder doors. This is problematic if good fire evacuation procedures are to be learnt. This may require\nvirtual environments to have a variety of visual or audio cues to compensate the lack of heat and odour\n35Actual costs for full licensing are difficult to determine as game developers commonly require a non-disclosure agreement\nas part of the negotiation. One exception is the licensing for Jupiter Ex with licensing packages ranging from US$15, 000\nto US$55, 000 depending on developer options.\n21\ncues found in real environments, for instance an indication of doors becoming hot with a red handle.\nFuture work includes investigating features in the environment that will increase the realism of the\nexperience. One limitation of this virtual environment was that the fire extinguishers could not be\nused. Four participants wanted to try and use the fire extinguishers, but this feature was not\nimplemented. Half-Life2 does not provide a functional fire extinguisher that can put out fires.\nAlthough the use of fire extinguishers may be secondary to evacuating a building, we are investigating\nadding this functionality by altering the source code of the Source Engine.\nFinally when people are attempting to exit a building, an individuals actions may affect other\npeoples actions. For example, an individuals choice of exit may not just depend on how close an exit is;\nit may also depend on how many people are heading towards an exit, e.g. a crowd may make an exit\ndifficult to reach [20]. The Source Engine provides the functionality for limited artificial intelligent\nNPCs which can be instructed to navigate through the environment based on event triggers. We intend\nto explore the possibility of adding NPCs into the evacuation scenarios and exploiting the multi-player\nnetworked facilities of Half-Life2 to enable multiple human participants to experience the same fire drill\nscenario concurrently.\n9 Acknowledgements\nThe authors would like to thank the evaluation study participants, Dr Liz Burd (Computer Science,\nDurham University), the HEFCE Centre for Excellence in Teaching and Learning in Computing\n(Active Learning in Computing, Durham University) and Brendan Hodgson (Computer Science,\nDurham University). The authors are also grateful to the reviewers who provided valuable comments\nfor the improvement of this paper. This work was funded in part by the Nuffield Foundation (grant\nURB\/34118).\nReferences\n[1] Jan M. Allbeck and Norman I. Badler. Embodied autonomous agents. In K. M. Stanney, editor,\nHandbook of Virtual Environments, pages 313\u2013332. Lawrence Erlbaum Associates, New Jersey,\n2002.\n[2] Eric Badique`, Marc Cavazza, Gudrun Klinker, Gordon Mair, Tony Sweeney, Daniel Thalmann,\nand Nadia M. Thalmann. Entertainment applications of virtual environments. In Kay M. Stanney,\neditor, Handbook of Virtual Environments, pages 1143\u20131166. Lawrence Erlbaum Associates, New\nJersey, 2002.\n22\n[3] John T. Bell and H. Scott Fogler. Implementing virtual reality laboratory accidents using the\nHalf-Life game engine, WorldUp, and Java3D. In 2003 American Society for Engineering\nEducation Annual Conference & Exposition. American Society for Engineering Education, 2003.\n[4] Kristopher J. Blom and Steffi Beckhaus. Supporting the creation of dynamic, interactive virtual\nenvironments. In Stephen N. Spencer, editor, ACM Symposium on Virtual Reality Software and\nTechnology (VRST 2007), pages 51\u201354, California, USA, 2007. ACM.\n[5] Doug A. Bowman, Ernst Kruijff, Joseph J. LaViola Jr., and Ivan Poupyrev. 3D User interfaces:\nTheory and Practise. Addison Wesley, USA, 2005.\n[6] L. Enochsson, B. Isaksson, R. Tour, A. Kjellin, L. Hedman, T. Wredmark, and L. Tsai-Fella\u00a8nder.\nVisuospatial skills and computer game experience influence the performance of virtual endoscopy.\nJournal of Gastrointestinal Surgery, 8(7):874\u2013880, 2004.\n[7] Andreas Frey, Johannes Hartig, Andre\u00b4 Ketzel, Axel Zinkernagel, and Helfried Moosbrugger. The\nuse of virtual environments based on a modification of the computer game Quake III Arena in\npsychological experimenting. Computers in Human Behaviour, 23:2026\u20132039, 2007.\n[8] E. R. Galea and J. M. Perez Galparsoro. A computer-based simulation model for the prediction of\nevacuation from mass-transport vehicles. Fire Safety Journal, 22:341\u2013366, 1994.\n[9] Erik Guilfoyle. Half-Life 2 Mods for Dummies. Wiley Publishing, Inc, 2007.\n[10] S. Gwynne, E. R. Galea, P. J. Lawrence, and L. Filippidis. Modelling occupant interaction with fire\nconditions using the buildingEXODUS evacuation model. Fire Safety Journal, 36:327\u2013357, 2001.\n[11] S. Gwynne, E. R. Galea, M. Owen, P. J. Lawrence, and L. Filippidis. A review of the\nmethodologies used in the computer simulation of evacuation from the built environment. Building\nand Environment, 34:741\u2013749, 1999.\n[12] C. W. Johnson. Using evacuation simulations to ensure the safety and security of the 2012\nOlympic venues. Safety Science, 46(2):302\u2013322, 2008.\n[13] C. W. Johnson and L. Nilsen-Nygaard. Extending the use of evacuation simulators to support\ncounter-terrorism: Using models of human behaviour to coordinate emergency responses to\nimprovised explosive devices. In R. J. Simmons, D. J. Mohan, and M. Mullane, editors,\nProceedings of the 26th International Conference on Systems Safety, Vancouver, Canada 2008,\nUnionville, VA, USA, 2008. International Systems Safety Society.\n23\n[14] G. Drew Kessler. Virtual environment models. In K. M. Stanney, editor, Handbook of Virtual\nEnvironments, pages 255\u2013276. Lawrence Erlbaum Associates, New Jersey, 2002.\n[15] S. Ko, M. Spearpoint, and A. Teo. Trial evacuation of an industrial premises and evacuation\nmodel comparison. Fire Safety Journal, 42:91\u2013105, 2007.\n[16] Blazej Kot, Burkhard Wuensche, John Grundy, and John Hosking. Information visualisation\nutilising 3D computer game engines case study: A source code comprehension tool. In 6th ACM\nSIGCHI New Zealand chapter international conference on computer-human interaction (CHINZ\n2005), pages 53\u201360. ACM, 2005.\n[17] John E. Laird. Research in human-level AI using computer games. Communications of the ACM,\n45(1):32\u201335, 2002.\n[18] George Lepouras and Costas Vassilakis. Virtual museums for all: employing game technology for\nedutainment. Virtual Reality, 8:96\u2013106, 2005.\n[19] Michael Lewis and Jeffrey Jacobson. Game engines in scientific research. Communications of the\nACM, 45(1):27\u201331, January 2002.\n[20] S. M. Lo, H. C. Huang, P. Wang, and K. K Yuen. A game theory based exit selection model for\nevacuation. Fire Safety Journal, 41:364\u2013369, 2006.\n[21] Michael N. Louka and Claudio Balducelli. Virtual reality tools for emergency operation support\nand training. In Proceedings of TIEMS (The International Emergency Management Society), Oslo,\nJune 2001.\n[22] B. Mac Namee, P. Rooney, P. Lindstrom, A. Ritchie, F. Boylan, and G. Burke. Serious Gordon:\nUsing serious games to teach food safety in the kitchen. In 9th International Conference on\nComputer Games: AI, Animation, Mobile, Educational & Serious Games CGAMES06, 2006.\n[23] Tim Marsh and Peter Wright. Co-operative evaluation of a desktop virtual reality system. In S. P.\nSmith and M. D. Harrison, editors, Workshop on User Centered Design and Implementation of\nVirtual Environments, pages 99\u2013108. The University of York, 1999.\n[24] Thiago Tinoco Pires. An approach for modeling human cognitive behavior in evacuation models.\nFire Safety Journal, 40:177\u2013189, 2005.\n[25] George V. Popescu, Grigore C. Burdea, and Helmuth Trefftz. Multimodal interaction modelling.\nIn K. M. Stanney, editor, Handbook of Virtual Environments, pages 435\u2013454. Lawrence Erlbaum\nAssociates, New Jersey, 2002.\n24\n[26] Salvador Casadesu\u00b4s Pursals and Federico Garriga Garzo\u00b4n. Optimal building evacuation time\nconsidering evacuation routes. European Journal of Operational Research, 192:692\u2013699, 2009.\n[27] D. A. Purser and M. Bensilum. Quantification of behaviour for engineering design standards and\nescape time calculations. Safety Science, 38:157\u2013182, 2001.\n[28] T. X. Qin, Y. C. Guo, C. K. Chan, and W. Y. Lin. Numerical simulation of the spread of smoke in\nan atrium under fire scenario. Building and Environment, 44:56\u201365, 2009.\n[29] Aizhu Ren, Chi Chen, and Yuan Luo. Simulation of emergency evacuation in virtual reality.\nTsinghua Science and Technology, 13(5):674\u2013680, 2008.\n[30] Aizhu Ren, Chi Chen, Jianyong Shi, and Liang Zou. Application of virtual reality technology to\nevacuation simulation in fire disaster. In Hamid R. Arabnia, editor, Proceedings of the 2006\nInternational Conference on Computer Graphics and Virtual Reality, pages 15\u201321, USA, 2006.\nCSREA Press.\n[31] Genevie`ve Robillard, Ste\u00b4phane Bouchard, Thomas Fournier, and Patrice Renaud. Anxiety and\npresence using VR immersion: A comparative study of the reactions of phobic and non-phobic\nparticipants in therapeutic virtual environments derived from computer games. CyberPsychology\n& Behaviour, 6(5):467\u2013475, 2003.\n[32] Tzu-Sheng Shen. ESM: a building evacuation simulation model. Building and Environment,\n40:671\u2013680, 2005.\n[33] Tzu-Sheng Shen, Yu-Hsiang Huang, and Shen-Wen Chien. Using fire dynamic simulation (FDS) to\nreconstruct an arson fire scene. Building and Environment, 43:1036\u20131045, 2008.\n[34] Naai-Jung Shih, Ching-Yuan Lin, and Chih-Hsiang Yang. A virtual-reality-based feasibility study\nof evacuation time compared to the traditional calculation method. Fire Safety Journal,\n34:377\u2013391, 2000.\n[35] Mohd.Fairuz Shiratuddin and Walid Thabet. Virtual office walkthrough using a 3D game engine.\nInternational Journal of Design Computing, 4, 2002.\n[36] Mel Slater, Vasilis Linakis, Martin Usoh, and Rob Kooper. Immersion, presence and performance\nin virtual environments: An experiment with tri-dimensional chess. ACM Virtual Reality Software\nand Technology (VRST\u201996), pages 163\u2013172, 1996.\n[37] Shamus P. Smith and David J. Duke. Binding virtual environments to toolkit capabilities.\nComputer Graphics Forum, 19(3):C\u201381\u2013C\u201389, 2000.\n25\n[38] Shamus P. Smith and Sam Du\u2019Mont. Measuring the effect of gaming experience on virtual\nenvironment navigation tasks. 2008. Submitted.\n[39] Shamus P. Smith and Jonathan Hart. Evaluating distributed cognitive resources for wayfinding in\na desktop virtual environment. In Y. Kitamura, D. Bowman, B. Fro\u00a8hlich, and W. Stu\u00a8rzlinger,\neditors, IEEE Symposium on 3D User Interfaces 2006, pages 3\u201310. IEEE, 2006.\n[40] Shamus P. Smith and Susan Todd. Usability evaluation of a haptic-based clinical skills training\nsystem. International Journal of Clinical Skills, pages 39\u201344, 2008.\n[41] Chieh-Hsin Tang, Wu-Tai Wu, and Ching-Yuan Lin. Using virtual reality to determine how\nemergency signs facilitate way-finding. Applied Ergonomics, 2008.\ndoi:10.1016\/j.apergo.2008.06.009.\n[42] David Trenholme and Shamus P. Smith. Computer game engines for developing first-person\nvirtual environments. Virtual Reality, 12:181\u2013187, 2008.\n[43] Peter C. Wright and Andrew F. Monk. A cost-effective evaluation method for use by designers.\nInternational Journal of Man-Machine Studies, 35(6):891\u2013912, 1991. Academic Press Ltd.\n[44] J. P. Yuan, Z. Fang, Y. C. Wang, S. M. Lo, and P. Wang. Integrated network approach of\nevacuation simulation for large complex buildings. Fire Safety Journal, 2008.\ndoi:10.1016\/j.firesaf.2008.07.004.\n[45] Weifeng Yuan and Kang Hai Tan. An evacuation model using cellular automata. Physica A,\n384(2):549\u2013566, 2007.\n[46] Maohua Zhong, Congling Shi, Xuwei Tu, Tairan Fu, and Li He. Study of the human evacuation\nsimulation of metro fire safety analysis in China. Journal of Loss Prevention in the Process\nIndustries, 21:287\u2013298, 2008.\n[47] Michael Zyda. From visual simulation to virtual reality to games. IEEE Computer, pages 25\u201332,\nSeptember 2005.\n10 Figure Captions\nFigure 1: Virtual model view (left) including fire entities and accompanying smoke and real world view\n(right) of a stairwell.\nFigure 2: The completed model geometry in the Hammer editor.\n26\nFigure 3: Virtual model (left) and real building (right) views of the Computer Science department.\nFigure 4: Average time taken in a scenario by participants of each experience level.\nFigure 5: Box plot summary of questionnaire results.\n27\n"}