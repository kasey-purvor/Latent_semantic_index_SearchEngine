{"doi":"10.1109\/ICEBE.2005.33","coreId":"66642","oai":"oai:dro.dur.ac.uk.OAI2:642","identifiers":["oai:dro.dur.ac.uk.OAI2:642","10.1109\/ICEBE.2005.33"],"title":"Business integration models in the context of web services.","authors":["Song, W.","Chen, D.","Chung, J-Y."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":["Chen, G.","Chung,  J-Y.","Ni, L."],"datePublished":"2005-10","abstract":"E-commerce development and applications have\\ud\nbeen bringing the Internet to business and marketing\\ud\nand reforming our current business styles and\\ud\nprocesses. The rapid development of the Web, in\\ud\nparticular, the introduction of the semantic web and\\ud\nweb service technologies, enables business\\ud\nprocesses, modeling and management to enter an\\ud\nentirely new stage. Traditional web based business\\ud\ndata and transactions can now be analyzed,\\ud\nextracted and modeled to discover new business\\ud\nrules and to form new business strategies, let alone\\ud\nmining the business data in order to classify\\ud\ncustomers or products. In this paper, we investigate\\ud\nand analyze the business integration models in the\\ud\ncontext of web services using a micro-payment\\ud\nsystem because a micro-payment system is\\ud\nconsidered to be a service intensive activity, where\\ud\nmany payment tasks involve different forms of\\ud\nservices, such as payment method selection for\\ud\nbuyers, security support software, product price\\ud\ncomparison, etc. We will use the micro-payment case\\ud\nto discuss and illustrate how the web services\\ud\napproaches support and transform the business\\ud\nprocess and integration model.","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66642.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/642\/1\/642.pdf","pdfHashValue":"ba26cd799af246da03de3d2b4bfe018a256623d0","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:642<\/identifier><datestamp>\n      2010-11-08T14:14:29Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Business integration models in the context of web services.<\/dc:title><dc:creator>\n        Song, W.<\/dc:creator><dc:creator>\n        Chen, D.<\/dc:creator><dc:creator>\n        Chung, J-Y.<\/dc:creator><dc:description>\n        E-commerce development and applications have\\ud\nbeen bringing the Internet to business and marketing\\ud\nand reforming our current business styles and\\ud\nprocesses. The rapid development of the Web, in\\ud\nparticular, the introduction of the semantic web and\\ud\nweb service technologies, enables business\\ud\nprocesses, modeling and management to enter an\\ud\nentirely new stage. Traditional web based business\\ud\ndata and transactions can now be analyzed,\\ud\nextracted and modeled to discover new business\\ud\nrules and to form new business strategies, let alone\\ud\nmining the business data in order to classify\\ud\ncustomers or products. In this paper, we investigate\\ud\nand analyze the business integration models in the\\ud\ncontext of web services using a micro-payment\\ud\nsystem because a micro-payment system is\\ud\nconsidered to be a service intensive activity, where\\ud\nmany payment tasks involve different forms of\\ud\nservices, such as payment method selection for\\ud\nbuyers, security support software, product price\\ud\ncomparison, etc. We will use the micro-payment case\\ud\nto discuss and illustrate how the web services\\ud\napproaches support and transform the business\\ud\nprocess and integration model..<\/dc:description><dc:subject>\n        Business integration model<\/dc:subject><dc:subject>\n         Ontologies<\/dc:subject><dc:subject>\n         Micro-payment<\/dc:subject><dc:subject>\n         Semantic description framework.<\/dc:subject><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n        Chen, G. & Chung,  J-Y. & Ni, L. (Eds.).  IEEE International Conference on e-Business Engineering, ICEBE 2005, 12-18 October 2005, Beijing  ; proceedings. Los Alamitos, CA: IEEE, pp. 697-704<\/dc:source><dc:contributor>\n        Chen, G.<\/dc:contributor><dc:contributor>\n        Chung,  J-Y.<\/dc:contributor><dc:contributor>\n        Ni, L.<\/dc:contributor><dc:date>\n        2005-10<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:642<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/642\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/ICEBE.2005.33<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/642\/1\/642.pdf<\/dc:identifier><dc:rights>\n        \u00a9 2005 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2005,"topics":["Business integration model","Ontologies","Micro-payment","Semantic description framework."],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n01 November 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nSong, W. and Chen, D. and Chung, J-Y. (2005) \u2019Business integration models in the context of web services.\u2019,\nin IEEE International Conference on e-Business Engineering, ICEBE 2005, 12-18 October 2005, Beijing ;\nproceedings. Los Alamitos, CA: IEEE, pp. 697-704.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/ICEBE.2005.33\nPublisher\u2019s copyright statement:\n2005 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for\nadvertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists,\nor to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nBusiness Integration Models in the Context of Web Services \nWilliam Song1*, Deren Chen2, Jen-Yao Chung3\n1\n Computer Science, Durham University, Durham, UK \n2\n Computer Science, Zhejiang University, Zhejiang, China \n3 IBM T.J. Watson Research Center, New York, USA \nw.w.song@dur.ac.uk , drchen@zju.edu.cn, jychung@us.ibm.com \n*\n The corresponding author: Address. Computer Science, University of Durham, South Road, DH1 3LE, Durham, UK, Tel. +44-\n191 334 1729, Fax. +44-191 334 1701, Email. w.w.song@dur.ac.uk. \nAbstract \nE-commerce development and applications have \nbeen bringing the Internet to business and marketing \nand reforming our current business styles and \nprocesses. The rapid development of the Web, in \nparticular, the introduction of the semantic web and \nweb service technologies, enables business \nprocesses, modeling and management to enter an \nentirely new stage. Traditional web based business \ndata and transactions can now be analyzed, \nextracted and modeled to discover new business \nrules and to form new business strategies, let alone \nmining the business data in order to classify \ncustomers or products. In this paper, we investigate \nand analyze the business integration models in the \ncontext of web services using a micro-payment \nsystem because a micro-payment system is \nconsidered to be a service intensive activity, where \nmany payment tasks involve different forms of \nservices, such as payment method selection for \nbuyers, security support software, product price \ncomparison, etc. We will use the micro-payment case \nto discuss and illustrate how the web services \napproaches support and transform the business \nprocess and integration model. \n1. Introduction \nUse of the Internet has reshaped people\u2019s life in \nmany ways. At the beginning, people use the Web as \na huge information repository to search for what they \nneed. Nowadays, people do much more on the Web. \nThey advertise, they publish articles, they play \ngames, they go shopping, and they even gamble. Two \ndecades ago, people started doing business through \nthe Internet. EDI (electronic data exchange) has been \na standard for transferring data between two large \nenterprises involved in business transactions. \nNowadays, the Internet and the Web are reshaping \npeople\u2019s business life. These terms, like e-commerce, \ne-procurement, e-payment, e-marketplace, have \nillustrated a large number of different requirements, \nwhich need to be met in various e-business models \nand technologies [9]. In this paper, we attempt to \ninvestigate the business process and models in the \ncontext of web services. \n1.1. Business process and integration model \nThe rapid development of the Web, in particular, \nthe introduction of the semantic web and web service \ntechnologies enables business processes, models, and \npatterns to enter an entirely new stage. Traditional \nweb based business data and transactions can now be \nextracted and modeled to discover business rules and \nbusiness strategies, let alone mining the business data \nin order to classify customers or products. \nA nowadays business model is a very complicated \nsystem which, in general, consists of information \nprocessing, collaborative work, enterprise analysis, \nand service management. These components \nrepresent a horizontal view of the business structure, \nwhile the service management component itself also \nprovides a refinement mechanism that can be roughly \nexpressed in three intersectional facets in vertical \ndimension, that is, business level, component level, \nand functional level. At the business level, we \ndescribe general business objectives and \nrequirements. At the component level we refine the \nbusiness objectives into a number of concepts or \nprocesses, which are modeled in information system \ndevelopment. These concepts or processes can be \nfurther decomposed. At the functional level, we focus \non mainly on implementation issues. The high level \ncomponents are now described in various functions \nand programming modular. \nMost of the web services components are those of \nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \nconcepts, processes, or functions. For example, the \nservices, described in OWL-S, have an ontology, \nwhich contains service profile, service process, and \nservice grounding. Here the service profile provides \nthe concepts describing the service, such as business \ncontacts, the service process describes how the \nservice works (including input and output \nparameters), which is very close to function \ndescription of the service [8]. Another issue proposed \nin [11] suggests viewing software components as \nservices. This concept is significant in the sense of \nmodeling, communicating, and composing services. \nHowever, it is quite difficult to build up a repository \nto manage this huge number of software components. \nThe induction of the semantic web methodology, \nsuch as ontology definition, gives us a powerful tool \nto describe the meaning of business processes, \nbusiness structures, and business rules. It is more \nuseful to build up various specific ontologies for \nbusiness objects within a business organization, such \nas personnel, products, and management hierarchies. \nFor example, to model the access rights for business, \nRBAC has been produced [2]. \n1.2. Web service issues \nWeb Service is a piece of software that makes \nitself available over the Web and uses a standardized \nXML messaging system [1]. Its significance lies in \ncomposition of software for various purposes for \nusers who attempt to accomplish certain tasks with \nthe composed services through the Web. A web \nbased application system requires various software \ncomponents, such as security supporting programs \nand payment methods, to work together to \naccomplish the required tasks. In other words, it is \nrequired that a dynamic construction of various \nrelated services and software be performed to meet a \nparticular user\u2019s specific need. \nMany pieces of such software exist in the Web. \nThe Web Services methods provide various \nsupporting facilitates to describe the software for \nsharing and reuse. Among others, there are two issues \nsignificant for a web based application system \ndevelopment. The first is service description and \nselection of software components. Web Service \nDescription Language (WSDL) and Universal \nDescription, Discovery, and Integration (UDDI) are \nproposed standards for software component \ndescription. The purpose of the description is for the \nusers to select the right and suitable software \ncomponents. The second is service integration or \ncomposition of the selected software components. \nThe integration issue is based on the service \ndescription. During the integration process, the \nservice components, which fit together to serve the \nusers requirements, are composed to form the unified \nsoftware for particular tasks. \nIn this paper, a web based application system, the \nmicro-payment system, is a software and service \nintensive activity, where many payment tasks involve \ndifferent forms of services, such as payment method \nselection for buyers, security support software, \nproduct price comparison, etc. Using the web service \ntechnology will great enhance the quality and \nperformance of the micro-payment system. \n1.3. Business model for micro-payments \nA key business issue to apply the micro-payment \ntechniques in the context of web services is that more \nand more services distributed over the Web will be \norganized dynamically to meet a given task by a user. \nThese services are comprised by a collection of \nsoftware components or functions from various \nsources. Together with the data and resources \nprovided (and changed) by the content\/service \nproviders, the services or software pieces will be also \ncharged. For example, a customer may like to know \nthe one day cost for her mobile phone when she was \nabroad.\nCurrently, the description of a service mainly \nfocuses on its simple semantic description and \nontology using UDDI, and profiles and processes \nusing WSDL. While payment is concerned, a suitable \ndescription for services in terms of business \nprocesses and transactions is dispensable. In [4], \nBPEL4WS has been developed for description of \nbusiness processes for web services. However, to \nimplement semantic description in web services \nmodeling and hence to represent the business \nobjectives and transactions is crucial because we \nneed to compose web services to form a greater task \nfor a given goal where the description for payment is \nconsidered to be a dynamic part of the composition \nprocess of web services. \n1.4. Paper overview \nThe paper is organized as follows. In the next \nsection, we describe general business integration \nmodel, focusing on business integration model, \nbusiness ontologies, and integration issues. Then, in \nsection 3, we describe the case of micro-payment, \ndiscussing its procedure, system, and components. \nWe will also discuss what the business process model \nissues are considered. In section 4, the web service \napproaches to the business model of micro-payment \nsystem are discussed, where we propose some \nbusiness service patterns and semantic description \nmodel for micro-payment systems. Finally we \nconclude the paper in section 6 by proposing our \nfuture work in this direction. \nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \n2. The business integration model \nAccording to [4], a business process model can be \nviewed to be a formal definition of composing \nobjects, which provides the description of the \nbehavior and interactions of a process instance \nrelative to its partners and resources through Web \nservices interfaces. It provides a standard XML \nlanguage to express business processes consisting of \nfunctions defined. The business process model \nconsiders both design and runtime uses. At design \ntime, development or modeling tools can use, import, \nor export the proposed models and objects, allowing \nbusiness analysts to specify processes and developers \nto refine them and bind process steps to specific \nservice implementations. At the runtime, its business \nworkflow engine can use the models and objects to \ncontrol the execution of processes, and invoke the \nservices required to implement them. \nFrom the viewpoint of business integration, the \nbusiness process model describes a set of \nrequirements for an integration framework that \nenables the high level requirements and the low level \nfunctions to match each other. Through web services \nsupport, a business process can be effectively \nmapped into their functions via a logical process \nmodel. The business process can be exported and \ntranslated into the business workflow and functions, \nwhich are further implemented as web services. In a \ndistributed environment, web services are used to \nenable the business integration technology, so un-\ninteroperable software components can work \ntogether. \nOne of the goals of web services is universal \ninteroperability between applications by using web \nstandards. The Business Integration technology can \nbe used for this purpose, to deliver a loosely coupled \nintegration model, allowing flexible integration of \nheterogeneous systems within an enterprise or in a \nvariety of domains, including a business-to-business \nor business-to-consumer process model. \n2.1. Business integration model \nThe business integration consists of four \ncomponents, Information processing, Collaboration, \nEnterprise modeling, and Service self-management, \nwhich can be further decomposed into business \nfunctions. These four components are generally \ndescribed as follows: \no Information processing component is to handle \nvarious sources of data from the service \nproviders and aggregate the data for the end \nusers. The Web services technology will be \nused to make the content of the data available to \nthe customers. \no Collaboration component is to deal with the \nindividuals, programs, and organizations to \nwork together to make payment transactions \ndone. Access controls and management are the \nkey issue, which should be processed in the \nWeb Services infrastructure. \no Enterprise component is to handle the business \nprocesses, systems requirements, and basic \nservices for the payment systems. The entire \nbusiness value chain will be modeled and \nsupported by using the Web Service \ntechnology. \no Service self-management component is to deal \nwith all the services that provide support to the \nabove three components. The services will be \nselected and integrated based on the availability \nand on-demand principles. \n2.2. Ontologies \nAs depicted in Fig. 1, the business ontology group \ncontains four specific ontologies, which inherit the \ncharacteristics from the upper level ontology. These \nfour ontologies, described below, attempt to \nrepresent various dimensions in a business process \nand integration model. \no Service ontology provides various ontologies \nfor the application domains. These domain \nontologies vary from one application to another. \nFor example, payment service has its own \npayment ontology, while messaging service \nprovides its specific messaging ontology. \no Task ontology provides conceptual description \nfor various flows, which express the \nrelationships between business tasks and their \nsub-tasks. \no Organization ontology describes structural \nconceptions and relationships. It contains \ndepartmental issues, personnel issues, across-\norganizational issues, and various internal and \nexternal agent issues. \no Economy and finance ontology is actually a \nspecific ontology for our application case, the \nmicro-payment system. Its aim is to indicate \nthat it is the business ontology beyond the \nbusiness domain. \nPayment service \nontology\nMessage service\nontology\nTask \nontology\nService\nontology\nEconomy\/finance\nontology\nOrganization\nontology\nUpper  level\nontology\nSpecializes\nContributes\nFig. 1 Ontology group for web based business \nsystem \nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \n2.3. Integration issues \nThe integration issues involve the following four \naspects, i.e., platform integration, ontology \nintegration, virtual organization, and metadata model \nintegration. \no Platform integration deals with integration of \nvarious platforms, such as e-Wallet in mobile \ndevices, server-managers, and web service \ninterfaces. \no Ontology integration considers different views \nrepresented in different ontologies. Examples of \nthese ontologies, include these given in the \nabove section. \no Virtual organization indicates a collaborative \nwork required in order to accomplish a given \ntask. For example, a payment transaction may \nneed to co-use the micro-payment method and \ncredit card payment method. \no Metadata model integration copes with different \nrepresentations of business requirements and \nfunctions due to using different metadata \nmodeling languages, such as RDF, OWL, \nWSRF, WML. \n3. Case Study: a Micro-payment system \nLet us consider how a micro-payment system \nworks, see Fig. 2. We assume that all transactions \ntake place over the Internet. Similar to ordinary \nmarketplace, where people visit, select, and buy \nthings, now we have an electronic marketplace. You \ncan enter the e-marketplace, choose what you want \nand pay for them. Consequently, there are at least \ntwo basic components. One is a collection of goods \n(probably services or pieces of information) in the e-\nmarketplace. The other is a wallet holding some \nmoney (usually small amount) enabling you to pay \nfor your purchase. This wallet is called electronic \nwallet or e-wallet. As a matter of fact, there are \nanother three parties involved in the e-marketplace \nand micro-payment. The first one is Internet Service \nProviders (ISPs), which enable you to connect to the \nInternet, such as telecom companies. The second one \nis Internet Content Providers (ICPs), which provide \nproducts, goods, services, or other items for buyers \n[3, 6]. The third one is a bank or a financial unit to \ncertify the wallet you hold is valid and has a certain \namount of electronic cash (e-money). \n3.1. System structure \nA micro-payment system consists of these \ncomponents: an e-wallet, a billing system at \nISP\/bank, and a billing system at merchant. In the \nfollowing, we describe these components and their \nconnections. \nThe e-wallet component itself has three parts: an \nInternet connection to ISP and ICP, a small billing \nmechanism, and an interactive interface. The Internet \nconnection allows it to access the required certificate \ndata from ISP or a bank (of course, ISP has already \nprovided the user the Internet services) when \nnecessary, and to ICP for shopping. The small billing \nmechanism (compared with the large billing system \nmaintained at the ISP side) lets the user know how \nmuch he has spent and how much left in the e-wallet. \nThe mechanism also provides a list of items the user \nhas bought and other related information. The \ninteractive interface allows the user to communicate \nwith the system, for example, login messages. \nFig. 2 Payment flow in a micro-payment system \nThe billing system at the ISP side performs three \ntasks. First, it provides the certificate of the valid e-\nwallet to ICP or transfers such certificate from a bank \nto ICP. Second, it maintains all the users\u2019 billing \nrecords. Third, it periodically checks the customers\u2019 \ne-wallets and billing records. \n The billing system at the ICP side performs two \ntasks. First, it maintains its own billing records for \ndifferent customers. So it can report to and get \nredeemed from the ISP. Second, it manages all the \nitems sold and for sale. \n3.2. Transaction flows \nIn this section, we describe a collection of \npossible certificate transactions between the micro-\npayment parties. See Fig. 3. First of all, we assume \nthat the buyer\u2019s wallet, which has been initially \ncertified by the ISP or bank, holds some e-money. \nThis is called pre-certify payment.  When a buyer has \nchosen some item to buy, by a click of payment, he \nissues a \u201ccertify payment\u201d to ICP. Then ICP sends a \nmessage of \u201ccertify check\u201d to ISP. This is the first \nround of certificate, from buyer, to ICP, and to ISP. \nISP checks the buyer\u2019s ID and the amount the \nbuyer has in his wallet. If the buyer\u2019s ID is correct \nand the amount is sufficient for this payment, the ISP \nsends a message \u201ccertify reply\u201d back to the ICP. This \nis the second round of certificate, from buyer, to ISP, \nE-MarketBuyer\/Wallet\nICPsISPs\nProvide Internet ServicePre-Certify\nPayment\nSupply content\nShopping\nDeposits\nCertify Payment\nBank\/\nFinancial Units\nCertify Payment\nCertify Payment*\nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \nand to ICP. When the ICP gets \u201cyes\u201d from the ISP, it \ndelivers the item to the buyer. \nDuring the second round, the ISP, in this order, \nupdates the billing records at the buyer\u2019s wallet, its \nown billing records, and the ICP\u2019s billing records. \nIf the buyer\u2019s ID is wrong or the amount is not \nsufficient, the ISP will send messages to both the \nbuyer and the ICP, informing \u201cno certify reply\u201d. \nFig. 3 Transaction flow among Micro-Payment \ncomponents\n3.3. Payment description \nIn the micro-payment system, data transfer \nthrough the Internet is most important. Therefore, \nhow to describe the transferring data so that such \ndescription can meet the current and future \nrequirements of the Internet data exchange and \nmaintenance is critical. Since W3C proposed XML \nto be a standard for various data representation in the \nWeb, XML has been widely accepted and used for \ndescription of a great variety of the Web resources. \nXML has the advantages of extensibility, separation \nof content from presentation, strict syntax, well-\nformedness, etc. \nRecently, based on the XML specifications, a \nparticular markup language specification for \ndescribing micro-payment is proposed to W3C [15]. \nThis specification provides an extensible way to \nembed in a Web page all the information necessary \nto initialize a micro-payment (amounts and \ncurrencies, payment systems, etc). This embedding \nallows different micro-payment electronic wallets to \ncoexist in an interoperable manner. \nThis specification defines a set of tags for \ndescription of payment related information to be \ntransferred on the Web. \n3.4. Business process in Micro-payment \nThe micro-payment system provides us a good \ncase where various business issues have occurred. \nFrom the end users (such as buyers) and the experts \nin the finance domain, the requirements for the \nsystem are usually very general, informal, and less \nprecise but very critical and essential. These \nrequirements directly motivate business process and \nhigh-level service description, as well as various \nsubjects and concepts, on one hand. \nOn the other hand, the micro-payment system \ndevelopment requires a large number of existing and \nreusable software components and data sources. \nThese software components and data sources are \navailable in various types of services via the web. An \neffective description framework for the business \nintegration model is indispensable because we need \nthese services to match our goals and these services \nmust be coupled and integrated together in order to \naccomplish a given task. \nStill another aspect is the middle level \nrequirements and description, which is also modeled \nusing the business process and integration model. In \nthis model, we need to specify the business tasks and \nworkflows, which are representing the general users\u2019 \nrequirements and objectives, embodying the business \nstrategies, structure, and natures, and motivating the \nfunctional and dynamic requirements and \nspecifications for the software components and data \nstructures. \nIn brief, from the micro-payment case, it is quite \nobvious that the business process and integration \nmodel with web services mechanism is required to \ndescribe a vertical business refinement process as \nwell as a horizontal integration process. In the next \nsection, we will discuss how these issues are coped \nwith under the web services. \n4. Web Service in the business model of \nmicro-payment \nIn this section, we will discuss how web services \nwill support the business process and integration \nmodel in the micro-payment case. Micro-payment is \na complex, software component based, distributed \nsystem. It involves different parties for different \nfunctions. To accomplish one micro-payment \ntransaction, many services are required, such as \nsetting up appropriate security channels, checking the \npayer\u2019s identity, making daily purchase records. \nThese business services form different patterns [12], \nserving different users\u2019 requirements and purposes. \nIn order to describe the businesses and services in a \nsemantic rich manner, we need to build up a semantic \ndescription framework for the business services. This \nframework is also used to describe the end user\u2019s \nrequirements and profile. In the following we will \nfirst discuss the semantic description framework for \nweb services, and then illustrate the three aspects of \nbusiness services: business combination patterns, \nsemantic description, and requirements matching. \n4.1. Semantic description framework \nThe proposed semantic description framework \nmodel, based on the W3C recommendation \u2013 RDF \nBuyer\/Wallet\nICPs\nISPs\nID CheckPre-Certify\nPayment*\nCertify Check\nCertify Payment*\nPay CheckID Reply\nCertify Reply\nPay Reply\nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \nand RDFS, contains the following components: a \ncharacteristic based semantic description modeling \ncomponent for representing the businesses and \ngeneral services; a process based description \nmodeling component for expressing service functions \nand processes; a structured requirement modeling \ncomponent to represent the end users\u2019 requirements \nand requests, as well as their profiles. In addition, we \nalso use an ontology model for representing the \nbusiness ontology and service ontology, where the \ndomain knowledge is structurally expressed. \nThe semantic description framework contains \nthree major components: a semantic descriptor, a \npattern constructor, and a user request formation. The \nsemantic descriptor is for business, service, and \nfunction description. As we discussed earlier, \nbusiness description specifies business services and \nservices specifies service functions. In addition, \nontology support for general business and service is \nalso maintained within this component. \nThe pattern constructor uses the service and \npattern repository to collect the matched services \ndiscovered through matchmaking and semantic \nmapping mechanism to form the three services \npatterns, integration, aggregate, and composite. For \nthe integration pattern, the service function \ndescription will be critical because to couple \ndifferent services together to form a chain of services \nfor a specific purpose requires accurate function \nspecifications. \nFig. 4 The integrated architecture for services \nThe user request formation is to apply the criteria \nsupplied from the semantic description framework \nand the ontology structure to re-structure the user \nrequests, so that the requests will bring more \nsemantics for later matchmaking with the service \ndescription within the registry component. Currently \nwe are developing a graph matching algorithm, in \nwhich a user request is seen as a sub-graph and the \nservice description schema is considered to be a big \nservice graph [7]. \n4.2. Business combination patterns \nIn a payment environment, the users are using a \nnumber of payment services, for example pay-by-e-\ncash, pay-by-e-wallet, pay-by-e-card, or using \npayment services provided by different service \nproviders. Each payment method can be decomposed \ninto a number of services. These services and sub-\nservices will work together in one way or another to \nmeet the users\u2019 requirements. These working ways \nare considered to follow certain kind of service \npatterns. \nService patterns suggest some forms that services \nare organized to serve certain purposes or to \naccomplish certain tasks. Such form or model is \npeculiarly significant in the situations where many \ndistributed services are linked, integrated, \ncoordinated, and cooperated together with their data \nsources and even human power sources for achieving \na tremendous target. These situations or \norganizations are called \u201cvirtual organization\u201d. \nThese service patterns can be considered to be in \nthese three forms, a service integration pattern, a \nservice aggregate pattern, and a service composite \npattern. The service integration pattern maintains a \nset of services or software which is organized in \nparallel. When a service request comes, a \u201cbroker\u201d \nchecks the requirements of the request and finds a \nmost suitable one to meet the request. To the users, it \nappears as if there were only one service, for \nexample, payment service, that the users need to \nknow.  \nThe service composite pattern has been widely \ndiscussed and is mainly considered to be a line of \nservices. Each service is dependent on its preceded \nservice to provide inputs and supplies outputs to its \nfollower. A special situation is that one service may \nrequest or call another service in order to fulfill its \nown tasks. The key issue here is dynamic composite \nof services with a secure or fault torrent mechanism. \nThe service aggregate pattern indicates the \nsituations where a set of services available but one of \nthem is selected according to the users\u2019 requirements. \nThese services almost serve the same purposes and \ndo the same functions. Their difference may lie in for \nexample, low cost but light security support, better \nusability but less functionality, etc. This pattern \nemphasizes more on service availability whereas the \ncomposite pattern focuses on-demands. \nHow to develop these business patterns for \npayments is heavily dependent on a good semantic \ndescription method, which can provide rich \nsemantics for services and better information \nexchange through the Web. The aim to propose these \npatterns is to suggest some business models of \npayments that better serve the users with web service \ntechniques. \n4.3. Service description \nAccording to the triangle architecture for web \nservices [13, 14], a web service involves three \nBusiness\nActivity\nBusinesses\nDescription\nServices\nDescription\nFunctions\nDescription\nIntegration\nPatterns\nComposite\nPatterns\nAggregate\nPatterns\nMicro-Payment\nRequestsSecurity\nRequests\nAccounting\nRequests\ne-Wallet\nISP\nICP\nService & Patterns\nRepository\nSemantic\nFormulation\nSemantic\nMapping\nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \nparties, a registry where the service is registered and \n\u201cdescribed\u201d, a service provider that also provides \nservice specifications, a service consumer or user that \nmakes service request together with sort of service \ndescription. The service description mainly contains \nbusiness description and service description. The \nbusiness description is about the business situation of \nthe service provider and the service description is \nabout the services that the business is providing. The \nproposed semantic description framework aims at \nimproving the business services with richer semantics \nfor better matching between the users requirements \nand the service description. \nPayment service description. We attempt to \nmaintain a semantic description framework to \nprovide full description for a payment service. The \nframework will include a static part, which describes \ngeneral transactions methods and general payment \nprocesses, and a dynamic part, which stipulates \noperations such as match bindings, etc. Following is \nan example of the semantic description framework \n(static part) for payment transaction. \nA transaction object includes transaction ID, \ntransaction description, transaction properties, and \ntransaction ontology. Transaction ID is the unique \nnumber for the transaction, which is used to identify \nthe transaction. Transaction Description is a short \ndescription for the transaction for human \nunderstanding and NL semantic processing. \nTransaction Properties are RDF based description for \nthe transaction. The properties include, for example, \nname, relationships with other transactions, \ntransaction types, etc. Transaction ontology describes \na set of hierarchical structures, such as conceptual \ntaxonomy, process hierarchy structure, etc. \nIn Fig. 5, we illustrate a payment object with its \ndescription elements.  The description is based on \nRDF. The pay object is related to a number of values \nthrough the properties like \u201cFrom\u201d and \u201cTo\u201d. It is \nalso related to a function property, called \u201cPAY\u201d. \nThe object is about a \u201cprevious\u201d payment, which \nincludes the payment amount, payment methods and \nsecurity requirements. The above description \nfragment is, however, our first attempt to formalize \nthe description for payment transactions. \nFig. 5 A description model for payment object \nService function description. Service function is \ncurrently not well very described part within service \ndescription but it is a useful part for improving the \nuser requirement matches. As it is difficult for a \nbusiness to provide a description of its services \nmeeting some normalized form, they are in most \ncases written in natural languages with very informal \nstructures. In our framework, we also propose a \nformal specification for service function description. \nThis formal description mainly concerns that the \nservices accomplish what tasks, perform what \nprocesses, possess what features, and involve what \nother processes and services. For example, the \nfunctions for a payment service include access \nchecking, identity verification, accounting, clearance, \netc.\nUser request description. As a most important \nparty in business service, the users description will \nheavily influence the quality of requirement \nmatching. However, this work is now still left to the \nend users. The end users have to input some \nkeywords and select some ontology terms for an \napplication domain to a service registry in order to \nsearch for the services they request. In most cases, \nthe users do not know their exact requirements for \nservices and even do not know how to structurally \nform their requirements. Their expression of requests \ncan be very vague and ambiguous. To support the \nend users with their payment requests, for example, \nthe users\u2019 requirements can be transferred in a certain \nstructure together with their profiles. \nSuppose that a user wants to download a single \nsong from a Web-based music shop and pays 50 \ncents for it. The user may demand a payment service \nfor this transaction using his \u201ce-wallet\u201d and to be \n\u201csecure\u201d. His \u201ce-wallet\u201d provides e-cash, e-card, \nphone-bill account. By \u201csecure\u201d he means that a \nsecurity channel should be set in SSL. According to \nthese requirements, a payment service is searched \nagainst the service registry and a matchmaker \nmechanism is performed to find a best match. Here \nwe need to emphasize that to structure the users\u2019 \nrequirements and to use a semantic framework to \ndescribe the users\u2019 profile is extremely important. \nThe users\u2019 profile helps us with good understanding \nof \u201csecure\u201d.  \n4.4. Service integration \nInitially, the service integration process is to \nsearch and find the services from the service registry \naccording to the users\u2019 requests. However, the users\u2019 \nrequests are currently expressed only in terms of \nservice names or keywords. Many approaches have \nbeen proposed to enrich the semantics for the \nservices to meet the users\u2019 requirements [5, 7, 14]. \nThe main feature of the approaches is to introduce \nontological structure for description of services and \nbusinesses. For example, in order to provide more \nsemantic support to the description and search of \nservices in the service registry, a set of mapping rules \nPAY Object\nAmount Previous\namount currency Pay Method Security Demands\nFrom\nTo\nPAY\nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \ncan be established between the user query entries \ndescribed by the semantic description framework and \nthe service registry. Each service description item is \nalso mapped into a registry entry. The ontology \nmodel can be used to identify services and therefore \na richer semantic description for businesses and \nservices, as well as the users requirements can be \nachieved using the semantic framework. \nThe semantic description is useful also in \nmatching techniques, which are used for finding \nrequired services or selecting a best match among a \nnumber of service candidates. Currently, we are \ninvestigating a formal match method, which we call \ngraph match. Suppose that a and b are two service \nnodes with an edge ab indicating a possible \nrelationship, say, a depending-on b, between them \nand G is a service description schema. There may be \na sub-graph G\u2019 in G which contains nodes a and b, as \nwell as a chain of edges linking a and b, which \ncontains ab. With support from the semantic \nrelativity approach [11] and large number of services \navailable, this graph match technique will be more \neffective for selection of best services. \n5. Conclusion \nThrough an application case to analyze business \nmodels, we can see clearly the various components in \nthe business model. In this paper, we have generally \nproposed a business process and integration model \ninitiated by IBM [4] with a view of web services \ntechnology, which will extend the business \ninfrastructure. Through an analysis of the \ndevelopment of micro-payment we described some \nbusiness and service patterns for the business model \nof micro-payment system. We believe that with \ngradual deployment of web service techniques, \nbusiness integration model and its implementation \ncan be better achieved as web services will well \nbridge the gap between the general business \nrequirements and the descriptions of software \ncomponents and functions. \nHowever, as this is our initial investigation we \nhave realized that there are many holes in the model. \nFor instance, the stream of vertical refinement is \nunclear to us yet. We know, the process of turning a \ngeneral end users\u2019 requirement into a business \nprocess description is very difficult, let alone \ndefining a model or framework to introduce a formal \nand precise method for this process. Nevertheless, we \nconsider this is a move. \nOur next step is to study further business models \nwith web services and investigate how the web \nservices methodologies will support business process \nand integration. More concretely, we will pursue the \nwork in the following three aspects. First, we will \ndevelop a semantic based web service description \nmodel, which is able to cope with both high level \nrequirements and low level functions. Second, we \nintend to describe a workflow or business process in \nthis description model. Third, we will build a \nbusiness and service pattern repository where each \npattern corresponds to a pool of software components \nand functions. \nReferences \n[1] E. Cerami, Web Services Essentials \u2013 Distributed \nApplications with XML-RPC, SOAP, UDDI & WSDL,\nThe O\u2019Reilly Network, February 2002. \n[2] David Ferraiolo and Rick Kuhn, An Introduction to \nRole-based Access Control, NIST\/ITL Bulletin, \nDecember, 1995\n[3] A. Herzberg and H. Yochai, Mini-Pay: Charging per \nClick on the Web, in Proceedings of the sixth \nInternational Conference on WWW, 1997 \n[4] M. Keen, J. Cavell, S. Hill, C. K. Kee, W. Neave, B. \nRumph, H. Tran, BPEL4WS Business Processes with \nWebSphere Business Integration: Understanding, \nModeling, Migrating, IBM Redbooks, Dec. 2004 \n[5] M. Paolucci, T. Kawamura, T. R. Payne, K. Sycara, \nSemantic Matching of Web Services Capabilities in \nProc. of 1st First International Semantic Web Conference, \nSardinia, Italy, I. Horrocks, J. Hendler (Eds.)  June 9-12, \n2002.\n[6] R. Rivest and A. Shamir, PayWord and MicroMint: \nTwo simple micropayment schemes, in Proc. of 5th Int\u2019l \nConference on WWW, May, 1996, Paris, France. \n[7] W. Song, Semantic Issues in the Grid computing and \nWeb Services, in Proceedings of International Conference \non Management of e-Commerce and e-Government, \nNanchang, China, Oct. 2003\n[8] W. Song and Y. Zhang (2004), Semantic Description \nand Matching of Grid Services Capabilities, AHM2004, \nNottingham, UK\n[9] W. Song, D. Chen, J-Y. Chung, An investigation on \nusing web services for micro-payment, Proc. of \nEuropean Conference on Web Services, Erfurt, Germany, \n27-30 September, 2004, Lecture Notes in Computer \nScience Volume 3250 (2004)\n[10] W. Song, Semantic Object Relativity in Schema \nIntegration, in Proceedings of CAiSE, Utrecht, The \nNetherlands, 1994 \n[11] M. Turner, D. Budgen, and P. Brereton, Turning \nSoftware into a Service, IEEE Computer, October 2003 \n(Vol. 36, No. 10).\n[12] G. Vasudeva, Patterns for business, IBM White \nPaper, 2003. \n[13] L. Zhang, Q. Zhou, and J-Y. Chung, Developing Grid \ncomputing applications, IBM Report, IBM T.J. Watson \nResearch Center, New York, USA. \n[14] Y. Zhang, W. Song, K. Bennett, Semantic \nEnrichment for Web Service Description and \nMatchmaking, Department Report, Computer Science, \nUniversity of Durham, UK. 2004 \n[15] Thierry Michel, Common Markup for \nmicropayment per-fee-links, the World Wide Web \nConsortium Working Draft 25 August 1999. \nProceedings of the 2005 IEEE International Conference on e-Business Engineering (ICEBE\u201905) \n0-7695-2430-3\/05 $20.00 \u00a9 2005 IEEE \n"}