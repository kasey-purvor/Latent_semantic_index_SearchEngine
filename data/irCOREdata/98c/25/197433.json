{"doi":"10.4018\/jwsr.2011040103","coreId":"197433","oai":"oai:lra.le.ac.uk:2381\/9681","identifiers":["oai:lra.le.ac.uk:2381\/9681","10.4018\/jwsr.2011040103"],"title":"Using Markov Decision Process Model with Logic Scoring of Preference Model to Optimize HTN Web Services Composition","authors":["Xu, Jiuyun","Chen, Kun","Reiff-Marganiec, Stephan"],"enrichments":{"references":[{"id":43708697,"title":"71 Copyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.","authors":[],"date":"2011","doi":null,"raw":"International Journal of Web Services Research, 8(2), 51-71, April-June 2011 71 Copyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.","cites":null},{"id":43708683,"title":"A Constraint-Based Approach to Horizontal Web Service Composition.","authors":[],"date":"2006","doi":"10.1007\/11926078_10","raw":"A Constraint-Based Approach to Horizontal Web Service Composition. In Proceedings of the 2006 International Semantic Web Conference (ISWC 2006) (pp. 130-143).","cites":null},{"id":43708689,"title":"A Framework for Intelligent Web Services: Combined HTN and CSP Approach.","authors":[],"date":"2006","doi":"10.1109\/icws.2006.6","raw":"Paik, I., Maruyama, D., & Huhns, M. N. (2006, September). A Framework for Intelligent Web Services: Combined HTN and CSP Approach. In Proceedings of the IEEE International Conference on Web Services, Chicago, IL (pp. 959-962).","cites":null},{"id":43708695,"title":"A Method for Automated Web Service Selection.","authors":[],"date":"2008","doi":"10.1109\/services-1.2008.8","raw":"Yu, H. Q., & Reiff-Marganiec, S. (2008, July). A Method for Automated Web Service Selection. In Proceedings of the 2nd International Workshop on Web Service Composition and Adaptation (WSCA2008) (pp. 513-520).","cites":null},{"id":43708678,"title":"An approach for QoS-aware service composition based on genetic algorithms.","authors":[],"date":"2005","doi":"10.1145\/1068009.1068189","raw":"Canfora, G., Di Penta, M., Esposito, R., & Villani, M. L. (2005, June). An approach for QoS-aware service composition based on genetic algorithms.","cites":null},{"id":43708691,"title":"Automated Planning in a Service-Oriented Architecture.","authors":[],"date":"2004","doi":"10.1109\/enabl.2004.16","raw":"Schuschel, H., & Weske, M. (2004, June). Automated Planning in a Service-Oriented Architecture. In Proceedings of the 13th IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises, Modena, Italy (pp. 75-80).","cites":null},{"id":43708682,"title":"Copyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.","authors":[],"date":"2011","doi":null,"raw":"70 International Journal of Web Services Research, 8(2), 51-71, April-June 2011 Copyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.","cites":null},{"id":43708680,"title":"Dynamic Workflow Composition: Using Markov Decision Processes.","authors":[],"date":"2005","doi":"10.4018\/jwsr.2005010101","raw":"Doshi, P., Goodwin, R., Akkiraju, R., & Verma, K. (2005). Dynamic Workflow Composition: Using Markov Decision Processes. International Journal of Web Services Research, 2(1), 1\u201317. doi:10.4018\/ jwsr.2005010101 Dujmovic, J. J., & Larsen, H. (2004). Properties and modeling of partial conjunction\/disjunction. In Current Issues in Data and Knowledge Engineering: Proceedings of the Eurofuse Workshop on Data and Knowledge Engineering (pp. 215-224).","cites":null},{"id":43708692,"title":"HTN planning for Web Service composition using SHOP2.","authors":[],"date":"2004","doi":"10.1016\/j.websem.2004.06.005","raw":"Sirin, E., Parsia, B., Wu, D., Hendler, J. A., & Nau, D. S. (2004). HTN planning for Web Service composition using SHOP2. Journal of Web Semantics, 1(4), 377\u2013396. doi:10.1016\/j.websem.2004.06.005 Thiagarajan, R., & Stumptner, M. (2007). Service Composition With Consistency-based Matchmaking: A CSP-based Approach. In Proceedings of the ECOWS 2007 Conference (pp. 22-32).","cites":null},{"id":43708696,"title":"Improved HTN Planning Approach for Service Composition.","authors":[],"date":"2004","doi":"10.1109\/scc.2004.1358075","raw":"Zhang, J., Zhang, S., Cao, J., & Mou, Y. (2004, September). Improved HTN Planning Approach for Service Composition. In Proceedings of the IEEE International Conference on Services Computing, Shanghai, China (pp. 609-612). endnote 1 In this paper, HTN planning is based on the Close World assumption, which is means all the tasks for expressing users\u2019 requirements must be one of the elements in task ontology.","cites":null},{"id":43708684,"title":"Information gathering during planning for Web Service composition.","authors":[],"date":"2005","doi":"10.1007\/978-3-540-30475-3_24","raw":"Kuter, U., Sirin, E., Parsia, B., Nau, D. S., & Hendler, J. A. (2005). Information gathering during planning for Web Service composition. Journal of Web Semantics, 3(2-3), 183\u2013205. doi:10.1016\/j. websem.2005.07.001 L\u00e9cu\u00e9, F. (2009, October). Optimizing QoS-Aware Semantic Web Service Composition. In Proceedings of the 2009 International Semantic Web Conference (ISWC 2009), Chantilly, VA (pp. 375-191).","cites":null},{"id":43708679,"title":"Markov-HTN Planning Approach to Enhance Flexibility of Automatic Web Service Composition.","authors":[],"date":"2009","doi":"10.1109\/icws.2009.43","raw":"Chen, K., Xu, J., & Reiff-Marganiec, S. (2009, July). Markov-HTN Planning Approach to Enhance Flexibility of Automatic Web Service Composition. In Proceedings of the IEEE International Conference on Web Services, Los Angeles, CA (pp. 9-16).","cites":null},{"id":43708685,"title":"Optimizing Causal Link Based Web Service Composition.","authors":[],"date":"2008","doi":"10.1109\/wiiat.2008.344","raw":"L\u00e9cu\u00e9, F., Delteil, A., & Leger, A. (2008). Optimizing Causal Link Based Web Service Composition. In Proceedings of the 18th European Conference on Artificial Intelligence (ECAI\u201908) (pp. 45-49).","cites":null},{"id":43708694,"title":"OWL-S: Semantic Markup for Web Services. Retrieved","authors":[],"date":"2004","doi":"10.1016\/j.websem.2004.07.002","raw":"World Wide Web Consortium. (2004). OWL-S: Semantic Markup for Web Services. Retrieved January 27, 2010, from http:\/\/www.w3.org\/Submission\/ OWL-S\/ Yu, H. Q. (2009). Context Aware Automatic Service Selection. Unpublished doctoral dissertation, University of Leicester, UK.","cites":null},{"id":43708681,"title":"Semantics-enriched QoS policies for web service interactions.","authors":[],"date":"2006","doi":"10.1145\/1186595.1186601","raw":"Garcia, D. Z. G., & de Toledo, M. B. F. (2006, November). Semantics-enriched QoS policies for web service interactions. In Proceedings of the 12th Brazilian Symposium on Multimedia and the Web (WebMedia 2006) (pp. 35-44).","cites":null},{"id":43708676,"title":"SEMAPLAN: Combining Planning with Semantic Matching to Achieve Web Service Composition.","authors":[],"date":"2006","doi":"10.1109\/icws.2006.119","raw":"referenCeS Akkiraju, R., Srivastava, B., Ivan, A.-A., Goodwin, R., & Syeda-Mahmood, T. (2006, September). SEMAPLAN: Combining Planning with Semantic Matching to Achieve Web Service Composition. In Proceedings of the IEEE International Conference on Web Services, Chicago, IL (pp. 37-44).","cites":null},{"id":43708690,"title":"Service Selection based on Non-Functional Properties.","authors":[],"date":null,"doi":"10.4018\/978-1-61350-432-1.ch012","raw":"Service Selection based on Non-Functional Properties. In Proceedings of the ICSOC 2007 Workshops (LNCS 4907, pp. 128-138).","cites":null},{"id":43708688,"title":"SHOP2: An HTN Planning System.","authors":[],"date":"2003","doi":"10.1109\/mis.2005.20","raw":"Nau, D. S., Au, T.-C., Ilghami, O., Kuter, U., Murdock, J. W., Wu, D., & Yaman, F. (2003). SHOP2: An HTN Planning System. Journal of Artificial Intelligence Research, 20, 379\u2013404.","cites":null},{"id":43708687,"title":"Total-Order Planning with Partially Ordered Subtasks.","authors":[],"date":"2001","doi":null,"raw":"Nau, D., Mu\u00f1oz-Avila, H., Cao, Y., Lotem, A., & Mitchell, S. (2001, August). Total-Order Planning with Partially Ordered Subtasks. In Proceedings of the IJCAI 2001 Conference, Seattle, WA.","cites":null},{"id":43708693,"title":"Towards a classification of web service feature interactions.","authors":[],"date":"2007","doi":"10.1016\/j.comnet.2006.08.003","raw":"Weiss, M., Esfandiari, B., & Luo, Y. (2007). Towards a classification of web service feature interactions. International Journal of Computer and Telecommunications Networking, 51(2), 359\u2013381.","cites":null},{"id":43708677,"title":"Towards efficient selection of Web services with reinforcement learning process.","authors":[],"date":"2005","doi":"10.1109\/ictai.2005.122","raw":"Cai, D., Luo, Z., Qian, K., & Gao, Y. (2005, November). Towards efficient selection of Web services with reinforcement learning process. In Proceedings of the 17th IEEE International Conference on Tools with Artificial Intelligence (ICTAI 05), Hong Kong (pp. 372-276).","cites":null},{"id":43708686,"title":"Web Service Composition via Problem Decomposition across Multiple Ontologies.","authors":[],"date":"2007","doi":"10.1109\/services.2007.70","raw":"Lin, N., Kuter, U., & Hendler, J. (2007, July). Web Service Composition via Problem Decomposition across Multiple Ontologies. In Proceedings of the IEEE Conference on Services, Salt Lake City, UT (pp. 65-72).","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2011","abstract":"Automatic Web services composition can be achieved by using AI planning techniques. HTN planning has been adopted to handle the OWL-S Web service composition problem. However, existing composition methods based on HTN planning have not considered the choice of decompositions available to a problem which can lead to a variety of valid solutions. In this paper, we propose a model of combining a Markov decision process model and HTN planning to address Web services composition. In the model, HTN planning is enhanced to decompose a task in multiple ways and hence be able to find more than one plan, taking both functional and non-functional properties into account. Furthermore, an evaluation method to choose the optimal plan and some experimental results illustrate that the proposed approach works effectively. The paper extends previous work by refining a number of aspects of the approach and applying the approach to a realistic case study.Peer reviewedPublisher Versio","downloadUrl":"www.igi-global.com.","fullTextIdentifier":"https:\/\/lra.le.ac.uk\/bitstream\/2381\/9681\/2\/reiff-marganiec%20paper_JWSR%208%282%29.pdf","pdfHashValue":"2da9fef5b011cc3b9956951b5d7834d36ab8c563","publisher":"IGI Global","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/9681<\/identifier><datestamp>\n                2011-10-01T01:01:52Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_1116<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nUsing Markov Decision Process Model with Logic Scoring of Preference Model to Optimize HTN Web Services Composition<\/dc:title><dc:creator>\nXu, Jiuyun<\/dc:creator><dc:creator>\nChen, Kun<\/dc:creator><dc:creator>\nReiff-Marganiec, Stephan<\/dc:creator><dc:subject>\nServices composition<\/dc:subject><dc:subject>\nHTN planning<\/dc:subject><dc:subject>\nServices selection<\/dc:subject><dc:subject>\nMarkov decision process<\/dc:subject><dc:subject>\nLogic Scoring of Preference<\/dc:subject><dc:description>\nAutomatic Web services composition can be achieved by using AI planning techniques. HTN planning has been adopted to handle the OWL-S Web service composition problem. However, existing composition methods based on HTN planning have not considered the choice of decompositions available to a problem which can lead to a variety of valid solutions. In this paper, we propose a model of combining a Markov decision process model and HTN planning to address Web services composition. In the model, HTN planning is enhanced to decompose a task in multiple ways and hence be able to find more than one plan, taking both functional and non-functional properties into account. Furthermore, an evaluation method to choose the optimal plan and some experimental results illustrate that the proposed approach works effectively. The paper extends previous work by refining a number of aspects of the approach and applying the approach to a realistic case study.<\/dc:description><dc:description>\nPeer reviewed<\/dc:description><dc:description>\nPublisher Version<\/dc:description><dc:date>\n2011-09-13T12:46:08Z<\/dc:date><dc:date>\n2011-09-13T12:46:08Z<\/dc:date><dc:date>\n2011<\/dc:date><dc:type>\nArticle<\/dc:type><dc:identifier>\nInternational Journal of Web Services Research (IJWSR), 2011, 8 (2), pp. 53-73<\/dc:identifier><dc:identifier>\n1545-7362<\/dc:identifier><dc:identifier>\nhttp:\/\/www.igi-global.com\/bookstore\/article.aspx?titleid=55236<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/9681<\/dc:identifier><dc:identifier>\n10.4018\/jwsr.2011040103<\/dc:identifier><dc:identifier>\n1546-5004<\/dc:identifier><dc:language>\nen<\/dc:language><dc:rights>\nThis paper appears in International Journal of Web Services Research, authored by Xu, J.; Chen, K;, Reiff-Marganiec, S., Copyright \u00a9 2011, IGI Global, www.igi-global.com.  Posted by permission of the publisher.<\/dc:rights><dc:publisher>\nIGI Global<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["1545-7362","issn:1545-7362","1546-5004","issn:1546-5004"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2011,"topics":["Services composition","HTN planning","Services selection","Markov decision process","Logic Scoring of Preference"],"subject":["Article"],"fullText":"\t Editorial Preface\ni Web Services Composition\n\t Liang-Jie\tZhang,\tKingdee\tInternational\tSoftware\tGroup\tCompany\tLimited,\tHong\tKong\n\t\n Research Articles\n  \t\n1 Analyzing and Characterizing Choreography Timed Compatibility\n\t Nawal\tGuermouche,\tLORIA-Nancy\tUniversity,\tFrance\n\t Claude\tGodart,\tLORIA-Nancy\tUniversity,\tFrance\n27 Reputation Management for Composite Services in Service-Oriented Systems\n\t Surya\tNepal,\tCSIRO,\tAustralia\n\t Zaki\tMalik,\tWayne\tState\tUniversity,\tUSA\n\t Athman\tBouguettaya,\tRMIT\tUniversity,\tAustralia\n51 Using Markov Decision Process Model with Logic Scoring of Preference Model to \nOptimize HTN Web Services Composition\n\t Jiuyun\tXu,\tChina\tUniversity\tof\tPetroleum\tand\tBeijing\tUniversity\tof\tPosts\tand\t\n\t \t\tTelecommunications,\tChina\n\t Kun\tChen,\tChina\tUniversity\tof\tPetroleum,\tChina\n\t Stephan\tReiff-Marganiec,\tUniversity\tof\tLeicester,\tUK\n72 An Adaptive Approach to Optimizing Tradeoff Between Service Performance and \nSecurity in Service-Based Systems\n\t Stephen\tS.\tYau,\tArizona\tState\tUniversity,\tUSA\n\t Yin\tYin,\tArizona\tState\tUniversity,\tUSA\n\t Ho\tAn,\tArizona\tState\tUniversity,\tUSA\nInternatIonal Journal of \nWeb ServIceS reSearch\nTable of Contents\nApril-June 2011, Vol. 8, No. 2\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   51\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nKeywords: HTN Planning, Logic Scoring of Preference, Markov Decision Process, Services Composition, \nServices Selection\nIntroduCtIon\nWeb services are software \u201ccomponents\u201d at \nan abstraction level suitable for business level \nreuse which are combined into larger systems, \noften dynamically and only when need arises. \nThis is possible as their functionality is de-\nscribed in a way that can be machine interpreted \nusing markov decision process \nmodel with logic Scoring of \npreference model to optimize \nhtn Web Services Composition\nJiuyun Xu, China University of Petroleum and Beijing University of Posts and \nTelecommunications, China\nKun Chen, China University of Petroleum, China\nStephan Reiff-Marganiec, University of Leicester, UK\nAbStrACt\nAutomatic Web services composition can be achieved using AI planning techniques. HTN planning has been \nadopted to handle the OWL-S Web service composition problem. However, existing composition methods based \non HTN planning have not considered the choice of decompositions available to a problem, which can lead to \na variety of valid solutions. In this paper, the authors propose a model of combining a Markov decision process \nmodel and HTN planning to address Web services composition. In the model, HTN planning is enhanced \nto decompose a task in multiple ways and find more than one plan, taking into account both functional and \nnon-functional properties. Furthermore, an evaluation method to choose the optimal plan and experimental \nresults illustrate that the proposed approach works effectively. The paper extends previous work by refining \na number of aspects of the approach and applying it to a realistic case study.\n(e.g., through a WSDL file or a Semantic Web \ndescription). These combinations, which are \nusually referred to as compositions, allow for \nservices that are part of different applications, \nreside on different platforms, are developed \nusing diverse programming languages and are \npossibly owned by different business partners \nto cooperate smoothly. The need for composi-\ntion arises as usually a single service cannot \nfulfill the requirements of a user. Web service \nDOI: 10.4018\/jwsr.2011040103\n52   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\ncomposition provides a mechanism to combine \ndifferent services to handle a complex business \nprocess. Automated Web service composition \nallows to combine services without human \ninvolvement in the planning and is valuable \nin many domains, e-commerce is a typical ex-\nample. However, with the rapid increase of Web \nservices, increasingly complex requirement of \nbusiness process in the real world automatic ser-\nvice composition requires a flexible mechanism \nto deal with changing service availability. AI \nplanning has often been adopted for automated \nWeb services composition, as exemplified by \nthe methods presented in for example Sirin, Wu, \nHendler, and Nau (2004), Schuschel and Weske \n(2004), Paik, Maruyama, and Huhns (2006), \nand Akkiraju, Srivastava, Ivan, Goodwin, and \nSyeda-Mahmood (2006) to handle this issue.\nIn Sirin et al. (2004), an HTN planning \nmethod has been suggested to handle auto-\nmatic Web services composition. This method \ntranslates OWL-S Web service descriptions to a \nSHOP2 domain and then a given business plan is \nachieved by decomposing complex tasks using \noperators from the SHOP2 domain. Consider-\ning the procedure of task decomposition, this \nmethod mainly is concerned with the feasibility \nof task decomposition; that is can one plan be \nfound? However, a plan may fail for various \nreasons, service instances may no longer exists \nwhen they are about to be invoked, feature in-\nteraction in Web services (Weiss, Esfandiari, & \nLuo, 2007) may lead to undesired behavior or \nthe specific plan might simply not be the best \navailable for a user. There usually are several \npossible plans which can solve one specific \nhigh-level business process, so there is a natural \nredundancy to avoid these problems, one only \nneeds to go a step further than just finding one \nplan. For example, if a user wants to attend an \nexhibition in another city in a few days. On the \ncondition of satisfying user\u2019s requirements, he \ncan make a choice of taking a flight or a train to \nthe city and then attend the exhibition. In this \nsituation, the user always wants to know what \noptions he has and which is of the best quality \n(that is satisfying his non-functional criteria \nsuch as cost considerations or time saving).\nThis paper addresses the aspect of finding \nmultiple composition plans and then selecting \nthe most appropriate for a user. We propose an \nenhanced approach for Web services composi-\ntion based on the combination of HTN planning \nand a Markov decision process model. With this \napproach, several highly suitable Web service \nplans will be obtained providing different solu-\ntions to a business process using Web services \ncomposition and hence offering much more \nflexible solution to the customer. To make sure \nthese plans are indeed some of the best solutions \navailable we use an evaluation mechanism to \nillustrate the optimal solution amongst those \nmultiple solutions using a Markovian decision \nprocess. In this way, the optimal solution not \nonly meets the requirements of the business \nprocess in its functional aspects, but also satis-\nfied the expectations that the solution is of the \nbest quality based on requirements considering \nthe non-functional aspects.\nThis paper is an extension of our work \npresented at ICWS 2009 (Chen, Xu, & Reiff-\nMarganiec, 2009). The paper extends the pre-\nvious work by addressing a number of issues \nqueried at the conference as well as on some \naspects which were planned as future work. \nSpecifically we present a more (1) realistic case \nstudy with a more complete (2) analysis of the \napproach in terms of its complexity. We have \nalso enhanced the (3) method to evaluate the non-\nfunctional (or QoS) properties and addressed the \nissue of choosing appropriate (4) values for the \nthreshold used in the control strategy.\nThe rest of the paper is organized as fol-\nlows: in the next section, an overview of Web \nservices composition using HTN planning \nis provided. The following sections describe \nMarkov Decision Process with Logic Scoring \nfor Preference model for HTN Web services \ncomposition and detail the process of model \nsolving. A case study is introduced and experi-\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   53\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nmental results are presented. Finally, we discuss \nrelated work, conclude and provide an outline \nof further research.\nAn overvIeW of Web \nServICeS CompoSItIon \nuSInG htn plAnnInG\nHTN (Hierarchical Task Network) is a technique \nof AI planning based on control knowledge \nwith a closed world assumption (informally, \nthat means that all \u201cbuilding blocks\u201d are known \na-priori). HTN planning provides hierarchical \nabstraction with a powerful strategy to deal \nwith the complexity of large and complicated \nreal world planning domains. The purpose of \nan HTN planner is to produce a sequence of \nactions that perform some activity or task.\nAs with any planning approach, there is \na need to express the terms of the application \ndomain in the language understood for the \nplanner. In order to adopt HTN planning as \nan approach to web service composition the \nplanning domain, planning problem and the \nprocess of planning need to be married to the \nrelevant concepts of the web service domain. \nThe description of a planning domain includes \na set of operators (which will be web service \noperations), and also a set of methods, each of \nwhich is a prescription for how to decompose \na task into its subtasks (smaller tasks). The \ndescription of a planning problem will contain \nan initial state which in classical planning is a \ngoal formula but here it will be the problem \nspecification. The problem specification is \nexpressed as a partially ordered set of tasks to \naccomplish.\nThe process of HTN planning proceeds by \nusing the methods to decompose tasks recur-\nsively into smaller and smaller subtasks, until \nthe planner reaches primitive tasks that can be \nperformed directly using the planning opera-\ntors. For each non-primitive task, the planner \nchooses an applicable method, instantiates it \nto decompose the task into subtasks, and then \nchooses and instantiates methods to decompose \nthe subtasks even further. When the constraints \non the subtasks or the interactions among them \nprevent the plan from being feasible, the plan-\nning system will backtrack and try alternative \nmethods. More details on HTN planning can \nbe found in Nau, Au, Ilghami, Kuter, Murdock, \nWu, and Yaman (2003).\nOWL-S (World Wide Web Consortium, \n2004) is a set of ontologies for describing the \nproperties and capabilities of Web services. \nCurrently, OWL-S is used to describe web ser-\nvices since it supports effective automation of \nvarious web services related activities including \nservice discovery, composition, execution, and \nmonitoring (it provides a richer framework than \nWSDL). Especially, the structure of OWL-S is \npropitious to exploit AI planning techniques \nfor automatic service composition by treating \nservice composition as a planning problem. \nIn OWL-S, services can be described as com-\nposite or atomic processes with preconditions \nand effects. The concept of composite process \ndecomposition in OWL-S process ontology is \nvery similar to the concept of task decomposition \nin HTN planning. Hierarchical modelling is the \ncore of the OWL-S process model to the point \nwhere the OWL-S process model constructs \ncan be directly mapped to HTN methods and \noperators. Thus, HTN planning is especially \npromising for OWL-S Web services composi-\ntion, which has been shown in Sirin et al. (2004), \nKuter, Sirin, Parsia, Nau, and Hendler (2005), \nand Lin, Kuter, and Hendler (2007).\nformAl mdp-lSp model \nfor htn Web ServICeS \nCompoSItIon\nCurrent automatic web services composition \ntechniques including those based on HTN plan-\nning are usually concerned with finding one \nsolution that functionally fulfills the demands. \nHowever, with many functionally equivalent \nservices being available work in other areas \nhas considered selecting the best service for a \ngiven situation based on non-functional proper-\nties. Furthermore, having a choice also means \nthat there is normally more than one possible \n54   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nsolution to address given requirements. Our ap-\nproach addresses these, but requires extensions \nto the composition model used by SHOP2 in \nSirin et al. (2004). Our approach of combining \nHTN with MDP-LSP (Markov Decision Pro-\ncess Model with Logic Scoring of Preference) \nidentifies a choice of Web services composition \nplans and considers the non-functional aspects \nof Web services, which enhances the flexibility \nof automatic Web services composition. The \napproach is supported by a formal model as \nfollows.\nDefinition 1 (MDP-LSP Model for HTN Web \nServices Composition): An OWL-S Web \nservices composition problem is defined by \na quintuple <S, T, D, Q, P>, where\n \u25e6 S is the initial state of the problem.\n \u25e6 T is the task list, which contains the \ntasks that the user needs to solve.\n \u25e6 D is the description of a planning do-\nmain including a set of operators and \na set of decomposition methods, and \nD can be derived from a collection of \nOWL-S process models.\n \u25e6 Q is the context information about \nservices quality, which covers a wide \nrange of non-functional properties.\n \u25e6 P is a set of optimal solutions which \nare available in the solution space.\nOn the basis of the above definition, solving \nthe 5-tuple can return an optimal plan P\noptimal\n = \n(o\n1\no\n2\n\u2026o\nn\n), that is a sequence of instantiated \noperators that will achieve T from S in D, \nwith the best quality with respect to the non-\nfunctional aspects Q.\nThe model solving consists of three main \nsteps. First, the initialization of the description \nof the planning domain; second, the search for \nthe best plans in the solution space based on \nHTN planning and thirdly, the evaluation of the \noptimality of the found plans. The next section \nwill describe these in detail.\nthe ApproACh for SolvInG \nthe mdp-lSp model\nThis section describes the approach of finding \noptimal plans, which in technical terms can be \nseen as finding solutions to the models presented \nin the previous section. As this section is quite \nlengthy due to describing all 5 major steps in \nthe process, we want to present an overview \nfirst before going into the details. The first \nstep is to initialize the planning domain and \nis based on work by Sirin et al. (2004). Essen-\ntially the knowledge about available operators \nand methods is extracted from the OWL-S \nservice descriptions to create a model of the \nplanning domain. While this step does need \nto be repeated frequently to obtain the latest \navailable service methods, it does not have to \nbe executed before each planning process, or \neven as part of each planning process. The next \nthree steps are concerned with finding several \nplans, calculating the quality of a branch (its \nimmediate reward) and controlling how much \nof the state space should be explored. The \nrespective sections describe the approach for \nplanning with multi-decomposition, the method \nfor evaluating non-functional properties and the \ncontrol strategy. Finally we turn our attention \nto finding the best plan.\nInitialization of the description \nof the planning domain\nAs stated earlier, we will be using HTN planning \nwhich has proven successful in earlier work \n(Sirin et al., 2004). The first step in the approach \nis to translate the description of OWL-S services \nto a description of the planning domain.\nThere are many planning domain descrip-\ntion languages, examples are PDDL (Gerevini \n& Long, 2005) and SHOP2 (Nau, Mu\u00f1oz-Avila, \nCao, Lotem, & Mitchell, 2001) descriptions. \nPDDL is used by many classical planers as \nstandard description language, but for HTN \nSHOP2 is more suitable because the control \nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   55\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nknowledge base for HTN planning consists \nof operators and methods, which are naturally \nexpressed in the SHOP2 domain description \n(Nau et al., 2003; Sirin et al., 2004).\nRecall that operators are basic building \nblocks out of which the final plan would be \nbuild, while methods describe possible de-\ncompositions of larger tasks. The definitions \nof operators and methods are equivalent to \nwhat was defined in Sirin et al. (2004) and are \nas follows:\nDefinition 2 (Operator). An operator is an \nexpression of the form (h(v\u2192) Pre Del \nAdd) where\n \u25e6 h(v\u2192) is a primitive task with a list \nof input parameters v\u2192,\n \u25e6 Pre  represents the operator \u2019s \npreconditions,\n \u25e6 Del represents the operator\u2019s delete list \nwhich is described as a conjunction of \nlogical atoms that will become false \nafter operator\u2019s execution, and\n \u25e6 Add represents the operator\u2019s add list \nwhich is described as a conjunction \nof logical atoms that will become true \nafter operator\u2019s execution.\nDefinition 3 (Method). A method is an expres-\nsion of the form (h(v\u2192) Pre\n1\n T\n1\n Pre\n2\n T\n2\n \n\u2026) where\n \u25e6 h(v\u2192) is a compound task with a list \nof input parameters (v\u2192),\n \u25e6 each Pre\ni\n is a precondition expres-\nsion, and\n \u25e6 each T\ni\n is a partially ordered set of \nsubtasks.\nBefore using HTN planning to compose \nWeb services, we need to translate all OWL-S \nWeb services descriptions into SHOP2 de-\nscriptions. In order to achieve this, the profile \ndescription of each service is translated to an \nelement in the task ontology1 and the service \nprocess model is translated to a set of methods \nand operators.\nIn the OWL-S process ontology, operations \nare modeled as processes, which can have two \nsorts of non-exclusive effects. First, an operation \ncan generate and return some new information \nbased on information it is given and the world \nstate; Information production is described by the \ninputs and outputs of the process. Second, it can \nproduce a change in the world; this transition \nis described by the preconditions and effects \nof the process.\nThere are three types of processes in \nOWL-S, including atomic processes, compos-\nite processes and simple processes. An atomic \nprocess is a model of a single-step Web service \nthat can be executed to accomplish some task \ndirectly. A composite process is a compound \nWeb service which can be decomposed into \nother atomic processes, composite processes or \nsimple processes. The decomposition of a com-\nposite process is specified through its control \nconstructs. A simple process is not invocable \nand not associated with a service grounding \n-- simple processes are used as elements of \nabstraction. They may be used either to provide \na view of (a specialized way of using) some \natomic process, or a simplified representation \nof some composite process (World Wide Web \nConsortium, 2004). The following will give \nan introduction to the translation algorithm as \nintroduced in Sirin et al. (2004).\nLet K = {K\n1\n, K\n2\n, \u2026, K\nm\n} be a collection \nof OWL-S process models. Then, we define \nthe description of the planning domain D \nto be the results of the TRANSLATE_PRO-\nCESS_MODEL(K) operation defined by Sirin \net al. (2004). Details of the translation and \nassumptions the translation based on are all \nkept unchanged and we will not describe the \ntranslation algorithm in detail here. Briefly, \nthe process translates atomic processes into \noperators and translates composite processes or \nsimple processes into domain methods respec-\ntively. Especially, the composite processes are \ntranslated according to their control constructs \nlike Sequence, If-Then-Else, Repeat-While and \nso on. Each control construct corresponds to a \nsub-translating algorithm.\nAfter the completion of this process, the \nelement D needed for our model is complete \nand provides us with the needed set of operators \nand decomposition methods. Each operator is \n56   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\na description of what needs to be done to ac-\ncomplish some primitive task, and each method \ntells us how to decompose some compound task \ninto a set of partially ordered subtasks.\nClearly this initialization phase does not \nhave to be executed every time a solution is \nsought \u2013 in general we can assume that the set of \navailable services changes much less frequently \nthen there is a need to find a new plan for a spe-\ncific problem. Note that the initialization phase \ndoes need to be executed regularly to ensure \nthat any change in the OWL-S process models \nand also new service arrivals are reflected in \nthe domain description.\nplanning with multi-\ndecomposition for tasks\nIn this paper, the process of HTN planning is \nimproved in the second step, which is search-\ning for plans. Initial ideas for this have been \npresented in Chen et al. (2009). This enhance-\nment means that we are able to produce more \nthan one good solution within the available \nsolution space. Specific details of the improve-\nment focus on decomposition for non-primitive \ntasks when a task can be decomposed by more \nthan one method.\nThe improved decomposition method \nchanges the way of decomposing when a task \ncan be decomposed by multiple methods. The \nmethod chooses each method to decompose \na non-primitive task instead of choosing any \none of the ones applicable in the current state. \nAlso, a control strategy is embedded into the \nplanning process to decide whether a branch \nwill be decomposed further. Figure 1 presents \nan overview of the improved non-primitive \ntasks decomposition.\nThe improved decomposition is superior \nto the decomposition presented in Sirin et al. \n(2004) on the strategy of searching for solutions \nas it does not just find one solution but finds \nmany already pre-filtering for quality with a \nview to allowing to finally choose the best \nsolution. For decomposing a non-primitive task \nwith every available method, the current state \n(S) and task list (T) must be copied, and the \nnumber of the replications is the same as the \nnumber of available methods. After this, every \nbranch can be considered by the planning \nmethod. If one branch cannot be decomposed \nfurther, that is all the subtasks are primitive \ntasks, the found plan will be added to the set \nof plans (P). In the subsequent recursive process, \na similar situation that a subtask may have more \nthan one available method to be decomposed \nwill occur. With the number of such situations \nincreasing, the solution space that will be \nsearched is growing and the planning process \nwill be more and more complex. So, we apply \nFigure 1. Decomposing a non-primitive task\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   57\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\na control strategy to decide whether a branch \nwill be decomposed further.\nBefore the definition of the control strategy, \nthe concept of immediate reward needs to be \nintroduced.\nAn immediate reward is a utility value to \nmeasure the quality of a decomposition method. \nA method decomposes a task into primitive \nsubtasks or non- primitive subtasks. A primitive \ntask can be performed directly using a service \noperation (or planning operator in planning \nterms). Clearly, operations suggested by a de-\ncomposition method have a direct impact on the \noverall quality of the solution. On the basis of \nthis, the immediate reward of a decomposition \nmethod can be calculated by using the service \nQoS details (Q), and the corresponding Web \nservices are mapped into operators produced \non the certainty branch, which does not have a \nsubtask that can be decomposed by more than \none method in the remaining decomposition \nprocess until planning is completed.\nA method for Calculating \nImmediate reward\nIn our former work (Chen et al., 2009), we \nused a fitness function using an average weight \nmechanism to calculate the immediate reward \nbased on standard QoS criteria including cost, \nresponse time, availability and reliability \n(Canfora, Di Penta, Esposito, & Villani, 2005). \nHowever, a UDDI repository usually does not \ncontain the information about standard QoS \ndata. Even if it does, the data is stored for hu-\nman consideration rather than in the machine \nreadable form required for automatic services \nselection. In any approach where decisions have \nto be made in decomposition whether to include \na particular service into the set of solutions we \nclearly encounter a service selection problem.\nAs we said before, in our previous work \nwe relied on a simplified QoS model assum-\ning data for these to be available, however \none of the significant extensions in this paper \nis the adoption of a service selection method \n(Reiff-Marganiec, Yu, & Tilly, 2009; Yu & \nReiff-Marganiec, 2008) used to obtain data \nabout non-functional properties automatically \nconsidering user context information. We use \nthe scores provided through this framework \nand then calculate the immediate reward for \nchoosing which branches to extend.\nThe development of the selection method \nwas motivated by the fact that the complexity \nof business processes and the dynamic nature \nof the co-operations make it difficult for the \nbusiness modeler or planner to select appropriate \nservices, manage the compositions efficiently \nand understand requirements within a dynamic \ncontext correctly. The method considers that \na service\u2019s suitability depends largely on the \nuser\u2019s context and does change over time with \nchanges to the user\u2019s context as well as the \ncurrently available services. For this paper, \nchoosing this selection method is mainly based \non three merits. Firstly, it combines evaluation \nand selection activities, which is consistent \nwith the purpose of choosing a decomposition \nbranch. Secondly, it can deal with a wider range \nof non-functional attributes than the basic QoS \nnon-functional attributes, in fact it is open so that \nany non-functional aspect that makes sense for \na group of services can be included and not all \nservices need to have the same non-functional \nproperties. Thirdly, this method incorporates \nthe Logic Scoring of Preferences (LSP) method \n(Dujmovic & Larsen, 2004) which captures the \nlogic relations between criteria rather than just \nsimply using an average weight mechanism thus \nensuring that even if large numbers of criteria are \nconsidered critical criteria are never overruled \nby high scores of others and the like (these are \ntermed simultaneity and replacability).\nThe process using the enhanced selection \nmethod to calculate immediate rewards involves \n4 steps and is as follows:\nStep 1: Obtain relevant non-functional properties\nThe first step is concerned with gaining \nvalues for the relevant non-functional proper-\nties. These values are gained from the context \ninformation and which non-functional proper-\nties are relevant is based on details about the \nservice operations. This had been discussed in \n58   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\ndetail in (ICWS09). What is relevant here is to \nunderstand that all non-functional criteria are \ndefined through a tuple {Name, Type, Weight, \nValue}, where Name is a unique string for \nidentifying the criteria, Type is the data type of \nthe criterion (e.g., Boolean, Integer, Set) and \nis crucial in automatically selecting the right \nevaluation function (see step 2). The Weight \nreflects the importance of the criterion and has \nan initial value created at the same time as the \ncriteria, but the actual value might have been \nmodified by the end-users. The Value is the \ncurrent evaluation value of the service. Values \nare obtained from the context information (or \nin some cases can be directly queried from \nthe service, in which case a query expression \nwould be given here) and might be more or less \nstatic (e.g., for a printing service the fact that \nit is \u201cblack and white\u201d is quite static, while the \nlength of the print queue is highly dynamic).\nStep 2: Metrics for non-functional properties\nHaving obtained the current values for each \nnon-functional criterion, we need to calculate \nthe evaluation score E for each criterion for every \nservice. Because there may be many types of \nvalues there is a number of evaluation functions \ndependent on the data type of the criterion.\nFor example, if the type of the criterion \nis numerical the evaluation function shown in \nformula (1) is used.\nE\nv v\nv v\nif w\nv v\nv v\nmax\nmax min\nmax\nmax min\n=\n\u2212\n\u2212\n\u2212\n\uf8eb\n\uf8ed\n\uf8ec\uf8ec\uf8ec\uf8ec\n\uf8f6\n\uf8f8\n\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\n\u2265\n\u2212\n\u2212\n\uf8eb\n\uf8ed\n\uf8ec\uf8ec\uf8ec\n1 0\u001d\n\uf8ec\n\uf8f6\n\uf8f8\n\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7\n\uf8f1\n\uf8f2\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\n\uf8f3\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\n\u001dotherwise\n         (1)\nIn formula (1), v\nmin\n and v\nmax\n are the minimum \nand maximum value of all services which are \noptions based on the values gathered in step 1, \nv is the value for the current service and w is \nthe weight of the current criterion. A negative \nweight would mean that a smaller value is \ndesirable (e.g., for cost).\nIf the criterion is of Boolean type, then an \nexact match will be used as seen in formula (2):\nE\nif criteria ismet\notherwise\n=\n\uf8f1\n\uf8f2\n\uf8f4\uf8f4\n\uf8f3\n\uf8f4\uf8f4\uf8f4\n1\n0\n\u001d \u001d \u001d\n\u001d\n (2)\nIf the criterion is a set type, then the size \nof the overlapping subset is of interest (see \nformula (3)):\n         (3)\nStep 3: Calculate all aspects of criteria\nAfter step 2 we have scores for all criteria \nof all services. These need to be aggregated into \na score for each service, which is achieved us-\ning a global preference calculation function L:\n \n(4)\nIn this formula each E\ni\n is one of the in-\ndividual scores obtained in step 2 (with 1 < i \n< n, and n being the total number criteria for \nthis service). w is the weight of each criteria. \nr is the logic power value adopted from the \nLSP method and obtained automatically by a \nmethod introduced in Yu and Reiff-Marganiec \n(2008) \u2013 r captures the logical relations between \nthe criteria.\nStep 4: Calculate the reward value for each \ndecomposition method\nThe fourth and final step calculates the im-\nmediate reward for evaluating the quality of a \ndecomposition method which is determined by \nthe services coming out in a plan. The immedi-\nate reward function is shown as formula (5):\nR L S L S L S n\nn\n= ( )+ ( )+ + ( )( )1 2 \uf04c \/    (5)\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   59\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nIn formula (5), L(S\ni\n) is a global evaluation \nvalue for a service S\ni\n as obtained in step 3. S\n1\n, \nS\n2\n \u2026 S\nn\n are the services which are options for \ndecomposition at the current point in the plan. \nAs R captures a normalized score for all services \ninvolved in the decomposition, a higher value \nof R reflects that all services are more desirable \nand hence the overall solution involving these \nservices is more desirable.\nControl Strategy for \nplanning process\nBecause of the complexity of business process, \nespecially the availability and suitability of \nservices, planning processes to find feasible \ncomposition plans may do much unnecessary \nwork. One of the extremes is to find just one \nplan (as in most traditional approaches). The \nother extreme would be to compute all plans \n\u2013 that is to fully extend all decomposition \nmethods. However, this does not benefit the \nuser as many plans might not be suitable for \nthe current situation, or at least not of sufficient \nquality and in addition the process to finding \nthem takes possibly quite long. So, it is crucial \nto get a balance between the number of plans \nfound and the computational effort of finding \nthem by introducing a control strategy.\nIn our former work, we used a control \nstrategy by comparing a threshold value \u03bb (with \n\u03bb \u2265 0) to the immediate reward value R of a \ndecomposition method. If R \u2265 \u03bb, the planner \nuses the method to decompose further, else \nif R < \u03bb the planner stops to decompose this \nbranch. This approach requires the user to set \nthe value for \u03bb, allowing them to control how \nmany plans would be retrieved. The case of \u03bb = \n0 would mean that all the branches will be fully \nextended and hence all possible plans would be \nfound. If a too large value is chosen, it might \nbe that no plans are found.\nOne of the difficulties with that approach \nwas choosing an appropriate value for \u03bb. \nFurthermore, choosing the right value for \u03bb in \ndynamic settings, such as the one proposed here \nwhere the reward function is based on dynamic \ndata and context information becomes even \nmore difficult, as it involves a rich reward cal-\nculation. We are proposing a reviewed strategy \nhere and will later on discuss choosing good \nvalues for \u03bb.\nDefinition 4 (Control Strategy). There is a \nthreshold value \u03bb with \u03bb \u2208 N which \ndetermines the number of decomposition \nbranches that can be extended at a specific \ndecomposition point.\nAt every decomposition point, that is a node \nin the tree which has to be decomposed further, \na decision has to be made as to how many of \nthe possible methods we wish to decompose. At \neach such point the planer calculates the immedi-\nate reward value for all feasible decomposition \nmethods and ranks them in descending order \nof immediate reward values. The ranks will \nbe indexed starting from 1. If a decomposition \nmethod rank index is i and i \u2264 \u03bb the planner \nwill decompose the method further. Otherwise, \nthat is if i > \u03bb, the planner will not decompose \nthe branch further. More colloquially, the first \n\u03bb branches will be decomposed.\nFigure 2 shows an example search tree \nfor a planning problem. Let us assume \u03bb = 2. \nNow, let\u2019s consider node 2, where we identify \n3 possible methods to decompose the node: \nm\n21\n, m\n22\n and m\n23\n. These are already conve-\nniently ranked by their immediate reward, that \nis R(m\n21\n) \u2265 R(m\n22\n) \u2265 R(m\n23\n). As \u03bb = 2 we will \nonly decompose the first two, which equal to \nthe best two choices at this point. m\n23\n will not be \ndecomposed further. A similar situation arises \nat node 4, where again there are 4 methods for \nfurther decomposition, and this time m\n43\n and \nm\n44\n will not be decomposed further. Node 3 is \nanother case: there are two options here and both \nwould be decomposed further (albeit details are \nnot shown in the figure).\nThe control strategy ensures that we reduce \nthe size of the solution space that is searched \nin such a way that the explored solutions will \nbe better suited to demands of the users. In the \ncontrol strategy previously proposed \u03bb was \ndirectly compared to the immediate reward of \na method, which meant that it was difficult (if \n60   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nnot impossible) to judge what a good value of \n\u03bb was without knowing the values of the im-\nmediate reward calculations. Furthermore, the \nimmediate reward might vary from method to \nmethod so that some nodes might have had a \nmany methods further expanded while other \nmight have had very few expanded, leading to \na very unbalanced situation. This is even more \ncritical if the immediate rewards are calculated \nusing a framework such as the one presented \nin this paper where the reward values are much \nmore dynamically gathered.\nIn Figure 2 methods are shown as labels \non branches and nodes are labeled with both \na number and a text at the side n = (T, \u03c0). The \nnumber is for convenience, the term in brackets \nis the list of tasks T which needs to be solved \nand \u03c0 is the current partial plan (essentially a \nsequence of operators) \u2013 note that once T is \nempty, \u03c0 is a feasible solution and hence a final \nplan. A node can be reached from the initial state \nS following the operators in the current (partial) \nplan \u03c0. The algorithm for HTN planning used \nis as shown in Figure 3.\nThe new strategy provides greater transpar-\nency to the user in that it is clear how many \nmethods will be expanded at each place (as-\nsuming that at least that number exists, otherwise \nall options will be explored). However, it still \nensures that the best options are expanded \nfurther, as the explored branches will be those \nwith the highest value to the user due to the \nranking by immediate reward gained. It may \nbe possible that branches which could lead to \nbetter utility further down the line will be cut \naway prematurely, but that has little conse-\nquence to the better quality plans found. In view \nof the reliability of plans during actual execu-\ntion, the partial plan composed of the operators \nwhich are found on an anterior branch is more \nimportant than the one found on the posterior \nbranch. Consequently the plans produced by \nthe HTN planning algorithm for complete de-\ncomposition are ensuring best quality.\nSince the immediate reward value R mea-\nsures the quality of a decomposition method, it \ncan also be used to evaluate the quality of plans, \nand we will come back to this in the next step \nwhen we decide on best plans.\noptimality evaluation using mdp\nAfter the completion of the HTN planning \nstep, several good plans can be provided to \nthe user, but it is the optimal plan that users \nare most concerned about. Hence, we proposed \nFigure 2. A search tree for a planning problem\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   61\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\na method to evaluate the optimality using a \nMarkov decision process (MDP) is proposed. \nMDPs provide a mathematical framework for \nmodeling decision-making in situations where \noutcomes are partly random and partly under \nthe control of the decision maker. MDPs are \nuseful for solving a wide range of optimiza-\ntion problems.\nIn the process of HTN planning, the choice \nof multiple decomposition methods can be seen \nas a decision-making process and the decision-\nmaking only connects with the current state. \nSo we construct an MDP model by introducing \nthe probability and reward value for choosing \na decomposition method and solve the model \nto find the optimal plan. The time to choose a \nmethod is at decision-making time in the plan-\nning process, such as the nodes ( , , , )1 2 3 4  in \nFigure 2. First, a list of four objects in MDP \nshould be described as (S, A, P\na\n(\u00b7,\u00b7), R\na\n(\u00b7,\u00b7)), \nwhere:\n\u2022 S is the state space,\n\u2022 A is the available action set (which is \nidentical to the available decomposition \nmethods set),\n\u2022 P\na\n(s,s\u2019) is the probability that action a in \nstate s will lead to state s\u2019.\nFigure 3. HTN planning algorithm for complete decomposition\n62   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\n\u2022 R\na\n(s,s\u2019) is the immediate reward received \nafter transition to state s\u2019 from state s.\nCalculation of transition \nprobability and reward\nIn the MDP process, the calculation of the \ntransition probability and reward is core. The \nprobability for choosing a decomposition \nmethod in HTN planning is related to the pre-\nconditions of the method. Fewer constraints \nin terms of fewer preconditions will lead to a \nsmaller risk of failure in the actual execution \nprocess. Hence, a less restrictive method has a \nhigher probability of being selected.\nAssume that a task can be decomposed by \nk methods M. Each method m\ni\n \u2208 M (with 1 < i \n< k) has n\ni\n parameters in its set of preconditions \nPre\ni\n. Then, the transition probability from s to \ns\u2019 is defined by formula (6):\n \n    (6)\nObviously considering non-functional \nproperties helps in selecting among services \nwith the same functionality and allows for \nevaluation of alternative execution paths for \nprocess adaptation. Moreover, non-functional \nproperties can be used as a basis for cost mod-\nels that drive process optimization (Garcia & \nde Toledo, 2006). This motivates us to use the \nsame immediate reward function introduced \nearlier, (formula (1)) here. This comes with the \nadded advantage that we do not calculate yet a \ndifferent value.\nSolving the mdp by Way \nof policy Iteration\nThe solution to a Markov Decision Process can \nbe expressed as a policy \u03c0, a function from states \nto actions. The standard family of algorithms \nto calculate the policy calculates two variables \nrepeatedly: one is value V, the utility value \nof state s, and the other is the policy \u03c0 which \ncontains actions A. s\u2019 is the next state achieved \nby executing an action a \u2208 A from the current \nstate s. The two variables are calculated by \nformulae (7) and (8):\n        (7)\n\u00f0 argmax , \u2019 \u2019\n\u2019\ns P s s V s\na\ns\na( ) = ( ) ( )\u2211  (8)\nAfter completing the second step of the \nHTN planning process, the plan set P has n plans. \nIn this stage policies, the set of available actions \nA and state space S required for the MDP can be \ndetermined. To obtain the policies, we simply \nassume each plan to be a policy. For example \nthe plan p1 from Figure 2 can be expressed as a \npolicy \u03c0\n1\n:{(s\n1\n,m11),(s\n2\n,m21)}, and the expected \nutility of a policy reflects the quality of the plan, \nand is calculated by formula (9):\nE s R s \u00e3 P s s E s\ni i\ns\ns\u00f0\n\u2019\n\u00f0\n, \u2019 \u2019 ,( ) = ( )+ ( ) ( )\u2211 ( )     (9)\nE s R s \u00e3 P s s E s\ni i\ns\ns\u00f0\n\u2019\n\u00f0\n, \u2019 \u2019 ,( ) = ( )+ ( ) ( )\u2211 ( )  \nwhere s is the state in policy \u03c01. Formula \n(9) calculates all the rewards on non-primitive \ntasks decompositions during the production of \na whole plan. As each layered decomposition \nis considered, the high layers gain more impact \nfor the plan than the low ones.\nThe policy iteration algorithm is used to \nfind the optimal policy, details are shown in \nFigure 4. The process is known to converge in \nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   63\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\na finite number of iterations and ends with the \noptimal policy (for a proof, we refer to Ke, \n2004).\nPolicy\tIteration:\nstart with an arbitrary policy \u03c0for i=1,2,\u2026\ncompute E s\ns\u00f0\n( )  for every s:\nE s R s s \u00e3 P s s E s\ni i\ni\ns S\ns\u00f0\n\u2019\n\u00f0\n,\u00f0 , \u2019 \u2019( ) = ( )( )+ ( ) ( )\n\u2208\n( )\u2211  \nfor every s:\n\u00f0 argmax , \u2019 \u2019\n\u2019\ns P s s V s\na A\ns S\na( ) = ( ) ( )\u2208\n\u2208\n\u2211  \nif \u00f0 \u00f0\ni i+ =1  then breakrof \n\u001f\u00f0\ni+1 is the optimal policy \nevaluation\nA Reality-Based Scenario\nTo demonstrate the feasibility of our composi-\ntion approach, we use a reality-based scenario \nwhich illustrates an online shopping process.\nSupposed that a customer wants to buy \na digital camera online and he has several \nrequirements which are: the brand and model \n(Canon IXUS85), the price (it should be lower \nthan 1400\uffe5) and the place of delivery (the \nEconomic Development Zone of Qingdao, \nChina). There will clearly be many feasible \nplans after services composition as we expect \nmany shops to sell and deliver cameras. The \nnumber of plans will immediately reduced, \nbecause the reward function will not explore \noptions where the specific model is not stocked, \nwhere it is too expensive or where carriers to \nnot deliver to Qingdao.\nLooking at the case study from a more \ntechnical level, we have a several items. First \nof all we have the definition of the goal and \ninitial state, with the first two elements being \nthe initial state and buy camera being the initial \ntask in the task list:\n(defproblem problem shopping \n((toHasGood camera) (hasMoney 2500))  \n((buy camera 2500))) \nThe first step of the planning process was \nconcerned with extracting domain knowledge \nfrom the service descriptions; recall that we \ndistinguished between operators (mapping \nFigure 4. Policy iteration algorithm for MDP\n64   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nto atomic processes which can be executed \ndirectly) and methods (describing how to de-\ncompose composite processes). In our domain \ndescription file, we have 19 operators and 29 \nmethods. Examples of these are:\n(:operator (!using_TaoBao ?x) ((toHas-\nGood  ?x)) () ((environment ?z)))\n(:operator (!using_eBay ?x) ((toHas-\nGood ?x)) () ((environment ?z))) \n(:operator (!shop_1 ?x) () () (inShop \n?z)) \n(:method (chooseEnvirionment ?x ?y) \n ((toHasGood ?x)) \n ((!using_TaoBao ?x) (doshop_TaoBao \n?x ?y)) \n) \n(:method (buy ?x ?y) \n ((toHasGood ?x) (hasMoney?y))\n ((chooseEnvirionment ?x ?y) (de-\nliver ?x ?y) (!evaluate ?x))\n) \nOperators have a name, a precondition and \nif that is fulfilled an effect on the environment. \nFor example the operator using_TaoBao has \nthe precondition (toHasGood ?x), and if the \nprecondition is satisfied, it will add the (envi-\nronment ?z) into the state .\nMethods similarly do have a name, a pre-\ncondition and a list of subtasks. So for example \n(buy ?x ?y) can decompose the task named \n\u2018buy\u2019 if the conditions (toHasGood ?x) and \n(hasMoney ?y) are satisfied into the subtasks \n(chooseEnvirionment ?x ?y), (deliver ?x ?y) \nand (!evaluate ?x).\nThe final piece of domain description avail-\nable is the information about the non-functional \nproperties of the services. Examples are:\n!using_TaoBao \ntime 25 availability 0.9 cost 1.5 lan-\nguage  English,Chinese \n!using_eBay \ntime 35 availability 0.95 cost 2.5 \nlanguage  Chinese \n!shop_1 \nsafty high cost 20 bankcard \nICBC,CCB,ABC  privacy high \nWhile in a real operating environment these \nmight be obtained in a more dynamic fashion, \nwe provide these as a description file for our \nexperiments. The file, of which the above is an \nextract, contains two lines per service: the first \nline is the service name(operator), the second \nline contains the non-functional attributes for-\nmulated as name value pairs. So for example \nthe operator using_TaoBao has non-functional \nattributes \u2018time\u2019, \u2018availability\u2019, \u2018cost\u2019 and \u2018lan-\nguage\u2019 with respective values of \u201825\u2019, \u20180.9\u2019, \n\u20181.5\u2019 and \u2018English,Chinese\u2019.\nWe have design a system to simulate the \nservices composition by using our method. \nUsing the system involves three steps. First, \nbefore planning starts we initialize the system \nby providing the SHOP2 domain description \nand the services quality context information \n(an example was shown above). After that, \nusers submit their requirements and the plan-\nning begins which is the core process for \nservices composition. This stage includes the \nplanning, service evaluation and the expected \nutility calculation. As this system is intended \nfor experimental use, the plans are shown \nwhen planning has finished and the expected \nutility value and execution sequence for each \nplan can be viewed. Obviously the plan with \nthe highest utility value is the best plan. An \nexample of services composition plans based \non the case study is shown in Figure 5, and we \ncan see that there are six plans satisfying the \ncustomer\u2019s requirements.The whole planning \nprocess is shown in Figure 6.\nAnalysis\nThere are a number of areas to be analyzed. Of \ncourse there is the issue of gathering and evalu-\nating the criteria value for the non-functional \nproperties: The actual calculations are quite \nstraight forward, but of course for each service \neach criteria needs to be looked at. However, \nthis has been shown to be quite feasible and \nefficient in Yu (2009). Furthermore, for this \nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   65\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nspecific aspect it can be commented that taking \na little longer but identifying the right services \nwill still be much faster than executing services \nwhich form part of process, especially if we \nrealize during execution that a chosen service \nis simply not suitable.\nMore crucially, and much closer related to \nthe key aspect of this paper is the complexity \nof the planning task. It is obvious that tasks \nwith different complexity have different sizes \nof solution space. Users would expect that suf-\nficient and better plans can be provided \u2013 naively \nassuming that all possible solutions would be \nconsidered. However a task might be so com-\nplex that the search time will be extremely long \nand there will be many redundant plans. We \ncan control the search space by adjusting the \nthreshold value \u03bb which by allowing or hindering \ndecomposition of certain branches controls the \nmaximum number of extended decomposition \nbranches and hence the overall search space.\nWe have conducted some experiments to \nshow the effect of control strategy and gain an \nunderstanding of the complexity involved \u2013 \nwhile this could be done theoretically we have \nchosen the more practical approach as we feel \nthat it provides a good understanding and is \nmore aligned with the aim of the overall work: \nto be suitable for us in reality.\nThe hardware environment for the experi-\nment was a standard PC with a Pentium 4 CPU \nrunning at 2.8 GHZ with 512MB Memory. \nThe setup was such that we have searched the \nwhole solution space as a reference value and \nthen gradually reduced the threshold value \u03bb.\nThe results for the shopping example \npresented earlier can be found in Table 1. Obvi-\nously, the threshold value \u03bb is directly propor-\ntional to the planning time t and the number of \nfound plans n. In each set of plans found, we \nhad indicated the optimal plan according to its \nexpected utility value. We observed that each \nset contained the same optimal plan both in \nterms of services selected and their ordering \n(note that kept the environment stable, that is \nthe non-functional properties are always evalu-\nated to the same scores; changing that would \nobviously lead to different plans). The optimal \nplan is the service sequence:\n\u201c!using_DanDang!shop_1!bank_\nICBC!Alipay!sendBy_Express_\nSTO!evaluate\u201d.\nFigure 5. A shopping example of services composition in E-Commerce\n66   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nFigure 6. The planning process for services composition\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   67\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nTo identify suitable values for \u03bb, we need \nto consider the tradeoff between finding suf-\nficient plans and being economical on the time \nused. Figure 7 shows two lines depicting these \nissues. One line indicates the relation between \nthreshold \u03bb and the number n of plans found; \nthe other indicates the relation between thresh-\nold \u03bb and the reciprocal of the planning time \n1\/t. Clearly these two lines will intersect (one \nwill always increase, the other decrease) and \nthe intersection point will fall into an interval \n[\u03bb\ni\n,\u03bb\ni+1\n]. In the given scenario the interval is \n[2,3]. Manually analyzing the result sets, we \ndetermined that setting \u03bb to a boundary value \nof the interval determined by the interaction \npoint, a good number of plans with little redun-\ndancy is found while maintaining a good search \ntime. We conclude that the intersection point \nof the two graphs determines good values for \n\u03bb. In general we found from this and a number \nof other case studies that values of 2 or 3 are \ngenerally best for \u03bb.\nrelAted Work\nKuter et al. (2005) present an HTN planning \nalgorithm, ENQUIRER, designed for planning \ndomains and in which the information about the \ninitial state of the world may not be complete. \nBy using ENQUIRER, information is discover-\nable through planning-time information gather-\ning queries. In ENQUIRER, some limitations \nin their previous work (Sirin et al., 2004) are \novercome, which makes service composition \nsound and complete. Our work is based on that \npresented by Sirin et al. (2004). Our approach \nimproves the composition method to provide \nmultiple plans and also to consider the non-\nfunctional properties of Web services in the \nplanning process in addition to provide the best \nsolution for each user in their given situation.\nThe work by L\u00e9cu\u00e9 (2009) and L\u00e9cu\u00e9, Del-\nteil, and Leger (2008) focuses on casual links, \nthat is the functional dependencies between \nservices. This is formulated as an Integer Pro-\ngramming problem and the solver is entrusted \nwith finding a sequence of operations, that is \none plan. The work presented here uses HTN \nplanning rather than a constraint based solution, \nbut more crucially enhances on two aspects: we \nare looking for the best plan in that the planning \npart of our work searches for multiple plans, \nnot just one and furthermore does not consider \nnon-functional properties at all.\nFurther, Zhang, Zhang, Cao, and Mou \n(2004) propose an enhanced HTN planning \nmethod combined with partial-order planning \n(POP) for service composition in which action \ndecompositions are used as plan refinements \nin POP. Compared to the pure HTN planning, \ntheir approach can solve certain tasks, which \nare novel conjunctive goals. In our approach, \nwe also focus on the decomposition in HTN \nplanning, improving the decomposition for \nTable 1. Planning results under different threshold (a) \n\u03bb n t(ms) optimal\tplan\n8 128 250 plan_98\n7 112 234 plan_86\n6 96 219 plan_74\n5 80 203 plan_62\n4 64 188 plan_50\n3 27 141 plan_20\n2 8 78 plan_5\n1 1 31 plan_1\n0 0 - -\n68   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nnon-primitive tasks, but rather than trying to \nsolve new types of goals, we wish to search \nmore potential feasible solutions.\nPaik et al. (2006) suggest a combined \narchitecture, which consists of HTN planning \nand Constraint Satisfaction Problem (CSP) as \nan underlying problem-solving engine to auto-\nmate Web service composition, especially for \ncomposition problems with many parameters. \nIn the architecture, a complete semantic concept \nfor CSP is defined using OWL, which allows \nfor solver agents to automatically solve a given \nproblem with greater flexibility and more intel-\nligently. This work focuses using CSP for the \nsemantic web. The CSP solver is part of the \ncombined architecture, but not tightly integrated \ninto the HTN planning.\nDoshi, Goodwin, Akkiraju, and Verma \n(2004) model the workflow composition \nproblem as an MDP, which handles non-deter-\nministic behaviors of Web services in dynamic \nenvironments during the plan execution phase. \nA policy computed by MDP for generating \nworkflows is capable of optimally recovering \nfrom Web service failures. MDPs have been \nused by other for related problems as well, for \nexample for the selection of single services \n(Cai, Luo, Qian, & Gao, 2005). We use MDP \nto evaluate optimality of plans when selecting \namong multiple available plans.\nThiagarajan and Stumptner (2007) consider \nservice composition as configuration tasks, \nassuming an abstract workflow (that is the \nstructure of a composition). In their work they \nuse constraint based generation of the plans \nrepresenting the composition problem as a \nconstraint based meta model. They also discuss \nthe inclusion of cost-based optimisation and \npreferences. Similar efforts are presented by \nHassine, Matsubara, and Ishida (2006) use a \nCSP solver to find a solution of instantiating an \nabstract workflow with concrete ones with the \ngoal of satisfying the users\u2019 requirements at a \nglobal level. User requirements are expressed as \nconstraints. Our work differs from these efforts \nin that we do not require an abstract workflow.\nConCluSIon And \nfuture Work\nIn this paper, a novel composition model based \non HTN planning with MDP-LSP has been \nFigure 7. Planning results under different threshold (b)\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   69\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nproposed. With this model, more than one plan \nis found and the evaluation mechanism in the \nmodel provides the optimal plan based on non-\nfunctional aspects.\nMDP is an efficient method to solve opti-\nmization problems, like choosing the best plan \nin service composition. In order to demonstrate \nthe feasibility and validity for using MDP in \nconjunction with HTN to find the optimal plan, \nwe experimented on an e-travel composition \nexample with random QoS data in our former \nwork (Chen et al., 2009). In that experiment, \nwe have found that while this returned the \nright result and worked well, there were some \naspects that could be improved. In this paper, \nwe presented a new immediate reward function \nto adjust to dynamic context information for \nservice evaluation. The general problem with \nidentifying a cut-off threshold in the reward \nfunction and the further complication of that \nmatter due to the more dynamic utility values \nled to the consideration of a new control strategy. \nThis has been presented in this paper and has \nbeen applied to a larger, more realistic case study.\nWith a choice of Web services composition \nplans, users can be more flexible in accomplish-\ning their tasks in the most suitable way. They \ncan adopt the optimal plan that our method \nprovides, but they can also choose freely ac-\ncording to their own preference from a number \nof alternatives. Moreover, when executing the \nselected plan results in failure, candidate plans \ncan ensure the tasks will be completed without \nconstraints slacking or premises increasing.\nWhile our method can provide multiple \nplans for users, we will explore a re-planning \nmechanism to be used when plan execution re-\nsults in failure. Using this mechanism, a process \nof plan execution can be continued automati-\ncally from an appropriate service node and the \nnegative impact of a failure will be minimized.\nACknoWledGment\nThis work is jointly supported by the Na-\ntional Natural Science Foundation of China \n(No.60672121), National Key Basic Re-\nsearch Program of China (973 Program) \n(2009CB320406) and the Foundation for \nInnovative Research Groups of the National \nNatural Science Foundation of China (Grant \nNo. 60821001).\nreferenCeS\nAkkiraju, R., Srivastava, B., Ivan, A.-A., Goodwin, \nR., & Syeda-Mahmood, T. (2006, September). \nSEMAPLAN: Combining Planning with Semantic \nMatching to Achieve Web Service Composition. In \nProceedings of the IEEE International Conference \non Web Services, Chicago, IL (pp. 37-44).\nCai, D., Luo, Z., Qian, K., & Gao, Y. (2005, Novem-\nber). Towards efficient selection of Web services with \nreinforcement learning process. In Proceedings of \nthe 17th IEEE International Conference on Tools \nwith Artificial Intelligence (ICTAI 05), Hong Kong \n(pp. 372-276).\nCanfora, G., Di Penta, M., Esposito, R., & Villani, \nM. L. (2005, June). An approach for QoS-aware \nservice composition based on genetic algorithms. \nIn Proceedings of the 2005 Conference on Genetic \nand Evolutionary Computation, Washington, DC \n(pp. 1069-1075).\nChen, K., Xu, J., & Reiff-Marganiec, S. (2009, July). \nMarkov-HTN Planning Approach to Enhance Flex-\nibility of Automatic Web Service Composition. In \nProceedings of the IEEE International Conference \non Web Services, Los Angeles, CA (pp. 9-16).\nDoshi, P., Goodwin, R., Akkiraju, R., & Verma, K. \n(2005). Dynamic Workflow Composition: Using \nMarkov Decision Processes. International Journal \nof Web Services Research, 2(1), 1\u201317. doi:10.4018\/\njwsr.2005010101\nDujmovic, J. J., & Larsen, H. (2004). Properties \nand modeling of partial conjunction\/disjunction. In \nCurrent Issues in Data and Knowledge Engineering: \nProceedings of the Eurofuse Workshop on Data and \nKnowledge Engineering (pp. 215-224).\nGarcia, D. Z. G., & de Toledo, M. B. F. (2006, \nNovember). Semantics-enriched QoS policies for \nweb service interactions. In Proceedings of the 12th \nBrazilian Symposium on Multimedia and the Web \n(WebMedia 2006) (pp. 35-44).\nGerevini, A., & Long, D. (2005). Plan Constraints \nand Preferences in PDDL3 (Tech. Rep.). Brescia, \nItaly: Department of Electronics for Automation, \nUniversity of Brescia.\n70   International Journal of Web Services Research, 8(2), 51-71, April-June 2011\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nHassine, A. B., Matsubara, S., & Ishida, T. (2006). \nA Constraint-Based Approach to Horizontal Web \nService Composition. In Proceedings of the 2006 \nInternational Semantic Web Conference (ISWC \n2006) (pp. 130-143).\nKuter, U., Sirin, E., Parsia, B., Nau, D. S., & Hen-\ndler, J. A. (2005). Information gathering during \nplanning for Web Service composition. Journal of \nWeb Semantics, 3(2-3), 183\u2013205. doi:10.1016\/j.\nwebsem.2005.07.001\nL\u00e9cu\u00e9, F. (2009, October). Optimizing QoS-Aware \nSemantic Web Service Composition. In Proceedings \nof the 2009 International Semantic Web Conference \n(ISWC 2009), Chantilly, VA (pp. 375-191).\nL\u00e9cu\u00e9, F., Delteil, A., & Leger, A. (2008). Optimiz-\ning Causal Link Based Web Service Composition. \nIn Proceedings of the 18th European Conference on \nArtificial Intelligence (ECAI\u201908) (pp. 45-49).\nLin, N., Kuter, U., & Hendler, J. (2007, July). Web \nService Composition via Problem Decomposition \nacross Multiple Ontologies. In Proceedings of the \nIEEE Conference on Services, Salt Lake City, UT \n(pp. 65-72).\nNau, D., Mu\u00f1oz-Avila, H., Cao, Y., Lotem, A., & \nMitchell, S. (2001, August). Total-Order Planning \nwith Partially Ordered Subtasks. In Proceedings of \nthe IJCAI 2001 Conference, Seattle, WA.\nNau, D. S., Au, T.-C., Ilghami, O., Kuter, U., Mur-\ndock, J. W., Wu, D., & Yaman, F. (2003). SHOP2: \nAn HTN Planning System. Journal of Artificial \nIntelligence Research, 20, 379\u2013404.\nPaik, I., Maruyama, D., & Huhns, M. N. (2006, Sep-\ntember). A Framework for Intelligent Web Services: \nCombined HTN and CSP Approach. In Proceedings \nof the IEEE International Conference on Web Ser-\nvices, Chicago, IL (pp. 959-962).\nReiff-Marganiec, S., Yu, H. Q., & Tilly, M. (2009). \nService Selection based on Non-Functional Proper-\nties. In Proceedings of the ICSOC 2007 Workshops \n(LNCS 4907, pp. 128-138).\nSchuschel, H., & Weske, M. (2004, June). Automated \nPlanning in a Service-Oriented Architecture. In Pro-\nceedings of the 13th IEEE International Workshops \non Enabling Technologies: Infrastructure for Col-\nlaborative Enterprises, Modena, Italy (pp. 75-80).\nSirin, E., Parsia, B., Wu, D., Hendler, J. A., & Nau, \nD. S. (2004). HTN planning for Web Service com-\nposition using SHOP2. Journal of Web Semantics, \n1(4), 377\u2013396. doi:10.1016\/j.websem.2004.06.005\nThiagarajan, R., & Stumptner, M. (2007). Service \nComposition With Consistency-based Matchmak-\ning: A CSP-based Approach. In Proceedings of the \nECOWS 2007 Conference (pp. 22-32).\nWeiss, M., Esfandiari, B., & Luo, Y. (2007). Towards \na classification of web service feature interactions. \nInternational Journal of Computer and Telecom-\nmunications Networking, 51(2), 359\u2013381.\nWorld Wide Web Consortium. (2004). OWL-S: \nSemantic Markup for Web Services. Retrieved Janu-\nary 27, 2010, from http:\/\/www.w3.org\/Submission\/\nOWL-S\/\nYu, H. Q. (2009). Context Aware Automatic Service \nSelection. Unpublished doctoral dissertation, Uni-\nversity of Leicester, UK.\nYu, H. Q., & Reiff-Marganiec, S. (2008, July). A \nMethod for Automated Web Service Selection. In \nProceedings of the 2nd International Workshop on \nWeb Service Composition and Adaptation (WSCA-\n2008) (pp. 513-520).\nZhang, J., Zhang, S., Cao, J., & Mou, Y. (2004, \nSeptember). Improved HTN Planning Approach for \nService Composition. In Proceedings of the IEEE \nInternational Conference on Services Computing, \nShanghai, China (pp. 609-612).\nendnote\n1  In this paper, HTN planning is based on the \nClose World assumption, which is means all \nthe tasks for expressing users\u2019 requirements \nmust be one of the elements in task ontology.\nInternational Journal of Web Services Research, 8(2), 51-71, April-June 2011   71\nCopyright \u00a9 2011, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.\nJiuyun Xu is a professor at School of Computer & Communication Engineering located at \nChina University of Petroleum. He obtained his PhD in Computer Science in 2004 from Beijing \nUniversity of Posts & Telecommunications. He was as an honorary research fellow visiting \nUniversity of Leicester, which is sponsored by China Overseas Scholarship Committee. In his \nPhD, Jiuyun investigated Feature Interactions in Next Generation Networks. His research in-\nterests are focused on Semantic Web Service Composition with a specific view of using Immune \nAlgorithm, Markov Decision Process and other AI techniques which are not only to find suitable \ncompositions, but to find the best possible plans based on non-functional properties. Another \nkeen area of interest is that of Feature Interactions, where Jiuyun is looking at runtime detection \nand resolution mechanisms. Jiuyun is also interested in semi-automatic or automatic generate \nontology, ontology mapping in Semantic Web and natural language understanding. Jiuyun has \nextensively published in these areas. Jiuyun is a session Chair of the third International Confer-\nence on Natural Computation. And Jiuyun is the member of Yocsef (China Computer Federation \nYoung Computer Scientists & Engineers Forum ) QingDao Academic Committee. \nKun Chen has obtained a Bachelor degree of Computer Science at China University of Petro-\nleum in 2007. He is currently a master student under the supervision of Jiuyun Xu. His main \nresearch interests concern Semantic Web services, particularly investigating services composi-\ntion and feature interaction among services. The type of problem he looks at is how to enhance \nthe services composition based on AI planning techniques and how to solve the conflicts during \nthe services execution. \nStephan Reiff-Marganiec is a Senior Lecturer in the Department of Computer Science at the \nUniversity of Leicester, which he joined in 2003. He worked in the computer industry in Germany \nand Luxembourg for several years. From 1998 to 2001, he worked as a Research Assistant on \nthe EPSRC HFIG project at the University of Glasgow, while at the same time reading for a PhD \nin Computing Science. The work performed at Glasgow investigated hybrid approaches to the \nfeature interaction problem. From 2001 to 2003 Stephan worked as a Research Fellow on the \nEPSRC ACCENT project at the University of Stirling, investigating policies, emerging features \nand associated conflict resolution techniques. Stephan has since been working in the areas of \nservices and features considering service selection based on non-functional properties as well \nas policies as mechanisms for system flexibility. Stephan has in the order of 40 publications in \ninternational conferences and journals in these areas. Stephan was responsible for organising \nthe British Colloquium for Theoretical Computer Science in 2001 and again in 2004 and since \n2004 has been treasurer of BCTCS. He was also co-Chair of the 8th and 10th International \nConference on Feature Interactions in Telecommunications and Software Systems (ICFI05 and \nICFI09), co-Chair of the second, third and fourth Young Researchers Workshop in Service Ori-\nented Computing (YR-SOC 2007, 08 and 09) and is senior member of the steering committee for \nYR-SOC. Stephan was principal investigator of the project \u201cAd-Hoc Web Applications\u201d funded \nby the Nuffield foundation and leader of workpackages and tasks in the EU funded projects \nLeg2Net, Sensoria and inContext focusing on automatic service adaption, context aware service \nselection, workflows and rule based service composition. He is co-editor of the Handbook on \nNon-functional properties for Service oriented Systems to appear in 2011.\n"}