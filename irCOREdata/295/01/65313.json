{"doi":"10.1007\/978-3-540-39893-6_9","coreId":"65313","oai":"oai:dro.dur.ac.uk.OAI2:6235","identifiers":["oai:dro.dur.ac.uk.OAI2:6235","10.1007\/978-3-540-39893-6_9"],"title":"The equivalence of statecharts.","authors":["Long, Q.","Qiu, Z.","Qin, S."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":["Dong,  J. S.","Woodcock,  J."],"datePublished":"2003-11-07","abstract":"This paper proposes a compositional operational semantics for a nontrivial subset of Statecharts and defines an equivalence relation between Statecharts using bisimulation on configurations. An input\/response trace model is also investigated at the level of observable behaviour","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65313.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6235\/1\/6235.pdf","pdfHashValue":"214829f3efedd7296598971e3b7d942257092a84","publisher":"Springer","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6235<\/identifier><datestamp>\n      2015-03-31T12:02:04Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        The equivalence of statecharts.<\/dc:title><dc:creator>\n        Long, Q.<\/dc:creator><dc:creator>\n        Qiu, Z.<\/dc:creator><dc:creator>\n        Qin, S.<\/dc:creator><dc:description>\n        This paper proposes a compositional operational semantics for a nontrivial subset of Statecharts and defines an equivalence relation between Statecharts using bisimulation on configurations. An input\/response trace model is also investigated at the level of observable behaviour.<\/dc:description><dc:publisher>\n        Springer <\/dc:publisher><dc:source>\n        Dong,  J. S. & Woodcock,  J. (Eds.). (2003). Formal methods and software engineering : 5th International Conference on Formal Engineering Methods, ICFEM 2003, 5-7 November 2003, Singapore ; proceedings. . Berlin: Springer , pp. 125-143, Lecture notes in computer science(2885)<\/dc:source><dc:contributor>\n        Dong,  J. S.<\/dc:contributor><dc:contributor>\n        Woodcock,  J.<\/dc:contributor><dc:date>\n        2003-11-07<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6235<\/dc:identifier><dc:identifier>\n        issn:0302-9743<\/dc:identifier><dc:identifier>\n        issn: 1611-3349<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6235\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1007\/978-3-540-39893-6_9<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6235\/1\/6235.pdf<\/dc:identifier><dc:rights>\n        The final publication is available at Springer via http:\/\/dx.doi.org\/10.1007\/978-3-540-39893-6_9<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0302-9743"," 1611-3349","issn: 1611-3349","issn:0302-9743"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2003,"topics":[],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n11 December 2009\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nLong, Q. and Qiu, Z. and Qin, S. (2003) \u2019The equivalence of Statecharts.\u2019, in Formal methods and software\nengineering : 5th International Conference on Formal Engineering Methods, ICFEM 2003, 5-7 November 2003,\nSingapore ; proceedings. Berlin: Springer , pp. 125-143. Lecture notes in computer science. (2885).\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1007\/b94115\nPublisher\u2019s copyright statement:\nThe original publication is available at www.springerlink.com\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n  \nDurham Research Online \n \nDeposited in DRO: \n11 December 2009 \n \nPeer-review status: \nPeer-reviewed \n \nPublication status: \nAccepted for publication version \n \nCitation for published item: \nLong, Q. and Qiu, Z. and Qin, S. (2003) 'The equivalence of Statecharts.', in Formal \nmethods and software engineering : 5th International Conference on Formal Engineering \nMethods, ICFEM 2003, 5-7 November 2003, Singapore ; proceedings. Berlin: Springer , pp. \n125-143. Lecture notes in computer science. (2885). \n \nFurther information on publishers website: \nhttp:\/\/dx.doi.org\/10.1007\/b94115 \n \nPublishers copyright statement: \nThe original publication is available at www.springerlink.com \n \n \n \n \n \n \n \n \n \n \n \nUse policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior \npermission or charge, for personal research or study, educational, or not-for-profit purposes provided that : \n \n\uf0a7 a full bibliographic reference is made to the original source \n\uf0a7 a link is made to the metadata record in DRO \n\uf0a7 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders. \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nThe Equivalence of Statecharts?\nQuan Long1, Zongyan Qiu1, and Shengchao Qin2\n1 LMAM, Department of Informatics, School of Mathematical Sciences,\nPeking University, Beijing, China 100871\nlq@is.pku.edu.cn,zyqiu@pku.edu.cn\n2 Singapore-MIT Alliance, National University of Singapore\nqinsc@comp.nus.edu.sg\nAbstract. This paper proposes a compositional operational semantics\nfor a nontrivial subset of Statecharts and defines an equivalence rela-\ntion between Statecharts using bisimulation on configurations. An in-\nput\/response trace model is also investigated at the level of observable\nbehaviour.\n1 Introduction\nStatecharts is a visual synchronous specification language introduced by David\nHarel originally in the early 1980s [4], which is an extension of the finite state\nmachine by hierarchy, concurrency and broadcasting communication. Quoting\nthe words of D.Harel [4],\nStatecharts = state diagram + depth +\northogonality + broadcast communication\nStatecharts was invented originally for the development of the avionics system\nfor an Israeli aircraft, and has seen widespread use since then (e.g. [11]). It is\ndesirable to be a tool for specifying real-time, reactive and embedded systems.\nSome development environments, such as STATEMATE [4, 5], are developed to\nsupport the specification of applications with Statecharts. The formalism acts\nnow also as one of the major components of UML [2].\nStatecharts can be thought as an enrichment of finite-state transition sys-\ntems. Here the states can have hierarchical structures and may consist of several\nsub-states, in fact, sub-Statecharts. These sub-Statecharts can themselves have\nembedded sub-Statecharts too. Statecharts may be composed sequentially or in\nparallel to form Or-Statecharts or And-Statecharts respectively.\nThe execution of Statecharts is defined by the active states and transitions.\nIn a Statechart, there are usually several simultaneously active states (sub-\nStatecharts) at a time instant, they communicate with each other via broad-\ncasting events in a global environment. The transitions defined determine the\ntransference of active states. Each of the transitions is labeled by a pair of sets of\n? Supported by National Natural Science Foundation of China (No. 60173003)\nn\r1\r n\r2\r\ns\rc\r\nt\r1\r \r :\r\np\r2\r\np\r1\r\nt\r2\r \r :\r\np\r4\r\np\r3\r\nd\r\/\re\ra\r ,\r -\rb\r \/\rc\r\nFig. 1. A simple Statechart\nevents, where the first set of events is called the trigger of the transition which\nmay include both positive and negative events, and the second is referred to as\nthe action which can in turn act as triggers to fire other transitions. A transition\nconnects a pair of states, with the first one as its source state and the second\none as its target. Intuitively, if the source state of a transition is active, and all\npositive events from its trigger are present while all negative ones are absent, the\ntransition is enabled and may be performed. When a transition is performed,\nthe events in its action will be generated, and the target state of the transition\nbecomes active afterward.\nFig.1 shows a simple Statechart. It consists of only one And-Statechart\nnamed sc. The Statechart sc is composed of two parallel sub-Statecharts named\nn1 and n2. Both n1 and n2 are Or-Statecharts. Or-Statechart n1 is refined to\nbasic Statecharts p1 and p2, which are connected by transition t1 with trigger\n{a,\u2212b} (Here we use \u2212b to indicate that event b is absent.) and action c. The\nfigure shows that, in the current situation, the active state of n1 is p1. When\nevent a occurs but b does not, t1 can be performed, thus the event c is generated\nas the action of t1, and the active state will be transferred to p2. On the other\nside, Or-Statechart n2 is composed of two basic Statecharts p3 and p4, which are\nconnected by transition t2. The active state of n2 is p4.\nIn literatures, there exist a number of different semantics for variants of\nStatecharts. M. von der Beeck discussed about twenty variants of Statecharts\nin [1], each of these variants can be regarded as a subset of the originally pro-\nposed language. The version discussed in [5] for STATEMATE has a powerful\nsemantics. But the semantics defined in that paper is neither formal, nor com-\npositional. The work presented in [12] gives a compositional semantics of State-\ncharts, whereas their version does not contain data states. In [16], M.Schettini,\nA.Peron and S.Tini had a discussion about the equivalence of Statecharts. They\npresented a compositional semantics of Statecharts based on Labelled Transition\nSystems(LTSs). They considered a hierarchy of LTSs equivalences and gave the\ncongruences to Statecharts operators.\nIn this paper, we present a semantics for Statecharts which is quite similar to\nthat proposed by Qin and Chin [15]. Both semantics have such features as being\ncompositional, adopting an asynchronous time model, reflecting the causality of\nevents, obeying local consistency and covering the data states. The only differ-\nence between ours and Qin and Chin\u2019s is that in our semantics an active event\ncan be used many times within a macro-step. Based on this semantics, we build\na bisimulation between configurations of Statecharts. Borrowing the idea of [9]\nand [7], we give a definition of the equivalence of Statecharts different from that\nin [16]. It looks as if our definition were weaker. But actually, from this new\ndefinition, we can get the same results as part of that in [16] in a much simpler\nway. We will have a detailed discussion about this in Section 6. We also have a\nbrief discussion about the traces of Statecharts configurations on the macro-step\nlevel.\nThe next section gives a brief description of term-based syntax of Statecharts.\nIn Section 3, we present our new semantics by a set of operational transition\nrules. In Section 4, we define the equivalence of Statecharts and prove that\nthe definition is appropriate for getting the needed properties of equivalence.\nDiscussed in Section 5 are the definition and properties of traces of Statecharts\nconfigurations. The related works are discussed in Section 6. Finally, Section 7\ncontains our conclusions and directions for future research.\n2 Term-based Syntax of Statecharts\nTo facilitate our discussion, we use the textual representation for Statecharts that\nwas also given in Qin and Chin [15]. The formal term-based syntax definition\nfor Statecharts is depicted in what follows.\nSuppose we have the following sets:\n\u2013 N : The set of names used to denote Statecharts. We assume that the set is\nlarge enough for all the Statecharts.\n\u2013 \u03a0e: The set of all positive events.\n\u2013 \u03a0e\u00af: The set of all negative events, that is, \u03a0e\u00af =def {e\u00af|e \u2208 \u03a0e}. We assume\nthat e\u00af = e.\n\u2013 \u03a0a: The set of all assignment actions. These actions have the form \u03bd = exp.\n\u2013 T : The set of all possible transitions, T \u2286 N \u00d7 2\u03a0e\u222a\u03a0e\u00af \u00d7 2\u03a0e\u222a\u03a0a \u00d7N , where\nthe first N denotes the source sub-state, the last N is the target sub-state,\n2\u03a0e\u222a\u03a0\u00afe the trigger and 2\u03a0e\u222a\u03a0a the new events and assignments which were\ngenerated and performed by the transition of T .\nDefinition 2.1. The set SC of Statecharts is defined inductively as follows:\n1. Basic: N \u2192 SC:\nBasic(n) =def [n]\n2. Or: N \u00d7 \u3008SC\u3009 \u00d7 SC \u00d7 2T \u2192 SC:\nOr(n, \u3008P1, \u00b7 \u00b7 \u00b7 , Pl, \u00b7 \u00b7 \u00b7 , Pm\u3009, Pl, T ) =def [n, (P1, \u00b7 \u00b7 \u00b7 , Pm), Pl, T ]\n3. And: N \u00d7 2SC \u2192 SC:\nAnd(n, {P1, \u00b7 \u00b7 \u00b7 , Pm}) =def [n, (P1, \u00b7 \u00b7 \u00b7 , Pm)]\nNote that we use square brackets to enclose a Statechart, use \u3008SC\u3009 to denote\nall sequences of Statecharts of SC. Following are some explanations of the con-\nstructions of Statecharts.\n\u2022 Basic(n) denotes a basic Statechart named n.\n\u2022 Or(n, \u3008P1, \u00b7 \u00b7 \u00b7 , Pl, \u00b7 \u00b7 \u00b7 , Pm\u3009, Pl, T ) denotes an Or-Statechart named n with a\nsequence of sub-states \u3008P1, \u00b7 \u00b7 \u00b7 , Pm\u3009, where P1 is the default sub-state and Pl\nis the active sub-state currently. Notice that the sub-states are defined as a\nsequence rather than a set, to indicate that P1 is the default sub-state. The\norder of other sub-states is arbitrary. T is the set composed of all possible\ntransitions among the sub-states of n.\n\u2022 And(n, {P1, \u00b7 \u00b7 \u00b7 , Pm}) denotes the And-Statechart named n, which contains\na number of parallel sub-states P1, \u00b7 \u00b7 \u00b7 , Pm, where P1, \u00b7 \u00b7 \u00b7 , Pm are basic Stat-\necharts or Or-Statecharts (but not And-Statecharts).\nExample 2.1. The term-based syntax for the Statechart shown in Fig.1 is\ngiven below:\n1. N = And(sc, {n1, n2}) = [sc, (n1, n2)];\n2. n1 = Or(n1, \u3008p1, p2\u3009, p1, {t1}) = [n1, (p1, p2), p1, {\u3008p1, {a, b\u00af}, {c}, p2\u3009}];\n3. n2 = [n2, (p3, p4), p4, {\u3008p3, {d}, {e}, p4\u3009}];\n4. Definition of p1, p2, p3, p4, etc.\nNote that we use \u3008pi, E,A, pj\u3009 to represent a transition from state pi to pj\nwith trigger set E and action set A. uunionsq\nIt should be noticed that our version is a subset of Harel\u2019s original definition.\nWe do not include timeout events, inter-level transitions and some other minor\nfeatures.\n3 Operational Transition Rules\nBefore presenting the semantics for Statecharts, we define configurations of Stat-\necharts first. A configuration of Statecharts is defined as a triple \u3008P, \u03bd,E\u3009, where\n\u2022 P is the syntax of the Statechart of interest.\n\u2022 \u03bd is a snapshot of data items (data state).\n\u2022 E \u2286 \u03a0e is a set of active events.\nThe behavior of a Statechart is composed of a sequence of macro-steps, each\nof which comprises a sequence of micro-steps which are triggered by the external\nor internal events. A Statechart reacts to any stimulus from the environment at\nthe beginning of each macro-step by performing a sequence of transitions and\ngenerating some internal events (by the actions of the transitions it performs),\nwhich can in turn fire other state transitions and lead to a chain of micro-steps\nwithout advancing time. During this chain of micro-steps, the Statechart does\nnot respond to any (potentially) further external stimulus. In case that no more\ntransitions, except for the clock tick, are enabled, the macro-step comes to the\nend. The clock tick transition then occurs, which empties the set of currently\nactive events and advances time by one unit. Then, the Statechart is ready\nagain to accept another external stimuli and start off the next macro-step. The\nrelationship of macro-step and micro-step was discussed in details by G. Lu\u00a8ttgen,\nM. von der Beeck and R. Cleaveland [12].\nWe explore the following transition rules, consisting of state transitions rules\nand time advance transitions rules.\nThe first transition rule initiates a macro-step for a Statechart. It is the first\nmicro-step of a macro-step. It performs only when a set of events E arrives (due\nto the environment) and the Statechart is ready to accept them.\nRule 3.1 (Initiate). \u3008P, \u03bd, \u03c6\u3009 E\u2212\u2192 \u3008P, \u03bd,E\u3009 uunionsq\nIn an Or-Statechart, if a transition between two immediate connected sub-\nstates is enabled, the transition can be performed.\nRule 3.2 (Or). Suppose P is an Or-Statechart and P = [n, (P1, \u00b7 \u00b7 \u00b7 , Pm), Pl, T ],\n\u03c4 \u2208 En(P,E). Then we can have\n\u3008P, \u03bd,E\u3009 \u03c4\u2212\u2192 \u3008[n, (P1, \u00b7 \u00b7 \u00b7 , Pm), a2d(tgt(\u03c4)), T ], \u03bd\u2032, E \u222a acte(\u03c4)\u3009\nwhere\n\u2013 En(P,E) =def {\u03c4 \u2208 T |sre(\u03c4) = Pl \u2227 trig+(\u03c4) \u2286 E \u2227 trig\u2212(\u03c4) \u2229 E = \u03c6} is\nthe set of transitions enabled in current configuration on the \u201chighest level\u201d.\n\u2013 sre(\u03c4) and tgt(\u03c4) are the source and target states of transition \u03c4 , respectively.\n\u2013 acte(\u03c4) denotes the set of events generated by transition \u03c4 .\n\u2013 trig+(\u03c4) and trig\u2212(\u03c4) are respectively the set of positive events and the set\nof negative ones that form the trigger of the transition \u03c4 .\n\u2013 The function a2d(P ) maps the sub-state p of P to its default sub-state\n(recursively). Its definition is:\na2d([n]) =def [n]\na2d([n, (P1, \u00b7 \u00b7 \u00b7 , Pm), Pl, T ]) =def [n, (P1, \u00b7 \u00b7 \u00b7 , Pm), a2d(P1), T ]\na2d([n, (P1, \u00b7 \u00b7 \u00b7 , Pm)]) =def [n, (a2d(P1), \u00b7 \u00b7 \u00b7 , a2d(Pm))]\n\u2013 \u03bd\u2032 denotes the new data states which might be updated by actions of \u03c4 . uunionsq\nIf no transition among immediate sub-states of an Or-Statechart is enabled,\nthen the transitions in its active sub-state can be performed.\nRule 3.3 (Or-Substate). Suppose P = [n, (P1, \u00b7 \u00b7 \u00b7 , Pm), Pl, T ] is an Or-State-\nchart, En(P,E) = \u03c6, and \u3008Pl, \u03bd, E\u3009 \u03c4\u2212\u2192 \u3008P \u2032l , \u03bd\u2032, E\u2032\u3009, then\n\u3008P, \u03bd,E\u3009 \u03c4\u2212\u2192 \u3008[n, (P1, \u00b7 \u00b7 \u00b7 , Pm), P \u2032l , T ], \u03bd\u2032, E\u2032\u3009\nuunionsq\nFromRule 3.3 we know that, the enabled transitions of the higher level Stat-\nechart will have the relative higher priority of being chosen, while simultaneously\nenabled transitions of the embedded Statecharts will be discarded.\nNotice that the transition \u03c4 in above rule may be the conjunction of a set of\ntransitions, because Pl can be an And-Statechart (See Rule 3.4 below). We use\nalso symbol \u03c4 to denote that case for convenience and shall follow this convention\nwhen needed. On the other hand, the fired transition(s) \u03c4 is (are) definitely on\nthe highest possible level in Pl due to Rule 3.2 and Rule 3.3.\nIf each variable can be modified by only one transition of an And-Statechart,\nthen all enabled transitions of those sub-states can perform together. We use\nWV (\u03c4i) to denotes the variables that can be modified by \u03c4i. Here we avoid the\nracing conflicts only for simpleness. Adding it will not bring essential changes to\nthe main parts of this paper.\nRule 3.4 (And). Suppose P is an And-Statechart, P = [n, (P1, \u00b7 \u00b7 \u00b7 , Pm)]. For\ni = 1, 2, \u00b7 \u00b7 \u00b7 ,m, Pi is a Basic Statechart or Or-Statechart,\n\u3008Pi, \u03bd, E\u3009 \u03c4i\u2212\u2192 \u3008P \u2032i , \u03bd\u2032i, E \u222a acte(\u03c4i)\u3009\nIf En\u2217(Pi, E) = \u03c6 for some i, then the sub-configuration is considered as staying\nthe same. That is\n\u3008Pi, \u03bd, E\u3009 \u2192 \u3008Pi, \u03bd, E\u3009\nwhere En\u2217 is defined as follows\nEn\u2217([n], E) =def \u03c6\nEn\u2217(P = [n, (P1, \u00b7 \u00b7 \u00b7 , Pm), Pl, T ], E) =def En(P,E) \u222a En\u2217(Pl, E)\nEn\u2217(P = [n, (P1, \u00b7 \u00b7 \u00b7 , Pm)], E) =def\n\u22c3m\ni=1En\n\u2217(Pi, E)\nWe have further condition that for all i 6= j, WV (\u03c4i) \u2229WV (\u03c4j) = \u03c6, we denote\n\u03bd\u2032 =\n\u2295m\ni=1 \u03bd\n\u2032\ni the direct sum of all \u03bd\n\u2032\ni, then we have\n\u3008P, \u03bd,E\u3009\nVm\ni=1 \u03c4i\u2212\u2192 \u3008[P, (P \u20321, \u00b7 \u00b7 \u00b7 , P \u2032m)], \u03bd\u2032, E \u222a\nm\u22c3\ni=1\nacte(\u03c4i)\u3009\nuunionsq\nIf no transition is enabled in a Statechart and all of its embedded sub-states,\nthe current macro-step comes to the end. The Statechart will clear the set of\nevents and advance the time (Here \u03c3 is used to denote the clock tick transition),\nand is ready to perform Rule 3.1 to start another macro-step.\nRule 3.5 (Empty and Time Advance). If En\u2217(P,E) = \u03c6, then we have\n\u3008P, \u03bd,E\u3009 \u03c3\u2212\u2192 \u3008P, \u03bd, \u03c6\u3009\nuunionsq\nHere is a simple example of how these operational rules work.\nExample 3.1. In the Statechart of Fig.1, the default configuration is\n\u3008[sc, ([n1, (p1, p2), p1, t1], [n2, (p3, p4), p3, t2])], \u03bd, \u03c6\u3009\nWhen the external events set {a, d} appears. Rule 3.1 works.\n\u3008[sc, ([n1, (p1, p2), p1, t1], [n2, (p3, p4), p3, t2])], \u03bd, \u03c6\u3009\n{a,d}\u2212\u2192 \u3008[sc, ([n1, (p1, p2), p1, t1], [n2, (p3, p4), p3, t2])], \u03bd, {a, d}\u3009\nThis is an And-Statechart. Following the Rule 3.4, we need to consider its sub-\nStatecharts. According to Rule 3.2, the following two potential transitions are\nready to be fired:\n\u3008[n1, (p1, p2), p1, t1], \u03bd1, {a, d}\u3009 t1\u2212\u2192 \u3008[n1, (p1, p2), p2, t1], \u03bd\u20321, {a, d, c}\u3009\n\u3008[n2, (p3, p4), p3, t2], \u03bd2, {a, d}\u3009 t2\u2212\u2192 \u3008[n2, (p3, p4), p4, t2], \u03bd\u20322, {a, d, e}\u3009\nThe conditions of Rule 3.4 hold. Therefore,\n\u3008[sc, ([n1, (p1, p2), p1, t1], [n2, (p3, p4), p3, t2])], \u03bd, {a, d}\u3009\nt1\u2227t2\u2212\u2192 \u3008[sc, ([n1, (p1, p2), p2, t1], [n2, (p3, p4), p4, t2])], \u03bd\u2032, {a, d, c, e}\u3009\nwhere \u03bd\u2032 = \u03bd\u20321 \u2295 \u03bd\u20322.\nNow the set En\u2217(sc, {a, c, d, e}) is empty, hence the Rule 3.5, that is,\n\u3008[sc, ([n1, (p1, p2), p2, t1], [n2, (p3, p4), p4, t2])], \u03bd\u2032, {a, d, c, e}\u3009\n\u03c3\u2212\u2192 \u3008[sc, ([n1, (p1, p2), p2, t1], [n2, (p3, p4), p4, t2])], \u03bd\u2032, \u03c6\u3009\nA macro-step comes to the end. uunionsq\n4 Equivalence\nFor the sake of convenience, we will use the capital letter C (or Ci) to denote\nthe configuration \u3008P, \u03bd,E\u3009 and let C be the space of all possible configurations\nof a set of Statecharts.\nFor the description of the set of events used in one micro-step to trigger the\ntransition, we give the following definition.\nDefinition 4.1. We use C E\u2212\u2192 C \u2032 to denote that, the configuration C evolves\nto C \u2032 in one micro-step by some fired transitions (There might be more than\none fired transitions because of Rule 3.4), and E is the set of all the positive\nevents of the triggers of all the transitions performed in this micro-step.\nThe following definition describes the configurations which will execute micro-\nsteps infinitely and, therefore, makes the Statecharts no chance to participate\nfurther stimuli from the environment.\nDefinition 4.2 (Divergent). A configuration C is divergent if there is an in-\nfinite sequence of configurations {Cn}\u221en=1 such that C = C1 and Cn En\u2212\u2192 Cn+1,\nwhere En is the corresponding set of events. That is, there is an infinite sequence\nof micro-steps started from C.\nIn what follows we depict the relationship of two configurations to express\ntheir equivalent property.\nDefinition 4.3 (Bisimulation). A binary relation S over a configuration space\nC is a bisimulation iff it satisfies the following conditions:\n1. S is an equivalence relation.\n2. Given Ci = \u3008Pi, \u03bdi, Ei\u3009, i = 1, 2. If C1SC2 then\n(a) var(P1) = var(P2), where var() denotes the variable set\n(b) \u03bd1 = \u03bd2\n(c) E1 = E2\n(d) if C1 is not divergent, For any set of events E, whenever there exists a\nC \u20321 such that C1\nE\u2212\u2192 C \u20321, then there exists C \u20322, such that\n(C2\nE\u2212\u2192 C \u20322) \u2227 (C \u20321SC \u20322)\n(e) If C1\n\u03c3\u2212\u2192 C \u20321 (Rule 3.5), then there exists C \u20322, such that\n(C2\n\u03c3\u2212\u2192 C \u20322) \u2227 (C \u20321SC \u20322) uunionsq\nIn this definition, we do not mention the actions of the performed transitions.\nHowever, from 2 (b), (c) and (d) we know that, the data states and sets of active\nevents of C \u20321 and C\n\u2032\n2, i.e. \u03bd\n\u2032\n1 and \u03bd\n\u2032\n2, E\n\u2032\n1 and E\n\u2032\n2 (which reflect the effects of the\nactions of the micro-step), are the same.\nThe following lemma shows our definition of bisimulation preserves normal\noperations.\nLemma 4.4. If {Si} are bisimulations, then the following relations are also\nbisimulations.\n1.\n\u22c3\ni Si\n2. Si \u25e6 Sj\nProof. The proof of 1 and 2 are similar. We prove 2 as an example.\nWhat needs to be checked are the two conditions of Definition 4.3 in turn.\nThe condition 1 and (a), (b) and (c) of condition 2 are trivial, let\u2019s see the\ncondition 2 (d).\nIf C1(Si \u25e6 Sj)C3, then there exists a configuration C2 such that\n(C1SiC2) \u2227 (C2SjC3)\nSo if there exists a configuration C \u20321 such that C1\nE\u2212\u2192 C \u20321, then\n\u2203C \u20322 \u00b7 (C2 E\u2212\u2192 C \u20322) \u2227 (C \u20321SiC \u20322)\nFor C2SjC3 and C2 E\u2212\u2192 C \u20322, we have\n\u2203C \u20323 \u00b7 (C3 E\u2212\u2192 C \u20323) \u2227 (C \u20322SjC \u20323)\nSo we have C \u20321(Si \u25e6 Sj)C \u20323. Now we have proved that C1 E\u2212\u2192 C \u20321 implies\n\u2203C \u20323 \u00b7 (C3 E\u2212\u2192 C \u20323) \u2227 (C \u20321(Si \u25e6 Sj)C \u20323)\nIn case of condition (e), it is similar to condition (d). uunionsq\nUsing definition 4.3, we give the definition of the equivalence of two con-\nfigurations as follows.\nDefinition 4.5 (Configuration Equivalence). Two configurations C1 and\nC2 are equivalent, denoted by C1 \u223c C2, iff there exists a bisimulation S such\nthat C1SC2.\nFurthermore, we give the definition for the equivalence of two Statecharts as\nfollows. It seems that this definition is a little weak. In fact, this definition is\nsufficient. The validity of this statement will be embodied by later theorems and\ncorollaries.\nDefinition 4.6 (Statechart Equivalence). Two Statecharts P and Q are\nequivalent, denoted by P \u223c Q, iff D(P ) \u223c D(Q), where D(P ) denotes the\ndefault configuration of P . That is, the configuration where the set of active\nstates is exactly the set of default states of P .\nExample 4.1. [sc1, ([n11, (p1, p2), p1, t], [n12, (p3, p4), p3, t])] and\n[sc2, ([n21, (p1, p3)], [n22, (p2, p4)]), n21, t] are two Statecharts, where p1, p2, p3,\np4 are their embedded Statecharts. Assuming var(sc1) = var(sc2), \u03bd(D(sc1)) =\n\u03bd(D(sc2)) and E(D(sc1)) = E(D(sc2)), these two Statecharts are equivalent.\nFig.2 and Fig.3 shows these two Statecharts. The only micro-step can be\nfired of sc1 is to transfer p1, p3 to p2, p4 parallelly by Rule 3.4 and the only\nmicro-step can be fired of sc2 is to transfer n21 to n22 by Rule 3.2. It is easy\nto check that their default configurations can bisimulate each other. uunionsq\nLemma 4.7. \u223c on the Statechart space is an equivalence relation.\nThe proof of this lemma is trivial. uunionsq\nTo illustrate the validity of our definition of the equivalence, we shall show\nthe result that for every possible configuration of a Statechart P , we can find a\nconfiguration from a Statechart Q which is equivalent to P , these configurations\nbisimulate each other. We give the following definition first.\nDefinition 4.8. Suppose tr = \u3008E1, E2, \u00b7 \u00b7 \u00b7\u3009, where Ei \u2286 \u03a0e (Recall that \u03a0e is\nthe set of all possible events) or Ei = {\u03c3} is a sequence of sets of events. We\nuse C1\ntr\u2212\u2192 C2 to denote the fact that the configuration C1 evolves into C2 by\nperforming micro-steps \u3008step1, step2, \u00b7 \u00b7 \u00b7\u3009 in turn and the set of positive events\nout of triggers of the transitions fired in stepi is Ei.\nGiven two equivalent Statecharts P and Q (P \u223c Q), the following theorem\nstates that, for any reachable configuration in a run of P (or Q respectively),\nthere exists a bisimular configuration in a run of Q (or P respectively).\nTheorem 4.9. Suppose P \u223c Q. Let tr be any finite length sequence of sets of\nevents. If there exists a configuration Cp such that D(P )\ntr\u2212\u2192 Cp, then there\nexists a configuration Cq such that D(Q)\ntr\u2212\u2192 Cq and Cp \u223c Cq.\nn\r1\r1\r n\r1\r2\r\ns\rc\r1\r\nt\r\np\r2\r\np\r1\r\nt\r\np\r4\r\np\r3\r\nFig. 2. Statechart sc1\ns\rc\r2\r\nt\r\np\r4\r\np\r2\rp\r1\r\np\r3\r\nn\r2\r1\r n\r2\r2\r\nFig. 3. Statechart sc2\nThat is, we have the following commuting diagram:\nD(P ) tr\u2212\u2212\u2212\u2212\u2192 Cp\n\u223c\n\uf8e6\uf8e6y \uf8e6\uf8e6y\u223c\nD(Q) \u2212\u2212\u2212\u2212\u2192\ntr\nCq\nProof. By induction on n, the length of tr.\n(1) n = 1. By definition 4.5 and definition 4.6, there exists a bisimulation S\nsuch that\nD(P )SD(Q),\nand we have\nD(P ) E1\u2212\u2192 Cp\nFrom 2.(d) and 2.(e) in Definition 4.3, we get that there exists Cq such that\n(D(Q) E1\u2212\u2192 Cq) \u2227 (CpSCq)\n(2) Assume the result holds for n = k. We prove that it also holds for the case\nof n = k + 1.\nSuppose tr = {E1, E2, \u00b7 \u00b7 \u00b7 , Ek+1}. We denote tr\u2032 = {E1, E2, \u00b7 \u00b7 \u00b7 , Ek}. Then\nthere exists C \u2032p such that D(P )\ntr\u2032\u2212\u2192 C \u2032p and C \u2032p\nEk+1\u2212\u2192 Cp. Using the inductive\nassumption, there exists a configuration C \u2032q such thatD(Q)\ntr\u2032\u2212\u2192 C \u2032q and C \u2032p \u223c C \u2032q.\nBy Definition 4.5 and Definition 4.6, there exists a bisimulation S such that\n(C \u2032pSC \u2032q) \u2227 (C \u2032p\nEk+1\u2212\u2192 Cp)\nFrom 2.(d) and 2.(e) in Definition 4.3, we know that there exists Cq such\nthat\n(C \u2032q\nEk+1\u2212\u2192 Cq) \u2227 (CpSCq)\nThat is\n(D(Q) tr\u2212\u2192 Cq) \u2227 (CpSCq)\nNow with (1) and (2) done, we have come to the end of our proof. uunionsq\nFrom the above theorem we can prove the following property which expresses\nthe above mentioned idea easily.\nCorollary 4.10. Suppose P \u223c Q. Then for each legal configuration Cp of P ,\nthere exists a configuration Cq of Q such that Cp \u223c Cq.\nProof. Consider the micro-step sequence \u3008step1, \u00b7 \u00b7 \u00b7 , stepk\u3009 which leads D(P ) to\nCp and the corresponding sequence of sets of events \u3008E1, \u00b7 \u00b7 \u00b7 , Ek\u3009. uunionsq\nThe following theorem shows that the equivalence relation is preserved by\nthe constructors of Statecharts.\nTheorem 4.11 (Congruence). Pi \u223c Qi (i = 1, \u00b7 \u00b7 \u00b7 ,m) implies\n1. And(Np, {P1, \u00b7 \u00b7 \u00b7 , Pm}) \u223c And(Nq, {Q1, \u00b7 \u00b7 \u00b7 , Qm});\n2. Or(Np, \u3008P1, \u00b7 \u00b7 \u00b7 , Pm\u3009, Pl, T ) \u223c Or(Nq, \u3008Q1, \u00b7 \u00b7 \u00b7 , Qm\u3009, Ql, T \u2032). where there ex-\nist a bijection f between T and T \u2032, such that for any \u03c4 \u2208 T\n(a) acte(\u03c4) = acte(f(\u03c4))\n(b) trig+(\u03c4) = trig+(f(\u03c4)) \u2227 trig\u2212(\u03c4) = trig\u2212(f(\u03c4))\n(c) Pi\n\u03c4\u2212\u2192 Pj \u21d0\u21d2 Qi f(\u03c4)\u2212\u2192 Qj\nThat is, we have following commuting diagram in which the symbol op denotes\nthe Statechart construction operators And or Or:\n{P1, \u00b7 \u00b7 \u00b7 , Pm} op\u2212\u2212\u2212\u2212\u2192 Np\n\u223c\n\uf8e6\uf8e6y \uf8e6\uf8e6y\u223c\n{Q1, \u00b7 \u00b7 \u00b7 , Qm} \u2212\u2212\u2212\u2212\u2192\nop\nNq\nProof. 1. For Pi \u223c Qi, we have D(Pi) \u223c D(Qi), then \u2203Si \u00b7 D(Pi)SiD(Qi),\nwhere Si is a bisimulation. So we have:\nFor any set of events E, whenever there exists a configuration (D(Pi))\u2032 such\nthat\nD(Pi)\nE\u2212\u2192 (D(Pi))\u2032,\nthere exists (D(Qi))\u2032, such that\n(D(Qi)\nE\u2212\u2192 (D(Qi))\u2032) \u2227 ((D(Pi))\u2032Si(D(Qi))\u2032)\nNow we define the relationship\nS = {\u3008D(And(Np, {P1, \u00b7 \u00b7 \u00b7 , Pm})), D(And(Nq, {Q1, \u00b7 \u00b7 \u00b7 , Qm}))\u3009\nwhere D(Pi)SiD(Qi)} \u222a Id\nWe prove that S is a bisimulation as follows.\nIt is trivial that S is an equivalence relation. (\u2020)\nNow we check the conditions 2(a) \u2013 2(e) in Definition 4.3. 2(a), 2(b) and\n2(c) are trivial. Since 2(e) is similar to 2(d), we check condition 2(d) in details\nhere.\nSince our discussion is at the micro-step level, the actions of transitions in\nD(Pi) do not have effect on D(Pj).\nThus we have the following fact.\nFor any set of events E, whenever D(Np)\nE\u2212\u2192 (D(Np))\u2032,\nthere exists (D(Nq))\u2032, such that\n(D(Nq)\nE\u2212\u2192 (D(Nq))\u2032) \u2227 ((D(Np))\u2032S(D(Nq))\u2032) (\u2021)\nWe then have Np \u223c Nq from (\u2020) and (\u2021).\n2. Similar to 1, we have \u2203Si \u00b7 D(Pi)SiD(Qi), where Si is a bisimulation, and\nthe following result:\nFor any set of events E, whenever there exists a configuration (D(Pi))\u2032 such\nthat\nD(Pi)\nE\u2212\u2192 (D(Pi))\u2032,\nthere exists a (D(Qi))\u2032, such that\n(D(Qi)\nE\u2212\u2192 (D(Qi))\u2032) \u2227 ((D(Pi))\u2032Si(D(Qi))\u2032)\nNow we define the relationship\nS = {\u3008D(Or(Np, \u3008P1, \u00b7 \u00b7 \u00b7 , Pm\u3009, Pl, T )),\nD(Or(Nq, \u3008Q1, \u00b7 \u00b7 \u00b7 , Qm\u3009, Ql, T \u2032))\u3009, where D(Pi)SiD(Qi)}\n\u222a Id\nIt is trivial that S is an equivalence relation. (\u2217)\nAnalogically, to check condition 2 in Definition 4.3, we need a formula\nsimilar to (\u2021). It can be divided into two cases:\n(a) If the micro-step triggered by E is between the immediate sub-state Pl\nand Pk, i.e.\nD(Np)\nE\u2212\u2192 (D(Np))\u2032 = D(Or(N \u2032p, \u3008P1, \u00b7 \u00b7 \u00b7 , Pm\u3009, Pk, T ))\nBecause of there is a bijection f between the transitions sets of Np and Nq\nwhich satisfies the three conditions, we have\nD(Nq)\nE\u2212\u2192 (D(Nq))\u2032 = D(Or(N \u2032q, \u3008Q1, \u00b7 \u00b7 \u00b7 , Qm\u3009, Qk, T \u2032))\n(b) If the micro-step triggered by E is in the active sub-state Pl, i.e.\nPl\nE\u2212\u2192 P \u2032l\nFor PlSlQl, we have there exits Q\u2032l, such that\n(Ql\nE\u2212\u2192 Q\u2032l) \u2227 (P \u2032lSlQ\u2032l)\nWe take\n(D(Nq))\u2032 = D(Or(N \u2032q, \u3008Q1, \u00b7 \u00b7 \u00b7 , Qm\u3009, Q\u2032l, T \u2032))\nIn both case (a) and case (b) it is trivial that\n(D(Nq)\nE\u2212\u2192 (D(Nq))\u2032) \u2227 ((D(Np))\u2032S(D(Nq))\u2032) (\u2217\u2217)\nFrom (\u2217) and (\u2217\u2217), we obtain Np \u223c Nq. uunionsq\n5 Traces\nAs shown in the Definition 4.8, suppose tr = \u3008E1, E2, \u00b7 \u00b7 \u00b7\u3009 is a sequence of\nsets of events. We use C1\ntr\u2212\u2192 C2 to denote the fact that the configuration C1\nevolves into C2 by performing micro-steps \u3008step1, step2, \u00b7 \u00b7 \u00b7\u3009 in turn and the set\nof positive events from the triggers of the transitions fired in stepi is Ei. In this\nsection we investigate some properties on the level of macro-step.\nDefinition 5.1. We use \u03a0ex to denote all possible external events. Suppose\nE \u2286 \u03a0ex and Ci = \u3008Pi, \u03bdi, \u03c6\u3009, i = 1, 2, we use C1 E=\u21d2 C2 to denote a macro-\nstep from C1 to C2 with the set of initial external events E by a sequence of\nmicro-steps, where only the last micro-step is the clock tick \u03c3.\nWe use (2\u03a0ex)\u2217 to denote the set of all the possible finite-length sequences\nof sets of external events. Suppose tr = \u3008E1, E2, \u00b7 \u00b7 \u00b7 , Em\u3009 \u2208 (2\u03a0ex)\u2217. We use also\nC1\ntr=\u21d2 C2 to denote the fact that the configuration C1 can evolve into C2 by\nperforming a sequence of macro-steps \u3008Mstep1,Mstep2, \u00b7 \u00b7 \u00b7 ,Mstepm\u3009 in turn and\nthe set of events Ei is the set of initial events stimulating the Mstepi.\nWhen a finite sequence of sets of external events comes sequentially, a Stat-\nechart starts to respond the first set of events from its current configuration. As\nreactions to this finite sequence of stimuli, it may perform a sequence of tran-\nsitions which are triggered by these stimuli directly or indirectly, go through a\nnumber of macro-steps and reach another configuration eventually, or it may fall\ninto divergence in some macro-step on the way, and is not able to participate\nthe next macro-step. We address these issues in this section.\nWe give two definitions to formalize the aforementioned ideas.\nDefinition 5.2 (Trace). A trace tr \u2208 (2\u03a0ex)\u2217 is a finite sequence of external\nevents in which a particular Statechart participates with its environment.\nWhat follows is our definition of specific trace sets. We propose two type\nof sets with respect to configurations. For a configuration CP , set Div(CP ) in-\ncludes all the traces that may lead the configuration CP to divergence, while\nthe another set is Prg(CP ) which includes all traces which definitely lead config-\nuration CP to a steady configuration. We use Prg to hint that the configuration\nwill progress normally while \u201cconsuming\u201d a trace of Prg(CP ) and will be ready\nto accept other external events.\nDefinition 5.3 (Trace Sets). Suppose P is a Statechart and CP is one of its\nconfigurations with empty set of events, we define two sets of sequences of set of\nevents as follows:\nDiv(CP ) =def { tr \u2208 (2\u03a0ex)\u2217|\n\u2203s, C \u2032 \u00b7 s \u227a tr \u2227 (CP s=\u21d2 C \u2032) \u2227 div(C \u2032, tr(#s+ 1))}\nPrg(CP ) =def { tr \u2208 (2\u03a0ex)\u2217|\u2203C \u2032 \u00b7 (CP tr=\u21d2 C \u2032)\u3009}\nwhere s \u227a tr means s is a proper prefix of tr. We use div(C \u2032, E) to represent\nthat C \u2032 is divergent after receiving set of events E according to Rule 3.1. Note\nthat #s is the length of s, while tr(n) denotes the nth element of tr.\nForm the definition we have the following property immediately.\nLemma 5.4. Suppose CP is a configuration of a Statechart P with empty set\nof events, then\nPrg(CP ) \u222aDiv(CP ) = (2\u03a0ex)\u2217\nProof. By Definition 4.2, we have the fact that if a trace tr is not in Div(CP ),\nthen there exists a steady configuration C as the end configuration after pre-\nforming all the macro-steps triggered by tr. From the transition Rule 3.1\u223c 3.5,\nwe can see that only the configuration with the form \u3008P, \u03bd, \u03c6\u3009 can be the end\nconfiguration of a macro-step. Therefore tr lies in Prg(CP ). So we have\nPrg(CP ) \u222aDiv(CP ) = (2\u03a0ex)\u2217\nuunionsq\nTwo equivalent configurations of Statecharts should have the same trace sets\nDiv and Prg as one may expect. The following theorem tells us the truth.\nTheorem 5.5 (Trace). Suppose P \u223c Q and Cp is the configuration of P with\nempty set of events. If Cq is the configuration of Q which is equivalent to Cp.\nThen\nDiv(Cp) = Div(Cq) and Prg(Cp) = Prg(Cq)\nProof. If tr \u2208 Prg(Cp) is a trace, then there exists a configuration C \u2032p such that\nCp\ntr=\u21d2 C \u2032p\nBecause a macro-step can be considered as a sequence of micro-steps, by The-\norem 4.9, we see that there exists a configuration C \u2032q, such that\nCq\ntr=\u21d2 C \u2032q\nSo tr \u2208 Prg(Cq), Then we have\nPrg(Cp) \u2286 Prg(Cq)\nFor the same reason , we have\nPrg(Cq) \u2286 Prg(Cp)\nSo we come to\nPrg(Cp) = Prg(Cq)\nFrom Lemma 5.4, we obtain Div(Cp) = Div(Cq). uunionsq\nWe considered above the external traces or input traces, which are provided\nby the environment. Now we take into account the responses of a Statechart to\nthese stimuli from the environment, and introduce the response traces.\nAccording to our definition of transition rules, before a clock tick transition,\nall events generated by those transitions in one macro-step are accumulated in\nthe set of active events. This reflects the reaction of the Statechart to environ-\nmental stimuli arrived at the beginning of the macrostep. We use it to specify a\nStatechart\u2019s response behaviour to the environment.\nDefinition 5.6 (Response). We use C\nE\/E\u02c6\n=\u21d2 C \u2032 to denote a macro-step from\nC to C \u2032 with the set of initial external events E by a sequence of micro-steps,\nwhere only the last micro-step is the clock tick \u03c3, and the set of events in the\nconfiguration before the clock tick is E\u02c6. We call E\u02c6 the set of response events in\nthis macro-step.\nDefinition 5.7 (Response Trace). Suppose P is a Statechart and Cp is one\nof its configuration with empty set of events. Suppose tr = \u3008E1, E2, \u00b7 \u00b7 \u00b7 , Em\u3009 \u2208\n(2\u03a0ex)\u2217 and there is a configuration C \u2032 such that C tr=\u21d2 C \u2032. We collect the\nsets of response events along the way, which form a sequence of sets of events\nt\u02c6r = \u3008E\u02c61, E\u02c62, \u00b7 \u00b7 \u00b7 , E\u02c6m\u3009 \u2208 (2\u03a0)\u2217, and call the sequence a response trace of tr with\nrespect to C and C \u2032, and denote the fact as C\ntr\/t\u02c6r\n=\u21d2 C \u2032.\nObviously, due to possible non-determinism, for a certain C and a fixed tr,\nthere might be more than one pair of C \u2032 and t\u02c6r such that C\ntr\/t\u02c6r\n=\u21d2 C \u2032.\nIn the remainder of this section, we shall prove that, if two configurations\nare equivalent, C1 \u223c C2, or two Statecharts are equivalent, P \u223c Q, then for an\nexternal event trace tr, they will generate the same set of response traces.\nLemma 5.8. Suppose P \u223c Q, Cp is a configuration of P with empty set of\nevents and Cq is a configuration ofQ which is equivalent to Cp. Suppose E \u2208 2\u03a0ex\nand E\u02c6 \u2208 2\u03a0 . Then we have that, if there exists a configuration C \u2032p of P such\nthat Cp\nE\/E\u02c6\n=\u21d2 C \u2032p, then there exists a configuration C \u2032q of Q such that Cq\nE\/E\u02c6\n=\u21d2 C \u2032q.\nThat is we have the following commuting diagram:\nCp\nE\/E\u02c6\n=\u21d2\u2212\u2212\u2212\u2212\u2192 C \u2032p\n\u223c\n\uf8e6\uf8e6y \uf8e6\uf8e6y\u223c\nCq\nE\/E\u02c6\n=\u21d2\u2212\u2212\u2212\u2212\u2192 C \u2032q\nProof. A macro-step can be considered as a sequence of micro-steps, so if we\nhave \u2203C \u2032p \u00b7 Cp\nE\/E\u02c6\n=\u21d2 C \u2032p, then by Theorem 4.9, we see that\n\u2203C \u2032q \u00b7 Cq E=\u21d2 C \u2032q (\u2217)\nSuppose the macro-step from Cp to C \u2032p is Mstepp = \u3008step1, \u00b7 \u00b7 \u00b7 , stepk\u22121, stepk\u3009,\nthe macro-step from Cq to C \u2032q is Mstepq = \u3008step\u20321, \u00b7 \u00b7 \u00b7 , step\u2032k\u22121, step\u2032k\u3009, and the\nconfiguration sequences with respect to these steps are \u3008Cp,1, \u00b7 \u00b7 \u00b7 , Cp,k\u22121, C \u2032p\u3009 and\n\u3008Cq,1, \u00b7 \u00b7 \u00b7 , Cq,k\u22121, C \u2032q\u3009 respectively, where stepi and step\u2032i (i = 1, \u00b7 \u00b7 \u00b7 , k) are all\nmicro-steps. For E\u02c6 is the response set of Mstepp, from Definition 5.6, we know\nthat the set of events in Cp,k\u22121 is E\u02c6. For Cp,k\u22121 \u223c Cq,k\u22121, from Definition\n4.3,4.5 we get that the event set of Cq,k\u22121 is also E\u02c6. So we have E\u02c6 is the\nresponse set of Mstepq. Then from (\u2217) we have come to\n\u2203C \u2032q \u00b7 Cq\nE\/E\u02c6\n=\u21d2 C \u2032q\nSo there is\n\u2203C \u2032p \u00b7 Cp\nE\/E\u02c6\n=\u21d2 C \u2032p implies \u2203C \u2032q \u00b7 Cq\nE\/E\u02c6\n=\u21d2 C \u2032q\nuunionsq\nTheorem 5.9 (Response Trace). Suppose P \u223c Q, Cp is a configuration of P\nwith empty set of events and Cq is a configuration of Q which is equivalent to Cp.\nSuppose tr \u2208 (2\u03a0ex)\u2217 and t\u02c6r \u2208 (2\u03a0)\u2217 is a sequence with the same length of tr.\nThen we have that, if there exists a configuration C \u2032p of P such that Cp\ntr\/t\u02c6r\n=\u21d2 C \u2032p,\nthen there exists a configuration C \u2032q of Q such that Cq\ntr\/t\u02c6r\n=\u21d2 C \u2032q.\nProof. Suppose tr = \u3008E1, E2, \u00b7 \u00b7 \u00b7 , Em\u3009 and tr = \u3008E\u02c61, E\u02c62, \u00b7 \u00b7 \u00b7 , E\u02c6m\u3009, By Lemma\n5.8 and the following commuting diagram,\nCp\nE1\/E\u02c61=\u21d2\u2212\u2212\u2212\u2212\u2192 Cp,1\nE2\/E\u02c62=\u21d2\u2212\u2212\u2212\u2212\u2192 Cp,2\nE3\/E\u02c63=\u21d2\u2212\u2212\u2212\u2212\u2192 \u00b7 \u00b7 \u00b7\nEm\u22121\/E\u02c6m\u22121\n=\u21d2\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Cp,m\u22121\nEm\/E\u02c6m\n=\u21d2\u2212\u2212\u2212\u2212\u2212\u2192 C \u2032p\n\u223c\n\uf8e6\uf8e6y \u223c\uf8e6\uf8e6y \u223c\uf8e6\uf8e6y \u223c\uf8e6\uf8e6y \u223c\uf8e6\uf8e6y \u223c\uf8e6\uf8e6y\nCq\nE1\/E\u02c61=\u21d2\u2212\u2212\u2212\u2212\u2192 Cq,1\nE2\/E\u02c62=\u21d2\u2212\u2212\u2212\u2212\u2192 Cq,2\nE3\/E\u02c63=\u21d2\u2212\u2212\u2212\u2212\u2192 \u00b7 \u00b7 \u00b7\nEm\u22121\/E\u02c6m\u22121\n=\u21d2\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Cq,m\u22121\nEm\/E\u02c6m\n=\u21d2\u2212\u2212\u2212\u2212\u2212\u2192 C \u2032q\nOne can see the existence of C \u2032q. uunionsq\nCorollary 5.10. Given a pair of configurations Cp, Cq with empty sets of events,\nCp \u223c Cq, tr is a sequence of sets of external events. Then the sets of all possible\nresponse traces of Cp and Cq with respect to trace tr are the same.\nProof. Using the above theorem it is trivial. uunionsq\nCorollary 5.11. Given two Statecharts P and Q, P \u223c Q, tr is a sequence of\nsets of external events. Then the sets of all possible response traces of D(P ) and\nD(Q) with respect to trace tr are the same.\n6 Related work\nThe original Statecharts semantics is present by Harel et al. [6]. It obeys causality\nand synchrony, but not compositionality. The synchrony implies that the system\nis definitely faster than its environment, and can always finish computing its re-\nsponse before the next stimulus from the environment arrives. In 1991, A.Pnueli\nand M.Shalev [14] presented a way of defining the notion of step in the execu-\ntion of Statecharts. This semantics maintains the synchrony hypothesis. They\ndefined the function En(\u03c4) and used it to describe the synchrony, causality and\nglobal consistency formally. They also gave a step-construction procedure to\ncompute En(\u03c4) for a Statechart with respect to a certain environment. In 1996,\nM. Schettini, A.Peron and S.Tini [16] gave a new definition which covered the\ndefinition in [14] and included a new restriction named compatibility, such that\ntheir step-construction procedure will not fail.\nWith regard to a semantics for Statecharts, it is very important whether it\nis compositional or not. Because the compositionality ensures that the seman-\ntics for a Statechart can be defined in terms of its component-charts. This is\nimportant especially when only a few components of a large Statechart change,\na waste of resources by re-compiling the large Statechart will not take place.\nTheoretical studies constructed by Huizing [10] showed that one cannot com-\nbine the features of causality, synchrony hypothesis and compositionality with\na step semantics which labels transitions by sets of \u201dinput\/output\u201d events. G.\nLu\u00a8ttgen, M. von der Beeck and R. Cleaveland [12] presented an approach to\ndefine Statecharts\u2019 semantics. Their semantics achieved compositionality on the\nexplicit micro-step level and causality and synchrony on the implicit macro-step\nlevel. Our semantics is compositional. It adopts an asynchronous time model, in\nwhich a macro-step is defined as a sequence of micro-steps taking place instan-\ntaneously. To be more intuitive, our semantics obeys local consistency rather\nthan global one. Furthermore, our semantics supports the data-states issues of\nStatecharts, i.e. the actions in a transition can contain assignments.\nIn [16], the equivalences of Statecharts are investigated. The authors associ-\nated a Labeled Transition System (LTS) with each Statechart term in a syntax\ndirected way, and defined the semantics of Statecharts based on the LTS. They\ndefined a causal order over events to express the causality. Using these notions,\nthey defined four levels of equivalence of Statecharts and proved the properties\nof congruence respectively. The main difference between our work and what pre-\nsented in [16] is as follows. The first definition of equivalence in [16] needs a\nbijection between all possible configurations of the two Statecharts whose equiv-\nalence is under consideration. It causes much troublesome in proving the prop-\nerty of congruence. Our concept of equivalence is similar to the second definition\nof equivalence of [16]. We only need the bisimulation of the default states of\nthe Statecharts, which makes it much easier to prove the congruence property\n(Theorem 4.11). It seems that our definition is weaker in comparison to the\nfirst definition of equivalence in [16], but, in fact, it is not. As we have proved in\nTheorem 4.9, our concept has all the expected properties of equivalence stated\nin the first definition of equivalence in [16] and, at the same time, can get rid of\nthe redundant statements in proving the properties of congruence for that level\nof equivalence, thus, getting the same results in a much simpler way.\nC.A.R.Hoare [8] defined the trace notations of CSP. Many scholars defined\nthe trace notations for other languages, for instance [9, 3, 13, 7], to describe ob-\nservable behaviours of systems. Borrowing the ideas from these work we define\nthe trace notations for Statecharts as sequences of sets of external stimuli and\nsequences of responses of the Statechart to these stimuli. Some properties with\nrespect to the trace model for Statecharts are also explored. We believe these\ndefinitions can be valuable in further investigation of Statecharts\u2019 properties at\nbehavioural level of traces.\n7 Conclusions and future work\nIn this paper we have explored a set of transition rules so as to describe the\noperational semantics of Statecharts. We introduced the bisimulation to illus-\ntrate the equivalence between Statecharts\u2019 configurations. Ulteriorly we defined\nthe equivalence between Statecharts and studied congruence properties with re-\nspect to the construction operators of Statecharts (And and Or constructions).\nIn the end we introduced the notions of traces of Statecharts. It is foreseeable\nthat we can describe the equivalence of Statecharts at the level of observable\ntraces. As part of future work, the trace model should be further refined to com-\nprise more information on behaviours of Statecharts, like causal orders of events\ngenerated in one instant, instantaneous updates of data state. The simulation\nbetween Statecharts needs also to be investigated to describe the refinement of\nStatecharts.\nAcknowledgement. We would like to thank anonymous referees for many\nhelpful comments.\nReferences\n1. M. von der Beeck, A comparison of Statecharts variants, Formal Tech. in Real-\nTime and Fault-Tolerant Systems, LNCS 863, pp.128-148, Springer-Verlag, 1994.\n2. G. Booch, J. Rumbaugh and I. Jacobson, The Unified Modeling Language User\nGuide, Addison-Wesley Longman, Reading, MA, USA, 1998.\n3. J. Davies and S. Schneider. A brief history of Timed CSP. Theoretical Computer\nScience, 138:243\u2013271, 1995.\n4. D. Harel, Statecharts: a visual formalism for complex systems, Science of Computer\nProgramming, 8(3), pp.231-274, 1987.\n5. D. Harel and A. Naamad, The STATEMATE semantics of Statecharts, ACM\nTrans. on Software Engineering and Methodology, 5(4), pp.293-333, Oct. 1996.\n6. D. Harel, A.Pnueli, J.Schmidt, and R.Sherman, On the formal semantics of Stat-\necharts, Symp. on Logis in Computer Science, pp.56-64, IEEE CS Press, 1987.\n7. J. He, An algebraic approach to the VERILOG programming, Proc. of 10th An-\nniversary Colloquium of the United Nations University \/ International Institute\nfor Software Technology, Springer-Verlag, 2002.\n8. C. A. R. Hoare, Communicating Sequential Processes, Prentice Hall, 1985.\n9. C. A. R. Hoare and J. He, Unifying Theory of Programming, Prentice Hall, 1998.\n10. C. Huizing, Semantics of Reactive Systems: Comparison and Full Abstraction,\nPh.D. thesis, Eindhoven University of Technology, The Netherlands, 1991.\n11. N. G. Leveson, M. Heimdahl, H. Hildreth, and J. Reese, Requirements specifica-\ntions for process control systems, IEEE Trans. on Software Engineering, 20(9),\npp.684-707, Sept. 1994.\n12. G. Lu\u00a8ttgen, M. von der Beeck, and R. Cleaveland, A compositional approach to\nStatecharts semantics, NASA\/ICASE Report No.2000-12, March 2000.\n13. B. Mahony and J. S. Dong. Overview of the semantics of TCOZ. IFM\u201999: Integrated\nFormal Methods, pp. 66\u201385. Springer-Verlag, 1999.\n14. A. Pnueli and M. Shalev, What is in a step: on the semantics of Statecharts, Theo.\nAspects of Computer Software, LNCS 526, pp.244-264, Springer-Verlag, 1991.\n15. S. Qin and W. N. Chin, Mapping Statecharts to VERILOG for hardware\/software\nco-specification, FM03: the 12th International FME Symposium (to appear), 2003.\n16. M. Schettini, A. Peron, and S. Tini, Equivalences of Statecharts, 7th International\nConference on Concurrency, LNCS 1119, pp.687-702, Springer-Verlag, Aug. 1996.\n"}