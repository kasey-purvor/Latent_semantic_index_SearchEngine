{"doi":"10.1109\/MC.2003.1236470","coreId":"66647","oai":"oai:dro.dur.ac.uk.OAI2:624","identifiers":["oai:dro.dur.ac.uk.OAI2:624","10.1109\/MC.2003.1236470"],"title":"Turning software into a service.","authors":["Turner, M.","Budgen, D.","Brereton, P."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2003-10","abstract":"The software as a service model composes services dynamically, as needed, by binding several lower-level services--thus overcoming many limitations that constrain traditional software use, deployment and evolution","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66647.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/624\/1\/624.pdf","pdfHashValue":"4c15980e78e49b439a9029e4401a62657ae05dfb","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:624<\/identifier><datestamp>\n      2011-06-15T15:53:59Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Turning software into a service.<\/dc:title><dc:creator>\n        Turner, M.<\/dc:creator><dc:creator>\n        Budgen, D.<\/dc:creator><dc:creator>\n        Brereton, P.<\/dc:creator><dc:description>\n        The software as a service model composes services dynamically, as needed, by binding several lower-level services--thus overcoming many limitations that constrain traditional software use, deployment and evolution.<\/dc:description><dc:subject>\n        Software services<\/dc:subject><dc:subject>\n         DP industry<\/dc:subject><dc:subject>\n         Software engineering<\/dc:subject><dc:subject>\n         Web services<\/dc:subject><dc:subject>\n         Development<\/dc:subject><dc:subject>\n         Delivery.  <\/dc:subject><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n        Computer, 2003, Vol.36(10), pp.38-44 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2003-10<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:624<\/dc:identifier><dc:identifier>\n        issn:0018-9162<\/dc:identifier><dc:identifier>\n        doi:10.1109\/MC.2003.1236470<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/624\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/MC.2003.1236470<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/624\/1\/624.pdf<\/dc:identifier><dc:rights>\n        \u00a92003 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0018-9162","issn:0018-9162"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2003,"topics":["Software services","DP industry","Software engineering","Web services","Development","Delivery."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n08 October 2008\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nTurner, M. and Budgen, D. and Brereton, P. (2003) \u2019Turning software into a service.\u2019, Computer., 36 (10). pp.\n38-44.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/MC.2003.1236470\nPublisher\u2019s copyright statement:\n2003 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for\nadvertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists,\nor to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n0018-9162\/03\/$17.00 \u00a9 2003 IEEE38 Computer\nTurning Software \ninto a Service\nI n 1999, the Pennine Group\u2014a consortium ofsoftware engineering researchers from the Uni-versity of Durham, Keele University, and theUniversity of Manchester Institute of Scienceand Technology\u2014asserted that continued\ndevelopment of new architectural styles based on\nconstructional forms such as objects or compo-\nnents would not advance the software field. Rather,\nthey foresaw a future in which developers take a\nradically different view of how software delivers\nits functionality to users.1\nWe have explored the software as a service (SaaS)\nconcept through several small-scale experiments.2\nThis concept envisages a demand-led software mar-\nket in which businesses assemble and provide \nservices when needed to address a particular\nrequirement. The SaaS vision is a vital contribution\nto current thinking about software development\nand delivery that has arisen in part from initiatives\nin the Web services and electronic-business-com-\nmunication communities.\nSaaS focuses on separating the possession and\nownership of software from its use. Delivering soft-\nware\u2019s functionality as a set of distributed services\nthat can be configured and bound at delivery time\ncan overcome many current limitations constrain-\ning software use, deployment, and evolution. Such\na model would open up new markets, both for rel-\natively small-scale specialist-services providers and\nfor larger organizations that provide more general\nservices. In addition, service provision could include\nthe dynamic creation and development of entirely\nnew services that use existing ones. The \u201cSample\nSaaS Scenario\u201d sidebar shows inherent SaaS ideas\nin the context of a company helping with an over-\nseas property purchase.\nThis approach lets the set of services a business\nuses evolve without any user intervention as that\nbusiness and its context change. Also, the key know-\nhow involved is not who provides services, neces-\nsary though that knowledge is, but what service a\ntransaction requires at any particular point, along\nwith negotiating suitable terms for its use. Selecting\nand binding the means of providing an appropriate\nservice can therefore be performed dynamically, on\ndemand, through ultra-late binding.\nSAAS AND OTHER SERVICE FORMS\nDespite advances in programming language and\ndevelopment environment technologies, the basic\nparadigm for constructing and maintaining soft-\nware has altered little since the 1960s. Developers\nstill construct software largely by employing some\nvariant of the edit-compile-link cycle to generate an\nexecutable binary image from a source described\nusing a procedural programming language.\nAlthough the Web may have widened our interpre-\ntation of what software is, the practices used to\ndevelop and implement a Web site differ little from\nthose traditionally employed for constructing soft-\nware and are just as error prone.\nTo achieve our vision, we have focused on devel-\noping a radically different paradigm. We believe\nthat software should deliver a service. Further,\nThe software as a service model composes services dynamically, as\nneeded, by binding several lower-level services\u2014thus overcoming many\nlimitations that constrain traditional software use, deployment, and \nevolution.\nMark Turner\nDavid\nBudgen\nPearl\nBrereton\nKeele University,\nStaffordshire\nC O V E R  F E A T U R E\nP u b l i s h e d  b y  t h e  I E E E  C o m p u t e r  S o c i e t y\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\nshifting the focus from providing software to\ndescribing and delivering a service moves the focus\naway from the constraints that traditional soft-\nware construction, use, and ownership models\nimpose. Hence, our service-based model config-\nures, executes, and disengages one or more services\nto meet a specific set of requirements3\u2014a vision of\ninstant service consistent with the widely accepted\ndefinition: \u201can act or performance offered by one\nparty to another. Although the process may be tied\nto a physical product, the performance is essen-\ntially intangible and does not normally result in\nownership of any of the factors of production.\u201d4\nFigure 1a shows an abstract interpretation of\nwhat the current literature widely refers to as a ser-\nvice model: A fixed set of applications sit on top of\na service transport layer that uses technologies such\nas Microsoft\u2019s .NET or Sun\u2019s J2EE platform, along\nwith XML-based enveloping and message formats\nsuch as the simple object access protocol (SOAP).\nFigure 1b shows our vision of what a service model\ncould be if developers insert a further service inte-\ngration layer above the transport layer. \nThe model in Figure 1a is supply-led because it\nsupports applications that can provide only a pre-\ndetermined range of services from a remote server.\nThe model in Figure 1b is demand-led because\napplications can be constructed from smaller com-\nponent services and bound dynamically as needed.\nProviding this capability will require support from\nhigh-bandwidth information networking, which\nOctober 2003 39\nThe following scenario, set within the context of a much\nlarger example, demonstrates the ideas inherent in the software-\nas-a-service concept.\nAlice has set up a company that offers services to people who\nwant to purchase property abroad. She currently offers two\nservices: One provides information about available properties,\nwhile a second handles actual negotiation and purchase.\nAlice\u2019s purchasing service uses other services to handle tasks\nsuch as translation, legal and financial negotiations, financing,\nand currency transfer. Offering these services involves specify-\ning the terms, conditions, and form of service provision,\ntogether with the rules describing how other services will be\nemployed. This is the know-how element of her service.\nDrawn from the complete scenario, one small task concern-\ning a legal document might play out as follows. Alice\u2019s pur-\nchasing service urgently needs to have the document translated\nfrom Spanish to English, which involves the following steps:\n\u2022 The purchasing service seeks a translation service and,\nafter negotiating the terms and conditions, selects Scribe,\nthe cheapest from the four available.\n\u2022 Scribe, a broker that evaluates services but doesn\u2019t actually\nprovide them, seeks a Spanish translation service geared to\nhandling legal documents. From the three providers offer-\ning this service, based upon previous use history and sat-\nisfactory delivery, Scribe selects ES-trans, which offers an\nimmediate service. \n\u2022 ES-trans provides the translation that Alice\u2019s purchasing\nservice requires.\nWithin SaaS, the services involved in a system can change\nwith the associated business, and SaaS can perform this change\ndynamically. For example, in Alice\u2019s scenario, such a change\nmight occur if Scribe becomes aware of new translation services.\nA more complex example, involving composition, would be\nfor Alice to add a new service to help negotiate mortgages.\nRelating this example to the key service-oriented functions of\nour service integration layer can be instructive.\nFirst, in terms of service description, Alice must be able to\ndescribe her general requirement to have a document trans-\nlated, its more specific details\u2014including that it is a legal doc-\nument\u2014and the languages involved. Service description also\nencompasses the way a service provider such as Scribe or ES-\ntrans describes the services it can supply\u2014either directly or\nusing other providers\u2014and the parameters within which they\nwill negotiate a service contract.\nThis example contains two instances of service discovery.\nThe first occurs when Alice seeks the translation service, the\nsecond when the Scribe broker seeks a service that can deliver\nthe translation in the required time.\nLikewise, the example shows two stages of negotiation. First,\nAlice\u2019s service will negotiate with Scribe. Because she frequently\nneeds translation services in general, however, the service also\nmay conduct this negotiation periodically, resulting in a longer-\nterm contract between Alice\u2019s service and Scribe, in which case\nthe immediate negotiation will be concerned purely with ser-\nvice parameters. Second, Scribe can then negotiate a much\nshorter-term, per-document agreement with ES-trans and other\npossible providers.\nService delivery in this example occurs when ES-trans\nreceives the original document and returns the translation.\nHowever, if ES-trans does not do this within the specified\ntime\u2014determined by the form in which Alice\u2019s service may\nhave defined \u201curgently\u201d in this case\u2014either Alice\u2019s service or\nScribe can opt to invoke the suspension step and renegotiate\nwith another provider. Finally, a form of service composition\noccurs when Scribe employs its know-how about translation\nservices to seek a suitable service and negotiate with it.\nSample SaaS Scenario\nService transport layer\nService integration layer\nService layer\n(applications created\non demand from\nsmaller services)\nService transport layer\n(using forms such as\n.NET or J2EE)\nSupplier\u2019s software\napplication service\n(a) (b)\nFigure 1. Service\nmodels. (a) The \ncurrent supply-led\nservice model \nprovides only a \npredetermined range\nof services from a\nremote server. (b)\nThe proposed\ndemand-led service\nmodel has a service\nintegration layer\ninserted above the\ntransport layer.\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\n40 Computer\nwe expect emerging grid technologies to pro-\nvide and enhance.\nSERVICE INTEGRATION LAYER\nThe key to the quite radical difference\nbetween the two models represented in\nFigure 1 lies in the functionality that results\nfrom combining the facilities that the service\nintegration layer provides with those from\nthe component services that make up an\napplication. This layer employs software\ntechnology to support a set of concepts\nclosely related to business and supply models. The\nservice integration layer incorporates four key ser-\nvice-oriented functions. \nService description\nThis function matches client needs to appropri-\nate and available services. Essentially, the service\ndescription provides the means of mapping\nbetween the provider\u2019s description of its offerings\nand the client\u2019s description of its needs. The form\nused should accommodate descriptions of func-\ntionality, interfaces, and nonfunctional character-\nistics and constraints such as quality of service and\ncost. It should also describe the parameters within\nwhich both the service provider and client will\nnegotiate. \nService discovery\nClients use service discovery to locate appropri-\nate services, according to their requirements and\nselection criteria. Using this process, a client identi-\nfies those potential service providers whose offerings\nmeet its functional needs and who are prepared to\nnegotiate within some acceptable bounds. Discovery\ncan involve the recursive use of other services, includ-\ning brokers, and will result in a list of candidate ser-\nvices and providers. Service negotiation involves the\ninteraction between a client and one or more of the\nservice providers identified through the discovery\nprocess or already known to the client. This negoti-\nation aims to achieve agreement on the terms and\nconditions for supplying a service.\nService delivery\nThis function consists of three steps. Invocation\nis the calling-for step, during which the client\nrequests the provider to supply the specified service\naccording to the agreed terms and conditions. Next,\nto validate the invocation, in the provision step the\nservice provider must supply the agreed-upon ser-\nvice within the period agreed to in the supply con-\ntract. Finally, where the contract has unspecified\nbounds of provision, or when the bounds are\nreached, the suspension step establishes the point at\nwhich the client no longer needs the provider to\nsupply the service. \nService composition\nIn its most direct form, know-how\u2014expressed\nin terms of rules\u2014drives service composition \nso that a service provider can compose its service\nfrom lower-level services. However, such knowl-\nedge is sufficient only for constructing those ser-\nvices for which rules already exist. In the longer\nterm, we seek to devise a suitable mechanism for\ncreating new forms of service on demand. Nothing\nin our model prevents this, but creating the means\nof automatically providing entirely new services\nwill clearly only be practical once the other ele-\nments of the service integration layer have been\nfully developed.\nCURRENT SERVICE-RELATED PROTOCOLS\nThe current research literature frequently uses the\nservice-model concept to describe Web service tech-\nnologies such as Microsoft\u2019s .NET platform. Al-\nthough the Web services paradigm is fairly consistent\nwith our vision of SaaS, creating a true service-\noriented marketplace requires further developments.\nSince the introduction of Web services, three\nXML-based protocols have become de facto stan-\ndards. These three protocols have become so wide-\nspread that the term Web services has become\nsynonymous with them: \n\u2022 SOAP provides a message format for commu-\nnicating with and invoking Web services; \n\u2022 the Web Services Description Language (WSDL)\ndescribes how to access Web services; and \n\u2022 universal description, discovery and integra-\ntion (UDDI) provides a registry that clients can\nuse to discover available services.\nThese three protocols are adequate for simple Web\nservices requiring a remote-procedure-call style of\ncommunication. For more complex Web services\nthat consist of several services, other XML-based\nspecifications provide functions at higher or inter-\nmediate layers in a stack of protocols.\nWhen developing complex Web services, the lack\nof a universally accepted protocol that provides all\nthe functionality required at each layer can cause\nproblems. Adding to this confusion is the lack of\nan overall definition for the actual layers such a\nstack requires. The many standards organizations\nand companies involved all have different visions of\nIn its most \ndirect form, \nknow-how\u2014\nexpressed in \nterms of rules\u2014\ndrives service \ncomposition.\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\nthe layers and protocols that make up the Web ser-\nvices architecture. \nIBM produced one of the stack\u2019s original defini-\ntions in its Web Services Conceptual Architecture\ndocument.5 It included the three de facto standards\nat the XML-based messaging, service implementa-\ntion, and description and discovery layers, along\nwith a service flow layer that incorporated IBM\u2019s\nWeb Services Flow Language.6 However, the latter\nhas now been combined with Microsoft\u2019s XLANG\nprotocol (www.gotdotnet.com\/team\/xml_wsspecs\/\nxlang-c\/default.htm) to produce a new set of pro-\ntocols: the Business Process Execution Language\nfor Web Services (BPEL4WS; www-106.ibm.com\/\ndeveloperworks\/webservices\/library\/ws-bpel\/). The\nW3C Web Services Architecture group also is\nworking on its own stack version to standardize\nthe required layers,7 again emphasizing the three\nbasic protocols. \nFew of the available stacks include any detail\non the semantic Web protocols or the more busi-\nness-oriented Electronic Business using Extensible\nMarkup Language (ebXML). As a result, which\ntechnologies to use at each level\u2014and even which\nof the available technologies are compatible\u2014\nremains unclear. To this end, we propose an\nupdated Web services stack framework that\nplaces the currently available initiatives in con-\ntext. \nThe stack framework shown in Figure 2 consists\nof several open-systems-interconnection-type lay-\ners, with each level using the services of the levels\nbelow it.\n\u2022 Network. This is the underlying transport \nprotocol layer. \n\u2022 XML-based messaging. XML is the message\nformat for communicating documents and\nprocedure calls. This layer can, for example,\nuse SOAP with any underlying transport pro-\ntocols in the network layer. This layer decou-\nples messaging from the physical transport\nprotocol so that messages can concentrate \non describing the service semantics. The\nElectronic Business XML solution, ebXML\nMessaging Specification (ebMS), builds on\nSOAP by using its header specification exten-\nsibility to include authentication and contex-\ntual information.\n\u2022 Service description. This layer provides the\nfunctional description of a Web service in\nterms of its interface and implementation. The\nmajority of description languages at this layer\nutilize the XML Schema language for express-\ning data-type information.\n\u2022 Nonfunctional description. Protocols at this\nlayer describe a service in terms of its less tech-\nnical features, such as quality of service, cost,\ngeographic location, number of retries, and\nlegal factors.\n\u2022 Conversations. In this context, a conversation\nrefers to the external view of the messages a\nWeb service is receiving and sending. This layer\ntherefore describes the correct data types and\nsequence of messages or documents a Web ser-\nvice is exchanging.\n\u2022 Choreography. Whereas all the previous lay-\nOctober 2003 41\nWSDL\nWSEL\nRDF\nDAML-S service grounding\nSOAP\nHTTP, FTP, SMTP, and others\nDAML-S service profile\nDAML-S service model\nDAML-S service model\nWSCI\nBTP\nBPML\nCS-WS WSCL\nWS-Coordination\nWS-Transaction\nBPEL4WS\nUDDI\nebXML\nCPA\nebXML\nregistries\nebXML\nmessaging\nebXML\nCPP\nebXML\nBPSS\nBTP\nBPML\nWSDL-based Semantic-based ebXML-based\nDiscovery\nContracts\nBusiness process\/\nworkflow\nTransactions\nChoreography\nConversations\nNonfunctional\ndescription\nService description\nXML-based messaging\nNetwork\nFigure 2. Proposed\nWeb services stack\nframework.\nSeparated into three\nvertical sections,\nthe protocols use \nor extend WSDL,\nhave roots in the\nsemantic Web\u2019s\nresource description \nframework, and \nthe DARPA Agent\nMarkup Language\nfor Services \n(DAML-S), and\ninclude ebXML \nspecifications.\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\n42 Computer\ners are largely concerned with describing a sin-\ngle Web service, the choreography layer coor-\ndinates several Web services into a pattern to\nprovide an overall outcome. For example, pro-\ntocols in this layer would specify the order in\nwhich the methods\u2014or operations in WSDL\nterminology\u2014of each Web service must be\ninvoked.\n\u2022 Transactions. The protocols in this layer facil-\nitate monitoring transactions between Web\nservices. When services themselves consist of\nother services, numerous points of failure\nbecome possible. The transactions layer\ndescribes how to achieve this composition in\nan atomic way, so that, for example, the entire\nprocess either completes successfully or rolls\nback.\n\u2022 Business process and workflow. The protocols\nin this layer describe how to actually compose\na higher-level service from several other Web\nservices, through descriptions of the control\nand data flows involved in the process. It dif-\nfers from the choreography layer by providing\ninternal details of the composition to supply\nan executable business process.\n\u2022 Contracts. This layer outlines the format of the\nmachine-readable contracts necessary to auto-\nmate service-based electronic business. The\ncontract outlines the transaction\u2019s terms and\nconditions and finalizes any negotiable para-\nmeters, such as cost and acceptable time to\ndelivery.\n\u2022 Discovery. Providers use this layer to publish\ndetails of their Web services so that clients can\nthen search and discover any that meet their\nneeds.\nWe also separate our stack into three vertical sec-\ntions. The first section includes protocols that use\nor extend WSDL. The second includes protocols\nthat have roots in the semantic Web: the resource\ndescription framework (RDF) and the DARPA\nAgent Markup Language for Services (DAML-S).8\nAs Figure 2 shows, WSDL crosses the boundary\ninto the semantic-based section in our stack. This\nis not because WSDL is semantic-based, but\nbecause DAML-S builds upon WSDL for its Service\nGrounding specification. The ebXML specifications\ncomprise the third vertical layer in our stack.\nAlthough it is independent of Web services, ebXML\noffers much the same functionality as the other \nsections.\nAlso, several protocols relate to security within\nthe Web services paradigm, including enhance-\nments added to SOAP to provide secure messaging\ncapabilities such as those that WS-Security defines.\nHowever, because it concentrates instead on other\nareas, our current model does not include security.\nREALIZING THE SERVICE INTEGRATION LAYER\nFigure 2 reveals several significant gaps in the\ncurrent Web services stack.\nService description\nCurrent description methods suffer from a severe\nlimitation: Although they provide the technical\ninformation a client requires to invoke a service,\nthey cannot describe the function the service pro-\nvides semantically. They also lack descriptions of\nservice delivery\u2019s negotiable aspects. For example,\nalthough it is the de facto standard Web services\nlanguage, WSDL describes a service in terms only\nof its acceptable data types, methods, message for-\nmat, transport protocol, and end-point uniform\nresource identifier (URI). \nIn the ebXML section of our stack framework,\nthe Collaboration Protocol Profile specification\ndeals with service description. Although it includes\nmore details about the service provider and error-\nhandling scenarios than WSDL, the CPP focuses\nlargely on the transaction\u2019s technical aspects. In the\nWSDL-based section of our framework, IBM\u2019s Web\nServices Endpoint Language6 is the only protocol\nexplicitly designed to describe the nonfunctional,\nnegotiable elements of Web services. WSEL, how-\never, remains a work in progress.\nDAML-S is the only available description\nmethod designed specifically for describing the\nfunctional and nonfunctional aspects of services,\nincluding details of what they actually do. A client\ncan use the specification\u2019s service profile to describe\nits requirements, and the service provider can use\nthe service profile to describe its capabilities, includ-\ning nonfunctional parameters, in a semantically\nrich, ontology-based format. However, while clos-\nest to our requirements, DAML-S has not yet\nreached a final release. Thus, the exact details of\nwhat the service profile will include have yet to be\nfinalized, and it also currently lacks an extensive\nselection of usable, standardized ontologies.\nSupport for the language within current tools is also\nfairly limited.\nService discovery\nUDDI is the de facto standard for discovery in the\nWeb services environment. For our purposes,\nUDDI\u2019s key limitation lies in its inability to allow\nsemantic descriptions. This limits searching to key-\nCurrent \nmethods lack\ndescriptions of\nservice delivery\u2019s\nnegotiable\naspects.\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\nwords, such as the name of the service provider or\nthe service itself, the service\u2019s location, or the business\nclassification. Although the ebXML registry specifi-\ncation offers richer searching capabilities in the form\nof SQL and XML filter queries, it does not allow\nsemantic searching. Therefore, a client cannot use\neither of the available registry specifications to search\nfor a service based on its functionality, which limits\nthe current model\u2019s dynamic discovery capabilities.\nClients can use the DAML-S service profile to\nmake requests for services, and providers can use it\nto describe their services semantically by the func-\ntionality they provide. Because the language is\nontology-based, its inferential capabilities should\nallow matching requests to service descriptions.\nHowever, this requires a registry capable of per-\nforming true semantic matching, which UDDI cur-\nrently does not do. To this end, researchers have\nbeen using an algorithm from previous research\nthat matches requests to advertisements according\nto their semantics9 to determine how to extend\nUDDI with DAML-S.\nService negotiation\nThe SaaS model requires that, upon discovering\na suitable service, the client and provider must\nnegotiate the service\u2019s delivery terms and conditions\nautomatically. Although several protocols through-\nout the stack framework include descriptions of\nnegotiable parameters\u2014including ebXML\u2019s CPP,\nDAML-S, and WSEL\u2014none allow for fully auto-\nmated negotiation. The model also needs electronic\ncontracts to seal any negotiations that take place.\nFigure 2 shows that, among the current ap-\nproaches, only ebXML includes such contracts. \nThe Collaboration Protocol Agreement primar-\nily defines the common protocols and capabilities\nof only two parties. Formed from the intersection\nof the two parties\u2019 CPP documents, the CPA uses\nXML to define properties such as the contract\u2019s\nduration and the transactions\u2019 agreed security fea-\ntures. Formulating a CPA is intended to be a man-\nual process.10\nService delivery\nOur model identifies three steps of primary\nimportance to service delivery. Current technolo-\ngies cover a Web service\u2019s basic invocation and pro-\nvision, but they do not support either monitoring\nwhether the service is supplied within the agreed\nterms and conditions or suspending the provision,\nif necessary. Doing so would require an electronic\ncontract, which only ebXML includes. Services can\nuse ebXML\u2019s CPA document to monitor the trans-\nactions and terminate the process if this con-\ntract is broken. However, in relation to our\nmodel, this document does not detail any legal\nor nonfunctional parameters such as cost or\nquality of service.\nSeveral other protocols in the stack, particu-\nlarly the Web Services Choreography Interface\nand WSEL, also include elements that touch\nupon service monitoring and suspension. WSCI\nlets the developer specify how a service will\nreact in exceptional circumstances, while both\nWSCI and WSEL can detail time-out periods.\nThus, developers could use these elements to\nmonitor the transaction at a basic level. \nAlso, true dynamic binding and invocation relies\nheavily on the richness of the service description.\nThis description must be machine readable and\nsemantically rich to enable the requesting service\nto automatically decipher all the requirements of\nuse. This capability is not yet fully in place.\nService composition\nThe automatic composition of Web services\nrequires suitable protocols at the conversations,\nchoreography, workflow, and transactions layers.\nAs Figure 2 shows, several protocol combinations\nare available at each of these layers within the\nWSDL-based section:\n\u2022 HP\u2019s Web Services Conversation Language\n(WSCL) and IBM\u2019s recent Conversation-\nSupport for Web Services specification (CS-\nWS) both cover the conversation layer,11\n\u2022 the WS-Coordination protocol and WSCI\nboth cover the choreography that links each\nof the collaborating Web services together, and\n\u2022 the Business Transaction Protocol (BTP) and\nWS-Transaction both cover monitoring and\nhandling long-running business transactions.\nDevelopers can use either the Business Process\nModeling Language or the Business Process Exe-\ncution Language for Web Services to model the\nactual control and data flows within the composi-\ntion. BPEL4WS, which is likely to become more\nwidely adopted, can be distinguished from other\nprotocols in the layer because it includes both an\nabstract XML description and an executable lan-\nguage. The actual BPEL4WS specification also\nencompasses the WS-Coordination and WS-\nTransaction protocols, thus ensuring compatibil-\nity among the three layers.\nThe Business Process Specification Schema (BPSS)\nprovides an ebXML alternative. When combined\nOctober 2003 43\nThe SaaS model\nrequires that \nthe client and\nprovider negotiate\nthe service\u2019s\ndelivery terms and\nconditions\nautomatically.\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\n44 Computer\nwith the compatible BPML and BTP specifications,\nit can also describe the internal details of workflows\nand long-running transactions. However, the BPSS\nis designed to model only a transaction between two\nparties, not a complex Web services composition. \nDAML-S covers many of the compositional layers\nwith the service profile and service model specifica-\ntions. However, the current release lacks support for\nlong-running transactions. We expect that a future\nspecification will include such support, along with\na control model that describes a process in terms of\nits state, allowing automated monitoring.\nA lthough many available technologies supportservice composition, they require that thedeveloper knows, at design time, the details\nof the services to be used. In the SaaS model, ser-\nvices will be dynamically composable when needed,\nthrough binding of several other, lower-level ser-\nvices. Indeed, a true service-oriented model will\nautomatically compose a new higher-level service\nfrom a client\u2019s description of the sequence of tasks\nto be performed. The service could achieve this by\nsearching for and dynamically binding to lower-\nlevel services that perform each task.\nAlthough many of the protocols necessary to\nachieve true service provision are either available\nor under development, significant gaps remain.\nPerhaps not surprisingly, these protocols address\nthe less technical aspects of service delivery and thus\nrepresent research challenges that have strong inter-\ndisciplinary elements. \u0002\nAcknowledgments\nWe thank the members of the Pennine Group\n(www.service-oriented.com) for their continuing\nresearch into software as a service and for con-\ntributing to the ideas in this article. We also thank\nthe members of the Integration Broker for\nHeterogeneous Information Sources project\n(www.co.umist.ac.uk\/ibhis) for their useful discus-\nsions concerning Web services and for the ongoing\ndevelopment of a service-oriented prototype.\nReferences\n1. O.P. Brereton and D. Budgen, \u201cComponent-Based\nSystems: A Classification of Issues,\u201d Computer, Nov.\n2000, pp. 54-62.\n2. K.H. Bennett et al., \u201cAn Architectural Model for Ser-\nvice-Based Software with Ultra-Rapid Evolution,\u201d\nProc. Int\u2019l Conf. Software Maintenance (ICSM\n2001), IEEE CS Press, 2001, pp. 292-300.\n3. O.P. Brereton et al., \u201cThe Future of Software,\u201d\nComm. ACM, Dec. 1999, pp. 78-84.\n4. C. Lovelock, S. Vandermerwe, and B. Lewis, Services\nMarketing, Prentice-Hall, 1996.\n5. H. Kreger, \u201cWeb Services Conceptual Architecture\n(WSCA 1.0),\u201d 2001; www-3.ibm.com\/software\/\nsolutions\/webservices\/pdf\/WSCA.pdf.\n6. F. Leymann, \u201cWeb Services Flow Language (WSFL)\n1.0,\u201d 2001; www-3.ibm.com\/software\/solutions\/\nwebservices\/pdf\/WSFL.pdf.\n7. D. Booth et al., \u201cWeb Services Architecture: W3C\nWorking Draft,\u201d 14 May 2003; www.w3.org\/TR\/\nws-arch\/.\n8. A. Ankolekar et al., \u201cDAML-S: Web Services\nDescription for the Semantic Web,\u201d Proc. 1st Int\u2019l\nSemantic Web Conf. (ISWC 2002), Springer-Verlag,\n2002, pp. 348-363.\n9. M. Paolucci et al., \u201cImporting the Semantic Web in\nUDDI,\u201d Proc. Web Services, E-Business, and Seman-\ntic Web Workshop (CAiSE 2002), Springer-Verlag,\n2002, pp. 225-236.\n10. ebXML Trading-Partners Team, \u201cCollaboration-Pro-\ntocol Profile and Agreement Specification,\u201d v. 1.0,\n2001; www.ebxml.org\/specs\/ebCCP.pdf.\n11. J.E. Hanson, P. Nandi, and S. Kumaran, \u201cConversa-\ntion Support for Business Process Integration,\u201d Proc.\n6th IEEE Int\u2019l Enterprise Distributed Object Com-\nputing Conf. (EDOC 2002), IEEE CS Press, 2002,\npp. 65-75.\nMark Turner is a research assistant and PhD stu-\ndent in the Department of Computer Science at\nKeele University, UK. His research interests focus\non service-based software engineering, in particu-\nlar access control, description languages, and Web\nservices substitution. Turner received an MSc in\ninformation technology from Keele University.\nContact him at m.turner@cs.keele.ac.uk.\nDavid Budgen is a professor of software engineer-\ning at Keele University. His research interests\ninclude design, measurement, and empirical eval-\nuation practices for software-based systems. Bud-\ngen received a PhD in theoretical physics from the\nUniversity of Durham. Contact him at d.budgen@\ncs.keele.ac.uk.\nPearl Brereton is a professor in the Department of\nComputer Science at Keele University. Her research\nfocuses on component-based and service-based\nsoftware engineering. Brereton received a PhD in\nnumerical analysis from Keele University. Contact\nher at o.p.brereton@cs.keele.ac.uk.\nAuthorized licensed use limited to: University of Durham. Downloaded on October 8, 2008 at 10:08 from IEEE Xplore.  Restrictions apply.\n"}