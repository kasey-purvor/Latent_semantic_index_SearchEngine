{"doi":"10.1016\/j.tcs.2009.09.005","coreId":"8648","oai":"oai:eprints.brighton.ac.uk:8162","identifiers":["oai:eprints.brighton.ac.uk:8162","10.1016\/j.tcs.2009.09.005"],"title":"A graph theoretic approach to general euler diagram drawing","authors":["Stapleton, Gem","Howse, John","Rodgers, Peter"],"enrichments":{"references":[{"id":42754844,"title":"A system for virtual directories using Euler diagrams, in:","authors":[],"date":"2005","doi":"10.1016\/j.entcs.2005.02.019","raw":"R. DeChiara, U. Erra, V. Scarano, A system for virtual directories using Euler diagrams, in: Proceedings of Euler Diagrams 04, Vol. 134 of Electronic Notes in Theoretical Computer Science, 2005, pp. 33\u201353.","cites":null},{"id":42754863,"title":"Automated theorem proving in Euler diagrams systems,","authors":[],"date":"2007","doi":"10.1007\/s10817-007-9069-y","raw":"G. Stapleton, J. Masthoff, J. Flower, A. Fish, J. Southern, Automated theorem proving in Euler diagrams systems, Journal of Automated Reasoning 39 (2007) 431\u2013470.","cites":null},{"id":42754838,"title":"Chronic kidney disease care delivered by us family medicine and internal medicine trainees: results from an online survey,","authors":[],"date":null,"doi":null,"raw":"O. Lenz, A. Fornoni, Chronic kidney disease care delivered by us family medicine and internal medicine trainees: results from an online survey, BMC Medicine 4 (30).","cites":null},{"id":42754832,"title":"Collaborative knowledge capture in ontologies, in:","authors":[],"date":"2005","doi":"10.1145\/1088622.1088641","raw":"P. Hayes, T. Eskridge, R. Saavedra, T. Reichherzer, M. Mehrotra, D. Bobrovnikoff, Collaborative knowledge capture in ontologies, in: Proceedings of the 3rd International Conference on Knowledge Capture, 2005, pp. 99\u2013106.","cites":null},{"id":42754842,"title":"Defining health\/illness: Societal and\/or clinical medicine?,","authors":[],"date":"2006","doi":null,"raw":"L. Niebro\u00b4j, Defining health\/illness: Societal and\/or clinical medicine?, Journal of Physiology and Pharmacology 57 (4) (2006) 251\u2013262.","cites":null},{"id":42754827,"title":"Drawing area-proportional Venn and Euler diagrams, in:","authors":[],"date":"2003","doi":"10.1007\/978-3-540-24595-7_44","raw":"S. Chow, F. Ruskey, Drawing area-proportional Venn and Euler diagrams, in: Proceedings of Graph Drawing 2003, Perugia, Italy, Vol. 2912 of LNCS, Springer-Verlag, 2003, pp. 466\u2013477.","cites":null},{"id":42754829,"title":"Ensuring the drawability of Euler diagrams for up to eight sets, in:","authors":[],"date":"2004","doi":"10.1007\/978-3-540-25931-2_13","raw":"A. Verroust, M.-L. Viaud, Ensuring the drawability of Euler diagrams for up to eight sets, in: Proceedings of 3rd International Conference on the Theory and Application of Diagrams, Vol. 2980 of LNAI, Springer, Cambridge, UK, 2004, pp. 128\u2013141.","cites":null},{"id":42754841,"title":"Failure mode modular de-composition using spider diagrams, in:","authors":[],"date":"2004","doi":"10.1016\/j.entcs.2005.02.018","raw":"R. Clark, Failure mode modular de-composition using spider diagrams, in: Proceedings of Euler Diagrams 2004, Vol. 134 of ENTCS, 2005, pp. 19\u201331.","cites":null},{"id":42754858,"title":"General Euler diagram generation, in:","authors":[],"date":"2008","doi":"10.1007\/978-3-540-87730-1_6","raw":"P. Rodgers, L. Zhang, A. Fish, General Euler diagram generation, in: International Conference on the Theory and Application of Diagrams, Springer, 2008.","cites":null},{"id":42754828,"title":"Generalized Venn diagrams: A new method for visualizing complex genetic set relations,","authors":[],"date":"2005","doi":"10.1093\/bioinformatics\/bti169","raw":"H. Kestler, A. Muller, T. Gress, M. Buchholz, Generalized Venn diagrams: A new method for visualizing complex genetic set relations, Journal of Bioinformatics 21 (8) (2005) 1592\u20131595.","cites":null},{"id":42754851,"title":"Generating and drawing area-proportional Euler and Venn diagrams,","authors":[],"date":"2007","doi":"10.1007\/978-3-540-24595-7_44","raw":"S. Chow, Generating and drawing area-proportional Euler and Venn diagrams, Ph.D. thesis, University of Victoria (2007).","cites":null},{"id":42754853,"title":"Generating Euler diagrams from existing layouts, in: Layout of (Software) Engineering Diagrams,","authors":[],"date":"2008","doi":null,"raw":"G. Stapleton, J. Howse, P. Rodgers, L. Zhang, Generating Euler diagrams from existing layouts, in: Layout of (Software) Engineering Diagrams, ECEASST, 2008.","cites":null},{"id":42754856,"title":"Generating Euler diagrams, in:","authors":[],"date":"2002","doi":"10.1007\/3-540-46037-3_6","raw":"J. Flower, J. Howse, Generating Euler diagrams, in: Proceedings of 2nd International Conference on the Theory and Application of Diagrams, Springer, Georgia, USA, 2002, pp. 61\u201375.","cites":null},{"id":42754826,"title":"Lettres a une princesse dallemagne sur divers sujets de physique et de philosophie,","authors":[],"date":"1775","doi":"10.5962\/bhl.title.16687","raw":"L. Euler., Lettres a une princesse dallemagne sur divers sujets de physique et de philosophie, Letters 2 (1775) 102\u2013108, berne, Socit Typographique.","cites":null},{"id":42754840,"title":"Logic and Visual Information,","authors":[],"date":"1995","doi":"10.2307\/2275831","raw":"E. Hammer, Logic and Visual Information, CSLI Publications, 1995.","cites":null},{"id":42754836,"title":"Longitudinal changes in the visual field and optic disc in glaucoma,","authors":[],"date":"2005","doi":"10.1016\/j.preteyeres.2004.10.002","raw":"P. Artes, B. Chauhan, Longitudinal changes in the visual field and optic disc in glaucoma, Progress in Retinal and Eye Research 24 (3) (2005) 333\u2013354.","cites":null},{"id":42754854,"title":"On the diagrammatic and mechanical representation of propositions and reasonings,","authors":[],"date":null,"doi":"10.1080\/14786448008626877","raw":"J. Venn, On the diagrammatic and mechanical representation of propositions and reasonings, Phil.Mag.","cites":null},{"id":42754862,"title":"Properties of Euler diagrams, in:","authors":[],"date":"2007","doi":"10.1109\/vlhcc.2013.6645262","raw":"G. Stapleton, P. Rodgers, J. Howse, J. Taylor, Properties of Euler diagrams, in: Proceedings of Layout of Software Engineering Diagrams, EASST, 2007, pp. 2\u201316.","cites":null},{"id":42754859,"title":"Spatial logic and the complexity of diagrammatic reasoning,","authors":[],"date":"1997","doi":null,"raw":"O. Lemon, I. Pratt, Spatial logic and the complexity of diagrammatic reasoning, Machine GRAPHICS and VISION 6 (1) (1997) 89\u2013108.","cites":null},{"id":42754846,"title":"Towards a general solution to drawing area-proportional Euler diagrams, in:","authors":[],"date":"2005","doi":"10.1016\/j.entcs.2005.02.017","raw":"S. Chow, F. Ruskey, Towards a general solution to drawing area-proportional Euler diagrams, in: Proceedings of Euler Diagrams, Vol. 134 of ENTCS, 2005, pp. 3\u201318.","cites":null},{"id":42754831,"title":"Towards a visual editing environment for the languages of the semantic web,","authors":[],"date":"2002","doi":null,"raw":"J. Lovdahl, Towards a visual editing environment for the languages of the semantic web, Ph.D. thesis, Linkoping University (2002).","cites":null},{"id":42754861,"title":"Using DAG transformations to verify Euler\/Venn homogeneous and Euler\/Venn FOL heterogeneous rules of inference,","authors":[],"date":"2004","doi":"10.1007\/s10270-003-0044-8","raw":"N. Swoboda, G. Allwein, Using DAG transformations to verify Euler\/Venn homogeneous and Euler\/Venn FOL heterogeneous rules of inference, Journal on Software and System Modeling 3 (2) (2004) 136\u2013149.","cites":null},{"id":42754845,"title":"Using Euler diagrams in traditional library environments, in:","authors":[],"date":"2004","doi":"10.1016\/j.entcs.2005.02.024","raw":"J. Thie`vre, M. Viaud, A. Verroust-Blondet, Using Euler diagrams in traditional library environments, in: Euler Diagrams 2004, Vol. 134 of ENTCS, 2005, pp. 189\u2013202.","cites":null},{"id":42754855,"title":"Venn diagrams for many sets.,","authors":[],"date":"1989","doi":"10.3840\/08003934","raw":"A. W. Edwards, Venn diagrams for many sets., New Scientist 7 (1989) 51\u201356.","cites":null},{"id":42754830,"title":"VennFS: A Venn diagram file manager, in:","authors":[],"date":"2003","doi":"10.1109\/iv.2003.1217967","raw":"R. DeChiara, U. Erra, V. Scarano, VennFS: A Venn diagram file manager, in: Proceedings of Information Visualisation, IEEE Computer Society, 2003, pp. 120\u2013126.","cites":null},{"id":42754847,"title":"Vennmaster: Area-proportional Euler diagrams for functional go analysis of microarrays,","authors":[],"date":null,"doi":"10.1186\/1471-2105-9-67","raw":"H. Kestler, A. Muller, J. Kraus, M. Buchholz, T. Gress, H. L. abd D. Kane, B. Zeeberg, J. Weinstein, Vennmaster: Area-proportional Euler diagrams for functional go analysis of microarrays, BMC Bioinformatics 9 (67).","cites":null},{"id":42754849,"title":"Visualise undrawable Euler diagrams, in:","authors":[],"date":"2008","doi":"10.1109\/iv.2008.78","raw":"P. Simonetto, D. Auber, Visualise undrawable Euler diagrams, in: 12th International Conference on Information Visualization, IEEE, 2008, pp. 594\u2013 599.","cites":null},{"id":42754834,"title":"Visualization of formal specifications, in:","authors":[],"date":"1999","doi":"10.1109\/apsec.1999.809590","raw":"S.-K. Kim, D. Carrington, Visualization of formal specifications, in: 6th Aisa Pacific Software Engineering Conference, IEEE Computer Society Press, Los Alamitos, CA, USA, 1999, pp. 102\u2013109.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-01-01","abstract":"Euler diagrams are used in a wide variety of areas for representing information about relationships between collections of objects. Recently, several techniques for automated Euler diagram drawing have been proposed, contributing to the Euler diagram generation problem: given an abstract description, draw an Euler diagram with that description and which possesses certain properties, sometimes called well-formedness conditions. We present the first fully formalized, general framework that permits the embedding of Euler diagrams that possess any collection of the six typically considered well-formedness conditions. Our method first converts the abstract description into a vertex-labelled graph. An Euler diagram can then be formed, essentially by finding a dual graph of such a graph. However, we cannot use an arbitrary plane embedding of the vertex-labelled graph for this purpose. We identify specific embeddings that allow the construction of appropriate duals. From these embeddings, we can also identify precisely which properties the drawn Euler diagram will possess and 'measure' the number of times that each well-formedness condition is broken. We prove that every abstract description can be embedded using our method. Moreover, we identify exactly which (large) class of Euler diagrams can be generated","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.brighton.ac.uk:8162<\/identifier><datestamp>\n      2015-04-20T15:51:51Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D47303030<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.brighton.ac.uk\/8162\/<\/dc:relation><dc:title>\n        A graph theoretic approach to general euler diagram drawing<\/dc:title><dc:creator>\n        Stapleton, Gem<\/dc:creator><dc:creator>\n        Howse, John<\/dc:creator><dc:creator>\n        Rodgers, Peter<\/dc:creator><dc:subject>\n        G000 Computing and Mathematical Sciences<\/dc:subject><dc:description>\n        Euler diagrams are used in a wide variety of areas for representing information about relationships between collections of objects. Recently, several techniques for automated Euler diagram drawing have been proposed, contributing to the Euler diagram generation problem: given an abstract description, draw an Euler diagram with that description and which possesses certain properties, sometimes called well-formedness conditions. We present the first fully formalized, general framework that permits the embedding of Euler diagrams that possess any collection of the six typically considered well-formedness conditions. Our method first converts the abstract description into a vertex-labelled graph. An Euler diagram can then be formed, essentially by finding a dual graph of such a graph. However, we cannot use an arbitrary plane embedding of the vertex-labelled graph for this purpose. We identify specific embeddings that allow the construction of appropriate duals. From these embeddings, we can also identify precisely which properties the drawn Euler diagram will possess and 'measure' the number of times that each well-formedness condition is broken. We prove that every abstract description can be embedded using our method. Moreover, we identify exactly which (large) class of Euler diagrams can be generated.<\/dc:description><dc:publisher>\n        Elsevier<\/dc:publisher><dc:date>\n        2010-01-01<\/dc:date><dc:type>\n        Journal article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n          Stapleton, Gem, Howse, John and Rodgers, Peter  (2010) A graph theoretic approach to general euler diagram drawing  Theoretical Computer Science, 411 (1).  pp. 91-112.  ISSN 0304-3975     <\/dc:identifier><dc:relation>\n        10.1016\/j.tcs.2009.09.005<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.brighton.ac.uk\/8162\/","10.1016\/j.tcs.2009.09.005"],"year":2010,"topics":["G000 Computing and Mathematical Sciences"],"subject":["Journal article","PeerReviewed"],"fullText":"                             Elsevier Editorial System(tm) for \nTheoretical Computer Science\n                                  Manuscript Draft\nManuscript Number: TCS-D-08-00551R1\nTitle: A Graph Theoretic Approach to General Euler Diagram Drawing\nArticle Type: Regular Paper\nSection\/Category: A - Algorithms, automata, complexity and games\nKeywords: Euler diagrams; Venn diagrams; graph drawing; information \nvisualisation\nCorresponding Author: Dr Gem Stapleton, PhD\nCorresponding Author's Institution: University of Brighton\nFirst Author: Gem Stapleton, PhD\nOrder of Authors: Gem Stapleton, PhD; John Howse; Peter Rodgers\nDear Professor Ausiello, \n \nPlease find attached our updated manuscript based on the review. The Overview of \nChanges details the updates that we have made. \n \nRegards, \n \nDr Gem Stapleton \n* Revision Note\nResponse to the review \n \nWe would like to thank the reviewer for their constructive criticism, which has led to \nan improved version of the paper. The specific actions undertaken are detailed below. \n \nMajor Remarks \n \nFirst, we were asked to provide a formalisation of the six wellformedness criteria. We \nhave added these definitions to the paper. \n \nSecond, we were asked to provide experimental results about the implementation with \nregard to efficiency of the proposed framework. This is done in a new section (7.1) on \npages 34-35. \n \nWith more general regard to efficiency, we have noted on page 7 (rather than stating \n\u201cour method is able to generate such a diagram given sufficient time and space\u201d), \n\u201cMoreover, if an abstract description can be visualised as an Euler diagram with a \ncertain set of properties then our method is able to generate such a diagram. However, \nwithout heuristics to guide the search for an appropriate graph this process will have \nexponential time complexity\u201d.  \n \nMoreover, on page 18, we have added some discussions on the complexity of the \ngeneration process: \n \n\u201cUsing the properties of $\\hat{G}$ we can also count the number of times $d$ \nviolates each of the six properties. The ability to count violations has advantages from \na generation perspective. It is computationally hard to find a graph that generates a \ndiagram possessing a specified collection of properties. Current graph based methods \nfor generating diagrams from any abstract description take exponential time in the \nworst case [19]. Similarly our generation method has exponential time worst case \nperformance relative to the number of zones in the abstract description. The \ncomputationally expensive part of the search is through the space of vertex-labelled \ngraphs, if we want to embed an Euler diagram with particular properties. If we do not \nmind which properties our embedded Euler diagram possess, then we have already \nprovided a trivial method of producing an appropriate vertex-labelled graph. From an \nimplementation perspective, after finding a vertex-labelled graph, we only need to \nthen find a dual of this graph which can be done in polynomial time.\u201d \n \nMinor Remarks \n \nAll of the minor remarks have been addressed as requested. With regard to lemma 4 \n(now lemma 3), we have included a complete proof. \n \nOverview of changes\nA Graph Theoretic Approach to General\nEuler Diagram Drawing\nGem Stapleton John Howse\nUniversity of Brighton, UK\nwww.cmis.brighton.ac.uk\/research\/vmg,\n{g.e.stapleton,john.howse}@brighton.ac.uk\nPeter Rodgers\nUniversity of Kent, UK\nwww.cs\/kent.ac.uk\/people\/staff\/pjr\/\np.j.rodgers@kent.ac.uk\nAbstract\nEuler diagrams are used in a wide variety of areas for representing information\nabout relationships between collections of objects. Recently, several techniques for\nautomated Euler diagram drawing have been proposed, contributing to the Euler\ndiagram generation problem: given an abstract description, draw an Euler diagram\nwith that description and which possesses certain properties, sometimes called well-\nformedness conditions. We present the first fully formalized, general framework that\npermits the embedding of Euler diagrams that possess any collection of the six typ-\nically considered wellformedness conditions. Our method first converts the abstract\ndescription into a vertex-labelled graph. An Euler diagram can then be formed,\nessentially by finding a dual graph of such a graph. However, we cannot use an ar-\nbitrary plane embedding of the vertex-labelled graph for this purpose. We identify\nspecific embeddings that allow the construction of appropriate duals. From these\nembeddings, we can also identify precisely which properties the drawn Euler di-\nagram will possess and \u2018measure\u2019 the number of times that each wellformedness\ncondition is broken. We prove that every abstract description can be embedded us-\ning our method. Moreover, we identify exactly which (large) class of Euler diagrams\ncan be generated.\nKey words: Euler diagrams, Venn diagrams, graph drawing, information\nvisualisation\nPreprint submitted to Theoretical Computer Science 16 April 2009\nManuscript\n1 Introduction\nMany diagrams are based on finite collections of (usually simple) closed curves;\nsuch a collection of closed curves is called an Euler diagram [1], of which Venn\ndiagrams are examples. To illustrate, the Euler diagram in Fig. 1 contains\nthree closed curves, P , Q and R, which represent collections of objects (sets);\nit asserts that P and Q are disjoint, and that R may intersect with either\nP or Q. Areas in which they are used include the visualization of statistical\nP Q\nR\nd1\nFig. 1. An Euler diagram.\ndata [2,3], displaying the results of database queries [4] and representing non-\nhierarchical computer file systems [5]. They have been used in a visual semantic\nweb editing environment [6] and for viewing clusters which contain concepts\nfrom multiple ontologies [7]. Another application area is formal object oriented\nspecification [8]. For further application areas, see [9\u201315]. In all of these areas,\nautomated Euler diagram layout has the potential to bring huge benefits and\nit is unsurprising that, with the computing power now available, considerable\nresearch effort is focused on this topic.\nVarious methods for automatically generating Euler diagrams have been devel-\noped, each concentrating on a particular class of Euler diagrams; for example,\nsee [2\u20134,16\u201318]. Ideally, such generation algorithms will produce diagrams with\neffective layouts in an efficient way. The generation algorithms developed so far\nproduce Euler diagrams that have certain sets of properties, sometimes called\nwellformedness conditions (further discussed below). Each generation method\nstarts with an abstract description of the required diagram and proceeds to\nseek a layout.\nOne approach constructs a Venn diagram (a special type of Euler diagram in\nwhich all intersections between the curves are present) and removes minimal\nregions in order to produce the required Euler diagram [19]; this algorithm\ngenerates a restricted class of so-called monotonic Euler diagrams which must\nhave a minimal region contained by all of the curves.\nEuler diagrams can also be inductively generated, adding one curve at a\ntime [20]. This is an intuitive generation method, since it matches how people\ntypically draw Euler diagrams (at least, based on our experience). This ap-\nproach to Euler diagram generation can be seen as extending the construction\n2\nVenn provided in his original paper, where he described how to add curves\nto Venn diagrams [21]. Edwards also developed an inductive construction for\nVenn diagrams [22].\nP Q\nR\nS\nP\nPR\nQ\nQS\nS\nembed\nFig. 2. Generation using a dual graph.\nOther existing approaches, such as [23,24], construct a so-called dual graph\nfrom the abstract description, which is embedded in the plane, and \u2018wrap\u2019\nclosed curves around the dual graph, as illustrated in Fig. 2; a curve labelled\nL encloses precisely the vertices that include the label L. Once an appropriate\nembedding of the dual graph has been found, a layout for each curve in the\ndiagram is determined. It is this graph based generation method that we\nsignificantly extend in this paper.\nIn particular, we develop a very general, formalized framework that allows\nthe generation of an Euler diagram given any abstract description. Moreover,\nwe identify a very large class of Euler diagrams that our method can gener-\nate; each abstract description corresponds to many Euler diagrams. In more\ndetail, we define a family of vertex-labelled graphs whose duals give rise to\nEuler diagrams with the required abstractions. However, we cannot construct\narbitrary vertex-labelled graphs for this process and present conditions such\nthat if the graph satisfies those conditions then it will generate an Euler di-\nagram with the correct abstraction. We proceed to use these vertex-labelled\ngraphs to identify properties that the generated Euler diagram will possess.\nThis allows us to choose a vertex-labelled graph from which to generate an\nEuler diagram based on the properties we wish that diagram to possess.\nTwo such properties include all curves being simple (simplicity) and each curve\nhaving a different label (unique labels). In addition, diagrams may possess\ncurves which never run concurrently (no concurrency), have only connected\nzones, have no n-points (for some specified integer n) of intersection between\ncurves, and have curves which never \u2018brush\u2019. To illustrate, in Fig. 3, the curves\nb and c run concurrently. The zone inside a only is not connected (it consists of\ntwo minimal regions). There is a 3-point of intersection between the curves d,\ne and f , which means this diagram does not possess the no 3-points property\n(although it does possess the no 4-points property). Finally, the curves b and\nd intersect at a brushing point; these points are where two curves intersect,\nbut not as part of a concurrent line segment, and do not cross.\nLarge subsets of these properties are often imposed in generation methods,\nwith the embedded diagrams required to possess the imposed properties. Eu-\n3\nler diagrams that possess many of these properties tend to be more visually\npleasing or more easily interpreted. However, not every abstract description\n(formalized below) can be realized under particular collections of these proper-\nties (see, for example, [25]). This leads to the necessity of being able to embed\nEuler diagrams under varying sets of these properties, in part to accommo-\ndate user preference when not all of them can hold. A feature of our generation\nmethod is the ability to determine which properties hold prior to generation.\nMoreover, we can select a vertex-labelled graph that allows us to generate a\ndiagram with the required properties, provided such a diagram exists.\na\nb\nc d\ne\nf\nFig. 3. Properties of Euler diagrams.\nSection 2 overviews the syntax of Euler diagrams and details properties they\nmay possess and their abstractions. Section 3 introduces a range of graph the-\noretic concepts that will be required throughout the paper. Section 4 describes\nhow to convert so-called appropriate embeddings of vertex-labelled graphs into\nEuler diagrams. We observe various properties possessed by the graph that es-\ntablish properties that will be possessed by the yet to be generated diagram;\nthis is done in section 5. We sketch a naive algorithm for generating a family\nof graphs in section 6, from which we can generate Euler diagrams with spec-\nified properties. Finally, section 7 presents a prototype implementation of our\nwork, which constructs an Euler diagram given a vertex-labelled graph. Some\noutput from the software is included.\n2 Euler Diagrams\nAn Euler diagram is a collection of closed curves, each of which has a label\nwhich we assume is drawn from a fixed set L. There are many definitions of\nEuler diagrams, each asserting well-formedness conditions that the diagrams\nmust satisfy, such as the curves should be simple, for example [2\u20134,23,26]; we\ngive a very general definition.\nDefinition 1 An Euler diagram, d, is a pair, (Curve, l) where\n(1) Curve is a finite collection of closed curves each with codomain R2,\n(2) l:Curve \u2192 L is a function that returns the label of each curve.\n4\nba\nc\nFig. 4. An Euler diagram.\nFig. 4 shows an Euler diagram with three curves labelled a, b and c. It is easy\nto determine the interior or exterior of the (simple) curves in this diagram.\nHowever, some Euler diagrams contain non-simple curves. A non-simple curve\nis one which self-intersects. For example the curve c in Fig. 5 is non-simple.\nThis diagram indicates that c is a subset of the symmetric difference of a and\nb. We now define the interior points of such curves, by appealing to wind-\ning numbers. Thus, we assume that the curves in Euler diagrams allow the\ncomputation of winding numbers.\na b\nc\nFig. 5. An Euler diagram with a non-simple curve.\nDefinition 2 Let c be a closed curve and let p be a point in R2 \u2212 im(c). The\npoint p is interior to c if the winding number of c with respect to p, denoted\nwind(c, p), is odd, with the set of all such points denoted int(c). All points in\nR\n2 that are not interior to c are exterior to c, with the set of all such points\ndenoted ext(c).\nThe labelling function l is need not be injective and it is necessary to consider\nthe set of all curves that have the same label; we call this a contour. Curves\nwith the same label represent the same set.\nDefinition 3 Let d = (Curve, l) be an Euler diagram and let Con(L) be the\nset of all curves in d with the label L. The set Con(L) is a contour of d with\nlabel L. A point p is inside Con(L) whenever the number of curves in Con(L)\nthat p is inside is odd. The set of interior points is denoted int(Con(L)). All\npoints in R2 that are not interior to Con(L) are exterior to Con(L), the set\nof which is denoted ext(Con(L)).\nba\na\nFig. 6. An Euler diagram with a repeated label.\n5\nThe Euler diagram in Fig. 6 has two contours. The label a is associated with\ntwo of its curves. The shaded regions of the diagram indicate the interior of\nthe contour with label a.\nDefinition 4 Let d = (Curve, l) be an Euler diagram and let CON \u2286\n{Con(L) : L \u2208 im(l)}. If the set\nz =\n\u22c2\nCon(L\u2032)\u2208CON\nint(Con(L\u2032)) \u2229\n\u22c2\nCon(L\u2032)\u2208{Con(L):L\u2208im(l)}\u2212CON\next(Con(L\u2032))\nis non-empty then z is a zone of d, with the set of such zones denoted Z(d).\nThe diagram in Fig. 4 has five zones, including that inside both a and b but\noutside c. The diagram in Fig. 6 has four zones; the zone inside b but outside\na consists of two disjoint regions, as does the zone inside both a and b.\nOur attention now turns to descriptions of diagrams. We can provide an ab-\nstract description of an Euler diagram by considering its zones, as has been\nwell documented in the literature. A zone can be represented by the labels of\nthe curves that contain it.\nDefinition 5 Elements of Z = PL are called abstract zones (or, simply,\nzones). An abstract description, D, is a set of abstract zones, D \u2286 Z such\nthat \u2205 \u2208 D.\nDefinition 6 Given an Euler diagram d = (Curve, l), we map d to ab(d) = D,\ncalled the abstract description of d, where D contains exactly one abstract\nzone for each zone in d; in particular, given a zone, z, in d, the set D contains\nthe abstract zone\nab(z) = {l(c) : c \u2208 C(z)}\nwhere C(z) is the set of curves in d that contain z.\nIn Fig. 4, the Euler diagram has abstract description\n{\u2205, {a}, {b}, {a, b}, {b, c}}.\nHowever, for ease of readability, we will abuse the notation by representing\nthis abstraction as {\u2205, a, b, ab, bc}.\nIn its simplest form the Euler diagram generation problem can be summarized\nas: given an abstract description, D, find an Euler diagram with abstract de-\nscription D. Research efforts in this area have focused on a restricted notion\nof the generation problem: given D, find an Euler diagram with abstraction\nD that possesses certain specified properties. Ideally, we would have a gen-\neration algorithm that produced an Euler diagram when an arbitrary set of\nproperties (chosen from the six described in the introduction) is specified. The\n6\nframework presented in this paper provides a basis for the development of so-\nphisticated generation algorithms that achieve this. Moreover, if an abstract\ndescription can be visualized as an Euler diagram with a certain set of these\nsix properties then our method is able to generate such a diagram. However,\nwithout heuristics to guide the search for an appropriate graph this process\nwill have exponential time complexity. We are able to adapt the graph we\nuse for layout, by adding or deleting edges or vertices, in order to change the\nproperties that the embedded Euler diagram will possess.\n3 Graph Theory Concepts\nWe will show that an Euler diagram can be generated from any connected pla-\nnar graph whose vertices are labelled with the zones from an abstract descrip-\ntion. For example, consider the abstract description D = {\u2205, a, b, ab, ac, abc}.\nFig. 7 shows a connected planar graph whose vertices are labelled with the\na ac abc ab b\n\u00c6 \u00c6\nFig. 7. A connected planar graph with vertices labelled by zones.\nzones of D. Each zone of D must occur as a label and a zone can label multiple\nvertices. We draw closed curves around the vertices containing common labels,\na ac abc ab b\n\u00c6 \u00c6\nba\nc\na b\nc\nFig. 8. Contours containing vertices and the resulting Euler diagram\nshown on the left in Fig. 8. Throwing away the graph we obtain the required\nEuler diagram, shown on the right in Fig. 8. We notice that the diagram ob-\ntained can be constructed from a dual of the graph, ignoring the infinite face,\nas shown in Fig. 9. Our strategy for generating an Euler diagram d from an\nabstract description D is to construct a dual of a connected planar graph, G,\nwhose vertices are labelled with the abstract zones of D. However, given an\n7\na ac abc ab b\n\u00c6 \u00c6\nba\nc\nFig. 9. The dual of the graph.\narbitrary G, not every dual gives rise to a diagram with the required abstrac-\ntion, making the generation task more challenging than merely constructing\na dual graph.\nIndeed, if we want to find an Euler diagram with specified properties then\nwe must take into account various factors. In particular, given an abstract\ndescription, D, if we want to find an embedding of D with certain properties\nthen this amounts to finding a graph with related properties. In this paper,\ntake the important first step towards addressing this challenge by identifying\nproperties of the embedded graph that correspond exactly to properties that\nthe embedded Euler diagram will posses. We give formal definitions of the\ngraphs we require.\nDefinition 7 A vertex-labelled graph, G = (V, E, lV , lE), is such that\n(1) (V, E) is a graph with vertex set V and edge set E,\n(2) each vertex, v, in V is labelled by a zone, that is lV :V \u2192 Z, and\n(3) the vertex labelling induces an edge labelling, lE :E \u2192 Z, defined by\nlE(e) = (lV (v1)\u2212 lV (v2)) \u222a (lV (v2)\u2212 lV (v1))\nwhere v1 and v2 are the vertices incident with e.\na ac abc ab b\n\u00c6 \u00c6\nb\nb\nc c bba a\n\u00c6\n\u00c6\nFig. 10. A vertex-labelled graph.\nFig. 10 shows a vertex-labelled graph. The label on an edge is the symmetric\ndifference of the labels of its incident vertices. The induced edge labelling is\nredundant, and we may frequently exclude it in examples. However, it will be\nuseful for obtaining the labels of the edges in dual graphs, as will become clear\nbelow.\n8\nDefinition 8 An edge-labelled graph, G = (V, E, lE), is such that\n(1) (V, E) is a graph with vertex set V and edge set E,\n(2) each edge, e, in E is labelled by a zone, that is lE :E \u2192 Z.\nWe are labelling edges with a set of labels from PL (that is a zone, but not\nnecessarily a zone that occurs in the abstract description we are considering\nor as a vertex label on a vertex-labelled graph) and, for each L \u2208 L we say\nthat L is a label of e if the label L is in the set lE(e). We now define further\nconcepts that we will require throughout the paper. In particular, we need\naccess to certain subgraphs, edge sequences around faces, and the number of\ncomponents of which a graph consists.\nDefinition 9 Let G be a graph. Then comp(G) denotes the number of com-\nponents of G.\nDefinition 10 Let G = (V, E, lV , lE) be a planar graph with an embedding,\nG\u02c6. Let f be a face of G\u02c6. Then an edge sequence around f is a minimal\nsequence of edges, ES(f) = (e1, ..., en) such that\n(1) each edge in ES(f) bounds f ,\n(2) each edge that bounds f occurs in ES(f), and\n(3) ES(f) is a closed walk.\nac a ab b bc\n\u00c6\n\u00c6\nf1\nabdf2\nG\ne1\ne2e3\ne4 e5\ne7 e8\ne9\ne10\ne11 e12\nFig. 11. Face cycles.\nTo illustrate, f1 in Fig. 11 has edge sequences (e1, e2, e5, e12, e11, e4, e3) and\n(e2, e5, e12, e11, e4, e3, e1) among others (note the \u2018labels\u2019 used on the edges are\nnot edge labels, merely names for the edges so that we can identify them). The\nclosed walk (e1, e2, e5, e12, e11, e3) is not an edge sequence around f1 since it\ndoes not contain e4. The face f2 has edge sequence (e10, e3, e11, e9, e9, e12, e2);\nnotice that the bridge e9 occurs twice in the walk.\nDefinition 11 Let G = (V, E, lE) be a vertex-labelled graph and let L be a\nlabel in L. The subgraph of G obtained by deleting all edges whose labels do\nnot contain L (along with any isolated vertices), denoted GE(L), is the L-edge\nsubgraph of G given L. The subgraph of G obtained by deleting all vertices\nwhose labels do not contain L, denoted GV (L), is the L-vertex subgraph of G\n9\ngiven L. Let az be an abstract zone. The subgraph of G obtained by deleting all\nvertices whose labels are not az, denoted GV (az), is the az-vertex subgraph\nof G given az.\nNote that the above definition of GE(L) extends to edge-labelled graphs in the\nobvious manner. To illustrate these concepts, the graph G in Fig. 11 has GE(a)\nand GV (a) as illustrated in Fig. 12. Finally, since our embedding method relies\na ab b\n\u00c6\nGE(a)\nac a ab\nabd\nGV(a)\nFig. 12. L-edge and L-vertex subgraphs.\non constructing a specific dual graph, we define an edge-labelled dual.\nDefinition 12 Let G = (V, E, lV , lE) be a planar, vertex-labelled graph with a\nplane embedding G\u02c6. Let G\u02c6\u2217 = (V \u2217, E\u2217, lE\u2217) be an edge-labelled geometric dual\nof G\u02c6 such that for each edge, e\u2217 \u2208 E\u2217, lE\u2217(e\n\u2217) = lE(e) where e\n\u2217 crosses e. The\n(plane, embedded) graph G\u02c6\u2217 is called an edge-labelled dual of G\u02c6.\nFig. 13 shows two distinct geometric duals of G in Fig. 11. The duals are\ndifferent, up to isotopy of R2 less the images of G\u2019s vertices. For example, the\nvertex in G next to the infinite face of G\u22171 is distinct from that next to the\ninfinite face of G\u22172. This is an important observation since we use a dual, G\u2217,\nof a graph, G, to embed an Euler diagram. If that Euler diagram is to have\nthe required abstraction, the vertices of G have to be enclosed by the correct\ncurves (further examples will be given below). This means that not every dual\nneed give rise to an Euler diagram with the required abstraction.\nac a ab b bc\nabd\nG*\n2\n\u00c6\n\u00c6\nac a ab b bc\nabd\nG*\n1\n\u00c6\n\u00c6\nFig. 13. Two distinct dual graphs.\n10\n4 Embedding Euler Diagrams\nOur attention now turns to the challenge of converting a graph into an Euler\ndiagram. The generation process is outlined in Fig. 14. We start with an\nabstract description, D, that we want to embed. We then turn D into a vertex-\nlabelled graph, G, such that every abstract zone in D appears as a vertex label\nin G and every vertex label is an abstract zone in D. We proceed to embed\nG, giving G\u02c6, in such a manner that G has only vertices and edges labelled \u2205\nnext to the infinite face; if this is not possible then we can add edges to G so\nthat it becomes possible (note that we never need to add vertices, but we can\nchoose to if we wish).\nD G\nd\nConvert to a vertex-\nlabelled graph\nEmbed in a particular\nmanner\nConstruct\nany edge-\nlabelled dual\nRemove edges\nlabelled {}\nConvert edges to\ncurves\nAn embedding\nof D\nG\nG*SG*\nFig. 14. The generation process\nAt the next stage, we construct an edge-labelled dual, G\u02c6\u2217, of G\u02c6. The fact that\nevery edge next to the infinite face is labelled \u2205 ensures that G\u02c6\u2217 will give rise\nto a diagram with abstraction D (explained and justified below). The labels\non the edges of G\u02c6\u2217 indicate that curves with those labels run along that edge.\nHence, edges labelled \u2205 will not be traversed by any curves and are deleted,\nto give a graph SG\u02c6\u2217. At this point, SG\u02c6\u2217 has the same image as the Euler\ndiagram we will create. The final step is to turn this graph into the Euler\ndiagram (i.e. a set of closed curves together with a labelling function). The\nmethod we develop to produce a set of curves ensures that they have the\ncorrect containment properties. That is, a vertex labelled az is embedded in\na zone with abstraction az.\nWhen producing an embedding of a plane graph, typically the embedded\nedges, e, are injective functions with codomain R2, say e\u02c6: [x, y] \u2192 R2. More-\nover, e\u02c6(x) and e\u02c6(y) are the points in R2 where the vertices incident with e are\nembedded. We assume that this is the case in all that follows.\nWe now develop a series of results that are required (a) to show that we can\ncovert the dual graph into curves, and (b) that the result is an Euler diagram\nwith the required abstraction. We note that the following property of vertex-\nlabelled graphs follows trivially from the manner in which edges are labelled.\nProperty 1 Let G = (V, E, lV , lE) be a planar, vertex-labelled graph. Let p =\n11\n(e1, ..., en) be a path in G with associated vertex sequence (v0, ..., vn). Let L \u2208 L.\nIf\n(1) L \u2208 lV (v0) and L \u2208 lV (vn), or\n(2) L 6\u2208 lV (v0) and L 6\u2208 lV (vn)\nthen the maximal subsequence of p that contains only edges, e, for which L \u2208\nlE(e) has even length.\nWe use this property in the proof of the next result, which asserts that com-\nponents of G\u02c6\u2217E(L) (the subgraph of G\u02c6\n\u2217 containing exactly the edges with L in\ntheir label) are Eulerian. We require this to be the case in order to convert\nG\u02c6\u2217E(L) to curves: a closed curve can be formed by traversing an Eulerian cycle,\nfor instance.\nLemma 1 Let G = (V, E, lV , lE) be a planar, vertex labelled graph with a\nplane embedding G\u02c6. Let L \u2208\n\u22c3\ne\u2208E\nlE(e) (i.e. the L label that appears on an edge\nof G). Then each component of the graph G\u02c6\u2217E(L) is Eulerian.\nProof The task is to show that each vertex, v, in G\u02c6\u2217E(L) has even degree. By\nconstruction, v is embedded in a face, f , of G\u02c6. From lemma 1, the maximal\nsubsequence, S, of edge sequence ES(f) that consists of those edges that\ncontain the label L has even length (since v0 = vn in this case). Any edge, e,\nin S that occurs twice is a bridge and, therefore, gives rise to a loop in the dual\ngraph G\u02c6\u2217. Thus, such an edge contributes two to the degree of v whenever L\nis in lE(e). No edge occurs more than twice. Denote the subsequence of S that\ndoes not contain any bridges by Snb. Then Snb also has even length and each\nedge in Snb contributes one to the degree of v. Therefore v has even degree\nand each component of G\u02c6\u2217E(L) is Eulerian. 2\nAs a simple illustration of the process of converting an Eulerian cycle to a\ncurve, consider the graph, G\u02c6, in Fig. 15, together with its dual G\u02c6\u2217. The graph\nG\u02c6\u2217(a) is shown and a curve labelled a can, intuitively, be formed by traversing\nthe edges of G\u02c6\u2217(a), following an Eulerian cycle. In the following definition,\ne\u02c6i|[i\u22121,i) denotes the function e\u02c6i with the domain is restricted to [i\u2212 1, i).\na\nG\n\u00c6\na\n\u00c6\nG*\na a\n\u00c6\nGE*(a)\na a\ncurve a\na\nFig. 15. Converting cycles to curves\n12\nDefinition 13 Let G\u02c6 be a plane (and, therefore, embedded), Eulerian graph\nand let C = (e1, ..., en) be an Eulerian cycle in G. For each edge, ei, we denote\nthe injective function that embeds ei in R\n2 by e\u02c6i and assume that the domain\nof e\u02c6i is [i\u2212 1, i], that is e\u02c6i: [i\u2212 1, i]\u2192 R\n2. Then the closed curve associated\nwith G\u02c6 given C, is defined to be\nG\u02c6C =\n\u22c3\n1\u2264i\u2264n\ne\u02c6i|[i\u22121,i) \u222a e\u02c6n(n).\nSo G\u02c6C : [0, n] \u2192 R2 is a closed curve with a finite number of self-intersection\npoints. These self-intersection points coincide precisely with the vertices in the\ncycle that have degree greater than two. We are now in a position to state\nhow to convert a vertex-labelled graph into an Euler diagram.\nDefinition 14 Let G = (V, E, lV , lE) be a planar, vertex-labelled graph with a\nplane embedding, G\u02c6. An Euler diagram, d = (Curve, l), generated from G\u02c6,\ngiven a dual G\u02c6\u2217, is such that for each label L \u2208\n\u22c3\ne\u2208E\nlE(e) and for each com-\nponent EC of G\u02c6\u2217E(L) the closed curve ECC is in Curve given some Eulerian\ncycle, C, in EC; the label of C is L. No other curves are in Curve.\nLater, we widen the range of Euler diagrams that can be generated by consid-\nering decompositions of Eulerian cycles into sets of cycles. This corresponds\ndirectly to decomposing curves into sets of curves.\n4.1 The Correctness of the Generation Method\nAs stated above, to ensure we generate an Euler diagram with the required\nabstraction, we must impose certain constraints on our vertex-labelled graphs.\nIn particular, when we embed them, we require the infinite face to be next to\nonly edges that are labelled \u2205.\nSuppose, for example, we want to embed the abstract description D = {\u2205, a, ab}.\nA vertex-labelled graph, G, with suitable vertex labels can be seen in Fig. 16;\nthis embedding does not have only edges labelled \u2205 embedded next to the\ninfinite face of G. The dual graph G\u22171 of G gives rise to an Euler diagram with\nabstract description {\u2205, a, b} which is not as required. However, G\u22172 gives rise\nto a diagram with the correct abstraction. We observe that there are choices\nabout how the edges of dual graphs are embedded that impact the contain-\nment properties of the resulting curves. However, there are only choices (up\nto isotopy) for edges of the dual that are embedded in either the infinite face\nor other faces that are not simply connected (i.e. they contain holes).\nIn the case of a dual vertex, v, embedded in the infinite face, f , of the original\n13\naG\n\u00c6\nG1*\na\nab aG\n\u00c6\nG2*\nab\nb a\nb\nconvert to Euler diagram\nFig. 16. Finding appropriate embeddings.\ngraph, if we know that all of the edges in G next to f are labelled \u2205 then\nevery edge incident with v is also labelled \u2205. Such edges do not form part of\nany curve in the generated Euler diagram. Therefore, any choice made when\nembedding these edges does not matter. We also stipulate that our embedded\ngraphs have only vertices labelled \u2205 next to the infinite face. As a consequence\nof these constraints on G, vertices will be in zones whose abstraction matches\nthe label of the vertex.\nDefinition 15 Let G = (V, E, lV , lE) be a planar, vertex-labelled graph with\nan embedding, G\u02c6. If G\u02c6 is plane, every edge, e \u2208 E, embedded next to the\ninfinite face of G\u02c6 has label lE(e) = \u2205 and is incident with a vertex, v, whose\nlabel is lV (v) = \u2205, then G\u02c6 is called an appropriate embedding of G.\nThe case where a face is not simply connected is easily overcome: we require G\nto be connected. Any connected graph has only simply connected faces. Given\na connected, planar vertex-labelled graph with an appropriate embedding,\nG\u02c6, we can establish that G\u02c6 generates an Euler diagram with the required\nabstraction. Theorem 1 is a prerequisite to establishing this result.\nTheorem 1 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler dia-\ngram generated from G\u02c6. Let L \u2208 im(l) and let v \u2208 V . Then L \u2208 lV (v) if and\nonly if v is inside the contour of d with label L.\nProof By definition, Con(L) arises from the graph G\u02c6\u2217E(L) which has the\nproperty that all of its components are Eulerian graphs. From this property,\nit follows that G\u02c6\u2217E(L) is two face-colourable. Choose such a colouring of G\u02c6\n\u2217\nE(L).\nLet v1 and v2 be vertices of G\u02c6 that are embedded in faces of G\u02c6\n\u2217\nE(L) that have\nthe same colour. Since G\u02c6 is connected, there exists a path, P , from v1 to v2.\nNow, every edge, e, in P that crosses an edge in G\u02c6\u2217E(L) has L in its label, that\nis L \u2208 lE(e). Since v1 and v2 are in faces with the same colour, there are an\n14\neven number of such edges in P . Moreover, each edge, e, in P that contains L\nin its label has exactly one incident vertex with L in its label (by definition).\nFrom this it follows that v1 and v2 either both have L in their label or neither\nhave L in their label.\nNow consider the infinite face of G\u02c6\u2217E(L). The vertex, v\n\u2217, of G\u02c6\u2217 embedded in\nthe infinite face of G\u02c6 is incident only with edges that have label \u2205, since every\nedge, e \u2208 E(G\u02c6), embedded next to the infinite face of G\u02c6 has label lE(e) = \u2205.\nTherefore the edges incident with v\u2217 are not in G\u02c6\u2217E(L) and, therefore, v\n\u2217 is not\na vertex of G\u02c6\u2217E(L). From this, it follows that some vertex, v, of G\u02c6 incident with\nan edge embedded next to the infinite face of G\u02c6 is embedded in the infinite\nface of G\u02c6\u2217E(L). This vertex has label lV (v) = \u2205, since G\u02c6 is an appropriate\nembedding. Therefore, any vertex in a face of G\u02c6\u2217E(L) coloured the same as\nthe infinite face of G\u02c6\u2217E(L) does not contain L in its label. Those coloured\ndifferently from the infinite face of G\u02c6\u2217E(L) all contain L in their labels.\nA point is inside Con(L) precisely when it is inside a face of G\u02c6\u2217E(L) that is\ncoloured differently from the infinite face of G\u02c6\u2217E(L) in some two colouring.\nHence, L \u2208 lV (v) if and only if v is inside the contour of d with label L. 2\nCorollary 1 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler dia-\ngram generated from G\u02c6. Let v \u2208 V . Then lV (v) = ab(z) where z is the zone of\nd in which v is embedded.\nTherefore, we generate diagrams with the required abstractions.\nTheorem 2 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler dia-\ngram generated from G\u02c6. Then ab(d) = im(LV ).\n4.2 Curve Decomposition\nGiven an embedded Euler diagram, we can find alternative Euler diagrams\nthat have the same drawn image and the same abstraction. Here, we show\nhow to use the techniques of the previous section to enlarge the class of Euler\ndiagrams that can be embedded using our method. We start by observing that\nan Eulerian graph can have its edges partitioned into sets, each of which is\nessentially a cycle in the graph.\nDefinition 16 Let G be an Eulerian graph and let C be a set of cycles in G.\nIf every edge in G is in at exactly one cycle in C then C is called a decompo-\n15\nsition of G. If every cycle in a decomposition C is simple 1 then we say that\nC is a simple decomposition. Let c be the closed curve associated with G.\nThen a decomposition of c is a set of curves, dec(c), where each cycle in C\nis associated with exactly one curve in dec(C). Similarly, dec(c) is a simple\ndecomposition of c whenever C is a simple decomposition.\nDefinition 17 Let G = (V, E, lV , lE) be a planar, vertex-labelled graph with\nan appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler diagram gener-\nated from G\u02c6. For each curve, c \u2208 Curve, let dec(c) be a decomposition of c.\nThen a decomposition-transformation of d is a diagram, d\u2032 = (Curve\u2032, l\u2032),\nwhere\nCurve\u2032 =\n\u22c3\nc\u2208Curve\ndec(c)\nand l\u2032(c\u2032) = l(c) where c\u2032 is in dec(c).\nTheorem 3 Let d be an Euler diagram with a decomposition-transformation\nd\u2032. Then ab(d) = ab(d\u2032). That is, decomposing curves does not change the\nabstraction.\nThe results above allow us to generate a wider class of Euler diagrams by\ndecomposing their curves. In particular, we point out every abstraction can\nbe drawn using only simple curves, justified below.\nLemma 2 Let G be an Eulerian graph and let C be a decomposition of G. If\nC is a simple decomposition then all curves in a simple decomposition of c, the\ncurve associated with G, are simple.\nLemma 3 Let G be an Eulerian graph. Then G has a simple decomposition.\nProof We provide a constructive method to produce a simple decompostion.\nClearly, one can always find a simple cycle in an Eulerian graph. Given a\nsimple cycle, C1, in G, the graph G\u2212C1 has only Eulerian components (since\ndeleting edges in C leaves all vertices with even degree). Continuing in this\nmanner, we can keep removing simple cycles, Ci, from G until no edges remain.\nTherefore there is some integer, n, such that removing n simple cycles results\nin a graph with no edges. The set of removed simple cycles, C = {C1, ..., Cn},\nis a simple decomposition of G. 2\nCorollary 2 Let G be an Eulerian graph. Then the curve associated with G\nhas a simple decomposition.\nTheorem 4 Every Euler diagram generated using our method can be trans-\nformed into an Euler diagram containing only simple curves.\n1 A simple cycle is one that does not pass through any vertex more than once.\n16\n4.3 Sufficiency and Classification\nTrivially, it can be shown that for every abstract description there is a con-\nnected, planar vertex-labelled graph that yields an Euler diagram with that\nabstract description. For instance, taking D = {\u2205, a, b, bc}, define V = D as\nthe vertex set, with lV (v) = v. Join the vertices by edges until the graph is\nconnected, whilst maintaining planarity. Embed this graph. Now add addi-\ntional vertices and edges to the embedded graph, again whilst maintaining\nplanarity, until all vertices next to the infinite face are labelled \u2205; this graph\nis an embedding of a connected, planar, vertex-labelled graph that generates\nan Euler diagram with abstraction D.\nTheorem 5 Let D be an abstract description. Then there exists a connected,\nplanar, vertex-labelled graph, G with an appropriate embedding, G\u02c6, that gen-\nerates an Euler diagram with abstraction D.\nConsequently, our method is sufficiently general that we are guaranteed to be\nable to embed any abstract description. This is not the case for the majority of\nthe previously existing methods in the literature. We are also able to describe\nexactly which class of Euler diagrams can be generated using our method,\ncaptured in theorems 6 and 7. First, we define minimal regions.\nDefinition 18 A minimal region of an Euler diagram, d = (Curve, l), is\na connected component of R2 \u2212\n\u22c3\nc\u2208Curve\nim(c).\nIt follows that a zone is simply a union of minimal regions.\nDefinition 19 Let d be an Euler diagram such that\n(1) d has a finite number of minimal regions,\n(2) no curve in d runs self-concurrently, and\n(3) for any contour in d, no pair of its curves run concurrently.\nThen we say that d is generatable.\nTheorem 6 Let d be a generatable Euler diagram. Then there exists a con-\nnected, planar, vertex-labelled graph that generates d.\nTheorem 7 Let G be a connected, planar, vertex-labelled graph. Then any\nEuler diagram generated from G is generatable.\nFrom a visualization perspective, this means that our method generates the\nvast majority of diagrams one would want to consider (one would not be able\nto accurately visualize an Euler diagram with an infinite number of minimal\nregions, for instance).\n17\nFrom theorems 6 and 7, it follows that if an abstract description can be realized\nas a generatable diagram that possesses some specified collection of the six\nproperties described above then our method is able to generate such a diagram.\n5 Properties of Graphs and Euler Diagrams\nIn this section, we will show how we can use an embedding of a vertex-labelled\ngraph, G\u02c6, to identify properties possessed by a generated Euler diagram, d.\nTo recap, the following are properties that Euler diagrams may possess; they\nare formalized in [27], but for completeness we include their formalization in\nthe relevant subsections below.\nDefinition 20 Given an Euler diagram d = (Curve, l), the following are\nproperties that d may posses.\n(1) No concurrency No pair of curves in Curve run concurrently.\n(2) Connected zones Each zone in d is connected (i.e consists of exactly\none minimal region).\n(3) No n-points There are no n-points of intersection between the curves\nin Curve.\n(4) Simplicity All of the curves in Curve are simple.\n(5) Unique labels The labelling function, l, is injective.\n(6) No brushing points There are no brushing points between any curves\nin Curve.\nIn each case, we identify properties possessed by the graph G\u02c6 that correspond\nto the properties possessed by d. Using the properties of G\u02c6 we can also count\nthe number of times d violates each of the six properties. The ability to count\nviolations has advantages from a generation perspective. It is computationally\nhard to find a graph that generates a diagram possessing a specified collection\nof properties. Current graph based methods for generating diagrams from any\nabstract description take exponential time in the worst case [19]. Similarly our\ngeneration method has exponential time worst case performance relative to the\nnumber of zones in the abstract description. The computationally expensive\npart of the search is through the space of vertex-labelled graphs, if we want\nto embed an Euler diagram with particular properties. If we do not mind\nwhich properties our embedded Euler diagram possess, then we have already\nprovided a trivial method of producing an appropriate vertex-labelled graph.\nFrom an implementation perspective, after finding a vertex-labelled graph, we\nonly need to then find a dual of this graph which can be done in polynomial\ntime.\n18\nIt may be that certain properties are desirable, rather than necessary, for\ninstance. Therefore, we might be prepared to find a graph that generates a di-\nagram with a small number of violations for a particular property rather than\nno violations at all. Indeed, not all abstraction descriptions can be embedded\nunder particular sets of properties. This means that sometimes we will neces-\nsarily have to choose graphs that generate diagrams with particular violations.\nWe can utilize the ability to count violations in heuristic searches to choose\nvertex-labelled graphs from which to generate diagrams. We further discuss be-\nlow the use of heuristics to search through the space of vertex-labelled graphs\nin order to reduce the amount of computation involved in finding a suitable\nvertex-labelled graph.\n5.1 No Concurrency\nA diagram possesses no concurrency when none of its curves run concurrently.\nIn the following definition (and at other places in the paper) we assume that\nthe domain of each curve in our Euler diagram is [0, 1] in order to simplify the\nnotation.\nDefinition 21 An Euler diagram, d = (Curve, l), possesses the no concur-\nrency property if for all c1, c2 \u2208 Curve,\n(1) if c1 6= c2 then image(c1) \u2229 image(c1) is a discrete set of points (equiv-\nalently, {x \u2208 R2 : \u2203a, b \u2208 [0, 1] c1(a) = c2(b) = x} is a discrete set of\npoints) and\n(2) if c1 = c2 then\n{x \u2208 R2 : \u2203a, b \u2208 [0, 1] a 6= b \u2227 c1(a) = c1(b) = x}\nis a discrete set of points.\nOur generation method makes it very easy to identify when a graph gives rise\nto an Euler diagram that possesses the no concurrency property, as follows.\nConsider an edge, e\u2217, in a dual, G\u02c6\u2217, of an embedded vertex-labelled graph, G.\nNow, e\u2217 forms part of curves in d whose label is in lE(e\n\u2217). Thus, d has concur-\nrent curves precisely when G\u02c6\u2217 contain an edge, e\u2217, with |lE(e\u2217)| > 1. But the\nedge e\u2217 is labelled the same as the edge, e, with which e\u2217 intersects. There-\nfore, d contains concurrent curves whenever G\u02c6 contains an edge with more\nthan one curve label in its label. Since the edge labelling of G\u02c6 is independent\nof its embedding, we can also detect the presence of concurrency from G.\nLemma 4 Let G = (V, E, lV , lE) be a connected, planar vertex-labelled graph\nwith an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler diagram\ngenerated from G\u02c6. Then two distinct curves, c1 and c2, in Curve run con-\n19\ncurrently if and only if there exists an edge, e \u2208 E, such that the label of e\nincludes the labels of c1 and c2, that is l(c1) \u2208 lE(e) and l(c2) \u2208 lE(e).\nTheorem 8 Let G = (V, E, lV , lE) be a connected, planar vertex-labelled graph\nwith an appropriate embedding, G\u02c6. Any Euler diagram, d = (Curve, l), gener-\nated from G\u02c6 possesses the no concurrency property if and only if for all edges,\ne \u2208 E, the label of e contains at most one label, |lE(e)| \u2264 1.\nDefinition 22 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. The concurrency measure for G\u02c6\nis \u2211\ne\u2208E\nmax(|lE(e)| \u2212 1, 0).\nThe concurrency measure counts the number of concurrent curve segments in\nany Euler diagram generated from an appropriate embedding of G\u02c6. Thus, if\nwe want to avoid or minimize concurrency, we can aim to find a graph from\nwhich to embed with a low concurrency measure.\n5.2 Connected Zones\nA zone is connected whenever it consists of exactly one minimal region.\nDefinition 23 An Euler diagram, d, possesses the connected zones prop-\nerty if all of the zones of d are also minimal regions of d, that is Z(d) = M(d).\nWhen considering connected zones, we first observe that each vertex, v, of G\u02c6\nis embedded in some face of G\u02c6\u2217. Moreover, v is embedded in a zone, z, whose\nabstraction is lV (v), as shown in theorem 1. This might lead one to believe\nthat d has connected zones precisely when vertices of G\u02c6 (equivalently, G) have\nunique labels. However, this is not the case. If G\u02c6 has unique vertex labels then\nd will have connected zones. There are examples of graphs which do not have\nunique vertex labels that generate diagrams with connected zones.\nTo illustrate, the graph in Fig. 17 has two vertices labelled a but the diagram\nit generates possesses the connected zone property. We observe that if two\nvertices, v1 and v2, have the same label and are connected by an edge, e, then\ne is labelled \u2205. In turn, this implies that an edge in G\u02c6\u2217 that intersects e does\nnot form part of any curve in d. From this, it follows that v1 and v2 are in the\nsame minimal region of d.\nLemma 5 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled graph\nwith an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler diagram\ngenerated from G\u02c6 and let z be a zone in d. Then z is connected if and only if\n20\na ab a\n\u00c6\nG\nd\na\nbgenerates\nFig. 17. A diagram with connected zones but non-unique vertex labels in G\u02c6.\nthe graph G\u02c6V (ab(z)) is connected.\nProof Let z be a zone in d and suppose that z is connected. Then z consists\nof exactly one minimal region, m. Therefore each vertex, v, in G\u02c6 with label\nlV (v) = ab(z) is embedded in m = z, by corollary 1. Suppose that there are two\nvertices, v1 and v2, embedded in z but for which there is no path in G\u02c6V (ab(z))\nfrom v1 to v2, as illustrated in Fig. 18. Now, in G\u02c6\n\u2217, the dual of G\u02c6 that gave\nArbitrary connected zone, z\nv1\nv2\nv1 and v2 are not connected\nFig. 18. A connected zone in which v1 and v2 are not connected.\nrise to d, v1 and v2 are embedded in different faces of G\u02c6\n\u2217 (by the definition\nof the dual). Therefore, there must be a set of edges in G\u02c6\u2217 embedded entirely\nwithin z that split z into two components, com1 and com2 which contain v1\nand v2 respectively\n2 , as shown in Fig. 19. Since z is connected, these edges\nare all labelled \u2205. Now, this means that there must be a path, p, from v1 to\nArbitrary connected zone, z\nv1 v2\n\u00c6\n\u00c6\nFig. 19. A path of edges across z separating v1 and v2.\nsome vertex, v3, of H\u02c6 embedded in com2, as shown in Fig. 20. But then one\ncan show that com2 is further subdivided in to two components (following the\n2 Note: these edges need not form a path since z may not be simply connected.\n21\nsame strategy), with v3 joined to a vertex, v4 in the same component as v2 and\nso forth, see Fig. 21. Since there are only a finite number of vertices (of G\u02c6)\nArbitrary connected zone, z\nv1 v2\nv3\n\u00c6\n\u00c6\nFig. 20. The vertex v1 must be joined to v3.\nArbitrary connected zone, z\nv1 v2\nv3\n\u00c6\n\u00c6\n\u00c6\n\u00c6\nv4\nFig. 21. The vertex v3 must be joined to v4.\nembedded in z, eventually this process of subdividing components will show\nthat there is a path from v1 to v2, contradicting our initial assumption that no\nsuch path existed. Hence, if z is connected, the graph G\u02c6V (ab(z)) is connected.\nFor the converse, suppose that G\u02c6V (ab(z)) is connected. Let v1 and v2 be ver-\ntices in G\u02c6V (ab(z)) that are joined by an edge, e. Then the edge, e\n\u2217, of G\u02c6\u2217,\nthat crosses e is labelled \u2205. This means that no curve in d traverses e\u2217 and,\ntherefore, v1 and v2 are in the same minimal region of d. Since G\u02c6V (ab(z)) is\nconnected, it follows that all vertices in G\u02c6V (ab(z)) lie in the same minimal re-\ngion of d. By corollary 1, and the definition of G\u02c6V (ab(z)), this minimal region\nis the zone with abstraction ab(z). Hence z is connected. 2\nTheorem 9 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Any Euler diagram, d = (Curve, l),\ngenerated from G\u02c6 possesses the connected zones property if and only if for all\naz \u2208 im(lV ), the graph G\u02c6V (az) is connected.\nAs with concurrency, we can detect the connectedness of zones from G, since\nthe arguments above are independent of the actual embedding G\u02c6. To count\nthe number of minimal regions of which a zone, z, consists, we can count\nthe number of components in GV (ab(z)), the subgraph of G that contains all\nand only vertices with label ab(z). The following disconnected zones measure,\ntherefore, counts the number of \u2018extra\u2019 minimal region of which each zones\nconsist (each zone consists of at least one minimal region).\n22\nDefinition 24 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. The disconnected zones measure\nfor G\u02c6 is \u2211\naz\u2208im(lV )\n(|comp(G\u02c6V (az))| \u2212 1).\n5.3 No n-Points\nAn n-point in a diagram is one that is mapped to n times by the curves.\nDefinition 25 Let d = (Curve, l) be an Euler diagram and let p be a point in\nR\n2. We say that p is an n-point in d if\n\u2211\nc\u2208Curve\n|{x \u2208 [0, 1) : c(x) = p}| \u2265 n.\nDefinition 26 An Euler diagram possesses the no n-points property pro-\nvided each point in R2 is at most an (n\u2212 1)-point in d.\nUnlike concurrency and disconnected zones, the presence of n-points needs to\nbe determined from an actual embedding, G\u02c6. Given an embedding, however, it\nis relatively straightforward to identify n-points. In a generated Euler diagram,\nan n-point arises from a vertex, v, in the dual graph, G\u02c6\u2217, where v is incident\nwith edges that, between them, contain at least 2n occurrences of labels. This\ncan be translated into a property of G\u02c6 by appealing to edge sequences around\nfaces. Before we proceed, it is useful to denote the bag of edges incident with\nv that includes each non-loop once and each loop twice by incident(v).\nTheorem 10 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Any Euler diagram, d = (Curve, l),\ngenerated from G\u02c6 possesses the no n-points property if and only if for each\nface, f , of G\u02c6 with ES(f) = (e1, ..., ek),\n\u2211\n1\u2264i\u2264k\n|lE(ei)|\n2\n< n.\nProof Suppose that d possesses the no n-points property. Let f be a face of\nG\u02c6. The vertex, v, of G\u02c6\u2217 embedded in f forms an m-point in d, where\nm =\n\u2211\ne\u2208incident(v)\n|lE\u2217(e)|\n2\n.\nSince there is a bijective correspondence between incident(v) and the edges\nin ES(f) that preserves edge labelling, it follows that\nm =\n\u2211\n1\u2264i\u2264k\n|lE(ei)|\n2\n.\n23\nTherefore, since m < n, each face, f , of G\u02c6 satisfies\n\u2211\n1\u2264i\u2264k\n|lE(ei)|\n2\n< n.\nConversely, suppose that each face, f , of G\u02c6 satisfies\n\u2211\n1\u2264i\u2264k\n|lE(ei)|\n2\n< n\nfor some n. Suppose that d possesses the m-point property but not the (m\u22121)-\npoint property. We must show that m < n. Clearly, a point, p, in\n\u22c3\nc\u2208Curve\nim(c)\nthat is an m-point lies on a vertex, v, of G\u02c6\u2217. The method used to convert the\nedges of G\u02c6\u2217 into curves ensures any point such as p is an\n\u2211\ne\u2208incident(v)\n|l\u2217\nE\n(ei)|\n2\n-\npoint. But \u2211\ne\u2208incident(v)\n|l\u2217E(ei)|\n2\n=\n\u2211\n1\u2264i\u2264k\n|lE(ei)|\n2\n< n\nas required. 2\nWe can use the above insights to define a measure to count the number of\ntimes the n-points measure is violated in a generated Euler diagram.\nDefinition 27 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. The n-points measure for G\u02c6 is\n\u2211\nfx\u2208face(G\u02c6)\nmax((\n\u2211\n1\u2264i\u2264kx\n|lE(ei)|)\u2212 2(n\u2212 1), 0)\n2\nwhere face(G\u02c6) is the set of faces in G\u02c6 and ES(fx) = (e1, ..., ekx) is some edge\nsequence around f .\n5.4 Simple Curves\nThe detection of non-simple curves also requires an embedding of G. Non-\nsimplicity arises in d when a curve passes through a vertex of G\u02c6\u2217 more than\nonce. As shown above, we can always decompose a non-simple curve into a\nset of simple curves. We detect whether, if no decomposition takes place, the\ncurves in the generated diagram are simple. We start by noting that a contour\nthat consists of entirely simple curves, for which no pair intersect, is called a\nsimple contour. Under our generation method (without any decomposition),\n24\nall of the curves are simple if and only if all of the contours are simple. Firstly,\nwe formalize the simplicity property.\nDefinition 28 An Euler diagram, d = (Curve, l), possesses the simplicity\nproperty if and only if all of the curves in Curve are simple.\nLemma 6 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled graph\nwith an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler diagram\ngenerated from G\u02c6 and let Con(L) be a contour in d. Then Con(L) is simple\nif and only if for each face fx of G\u02c6, where ES(f) = (e1, ..., ekx) is some edge\nsequence around fx, we have\n\u2211\n1\u2264i\u2264kx\n(lE(e) \u2229 {L}) \u2264 2.\nProof Let Con(L) be a simple contour in d. Then every face of G\u02c6 contains a\nvertex, v, of G\u02c6\u2217 that is incident with at most two edges that contain the label\nL (otherwise Con(L) would not be simple). Since there is a bijection between\nincident(v) and those in ES(f) which preserves labelling, it follows that\n\u2211\n1\u2264i\u2264k\n(lE(e) \u2229 {L}) \u2264 2.\nFor the converse, suppose that\n\u2211\n1\u2264i\u2264k\n(lE(e) \u2229 {L}) \u2264 2. Then the vertex, v, in\nG\u02c6\u2217 embedded in f is incident with zero, one, or two edges that contain L. In\nthe first case, Con(L) does not pass through v. In the second case, the curve,\nc, labelled L passing through v is essentially a loop and, therefore, simple. In\nthe third case c passes through v exactly once (by the construction of c from\nthe edges of G\u02c6\u2217. Clearly, the only places that a contour can self-intersect are\nat the vertices of G\u02c6\u2217. Therefore Con(L) is simple. 2\nThe following theorem then follows trivially.\nTheorem 11 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Any Euler diagram, d = (Curve, l),\ngenerated from G\u02c6 possesses the simplicity property if and only if for each label,\nL \u2208\n\u22c3\nz\u2208im(lV )\nz, and for each face, f , in G\u02c6, with ES(f) = (e1, ..., ek),\n\u2211\n1\u2264i\u2264k\n(lE(e) \u2229 {L}) \u2264 2.\nThe non-simplicity measure counts the number of times each curve self-intersects\nin a generated diagram, d. If we decompose the curves of d then the measure\nbelow counts the number of times each contour self-intersects. That is, the\nmeasure is invariant under curve decomposition.\n25\nDefinition 29 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. The non-simplicity measure for\nG\u02c6 is\n\u2211\nL\u2208im(lV )\n( \u2211\nfx\u2208face(G\u02c6)\nmax((\n\u2211\n1\u2264i\u2264kx\n|lE(ei) \u2229 {L}| \u2212 2)\n2\n, 0)\n)\nwhere face(G\u02c6) is the set of faces in G\u02c6 and ES(fx) = (e1, ..., ekx) is some edge\nsequence around fx.\n5.5 Unique Labels\nAgain, when detecting whether our embedded diagram possesses unique labels,\nwe assume that no curve decomposition has taken place. However, to avoid\nany confusion, we will call the measure we derive at the end of the section\nthe contour components measure. This is because our measure counts the\nnumber of components of which a contour consists, regardless of whether any\ndecomposition has been performed.\nDefinition 30 An Euler diagram, (Curve, l), possesses the unique labelling\nproperty if the function l is injective.\nLemma 7 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled graph\nwith an appropriate embedding, G\u02c6. Let d = (Curve, l) be an Euler diagram\ngenerated from G\u02c6. Let L \u2208 im(l). Then Con(L) consists of a single curve if\nand only if there exists a face, f , of the graph G\u02c6 \u2212 {e \u2208 E : L \u2208 lE(e)} such\nthat all of the edges in G\u02c6E(L) are embedded in f .\nProof Suppose that Con(L) consists of a single curve. This implies that\nG\u02c6\u2217E(L) is connected. Consider the graph G\u02c6\u2212{e \u2208 E : L \u2208 lE(e)}. We note that\nthe edges of G\u02c6E(L) are embedded in f if and only if all of the edges of G\u02c6\n\u2217\nE(L)\nare embedded in f . Let e\u22171 and e\n\u2217\n2 be edges of G\u02c6\n\u2217\nE(L). We show that e\n\u2217\n1 and e\n\u2217\n2\nare embedded in the same face of G\u02c6\u2212 {e \u2208 E : L \u2208 lE(e)}. Suppose first that\ne\u22171 and e\n\u2217\n2 are both incident with a common vertex, v\n\u2217. Then v\u2217 is in a face of\nG\u02c6 bounded by edges which include e\u22171 and e\n\u2217\n2, say e1 and e2 respectively. Since\ne\u22171 and e\n\u2217\n2 both contain L in their labels, so do e1 and e2. This implies that\ne1 and e2 are not in the graph G\u02c6 \u2212 {e \u2208 E : L \u2208 lE(e)}. Moreover, deleting\ne1 and e2 from G\u02c6 places the edges e\n\u2217\n1 and e\n\u2217\n2 in the same face of the resulting\ngraph; see Fig. 22, where the dashed lines indicate the edges of G\u02c6 that bound\nthe faces containing the vertices incident with e\u22171 and e\n\u2217\n2. Therefore, e\n\u2217\n1 and\ne\u22172 are in some common face, f , of G\u02c6 \u2212 {e \u2208 E : L \u2208 lE(e)}. Since G\u02c6\n\u2217\nE(L) is\nconnected, it follows that all of its edges are embedded in f and so, therefore,\nare those of G\u02c6E(L).\n26\ne1\n*\nv e2\n*\ne1 e2\ndelete e1 and e2\ne1\n*\nv e2\n*\nFig. 22. Connected edges are in a common face.\nConversely, suppose that there exists a face, f , of the graph G\u02c6\u2212{e \u2208 E : L \u2208\nlE(e)} such that all of the edges in G\u02c6E(L) are embedded in f . To prove that\nCon(L) consists of a single curve, it is sufficient to show that the graph G\u02c6\u2217E(L)\nis connected. Suppose that v\u22171 and v\n\u2217\n2 are edges of G\u02c6\n\u2217\nE(L) but for which there\nis no path in G\u02c6\u2217E(L) from v\n\u2217\n1 to v\n\u2217\n2. The argument to show that this leads to\na contradiction is similar to that constructed in lemma 5. Hence d possesses\nthe unique labels property. 2\nTheorem 12 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Any Euler diagram, d = (Curve, l),\ngenerated from G\u02c6 possesses the unique labels property if and only if for all\nL \u2208 im(l) there exists a face, f , of the graph G\u02c6 \u2212 {e \u2208 E : L \u2208 lE(e)} such\nthat all of the edges in G\u02c6E(L) are embedded in f .\nDefinition 31 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. The contour components mea-\nsure for G\u02c6 is\n\u2211\nL\u2208im(lV )\n(|face(G\u02c6 \u2212 {e \u2208 E : L \u2208 lE(e)}, L)| \u2212 1)\nwhere face(G\u02c6 \u2212 {e \u2208 E : L \u2208 lE(e)}, L) is the set of faces in G\u02c6 \u2212 {e \u2208 E :\nL \u2208 lE(e)} that contain at least one edge, e, of G\u02c6 where L \u2208 lE(e).\n5.6 No Brushing Points\nDetecting the presence of brushing points is the most challenging case, out\nof all six properties. In fact, we only present partial results here, in that we\ncan sometimes detect such points. In Fig. 23, the generated diagram d has a\nbrushing point between a and c. This brushing point arises from the vertex of\nG\u02c6\u2217 that is embedded in f (the figure does not show G\u02c6\u2217). Each edge sequence\naround f gives rise to a label sequence (reading the labels of the edges rather\nthan the edges themselves): (c, a, a, c). This tells us that curves labelled a and\nc embedded across f will not cross. Had that edge sequence instead given\nrise to (c, a, c, a) then this would indicate that the curves labelled a and c\n27\ncross in f . In general, edges are labelled by sets of curve labels, rather than\nsingle curve labels, and these two sequences are strictly ({c}, {a}, {a}, {c})\nand ({c}, {a}, {c}, {a}).\na ac abc\n\u00c6\nG\nd\ngenerates\nab\nab\nb\n\u00c6\na\nb\nc\nf\nFig. 23. Detecting transverse crossings.\nTo formalize the notion of a brushing point, we also consider when two curves\ncross. As an example, the curves in the lefthand diagram in Fig 24 cross at\nthe point p. To identify this formally, we can consider a disc neighbourhood\nN(p) around p: it contains four regions, one for each of the four combinations\nof being \u2018inside\u2019 or \u2018outside\u2019 c1 and c2. However, had c1, say, possessed self-\nconcurrency it need not have had an interior. Thus, we cannot use the notion\nof interior to define a crossing point in general Euler diagrams. Given c1, N(p)\nis cut into two pieces and we can arbitrarily assign positive and negative to\neach of these two pieces respectively. The curves in the righthand diagram\nbrush at p. Here, the positive and negative regions do not correspond to each\nof the four combinations of being positive or negative to the two curves.\nc\n1 c2\nA diagramwith a crossing point.\nPos(c1)\nPos(c2)\nNeg(c 1)\nPos(c2)\nNeg(c1)\nNeg(c2)\nPos(c1)\nNeg(c2)\nN(p)\np\nc\n1 c2\nA diagram with a brushing point.\nNeg(c 1)\nNeg(c 2)\nNeg(c 1)\nPos(c2)\nNeg(c1)\nNeg(c2)\nPos(c1)\nNeg(c2)\nN(p)\np\nFig. 24. Crossing and brushing curves.\nDefinition 32 Let c: [x, y]\u2192 R2, where the notation [x, y] denotes any closed\ninterval of R2. Let p be a point in im(c) and let N(p) be a disc neighbourhood\nof p. If N(p)\u2212 im(c) consists of exactly two connected components then N(p)\nis called a splitting neighbourhood of p for c.\nDefinition 33 Let c1: [x, y]\u2192 R\n2 and c2: [a, b]\u2192 R\n2 be two curves such that\nthere is a unique point p in im(c1)\u2229im(c2). If there exists a disc neighbourhood\nN(p) such that\n(1) N(p) is a splitting neighbourhood of p for c1; arbitrarily call one of the\ntwo connected components Pos(c1) and the other Neg(c1),\n28\n(2) N(p) is a splitting neighbourhood of p for c2; arbitrarily call one of the\ntwo connected components Pos(c2) and the other Neg(c2),\n(3) N(p) contains a point in Pos(c1) \u2229 Pos(c2),\n(4) N(p) contains a point in Pos(c1) \u2229Neg(c2),\n(5) N(p) contains a point in Neg(c1) \u2229 Pos(c2) and\n(6) N(p) contains a point in Neg(c1) \u2229Neg(c2)\nthen c1 and c2 are said to cross at p. Otherwise c1 and c2 brush at p.\nLet c1: [0, 1]\u2192 R2 and c2: [0, 1]\u2192 R2 be two closed curves such that there is a\npoint p in im(c1) \u2229 im(c2). If there exists I1, I2 \u2286 [0, 1] such that\n(1) im(c1|I1) \u2229 im(c2|I2) contains exactly p,\n(2) the curves c1|I1 and c2|I2 brush at p\nthen c1 and c2 brush at p.\nDefinition 34 An Euler diagram, d, possesses the no brushing points\nproperty if and only if no pair of curves brush at any point.\nDefinition 35 Let G be a connected, planar, vertex-labelled graph with an\nappropriate embedding G\u02c6. Let f be a face in G\u02c6 with an edge sequence ES(f) =\n(e1, ..., en). Then the label sequence given labels L1 and L2 in L, derived\nfrom ES(f) is (lE(e1) \u2229 {L1, L2}, ..., lE(en) \u2229 {L1, L2}). The reduced label\nsequence, (a1, ..., an), derived from ES(f) is the maximal sequence obtained\nfrom (lE(e1)\u2229{L1, L2}, ..., lE(en)\u2229{L1, L2}) by removing all occurrences of \u2205.\nGiven a reduced label sequence, a brushing test sequence for f is (b1, ..., bm)\nwhere\n(1) a1 gives rise to b1 \u2208 a1 and if |a1| = 2 then b2 = a1 \u2212 {b1}, and\n(2) each remaining aj gives rise to\n(a) bx where bx \u2208 aj, and\n(b) if |aj | = 2, then bx+1 = aj \u2212 {bx}\nwhere bx\u22121 arose from aj\u22121.\nTo illustrate, a face edge sequence ({a, c}, {a, b}, {b}, {c}) has a label sequence,\ngiven a and b, ({a}, {a, b}, {b}, {}). In turn, this gives rise to the reduced\nlabel sequence ({a}, {a, b}, {b}). From this, we can generate two brushing test\nsequences: (a, a, b, b) and (a, b, a, b); the set {a, b} gives rise to the middle two\nlabels in the sequence, one a and one b, in either order. We can use brushing\ntest sequences to (partially) test for the presence of brushing points.\nDefinition 36 Let G = (V, E, lV , lE) be a connected, planar vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Let f be a face in G\u02c6. Let L1 and\nL2 be labels in\n\u22c3\naz\u2208im(lV )\naz. If, for all brushing test sequences, b = (b1, ..., bm),\n29\nfor f given L1 and L2, there exists a subsequence b\n\u2032 = (by, by+1, ..., by+ m\n2\n\u22121)\nwhere the number of occurrence of L1 in b\n\u2032 is greater than half the number of\noccurrences of L1 in b then f is said to have a detectable brushing point\nfor L1 and L2.\nTheorem 13 Let G = (V, E, lV , lE) be a connected, planar vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Then in any Euler diagram that is\ngenerated from G\u02c6, two curves, c1 and c2, in d meet at a brushing point in a\nface f of G\u02c6 if f has a detectable brushing point for l(c1) and l(c2).\nUnfortunately, a graph may have faces that have no detectable brushing points\nfor labels L1 and L2 but curves passing through that face with those labels\nbrush. However, this only happens when we have a curve passing through a\nface multiple times (i.e. that curve has a non-simple point in that face). To\nillustrate, in Fig. 25, the graph G\u02c6 has faces that have no detectable brushing\npoints, given a (i.e. both L1 and L2 are a). However, no matter how we traverse\nthe curve a, shown in the generated diagram below, we will create a brushing\npoint. In a more complex example, we might have two curve labels a and b\nfor which some face has a brushing test sequence (a, b, a, a, b, a). From such a\nsequence we cannot detect whether a and b cross or brush.\nG\ngenerates\n\u00c6\n\u00c6\n\u00c6\naa a aa\n\u00c6\nd\na\nFig. 25. A graph that does not have detectable brushing points but generates a\ndiagram with a brushing point.\nTheorem 14 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. If for any pair of labels, L1 and L2,\nin im(lV ) and for any face fx in G\u02c6,\n30\n(1) fx has no detectable brushing point for L1 and L2,\n(2)\n\u2211\n1\u2264i\u2264kx\n(lE(e)\u2229{L1}) \u2264 2 where ES(fx) = (e1, ..., ekx) (the condition which\nis equivalent to saying the curves with label L1 are simple), and\n(3) similarly for L2,\n\u2211\n1\u2264i\u2264kx\n(lE(e) \u2229 {L2}) \u2264 2\nthen any Euler diagram, d = (Curve, l), generated from G\u02c6 possesses the no\nbrushing points property.\nOur brushing points measure will provide a lower bound on a count of the\nnumber of times an embedded diagram d violates this property. It is possible\nfor the measure to be zero and yet d may not possess the no brushing points\nproperty.\nDefinition 37 Let G = (V, E, lV , lE) be a connected, planar, vertex-labelled\ngraph with an appropriate embedding, G\u02c6. Let L1 and L2 be labels in\n\u22c3\naz\u2208im(lV )\naz.\nThe brushing points score for L1 and L2 is the number of faces in G\u02c6 for\nwhich there is a detectable brushing point for L1 and L2.\nDefinition 38 Let G = (V, E, lV , lE) be a connected, planar vertex-labelled\ngraph with an appropriate embedding, G\u02c6. The brushing points measure\nfor G is the sum of the brushing point scores 3 for all pairs of labels L1 and\nL2.\n6 Producing Vertex-Labelled Graphs\nSo far, we have mainly considered how to covert graphs into Euler diagrams\nand how to use those graphs to identify properties that will be possessed\nby those diagrams. Largely, we have not discussed how to convert abstract\ndescriptions into vertex-labelled graphs. This is a key step in the generation\nprocess and, when proving that every abstract description, D, can be realized\nas an Euler diagram, d, we illustrated a method to convert D into a vertex-\nlabelled graph that generates such a d.\nHere, we sketch a naive algorithm to produce a wider class of vertex-labelled\ngraphs from which we can embedded Euler diagrams. First, take an arbitrary\nset of vertices, V , with the same cardinality as D. Define an arbitrary bijection\nfrom V to D, labelling each vertex with an abstract zone. Clearly the graph, G,\nwith this vertex set and labelling function is a subgraph of any vertex-labelled\ngraph that generates an Euler diagram with abstraction D. We can add edges\n3 We do not count the brushing point score for L2 and L1 if we have already counted\nthe brushing point score for L1 and L2.\n31\nand vertices to this graph in order to generate all vertex-labelled graphs with\nup to some arbitrary finite number of vertices. Given a connected, planar\ngraph in this vertex set, we can embedded it in all possible ways and discard\nany embeddings that are not appropriate. For each of these embeddings, we\ncan determine what properties the embedded Euler diagram will possess.\nThus, if we want to generate an Euler diagram, d, with abstraction D and some\nspecified set of properties, we can search through this finite set of graphs to see\nwhether any generate such a d. Of course, this naive search algorithm is likely\nto be infeasible to implement in practise, due to the very large search space\nwe are likely to generate. This issue is further discussed in the conclusion, in\nthe context of heuristic searches through the space, an area in which we have\nalready produced some results [24].\n7 Implementation\nWe now describe prototype software that implements a method for embedding\nan Euler diagram from a vertex-labelled graph. This implementation relates\nto section 4, which described how a diagram can be formed from a subgraph of\na dual of the vertex-labelled graph. The formation of the abstract dual is not\nproblematic: there is a dual vertex for each face in the vertex-labelled graph\nand a dual edge for each edge in the vertex-labelled graph. Hence the focus\nof this section is on routing the edges in the dual in to produce the required\ndiagram.\nFig. 26. An incorrect embedding for a dual of a vertex-labelled graph.\nThe routing of the dual edges is not trivial. Firstly, the dual edges must remain\nin the face between cutting (the vertex-labelled graph) G\u02c6\u2019s edges and joining\n32\nto the vertices of G\u02c6\u2217, otherwise inadvertent edge crossings could occur, leading\nto a non-plane dual and an incorrectly embedded diagram. Even when routing\nedges in the same face, inadvertent crossings of dual edges can appear. This\nis illustrated in Fig. 26: the edge crossings in the topmost face mean the dual\nis non-plane (the dual vertices are shown as solid rectangles).\nOur approach to avoid these difficulties is to triangulate the faces in the vertex-\nlabelled graph. Edge routing can be then be performed by connecting edge\nsegments as straight lines between evenly spaced cut points on triangulation\nedges. The triangles are concave and, hence, the dual edges cannot leave the\ntriangles, and so cannot leave the face. However, this means that multiple\nedges may pass through a triangle, and to ensure that dual edges do not cross\ninside a face, we can arrange the cuts points for a triangle so that when read\naround the triangle, no intersections will occur. This is done using an ordering\nmethod for the edge cuts along the triangulated edge.\nFig. 27. The triangulated edge (shown unlabelled) needs to be ordered.\nFig. 28. Ordering labels on dual edges.\nFigs 27 and 28 show how the dual edge cut points on triangulation edges are\nfound for a single face. Dual edges labelled b and bc must pass through this tri-\nangulated edge. In Fig. 28, these edges have been ordered on the triangulated\nedge so that they will pass through the triangles without crossing.\nIn our construction of a dual, we first determine the position of each dual\nvertex. Given a face of G\u02c6, it is placed at the centroid of the triangle which\ncontains the middle of the face (or triangle closest to the centre of the face,\nin the case of some convex faces). The dual vertex, v, is shown as a solid\n33\nrectangle in Figs 27 and 28. The dual edges incident with v must then be\nrouted from the vertex-labelled graph edges to v. There is no need to order\ncut points through triangulation edges with zero or one dual edges cutting\nthem, so in Fig. 27 the labels for these edges are shown, placed in the middle\nof the edges. There is one remaining triangulated edge, which has two dual\nedges cutting it, labelled b and bc. Such triangulated edges can be ordered, as\nlong as they belong to a triangle that has two edges which have already been\nassigned an order. It is easy to show that such a triangulated edge will always\nexist, and so the dual edge routing always terminates. The order that avoids\nany edge crossings in the triangle not containing the dual vertex can be seen\nin Fig. 28, as drawing the edge segments as straight lines between the label\npositions leads to no crossing.\nThe final Euler diagram, after all dual edge routing, is shown in Fig. 29; the\ndual vertices are omitted this diagram for clarity. The straight line dual edge\nsegments that join up the cut points on triangulation edges can be seen. The\nfinal Euler diagram is given in Fig. 30.\nFig. 29. Vertex-labelled graph, triangulation and Euler diagram drawn from the\ndual graph.\n7.1 Choosing a Vertex-Labelled Graph\nThe implementation described above constructs an Euler diagram from an\nembedded, vertex-labelled graph. There are challenges in choosing a vertex-\nlabelled graph that generates an Euler diagram with specified properties,\nor low numbers of violations of properties. It is possible to define heuristic\nsearches through the space of vertex-labelled graphs in order to decrease the\ntime taken to find a suitable graph, at the possible expense of not finding a\n\u2018best\u2019 graph. We have already developed one such heuristic search and im-\n34\nFig. 30. Final Euler diagram.\nplemented it [24]. That particular search yields a graph that generates Euler\ndiagrams under a prioritized selection of the properties. In particular, that im-\nplementation generates diagrams which have connected zones, simple contours\n(contours for which no pair of curves intersect), and it attempts to minimizes\nthe amount of concurrency and number of brushing points. Here, to indicate\nthe scalability of that implementation, we include some data on the time taken\nto find a vertex-labelled graph, given an abstract description, that generates\nsuch a diagram. The code was written and run using Java 1.6 in 32 bit Vista\nSP1 on a Intel Core 2 Duo CPU running at 2.4 Ghz with 4 GB of RAM. Each\nrandomly generated abstract description had 6 curve labels and between 4\nand 23 zones. We randomly generated 10 abstract descriptions with each zone\nset cardinality (i.e. 4 \u2264 |Z(D)| \u2264 23), giving a total sample size of 200. As\ncan be seen in Fig. 31, the process is approximately linear in the number of\nzones; the times given in the chart are the average times taken to find graphs\nfor each of the 10 abstract descriptions.\nTime taken to generate graphs\n0\n0.05\n0.1\n0.15\n0.2\n4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\nNumber of Zones\nT\nim\ne\nin\nS\ne\nco\nn\nd\ns\nFig. 31. Generating vertex-labelled graphs.\n35\n8 Conclusion and Further Work\nIn this paper, we have produced the first fully formalized framework for gen-\nerating an Euler diagram given any abstract description. Our method takes\nthe abstract description and, first, converts it into a vertex-labelled graph.\nSecondly, after finding an appropriate embedding we construct a dual graph\nwhich allows us to generate an Euler diagram with the required abstraction.\nWe have identified properties of the embedded graph that correspond to prop-\nerties that the generated Euler diagram will possess. Moreover, we have shown\nhow to use the embedded graph to count violations of these properties in the\nembedded Euler diagram. A particular feature of our generation method is\nthat it is capable of producing an embedding of any Euler diagram that has\ncurves with only a finite number of self-intersections, contours that are not\nself-concurrent, and a finite number of minimal regions. Finally, we produced\na naive implementation of the method to justify its utility.\nFurther work includes allowing more general edge labelling to occur in vertex-\nlabelled graphs. At present, our graphs do not generate Euler diagrams that\ninclude any self-concurrent curves. Whilst there are usability reasons for not\nallowing such curves (one cannot necessarily identify the interior of such curves\nfrom their images alone, for instance) it is a limitation of our method and some-\ntimes drawing such curves can be advantageous. For example, in an automated\nreasoning environment, such as [28], one may want to draw one diagram so\nthat it looks similar to another (after the application of an inference rule). Such\na requirement may necessitate the use of a self-concurrent curve. Edge labels\nwould need to reflect the number of times each curve was to pass through it.\nThe work in this paper also provides the essential foundations for further sig-\nnificant avenues of future research. In particular, we have set up a framework\nthat will allow heuristic searches to take place that allow the generation of Eu-\nler diagrams that have specified arbitrary subsets of the properties investigated\nin this paper. As discussed above, we have already begun work along these\nlines, producing a more sophisticated implementation than that described in\nthis paper [24]. We plan to extend this work to include a user specified prior-\nitization of the properties, which represents a considerable challenge.\nAcknowledgements This work is supported by EPSRC grants EP\/E011160\/1\nand EP\/E010393\/1 for the Visualization with Euler Diagrams project. The\nproject web site can be found at www.eulerdiagrams.com.\n36\nReferences\n[1] L. Euler., Lettres a une princesse dallemagne sur divers sujets de physique et\nde philosophie, Letters 2 (1775) 102\u2013108, berne, Socit Typographique.\n[2] S. Chow, F. Ruskey, Drawing area-proportional Venn and Euler diagrams,\nin: Proceedings of Graph Drawing 2003, Perugia, Italy, Vol. 2912 of LNCS,\nSpringer-Verlag, 2003, pp. 466\u2013477.\n[3] H. Kestler, A. Muller, T. Gress, M. Buchholz, Generalized Venn diagrams:\nA new method for visualizing complex genetic set relations, Journal of\nBioinformatics 21 (8) (2005) 1592\u20131595.\n[4] A. Verroust, M.-L. Viaud, Ensuring the drawability of Euler diagrams for up to\neight sets, in: Proceedings of 3rd International Conference on the Theory and\nApplication of Diagrams, Vol. 2980 of LNAI, Springer, Cambridge, UK, 2004,\npp. 128\u2013141.\n[5] R. DeChiara, U. Erra, V. Scarano, VennFS: A Venn diagram file manager, in:\nProceedings of Information Visualisation, IEEE Computer Society, 2003, pp.\n120\u2013126.\n[6] J. Lovdahl, Towards a visual editing environment for the languages of the\nsemantic web, Ph.D. thesis, Linkoping University (2002).\n[7] P. Hayes, T. Eskridge, R. Saavedra, T. Reichherzer, M. Mehrotra,\nD. Bobrovnikoff, Collaborative knowledge capture in ontologies, in: Proceedings\nof the 3rd International Conference on Knowledge Capture, 2005, pp. 99\u2013106.\n[8] S.-K. Kim, D. Carrington, Visualization of formal specifications, in: 6th Aisa\nPacific Software Engineering Conference, IEEE Computer Society Press, Los\nAlamitos, CA, USA, 1999, pp. 102\u2013109.\n[9] P. Artes, B. Chauhan, Longitudinal changes in the visual field and optic disc\nin glaucoma, Progress in Retinal and Eye Research 24 (3) (2005) 333\u2013354.\n[10] O. Lenz, A. Fornoni, Chronic kidney disease care delivered by us family medicine\nand internal medicine trainees: results from an online survey, BMC Medicine\n4 (30).\n[11] E. Hammer, Logic and Visual Information, CSLI Publications, 1995.\n[12] R. Clark, Failure mode modular de-composition using spider diagrams, in:\nProceedings of Euler Diagrams 2004, Vol. 134 of ENTCS, 2005, pp. 19\u201331.\n[13] L. Niebro\u00b4j, Defining health\/illness: Societal and\/or clinical medicine?, Journal\nof Physiology and Pharmacology 57 (4) (2006) 251\u2013262.\n[14] R. DeChiara, U. Erra, V. Scarano, A system for virtual directories using Euler\ndiagrams, in: Proceedings of Euler Diagrams 04, Vol. 134 of Electronic Notes\nin Theoretical Computer Science, 2005, pp. 33\u201353.\n37\n[15] J. Thie`vre, M. Viaud, A. Verroust-Blondet, Using Euler diagrams in traditional\nlibrary environments, in: Euler Diagrams 2004, Vol. 134 of ENTCS, 2005, pp.\n189\u2013202.\n[16] S. Chow, F. Ruskey, Towards a general solution to drawing area-proportional\nEuler diagrams, in: Proceedings of Euler Diagrams, Vol. 134 of ENTCS, 2005,\npp. 3\u201318.\n[17] H. Kestler, A. Muller, J. Kraus, M. Buchholz, T. Gress, H. L. abd D. Kane,\nB. Zeeberg, J. Weinstein, Vennmaster: Area-proportional Euler diagrams for\nfunctional go analysis of microarrays, BMC Bioinformatics 9 (67).\n[18] P. Simonetto, D. Auber, Visualise undrawable Euler diagrams, in: 12th\nInternational Conference on Information Visualization, IEEE, 2008, pp. 594\u2013\n599.\n[19] S. Chow, Generating and drawing area-proportional Euler and Venn diagrams,\nPh.D. thesis, University of Victoria (2007).\n[20] G. Stapleton, J. Howse, P. Rodgers, L. Zhang, Generating Euler diagrams from\nexisting layouts, in: Layout of (Software) Engineering Diagrams, ECEASST,\n2008.\n[21] J. Venn, On the diagrammatic and mechanical representation of propositions\nand reasonings, Phil.Mag.\n[22] A. W. Edwards, Venn diagrams for many sets., New Scientist 7 (1989) 51\u201356.\n[23] J. Flower, J. Howse, Generating Euler diagrams, in: Proceedings of 2nd\nInternational Conference on the Theory and Application of Diagrams, Springer,\nGeorgia, USA, 2002, pp. 61\u201375.\n[24] P. Rodgers, L. Zhang, A. Fish, General Euler diagram generation, in:\nInternational Conference on the Theory and Application of Diagrams, Springer,\n2008.\n[25] O. Lemon, I. Pratt, Spatial logic and the complexity of diagrammatic reasoning,\nMachine GRAPHICS and VISION 6 (1) (1997) 89\u2013108.\n[26] N. Swoboda, G. Allwein, Using DAG transformations to verify Euler\/Venn\nhomogeneous and Euler\/Venn FOL heterogeneous rules of inference, Journal\non Software and System Modeling 3 (2) (2004) 136\u2013149.\n[27] G. Stapleton, P. Rodgers, J. Howse, J. Taylor, Properties of Euler diagrams,\nin: Proceedings of Layout of Software Engineering Diagrams, EASST, 2007, pp.\n2\u201316.\n[28] G. Stapleton, J. Masthoff, J. Flower, A. Fish, J. Southern, Automated theorem\nproving in Euler diagrams systems, Journal of Automated Reasoning 39 (2007)\n431\u2013470.\n38\n"}