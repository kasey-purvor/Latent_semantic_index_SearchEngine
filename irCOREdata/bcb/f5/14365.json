{"doi":"10.1080\/0968776950030104","coreId":"14365","oai":"oai:generic.eprints.org:167\/core5","identifiers":["oai:generic.eprints.org:167\/core5","10.1080\/0968776950030104"],"title":"Issues in making courseware exploitable and issues in making exploitable courseware","authors":["Sivrter, Douglas","Siviter, Phil"],"enrichments":{"references":[{"id":201526,"title":"Standards',","authors":[],"date":"1993","doi":"10.3402\/rlt.v1i1.9461","raw":"Jacobs, G. (1993), 'Standards', ASSOCIATION FOR LEARNING TECHNOLOGY Journal, 1, 1, 2-3. Laurillard, D. Swift, B. & Darby, J. (1993), 'Academics' use of courseware materials: a survey', ASSOCIATION FOR LEARNING TECHNOLOGY Journal, 1, 1, 4-14.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1995","abstract":"Part 1 of the paper, \u2018Issues in making courseware exploitable\u2019, is about dealing with the legacy of large volumes of incompatible non\u2010integrated courseware which are currently being generated within initiatives such as the Teaching and Learning Technology Programme (TLTP). We suggest strategies for allowing end\u2010users to apply courseware management techniques belatedly to current courseware developments, thereby offering ways of making the emerging courseware more exploitable than it otherwise would be. Part 2 of the paper, \u2018Issues in making exploitable courseware\u2019, takes a forward\u2010looking approach which recognizes that future courseware development efforts must pre\u2010empt these problems of incompatibility and non\u2010integration. Courseware development must mature to the stage where it makes use of courseware design standards, embraces a host of essential lessons from conventional software development, and recognizes the importance of courseware management issues","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/14365.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/167\/1\/ALT_J_Vol3_No1_1995_Issues%20in%20making%20courseware%20ex.pdf","pdfHashValue":"051aabf6c8bd7a472f7b73829275028129038bfe","publisher":"Universit of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:167<\/identifier><datestamp>\n      2011-04-04T09:26:04Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/167\/<\/dc:relation><dc:title>\n        Issues in making courseware exploitable and issues in making exploitable courseware<\/dc:title><dc:creator>\n        Sivrter, Douglas<\/dc:creator><dc:creator>\n        Siviter, Phil<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        Part 1 of the paper, \u2018Issues in making courseware exploitable\u2019, is about dealing with the legacy of large volumes of incompatible non\u2010integrated courseware which are currently being generated within initiatives such as the Teaching and Learning Technology Programme (TLTP). We suggest strategies for allowing end\u2010users to apply courseware management techniques belatedly to current courseware developments, thereby offering ways of making the emerging courseware more exploitable than it otherwise would be. Part 2 of the paper, \u2018Issues in making exploitable courseware\u2019, takes a forward\u2010looking approach which recognizes that future courseware development efforts must pre\u2010empt these problems of incompatibility and non\u2010integration. Courseware development must mature to the stage where it makes use of courseware design standards, embraces a host of essential lessons from conventional software development, and recognizes the importance of courseware management issues.<\/dc:description><dc:publisher>\n        Universit of Wales Press<\/dc:publisher><dc:date>\n        1995<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        cc_by_nc_nd<\/dc:rights><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/167\/1\/ALT_J_Vol3_No1_1995_Issues%20in%20making%20courseware%20ex.pdf<\/dc:identifier><dc:identifier>\n          Sivrter, Douglas and Siviter, Phil  (1995) Issues in making courseware exploitable and issues in making exploitable courseware.  Association for Learning Technology Journal, 3 (1).  pp. 22-28.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776950030104<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/167\/","10.1080\/0968776950030104"],"year":1995,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"Issues in making courseware exploitable\nand issues in making exploitable courseware\nDouglas Sivrter* and Phil Siviter**\n*School of Computing Information Systems and Mathematics, South Bank University\n**Department of Computing, University of Brighton\nPart 1 of the paper, 'Issues in making courseware exploitable', is about dealing with the legacy of\nlarge volumes of incompatible non-integrated courseware which are currently being generated\nwithin initiatives such as the Teaching and Learning Technology Programme (TLTP). We\nsuggest strategies for allowing end-users to apply courseware management techniques belatedly to\ncurrent courseware developments, thereby offering ways of making the emerging courseware\nmore exploitable than it otherwise would be. Part 2 of the paper, 'Issues in making exploitable\ncourseware', takes a forward-looking approach which recognizes that future courseware\ndevelopment efforts must pre-empt these problems of incompatibility and non-integration.\nCourseware development must mature to the stage where it makes use of courseware design\nstandards, embraces a host of essential lessons from conventional software development, and\nrecognizes the importance of courseware management issues.\nIntroduction\nThere are currently substantial investments being made in courseware development in the\nUK, in particular in the H\u00c8FCs' Teaching and Learning Technology Programme\n(TLTP), and the hope which underpins these development efforts is that Higher\nEducation institutions will eagerly adopt and exploit the freely available courseware\nwhich emerges from them. Unfortunately, there are many reasons why this is probably\ngoing to be an over-optimistic assumption (Laurillard et al, 1993). The bottlenecks which\ncan impair the successful exploitation of courseware range from cultural to technical, and\nare quite diverse. In this paper we discuss some of these bottleneck issues and suggest\napproaches to dealing with them. We deliberately restrict our discussion to technical\nbottlenecks, and therefore discuss issues of courseware design, courseware development,\nand courseware management\nWe first suggest strategies for dealing with a current courseware management challenge,\n22\nALT-] Volume 3 Number I\ni.e. is' it possible to take the current legacy of large volumes of incompatible non-\nintegrated courseware and somehow make it feel more integrated and compatible than it\nactually is, thereby enhancing its exploitability?\nSorting out courseware management 'after the event' is of course the wrong way to\nproceed (but inevitable if the currently emerging courseware is to be exploited at all). We\ntherefore take a forward-looking approach and suggest that it is essential and inevitable\nfor the courseware-development community to move forwards to a technical culture\nwhich embraces courseware design standards (Jacobs, 1993) and embraces a host of\nessential lessons from the mainstream software development world. In such a culture,\ncourseware-management facilities will not be a totally neglected aspect of development as\nthey are today, but will instead be regarded as an essential aspect of the courseware life-\ncycle. Courseware management will also benefit from dealing with courseware objects\nwhich are substantially more co-operative than today's 'dumb' courseware.\nPart I Issues in making courseware exploitable (tidying up the\ncurrent mess)\nLarge-scale vs. Small-scale, Courseware vs. Lessonware\nWithin the UK there are now many courseware-development efforts which have\nprogressed well beyond the small cottage-industry approach, and there is a growing trend\ntowards large-scale developments via consortia of institutions. Collaborative develop-\nments are increasingly being shown to be more viable (both educationally and\neconomically) than small-scale isolated developments. It is not just the scale of the\ndevelopment activities which has substantially increased; the courseware itself is larger\nand more sophisticated than it has ever been (a fact which is mostly attributable to\nadvances in computer software and hardware). Most previous developments of computer-\nassisted learning material would be more appropriately labelled as lessonware; they\nusually tackle only a small fraction of what anyone in an academic institution would call\na course. By contrast with previous small-scale lessonware products, today's consortium-\nbased developments are trying to produce large-scale courseware which might embody\nhundreds of pieces of lessonware. As the size and sophistication of the courseware grows,\nand as more complex patterns of use emerge, many new problems are encountered and\nnew courseware management requirements emerge.\nLimitations of current authoring tools\nIt is, of course, tempting simply to extrapolate upwards and assume that large-scale\ncourseware can be built out of lots of pieces of small-scale lessonware, an assumption\nwhich is fine in principle but complicated in practice. Though there are now many\nwonderful software packages which support the development of small-scale lessonware,\nthere is much less software support for managing the development and delivery at the\nlarger courseware level. Authors can (and do) argue endlessly over their favourite\ndevelopment tools, but they are usually just comparing the built-in facilities for making\nclever things happen on screen. None of these lessonware tools provide ready-made\n23\nDouglas Siw'ter and Phil Siv\/ter Courseware exploitation\nsophisticated support for developing and endlessly reconfiguring very large collections of\nCAL modules; nor do they offer sophisticated support for integrating CAL resources into\nComputer Supported Collaborative Learning frameworks; nor do they offer sophisticated\nsupport for integrating resources developed using a diverse range of software tools and\napplications. These excellent lessonware tools are simply not geared up to address large-\nscale courseware management issues.\nProblems of diversity\nMost of the consortium-based developments in the UK at this time have realized that off-\nthe-shelf solutions to courseware management requirements are not readily available, and\nhence they have either resorted to building their own solutions or have sadly neglected the\nproblems altogether. There are now far too many instances of projects reinventing each\nother's wheels, i.e. they individually discover the same sets of problems, then partly solve\nthem with in-house developments while remaining totally oblivious to anyone else solving\nthe same problems. Usually, the in-house solutions have failed to consider the extra\ncomplexities of ensuring that their products remain open, and almost no effort has gone\ninto pursuing compatibility with solutions produced by different projects. Far from\nremoving technical bottlenecks, we now have a culture of generating them.\nAs more sophisticated courseware becomes more widely available, academic staff will try\nto experiment with new ways of exploiting it (we hope). We should recognize that if\nwilling and eager university staff (those not suffering too badly from the Not-invented-\nhere syndrome) try to exploit the currently emerging courseware, they will face a range of\ntechnical barriers which will probably deter their enthusiasm and make them give up. The\ncurrent courseware development efforts are producing diverse courseware. Diversity in an\neducational sense (in content and in pedagogic style) is an asset, but accidental diversity\nin courseware management techniques and in basic software management techniques just\ntranslates to bewildering incompatibility for the typical end-user, and is therefore a\nliability.\nPartial solutions to current courseware management problems\nThe courseware development scene is still very young and has not yet matured to the\nstage where it collectively embraces useful, non-restrictive standards for design and\ndevelopment. As a result of this, end-users now face large volumes of incompatible non-\nintegrated courseware from a diverse range of courseware development initiatives.\nWe present a framework called HyperCourseware which immediately offers partial\nsolutions to these problems. In the latter part of this paper, we also assert that the\nHyperCourseware framework can be expanded to form the basis for genuinely open\ncourseware which can achieve substantially higher levels of courseware compatibility.\nThe HyperCourseware framework\nHyperCourseware is not a new idea; our first attempts at providing a HyperCourseware\nManagement System date back to a project which started in 1989 (Siviter & Brown,\n1992). A minimal description of HyperCourseware structuring principles is as follows:\n24\nALT-] Volume 3 Number I\n\u2022 A Course is a hierarchical network of Topics.\n\u2022 A Topic is a collection of Educational Activities.\n\u2022 An Educational Activity i s . . . (virtually anything that an author decides):\n\u2014 described educationally e.g. presentations, assignments, assessments, simulations;\n\u2014 technically implemented using anything, e.g. authoring tools, programming\nlanguages, software applications (spreadsheets, databases, etc.), multimedia\naudio-visual applications, away-from-machine activities.\nThe above framework is sufficiently general to allow virtually any courseware structure to\nbe generated, but sufficiently precise to allow software tools to support the manipulation\nof such structures. A HyperCourseware Management System is a set of software tools\nwhich enables the creation and endless adaptation of courseware structures and which\npartially or totally automates the creation of interactive views of the courseware\nstructures. A HyperCourseware Management System therefore enables non-programmers\nto manipulate large collections of 'lessonware objects' which may have been developed\nusing a diverse range of authoring tools.\nDealing with the legacy of incompatible courseware\nA classic scenario within universities is for lecturers to pick and mix from a variety of\ntexts in order to deliver the particular perspective on a subject which they feel is most\nappropriate. It is a rare occurrence for any lecturer to run a unit totally based on a single\nset textbook. For courseware to be acceptable to academic staff, it must offer the same\nkind of pick and mix adaptability that text sources currently provide. Academic staff\nmust have realistic options locally to customize courseware or even embark on major\nreconfigurations of the material - the courseware must be capable of evolving. As the\nsimplest of examples, a lecturer might like to edit the Aims and Objectives section of a\npiece of courseware the day before she uses it with a new group of students. A more\ninvolved example might be a lecturer creating a totally new courseware structure but\npopulating it with many pieces of existing lessonware, i.e. no new development of\nresources takes place but a new course is created out of existing resources. Is this\ncourseware development or courseware management?\nThere is now a national requirement for efforts to be made to bring together the many\nstrands of courseware development. Consumer universities (i.e. all of us) need to have\nmuch higher level courseware-management facilities which shield them from technical\nincompatibilities within the courseware. In effect, there needs to be an after-the-event\nfudge towards integration which is now a necessary but a poor substitute for integrated\ndesign. HyperCourseware can make some contribution to this belated integration. It\noffers conceptual support by providing a formalized but non-restrictive framework for\ncourseware structures. It offers practical support in the form of HyperCourseware\nManagement Systems: software tools and templates which directly support end-users in\ncourseware manipulation.\n25\nDouglas S\/Wter and Phil SMter Courseware exploitation\nPart 2 Issues in making exploitable courseware (avoiding a future\nmess)\nThe previous section discussed after-the-event fudges which are now required in order to\nallow existing diverse lessonware to be used and re-used in larger courseware structures\nand hence be more exploitable. This after-the-event fix can at best be described as a\nshallow integration which relies on a fairly crude management of multiple software\napplications and the generation of multiple 'educationally friendly' views of available\nresources. How can this shallow integration be improved upon in future? What can we\nlearn from many years of producing incompatible courseware?\nThe need to learn from the software development world\nWithin this discussion, it is useful to regard courseware as just a specialized form of\nsoftware. Obviously, educationists can point out an infinite number of ways in which\ncourseware differs from other forms of software, but there is no escaping the fact that\ncourseware is still software, and there are many lessons which courseware development\ncould and should learn from other areas of software development. The world of\ncommercial software has been forced to address issues of software management, software\ndevelopment, software evolution and maintenance, interoperability of software, etc. The\ncourseware-development community in comparison seems to be barely aware of the\nproblems looming over the horizon. This is tragic, given that an awareness of these\nproblems might have enabled the courseware-development projects to exploit some of the\nsolutions which have emerged within other software development scenarios.\nCourseware standards vs. software standards\nThere will always be a requirement for unrestrained, exploratory development, especially\nin areas as sophisticated as education, but there are also immense benefits to be derived\nfrom standardization in areas which are frankly boring, routine software-development\nissues. Nobody in their right mind would look at a PC in 1994 and say: 'Because I don't\nlike Windows I would prefer to build my own graphical user interface'. Yet similar\nnonsensical decisions have been made in relative ignorance about a range of software\ndevelopment issues. It is salutary to note that the art of reinventing boring old-fashioned\nwheels is alive and well within the world of courseware development (and, as many\nobservers have pointed out, because the courseware development world is relatively new\nand inexperienced, the reinvented wheels frequently turn out to be square).\nThe time is right (indeed, overdue) for a much greater effort, preferably on a national\nscale, to be directed towards establishing courseware development standards. Before, the\ninstructional design experts scream about how prematurely suffocating these standards\nmight be, we would emphasize that the areas best suited for standardization are not\nconcerned directly with instructional design but with the underlying software\ndevelopment issues. The standardization efforts we are advocating have a clear aim of\nenabling exploratory instructional design rather than constraining it.\nIt must be appropriate for the courseware development community to recognize that it is\nwasting opportunities to benefit from current experiences from mainstream software\n26\nVolume 3 Number \/\ndevelopment. Furthermore, given that mainstream software development is advancing\nmore quickly than courseware development, it would be preferable specifically to try to\nclose the experience gap by looking forward to emerging software trends. There are many\nexamples, e.g. there are massive increases in software productivity to be gained from\nexploiting reusable object-based software components. Microsoft's Object Linking and\nEmbedding, Apple's OpenDoc, and IBM's Distributed System Object Model are\nexamples of a software-development idea which will have a profound impact on how all\nsoftware (and therefore also courseware) will be developed. Yet it is probably true that\nonly a small minority of courseware developers have any idea of what these ideas\nrepresent, and an even smaller proportion are gearing up ready to exploit these inevitable\nideas.\nThere are two overlapping areas of concern. One is as mentioned above: what can (or\nmust) courseware development learn from software development? The other is the\nidentification of generic issues purely within courseware development (generic issues\nwhich may have only tentative parallels in software development) and the attempt to\nengender standards for dealing with these generic courseware development issues.\nMoving HyperCourseware towards a Framework for Open Courseware\nOne on-going development within our HyperCourseware projects has been to map out\nthe courseware development terrain in a way which can draw attention to areas which all\ncourseware development projects have in common, i.e. to identify what are genuinely\ngeneric problems associated with courseware management, courseware design, course-\nware development, and so on. The on-going development of HyperCourseware has also\nbeen concerned with providing techniques and tools for addressing these generic issues.\nThe HyperCourseware framework strives to be totally flexible so that in principle any\napproach to courseware development can be mapped onto the framework, somehow. As\na result of this work we now have:\n\u2022 a conceptual framework for courseware and a vocabulary which can be used a\nreference model, i.e. any courseware design can be compared with the reference model,\nif only to verify that the design has, in some way, suitably addressed a known\ncollection of essential issues;\n\u2022 demonstrator products which practically illustrate many courseware design issues;\n\u2022 a collection of tools and templates which genuinely enable courseware developers to avoid\nbeing distracted by the mundane reinvention of software-development wheels, and instead\nto raise their sights to the genuinely difficult aims of good instructional design.\nCurrent developments\nOur HyperCourseware Management System is object-based. It has well-defined internal\nprotocols which allow us endlessly to evolve the tools and which allow end-users to evolve\ncourseware. Even so, it is fair to say that HyperCourseware is not yet a truly open system.\nIt currently provides an elegant way of linking diverse applications (as do a few other\nsystems such as Microcosm from Southampton University), but these approaches are still\n27\nDouglas SMter and Phil SMter Courseware exploitation\nwell short of true openness. Much of our current research effort is going towards sub-\nstantially upgrading the HyperCourseware Reference Model so that it can seriously\ncontribute to a Framework for Open Courseware. In effect, we are now developing\ndistributed HyperCourseware.\nThe software-development world pursues goals like 'exceptional ease of use', 'application\nintegration', and 'evolutionary development'. These are all goals which the courseware\ndevelopment world also needs to pursue. Some of the most dramatic gains in software\ndevelopment are emerging from strategies which apply object-orientation techniques to\nclient\/server systems. By adopting similar strategies for courseware development it should\nbe possible to establish a Framework for Open Courseware based on the idea of Co-\noperative Courseware Objects.\nCo-operative Courseware Objects are of course communicating objects which require\nstandard protocols. We believe that the internal protocols for our current Hyper-\nCourseware system can form the basis for such protocols, hence we are currently engaged\nin a redesign and redevelopment effort in order to demonstrate this.\nWe also believe that a Framework for Open Courseware is an eventual necessity for the\ncourseware development community. We are tentatively trying to explore what it might\nlook like.\nReferences\nJacobs, G. (1993), 'Standards', ASSOCIATION FOR LEARNING TECHNOLOGY Journal, 1, 1, 2-3.\nLaurillard, D. Swift, B. & Darby, J. (1993), 'Academics' use of courseware materials: a\nsurvey', ASSOCIATION FOR LEARNING TECHNOLOGY Journal, 1, 1, 4-14.\nSiviter, D. & Brown, K. (1992), 'HyperCourseware', Computers and Education, 18, 1-3,\nJanuary, 163-70.\n28\n"}