{"doi":"10.1080\/0968776960040302","coreId":"14333","oai":"oai:generic.eprints.org:217\/core5","identifiers":["oai:generic.eprints.org:217\/core5","10.1080\/0968776960040302"],"title":"Designing software to maximize learning1","authors":["Somekh, Bridget"],"enrichments":{"references":[{"id":1881933,"title":"15Bridget Sometti Designing software to maximize learning","authors":[],"date":"1992","doi":null,"raw":"15Bridget Sometti Designing software to maximize learning Salamon, G. (1992), 'Computer's first decade: Golem, Camelot, or the Promised Land?', invited address to Division C, AERA Conference, San Francisco, April 1992.","cites":null},{"id":1043350,"title":"An ethnographic approach to analysing navigation and task structure in interactive multimedia: some design issues for group use',","authors":[],"date":"1992","doi":null,"raw":"Plowman, L. (1992), 'An ethnographic approach to analysing navigation and task structure in interactive multimedia: some design issues for group use', in Monk, A., Diaper, D. and Harrison, M. D. (eds.), People and Computers VII: Proceedings of HCI 92, Cambridge: CUP.","cites":null},{"id":1043346,"title":"and the UNCAL team members","authors":[],"date":"1976","doi":null,"raw":"MacDonald, B. and the UNCAL team members (1976), 'The educational potential of computer-assisted learning: qualitative evidence about student learning', paper prepared by UNCAL, the independent educational evaluation of the NDPCAL, CARE, UEA.","cites":null},{"id":454660,"title":"Classroom tasks and student abilities',","authors":[],"date":"1979","doi":null,"raw":"Doyle, W. (1979), 'Classroom tasks and student abilities', in Peterson, P. L. and Walberg, H. J. (eds.), Research on Teaching: Concepts, Findings and Implications, Berkeley, CA: National Society for the Study of Education, McCutchan, pp. 183-209.","cites":null},{"id":1043342,"title":"Computer interactive texts',","authors":[],"date":"1993","doi":null,"raw":"Harding, R. D. (1993), 'Computer interactive texts', in Proceedings of the Fourth International Conference on Technology in Collegiate Mathematics, Reading, MA: Addison-Wesley.","cites":null},{"id":454662,"title":"Computer-aided teaching of applied mathematics',","authors":[],"date":"1974","doi":"10.1007\/3-540-06907-0_75","raw":"Harding, R. D. (1974), 'Computer-aided teaching of applied mathematics', International Journal of Mathematical Education in Science and Technology, 5, 447-55.","cites":null},{"id":1043345,"title":"Computers and the emancipation of students: giving control to the learner',","authors":[],"date":"1987","doi":"10.1007\/bf00120002","raw":"Laurillard, D. (1987), 'Computers and the emancipation of students: giving control to the learner', Instructional Science, 16, 3-18.","cites":null},{"id":454777,"title":"Designing software to maximize learning","authors":[],"date":"1992","doi":"10.3402\/rlt.v4i3.9974","raw":null,"cites":null},{"id":454780,"title":"Getting teachers started with IT and transferable skills',","authors":[],"date":null,"doi":null,"raw":"Somekh, B. and Davis, N. (forthcoming), 'Getting teachers started with IT and transferable skills', in Somekh, B. and Davis, N. (eds.) (forthcoming - 1997), Using IT Effectively in Teaching and Learning: Studies in Pre-service and In-service Teacher Education, London, New York and Toronto: Routledge.","cites":null},{"id":454661,"title":"Individualized instruction on the computer: the meaning behind the myth',","authors":[],"date":"1988","doi":"10.1007\/bf01807254","raw":"Dublin, M. (1988), 'Individualized instruction on the computer: the meaning behind the myth', Interchange, 19 (2), 15-24.","cites":null},{"id":1043344,"title":"Learning with media',","authors":[],"date":"1991","doi":"10.3102\/00346543061002179","raw":"Kozma, R. B. (1991), 'Learning with media', Review of Educational Research, 61 (2), 179-211.","cites":null},{"id":200795,"title":"Learning with new information technologies in schools: perspectives from the psychology of learning and instruction',","authors":[],"date":"1990","doi":"10.1111\/j.1365-2729.1990.tb00350.x","raw":"De Corte, E. (1990), 'Learning with new information technologies in schools: perspectives from the psychology of learning and instruction', Journal of Computer Assisted Learning, 6, 69-87.","cites":null},{"id":1043348,"title":"Microworlds: incubators for knowledge',","authors":[],"date":"1980","doi":null,"raw":"Papert, S. (1980), 'Microworlds: incubators for knowledge', pp. 120-34 in Mindstorms, Brighton: The Harvester Press.","cites":null},{"id":1043343,"title":"Nuffield interactive mathematics courseware'.","authors":[],"date":"1994","doi":"10.1016\/0360-1315(94)90075-2","raw":"Harding, R. D. (1994). 'Nuffield interactive mathematics courseware'. Computers and Education, 22 (1\/2), 73-82.","cites":null},{"id":200790,"title":"School Learning: An Introduction to Educational Psychology,","authors":[],"date":"1969","doi":"10.1177\/002248717002100125","raw":"Ausubel, D. P. and Robinson, F. G. (1969), School Learning: An Introduction to Educational Psychology, London and New York: Holt, Rinehart and Winston.","cites":null},{"id":200791,"title":"Situated cognition and the culture of learning',","authors":[],"date":"1989","doi":"10.3102\/0013189x018001032","raw":"Brown, J. S., Collins, A. and Duguid, P. (1989), 'Situated cognition and the culture of learning', Educational Researcher, January-February, 32-42.","cites":null},{"id":454779,"title":"The human interface: hidden issues in computer-mediated communication affecting use in schools',","authors":[],"date":"1989","doi":null,"raw":"Somekh, B. (1989), 'The human interface: hidden issues in computer-mediated communication affecting use in schools', in Mason, R. and Kaye, A. (eds.), Mindweave, Oxford: Pergamon Press, pp. 242-6; reprinted in Boyd-Barrett, O. and Scanlon, E., Computers and Learning, Addison-Wesley in association with the Open University, 1991.","cites":null},{"id":1043347,"title":"The impact of microcomputer-based labs on children's ability to interpret graphs',","authors":[],"date":"1987","doi":"10.1002\/tea.3660240408","raw":"Mokros, J. and Tinker, R. (1987), 'The impact of microcomputer-based labs on children's ability to interpret graphs', Journal of Research in Science Teaching, 24 (4), 369-83.","cites":null},{"id":200792,"title":"The Process of Education,","authors":[],"date":"1960","doi":"10.1002\/bs.3830090108","raw":"Bruner, J. S. (1960), The Process of Education, Cambridge MA: Harvard University Press.","cites":null},{"id":454781,"title":"The Second Self: Computers and the Human Spirit,","authors":[],"date":"1984","doi":"10.1080\/00131728509335737","raw":"Turkle, S. (1984), The Second Self: Computers and the Human Spirit, London, Toronto and New York: Granada.","cites":null},{"id":454778,"title":"The Use of Computerized Databases in Critical Inquiry by Pupils","authors":[],"date":"1993","doi":null,"raw":"Smith, H. (1993), The Use of Computerized Databases in Critical Inquiry by Pupils Aged 8 to 11 Years, D. Phil, thesis, University of Sussex.","cites":null},{"id":1043351,"title":"The value of ideas: the immersion approach to the development of thinking',","authors":[],"date":"1991","doi":"10.3102\/0013189x020002003","raw":"Prawat, R. S. (1991), 'The value of ideas: the immersion approach to the development of thinking', Educational Researcher, 20 (2), 3-10.","cites":null},{"id":454782,"title":"Thought and Language,","authors":[],"date":"1986","doi":"10.1017\/s0033291700026155","raw":"Vygotsky, L. (1986), Thought and Language, Cambridge MA: MIT Press.","cites":null},{"id":200794,"title":"Towards a psychology of optimal experience',","authors":[],"date":"1982","doi":"10.1017\/cbo9780511621956.002","raw":"14ALT-] Volume 4 Number 3 Csikszentmihalyi, M. (1982), 'Towards a psychology of optimal experience', in Wheeler, L. (ed.), Review of Personality and Social Psychology, volume 2, Beverley Hills CA: Sage, pp. 13-36.","cites":null},{"id":200793,"title":"Towards a Theory of Instruction,","authors":[],"date":"1966","doi":"10.1177\/019263656605030929","raw":"Bruner, J. S. (1966), Towards a Theory of Instruction, Cambridge MA and London: The Belknap Press of Harvard University Press.","cites":null},{"id":454659,"title":"Understanding learning for teaching',","authors":[],"date":"1989","doi":"10.1080\/0140672890120102","raw":"Desforges, C. (1989), 'Understanding learning for teaching', Westminster Studies in Education, 12, 17-29.","cites":null},{"id":1043349,"title":"Zen and the Art of Motorcycle Maintenance,","authors":[],"date":"1974","doi":"10.1136\/mh.26.2.110","raw":"Pirsig, R. (1974), Zen and the Art of Motorcycle Maintenance, London: Bodley Head; reprinted London: Corgi\/Transworld.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1996","abstract":"This paper starts from the assumption that any evaluation of educational software should focus on whether or not, and the extent to which, it maximizes learning. It is particularly concerned with the impact of software on the quality of learning. The paper reviews key texts in the literature on learning, including some which relate directly to software development, and suggests ways in which a range of learning theories can inform the process of software design. The paper sets out to make a contribution to both the design and the evaluation of educational software","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/14333.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/217\/1\/ALT_J_Vol4_No3_1996_Designing%20software%20to%20maximize.pdf","pdfHashValue":"39e3b1be2a1b19b46251992fa89b6b5e0a24c6b2","publisher":"Universit of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:217<\/identifier><datestamp>\n      2011-04-04T09:22:56Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/217\/<\/dc:relation><dc:title>\n        Designing software to maximize learning1<\/dc:title><dc:creator>\n        Somekh, Bridget<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        This paper starts from the assumption that any evaluation of educational software should focus on whether or not, and the extent to which, it maximizes learning. It is particularly concerned with the impact of software on the quality of learning. The paper reviews key texts in the literature on learning, including some which relate directly to software development, and suggests ways in which a range of learning theories can inform the process of software design. The paper sets out to make a contribution to both the design and the evaluation of educational software.<\/dc:description><dc:publisher>\n        Universit of Wales Press<\/dc:publisher><dc:date>\n        1996<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        cc_by_nc_nd<\/dc:rights><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/217\/1\/ALT_J_Vol4_No3_1996_Designing%20software%20to%20maximize.pdf<\/dc:identifier><dc:identifier>\n          Somekh, Bridget  (1996) Designing software to maximize learning1.  Association for Learning Technology Journal, 4 (3).  pp. 4-16.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776960040302<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/217\/","10.1080\/0968776960040302"],"year":1996,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"Designing software to\nmaximize learning1\nBridget Somekh\nScottish Council for Research in Education\nThis paper starts from the assumption that any evaluation of educational software should focus on\nwhether or not, and the extent to which, it maximizes learning. It is particularly concerned with the\nimpact of software on the quality of learning. The paper reviews key texts in the literature on learning,\nincluding some which relate directly to software development, and suggests ways in which a range of\nlearning theories can inform the process of software design. The paper sets out to make a contribution\nto both the design and the evaluation of educational software.\nIntroduction\nI take it as axiomatic that those involved in developing educational software intend that it\nshould maximize learning. The evaluation of educational software, therefore, needs to\nfocus mainly on this central issue. There are still, however, two ways in which\n'maximization' can be measured: either in terms of the increase in the amount of learning,\nor in terms of the increase in the quality of learning. In either case, an important\ncontributory factor in the evaluation of educational software is the amount of take-up in\nterms of purchase and use. The crude indicator of BSH (number of Bums on Seats for\nnumber of Hours) is of some value, because if software is not used it cannot have any\nimpact at all on learning. But it is an indicator which should only be used with caution\nbecause badly designed software used frequently presumably does less to maximize\nlearning than well designed software used infrequently.\nI am concerned here with the design of software which maximizes the quality of learning.\nI will also deal briefly with the issue of sensitivity to the context of use, but the wider\nproblem of the take-up and use of software, although important and interesting, is\nbeyond the scope of this paper. The paper is based on a review of key texts in the\nliterature on learning, including some which relate directly to software development. I\nhope it will make some contribution to both the design and the evaluation of educational\nsoftware.\n4\nALT-] Volume 4 Number 3\nLearning theories\nThere is no one recognized right way of thinking about learning. Theories change over\ntime and tend to reflect the attitudes and technologies of the period. The origin of the\nJesuits' emphasis on learning by heart lies in the scarcity of books in medieval times. This\nwas later developed into a concept of 'training the mind' in which the habit of, and\ncapacity for, memorization was seen as a prerequisite for scholarship. Such a theory of\nlearning had direct pay-offs. With so much information literally at the tip of their\ntongues, Jesuit scholars became known for the acuity of their thinking and their\nadministrative acumen, as well as their rigorous approach to matters of faith.\nIn the twentieth century, the main debate has been between those following Skinner, who\nsee learning as 'conditioning' by means of a carefully planned sequence of 'stimuli'\ndesigned to elicit a set of desired 'responses', and those following the ideas of Vygotsky\nand Bruner, who see knowledge as 'a process rather than a product'(Bruner, 1966, p.72),\nconstructed by the learner as a result of experiences, critical reflection upon those\nexperiences, and social interaction (e.g. discussion) (see Prawat, 1991). The debate is\nclearly influenced by new technology which has greatly reduced the need for the\nmemorization of facts, although the need to 'train the mind' continues in the long-\nrunning debate on the need to develop 'transferable skills'. Desforges (1989) rejects the\nconfrontational stance between behaviourists and constructivists and sees a need for two\nkinds of learning. In his view, there are times when we need to learn apparently arbitrary\nfacts (e.g. the sequence of elements in the periodic table), and there are times when we\nneed to learn concepts (e.g. the concept of valence and co-valence in the molecular\nstructures which make up those elements). Although, as in this case, there is often an\ninterconnection between these two kinds of knowledge, the learning process is quite\ndifferent. As Desforges says: 'The latter is knowledge constructed by human intelligence\nin interaction with and adaptation to the environment and unlikely ever to be understood\nunless reconstructed by the learner' (p.20).\nMuch early software of the drill-and-practice kind was designed according to Skinnerian\nprinciples to support the acquisition of apparently arbitrary facts. Underpinning this\nsoftware is the notion that it is of no consequence that the periodic table is not in fact\narbitrary - the simplest way of embedding it as a tool that the learner can use with\nconfidence is to teach it as if it were arbitrary. There is still a great deal of software that\nworks on the basic principle of teaching facts and information as if they were\nunproblematic and then testing the students to see if they can put these facts and\ninformation to use at a fairly simple level to answer a question. It is very much more\ndifficult to devise software which supports 'constructive' learning whereby concepts are\ninternalized by the student and contribute from then onwards to his or her capacity for\nintuitive problem-solving. (It is also much more difficult to assess this kind of learning.)\nIt follows that there are two key issues for software developers:\n1. deciding on the right balance of emphasis between the two kinds of learning (given\nthat one is much easier to achieve than the other - and therefore cheaper);\n2. once this decision is made, devising computer-mediated experiences capable of\nsupporting the second kind (constructive learning of concepts).\n5\nBridget Somekh Designing software to maximize learning\nThe rest of this paper tries to throw light on the second of these issues. Before moving on,\nhowever, it may be useful to explore what is meant by 'constructive' learning in a little\nmore depth. MacDonald and his colleagues (MacDonald et al, 1976) provide some\ninsights from their evaluation of the NDPCAL programme, a large-scale initiative funded\nby the Department of Education and Science in the 1970s. Their five-scale typology of the\nlevels of learning via CAL contains 'operational definitions', as follows:\nKey features of the types of interaction are:\nType A interactions: recognition:\nText-dependent; require matching of superficial features of information presented to\ninformation previously presented; non-productive.\nType B interactions: recall:\nText-dependent; superficial engagement of student with content; reproductive;\ncombinatorial manipulation of syntactical and logical features of text.\nType C interactions: reconstructive understanding or comprehension:\nText-independent but discourse-dependent; involve semantic interaction with content;\nreconstructive; productive; involve comprehension of statements, concepts, or principles.\nType D interactions: global reconstructive or 'intuitive' understanding:\nExperiential learning; discourse-independent; focus on structure of discipline; student as\nmaster of discipline; problem-solving; conservative of discipline.\nType E interactions: constructive understanding:\nStudent 'creates' fields of knowledge; discipline-independent; exploratory; problem-\nfinding; domain-dependent.\nIn terms of computer-software design, MacDonald et al distinguish interactions of Types\nD and E from the lower levels. Type C interactions lie on the borderline between the\nlower levels and higher levels: they represent the lowest level of constructive\nunderstanding.\nIn the case of interactions of Types D and E, more complex opportunities are provided\nfor the student to demonstrate learning, and evaluation of whether or not learning has\noccurred will require a far more complex judgement: the correctness or incorrectness of\nthe response cannot be decided in terms of a simple discrepancy between response and\ntext. Thus, in these two types of interaction, the student demonstrates learning by much\nmore complex acts of meaning production than in Types A, B and C.\nResearch in Artificial Intelligence has focused on the attempt to design computer-user\ninteractions at levels D and E. Some progress has been made, but the problems remain\nrather intractable. For one thing, such interactions tend to require that the software has\nthe ability to accept open-ended responses in natural language and respond to them\nappropriately. Some of the most interesting Al software has been developed to have the\ncapacity to learn the user's working style and level of prior knowledge, in order to tailor\nthe interactions to suit better the user's needs. Work of this kind has been incorporated in\nIntelligent Tutoring Systems, but the ability of such systems to promote constructive\nlearning is not always clear, and their production costs are very high.\n6\nAa-j Volume 4 Number 3\nThe MacDonald typology provides a useful monitoring device which a development team\nmight use during the design stage. There are two ways in which software developers can\nfocus their energies on ensuring level C 'constructive' learning interactions, and may be\nable to move towards promoting the higher D and E levels:\n1. Linking on-screen interactions with learning away from the computer.\nBoth in NDPCAL and in more recent software development research (see Harding, 1974;\n1993), one fruitful way of extending CAL interactions to level C and beyond has been by\nlinking them with activities undertaken away from the computer.\n2. Use of simulations (using technological features such as graphical user-interfaces,\nhigh-resolution graphics and hypertext navigation). ,\nMacDonald et al point out that simulations have the potential to stimulate a student's\nthinking at level D by 'presentpng] the student with inferences from his [sic] responses,\nand thus creating] cognitive disequilibrium' (p. 12).\nMind maps or mental schema\nThe theory behind constructivist learning is that each individual develops mental schema\nor 'mind maps' which serve to inform future thinking or action. These schema are\nfundamental to the way we understand all experience. As babies we begin to build up\nschema which enable us to distinguish a human face from its background. More abstract\nconceptualization involves the same process of constructing a meaning and pattern from\na jumble of sensory information. These schema then enable us to function with\nconfidence in a complex environment. As Bruner puts it (1966, p.2): 'Much of perception\ninvolves going beyond the information given through reliance on a model of the world or\nevents that makes possible interpolation, extrapolation, and prediction.' Effective\nlearning depends on the creation of new schema, or on existing schema being revised,\nextended or reconstructed.\nThe mind-maps theory has two implications for software development:\n1. In order to learn, individuals need to be able to build on their existing schema.\nThis points to a need for individualizing learning. Learners need to exercise control over\ntheir learning so that its pacing and direction are guided by questions arising from their\ndeveloping understanding. At a superficial level this can be achieved by giving the user\ncontrol over what to learn and in what order by offering choices. Since icon buttons have\nreplaced the rather cumbersome system of layers of menus, it is now much easier to make\nthis process appear genuinely exploratory and attractive to the user. However, at a deeper\nlevel it is arguable that software cannot address this need unless it contains the ability to\n'model the user' (see above in the short discussion of Artificial Intelligence). Neither the\nlanguage, nor the complexity of the investigation of the concepts, nor assumptions about\nthe learner's prior knowledge, can be adapted to the learner by offering choices in this\nway. A 'pre-test' which will act to select appropriate material for a particular user may be\nthe best way of attempting to address this problem.\n2. In order to learn, individuals need support in constructing new schema.\n7\nBridget SomeWi Designing software to maximize learning\nThis suggests the need for structure underpinning the software design. Navigation is the\ncentrally most important issue in developing software in a hypertext environment\n(Laurillard, 1987). Learners build their mental schema on 'where they go' in the software\nand 'what they do'. Structure is largely a matter of sequencing the presentation of\ninformation or concepts, identifying sections, establishing links between sections and\nsetting up a system for reviewing the structure both as a whole and in parts. A book\nprovides such a structure (more or less well) through its table of contents, divisions into\nchapters, headings and sub-headings, etc. (An indication that we use the structure of text\nin a book to help develop mental schema is that we are often able to visualize the layout\nof a page when wishing to check on information.) In software development, structure is\ncreated for the learner through the approach taken to the key navigation issues of user-\ncontrol and information sequencing.\nPlowman (1992) has identified a problem with interactive multimedia that the learner's\ncontrol over the 'path of disclosure' obscures the underlying structure which the authors\nhave given the material. To some extent, therefore, there is a conflict between the simple\nsolution of giving users choice as a means of individualizing their learning experience as\nappropriate to fit their existing schema, and the need to provide them with sufficient\nstructure to enable them to adapt this as the basis of new schema. In practice, there is a\nneed for a balance: there needs to be structure and choice, but the latter must be restricted\nas far as this is necessary to prevent the former from being unhelpfully obscured.\nAn aid in constructing mind maps is to have advance knowledge of the ground to be\ncovered (what Ausubel and Robinson, 1969, p.145, call 'an advance organizer'). There is\nthen much greater likelihood that the individual can develop meaningful schema which\nlink, where possible, with their existing schema. Students are sometimes given an\n'advanced organizer' in the form of an introductory lecture to a course or a set of learning\nobjectives. In the same way, hypermedia or multimedia software can be used to present\ngraphical overviews to serve as advance organizers.\nHowever, the process of developing schema is never mechanistic. Providing an advance\norganizer, allowed by a series of learning experiences designed to cover each aspect of the\nconceptual field in turn, will not be sufficient. Learning does not proceed incrementally\nalong a linear path of increasing difficulty. Opportunities for revision are important\nbecause it is unreasonable to expect students to remember everything they have learned\non a future occasion. They need to revisit concepts, perhaps many times, until they are\nsecurely laid down in well developed mental schema capable of enabling intuitive\ndecision-making. Bruner (1960, pp. 52-4) addresses this need through his design for a\n'spiral curriculum' in which learners are introduced to a series of concepts, each one in a\nnumber of different ways, over a period of time (specifically through different kinds of\ncontent involving slightly different approaches). This principle may be a relatively easy\none to adopt in software design, although in practice designers usually rely on students\nusing the software many times without variation - and with the risk of monotony.\nAnother aid to developing schema which software can incorporate is a Buzan-style on-\nscreen note-making facility. This allows students to record the web of linkages which\nreflect the meaning they are constructing from using the software. Given the facility\ncontinuously to extend and adapt this note-web, students can record their developing\n8\nALT-J Volume 4 Number 3\nmental schema of the material, with the option of adding hand-written notes to the print-\nout at a later stage. '\nScaffolding\nLearning for Vygotsky and Bruner is essentially a social phenomenon. It depends to a\nconsiderable extent on the ability to use cognitive tools such as language and other\nsymbol systems. In Vygotsky's theory, learners have limits to their current level of\nachievement, beyond which they are unable to go without the interventions of a teacher\nor peer. With the help of such interventions, learners can go beyond these limits into their\n'zone of proximal development' (Vygotsky, 1986, p. 187), and such experiences serve to\nextend their understanding so that next time they may be able to achieve this level of\nunderstanding without such mental and social 'scaffolding'.\nIt is claimed that interactive software can provide a kind of mental scaffolding. At the\nlowest level, it can provide the incentive to continue to work on-task for longer periods\nwithout the intervention of a teacher. This may be little more than the plate-spinning\nphenomenon, whereby the student gets feedback on progress and is set a new task\n(although the mere setting and answering of questions may not achieve even this low-level\neffect because of its dullness).\nAs a result of this recognition of the social nature of learning, many writers place\nconsiderable emphasis on the importance of discussion in facilitating learning. Partly in\nrecognition of this, and partly because shortage of hardware has dictated it, computer use\nin UK schools has become largely a group activity since the advent of the microcomputer\nin the early 1980s. Many university students will therefore be used to this way of working\nwhich does appear to have many advantages. If software is designed for use by students\nwithout peer group support, it is important for development teams to bear in mind that\ninteraction between learner and software must be livelier than it might otherwise need to\nbe, because it is replacing, and not supplementing, learner-teacher or learner-learner\ninteractions.\nSituated learning, simulations and microworlds\nRecently many researchers have placed emphasis on the need for learning to be 'situated'\nto enable the construction of schema (Brown et al, 1989). This theory suggests that much\nlearning is made more difficult because of the context of learning - i.e. ideas have to be\ngrasped through an abstract representation, part of which may be more to do with the\ncontext of learning (e.g. copying notes from the blackboard before the lecturer rubs them\noff) than the context of application. In contrast, when it is situated, the meaning of what\nis being learned is directly supported by the context of learning. An example might be\nlearning physics in a research laboratory.\nSome software provides an element of situated learning because it simulates an authentic\nsituation, or alternatively provides a microworld in which the learner's experience is\nauthentic within the frame of an alternative environment (for an early definition see\nPapert, 1980). Everything in the simulation or microworld is contained in a computer\nmodel which has an integrated set of rules and provides an integrated experience. In that\n9\nBridget Somekh Designing software to maximize learning\nsense the metaphor and content are fused. Sometimes the microworld involves the user in\nlearning the microworld's language (e.g. natural language and syntax which the software\naccepts). Always it involves the user learning the limits of the model. The metaphors\nwhich control content, simulation, interface and programming structure all contribute to\nthe total effect of the microworld.\nNevertheless, there must always be a limit to the authenticity of computer-mediated\nexperience. Computer simulations by their very nature are presented through a computer\ninterface. In terms of the theory of situated learning they may be very unhelpful if they\nnecessitate the user learning too complex a set of rules governing the computer context of\nthe simulation and unrelated to the simulated 'authentic' context.\nOne of the most important features of situated learning is the idea of learning from expert\ncolleagues who model appropriate behaviours and approaches to problems. If software\nhas a strong emphasis on problem-solving and exploration, there is little room for expert\nmodelling. The learner is on his or her own. This can be overcome by including some\nexamples of problem-solution by posing problems and offering the option for a step-by-\nstep solution with explanations, including graphical displays. This has been tried with\nsome success by Harding (1994, p.78). The danger of offering expert models, however, is\nthat the user may learn formulaic responses instead of understanding the concepts.\nAnother important feature of situated learning is that what is learned can be applied\nimmediately in a real situation to solve a problem. Apart from the reservation about the\nintervening computer interface, this is where simulation software can be particularly\nuseful.\nMeta-cognition\nSince 1983, Salamon (1992) has used the construct AIME (Amount of Invested Mental\nEffort), or 'mindfulness', in his work on learning. When writing about the use of\ncomputers to support students' self-study he says:\nWhile the open-endedness of tools is an opportunity for the awakening of mindful engagement\nand opportunity to sustain it, one has already to be mindfully inclined to take these\nopportunities. If young writers would seriously and intentionally attend to the expert-like\nguidance of the Writing Partner, or to the way variables affect each other in the systemic models\nof STELLA, they'd learn quite a bit. But, alas, only the already mindfully inclined, the ones who\nfind thinking a pleasant challenge and who do not avoid the expenditure of mental effort, are the\nones to intentionally expend the effort needed to notice the guidance or the inconsistency in the\nmodel's structure, (p. 13)\nAt the lowest level, mindfulness is dependent upon motivation. But mindfulness is\nessentially a conscious cognitive activity which can be developed by means of critical self-\nreflection on oneself as a learner. For example, it is quite possible for an individual to\nhave established habits of passive learning (acquired from prior training) so that he or she\nis unaware of the need to construct knowledge through interrogating ideas and trying to\ndevelop mental schema. Becoming aware of this is the first step for these individuals in\nbecoming mindful, and therefore more effective, learners. This has led writers like De\nCorte (1990, p.73) to see a role for educational software in 'enhancing the acquisition of\n10\nALT-] Volume 4 Number 3\nmeta-cognitive skills and learning strategies through explication of, and reflection on [the\nlearner's] knowledge (deficiencies and misconceptions versus strengths) as well as on their\nthinking methods and learning activities (powerful versus weak)'.\nIt is fairly easy to build in explicit strategies to enhance meta-cognition. For example, pre-\ntests can include some element of analysis of an individual's learning style which can be\nfed back to the user. Another low-cost solution is to provide an on-screen note-book of\nthe type mentioned above for recording meta-cognitive reflections. This can be very\neffective if the student is subsequently required to use the notes in discussion with other\nstudents or the lecturer.\nMotivation\nMotivation is essential to learning. Bruner (1966) points out that human beings are the\nonly animals which depend on passing learning on from one generation to the next. We\nlearn for a future purpose and not simply as a response to natural curiosity. This\nnecessitates a large element of delayed gratification in learning, so that we cannot depend\non natural curiosity alone to motivate learners. One common strategy for software\ndevelopers is to present the user with a microworld which appeals to the imagination in\nsome way as well as providing a simulated context for a range of human-computer\ninteractions. Now that the technology is becoming more advanced, there is increasing\nscope for microworlds to be delightful and absorbing and, at least initially, to have a\nstrong impact on user-motivation.\nTo move a student from initial motivation to sustained engagement with the task is\ndifficult unless the student has already developed a capacity for sustained engagement.\nSalamon's 'mindfulness', which Bruner calls 'the will to learn', originates for most of us in\na track-record of enjoyable and successful learning experiences. Natural curiosity has in\nthis way been nurtured to produce intrinsic motivation capable of sustaining our interest\nover a long period of delayed gratification. Motivation is heavily dependent on' the\nlearner's prior experience and attitudes. Students are likely to bring with them a range of\nemotional blocks which undermine their confidence, reduce their ability to remain on-\ntask for any length of time, and in this way obstruct their learning (what Pirsig, 1974,\npp.298-306, calls 'internal gumption traps' or 'value traps which block affective\nunderstanding'). Some of these may relate directly to the computer itself as the context of\nlearning (in this sense no computer-mediated learning can ever be 'situated'). Many\nstudents may have had negative experiences of computer use, and others may perceive\nthemselves as non-technology people so that using a computer threatens their own sense\nof self-worth grounded in their self-image (Somekh and Davis, forthcoming). Software\ndevelopers can try to overcome this by designing microworlds which counteract any hard\ntechnological image, but this will never be wholly satisfactory because microworlds carry\nwith them their own social and value sets which are unlikely to be in tune with all users -\nor even whole categories of users.\n'Flow' or cognitive engagement\nOne of the great advantages of books, films, lectures, or any form of presentation which is\nuninterrupted, is that a learner's mindfulness can change gear into an intense level of\nII\nBridget Somekh Designing software to maximize learning\nconcentration known sometimes as 'flow' (Csikszentmihalyi, 1982), and sometimes as\n'cognitive engagement' (Kozma, 1991). In this state, the learner may lose all sense of the\ncontext of learning (time and place), the pace of learning accelerates, and there is greatly\nenhanced motivation which spills over into a sense of excitement and continuing\nreflection after the event. Turkle (1984) gives many examples of how computers can\ninduce this kind of intense concentration. In some of these, it is associated with the\ndevelopment of repetitive psycho-motor skills, employed under time pressure; in others, it\nis associated with the intellectual excitement of high-level cognition and creativity\nresulting from programming in non-linear languages such as Logo. However, computer\nuse can have very different consequences. For example, interactive software is unlikely to\ninduce flow if the learner's thought processes are interrupted too frequently by the need\nto carry out tasks imposed by the computer.\nTranslation (or transformation) between symbol systems\nOne of the main problems in any learning is the need to 'translate' concepts from a\nsymbol system, such as language or numbers or graphical representations\/models\n(Bruner, 1966), into meaningful mental schema. These symbol systems are the basic tools\nof human intelligence - our ability to use them is what differentiates us from other\nanimals. When learners are asked to imbibe concepts from a textual explanation, they\nhave to make a translation of that explanation in terms of their own experience, based on\nclues provided by the writer. The writer has attempted to encode a concept in a symbol\nsystem (text), and now the reader attempts to decode it and link it to his or her existing\nmental schema. Content screens can make heavy demands of this kind on the learner.\nOne of the most difficult problems facing software designers is how to get across\nsufficient content to enable learners to engage in problem-solving (Dublin, 1988). Until\ncomparatively recently there has been an assumption, originating presumably in the poor\nquality of VDUs, that the computer is not good at handling large quantities of text. But\nconcepts which are linguistically constructed may be extremely difficult to impart in any\nother form. A related problem, which I have already touched on, is how to get across\nsufficient information about a microworld or the rules of a simulation to enable the\nlearner to function intuitively within them. Often such information is given in text form in\na set of preliminary screens. With high-quality VDUs and graphical environments, and\nthe sudden increase in screen-displayed texts in CD-ROM and multimedia, it is no longer\nnecessarily true that computer software should be designed with a minimum of text.\nHowever, text does still pose a problem if it is to be incorporated on the screen alongside\ngraphics, or if the software is designed for use by a group - which will necessitate a larger\nfont size. The need to reduce the number of words on the screen can lead to truncated text\nwhich does not present the concepts adequately. If the main focus of the software is to be\nsome form of investigation or the exploration of a model, and if the concepts can only be\ndelivered by means of considerable quantities of textual explanation, it may be best to\nproduce printed materials to go alongside the software.\nThe more interactive the software becomes, the more it is possible to allow learners to\nlearn by exploring models, or building models, rather than by digesting text. However,\ndesigning software that supports this kind of learning requires a high level of creativity\n12\nALT-J Volume 4 Number 3\nand painstaking planning. Moreover, there are great differences between individual\nlearners when it comes to the relative difficulty they experience in translating from\ndifferent symbol systems. Some learners will find it easier to translate from text to their\nmental schema than from graphical models to their mental schema.\nThe problem of such translation for learners also includes 'transforming' meaning from\none symbol system to another. A typical transformation problem for learners is the\ninterpretation of graphs (Mokros and Tinker, 1987; Smith, 1993). These are usually\npresented alongside a textual explanation. A graphical representation can communicate a\nrange of detailed information in easily assimilable form, but its interpretation requires a\nsound understanding of the underlying concepts, e.g. of the likely relationships between\nthe different kinds of information displayed in the graph. There is a marked tendency for\nteachers (and the producers of textbooks and educational materials) greatly to\nunderestimate the difficulties that novices have with the interpretation of graphs. It is\nassumed that graphical representation will clarify and explain textual representation.\nOften it simply overlays it with a second level of difficulty. A common error, which\nindicates the problem of transformation, is the novice's tendency to 'read' the graph as a\npicture (i.e. to see points plotted at the top of the page as more likely than those at the\nbottom of the page to signal a large quantity of something).\nMany writers are agreed that the computer offers particular advantages in being able to\ndisplay graphs dynamically so that the learner can either explore the relationships\nbetween the variables by experimentation, or be provided with a dynamic model of the\ntransformation between text and graph (Kozma, 1991); i.e. the user changes the text and\nthe computer transforms this into changes in the graph. Software can also be used to\n'proceduralize' understanding by demonstrating how a problem can be investigated (and\nsolved?) step by step, according to clearly defined rules (Kozma, 1991).\nFeedback and assessment\nThere are always considerable problems in assessing learning adequately because\ncognitive processes are private, hidden and unique to the individual. These difficulties are\ncompounded by the need to integrate assessment within a software package, because this\nusually precludes the possibility of the student giving natural-language responses to\nquestions. Yet, some element of feed-back or self-assessment is essential to the learning\nprocess, and both students and tutors tend to expect computers to provide assessment\nwhich records the student's progress and obviates the need to assess the work in some\nother way. >\nThe main problem of computer-mediated assessment is that it is difficult to prevent\ntesting from emphasizing the lowest A and B levels of the MacDonald typology of\ninteractions - recognition and recall - at the expense of even the C level of reconstructive\nunderstanding, simply because the former are so much easier to test than the latter. (An\nadditional problem is that as soon as testing enters the realm of understanding of\nconcepts there is likely to be difference of opinion among lecturers as to the 'correct'\nanswer.) The need to provide a formal assessment option or facility for tracking students'\nprogress for the benefit of providing lecturers with a record at a later stage has the danger\nof placing too high a constraint on the educational design of the software. It necessitates\n13\nBridget Somekh Designing software to maximize learning\nthe need for computer assessment of higher levels of learning. Such assessment demands\nconsiderable sophistication in software design and programming.\nDeciding against formal assessment is risky, however, given the deep acculturation of\nboth university students and lecturers into study as an almost wholly assessment-\norientated activity. There is the risk that students will view the software as an optional\nextra if it is not seen as-an essential part of the 'exchange of effort for grades' (Doyle,\n1979) which keeps them motivated and on-task. There is also the risk that lecturers will\nnot recommend the software to students strongly because they know they will have no\nway of checking whether or not students have used it, and will therefore not be able to\nrely on the software as a substitute for any of their existing teaching. If BSH is to be the\nmain performance indicator for software developers, project teams need to adopt a\nstrategy to safeguard against this. One possibility is to produce supplementary, paper-\nbased assessment materials to be used after completion of the modules.\nA note on the context of use\nTeaching and learning in both schools and universities are highly routinized activities.\nLecturers and students expect to behave in certain ways (e.g. working at networked\nterminals in a computer room), and the structures of institutions are generally supportive\nof these routines (e.g. money is likely to be allocated to pay specialists to maintain the\ncomputer network and to purchase software by licence so that it can run on the network\nrather than on individual laptops). Software which is designed to suit a different\ninstitutional context (e.g. demanding a more sophisticated network, or intended to be\nused on stand-alone computers as a more integral part of subject study in the science\nlaboratory) poses challenges to these routine behaviours and institutional structures, and\nas a result it is necessary to provide very explicit guidance for users, and give considerable\nprior warning before asking individuals to undertake trialling. To guard against these\nkinds of problem, courseware should probably be designed so that it can be used in more\nthan one kind of learning context.\nNote\n1 A version of this paper was presented at the conference of the Association for Learning\nTechnology (ALT-C 94), University of Hull, September 1994.\nReferences\nAusubel, D. P. and Robinson, F. G. (1969), School Learning: An Introduction to\nEducational Psychology, London and New York: Holt, Rinehart and Winston.\nBrown, J. S., Collins, A. and Duguid, P. (1989), 'Situated cognition and the culture of\nlearning', Educational Researcher, January-February, 32-42.\nBruner, J. S. (1960), The Process of Education, Cambridge MA: Harvard University Press.\nBruner, J. S. (1966), Towards a Theory of Instruction, Cambridge MA and London: The\nBelknap Press of Harvard University Press.\n14\nALT-] Volume 4 Number 3\nCsikszentmihalyi, M. (1982), 'Towards a psychology of optimal experience', in Wheeler,\nL. (ed.), Review of Personality and Social Psychology, volume 2, Beverley Hills CA: Sage,\npp. 13-36.\nDe Corte, E. (1990), 'Learning with new information technologies in schools: perspectives\nfrom the psychology of learning and instruction', Journal of Computer Assisted Learning,\n6, 69-87.\nDesforges, C. (1989), 'Understanding learning for teaching', Westminster Studies in\nEducation, 12, 17-29.\nDoyle, W. (1979), 'Classroom tasks and student abilities', in Peterson, P. L. and Walberg,\nH. J. (eds.), Research on Teaching: Concepts, Findings and Implications, Berkeley, CA:\nNational Society for the Study of Education, McCutchan, pp. 183-209.\nDublin, M. (1988), 'Individualized instruction on the computer: the meaning behind the\nmyth', Interchange, 19 (2), 15-24.\nHarding, R. D. (1974), 'Computer-aided teaching of applied mathematics', International\nJournal of Mathematical Education in Science and Technology, 5, 447-55.\nHarding, R. D. (1993), 'Computer interactive texts', in Proceedings of the Fourth\nInternational Conference on Technology in Collegiate Mathematics, Reading, MA:\nAddison-Wesley.\nHarding, R. D. (1994). 'Nuffield interactive mathematics courseware'. Computers and\nEducation, 22 (1\/2), 73-82.\nKozma, R. B. (1991), 'Learning with media', Review of Educational Research, 61 (2),\n179-211.\nLaurillard, D. (1987), 'Computers and the emancipation of students: giving control to the\nlearner', Instructional Science, 16, 3-18.\nMacDonald, B. and the UNCAL team members (1976), 'The educational potential of\ncomputer-assisted learning: qualitative evidence about student learning', paper prepared\nby UNCAL, the independent educational evaluation of the NDPCAL, CARE, UEA.\nMokros, J. and Tinker, R. (1987), 'The impact of microcomputer-based labs on children's\nability to interpret graphs', Journal of Research in Science Teaching, 24 (4), 369-83.\nPapert, S. (1980), 'Microworlds: incubators for knowledge', pp. 120-34 in Mindstorms,\nBrighton: The Harvester Press.\nPirsig, R. (1974), Zen and the Art of Motorcycle Maintenance, London: Bodley Head;\nreprinted London: Corgi\/Transworld.\nPlowman, L. (1992), 'An ethnographic approach to analysing navigation and task\nstructure in interactive multimedia: some design issues for group use', in Monk, A.,\nDiaper, D. and Harrison, M. D. (eds.), People and Computers VII: Proceedings of HCI\n92, Cambridge: CUP.\nPrawat, R. S. (1991), 'The value of ideas: the immersion approach to the development of\nthinking', Educational Researcher, 20 (2), 3-10.\n15\nBridget Sometti Designing software to maximize learning\nSalamon, G. (1992), 'Computer's first decade: Golem, Camelot, or the Promised Land?',\ninvited address to Division C, AERA Conference, San Francisco, April 1992.\nSmith, H. (1993), The Use of Computerized Databases in Critical Inquiry by Pupils Aged 8\nto 11 Years, D. Phil, thesis, University of Sussex.\nSomekh, B. (1989), 'The human interface: hidden issues in computer-mediated\ncommunication affecting use in schools', in Mason, R. and Kaye, A. (eds.), Mindweave,\nOxford: Pergamon Press, pp. 242-6; reprinted in Boyd-Barrett, O. and Scanlon, E.,\nComputers and Learning, Addison-Wesley in association with the Open University, 1991.\nSomekh, B. and Davis, N. (forthcoming), 'Getting teachers started with IT and\ntransferable skills', in Somekh, B. and Davis, N. (eds.) (forthcoming - 1997), Using IT\nEffectively in Teaching and Learning: Studies in Pre-service and In-service Teacher\nEducation, London, New York and Toronto: Routledge.\nTurkle, S. (1984), The Second Self: Computers and the Human Spirit, London, Toronto\nand New York: Granada.\nVygotsky, L. (1986), Thought and Language, Cambridge MA: MIT Press.\n16\n"}