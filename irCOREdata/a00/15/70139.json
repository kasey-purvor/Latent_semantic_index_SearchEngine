{"doi":"10.1145\/1226969.1226989","coreId":"70139","oai":"oai:eprints.lancs.ac.uk:13035","identifiers":["oai:eprints.lancs.ac.uk:13035","10.1145\/1226969.1226989"],"title":"VoodooFlash: authoring across physical and digital form","authors":["Spiessl, Wolfgang","Villar, Nicolas","Gellersen, Hans","Schmidt, Albrecht"],"enrichments":{"references":[{"id":16329743,"title":"Developing Information Appliance Design Tools for Designers.","authors":[],"date":"2003","doi":"10.1007\/s00779-003-0227-x","raw":"Gill, S. Developing Information Appliance Design Tools for Designers. Personal and Ubiquitous Computing, Vol. 7, Springer-Verlag 2003","cites":null},{"id":16329754,"title":"Interaction design prototyping of communicator devices: towards meeting the hardwaresoftware challenge. interactions 9,","authors":[],"date":"2002","doi":"10.1145\/581951.581952","raw":"Pering,  C.  2002.  Interaction  design  prototyping  of communicator  devices:  towards  meeting  the  hardwaresoftware challenge. interactions 9, 6 (Nov. 2002), 36-46.","cites":null},{"id":16329745,"title":"Phidgets: easy development of physical interfaces through physical widgets.","authors":[],"date":"2001","doi":"10.1145\/502348.502388","raw":"Greenberg,  S.  and  Fitchett,  C..  Phidgets:  easy development  of  physical  interfaces  through  physical widgets. Proc. UIST \u201901, ACM Press (2001), 209\u2013218.","cites":null},{"id":16329751,"title":"Rapid Construction of Functioning Physical Interfaces from Cardboard, Thumbtacks, Tin Foil and Masking Tape.","authors":[],"date":null,"doi":"10.1145\/1166253.1166299","raw":"Hudson,  S.  and  Mankoff,  J.  Rapid  Construction  of Functioning  Physical  Interfaces  from  Cardboard, Thumbtacks,  Tin  Foil  and  Masking  Tape.  Proc.  UIST 2006, ACM Press, pp. 289-298.","cites":null},{"id":16329748,"title":"Reflective Physical Prototyping through Integrated Design, Test and Analysis.","authors":[],"date":null,"doi":"10.1145\/1166253.1166300","raw":"Hartmann, B., Klemmer, S., Bernstein, Abdulla, L., Burr, B., Robinson-Mosher, A. and Gee, J. Reflective Physical Prototyping  through  Integrated  Design,  Test  and Analysis. Proc. UIST 2006, ACM Press, pp. 299-308.","cites":null},{"id":16329757,"title":"The VoodooIO Gaming Kit: A real-time adaptable gaming controller.","authors":[],"date":"2006","doi":"10.1145\/1178823.1178825","raw":"Villar, N., Gilleade, K.M., Ramduny-Ellis, D., Gellersen, H.  The  VoodooIO  Gaming  Kit:  A  real-time  adaptable gaming  controller.  Prof.  ACM  ACE  2006  (Advances  in Computer  Entrertainment  Technology),  Hollywood, USA, June 2006, ACM Press. Figure 5: Participants in the the Delft workshop explored appropriation of the physical components provided by VoodooFlash.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2007","abstract":"Design tools that integrate hardware and software components facilitate product design work across aspects of physical form and user interaction, but at the cost of requiring designers to work with other than their accustomed programming tools. In this paper we introduce VoodooFlash, a tool designed to build on the widespread use of Flash while facilitating design work across physical and digital components. VoodooFlash extends the existing practice of authoring interactive applications in terms of arranging components on a virtual stage, and provides a physical stage on which controls can be arranged, linked to software components, and appropriated with other physical design materials","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/70139.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/13035\/1\/2007%2DvoodooIO.pdf","pdfHashValue":"2be14daf5355b033bcbe4d7769492defda84ef1a","publisher":"ACM","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:13035<\/identifier><datestamp>\n      2018-01-24T02:08:47Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        VoodooFlash: authoring across physical and digital form<\/dc:title><dc:creator>\n        Spiessl, Wolfgang<\/dc:creator><dc:creator>\n        Villar, Nicolas<\/dc:creator><dc:creator>\n        Gellersen, Hans<\/dc:creator><dc:creator>\n        Schmidt, Albrecht<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        Design tools that integrate hardware and software components facilitate product design work across aspects of physical form and user interaction, but at the cost of requiring designers to work with other than their accustomed programming tools. In this paper we introduce VoodooFlash, a tool designed to build on the widespread use of Flash while facilitating design work across physical and digital components. VoodooFlash extends the existing practice of authoring interactive applications in terms of arranging components on a virtual stage, and provides a physical stage on which controls can be arranged, linked to software components, and appropriated with other physical design materials.<\/dc:description><dc:publisher>\n        ACM<\/dc:publisher><dc:date>\n        2007<\/dc:date><dc:type>\n        Contribution in Book\/Report\/Proceedings<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/eprints.lancs.ac.uk\/13035\/1\/2007%2DvoodooIO.pdf<\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1145\/1226969.1226989<\/dc:relation><dc:identifier>\n        Spiessl, Wolfgang and Villar, Nicolas and Gellersen, Hans and Schmidt, Albrecht (2007) VoodooFlash: authoring across physical and digital form. In: TEI '07: Proceedings of the 1st international conference on Tangible and embedded interaction. ACM, pp. 97-100.<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/13035\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1145\/1226969.1226989","http:\/\/eprints.lancs.ac.uk\/13035\/"],"year":2007,"topics":["QA75 Electronic computers. Computer science"],"subject":["Contribution in Book\/Report\/Proceedings","NonPeerReviewed"],"fullText":"  1 \nVoodooFlash: Authoring across Physical and Digital Form \nFirst Author Name (Blank if Blind Review) \nAffiliation (Blank if Blind Review) \nAddress  (Blank if Blind Review) \ne-mail address  (Blank if Blind Review) \nSecond Author Name  (Blank if Blind Review) \nAffiliation  (Blank if Blind Review) \nAddress  (Blank if Blind Review) \ne-mail address  (Blank if Blind Review) \n \nABSTRACT \nDesign tools that integrate hardware and software components \nfacilitate product design work across aspects of physical \nform and user interaction, but at the cost of requiring designers \nto work with other than their accustomed programming tools. \nIn this paper we introduce VoodooFlash, a tool designed to \nbuild on the widespread use of Flash while facilitating \ndesign work across physical and digital components. \nVoodooFlash extends the existing practice of authoring \ninteractive applications in terms of arranging components \non a virtual stage, and provides a physical stage on which \ncontrols can be arranged, linked to software components, \nand appropriated with other physical design materials. \nAuthor Keywords \nProduct design, Physical interfaces, Authoring tools, Flash \nINTRODUCTION \nProduct design processes are fast and fluid. Ideas are \nrapidly made tangible using paper and foam to create low-\nfidelity prototypes that are iteratively refined. But for \ninteractive products, the design of behaviour and user \ninteraction usually remains decoupled from the \u2018physical \ndesign\u2019 process, and is developed on desktop screens with \n\u2018flat\u2019 representations of the product and tools such as \nAdobe Flash to develop the interaction. Various tools have \nbeen emerging to allow designers to better couple physical \ndesign and interaction design, including techniques for \nhooking up 3D product models with software simulations \nvia keyboard emulation [1,5], physical interface toolkits [2], \nand complete design environments that cover hardware and \nsoftware aspects [3]. In contrast to these, we present an \napproach that integrates physical prototyping with Flash, a \npredominantly used environment in design practice. \nOur design tool, VoodooFlash, is based on the Flash \nconcept of a stage on which interactive components are \narranged in the process of designing an interface. Alongside \nthe graphical stage in Flash, we provide a physical stage on \nwhich designers can arrange controls, such as buttons, \nrotary knobs and sliders. The graphical and physical stage \nare closely coupled, with physical controls represented by \nvirtual counterparts on the Flash stage, and with Flash \nprogrammed output visually overlaid on the physical stage. \nFigure 1 shows the two stages side by side for design of a \nmap navigation interface. The physical stage serves as an \narena in which designers can work with paper, foam and \nother materials around the controls, and the graphical stage \nprovides the environment in which controls can be \nassociated with functionality and interactive behaviour. The \ntwo stages are kept tightly synchronized, to allow dynamics \nsuch as rapid change of the behaviour of a control (affected \non the graphical stage) and immediate testing by \nmanipulating the respective control (on the physical stage). \nWe have implemented our tool by integrating Flash with \nVoodooIO, a physical interface system that supports rapid \nand dynamic arrangement of controls on interactive \nsubstrate material [6]. The VoodooIO system is used for \nprovision of the physical stage in our tool, and \ncommunicates with Flash via a small set of events to signal \nplacement, manipulation or removal of physical controls. \nThe VoodooFlash tool has been evaluated in design \nsessions with Flash experts and with a group of industrial \ndesigners. After brief discussion of related work, and of the \nintegration of Flash with VoodooIO, we report use \nexperience and feedback from these studies.  \n \nFigure 1. VoodooFlash provides a physical stage for interface prototyping(right) alongside the Adobe Flash\u2019s virtual stage (left). \n  \nBACKGROUND \/ RELATED WORK \nDesigners have responded to the increased embedding of \ncomputing in products with techniques for coupling hard \nand soft representations of a product in the design process. \nThe Buck method is based on tethering a functional product \nmodel to a PC for user testing of physical controls in \nconjunction with interface software [5], and the IE system \nuses micro-switches embedded in foam-core models and \nkeyboard emulation to facilitate a physical-interactive \nexperience within hours of an initial design sketch [1]. The \nsame principle, in more rudimentary form and focussed on \ncardboard prototypes, has been adopted in the BOXES \nsystem [4]. In common with these approaches, our tool \nfacilitates linkage between physical model and software \nparts of a design, but on the physical side with a richer set \nof controls (beyond switches and touch sensors), and on the \nsoftware side focused on extension of a design environment \nalready in widespread use in design practice. \nA variety of toolkits and design environments have \nemerged for development of physical interactive systems. \nPhidgets, for instance, provide physical interface building \nblocks analogous to widgets in graphical user interfaces [2]. \nThe system was initially targeted at making hardware more \naccessible by GUI programmers but also provides a Flash \nAPI. VoodooFlash likewise supports Flash development of \nthe behaviour of physical controls but provides a much \ntighter integration by giving physical controls an explicit \nrepresentation as Flash components. \nThe representation of physical devices within the design \nenvironment is a feature our tool shares with d.tools [3]. \nThe d.tools system provides an integrated design \nenvironment that supports \u2018plug and draw\u2019 integration of \nphysical devices and statechart-based editing of interactive \nbehaviour. However while the system is more open-ended \nin terms of hardware that can be integrated it does not \nprovide support for existing authoring environments. \nSpecifically the lack of support for Flash developers has \nbeen reported as a distinct shortcoming [3]. \nThe VoodooIO system, on which our Flash extension is \nbased, is similar to Phidgets in providing a range of \nphysical controls but in addition emphasizes malleability of \nphysical interfaces [6]. VoodooIO does this by providing a \nsubstrate material on which controls can be dynamically \nadded, arranged, manipulated and removed. This substrate \nmaterial effectively serves as a network bus to which \ncontrols can be connected effortlessly, wirelessly and faster \nthan via a standard USB connection (faster both in terms of \nuser interaction and network discovery). \nINTEGRATION OF FLASH AND VOODOOIO \nThe VoodooIO system is available as a TCP service to \nwhich clients can connect to set properties of physical \ncontrols and to monitor interaction (i.e. adding, \nmanipulation, removal of a controls on a substrate). For \nintegration of the system in Flash, we have built a \nconnection manager and event dispatcher that, transparently \nfor the user, handle communication, parsing and event \ndispatching between Flash and VoodooIO.  \nFrom the user\u2019s perspective, VoodooIO is integrated in the \nform of reusable Flash components. These include:  \n\u2022 a connection component through which a VoodooIO \nservice can be selected (connections to multiple services \nare possible, facilitating programming of distributed \nphysical interfaces), \n\u2022 a component each for the available VoodooIO control \ntypes (each with predefined event handlers for the three \ncore VoodooIO events: added, manipulated, removed), \n\u2022 a filter component that allows filtering of events (for \nexample to filter events from a particular service if \nmultiple connections are made). \nUsers interact with these components as they do with any \nother Flash component, using the standard mechanisms for \ninstantiation of a component, arrangement on or off the \nstage, and setting of properties and parameters through \ngraphically inspectable panels (cf. Figure 2).  \nPhysical controls and corresponding components can be \nbrought onto their respective stages independently of each \nother, in no prescribed order. Associations can at any time \nbe made and changed, either by using the unique ID that \neach VoodooIO control has built-in, or by using a name that \nmay be pre-programmed for a control, or interactively \nassigned. \nUSE EXPERIENCE \nWe conducted two studies for evaluation of VoodooFlash \nwith external users, one in Munich with two Flash experts, \nand one in Delft with a larger group, primarily from an \nacademic industrial design background.  \nMunich experience \nThe study in Munich was organised as a half-day expert \nevaluation to which we invited two professional Flash \ndevelopers from a local start-up. Both participants had a \nbackground in computing and several years of professional \nwork experience in Flash application development. \n \nFigure 2: Physical controls  are integrated as standard \ncomponents in the Flash development environment. \n  3 \nWe started with giving our developer-users a 15-minute \nintroduction to the VoodooFlash environment, using an \nexample design case. They were then given the task to \ndesign a user interface for an Internet radio, with a design \nbrief describing the requested functionality (selection of \npreset stations grouped by categories, etc.), the available \nresources (a set of buttons, knobs, sliders, etc.) and the \ndesign focus (functional interface design, abstracting from \nissues such as data formats and storage). Our two users \nwere given two hours to jointly work on their task. This was \nfollowed by an interactive session, in which they explained \ntheir design and were challenged to carry out a change in \nthe interface on-the-fly (simulating change requests \ncustomers might have in a design session). Finally, we \ninvited and collected feedback on the design experience. \nFigure 3 shows a series of photos taken during the design \nsession, and indicates, from left to right, how the two \ndevelopers progressed in general with their task. Initially \nthey sketched a crude design on paper and then laid the \ninterface out physically with VoodooIO controls. They then \nswitched their attention to design on the Flash stage, \ninstantiating, linking and arranging the corresponding \nvirtual controls and associating them with functionality \nprogrammed in ActionScript 2.0. At a later stage, changes \nto the interface configuration were first carried out in the \nFlash environment, and then reflected on the physical stage. \nThroughout the design session, the two developers \ninteracted intensely, in continuous joint reflection over their \ntask (very much exemplifying the reflective prototyping \npractice that Hartmann et al. discuss in [3]). One of the two \ndevelopers tended to keep control over mouse and keyboard \nfor work within Flash, and specifically for ActionScript \nprogramming. His design partner would simultaneously \nwork with the controls on the physical stage, to generate \nlife input to the script as it evolved, and to continuously try \nand test the effect of additions and changes in functionality. \nThe two developers were able to complete their task in the \ngiven time, including iterations for refinement (e.g. fine-\ntuning the response to knob rotation to the specific value \nrange generated by the device). They did not require help \nother than support we had integrated in the tool \nenvironment (documentation of the VoodooIO API), and \nthey were able to completely abstract from VoodooIO \ntechnical detail (e.g., they did not have to understand how \ncontrols are detected and networked, and at some point \nduring the session one of our users suggested to his partner \nto \u201cstick the two [knobs] further apart\u201d, suspecting they \nmight interfere with each other when to close together). \nAfter completion of the task, the two developers were \nchallenged to replace a slider they had selected for volume \ncontrol with a rotary knob. This only required them to \nphysically replace the devices, to instantiate, name and bind \na virtual knob, and finally in ActionScript to replace the \nname they had used for the slider with the knob\u2019s name, all \nof which was achieved in less than a minute.  \nIn the final feedback session our developer-users reported \nthat working with VoodooFlash was \u201cidentical in terms of \nprogramming\u201d to routine Flash development, \u201call you had \nto know in addition was the VoodooIO events but there are \nonly four anyway\u201d. They also speculated that development \nwith separate physical input devices was \u201cprobably faster \nbecause you don\u2019t have to go through menus [to trigger \nactions]\u201d, and also because mouse and keyboard focus \nalways remained on the programming task, while the \nVoodooIO extension served for testing. The users also \nnoted the fun factor of the system, and of being able to \nimmediately see the effect of what you do.  \nFinally we prompted our developer-users to suggest \nimprovements to our tool. Among others this resulted in \nconsideration of how displays could be integrated with the \nphysical stage instead of projection. This led to the idea of \ncut-outs in the physical stage to insert a display or to look \nthrough to a display underneath. As the VoodooIO material \ncan be cut too any shape without comprising its \nfunctionality, it was easy to try this out (cf. Figure 4). \n \nFigure 3: Participants in our study at Munich initially moved from paper design and physical interface layout to work within Flash \n(images on the left),  and at later points introduced first in Flash and to then reflect and test them on the physical stage (right). \n \nFigure 4. A cut-out in the physical stage for a display area \n  \nDelft experience \nThe study in Delft was organized as a workshop with an \ninterdisciplinary project team of about 15, primarily \ncomposed of academic staff and students from industrial \ndesign departments, with some but not expert knowledge of \nFlash. The team was given a 30 minute introductory \npresentation of our system, and then split into a \u2018red\u2019 and a \n\u2018blue\u2019 group, both given the task to develop a version of the \nclassic Etch-a-Sketch toy for which they were given 2 \nknobs, 2 sliders and 2 buttons as resource. The groups were \nto first develop their own version of Etch-a-Sketch in order \nto sketch a trace on a projected display with separate \ncontrols for X- and Y-axis of the cursor, and invited to then \nmore freely experiment with the system, and to try and \ninterfere with each others design (facilitated by exposing \nVoodooFlash events over a shared network). The workshop \nwas concluded with a general feedback session. \nIn contrast to our experience in Munich, the groups \nstruggled more with their initial task, as the participants \nwere not as proficient in using ActionScript. The \u2018blue\u2019 \ngroup though quickly got into a more explorative mode, \nmapping controls in intricate ways to functions such as \nchanging line thickness for etching, so to confuse the \u2018red\u2019 \ngroup as to how their Etch-a-Sketch version worked. As \nprogramming in ActionScript was taken over by 1-2 \nindividuals in each group, others began to explore how the \nsmall set of controls they were given could be physically \nappropriated. Figure 5 shows some examples resulting from \nthis, from left to right:  \n\u2022 A rotary knob \u2018dressed up\u2019 to modify look and feel. \n\u2022 A slider customized with rubber-band to be self-centering \nand usable for rate control input (as opposed to absolute \ncontrol). \n\u2022 Pen and paper used on the physical stage to label and \ndecorate the physical interface. \n\u2022 A \u2018voodoo doll\u2019 constructed around a strip of VoodooIO \nsubstrate, two sliders and a button, for remote controlling \n(and hi-jacking) the visual display of the other group.  \nIn the feedback session, participants welcomed the \ncombination of physical prototyping with programming in \nFlash, as Flash had been adopted as the first language for \ndesign student education in two of the Universities \nrepresented in the workshop. Apart from this, feedback was \nmore concerned with the physical sub-system of the \nVoodooFlash tool. Most workshop participants had \nexperience with using Phidgets in product design classes, \nand in comparison saw in particular the wire-free assembly \nof VoodooIO devices as a significant advantage. Their \nother concern was ease of physical appropriation, and for \nexample how more specialised sensors and transducers \ncould be made to work with VoodooFlash. \nCONCLUSION \nVoodooFlash achieves a very seamless extension of an \nexisting and widely used authoring environment for work \nacross physical and interaction aspects in product design \nand prototyping. The two design exercises with external \nusers reported in this paper indicate a very good fit of our \ntool with existing design practices. On the interaction \ndesign side, the tool extends the widely used Flash \nauthoring environment in a manner that is intuitive and \neffective in hiding technical detail of integrating a physical \ninterface system. And on the physical design side, the \nphysical stage proves to be effective in supporting fast and \nfluid assembly of controls (by virtue of VoodooIO) and in \nfacilitating appropriation with other physical design \nmaterial such as paper, foam, textiles and rubber-band. \nREFERENCES \n1. Gill, S. Developing Information Appliance Design Tools \nfor Designers. Personal and Ubiquitous Computing, Vol. \n7, Springer-Verlag 2003 \n2. Greenberg, S. and Fitchett, C.. Phidgets: easy \ndevelopment of physical interfaces through physical \nwidgets. Proc. UIST \u201901, ACM Press (2001), 209\u2013218. \n3. Hartmann, B., Klemmer, S., Bernstein, Abdulla, L., Burr, \nB., Robinson-Mosher, A. and Gee, J. Reflective Physical \nPrototyping through Integrated Design, Test and \nAnalysis. Proc. UIST 2006, ACM Press, pp. 299-308. \n4. Hudson, S. and Mankoff, J. Rapid Construction of \nFunctioning Physical Interfaces from Cardboard, \nThumbtacks, Tin Foil and Masking Tape. Proc. UIST \n2006, ACM Press, pp. 289-298. \n5. Pering, C. 2002. Interaction design prototyping of \ncommunicator devices: towards meeting the hardware-\nsoftware challenge. interactions 9, 6 (Nov. 2002), 36-46.  \n6.Villar, N., Gilleade, K.M., Ramduny-Ellis, D., Gellersen, \nH. The VoodooIO Gaming Kit: A real-time adaptable \ngaming controller. Prof. ACM ACE 2006 (Advances in \nComputer Entrertainment Technology), Hollywood, \nUSA, June 2006, ACM Press. \n \nFigure 5: Participants in the the Delft workshop explored appropriation of the physical components provided by VoodooFlash. \n"}