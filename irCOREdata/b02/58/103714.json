{"doi":"10.1016\/j.jvlc.2008.01.005","coreId":"103714","oai":"oai:eprints.brighton.ac.uk:2851","identifiers":["oai:eprints.brighton.ac.uk:2851","10.1016\/j.jvlc.2008.01.005"],"title":"The expressiveness of spider diagrams augmented with constants","authors":["Stapleton, Gem","Taylor, John","Thompson, Simon","Howse, John"],"enrichments":{"references":[{"id":1000433,"title":"A constraint diagram reasoning system.","authors":[],"date":"2003","doi":null,"raw":"G. Stapleton, J. Howse, and J. Taylor. A constraint diagram reasoning system. In Proceedings of International Conference on Visual Languages and Computing, pages 263\u2013270. Knowledge Systems Institute, 2003.","cites":null},{"id":995789,"title":"A reading algorithm for constraint diagrams.","authors":[],"date":"2003","doi":"10.1109\/hcc.2003.1260220","raw":"A. Fish, J. Flower, and J. Howse. A reading algorithm for constraint diagrams. In IEEE Symposium on Human Centric Computing Languages and Environments, Auckland, New Zealand, pages 116\u2013168. IEEE, 2003.","cites":null},{"id":998644,"title":"Constraint diagrams: Visualising invariants in object oriented models.","authors":[],"date":"1997","doi":"10.1145\/263700.263756","raw":"S. Kent. Constraint diagrams: Visualising invariants in object oriented models. In Proceedings of OOPSLA97, ACM SIGPLAN Notices, volume 32, pages 327\u2013341, 1997.","cites":null},{"id":995481,"title":"Lettres a une princesse d\u2019allemagne,","authors":[],"date":null,"doi":"10.5962\/bhl.title.16687","raw":"L. Euler. Lettres a une princesse d\u2019allemagne, 1761. vol 2, Letters No. 102-108.","cites":null},{"id":996440,"title":"On diagram tokens and types.","authors":[],"date":"2002","doi":"10.1007\/3-540-46037-3_18","raw":"J. Howse, F. Molina, S.-J. Shin, and J. Taylor. On diagram tokens and types. In Proceedings of Diagrams 2002, pages 76\u201390. Springer-Verlag, April 2002.","cites":null},{"id":1002613,"title":"On the diagrammatic and mechanical representation of propositions and reasonings. The London, Edinburugh and Dublin Philosophical Magazine and","authors":[],"date":null,"doi":"10.1080\/14786448008626877","raw":"J. Venn. On the diagrammatic and mechanical representation of propositions and reasonings. The London, Edinburugh and Dublin Philosophical Magazine and Journal of Science, 9:1\u201318, 1880.","cites":null},{"id":998867,"title":"Reasoning with extended Venn-Peirce diagrammatic systems.","authors":[],"date":"2001","doi":null,"raw":"F. Molina. Reasoning with extended Venn-Peirce diagrammatic systems. PhD thesis, University of Brighton, 2001.","cites":null},{"id":997891,"title":"Reasoning with spider diagrams,","authors":[],"date":"2004","doi":"10.1007\/978-3-0348-0600-8_7","raw":"J. Howse, G. Stapleton, and J. Taylor. Reasoning with spider diagrams, 2004. available from www.cmis.brighton.ac.uk\/research\/vmg.","cites":null},{"id":997128,"title":"Spider diagrams: A diagrammatic reasoning system.","authors":[],"date":"2001","doi":"10.1006\/jvlc.2000.0210","raw":"J. Howse, F. Molina, J. Taylor, S. Kent, and J. Gil. Spider diagrams: A diagrammatic reasoning system. Journal of Visual Languages and Computing, 12(3):299\u2013324, June 2001.","cites":null},{"id":999649,"title":"The Logical Status of Diagrams.","authors":[],"date":"1994","doi":"10.1017\/cbo9780511574696","raw":"S.-J. Shin. The Logical Status of Diagrams. Cambridge University Press, 1994.","cites":null},{"id":1001887,"title":"Using DAG transformations to verify Euler\/Venn homogeneous and Euler\/Venn FOL heterogeneous rules of interence.","authors":[],"date":"2002","doi":"10.1007\/s10270-003-0044-8","raw":"N. Swoboda and G. Allwein. Using DAG transformations to verify Euler\/Venn homogeneous and Euler\/Venn FOL heterogeneous rules of interence. In International Workshop on Graph Transformation and Visual Modeling Techniques, pages 84\u201398, Barcelona, October 2002.","cites":null},{"id":1001139,"title":"What can spider diagrams say?","authors":[],"date":"2004","doi":"10.1007\/978-3-540-25931-2_12","raw":"G. Stapleton, J. Howse, J. Taylor, and S. Thompson. What can spider diagrams say? In Proceedings of Diagrams 2004, pages 112\u2013127. Springer-Verlag, 2004.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2009-02-01","abstract":"Spider diagrams are a visual language for expressing logical statements or constraints. Several sound and complete spider diagram systems have been developed and it has been shown that they are equivalent in expressive power to monadic first order logic with equality. However, these sound and complete spider diagram systems do not contain syntactic elements analogous to constants in first order predicate logic. We extend the spider diagram language to include constant spiders which represent specific individuals. Formal semantics are given for the extended diagram language. We prove that this extended system is equivalent in expressive power to the language of spider diagrams without constants and, hence, equivalent to monadic first order logic with equality.","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.brighton.ac.uk:2851<\/identifier><datestamp>\n      2015-04-20T15:53:35Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D47303030:47313030<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.brighton.ac.uk\/2851\/<\/dc:relation><dc:title>\n        The expressiveness of spider diagrams augmented with constants<\/dc:title><dc:creator>\n        Stapleton, Gem<\/dc:creator><dc:creator>\n        Taylor, John<\/dc:creator><dc:creator>\n        Thompson, Simon<\/dc:creator><dc:creator>\n        Howse, John<\/dc:creator><dc:subject>\n        G100 Mathematics<\/dc:subject><dc:description>\n        Spider diagrams are a visual language for expressing logical statements or constraints. Several sound and complete spider diagram systems have been developed and it has been shown that they are equivalent in expressive power to monadic first order logic with equality. However, these sound and complete spider diagram systems do not contain syntactic elements analogous to constants in first order predicate logic. We extend the spider diagram language to include constant spiders which represent specific individuals. Formal semantics are given for the extended diagram language. We prove that this extended system is equivalent in expressive power to the language of spider diagrams without constants and, hence, equivalent to monadic first order logic with equality..<\/dc:description><dc:publisher>\n        Elsevier<\/dc:publisher><dc:date>\n        2009-02-01<\/dc:date><dc:type>\n        Journal article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        <\/dc:rights><dc:identifier>\n        http:\/\/eprints.brighton.ac.uk\/2851\/1\/VLHCC%20paper.pdf<\/dc:identifier><dc:identifier>\n          Stapleton, Gem, Taylor, John, Thompson, Simon and Howse, John  (2009) The expressiveness of spider diagrams augmented with constants  Journal of Visual Languages and Computing, 20 (1).  pp. 91-98.  ISSN 1045-926X     <\/dc:identifier><dc:relation>\n        http:\/\/www.sciencedirect.com\/science\/article\/pii\/S1045926X08000074<\/dc:relation><dc:relation>\n        10.1016\/j.jvlc.2008.01.005<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.brighton.ac.uk\/2851\/","http:\/\/www.sciencedirect.com\/science\/article\/pii\/S1045926X08000074","10.1016\/j.jvlc.2008.01.005"],"year":2009,"topics":["G100 Mathematics"],"subject":["Journal article","PeerReviewed"],"fullText":"The Expressiveness of Spider Diagrams Augmented with Constants\nGem Stapleton, John Howse and John Taylor\nVisual Modelling Group\nUniversity of Brighton\nBrighton, UK\n{g.e.stapleton,john.howse,john.taylor}@brighton.ac.uk\nSimon Thompson\nUniversity of Kent\nCanterbury, UK\ns.j.thompson@kent.ac.uk\nAbstract\nSpider diagrams are a visual language for expressing\nlogical statements. Spiders represent the existence of ele-\nments and contours denote sets. Several sound and com-\nplete spider diagram systems have been developed and it\nis known that the spider diagram language is equivalent in\nexpressive power to monadic first order logic with equality.\nHowever, these sound and complete spider diagram systems\ndo not contain syntactic elements analogous to constants in\nfirst order predicate logic. We extend the spider diagram\nlanguage to include constant spiders which represent spe-\ncific individuals and give formal semantics for the extended\ndiagram language. We then prove that this extended system\nis equivalent in expressive power to the language of spider\ndiagrams without constants.\n1 Introduction\nEuler diagrams [1] exploit topological properties of en-\nclosure, exclusion and intersection to represent subset, dis-\njoint sets and set intersection respectively. The diagram d1\nin figure 1 is an Euler diagram and expresses that nothing\nis both a mammal and an insect. Venn diagrams [12] are\nsimilar to Euler diagrams. In Venn diagrams, all possible\nintersections between contours must occur and shading is\nused to represent the empty set. The diagram d2 in figure\n1 is a Venn diagram and also expresses that no element is\nboth a mammal and an insect.\nSpider diagrams [5, 7] are based on Euler diagrams. Spi-\nders denote the existence of elements. The spider diagram\nd3 in figure 1 expresses that no element is both a mammal\nand an insect and there are at least two elements in the set\nMammals \u222a Insects. The spider diagram d4 expresses\nthat there are exactly two insects that are not mammals.\nIt is not clear whether spider diagrams provide us with\na mechanism for talking about particular individuals. It\nwould seem, then, useful to introduce a syntactic device\nanalogous to constant symbols in predicate logic. We in-\nM a m m a l s I n s e c t s\nd 1\nM a m m a l s I n s e c t s\nd 2\nM a m m a l s I n s e c t s\nd 4\nM a m m a l s I n s e c t s\nd 3\nFigure 1. Euler, Venn and spider diagrams.\ntroduce constant spiders (corresponding to given spiders in\n[4]) to provide users of the notation with explicit syntax\nwith which to write constraints involving named individu-\nals. This extended language is, perhaps, more useable than\nthe language of spider diagrams. We shall now refer to spi-\nders that represent the existence of elements (as opposed to\nconstants) as existential spiders. At the syntactic level, spi-\nders are trees and, to distinguish the two types of spider,\nwe shall use round nodes for existential spiders and square\nnodes for constant spiders. Moreover, constant spiders will\nalways be labelled.\nIn figure 2, the diagrams d5, d6 and d7 all contain a con-\nstant spider labelledweb. From the conjunction of d5 and d6\nwe can deduce that web is a cat but not a dog, expressed by\nd7 (that is, d7 is a semantic consequence of the conjunction\nof d5 and d6). By contrast, from d8 and d9, which contain\nexistential spiders, we cannot deduce d10.\nWe show that augmenting the spider diagram language\nwith constant spiders does not lead to an increase in ex-\npressiveness. That is, constant spiders are syntactic sugar.\nWe review related work in section 2. In section 3, we give\nthe syntax of spider diagrams with constants. In section\n4 we give formal semantics. In section 5 we show that\nD o g s C a t s\nd 8\nD o g s C a t s\nd 1 0\nM a m m a l s C a t s\nd 9\nD o g s C a t s\nd 5\nD o g s C a t s\nd 7\nM a m m a l s C a t s\nd 6\nw e b w e bw e b\nFigure 2. Spider diagrams with constants.\neach spider diagram with constants is semantically equiv-\nalent to a spider diagram (without constants), thus proving\nthat adding constants does not increase expressiveness. The\nmapping turns each constant spider into a contour contain-\ning a single inhabitant. Clearly introducing constant spi-\nders does not decrease expressiveness and it follows that\nthe language of spider diagrams with constants is equally\nas expressive as the language of spider diagrams (without\nconstants).\n2 Related Work\nSeveral visual languages have emerged that extend Euler\nand Venn diagrams, for example the language Venn-II intro-\nduced by Shin [8]. The diagram d1 in figure 3 is a Venn-II\ndiagram. In addition to what is expressed by the underlying\nVenn diagram, it also expresses, using an \u2297-sequence, the\nset Mammals \u222a Insects is not empty.\nM a m m a l s I n s e c t s M a m m a l s I n s e c t s\nt i m t i m\nd 1 d 2\nFigure 3. Venn-II and Euler\/Venn.\nVenn-II diagrams can express whether a set is empty or\nnot empty. So, the presence of more than one \u2297-sequence\nin a particular region provides no more information than a\nsingle \u2297-sequence in that region. Shin shows that Venn-\nII is equivalent in expressive power to monadic first order\nlogic (i.e. all the predicate symbols are \u2018one place\u2019) and\nshe calls this language L0 [8]. The language L0 is a pure\nmonadic language that does not include equality, constants\nor function symbols.\nIn [11], Swoboda and Allwein develop another visual\nlanguage, called Euler\/Venn, based on Euler diagrams. Eu-\nler\/Venn diagrams are similar to Venn-II diagrams but, in-\nstead of \u2297-sequences, constant sequences are used. An-\nother difference is that Euler\/Venn diagrams have under-\nlying Euler diagrams whereas Venn-II diagrams are more\nrestrictive, only allowing Venn diagrams as underlying di-\nagrams. In figure 3, d2 is an Euler\/Venn diagram and ex-\npresses that no element is both a mammal and an insect and\nthat there is something called \u2018tim\u2019 that is either a mammal\nor an insect. The semantics of constant spiders and constant\nsequences (used in Euler\/Venn diagrams) are different: both\nrepresent particular individuals but, within a diagram, con-\nstant sequences with distinct labels do not necessarily de-\nnote distinct individuals whereas constant spiders with dis-\ntinct labels do denote distinct individuals.\nSwoboda and Allwein give an algorithm that determines\nwhether a given monadic first order formula is \u2018observable\u2019\nfrom a given Euler\/Venn diagram. If the formula is observ-\nable from the diagram then it may contain weaker informa-\ntion than the diagram (i.e. the formula is a consequence of\nthe information contained in the diagram).\nIn [10] we proved that the spider diagram language\n(without constants) is equivalent in expressive power to\nmonadic first order logic predicate logic with equality (or\nESD). The language ESD extends L0 by adding equal-\nity. Within L0 it is not possible to express that a particular\nproperty, P , holds for a unique element but this is possi-\nble within ESD. Thus spider diagrams properly increase\nexpressiveness over Venn-II.\n3 Syntax\nIn diagrammatic systems, we can distinguish two levels\nof syntax: concrete (or token) syntax and abstract (or type)\nsyntax [3]. Concrete syntax captures the physical represen-\ntation of a diagram. Abstract syntax \u2018forgets\u2019 semantically\nunimportant spatial relations between syntactic elements in\na concrete diagram. We include the concrete syntax to aid\nintuition but we work at the abstract level.\n3.1 Informal concrete syntax\nA contour is a simple closed plane curve. Each contour\nis labelled. A boundary rectangle properly contains all\ncontours. The boundary rectangle is not a contour and is not\nlabelled. A basic region is the bounded area of the plane en-\nclosed by a contour or the boundary rectangle. A region is\ndefined recursively as follows: any basic region is a region;\nif r1 and r2 are regions then the union, intersection and dif-\nference of r1 and r2 are regions provided these are non-\nempty. A zone is a region having no other region contained\nwithin it. A region is shaded if each of its component zones\nis shaded. A spider is a tree with nodes (called feet) placed\nin different zones. The connecting edges (called legs) are\nstraight lines. The feet of a spider are either all square or\nall round. A spider with round feet is called an existential\nspider. A spider with square feet is called constant spider.\nEach constant spider is labelled. A spider touches a zone if\none of its feet appears in that zone. A spider is said to in-\nhabit the region which is the union of the zones it touches.\nThis union is called the habitat of the spider.\nA concrete unitary spider diagram with constants is a\nsingle boundary rectangle together with a finite collection of\ncontours, shading and spiders. No two contours and spiders\nin the same unitary diagram can have the same label. A\nconcrete unitary spider diagram with constants that does not\ncontain any constant spiders is called a concrete unitary\nspider diagram (without constants).\nExample 3.1 The spider diagram (without constants) d4 in\nfigure 1 has two contours and four zones. The shaded zone\ncontains two spiders, each with one foot. In figure 2, the\ndiagram d5 is a unitary spider diagram with constants.\n3.2 Formal abstract syntax\nThe labels used in our diagrams are chosen from a count-\nably infinite set, L. A zone, at the concrete level, can be\ndescribed by the set of labels of the contours that include\nit. When we reason with a spider diagram, its contour label\nset may change, so we will define an abstract zone to be a\npair of finite sets, (a, b). The set a contains the labels of\nthe contours that include (a, b) whereas b is the set of labels\nof the contours that do not include (a, b). So, in a unitary\ndiagram, a and b form a partition of the contour label set.\nWe define Z and R = PZ to be the sets of all zones and\nregions respectively.\nNow we consider how we represent existential spiders at\nthe abstract level. We could specify any finite set to be a col-\nlection of existential spiders, and map each of these spiders\nto a region in the diagram (the \u2018habitat mapping\u2019). For any\ngiven concrete diagram, there would be many choices for\nan abstract set of existential spiders. To describe uniquely\nthe existential spiders in a concrete diagram, it is sufficient\nto say how many existential spiders there are in each region.\nIn order to provide a unique abstraction from a concrete di-\nagram we will use a bag of regions, called existential spider\ndescriptors, rather than an arbitrary set of spiders along with\na habitat mapping.\nWe use labels from L to label constant spiders as well as\ncontours. To capture the information in a concrete diagram,\nwe must specify which constant spider labels appear and,\nfor each spider label, the habitat of the spider with that label.\nSo, at the abstract level, a unitary diagram will contain a\nfinite set of constant spider labels together with a habitat\nfunction, mapping each constant spider label to a region in\nthe diagram. The definition of an abstract unitary spider\ndiagram with constants extends that given in [10] for unitary\nspider diagrams (without constants).\nWe will assume that L = {L1, L2, ..., Ln, ...}. We also\nassume, without loss of generality, the sets L, Z and R are\nall pairwise disjoint.\nDefinition 3.1 An abstract unitary spider diagram\nwith constants, d, (with labels in L) is a tuple\n\u3008L,Z, Z\u2217, ESD,CS, \u03b7\u3009 whose components are defined as\nfollows.\n1. L = L(d) \u2282 L is a finite set of contour labels.\n2. Z = Z(d) \u2286 {(a, L \u2212 a) : a \u2286 L} is a set of zones\nsuch that\n(i) for each label l \u2208 L there is a zone (a, L\u2212 a) \u2208\nZ(d) such that l \u2208 a and\n(ii) the zone (\u2205, L) is in Z(d).\n3. Z\u2217 = Z\u2217(d) \u2286 Z is a set of shaded zones.\n4. ESD = ESD(d) \u2282 Z+ \u00d7 (PZ \u2212 {\u2205}) is a fi-\nnite set of existential spider descriptors such that\n\u2200(n1, r1), (n2, r2) \u2208 ESD \u2022\nr1 = r2 \u21d2 n1 = n2. If (n, r) \u2208 ESD we say there\nare n existential spiders with habitat r.\n5. CS = CS(d) \u2282 L is a finite set of constant spider\nlabels such that CS \u2229 L = \u2205.\n6. \u03b7 = \u03b7d is a function, \u03b7d : CS \u2192 PZ \u2212 {\u2205}, mapping\neach constant spider label to a region in d. If \u03b7d(si) =\nr we say si has habitat r in d.\nLet d = \u3008L,Z, Z\u2217, ESD,CS, \u03b7\u3009 be a diagram. If CS = \u2205\nthen d is a unitary spider diagram (without constants).\nSome remarks about the above definition are in order. Every\ncontour in a concrete diagram contains at least one zone and\nthis is captured by condition 2 (i). In any concrete diagram,\nthe zone inside the boundary rectangle but outside all the\ncontours is present and this is captured by condition 2 (ii).\nd 2\nL 1 L 2\nd 1\nL 3 L 4\nL 1 L 2L 3\nFigure 4. Spider diagrams with constants.\nExample 3.2 The diagram d1 in figure 4 has the following\nabstract description:\n1. contour label set: {L1, L2},\n2. zone set: {(\u2205, {L1, L2}), ({L1}, {L2}), ({L2}, {L1}),\n({L1, L2}, \u2205)},\n3. shaded zone set: {({L2}, {L1})},\n4. existential spider descriptors: {(1, {({L2}, {L1})}),\n(1, {({L1}, {L2}), ({L2}, {L1})})},\n5. constant spider label set: {L3, L4} and\n6. the function \u03b7d1 : {L3, L4} \u2192 PZ \u2212 {\u2205} where\n\u03b7d1(L3) = {({L1}, {L2})} and \u03b7d1(L4) =\n{({L1, L2}, \u2205)}.\nSpiders represent the existence of elements and regions\nrepresent sets \u2013 thus we need to know how many elements\nwe have represented in each region. Note that, in a uni-\ntary diagram, a constant spider and an existential spider\nrepresent the existence of distinct elements. For example,\nin figure 4, the diagram d2 asserts that the set represented\nby the zone ({L1}, {L2}) contains at least three elements,\nincluding that represented by L3. The number of spiders\ncontained by region r1 in d is denoted by S(r1, d). More\nformally,\nS(r1, d) = |{Li \u2208 CS : \u03b7d(Li) \u2286 r1}| +\u2211\n(n,r2)\u2208ESD(d)\u2227r2\u2286r1\nn.\nSo, any spider in d whose habitat is a subset of r contributes\nto the sum S(r, d). The number of spiders touching r1 in d\nis denoted by T (r1, d). More formally,\nT (r1, d) = |{Li \u2208 CS : \u03b7d(Li) \u2229 r1 6= \u2205}| +\u2211\n(n,r2)\u2208ESD(d)\n\u2227r2\u2229r1 6=\u2205\nn.\nIn d1, figure 4, S({({L2}, {L1})}, d1) = 1 and\nT ({({L2}, {L1})}, d1) = 2. In d2,\nS({({L1}, {L2})}, d2) = T ({({L1}, {L2})}, d2) = 3.\nUnitary diagrams form the building blocks of compound\ndiagrams. If D1 and D2 are spider diagrams with con-\nstants then so are D1 (\u201cnot D1\u201d), (D1 unionsqD2) (\u201cD1 or D2\u201d)\nand (D1 u D2) (\u201cD1 and D2\u201d). Some diagrams are not\nsatisfiable and we introduce the symbol \u22a5, defined to be a\nunitary diagram interpreted as false. Similarly we define\ncompound spider diagrams (without constants).\n4 Semantics\nRegions in spider diagrams with constants represent sets.\nWe can express lower and, in the case of shaded regions,\nupper bounds on the cardinalities of the sets we are rep-\nresenting as follows. If region r is inhabited by n spiders\nin diagram d then d expresses that the set represented by\nr contains at least n elements. If r is shaded and touched\nby m spiders in d then d expresses that the set represented\nby r contains at most m elements. Thus, if d has a shaded,\nuntouched region, r, then d expresses that r represents the\nempty set. Missing zones also represent the empty set. Each\nconstant spider asserts that the individual represented by its\nlabel is in the set represented by its habitat. Within a uni-\ntary diagram, no two constant spiders represent the same\nindividual.\nTo formalize the semantics of spider diagrams with con-\nstants we shall map labels, zones and regions to subsets of\nsome universal set. Our formalization of the semantics ex-\ntends that given for spider diagrams in [10].\nDefinition 4.1 An interpretation of labels, zones and re-\ngions, or simply an interpretation, is a pair (U,\u03a8) where\nU is a set and \u03a8: L \u222a Z \u222aR \u2192 PU is a function mapping\nlabels, zones and regions to subsets of U such that the im-\nages of the zones and regions are completely determined by\nthe images of the labels as follows:\n1. for each zone (a, b), \u03a8(a, b) = \u22c2\nl\u2208a\n\u03a8(l) \u2229 \u22c2\nl\u2208b\n\u03a8(l)\nwhere \u03a8(l) = U \u2212 \u03a8(l) and we define \u22c2\nl\u2208\u2205\n\u03a8(l) =\nU =\n\u22c2\nl\u2208\u2205\n\u03a8(l) and\n2. for each region r, \u03a8(r) = \u22c3\nz\u2208r\n\u03a8(z) and we define\n\u03a8(\u2205) = \u22c3\nz\u2208\u2205\n\u03a8(z) = \u2205.\nWe introduce a semantics predicate which identifies\nwhether a diagram expresses a true statement, with respect\nto an interpretation. We wish constant spider labels to \u2018act\u2019\nlike constants in first order predicate logic. Thus, if an inter-\npretation is to satisfy a diagram d, then the constant spider\nlabels in d must map to single element subsets of the univer-\nsal set. This is captured by the constant spiders condition in\nthe semantics predicate.\nDefinition 4.2 Let D be a diagram with constants and let\nm = (U,\u03a8) be an interpretation. We define the semantics\npredicate of D, denoted PD(m). If D =\u22a5 then PD(m)\nis \u22a5. If D (6=\u22a5) is a unitary diagram then PD(m) is the\nconjunction of the following four conditions.\n1. Distinct Spiders Condition. For each region r in\nPZ(D)\u2212 {\u2205}, |\u03a8(r)| \u2265 S(r,D).\n2. Shading Condition. For each shaded region r in\nPZ\u2217(D)\u2212 {\u2205}, |\u03a8(r)| \u2264 T (r,D).\n3. Plane Tiling Condition. The union of the sets rep-\nresented by the zones in D is the universal set:\u22c3\nz\u2208Z(D)\n\u03a8(z) = U .\n4. Constant Spiders Condition. Every constant spider\nrepresents an element in the set denoted by its habitat\nand no two constant spiders represent the same ele-\nment:\n\u2200Li, Lj \u2208 CS(d) \u2022 |\u03a8(Li)| = 1\u2227\u03a8(Li) \u2286 \u03a8(\u03b7d(Li))\u2227\n(\u03a8(Li) = \u03a8(Lj)\u21d2 Li = Lj).\nIf D = D1 then PD(m) = \u00acPD1(m). If D = D1 unionsq D2\nthen PD(m) = PD1(m) \u2228 PD2(m). If D = D1 u D2\nthen PD(m) = PD1(m) \u2227 PD2(m). We say m satisfies D,\ndenoted m |= D, if and only if PD(m) is true. If m |= D\nwe say m is a model for D.\nExample 4.1 Interpretation m = ({1, 2, 3, 4},\u03a8) par-\ntially defined by \u03a8(L1) = {1, 2}, \u03a8(L2) = {2, 3, 4},\n\u03a8(L3) = {1}, \u03a8(L4) = {2}, is a model for d1 in figure\n4 but not for d2.\n5 Expressiveness\nIn order to show that the language of spider diagrams\nwith constants is not more expressive than the language of\nspider diagrams (without constants) we will show that for\neach spider diagram with constants there is a spider diagram\n(without constants) that is semantically equivalent. Two di-\nagrams are semantically equivalent precisely when they\nhave the same class of models.\nd 2d 1\nL 1\nL 3\nL 2\nL 3\nL 2 L 4\nFigure 5. Semantically equivalent diagrams.\nExample 5.1 Consider the diagram d1 in figure 5, which\nincludes a constant spider. Our aim is to find a spider dia-\ngram (without constants) semantically equivalent to d1. To\nconstruct such a diagram, we replace the constant spider,\nL3, by a contour with labelL3, that is entirely shaded inside\nand that contains a single existential spider. The resulting\nspider diagram (without constants) is d2.\nIn order to show that augmenting spider diagrams with\nconstants does not increase expressiveness, we must find,\nfor each spider diagram with constants, a semantically\nequivalent spider diagram (without constants). To make\nthis task more straightforward we appeal to \u03b1-diagrams. A\nspider diagram is an \u03b1-diagram if and only if all the spi-\nders have exactly one foot. The diagrams figure 5 are \u03b1-\ndiagrams.\nL 1 L 2\nd 1\nL 3\nL 1 L 2\nd 2\nL 3\nL 1 L 2\nd 3\nL 3\nL 1 L 2\nd 4\nL 3\nL 1 L 2\nd 5\nL 3\nFigure 6. Obtaining alpha-diagrams.\nExample 5.2 In figure 6, the diagram d1 is semantically\nequivalent to the \u03b1-diagram d2 unionsq d3 unionsq d4 unionsq d5. That is, d1\nand d2 unionsq d3 unionsq d4 unionsq d5 have the same models.\nTheorem 5.1 Every spider diagram is semantically equiv-\nalent to an \u03b1-diagram.\nProof (Sketch) Spider legs represent disjunction within a\nunitary diagram, d. Therefore, if there is a spider, s, in d\nthat inhabits region r1 \u222a r2 where r1 \u2229 r2 = \u2205 then d is\nsemantically equivalent to d1 unionsq d2 where each of d1 and\nd2 are copies of d except that s inhabits r1 in d1 and r2 in\nd2, thus removing a spiders leg. This process of splitting\nspiders can be repeated until all spiders inhabit exactly one\nzone.\nIt follows that, if we can find, for each \u03b1-diagram with\nconstants, a semantically equivalent spider diagram (with-\nout constants) we will have shown that augmenting the lan-\nguage of spider diagrams with constants does not increase\nexpressiveness. To begin we consider unitary \u03b1-diagrams.\nL 4 L 2\nd 1\nL 3\nL 1\nL 4 L 2\nd 2\nL 1 L 3\nFigure 7. Changes in the zone set.\nExample 5.3 The diagrams in figure 7 are semantically\nequivalent. By replacing the constant spiders in d1 by con-\ntours when constructing d2, we have changed the zone set.\nThe zones in d1 are\n1. ({L4}, {L2}),\n2. ({L2, L4}, \u2205),\n3. ({L2}, {L4}) and\n4. (\u2205, {L2, L4}).\nEach of these zones gives rise to a zone in d2, for\nexample z1 = ({L2, L4}, \u2205) gives rise to z2 =\n({L2, L4}, {L1, L3}). We have used the containing label\nset for z1, namely {L1, L2} to give the containing label set\nfor z2. Since the contour label set for d2 is generated from\nthe contour label set and constant spider label set in d1 we\ncan deduce the excluding label set for z2:\n{L1, L3} = L(d2)\u2212 {L2, L4}.\nIf a zone is shaded in d1 then it gives rise to a shaded zone in\nd2. Moreover, if an existential spider inhabits z in d1 then\nit inhabits the zone z gives rise to in d2. This establishes\nthe habitat for each existential spider in d2 that arises from\nan existential spider in d1. Further zones, all of which are\nshaded, are in d2; there is one such zone for each constant\nspider. As an example, the constant spider L1 gives rise\nto the zone z3 = ({L1, L4}, {L2, L3}). In d1, spider L1\nhas habitat z4 = ({L4}, {L2}). To obtain the containing\nlabel set of the zone that L1 gives rise to, we first evaluate\n{L4} \u222a {L1} giving {L4, L1}. It is then simple to establish\nthe excluding label set.\nDefinition 5.1 Let d1 be a unitary \u03b1-diagram containing\na constant spider Li. Let d2 be unitary \u03b1-diagram. If the\nfollowing conditions hold then d2 is anLi-expansion of d1.\n1. The contour labels in d2 are the same as those in d1\nand, in addition, includes Li:\nL(d2) = L(d1) \u222a {Li}.\n2. The zones are \u2018preserved\u2019 and one extra zone is in d2\nfor the constant spider Li:\nZ(d2) = {(a, b \u222a {Li}) : (a, b) \u2208 Z(d1)}\u222a\n{(a \u222a {Li}, b) : \u03b7d1(Li) = {(a, b)}}.\n3. The shaded zones are \u2018preserved\u2019 and one new shaded\nzone is in d2 for the constant spider Li:\nZ\u2217(d2) = {(a, b \u222a {Li}) : (a, b) \u2208 Z\u2217(d1)}\u222a\n{(a \u222a {Li}, b) : \u03b7d1(Li) = {(a, b)}}.\n4. The existential spiders are \u2018preserved\u2019 and one new ex-\nistential spider is added for the constant spider Li:\nESD(d2) = {(n, {(a, b \u222a {Li})}) :\n(n, {(a, b)}) \u2208 ESD(d1)}\u222a\n{(1, {(a \u222a {Li}, b)}) : \u03b7d1(Li) = {(a, b)}}.\n5. The remaining constant spiders in d1 are in d2:\nCS(d2) = CS(d1)\u2212 {Li}.\n6. The habitats of the remaining constant spiders are pre-\nserved: \u2200Lj \u2208 CS(d2) \u2022 \u03b7d2(Lj) = {(a, b \u222a {Li}) :\n\u03b7d1(Lj) = (a, b)}.\nL 4\nL 2\nd 1\nL 3\nL 1 L 4\nL 2\nd 2\nL 1\nL 3\nFigure 8. An L3-expansion.\nExample 5.4 In figure 8, d2 is an L3-expansion of d1.\nWe note that it is not necessary to restrict the definition\nof an Li-expansion to \u03b1-diagrams. However, if we were to\nexpand a constant spider with more than one foot then the\nresulting diagram may not be drawable (given certain well-\nformedness conditions), which we now illustrate by exam-\nple. One well-formedness condition we wish to impose, for\nusability reasons, is that contours do not run concurrently.\nExample 5.5 In figure 9, d1 is semantically equivalent to\nd2, d3 and d4. However, in d2, the contour with label L3\nis not a simple closed curve and so d2 is not a concrete\ndiagram. The diagram d3 has concurrent contours and, be-\ncause of this, d3 is hard to interpret. Both d2 and d3 (which\nhave the same abstract description) are the obvious candi-\ndates for an L3-expansion of d1. The diagram d4 contains\nmore zones than d2 (and d3) and is drawable.\nL 1 L 2L 3\nd 1\nL 1 L 2L 3\nd 4\nL 1 L 2L 3\nd 2\nL 1 L 2\nL 3\nd 3\nFigure 9. Drawability issues.\nIt is hard to identify which abstract diagrams are draw-\nable. If we relax the definition of an Li-expansion to non-\n\u03b1-diagrams then the obvious changes to the zone set need\nnot result in a drawable diagram. With the definition of an\nLi-expansion that we have given, it is guaranteed that if d\nis drawable then any Li-expansion of d is drawable.\nWe now show that any Li-expansion of unitary \u03b1-\ndiagram d is semantically equivalent to d. Restricting the\ndefinition of an Li-expansion to \u03b1-diagrams makes the\nproof of this fact more straightforward.\nTheorem 5.2 Let d1 be a unitary \u03b1-diagram containing a\nconstant spider Li. Then there exists a unique Li-expansion\nof d1. Moreover, the Li-expansion of d1 is semantically\nequivalent to d1.\nProof The existence of a unique Li-expansion is obvious.\nLet d2 be the Li-expansion of d1. We must show that any\nmodel for d1 is also a model for d2 and vice versa. Let\nm = (U,\u03a8) be an interpretation. Suppose firstly that m is\na model for d1. To show m is a model for d2, we start by\nconsidering each of the zones in Z(d2). Let z2 = (a2, b2) \u2208\nZ(d2). Then there are two possibilities for z2.\n1. Li \u2208 b2. In this case,\n\u03a8(z) =\n\u22c2\nLj\u2208a2\n\u03a8(Lj) \u2229\n\u22c2\nLj\u2208b2\n\u03a8(Lj)\n=\n\u22c2\nLj\u2208a2\n\u03a8(Lj) \u2229\n\u22c2\nLj\u2208b2\u2212{Li}\n\u03a8(Lj) \u2229\u03a8(Li)\n= \u03a8(a2, b2 \u2212 {Li}) \u2229\u03a8(Li).\nThere are two subcases.\n(a) \u03b7d1(Li) 6= {(a2, b2\u2212{Li})}. In this subcase, by\nthe constant spiders condition for d1,\n\u03a8(Li) \u2229\u03a8(a2, b2 \u2212 {Li}) = \u2205.\nTherefore,\n\u03a8(z2) = \u03a8(a2, b2 \u2212 {Li}) (1).\nFrom the distinct spiders condition for d1 and the\ndefinition of an Li-expansion,\n|\u03a8(z2)| \u2265 S({(a2, b2 \u2212 {Li})}, d1)\n= S({z2}, d2).\nFrom the shading condition for d1 and the defi-\nnition of an Li-expansion, if z2 is shaded in d2\nthen\n|\u03a8(z2)| \u2264 T ({(a2, b2 \u2212 {Li})}, d1)\n= T ({z2}, d2).\n(b) \u03b7d1(Li) = {(a2, b2\u2212{Li})}. In this case, by the\nconstant spiders condition for d1,\n\u03a8(Li) \u2286 \u03a8(a2, b2 \u2212 {Li}).\nTherefore\n\u03a8(z2) = \u03a8(a2, b2 \u2212 {Li})\u2212\u03a8(Li) (2).\nMoreover,\n|\u03a8(z2)| = |\u03a8(a2, b2 \u2212 {Li})| \u2212 1.\nFrom the distinct spiders condition for d1 and the\ndefinition of an Li-expansion,\n|\u03a8(z2)| \u2265 S({(a2, b2 \u2212 {Li})}, d1)\u2212 1\n= S({z2}, d2).\nFrom the shading condition for d1 and the defi-\nnition of an Li-expansion, if z2 is shaded in d2\nthen\n|\u03a8(z2)| \u2264 T ({(a2, b2 \u2212 {Li})}, d1)\u2212 1\n= T ({z2}, d2).\nIn either subcase, the distinct spiders condition and,\nwhen z2 is shaded, the shading condition hold for z2\nin d2.\n2. Li 6\u2208 b2. In this case,\n\u03a8(z) =\n\u22c2\nLj\u2208a2\n\u03a8(Lj) \u2229\n\u22c2\nLj\u2208b2\n\u03a8(Lj)\n=\n\u22c2\nLj\u2208a2\u2212{Li}\n\u03a8(Lj) \u2229\n\u22c2\nLj\u2208b2\n\u03a8(Lj) \u2229\u03a8(Li)\n= \u03a8(a2 \u2212 {Li}, b2) \u2229\u03a8(Li).\nNow, since Li 6\u2208 b2, it follows that Li \u2208 a2 and\n\u03b7d1(Li) = {(a2 \u2212 {Li}, b2)}. By the constant spi-\nders condition for d1,\n\u03a8(Li) \u2286 \u03a8(a2 \u2212 {Li}, b2).\nThus\n\u03a8(z2) = \u03a8(Li) (3).\nMoreover, |\u03a8(Li)| = 1 so |\u03a8(z2)| = 1. Therefore\n|\u03a8(z2)| = S({z2}, d2) = T ({z2}, d2).\nSo the distinct spiders condition and the shading con-\ndition hold for z2 in d2.\nSince d2 is an \u03b1-diagram, a straightforward restatement of\nthe semantics predicate show that the distinct spiders con-\ndition and the shading condition hold for d2. From (1), (2)\nand (3), and the definition of an Li-expansion, it follows\nthat the plane tiling condition holds for d2.\nNext we show that the constant spiders condition holds\nfor d2. Let Lj , Lk \u2208 CS(d2). Then Lj , Lk \u2208 CS(d1) and,\nby the constant spiders condition for d1,\n|\u03a8(Lj)| = 1 \u2227\u03a8(Lj) \u2286 \u03a8(\u03b7d1(Lj))\u2227\n(\u03a8(Lj) = \u03a8(Lk)\u21d2 Lj = Lk).\nSince d1 is an \u03b1-diagram and from the definition of an\nLi-expansion, \u03b7d1(Lj) = {(a2, b2 \u2212 {Li})} for some\n(a2, b2) \u2208 Z(d2) where Li \u2208 b2. We note that \u03b7d2(Lj) =\n{(a2, b2)}. We must show that \u03a8(Lj) \u2286 \u03a8(a2, b2). If\n\u03b7d1(Lj) 6= \u03b7d1(Li) then, by (1),\n\u03a8(a2, b2 \u2212 {Li})) = \u03a8(a2, b2)\nin which case\n\u03a8(Lj) \u2286 \u03a8(a2, b2).\nAlternatively, \u03b7d1(Lj) = \u03b7d1(Li). In this case, by (2),\n\u03a8(a2, b2) = \u03a8(a2, b2 \u2212 {Li})\u2212\u03a8(Li).\nMoreover,\n\u03a8(a2, b2) \u222a\u03a8(Li) = \u03a8(a2, b2 \u2212 {Li}) \u2287 \u03a8(Lj).\nBy the constant spiders condition for d1 \u03a8(Li) \u2229\u03a8(Lj) =\n\u2205, so\n\u03a8(Lj) \u2286 \u03a8(a2, b2).\nHence the constant spiders condition holds for d2. There-\nfore m is a model for d2. Hence all the models for d1 are\nmodels for d2.\nWhat remains is to show that any model for d2 is also a\nmodel for d1. The strategy is similar to the first part of the\nproof. Hence d1 and d2 are semantically equivalent.\nCorollary 5.1 Let d1 be a unitary \u03b1-diagram. Then there\nexists a semantically equivalent unitary \u03b1-diagram that\ndoes not contain any constant spiders.\nTheorem 5.3 Let D be an \u03b1-diagram with constants. Then\nthere exists a semantically equivalent diagram that does not\ncontain any constant spiders.\nProof The proof follows by induction on the depth of D in\nthe inductive construction, with the base case provided by\ncorollary 5.1.\nTheorem 5.4 Augmenting the spider diagram language\nwith constants does not increase expressiveness.\nProof We must show that every spider diagram with con-\nstants has a semantically equivalent spider diagram (without\nconstants). We have shown that for every \u03b1-diagram with\nconstants there exists a semantically equivalent spider dia-\ngram (without constants). Let D1 be a spider diagram with\nconstants. By theorem 5.1, D1 is semantically equivalent\nto some \u03b1-diagram with constants, D2 say. Since D1 and\nD2 have the same models, the result follows. Hence aug-\nmenting the spider diagram language with constants does\nnot increase expressiveness.\nCorollary 5.2 The language of spider diagrams with con-\nstants is equivalent in expressive power to monadic first or-\nder logic with equality.\n6 Conclusion\nIn this paper we have shown that augmenting the spi-\nder diagram language with constants does not lead to an\nincrease in expressiveness. To do so, for each \u03b1-diagram\nwith constants we identified the existence of a semantically\nequivalent spider diagram (without constants). Since ev-\nery spider diagram with constants can be transformed into\nan \u03b1-diagram we deduce that augmenting spider diagrams\nwith constant spiders does not lead to an increase in expres-\nsiveness. That is, constant spiders are syntactic sugar. It\nfollows that the language of spider diagrams with constants\nis equivalent to monadic first order logic with equality.\nSeveral sound and complete spider diagram systems\n(without constants) have been developed; see, for example,\n[5, 7]. A sound, but not complete, system based on spider\ndiagrams with constant spiders but without existential spi-\nders has also been developed [4]. To aid usability, it may\nbe important to develop a sound and complete reasoning\nsystem for spider diagrams with constants, building on the\nexisting reasoning systems, despite the fact the expressive-\nness is not increased. In fact, it is straightforward to enlarge\nthe rule set that is specified in [5] for spider diagrams (with-\nout constants) to a sound and complete rule set for spider\ndiagrams with constants.\nM i c e\nC a t s\ne a t e n\nFigure 10. A constraint diagram.\nThe spider diagram language (without constants) forms\na fragment of the more expressive constraint diagram lan-\nguage [6]. Constraint diagrams allow relational navigation\n(expressions involving two place predicates). The diagram\nin figure 10 is a constraint diagram. It expresses that \u2018ev-\nery cat has eaten exactly one mouse and no cats are mice\u2019.\nVarious constraint diagram languages exist. The simplest\nof these (which is also sound and complete) restricts the\nsyntactic components and the semantic interpretation of the\ndiagrams [9]. In [2] the authors give a reading algorithm for\ninterpreting more expressive constraint diagrams. It is cur-\nrently unknown what fragment of FOPL can be expressed\nusing constraint diagrams. It is also unclear whether adding\nconstant spiders to the language of constraint diagrams in-\ncreases expressiveness. This is because the semantic in-\nterpretation of constraint diagrams requires a dependency\nanalysis to be carried out between syntactic components.\nThe dependencies between spiders are determined by their\nhabitats. Changing the zones sets, therefore, may change\nthe dependencies. Investigating the expressiveness of con-\nstraint diagrams and establishing whether constant spiders\nincrease the expressiveness of the constraint diagram lan-\nguage is the subject of ongoing work.\nAcknowledgment\nGem Stapleton thanks the UK EPSRC for support under\ngrant number 01800274. John Howse, John Taylor and Si-\nmon Thompson are partially supported by the UK EPSRC\ngrant numbers GR\/R63516 and GR\/R63509 for the Reason-\ning with Diagrams project. Thanks also to the anonymous\nreviewers for their most helpful comments.\nReferences\n[1] L. Euler. Lettres a une princesse d\u2019allemagne, 1761. vol 2,\nLetters No. 102-108.\n[2] A. Fish, J. Flower, and J. Howse. A reading algorithm for\nconstraint diagrams. In IEEE Symposium on Human Centric\nComputing Languages and Environments, Auckland, New\nZealand, pages 116\u2013168. IEEE, 2003.\n[3] J. Howse, F. Molina, S.-J. Shin, and J. Taylor. On diagram\ntokens and types. In Proceedings of Diagrams 2002, pages\n76\u201390. Springer-Verlag, April 2002.\n[4] J. Howse, F. Molina, J. Taylor, S. Kent, and J. Gil. Spider\ndiagrams: A diagrammatic reasoning system. Journal of Vi-\nsual Languages and Computing, 12(3):299\u2013324, June 2001.\n[5] J. Howse, G. Stapleton, and J. Taylor. Reason-\ning with spider diagrams, 2004. available from\nwww.cmis.brighton.ac.uk\/research\/vmg.\n[6] S. Kent. Constraint diagrams: Visualising invariants in ob-\nject oriented models. In Proceedings of OOPSLA97, ACM\nSIGPLAN Notices, volume 32, pages 327\u2013341, 1997.\n[7] F. Molina. Reasoning with extended Venn-Peirce diagram-\nmatic systems. PhD thesis, University of Brighton, 2001.\n[8] S.-J. Shin. The Logical Status of Diagrams. Cambridge\nUniversity Press, 1994.\n[9] G. Stapleton, J. Howse, and J. Taylor. A constraint diagram\nreasoning system. In Proceedings of International Confer-\nence on Visual Languages and Computing, pages 263\u2013270.\nKnowledge Systems Institute, 2003.\n[10] G. Stapleton, J. Howse, J. Taylor, and S. Thompson. What\ncan spider diagrams say? In Proceedings of Diagrams 2004,\npages 112\u2013127. Springer-Verlag, 2004.\n[11] N. Swoboda and G. Allwein. Using DAG transformations to\nverify Euler\/Venn homogeneous and Euler\/Venn FOL het-\nerogeneous rules of interence. In International Workshop\non Graph Transformation and Visual Modeling Techniques,\npages 84\u201398, Barcelona, October 2002.\n[12] J. Venn. On the diagrammatic and mechanical representation\nof propositions and reasonings. The London, Edinburugh\nand Dublin Philosophical Magazine and Journal of Science,\n9:1\u201318, 1880.\n"}