{"doi":"10.1016\/S0377-2217(03)00165-6","coreId":"66240","oai":"oai:dro.dur.ac.uk.OAI2:2299","identifiers":["oai:dro.dur.ac.uk.OAI2:2299","10.1016\/S0377-2217(03)00165-6"],"title":"Pattern language : a framework for learning.","authors":["Jessop,  A."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-03-01","abstract":"Pattern languages (PLs) were devised for use in architecture and urban design as ways of providing useful access to design knowledge both for the expert designer and for the lay user. They have subsequently found use in the software community for technical and organisational issues. The paper reports some applications of PLs: (1) as a vehicle for making explicit knowledge that would otherwise remain tacit; (2) as an aid to teaching; (3) as a means of presenting statistical methods to managers","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66240.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/2299\/1\/2299.pdf","pdfHashValue":"610b95743a0499e8e97ae19519e585d99bbe9517","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:2299<\/identifier><datestamp>\n      2011-08-17T08:33:46Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Pattern language : a framework for learning.<\/dc:title><dc:creator>\n        Jessop,  A.<\/dc:creator><dc:description>\n        Pattern languages (PLs) were devised for use in architecture and urban design as ways of providing useful access to design knowledge both for the expert designer and for the lay user. They have subsequently found use in the software community for technical and organisational issues. The paper reports some applications of PLs: (1) as a vehicle for making explicit knowledge that would otherwise remain tacit; (2) as an aid to teaching; (3) as a means of presenting statistical methods to managers.<\/dc:description><dc:subject>\n        Knowledge-based systems<\/dc:subject><dc:subject>\n         Pattern language<\/dc:subject><dc:subject>\n         Learning.<\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        European journal of operational research, 2004, Vol.153(2), pp.457-465 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2004-03-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:2299<\/dc:identifier><dc:identifier>\n        issn:0377-2217<\/dc:identifier><dc:identifier>\n        doi:10.1016\/S0377-2217(03)00165-6<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/2299\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1016\/S0377-2217(03)00165-6<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/2299\/1\/2299.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0377-2217","issn:0377-2217"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":["Knowledge-based systems","Pattern language","Learning."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n29 August 2008\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nJessop, A. (2004) \u2019Pattern language : a framework for learning.\u2019, European journal of operational research.,\n153 (2). pp. 457-465.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/S0377-2217(03)00165-6\nPublisher\u2019s copyright statement:\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n Use policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without \nprior permission or charge, for personal research or study, educational, or not-for-profit purposes \nprovided that : \n \n\u0083 a full bibliographic reference is made to the original source \n\u0083 a link is made to the metadata record in DRO \n\u0083 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright \nholders.  \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nDurham Research Online \n Deposited in DRO:\n29 August 2008\nVersion of attached file:\nAccepted\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nJessop, A. (2004) 'Pattern language : a framework for learning.', European journal\nof operational research., 153 (2), pp.\u0000457-465.\nFurther information on publisher\u0000s website:\nhttp:\/\/dx.doi.org\/10.1016\/S0377-2217(03)00165-6\n  \nPATTERN LANGUAGE: A FRAMEWORK FOR LEARNING \n \n \n \n \nAlan Jessop \nDurham Business School \nMil Hill Lane \nDurham \nDH1 3LB \nUK \n \n \ntel: 0191 374 1233 \nfax: 0191 374 3748 \ne-mail: a.t.jessop@durham.ac.uk \n \n \n \n\u223c  1  \u223c \nPATTERN LANGUAGE: A FRAMEWORK FOR LEARNING \n \n \n \n \nAbstract \n \nPattern languages were devised for use in architecture and urban design as \nways of providing useful access to design knowledge both for the expert \ndesigner and for the lay user. They have subsequently found use in the \nsoftware community for technical and organisational issues. The paper \nreports some applications of pattern languages (1) as a vehicle for making \nexplicit knowledge that would otherwise remain tacit; (2) as an aid to \nteaching; (3)  as a means of presenting statistical methods to managers.  \n \n \n \nKeywords knowledge-based systems \n  pattern language \n  learning \n \n \n \n \n \n\u223c  2  \u223c \nPATTERN LANGUAGE: A FRAMEWORK FOR LEARNING \n \n \n1.  Introduction \n \nThere exists an apparently paradoxical situation in which, on the one \nhand, it is proposed that organisations should be learning organisations, \nand, on the other, that individual creativity should be prized and \nencouraged. Whatever organisational learning might mean it surely \nrequires two things: first, that individuals learn from experience and, \nsecond, that the resultant lessons and behaviours to which they lead exhibit \nsome commonality or style or culture. To be creative would seem to imply \ndoing something quite different and not necessarily to be restricted by the \nconstraints of a common style. Exemplars of best practice, or, at least, of \nwhat works, may come only from observation of those objects or practices \nwhich exist or have existed in the world, filtered via some criteria or \nviewpoint. \n \nOne way to reconcile these apparently conflicting requirements is to \ntake from practice the form of a solution but to leave open for the \nindividual how that form is articulated in a particular application. By this \nmeans it is hoped that the given form ensures an outcome which is at least \nacceptable while there remain sufficient degrees of freedom for a creative \nattempt at a locally optimal outcome. This scheme is in common use, in \nmusical improvisation, for instance, in which the chord sequence of a tune \nis used as the basis for an improvisation which will resemble the original \nto some extent but will be a piece of music in its own right. Similarly, we \nmay wish to design a car which is unique and to a degree unlike others and \nyet is still a car. Or we may wish to design an organisation fit for a given \npurpose where this fitness is assured by modelling the organisations on \nothers yet adapted for our particular use. \n \nPattern Language (PL) is proposed as a way of supporting this \nactivity. A PL is a web of patterns, each of which is a simple description of \n \n\u223c  3  \u223c \na problem and a suggestion for its solution and contains links to other \npatterns in the language. Although the applications of interest here are \nprimarily managerial some of the background of PL in  physical design \nwill be helpful. This is given in the next section. It is followed by a \ndescription of four applications of the PL methodology in which the author \nhas been involved. In the final section, what was learned from these \napplications is discussed. \n \n \n2.  Design \n \nThe design methods movement of the sixties wished to help designers, \nmainly architects, by suggesting formal methods of analysis and synthesis. \nFrom this activity came, eventually, the idea of the pattern language.  \n \nIn learning from existing artefacts or systems what is abstracted from \npractice is not a solution as such but rather the form of good solutions. \nWithin that form there is some freedom to choose to make a particular \nspecification (Figure 1). The implementation of this model for physical \ndesign problems dates back to 1947 and the work of Zwicky on \nmorphological analysis (Zwicky, 1967). First, an analysis of existing \nobjects yields a list of features, which it is supposed any form must have. \nSecond, for each feature a list is made of the means which may be \nemployed to achieve the goal implied by the feature. Selecting one of the \nmeans listed for each feature gives a realisation which may then be \nevaluated. Making these selections at random is a good way of testing \none\u2019s views by reaction but would prove a tedious way of exploring the \nmany possibilities in the solution space and so it will be desirable to limit \nthis search by noting incompatible combinations, the strategy employed in \nthe Analysis of Interconnected Decision Areas, AIDA (Harary, Jessop, \nLuckman, and Stringer, 1965; Luckman, 1967; Friend and Jessop, 1969). \nThis morphological approach provides a context for the development of \nPL by the architect and mathematician Christopher Alexander. \n \n \n\u223c  4  \u223c \nFollowing his work on mathematical clustering as a means of \nhierarchical problem decomposition and reaggregation of the solutions to \nthe constituents (Alexander, 1963, 1964; Chermayeff and Alexander, \n1966) Alexander soon began to have doubts about the realism of the \nassumptions necessary for his method, notably that in the decomposition \nthe clusters were largely independent: that actions or decisions in one did \nnot effect the others. In rejecting the hierarchical approach (Alexander, \n1966) he realised that it was still necessary to provide some aid for the \ndesigners to overcome the cognitive limits which frustrate the \nunderstanding and design of large systems, such as buildings or towns. \nAlexander\u2019s new approach was to adopt more directly a morphological \nanalysis, which is to say that he looked for examples of existing solutions \nto sub-problems rather than for ways to define those problems. It was then \nthe task to try to record these examples of good practice in a way which \nwas readily accessible by others. He called the result a Pattern Language \n(Alexander, 1975, 1977, 1979). In his pattern book (Alexander, 1977) he \ngives 253 patterns giving help on matters from the shape of city regions to \nmaking a front door bench. There are several points to note in relation to \nthe intent of the enterprise. First, patterns are resolutions of conflicts, an \nidea familiar to designers: \u201cthe art of designing is the art of reconciliation\u201d \nArcher (1965). Second, that the object was essentially what we would now \ncall empowerment. While Alexander clearly felt this as a democratic urge \nhe also saw it as inevitable because the complexity of the task is beyond \nthe compass of the designer alone, indeed the very idea of the grand \ndesigner seems untenable in such situations. By using PL the complexity \nof the design problem, at first so daunting and intractable (because \nincomprehensible), is turned to advantage..  \n \nThe software community discovered Alexander and PL and \nrecognised a possible solution to the problem of description and \ncommunication of code in pursuit of greater reuse and so of increased \nefficiency (Gabriel, 1996). Some of the patterns which resulted are to be \nfound in Gamma, Helm, Johnson, and Vlissides (1994), Coplien and \nSchmidt (1995) and Vlissides, Coplien and Kerth (1996). Much of this \n \n\u223c  5  \u223c \nwork is, reasonably enough, concerned with software only. But, software \nis written by people working in an environment in an organisation and so it \nis unsurprising that PLs were also written addressing the problem of \nsetting up and running a successful software organisation. It is this \norganisational application which stimulated the work now described. \n \n \n3.  Application 1: Industrial project management \n \nA pattern language was developed by Parker (2000, 2001). The \norganisation was the development arm of a chemicals company. They had \nsome experience in project development and management and the purpose \nof the language was to make concrete the experience that had been gained. \nDecisions had to be made about who should be involved and how the \nprocess should be started; how the problem could be entered. From the \nsoftware community there are several descriptions of the development of a \nPL, some  of which are given in the citations above and also by Meszaros \nand Doble (2000). Coplien (2000) sets out the method used at AT&T for \nentering the problem area, some of the which was discussed in a \ncorrespondence reported in Parker (2000), which says, in part,  \n \n\u201cThe way we discovered (a better term than \"generated\") the patterns was to \ngather empirical data on the structure of the organisation\u2019s  communication \nnetwork.  We did this in role-play exercises that took about three hours each.  \nThen we distilled the data using a tool called Pasteur that creates a social network \nrendition of the data. \n \nThe first key is that we did this again and again and again.  Eventually, you \ncould recognise the patterns that recurred in these social network diagrams.  The \nsecond key was going back to the organisations to understand why the pictures \nwere the way they were -- but this was usually just an exercise in recollection.  \nThose insights combined as the basis for many of the patterns we wrote.\u201d \n \n \n\u223c  6  \u223c \nThis process is, of course, extensive but, equally, is time consuming \nand in Parker\u2019s case that time was not available. Instead it was decided to \nuse an existing PL as both an introduction and a provocation to start the \nprocess. The language was that described by Coplien (1995) the object of \nwhich was to \u201cbuild an organisation and guide its software development \nprocess\u201d and it was for this emphasis on organisational issues that this \nparticular example was chosen.  \n \nIn Parker\u2019s study a group of four was  assembled to develop the \npatterns. All four shared a technical background but had different roles \nwithin the company so that even with this small group a reasonable spread \nof viewpoints was given. Six weekly meetings were used. The stages of \nthe process were: an introduction and understanding of Coplien\u2019s patterns; \nwriting patterns; review and rewrite patterns; review process and results. \nParker taped these sessions and wrote the patterns agreed at the meetings. \nA language of twenty nine patterns resulted, one of which is shown in \nFigure 2. The shape of the pattern is clear. An issue exists in  a certain \ncontext. The issue is problematic because of the need to resolve competing \nforces. A solution is proposed to effect that resolution, the application of \nwhich results in a different and, it is to be hoped, more tractable context. \nLinks are provided to other patterns which are of relevance and it is via \nthese links that the user of the language explores as much or as little as is \nnecessary for an understanding of not just the recommendation in the \nsolution but enough of the surrounding issues for a confident application.  \n \n \n4. Application 2: Course development \n \nFollowing Application 1 a small exercise was undertaken to find out \njust how easily the process could be applied. Five members of staff at the \nUniversity of Durham Business School met for a couple of hours. A brief \nintroduction was given, including a presentation of one of Coplien\u2019s \npatterns. The topic chosen for investigation was the introduction of a new \ndegree programme under severe time constraints. The discussion soon \n \n\u223c  7  \u223c \nbecame animated, veering off in all directions as dictated by the immediate \nconcerns of the participants. The difficulty for the facilitator (me) was not \nso much writing patterns but keeping track of the patterns being generated. \nThe subject of a pattern would be agreed and some focus thereby provided \nbut the discussion soon started to spiral again. The process therefore \ninvolved noting the points made which were relevant for the pattern under \ndiscussion and also to note related points which themselves would form \nthe topic for other patterns. This acted to generate an expanding structure \nfor the language while ensuring that some progress was made on the \npattern in hand. The resulting pattern is shown in Figure 3. Names of other \npatterns which would have been developed are: \n \nexternal examiner \nrecruiting students \nworking across courses \ninformal working together \nworking together electronically \ndesigning programmes \ndistinctiveness & style \nstudent expectations \nmotivating staff \n \nThis brief exercise confirmed that it is possible to enter the pattern designing \nprocess quickly and that a well structured discussion results. \n \n \n5. Application 3: Case analysis \n \nIt was apparent from these two applications that whatever use a PL \nmight be the necessary discussion certainly provides a good process for the \narticulation of what has been learned from past experience. This is exactly \none of the functions of education. It is common in business schools that the \nanalysis of case studies is used to practice analytical skills by simulating a \nnumber of different situations. In general the case describes a problematic \nsituation and the teacher then asks questions based upon it. Asking that \n \n\u223c  8  \u223c \nstudents devise a PL, or at least describe some patterns, would seem to \noffer a useful addition to the analytical methods available. To test this \neleven MBA students took part in an experiment. A few days in advance \nof our meeting each was given a sample PL (Coplien again) and a written \ncase. The case concerned the merger, in reality the takeover, of one small \nmanagement consultancy by another, much larger, consultancy. Like many \nmergers it was proving difficult to get the constituents to work together, \nthereby undermining the performance of both.  \n \nWe met for a morning. An introduction to the PL idea was given and \nthe students formed into three small groups and asked to make \nrecommendations as to what action the company should take, these \nrecommendations being in the form of patterns. As well as providing a \nvehicle for debriefing and discussion patterns are also of a form which \ncould readily provide the basis of a presentation to a client, setting out \nconcisely recommendation and justification. Figure 4 shows one of the \npatterns which were written. \n \n \n6. Application 4: Teaching statistics \n \nStudents and managers very rarely wish to learn statistics. What they \nwant is solutions to problems. There are many textbooks written to a \ntraditional linear plan, encouraging the reader similarly to start at the \nbeginning, skipping bits where this seems sensible. But many students, \nMBA students certainly, will know something about some of this material \nand will anyway be impatient for application. The same is true of \nmanagers.  \n \nExpressing statistical method as a PL offers many advantages in this \nsituation. The web-like structure of the language permits entry at a point \nwhich the user judges closest to the problem at hand. Links to other \npatterns allow access to as much or as little of the other methods as the \nuser needs, given knowledge already possessed. Figure 5 shows one \n \n\u223c  9  \u223c \npattern from the (developing) language. This pattern is framed as the \nsolution to a management problem but the solution is statistical. The \nlanguage may contain some patterns which are purely technical (statistical \nin this case) and some which are concerned with practical implementation \nof the results of the analyses. As Stalingaros (2000) makes clear, users \nmay assemble a set of patterns as the basis for their own bespoke language, \noffering solutions to those problems which they most frequently encounter \nor, alternatively, to assemble the framework for a solution to a particular \nad hoc problem. \n \nIn this pattern a Discussion precedes the Solution rather than a \nRationale following it. This seems a better structure for a pattern which is \nmore didactic than the other applications described above.  \n \n \n7.  Discussion \n \nThe help provided in a pattern will usually be a mix of theory and \npractice, the didactic and the empirical, and it is this which makes a pattern \nthe \u201cbest guess at the way to share solutions\u201d (Coplien and Schmidt, 1995, \np.ix). The purposes here can be summarised as three questions: is making \npatterns a good way of exploring what we have learned?; is it a good way \nof making that knowledge explicit?; is it a good way of passing that \nknowledge to others? The answers are: yes, yes, and not proven. \n \nReactions from participants in all the first three applications are that \nmaking patterns is indeed a process which is easily entered and which \nprovides a good structure for debriefing and making explicit that which \nmight otherwise remain tacit. The way in which discussion of one pattern \ngenerates suggestions for other related patterns testifies to the vitality of \nthe process. The two most useful provocations seemed to be having to \nthink about the context, old and new, and the forces which are to be \nresolved.  \n \n \n\u223c  10  \u223c \nBased on the work described here it is beyond doubt that the process \nof making a PL has been found a useful method for exposing tacit \nknowledge. Starting the process was easy and the process itself not \ndifficult, though the facilitator had carefully to juggle the completion of a \npattern and the suggestions for related patterns. This was made easier by \nthe formal structure of the patterns. Making the first pattern or two is time \nconsuming due largely to the need to learn just this discipline necessary for \nkeeping each pattern short and to the point and postponing other \ndiscussions to the making of other patterns. The process becomes quicker \nbut the time needed for completion and review is not trivial, but then \nneither should it be.  \n \nOne of the reasons why the process was easy to start was the use of a \npre-existing PL both to explain the idea of a PL and to some extent to act \nas a template. In all three cases the pattern structure provided by Coplien \nwas taken and used with no significant modification or reservation. While \nthis is tribute to the robustness and appeal of the design the unanswered \nquestion is what would have happened if a more open start had been made \nat which the shape of a pattern was left to be decided by the participants? \nGiven the role and knowledge of the facilitator it is highly likely that the \nsame elements would be present, for the idea of the resolution of forces \nand so the transformation of context are key. A more open start would \nhave lengthened the duration of the process thereby making application in \npractical situations problematic. Nonetheless, the issue of whether the \ninitial steer was too strong remains. In Parker\u2019s study Coplien\u2019s PL \nprovided more than just the structure of patterns in general. Because of the \nsimilarity of the applications some were used as substantive prototypes. \n \nIn two of the applications the facilitator had some knowledge of the \norganisation, being currently or recently employed in it. While it is, of \ncourse, necessary for patterns to be written and used by managers and \npractitioners of the organisation these \u201cinternal groups may be too close to \nthe process, introducing bias through the application of organisational \nheuristics\u201d (Thomas, Sussman and Henderson, 2001). Having an external \n \n\u223c  11  \u223c \nfacilitator would help to guard against this, almost certainly at the cost of \nextending the time taken. Whatever the force of these observations, \nparticipants found that the resulting patterns were a useful articulation of \nknowledge, method and solution. \n \nThe usefulness of a PL to others must remain an open question, for \nno attempt to test it was made. Parker (2000) makes the point that rather \nthan act as templates for solutions patterns could also be used as part of the \ninduction of new members into an organisation. This is, after all, a social \nprocess and patterns seem to be well suited to describing this side of the \nbusiness. Similarly, including on the pattern writing team people from \nother organisations or different parts of the same organisation could act as \na vehicle for sharing and integration via the social process of writing the \npatterns. \n \nPatterns inhabit a place somewhere between the rigidities of  \nIF\u2026THEN expert systems and the more open ended of the problem \nstructuring methods (as described in Rosenhead, 1989, for example). In \ndescribing any complex system, and a set of beliefs and solutions is \ncertainly complex, the formal character of the language in which the \ndescription is made acts as a variety reduction strategy, for the description \nwill never posses the richness of the reality, and so the language needs to \nbe chosen with some care so that the richness of description possible in the \nlanguage is appropriate. A Pattern Language would seem to offer, on the \none hand, this richness in its structure via contexts and linkages and yet, on \nthe other, provides a simplicity of description in the constituent patterns.  \n \nThe processes required by the writing and considered use of the \nlanguage enforce a beneficial reflection. Such reflection would usually \ninvolve a group of involved practitioners. As Tyre and von Hippel (1997) \nnote: \u201cCollaborative processes are important because no one person \nembodies the breadth and depth of knowledge necessary to comprehend \ncomplex organisational problems, and also because codified abstract \n \n\u223c  12  \u223c \n\u2018knowledge\u2019 is seldom sufficient to deal with actual problems in \norganisations.\u201d It would seem that PL can go some way towards \naddressing these issues by its flexibility, its mix of the simple and the \ncomplex,  and its inherently collaborative nature.  \n \n \n \nAckowledgement \n \nMany thanks to Dave Parker for his work on developing his PL for his \ndissertation and for the stimulating discussions we had. Thanks too to \nthose other MBA students who have built patterns over the last couple of \nyears. similarly \n \n \n\u223c  13  \u223c \nReferences \n \nAlexander, C., 1963. The determination of components for an Indian \nvillage: In Jones, J.C. and Thornley, D.G. (Eds.), Conference on Design \nMethods, Pergamon Press, Oxford. \nAlexander, C., 1964. Notes on the Synthesis of Form,  Harvard University \nPress, Cambridge Mass. \nAlexander, C., 1966. A city is not a tree, Design 206 (February) 46\u201355.  \nAlexander, C., 1975. The Oregon Experiment, Oxford University Press, \nNew York. \nAlexander, C., 1977. A Pattern Language, Oxford University Press, New \nYork. \nAlexander, C., 1979. The Timeless Way of Building, Oxford University \nPress, New York.  \nArcher, L.B., 1965. Systematic Method for Designers, Design Council, \nLondon. (Reprinted in Cross, N. (Ed.), 1984. Developments in Design \nMethodology, Wiley, Chichester.)  \nChermayeff, S., Alexander, C., 1966. Community and Privacy: Towards a \nNew Architecture of Humanism, Penguin Books, Harmondsworth, Middx. \nCoplien, J.O., 1995. A generative development-process language. In: \nCoplien, J.O., Schmidt, D.C. (Eds.). Pattern Languages of Program \nDesign, Addison-Wesley, Reading, Mass. \nCoplien, J.O., 2000.  \nhttp:\/\/www.lucent.com\/minds\/techjournal\/summer_96\/paper11\/ \nCoplien, J.O., Schmidt, D.C. (Eds.), 1995. Pattern Languages of Program \nDesign, Addison-Wesley, Reading, Mass. \nFriend, J.K., Jessop, W.N., 1969. Local Government and Strategic Choice: \nAn Operational Research Approach to the Process of Public Planning, \nTavistock Publications, London. \nGabriel, R.P., 1996. Patterns of Software: Tales from the Software \nCommunity, Oxford University Press, New York. \nGamma, E., Helm, R., Johnson, R., Vlissides, J., 1994. Design Patterns: \nElements of Reusable Object-Oriented Software, Addison-Wesley, \nReading, Mass. \n \n\u223c  14  \u223c \nHarary, F., Jessop, N., Luckman, J., Stringer, J., 1965. Analysis of \ninterconnected decision areas: an algorithm for project development, \nNature 206 118. \nLuckman, J., 1967. An approach to the management of design, Operational \nRes. Quarterly 18 345\u2013358. \nMeszaros, G., Doble, J., 2000. A Pattern Language for Pattern Writing, \nhttp:\/\/hillside.net\/patterns\/Writing\/patterns.html \nParker, D., 2001. The Use of Patterns in Management, Operational \nResearch Society: OR43, Bath (conference paper). \nParker, D., 2000. The Use of Patterns in Management. University of \nDurham Business School (MBA dissertation). \nRosenhead, J. (Ed.), 1989. Rational Analysis for a Problematic World: \nProblem Structuring Methods for Complexity, Wiley, Chichester. \nStalingaros, N.A., 2000. The structure of pattern languages, Architectural \nResearch Quarterly 4 149\u2013161. \nThomas, J.B., Sussman, S.W., Henderson, J.C., 2001. Understanding \n\u201cstrategic learning\u201d: linking organizational learning, knowledge \nmanagement, and sensemaking, Organizational Science 12 331\u2013345. \nTyre, M.J., von Hippel, E. (1997) The situated nature of adaptive learning \nin organizations, Organization Science 8 71\u201383. \nVlissides, J.M., Coplien, J.O., Kerth, N.L. (Eds.), 1996. Pattern Languages \nof Program Design 2, Addison-Wesley, Reading, Mass. \nZwicky, F., 1967. The morphological approach to discovery, invention, \nresearch and construction, In: Zwicky, F., Wilson, A.G. (Eds.), New \nMethods of Thought and Procedure, Springer-Verlag, New York. \n \n \n\u223c  15  \u223c \n \n \n \n \nforms as they \nexist \n \n \n \n \nshared \nmorphology selection \ngeneration of \nalternatives \nimplementation \n \n \npractice \n \n \nanalysis \n \n \n \n \n \n \n \n \nFigure 1. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\u223c  16  \u223c \n \n \n \n \n \n \n \nPattern 32: Magic Numbers \n \n \nIssue: What is a reasonable team size? \n \n \nContext: The project is large enough to require decomposition into a number of                  \nspecialised work units, and possibly a number of levels. [Precursor Role               \nClarity\/Expertise?] \n \n \nForces: Too few people per team is inefficient in spreading responsibility, and for             \ncommunication. \n \nToo many people implies a scope that is too big for one person to manage. \n \n \nSolution: 1. Working groups typically operate with a span of 2-4 people. \n \n2. When applied at higher levels, the span may be up to 8 people. \n \n 3. The template can be applied to the number of active projects per team. \n     Experience has shown that this is typically 2-3. This provides diversity \n     without over-stretching resources.  \n \nThis pattern must be used carefully in conjunction with Role Clarity [Pattern31] \nto ensure that teams are reasonably well decoupled, but with Integration  \n[Pattern 35] and Gatekeepers [Pattern 62a] to moderate the information flow. \n \n \nNew Context: The group has a reasonable trade-off between efficiency and communication. \n \n \nBackground: This is learning taken from experience on projects X1 and X2. \n \n \n \n \nFigure 2.  Pattern for finding the size of a team (Parker, 2000) \n \n\u223c  17  \u223c \n \n \nPATTERN: STEALING COURSES \n \n \nProblem Need to develop a new curriculum quickly and with limited resources. \n \n \nContext A new degree has been initiated against a tight deadline. Course \ndocumentation must be prepared such that the success of the programme is \nassured. Taking course outlines prepared by others seems a good idea. \n \n \nForces Appropriating successful courses certainly cuts time and probably assures \nsuccess (acceptance, at least). Danger of being seen as copyists. Lack of \nownership. \n \n \nSolution Find a similar programme offered elsewhere, preferably at an institution of at \nleast similar status as your own. If the general purpose of this programme is \nclose to that of the programme you are to design examine the constituent \ncourses and copy any that meet your needs. Repeat for all potential donor \nprogrammes. Once all courses are amassed check for linkages and update if \nnecessary. Rewrite your statement of purpose (aims, objectives, etc.). \n \n \nResulting \nContext \nThis process allows for the speedy assembly of a programme. An important \npart is to examine the whole and make it coherent and your own. You may \nfind some gaps and so need to design a few courses from scratch. Using this \npattern you should have a programme that will easily gain recognition but not \none that is distinctive or innovative.  \n \nDistinctiveness may be acquired via activities and characteristics outwith the \ncourse syllabuses; by where and how the programme is delivered, for instance. \n \nYou will have minimised the resources used. You will need to find ways to \ngive staff ownership of the programme to encourage their commitment.  \n \n \nRationale There is no need to reinvent the wheel. Courses can be taken from a number \nof donor programmes and assembled for your purpose provided that the \ncontexts are similar or, if not, the differences are understood and account \ntaken of them. This is a well used design method, though often \nunacknowledged.  \n \n \n \n \nFigure 3.  Pattern for helping programme development.\n \n\u223c  18  \u223c \n \n \n \n \n \n \n \n \n \n \n \n \n \nPATTERN: CULTURE \n \n \nProblem Culture misfit: dominant culture too powerful \n \n \nContext The dominant culture is imposing its values on the weaker. \n \n \nForces Both organisations have been driven by different cultures which are distinct, \ndifferent and succesful in their own contexts. The imposition of the dominant \nculture is causing or contributing to falling profits and plummeting morale. \n \n \nSolution Take the best practices from both cultures. \n \n \nResulting \nContext \nBoth organisations will have the best elements of both cultures leading to \nimproved work practice and happier staff. \n \n \nRationale This will work because it recognises the distinct features of both organisations \nwhich in their own context bought comparative advantage and success. \n \n \n \n \nFigure 4.  Pattern derived from case study analysis. \n \n \n \n\u223c  19  \u223c \n \n \nPATTERN 6:  FINDING EXCEPTIONS \n \n       Problem  How do you decide that you have found something exceptional? \n \n       Context We wish to recognise particularly good performance so that it may be rewarded or \ndisseminated. Alternatively, particularly poor performance is to be remedied. (This is \nsometimes called managing by exception.) \n \n         Forces Deciding too readily that we have seen some exceptional behaviour results in unjustified action \nwhich may mean that time or money has been spent unnecessarily. Being too cautious about \nidentifying the unusual risks missing something of significance. \n \n  Discussion An observed behaviour may be thought exceptional because it is by some distance different \nfrom the behaviour of similar things (the value of sales made a member of a sales team \ncompared to the rest of the team). This difference could be either the result of meaningfully \nexceptional behaviour (good sales technique) or it could be just the lucky (or unlucky) extreme \nof random behaviour and signify nothing at all. In deciding which of these effects is the more \nplausible explanation it is usual to think of just one sort of error of classification: deciding that \nbehaviour is meaningfully exceptional when it is not {Pattern 7: Mistakes}. \n \n      Solution Begin by assuming that some performance measure (sales, in this illustration)  varies from \nperson to person for reasons that have nothing to do with the individual: it could be that a client \norganisation just happens to land a big contract and consequently needs more from your \norganisation, so the sales go to whoever happens to look after this client. The distribution of \nsales is known and described by a probability distribution such as: \n \n \n \n \n \n \n \n \n \n \n \n \n \n  \nIf we define some values so that sales above an upper limit, H, are said to be exceptionally high \nand, further, meaningfully high, then the tail probability is the risk that those high sales occurred \njust by chance and the attribution of meaning to them is not justified. We could similarly define \nsome lower limit, L, to identify poor sales. We may sometimes wish to define exceptionally \ngood and bad performance and so use both tails, or sometimes just the good or the bad, and so \njust use one tail.  \n \nEither we can set the limit(s) and see whether the risk is acceptable, or we could set the \nacceptable risk and see what the limit(s) ought to be. \n \nRemember the difference between exceptional and meaningful. Basketball players tend to be \nexceptionally tall but we seek no meaningful causation for this. To set limits to identify \nmeaningful exceptions it is always necessary that we believe there is some explanation other \nthan randomness which might account for what we see. \n \nHL\nunexceptional exceptionally \nhigh \nexceptionally\nlow \nrisk of wrongly \nidentifying high sales \nas meaningful \nsales \nrisk of wrongly \nidentifying low sales \nas meaningful  \n \nFigure 5.  A statistical pattern. \n \n \n\u223c  20  \u223c \n"}