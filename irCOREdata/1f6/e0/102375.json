{"doi":"10.1109\/JSAC.2003.819978","coreId":"102375","oai":"oai:epubs.surrey.ac.uk:1834","identifiers":["oai:epubs.surrey.ac.uk:1834","10.1109\/JSAC.2003.819978"],"title":"Dynamics of key management in secure satellite multicast","authors":["Howarth, Michael","Iyengar, S","Sun, Zhili","Cruickshank, Haitham"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-02","abstract":"<p>Security is an important concern in today's information age and particularly so in satellite systems, where eavesdropping can be easily performed. This paper addresses efficient key management for encrypted multicast traffic transmitted via satellite. We consider the topic of encrypting traffic in large multicast groups, where the group size and dynamics have a significant impact on the network load. We consider life cycle key management costs of a multicast connection, and show for a logical key hierarchy (LKH) how member preregistration and periodic admission reduces the initialization cost, and how the optimum outdegree of a hierarchical tree varies with the expected member volatility and rekey factor. This improves network utilization, but encryption at the network layer can pose problems on satellite links. We, therefore, propose and analyze an interworking solution between multilayer Internet protocol security (IPSEC) and LKH that also reduces key management traffic while enabling interworking with performance enhancing modules used on satellite links.<\/p","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC, 445 HOES LANE, PISCATAWAY, NJ 08855 USA","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:epubs.surrey.ac.uk:1834<\/identifier><datestamp>\n      2017-10-31T14:03:18Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><setSpec>\n      6469766973696F6E733D656E67616E64706879736963616C736369656E636573:656C656374726F6E6963656E67696E656572696E67:63637372<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/epubs.surrey.ac.uk\/1834\/<\/dc:relation><dc:title>\n        Dynamics of key management in secure satellite multicast<\/dc:title><dc:creator>\n        Howarth, Michael<\/dc:creator><dc:creator>\n        Iyengar, S<\/dc:creator><dc:creator>\n        Sun, Zhili<\/dc:creator><dc:creator>\n        Cruickshank, Haitham<\/dc:creator><dc:description>\n        <p>Security is an important concern in today's information age and particularly so in satellite systems, where eavesdropping can be easily performed. This paper addresses efficient key management for encrypted multicast traffic transmitted via satellite. We consider the topic of encrypting traffic in large multicast groups, where the group size and dynamics have a significant impact on the network load. We consider life cycle key management costs of a multicast connection, and show for a logical key hierarchy (LKH) how member preregistration and periodic admission reduces the initialization cost, and how the optimum outdegree of a hierarchical tree varies with the expected member volatility and rekey factor. This improves network utilization, but encryption at the network layer can pose problems on satellite links. We, therefore, propose and analyze an interworking solution between multilayer Internet protocol security (IPSEC) and LKH that also reduces key management traffic while enabling interworking with performance enhancing modules used on satellite links.<\/p><\/dc:description><dc:publisher>\n        IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC, 445 HOES LANE, PISCATAWAY, NJ 08855 USA<\/dc:publisher><dc:date>\n        2004-02<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/epubs.surrey.ac.uk\/1834\/1\/fulltext.pdf<\/dc:identifier><dc:identifier>\n          Howarth, Michael, Iyengar, S, Sun, Zhili and Cruickshank, Haitham  (2004) Dynamics of key management in secure satellite multicast   IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, 22 (2).  pp. 308-319.      <\/dc:identifier><dc:relation>\n        10.1109\/JSAC.2003.819978<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/epubs.surrey.ac.uk\/1834\/","10.1109\/JSAC.2003.819978"],"year":2004,"topics":[],"subject":["Article","PeerReviewed"],"fullText":"308 IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 22, NO. 2, FEBRUARY 2004\nDynamics of Key Management in\nSecure Satellite Multicast\nMichael P. Howarth, Sunil Iyengar, Zhili Sun, Member, IEEE, and Haitham Cruickshank, Member, IEEE\nAbstract\u2014Security is an important concern in today\u2019s infor-\nmation age and particularly so in satellite systems, where eaves-\ndropping can be easily performed. This paper addresses efficient\nkey management for encrypted multicast traffic transmitted via\nsatellite.\nWe consider the topic of encrypting traffic in large multicast\ngroups, where the group size and dynamics have a significant im-\npact on the network load. We consider life cycle key management\ncosts of a multicast connection, and show for a logical key hier-\narchy (LKH) how member preregistration and periodic admission\nreduces the initialization cost, and how the optimum outdegree of\na hierarchical tree varies with the expected member volatility and\nrekey factor. This improves network utilization, but encryption at\nthe network layer can pose problems on satellite links. We, there-\nfore, propose and analyze an interworking solution between mul-\ntilayer Internet protocol security (IPSEC) and LKH that also re-\nduces key management traffic while enabling interworking with\nperformance enhancing modules used on satellite links.\nIndex Terms\u2014Logical key hierarchy (LKH), multicast, multi-\nlayer Internet protocol security (IPSEC), performance-enhancing\nmodules (PEMs), performance-enhancing proxies (PEPs).\nI. INTRODUCTION\nSATELLITE-BASED broadband Internet protocol (IP) net-works have the potential to deliver multicast services cost\neffectively. However, satellites present some significant security\nchallenges.\n\u2022 Eavesdropping and active intrusion are much easier than in\nterrestrial fixed or mobile networks because of the broad-\ncast nature of satellites.\n\u2022 Satellite systems are resource-constrained, particularly in\nthe areas of limited transmission power (and, thus, channel\ncapacity), and limited processing and switching capability\nfor satellites with on-board processing.\n\u2022 Satellite channels experience high bit-error rates, which\ncan result in packet loss and the loss of security synchro-\nnization.\nSecurity systems for satellite data, thus, have to be optimized\nto take account of these limitations, in particular the need for\nconfidentiality and the requirement to use satellite resources ef-\nficiently. Geostationary satellites also suffer from a long prop-\nagation delay, and security systems must, therefore, add only\nminimal delays to traffic.\nManuscript received December 15, 2002; revised July 1, 2003 and September\n20, 2003. This work was supported in part by the EU Information Society Tech-\nnologies Program under the GEOCAST Project IST-1999-11754.\nThe authors are with the Centre for Communication Systems Research,\nUniversity of Surrey, Guildford, Surrey GU2 7XH, U.K. (e-mail: m.howarth@\nsurrey.ac.uk; s.iyengar@surrey.ac.uk; z.sun@surrey.ac.uk; h.cruickshank@\nsurrey.ac.uk)\nDigital Object Identifier 10.1109\/JSAC.2003.819978\nIn this paper, we consider scalability of multicast security ser-\nvices, focusing on issues surrounding confidentiality on satel-\nlite links, while minimizing satellite resource usage. A partic-\nular issue in securing multicast connections is that of key man-\nagement; this needs to scale effectively, particularly given the\nlarge number of multicast recipients (potentially of the order of\nmillions) that are expected in satellite networks. A number of\nscalable approaches have been proposed, and one in particular,\nlogical key hierarchy (LKH) is analyzed in detail in this paper.\nPerformance-enhancing modules (PEMs) are used to enhance\nperformance on satellite links. One type of PEM is a perfor-\nmance-enhancing proxy (PEP) [6], which can be used to im-\nprove the performance of protocols on network paths such as\nsatellites or wireless links, where native performance suffers\ndue to the characteristics of the link or subnetwork. PEMs are\noften considered in the context of unicast transmission control\nprotocol (TCP) traffic streams but are also applicable to mul-\nticast traffic. For example, an audio multicast stream may be\ntransmitted using real-time transport protocol (RTP) over user\ndatagram protocol (UDP): Since the data content of each packet\nis small, the transmission efficiency can be increased by using\nPEMs to compress the headers on the satellite link. Another ex-\nample is implementing forward error correction (FEC) mecha-\nnisms in the PEMs to reduce the satellite link\u2019s effective error\nrate for a multicast channel. PEMs generally read and change\nthe content of the transport layer header and, thus, they can usu-\nally only be used when the transport header is not encrypted.\nThus, network layer security mechanisms, such as Internet pro-\ntocol security (IPSEC), that encrypt the entire transport layer\npacket are incompatible with the use of these PEMs in satel-\nlite-based communications: IPSEC hides all details of higher\nlayer protocols and makes it impossible for any intermediate\nnode to process this information. Consequently, any service that\nrequires knowledge of the transport layer header content any-\nwhere other than in the end host cannot function if IP packets\nare encrypted.\nA. Research Contributions\nWe consider key management, and in particular the life cycle\nkey distribution costs. We take account not only of the cost of\nrekeying when users join or leave an established group, but we\nalso consider the costs of building a tree during initialization of\na multicast group. We show for LKH how user preregistration\nand periodic admission reduces this initialization cost, and how\nthe optimum outdegree of a hierarchical tree varies with the ex-\npected user volatility and rekey factor. Other authors have shown\n[22] that when a rekey occurs after each join or depart, a lower\n0733-8716\/04$20.00 \u00a9 2004 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \nHOWARTH et al.: DYNAMICS OF KEY MANAGEMENT IN SECURE SATELLITE MULTICAST 309\nbound on the worst-case key update costs is a logarithmic vari-\nation with group membership . Our work, on the other hand,\nwhilst conforming to this logarithmic function, shows how the\noptimum value of the tree outdegree varies with the expected\nrekey frequency, taking into account both the cost of initially\nbuilding the tree and the cost of rekeying over the lifetime of the\nmulticast group. In [19], the optimum number of keys assigned\nto each group member is related to the probability of deletion\nof the individual member. Here, we assume each member is\nequally likely to join or leave the group, giving a tree with equal\nnumbers of keys for each member.\nAs described above, PEMs can be incompatible with\nend-to-end security systems and pose a particular problem\nfor satellite systems. Multilayer IPSEC has been proposed as\nan approach that allows authorized network devices to access\npacket headers, while retaining end-to-end privacy of the data\ncarried in the packets. In this paper, we propose and analyze an\ninterworking solution between multilayer IPSEC (ML-IPSEC)\nand LKH and show how the key management traffic on satellite\nlinks can be further reduced using this approach. Finally,\nthe impact of ML-IPSEC and LKH on the life cycle costs is\nconsidered.\nB. Outline of Paper\nThis paper is organized as follows. Section II reviews related\nwork in end-to-end satellite security and in key management for\nmulticast group security. In Section III, we briefly review the op-\neration of LKH in key management and present an analysis of\nlife cycle key distribution costs. In Section IV, we consider mul-\ntilayer IPSEC and how it supports multicast security in satellite\nsystems. In Section V, we demonstrate how it can be combined\nwith LKH to provide efficient and secure key management.\nII. RELATED WORK: MULTICAST KEY MANAGEMENT\nThe process of securing and performing key management for\nunicast connections is well understood [8], [13], [18], but mul-\nticast security is more complex. In principle, a multicast con-\nnection could be regarded from the security perspective as a set\nof unicast connections, but this approach does not scale well for\nlarge groups, especially at the scales expected in satellite sys-\ntems. Protocols that manage the process of distributing keys in\na multicast environment are under development [2], [5], [9].\nThe principal actors in multicast key management are the\ngroup controller (GC) and group members (GMs). The former\nis responsible for creating and distributing keys and rekeying\n(to maintain security) as appropriate; the latter are entities with\naccess to the group keys. The GC need not be colocated with\nthe multicast data source. Each GM has an initial one-to-one\nsecure association with the GC (using techniques such as\nDiffie\u2013Hellman to create a shared secret known only to the two\nparties; or a preshared secret; or secret exchange using a public\nkey system [20]). These secure associations are then used to\ncreate and share information about a group secure association\nbetween the GC and all GMs. The ultimate aim of the group\nsecure association is to ensure that a single key, usually called\nthe group traffic encryption key (GTEK), is known to the GC\nand all GMs and to no entity outside the group: This key can\nthen be used to encrypt the data multicast within the group.\nThe multicast group may need to be rekeyed for any of a\nnumber of reasons.\n1) The group key is usually updated regularly (typically\nevery few seconds or minutes) to reduce the probability\nof successful cryptanalysis of the encrypted traffic.\n2) The group key may also need to be changed on demand\nif it is determined that the key has been compromised.\n3) Rekeying may be required when a new member joins the\nmulticast group. This ensures that the member cannot de-\ncrypt encoded traffic sent prior to their joining (backward\nsecrecy).\n4) Rekeying may be required when an existing member\ndeparts from the multicast group. This ensures that the\nmember cannot decrypt encoded traffic sent after they\nleave (forward secrecy).\nFor large multicast groups that have frequent membership\nchanges, the cost of rekeying can be significant, since satel-\nlite resources are expensive. Scalable rekeying is, therefore, an\nimportant problem that needs to be considered in order to sup-\nport secure communications for large dynamic groups. We now\nconsider rekey techniques for each of the four functions listed\nabove.\nSeveral techniques exist for rekeying 1) and 3): Two options\nare for the new group key to be encrypted with either a) the old\ngroup key or b) a separate \u201ccontrol\u201d key negotiated during ses-\nsion establishment. For 2) and 4), a different rekeying approach\nis required since the old key is known by at least one user who\nis no longer to be a recipient of the multicast transmission. We\nnow consider options for this rekeying.\nA number of multicast key management approaches have\nbeen developed with the objective of improving the scalability\nof group secure associations by ensuring that parameters grow\nmore slowly than the group size . Parameters considered in-\nclude GC encryption effort and memory requirements, network\ntraffic, and GMs\u2019 decryption effort and memory requirements.\nKey management techniques include a flat system, Iolus [14],\nLKH [23], [24], and Kronos [21].\nIn the simplest approach, a flat system, the GC shares a\nunique key with each individual GM. The GTEK can then be\nsent to the members by encrypting it times with each of the\nunique keys. Thus, both the GC key encryption load and the\nrekey traffic increase linearly with . It should be noted that\nfor this flat system the broadcast nature of a satellite does not\nprovide any benefit compared with a terrestrial network, since\nthe encrypted messages sent to the GMs are all different.\nIn Iolus [14], a multicast group is partitioned into several sub-\ngroups. The GC manages a tree of group subcontrollers, each\nof which manages a subset of the group membership. The ad-\nvantage of this mechanism is that the rekey effort is shared be-\ntween the subcontrollers, but the drawbacks of this approach are\nthe large number of subcontrollers required in large groups, the\nneed to trust the subcontrollers, and the delay caused by the need\nto rekey traffic as it passes through each subcontroller.\nLKH, described in more detail below, uses a set of keys ar-\nranged in a tree structure to reduce the cost of rekeying. For a\nfully populated tree of outdegree and depth , the number of\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \n310 IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 22, NO. 2, FEBRUARY 2004\nFig. 1. Key hierarchies. (a) N pairwise keys. (b) Hierarchical tree.\nrekeys transmitted on a member compromise is ;\nthis compares favorably with the cost of for a flat\nsystem. The system is also robust against collusion, in that no\nset of users together can read any message unless one of them\ncould have read it individually. Improvements to LKH for the\nspecific case of binary trees have also been proposed\nin one-way function trees [4], [15], and by [7]: Both these ap-\nproaches reduce the number of rekeys required in the event of\ncompromise of a user from to .\nKronos is a further approach to reducing rekey traffic in large\ndynamic multicast groups. This approach recognizes that if two\nusers depart and cause two rekey events to occur, some of the\nkeys that change will be common to the two rekey events. Rekey\ntraffic can, therefore, be saved by bundling changes together and\nrekeying, perhaps every few seconds.\nIII. LKH LIFE CYCLE COSTS\nA. Description\nBefore analyzing LKH in detail, we initially briefly re-\nview the simple flat key management system. Consider\npairwise keys each shared between the GC and one of the\nGMs [Fig. 1(a)]: This represents the flat system described in\nSection II. The pairwise keys are represented by the circles,\nand the group key is represented by the box labeled \u201cA.\u201d If the\ngroup key is changed, the new group key has to be encrypted\nwith each member\u2019s unique pairwise key and then sent to that\nmember; each of these encrypted keys is represented by one\nof the lines drawn in Fig. 1(a). Thus, for members, a total\nof encrypted keys are generated and transmitted across the\nsatellite network. In this case, the key management network\ntraffic volume is independent of whether the keys are unicast,\nmulticast, or broadcast (although for good security the keys\nshould be transmitted to as few entities as feasible).\nWe contrast this with LKH, where a tree of keys is used.\nThe tree is logical and does not have any mapping onto a phys-\nical network layout: The only physical entities remain the GC\nand the GMs, and LKH is highly suited to satellite systems. In\nFig. 1(b), the keys are labeled A through O, each circle again\nrepresents a member\u2019s pairwise key, and the lines each repre-\nsent encrypted keys sent across the network, as we shall now see.\nEach member holds the keys on the tree path from the member\u2019s\npairwise key (at a tree leaf) back to the root. Suppose now that\nmember 11 needs to be deleted from the multicast group. Then,\nall of the keys held by member 11 (keys F, K, N, O) must be\nchanged and distributed to the members who need them, without\npermitting member 11 or other unauthorized entities to obtain\nthem. To do this, we must replace the keys held by member 11,\nproceeding from the bottom up.\nThe GC chooses a new key for the lowest node (not the leaf,\nfor which a unicast secure association exists between the GC\nand the GM) and then transmits it encrypted with the appropriate\nchild keys. Thus, for this example, the first key replaced is key\nF and this new key will be sent encrypted with member 12\u2019s\nunique pairwise key. The second key replaced is key K, which\nis sent encrypted with the newly replaced key F (for member\n12) and also sent encrypted with key E (for members 9 and 10).\nKey N is then sent encrypted with the newly replaced key K (for\nmembers 9, 10, and 12) and also encrypted with key L (shared\nby members 13\u201316). Finally, key O is replaced, and this new key\nis sent encrypted with the newly replaced key N (for members\n9, 10, and 12\u201316) and also separately is encrypted with key M\n(shared by members 1\u20138). Since we are proceeding from the\nbottom up, each of the replacement keys will have been replaced\nbefore it is used to encrypt another key. The encrypted keys\nneed to be multicast or broadcast (noting that as above, for good\nsecurity the keys should only be transmitted within the group),\nand those keys that are encrypted with pairwise keys may be\nunicast.\nThe seven keys sent represent a significant saving on the 16\nkeys that would need to be transmitted using the flat key system\nof Fig. 1(a). In general, the number of transmissions required is\nthe sum of the degrees of the replaced nodes. In a fully populated\n-ary tree in which a GM sits at depth , this is a total of\ntransmissions.\nThe GTEK, used to encrypt data traffic, may, depending on\nthe group security policy, either be key O [Fig. 1(b)], or it may\nbe separately encrypted using key O and transmitted to all GMs.\nIn the analysis that follows, we adopt the former approach and\nchoose not to include the GTEK in the rekey count.\nB. Life Cycle Costs\nThere is an implicit assumption in the LKH literature that user\njoin\/leave rekeying is the principal cost of key management,\nwith tree initialization costs being negligible. However, applica-\ntions exist (such as file transfer), where the user population has a\nlow volatility and, therefore, the tree initialization costs become\nsignificant. Also, and distinctly, there may be some multicast\ngroups (e.g., pay-per-view) where subscribers join the group at\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \nHOWARTH et al.: DYNAMICS OF KEY MANAGEMENT IN SECURE SATELLITE MULTICAST 311\nKey \nhierarchy \nDYNAMIC TREE: example join costs (for k=d=3) \nMember number: 1 2 3 4 5 6 7 8 9 10 11 12 25 26 27 \nPerfect memory: 1 1 1 3 1 1 2 1 1 4 1 1 2 1 1 \nTr\u2019mit keys as required:1 1 1 3 2 2 2 2 2 4 3 3 3 3 3 \nPerfect backward sec: 1 2 3 3 4 5 4 5 6 4 5 6 7 8 9 \nDYNAMIC TREE: generic tree of outdegree k and depth d \nMember number: 1 2 ..  k k+1 k+2 .. 2k  .. k2 k2+1 ..  kd-k+1 .. kd \nPerfect memory: 1 1 ..  1 3 1 1  .. 1 4 ..  2 .. 1 \nTr\u2019mit keys as required:1 1 ..  1 3 2 2  .. 2 4 ..  d .. d \nPerfect backward sec: 1 2 ..  k 3 4 ..2+k  .. 2k 4 ..  kd-k+1 ..  kd \nM \nK J L \nB A C D I \nGroup key \nMembers \n. . . \n. . . \n. . . \n. . . \nSTATIC TREE: generic tree of outdegree k and depth d \nMember number: 1 2 ..  k k+1 k+2 .. 2k  .. k2 k2+1 ..  kd-k+1 .. kd \nPerfect memory: d 1 ..  1 2 1 1  .. 1 3 ..  2 .. 1 \nTr\u2019mit keys as required:d d ..  d d d d  .. d d ..  d .. d \nPerfect backward sec: d d+1..d+k-1  d+1 ..   ..d+2k-2 4 ..  kd-k+1 .. kd \nSTATIC TREE: example join costs (for k=d=3) \nMember number: 1 2 3 4 5 6 7 8 9 10 11 12 25 26 27 \nPerfect memory: 3 1 1 2 1 1 2 1 1 3 1 1 2 1 1 \nTr\u2019mit keys as required:3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \nPerfect backward sec: 3 4 5 4 5 6 5 6 7 4 5 6 7 8 9 \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n. . . \n \nFig. 2. Tree initialization approaches.\naround the same time, with a high demand on the establishment\nof the group secure association.\nFor our analysis, we divide the life cycle of a secure group\nconnection into the following phases.\n\u2022 Initialization: Members are authenticated to the GC and\nare issued with keys, including the group key used to en-\ncrypt data.\n\u2022 Data transfer: This comprises two rekey activities:\n\u2022 The GTEK is updated regularly to reduce the prob-\nability of successful cryptanalysis of ciphertext;\n\u2022 Rekeying occurs when members join or depart to\nensure perfect backward or forward secrecy, respec-\ntively, or when a key or member is compromised.\n\u2022 Termination: Once the data transfer is complete the secure\nconnection ends. We assume that the keys are simply dis-\ncarded, since they are of no further use.\nWe assume in this analysis that the entire LKH tree is popu-\nlated during the initialization phase, that once the initialization\nphase is complete the LKH tree remains balanced [16], and that\nit remains nearly full as members join and depart.\nC. Analysis\nAs each GM joins a group the member is authenticated and\na pairwise key for secure communication with the GC is estab-\nlished using a mechanism that in line with current approaches\n[9] is out of scope of this work. Our metric is the number of en-\ncrypted keys transmitted by the source: Ignoring protocol over-\nheads, this is proportional to the key network traffic. For secure\nmulticast over satellite, where resources are limited, it is partic-\nularly important to minimize the key management traffic costs.\nWe now consider the initialization cost. Three approaches are\nconsidered, in increasing order of cost, with generic cases and\nnumerical examples being shown in Fig. 2. For each of the three\napproaches we may either consider a static tree, in which the\ntree depth is assumed fixed in advance, or we may consider\na dynamic tree, in which the tree depth grows as the number of\nmembers increases, the depth being one when there are not more\nthan members, two when the number of members lies in the\nrange to inclusive, and so forth. The initialization costs\nfor each of the three approaches are as follows.\nCase 1) Assume each receiver has perfect memory: Once a\ngiven key has been transmitted, any receiver that is\ngiven the encoding key (even at a later time) can\ndecrypt the encoded key. Although this assumption\nis not expected to be valid in practice, it provides\na useful comparison in this analysis since it has the\nlowest initialization cost. As will be seen later, it also\ncorresponds to a useful category of tree building.\nIt is shown in Appendix A that for both static and\ndynamic trees, the total number of keys transmitted\nto admit users to the group is\n(1)\nCase 2) Transmit all the keys needed by a receiver at the\ntime the receiver joins the group. Users do not\nrequire memory of previous transmissions and may\neven be switched off prior to joining the group.\nKeys are, therefore, in general, transmitted multiple\ntimes, when different users require them. In this\ncase, the total number of keys transmitted to admit\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \n312 IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 22, NO. 2, FEBRUARY 2004\nmembers to the group is with\nthe exact expressions for static and dynamic trees,\nrespectively, being (Appendix A)\n(2)\n(3)\nCase 3) Rekey on each join: This ensures perfect backward\nsecrecy is maintained as the tree is initialized. To en-\nsure perfect backward secrecy as each member joins\nthe group, not only must the group key be changed,\nbut also, the keys that enable the joining receiver to\ndecrypt ancestor keys must also be changed: If this is\nnot done, then a newly joined receiver with memory\ncould obtain the previous group key and, therefore,\ndecrypt transmissions that occurred prior to the user\njoining the group. The total number of keys trans-\nmitted to admit users is also , with\nthe expressions for static and dynamic trees being\n(Appendix A)\n(4)\n(5)\nD. Implications\nThe perfect memory approach has the lowest tree initializa-\ntion cost. It also corresponds to a useful way of building a mul-\nticast tree: consider a multicast session that is advertised [per-\nhaps using the session announcement protocol (SAP)] and for\nwhich potential members are invited (or required) to register in\nadvance. Then, at the time the session is due to start the source\nknows the number of members and builds the tree in the fol-\nlowing order: All lowest level keys ( , Fig. 2) are sent\nencrypted with each recipient\u2019s pairwise key, then the second\nlevel keys ( , Fig. 2), and so on up the tree. Each receiver\ncan decrypt each key as it is received and the tree initialization\ncost (1) is .\nThe second approach corresponds to members arriving inter-\nmittently. In this case, the source cannot assume that a newly\njoining receiver has any key information, and all the keys re-\nquired by each receiver have to be transmitted with the initial-\nization cost being .\nThe cost [(2), (3)] can, however, be reduced if joining re-\nceivers are grouped together (perhaps every few seconds) so that\nkeys can be transmitted together. For example, if (Fig. 2) mem-\nbers 25 and 26 join separately, six keys are sent. However, if\nthey join simultaneously only four keys are sent. This is similar\nto periodic rekeying [21], and since here we are predominantly\ninitializing new users, the required set of keys will be highly\ncorrelated, and so significant savings can be realized. The sav-\nings for periodic rekeying have been quantified by [25].\nE. Volatility\nWe now consider the life cycle cost of the group connection,\nwhich we define in this section as the sum of the cost of ini-\ntializing the LKH tree and the cost of rekeying during the data\ntransfer phase when GMs join or depart. We further define the\nvolatility as the mean number of rekeys per GM. Thus, a value\nof means that on average there is one rekey operation\nper GM during the lifetime of the secure transmission. The cost\nof each such rekey is when a GM departs\nor when a GM joins: these functions have a\nminimum value at (noting that can only take integer\nvalues). However, when we include both the initialization and\nrekey costs, the optimum value of that gives a minimum life\ncycle cost is different. For each initialization approach, the life\ncycle cost for static trees is\n(6)\n(7)\nTo ensure perfect backward secrecy, we include the rekey cost\non a user join . Assuming equal number of joins and\ndeparts\n(8)\nWe differentiate these expressions (Appendix A) and use\nNewton\u2013Raphson iteration to find the minimum cost as a\nfunction of for a given . Fig. 3 shows each cost as a function\nof for dynamic trees and static trees. To illustrate the effect of\noptimizing , curves are drawn both for a tree of fixed outdegree\nand for the case when the tree outdegree is optimized for\nthe given volatility. Fig. 4 shows what this optimum value of\nis for each value of volatility . Fig. 5 shows how the total cost\nvaries as a function of for two example values of .\nWe observe the following.\n\u2022 Preregistration has the lowest cost.\n\u2022 The intermittent arrival cost can be reduced significantly\nat low volatility by optimizing (the optimum values are\nat 10 and at 10 for 10\nto 10 , Fig. 4).\n\u2022 Backward secrecy has the highest cost.\n\u2022 The life cycle costs are almost identical for static and dy-\nnamic trees (static trees are, therefore, used for Figs. 4 and\n5).\n\u2022 At low volatility, there are significant cost differences be-\ntween the optimum value of and the conventional value\nor , for case 1 (perfect memory receivers)\nand case 2 (transmit keys at the time the receiver joins the\ngroup) (Fig. 3).\n\u2022 For frequent rekeying , the curves converge and\nthe cost is independent of the initialization approach.\nAn example, low volatility population is a corporate video-\nconference transmitted to employees, who might be expected\nnot to leave the conference frequently. A significant example\nof zero volatility is a file transfer: It is not meaningful to\nleave and rejoin since this will result in data loss. In this\ncase, the volatility and the optimum key hierarchy\nis flat. Indeed, at low volatility the Case 1 preregistration\nperfect memory receivers and Case 2 intermittent\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \nHOWARTH et al.: DYNAMICS OF KEY MANAGEMENT IN SECURE SATELLITE MULTICAST 313\n10\u22124 10\u22123 10\u22122 10\u22121 100\n102\n105\nReceiver volatility, \u03b1\nTo\nta\nl c\nos\nt \/\n k\ney\n tr\nan\nsm\niss\nio\nns\nN = 1000 receivers\n3. Perfect backward secrecy (intermittent arrivals), k=3\n3.     \"     \"     \"     k optimized for minimum cost\n2. Transmit keys for each rxr (intermittent arrivals), k=3\n2.     \"     \"     \"     k optimized for minimum cost\n1. Perfect memory receivers (pre registration), k=3\n1.     \"     \"     \"     k optimized for minimum cost\nDynamic tree \n10 3\nReceiver volatility, \u03b1\nTo\nta\nl c\nos\nt \/\n k\ney\n tr\nan\nsm\niss\nio\nns\nN = 1000 receivers\n3. Perfect backward secrecy (intermittent arrivals), k=3\n3.     \"     \"     \"     k optimized for minimum cost\n2. Transmit keys for each rxr (intermittent arrivals), k=3\n2.     \"     \"     \"     k optimized for minimum cost\n1. Perfect memory receivers (pre registration), k=3\n1.     \"     \"     \"     k optimized for minimum cost\nStatic tree \n(a)\n(b)\n10\u22124\n104\n105\n10\u22123 10\u22122 10\u22121 100\n104\nFig. 3. Life cycle cost as a function of volatility\u000b. (a) Dynamic tree. (b) Static\ntree.\narrival curves with optimized converge to the same cost\n(Fig. 3).\nF. Group Key Update\nThe life cycle cost can also be considered taking into account\nrekeying to prevent cryptanalysis. In this section, we therefore\nredefine the life cycle cost as the sum of the cost of initializing\nthe LKH tree and the cost of regular GTEK updates during the\ndata transfer phase. Let the lifetime of the group be , and let\nthe group update period be . Then, the total number of changes\nof the group key over the life of the group is . If each new\ngroup key is encrypted with each of its children and then mul-\nticast (e.g., , Fig. 2), the total number of\nkeys transmitted due to group key updates is . We define a\nnormalized rekey factor ; thus, a group of 10 users\n10\u22121 100 101\n0\n5\n10\n15\n20\n25\n30\n35\n40\nReceiver volatility, \u03b1\nk \nop\ntim\num\nN = 1000 receivers\n1. Perfect memory (pre-registration)\n2. Transmit keys for each rxr (intermittent arrivals)\n3. Perfect backward secrecy (intermittent arrivals)\n10\u22122\nFig. 4. Optimum value of tree outdegree k as function of volatility \u000b.\n0 2 4 6 8 10 12 14 16 18 20\nk: LKH tree outdegree\nTo\nta\nl c\nos\nt \/\n k\ney\n tr\nan\nsm\niss\nio\nns\nalpha = 0.1\nN = 1000 receivers\n1. Perfect memory (pre-registration)\n2. Transmit keys for each rxr (intermittent arrivals)\n3. Perfect backward secrecy (intermittent arrivals)\n0 5 10 15 20 25 30 35 40 45 50\nk: LKH tree outdegree\nTo\nta\nl c\nos\nt \/\n k\ney\n tr\nan\nsm\niss\nio\nns\nalpha = 0.01\nN = 1000 receivers\n1. Perfect memory (pre-registration)\n2. Transmit keys for each rxr (intermittent arrivals)\n3. Perfect backward secrecy (intermittent arrivals)\n103\n104\n105\n103\n104\n105\nFig. 5. Cost sensitivity for various values of volatility \u000b.\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \n314 IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 22, NO. 2, FEBRUARY 2004\n10\u22123 10\u22122 10\u22121 100 101\n103\n104\n105\nRekey factor, \u03b2\nTo\nta\nl c\nos\nt \/\n k\ney\n tr\nan\nsm\niss\nio\nns\nN = 1000 receivers\n3. Perfect backward secrecy (intermittent arrivals), k=3  \n3.     \"     \"     \"     k optimized for minimum cost     \n2. Transmit keys for each rxr (intermittent arrivals), k=3\n2.     \"     \"     \"     k optimized for minimum cost     \n1. Perfect memory receivers (pre-registration), k=3       \n1.     \"     \"     \"     k optimized for minimum cost     \n10\u22124\nFig. 6. Life cycle cost as a function of rekey factor \f.\nFig. 7. Optimum value of tree outdegree k as function of rekey factor \f.\nwith a lifetime of 3 h and group key update period of 10 s has a\n10 . The life cycle costs are then, for example, for perfect\nmemory\/preregistration\n(9)\nwhich has a minimum with respect to when .\nThe life cycle costs are shown as a function of for static trees\nin Fig. 6, and the optimum value of as a function of is shown\nin Fig. 7. We note the following.\n\u2022 At low , when the number of rekeys per GM is low, the\noptimum value of is .\n\u2022 At high , rekeying to prevent cryptanalysis predominates\nover tree build costs, and so the optimum value of is\n(noting that it is not meaningful for to be less\nthan 2).\nIV. ML-IPSEC\nThe analysis of Section III shows how the network rekey\ntraffic can be optimized, but when we consider multicast on\nsatellite links, the use of traffic encryption at the network layer\ncan be incompatible with PEMs. We, therefore, now proceed\nto consider a mechanism that permits network layer traffic\nencryption with satellite PEMs. In this section, we describe\nML-IPSEC and show how it supports multicast security over\nsatellites while providing enhanced utilization of the satellite\nresources. In Section V, we go on to illustrate a solution that\nprovides interworking between ML-IPSEC and LKH, while\nfurther reducing the key management traffic.\nA. IPSEC\nThe IP security architecture IPSEC provides standardized In-\nternet security at the IP layer [10] and supports interoperable\ncryptographically based security services (i.e., confidentiality,\nauthentication, integrity, and nonrepudiation). It consists of an\nauthentication protocol, authentication header (AH) [11]; a con-\nfidentiality protocol encapsulated security payload (ESP) [12];\nit also includes an Internet security association establishment\nand key management protocol (ISAKMP) [13]. These security\nprotocols are designed for both IP version 4 (IPv4) and IP ver-\nsion 6 (IPv6) environments.\nIPSEC supports two modes: transport and tunnel. In transport\nmode, the IP header is transmitted in clear, and the IP data is\nencrypted. Network devices can, therefore, process the IP data-\ngram. In tunnel mode, the entire datagram (header and payload)\nare encrypted and a new IP header is prefixed to the datagram.\nIn either mode, the transport layer header is encrypted. This,\ntherefore, includes transport headers that contain information\nneeded in the case of satellite gateways to perform performance\nenhancing or other intelligent routing functions.\nThe transport layer may be either unicast (TCP or UDP) or\nmulticast or reliable multicast. Some basic rules for TCP opti-\nmization techniques used in satellite communications and the\nimplications they might have for IPSEC have been pointed out\nin [17]. However, if the optimization techniques involve inter-\nmediate routers or gateways and these require read or write ac-\ncess to the transport layer header or encapsulated data, IPSEC\ncannot be used without some kind of adaptation.\nB. ML-IPSEC\nWork on ML-IPSEC has been carried out for example by\nHughes Network Systems [26]. It has also been considered for\nmobile networks [3], and optimization of multicast over satel-\nlites is still a research issue. ML-IPSEC defines a security rela-\ntionship that involves not only the sender and the receiver of a\nsecurity service but selected intermediate nodes along the traffic\nstream as well. The IP datagram is divided into several zones\nand different protection schemes are applied to each zone (illus-\ntrated in Fig. 8 for IPSEC transport mode). Individual security\nrelationships can be used to cover each zone of the IP datagram\nand then build a new type of secure association (SA) called a\ncomposite SA (CSA). Thus, in Fig. 8, the transport data is en-\ncrypted using key K2, while the transport header is encrypted\nusing key K1.\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \nHOWARTH et al.: DYNAMICS OF KEY MANAGEMENT IN SECURE SATELLITE MULTICAST 315\n \n \nIP \n \nML-IPSEC  Zone map  \n1  2 \nIP \nHeader \nESP Transport TransportESP \nTrailer 1 Data\nESP \n2 \nESP \nAuth 1 2 \nZone 1 (K 1) Zone 2 (K 2) \nTrailer\nESP\nAuthHeader Header\nZone Zone\nTransport\nHeader\nTransport\nHeader\nTransport\nData\nTransport\nDataHeader\nIP\nHeader\nEncrypted\nFig. 8. ML-IPSEC datagram structure (transport mode).\nIP datagram: \nIPSEC datagram: \n \nUplink\n  \n  K2 encryption \nK1 encryption \nUnencrypted \n \nIP header  TCP header TCP data  \nIP header  TCP header TCP data  IPSEC \nheader  \nDownlink \n \nPerformance\nEnhancing \nModule \nPerformance\nEnhancing \nModule \nUntrusted \nNetwork A  \nK1, K2 K1, K2 \nK1 K1 Security \nGateway \nY \nSecurity \nGateway \nX \nUntrusted \nNetwork B  \nEnd-user \nSecurity \nModule B \nEnd-user \nSecurity \nModule A \nFig. 9. ML-IPSEC in a satellite context.\nC. ML-IPSEC for Satellites\nFig. 9 illustrates the use of ML-IPSEC in a satellite environ-\nment [1]. For simplicity, the analysis is initially illustrated here\nin terms of a secure unicast connection. For multicast, the anal-\nysis is identical, although there are potentially many downlink\ngateways. A user in network A wishes to establish a secure link\nwith a node in network B. End-user security module A estab-\nlishes secure associations with end-user security module B and\nalso with the satellite security gateways X and Y. When user\nA sends an IP datagram, it is encrypted using key K1 to en-\ncrypt the transport header and key K2 to encrypt the transport\ncontent. On receipt by the uplink terminal the transport header\nonly is decrypted by security gateway X, any performance en-\nhancing functions such as header compression or spoofing are\nperformed, and the transport header is re-encrypted. The data-\ngram is then transmitted over the satellite link, where security\n \n \n \nEnd-user\nsecurity\nmodule\n \n \n \n                        \n \n                       \n \n  \n \n \n \n Security\ngateway\nSecurity\ngateway\nSatellite terminal Satellite terminal\nEnd-user\nsecurity\nmodule\nSecurity\n ServerTraffic flow\nTrust relationship\nPerformance\nenhancing\nmodule: PEM\nPerformance\nenhancing\nmodule: PEM\nFig. 10. ML-IPSEC trust relationships.\nis assured by the encryption. At the satellite downlink (security\ngateway Y), the transport header can be decrypted using K1,\nand any performance enhancing functions can be performed.\nThe header is re-encrypted by security gateway Y using K1 and\nforwarded. The datagram is fully secured in transit over the un-\ntrusted network B. At end user B, the datagram is decrypted\nusing both K1 and K2.\nIn summary, it can be seen that the security entities at the\nends of a connection (i.e., at the source A and at each destina-\ntion B of a multicast transmission) need both group keys K1 and\nK2. However, intermediate security gateways that are respon-\nsible for performance-enhancing functions only need access to\ngroup key K1 to enable them to read and if necessary change\nthe transport header.\nThis approach raises issues of trust, since there are two dif-\nferent entities which have access to common information. The\nsecurity gateway and PEM are both part of the satellite terminal\nand, thus, under the control of the satellite terminal operator\n(Fig. 10); the end-user security module, on the other hand, is\npart of the end user terminal or application and is controlled\nby the end user. The security gateway needs access to key K1\nand the end user(s) need access to keys K1 and K2. In order to\nachieve this, both the satellite terminal operator and the end user\nneed to trust a secure third party (the security server shown in\nFig. 10). The trusted third party is responsible for generating and\ndistributing the keys and this forms the basis for the end-to-end\nsecurity between users. The model also implies a limited trust\nbetween the user and the satellite terminal operator, where the\nlatter is trusted to have access to the transport headers.\nV. ML-IPSEC AND LKH INTERWORKING\nA. Analysis\nWe now present an extension of LKH as discussed in\nSection III that provides an efficient and scalable key manage-\nment system for multicast ML-IPSEC. The two group keys K1\nand K2 could be managed using two separate LKH trees, but a\nsaving can be made by integrating them into a single hierarchy\nas follows. Fig. 11 shows the proposed key hierarchy for a\nset of users U1 to U9 and a set of intermediate gateways G1\nto G4. All users and intermediate gateways are members of\nthe multicast group. In this illustration, the nine users are in a\nsubtree of outdegree , and the four gateways are in a\nsubtree of outdegree . The root (key H) has two children,\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \n316 IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 22, NO. 2, FEBRUARY 2004\nE F B A C \nD \nH \n     U1    U2    U3     U4    U5    U6     U7    U8    U9                    G1    G2       G3    G4   \n (for transport  layer data)\n \nG Key\nhierarchy\nMembers\nGroup key K2\n (for transport  layer header)\n \nGroup key K1\nFig. 11. Integrated LKH tree for ML-IPSEC.\nirrespective of the values of and . As in Section III, Keys\nK1 and K2 could either be the LKH keys H and D shown in\nFig. 11, or they could be separate keys encrypted using H and\nD, respectively, and transmitted to members. The group key K1\nused to encrypt the transport layer header is at the root of the\ntree and the group key K2 used to encrypt the data is one of the\nroot\u2019s two child keys. Recalling that in LKH each member only\nknows the keys that lie on the path from the member\u2019s leaf node\nto the root, it can be seen that users have access to both K1 and\nK2, while gateways only have access to key K1. In the event of\na gateway compromise, as part of the normal LKH rekeying we\ntransmit , and so, users can still decrypt the transport\nheader. For the users located behind the compromised gateway,\nit is assumed that a protection path exists via one of the other\ngateways so that they can still receive the multicast traffic.\nIf there are users and intermediate gateways, then the\ncost of rekeying for this single integrated tree is as follows. For\na user depart, assuming a fully populated tree, the rekey cost in\nkeys is\n(10)\nFor a gateway depart, the rekey cost is\n(11)\nThis compares with rekey costs for two separate trees\n(Fig. 12) as follows. The combined LKH tree for key K1 has\nmembers; let its outdegree be . The LKH\ntree for K2 has members, and we assume its outdegree to\nremain at . Then, for a user depart, the rekey cost to rekey\nboth keys K1 and K2 is\n(12)\nand for a gateway depart, the rekey cost is (to rekey K1 only)\n(13)\nB. Implications\nThe rekey costs on a user departure and a gateway departure\nare shown, respectively, in Figs. 13 and 14. These show that\nfor a user rekey, the rekey cost is almost halved for values of\nand is reduced still further in the unlikely event\nthat the number of gateways exceeds the number of users. For\na gateway departure, the integrated LKH saving compared with\n     U1   U2   U3    U4   U5   U6    U7   U8   U9   G1  G2  G3    G4  \nKey \nhierarchy \nMembers \nGroup key K1\n(for transport layer header)\nGroup key K2 \n(for transport layer data) \nB A C \nF \nH \nG \nE D \n     U1   U2   U3    U4   U5   U6    U7   U8   U9  \nKey \nhierarchy \nMembers \nJ I K \nL \nFig. 12. Separate LKH trees for transport header and data.\nFig. 13. ML-IPSEC and LKH interworking: Rekey costs on user depart.\nFig. 14. ML-IPSEC and LKH interworking: Rekey costs on gateway depart.\nthe separate LKH rekey cost is particularly high for ,\nthat is, when there are a relatively small number of gateways.\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \nHOWARTH et al.: DYNAMICS OF KEY MANAGEMENT IN SECURE SATELLITE MULTICAST 317\nFig. 15. ML-IPSEC and LKH: Life cycle cost as function of rekey factor \f.\nThe gateways would normally be expected to be less volatile\nthan the users. In this case, the optimum outdegree of the\nuser subtree may be selected using the analysis described in\nSection III using the outdegree of the user subtree, .\nRekeying to update the group key can either change just the\ntransport data key K2, or it can involve changing both K1 and\nK2. In the former case, the analysis of Section III and the life\ncycle rekey costs given in Fig. 6 are applicable for a tree of\nusers and outdegree . In the latter case, the number of keys\ntransmitted for each rekey is , and the life cycle cost is\nillustrated in Fig. 15.\nVI. CONCLUSION\nSatellite-based network services present significant security\nissues, in particular the requirement for privacy and the need to\nuse satellite resources efficiently. This paper makes two distinct\ncontributions to this area for multicast services.\nIn the first contribution, we have considered life cycle key\ncosts in multicast groups that use LKH for key management.\nWe have shown how preregistration can reduce the hierarchical\ntree initialization cost. When preregistration is not feasible, pe-\nriodic admission can reduce this cost. For applications with low\nvolatility , where the fraction of users joining and leaving the\ngroup over the connection lifetime is low, there is an optimum\ntree outdegree that varies with the volatility and gives the min-\nimum life cycle key cost. Similarly, the optimum tree outdegree\nvaries with the rekey factor that reflects the number of group\nkey updates. This analysis, therefore, minimizes the key man-\nagement traffic demand on the satellite; it is also of general ap-\nplication to terrestrial networks. We have motivated our analysis\nwith low-volatility application examples such as file transfer and\nvideoconferences.\nIn the second contribution, we have presented an inter-\nworking solution between ML-IPSEC and LKH that supports\nthe implementation of PEMs for satellites. In the proposed\napproach, the end users are placed in one branch of the LKH\ntree, and the satellite terminals or gateways are located in\nanother branch. The root key in the LKH tree can be used\nfor securing the transport header and a branch key acts as\nGTEK and secures the data content for the end users. The\nproposed scheme is scalable, in that the rekey effort varies with\n, and efficient, in that for user departures the number of\nrekeys required is in the region of half that of two separate tree\nhierarchies.\nAPPENDIX A\nLKH TREE BUILDING COSTS\nA. Perfect Memory Receivers\nFor perfect memory receivers, each edge on the tree is trans-\nmitted once only. The number of keys is, therefore, independent\nof whether the tree has been built statically or dynamically, and\nfor a fully populated tree, the total number of keys transmitted\nto admit users to the group is, therefore\nIf the life cycle cost is given by , where is\nthe rekey cost , and is the volatility, then the\nminimum cost occurs when ; assuming ,\nthis occurs at\nB. Transmit Keys Required for Each Receiver\nFor a static tree, each joining receiver requires keys to be\ntransmitted, and the total number of keys transmitted is simply\nThe life cycle cost has a minimum\nwhen , which occurs when\nWe next consider a dynamic tree. The first users are as-\nsigned to a tree of depth 1, with group key A (Fig. 2), and so\nthey join at a cost of 1 key each. User , however, requires\nthe tree depth to increase to 2 with group key J (Fig. 2) and joins\nat a cost of three keys: , and . When user\njoins, we assume it does not have (because it did\nnot save this message when it was transmitted, or because it was\nswitched off) and, therefore, is now transmitted a second\ntime, giving a cost of two keys. Users through to are\nalso added at cost of two keys each. In general, the cost of adding\nusers through is ,\nand so the total number of keys transmitted to admit users is\nwhich simplifies to\nAssuming , the minimum life cycle cost\noccurs at\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \n318 IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 22, NO. 2, FEBRUARY 2004\nC. Rekey on Each Join (Perfect Backward Secrecy)\nIn rekeying, we assume that each changed key is transmitted\ntimes encrypted with each of its child keys.\nFor a static tree the first receivers join at a total cost (Fig. 2)\nof keys, and the first receivers (1\nthrough ) join at a total cost of\n. By induction, the total cost of tree initialization\nis\nThe minimum life cycle cost ,\nwhere occurs at , i.e.,\nThe initialization cost for a dynamic tree is as follows. The\nfirst user joins at a cost of one key; when the second user joins,\nthe group key is changed and is transmitted to both users at\na cost of two keys. This continues until user joins at a cost of\nkeys. User +1 requires a new group key to be created and\njoins at a cost of three keys: , and . User\nrequires both and to be changed, and four keys are\nsent: , and . The number of keys\ntransmitted to initialize users sums to\nwhich simplifies to\nAssuming , the minimum life cycle cost\noccurs at\nREFERENCES\n[1] M. Annoni et al., \u201cInterworking between multi-layer IPSEC and se-\ncure multicast services over GEO satellites,\u201d presented at the COST-272\nSymp., Thessaloniki, Greece, June, 20\u201321 2002. Doc. TD-02-016-P.\n[2] J. Arrko et al., \u201cMIKEY: Multimedia Internet Keying,\u201d IETF Internet\nDraft, work-in-progress, draft-ietf-msec-mikey-06.txt, Feb. 2003,\nexpires Aug. 2003.\n[3] N. Assaf et al., \u201cInterworking between IP security and performance en-\nhancing proxies for mobile networks,\u201d IEEE Commun. Mag., vol. 40,\npp. 138\u2013144, May 2000.\n[4] D. Balenson et al., \u201cKey management for large dynamic groups:\nOne-way function trees and amortized initialization,\u201d IETF Draft,\nwork-in-progress, draft-balenson-groupkeymgmt-oft-00.txt, Feb. 1999.\n[5] M. Baugher et al., \u201cThe group domain of interpretation,\u201d IETF Internet\nDraft, work-in-progress, draft-ietf-msec-gdoi-08.txt, May 2003, expires\nNov. 2003.\n[6] J. Border et al., \u201cPerformance enhancing proxies intended to mitigate\nlink-related degradations,\u201d IETF, RFC3135, June 2001.\n[7] R. Canetti et al., \u201cMulticast security: A taxonomy and some efficient\nconstructions,\u201d in Proc. IEEE INFOCOM, 1999, pp. 708\u2013716.\n[8] D. Harkins and D. Carrel, \u201cThe Internet key exchange,\u201d IETF, RFC2409,\nNov. 1998.\n[9] H. Harney, A. Schuett, and A. Colegrove, \u201cGSAKMP Light,\u201d IETF In-\nternet Draft, work-in-progress, draft-ietf-msec-gsakmp-light-sec-01.txt,\nJuly 2002, expires Dec. 2002.\n[10] S. Kent and R. Atkinson, \u201cSecurity architecture for the Internet pro-\ntocol,\u201d IETF, RFC2401, Nov. 1998.\n[11] , \u201cIP authentication header,\u201d IETF, RFC2402, Nov. 1998.\n[12] , \u201cIP encapsulating security payload (ESP),\u201d IETF, RFC2406, Nov.\n1998.\n[13] D. Maughan et al., \u201cInternet security association and key management\nprotocol (ISAKMP),\u201d IETF, RFC2408, Nov. 1998.\n[14] S. Mittra, \u201cIolus: A framework for scalable secure multicasting,\u201d in\nProc. SIGCOMM, 1997, pp. 277\u2013288.\n[15] M. J. Moyer et al., \u201cA survey of security issues in multicast communi-\ncations,\u201d IEEE Network, vol. 13, pp. 12\u201323, Nov. 1999.\n[16] M. J. Moyer et al., \u201cMaintaining Balanced Key Trees for Secure Mul-\nticast,\u201d IETF Internet-Draft, work-in-progress, draft-irtf-smug-key-tree-\nbalance-00.txt, June 25, 1999.\n[17] G. Noubir and L. von Allmen, \u201cSecurity issues in Internet protocols\nover satellite links,\u201d in Proc. 50th Vehicular Tech. Conf., 1999, pp.\n2726\u20132730.\n[18] H. Orman, \u201cThe OAKLEY key determination protocol,\u201d IETF,\nRFC2412, Nov. 1998.\n[19] R. Poovendran and J. S. Baras, \u201cAn information-theoretic approach for\ndesign and analysis of rooted-tree-based multicast key management\nschemes,\u201d IEEE Trans. Inform. Theory, vol. 47, pp. 2824\u20132834, Nov.\n2001.\n[20] B. Schneier, Applied Cryptography. New York: Wiley, 1996.\n[21] S. Setia et al., \u201cKronos: A scalable group re-keying approach for secure\nmulticast,\u201d in Proc. IEEE Symp. Research Security Privacy, May 2000,\npp. 215\u2013228.\n[22] J. Snoeyink, S. Suri, and G. Varghese, \u201cA lower bound for multicast key\ndistribution,\u201d in Proc. IEEE INFOCOM, Apr. 2001, pp. 422\u2013431.\n[23] D. Wallner, E. Harder, and R. Agee, \u201cKey management for multicast:\nIssues and architectures,\u201d IETF, RFC2627, June 1999.\n[24] C. K. Wong, M. Gouda, and S. S. Lam, \u201cSecure group communications\nusing key graphs,\u201d IEEE\/ACM Trans. Networking, vol. 8, pp. 16\u201330,\nFeb. 2000.\n[25] Y. R. Yang et al., \u201cReliable group rekeying: A performance analysis,\u201d\nComp. Commun. Rev., vol. 31, pp. 27\u201338, 2001.\n[26] Y. Zhang, \u201cMulti-layer Internet security for satellite & wireless net-\nworks,\u201d Hughes Res. Lab., HRL Tech. Rep. 99-611, Dec. 1, 1999.\nMichael P. Howarth received the B.A. degree in\nengineering science, the D.Phil. degree in electrical\nengineering, both from the University of Oxford,\nOxford, U.K., in 1981 in 1984, respectively, and\nthe M.Sc. degree in telecommunications from the\nUniversity of Surrey, Surrey, U.K.\nPrior to joining the University of Surrey, he\nworked for several networking and IT consultancies.\nHis research interests include IP multicast, traffic\nengineering, security systems, protocol design and\noptimization, and satellite communications.\nDr. Howarth is a Chartered Electrical Engineer and Member of the Institution\nof Electrical Engineers (IEE), U.K.\nSunil Iyengar received the B.Sc. degree in electronic\nengineering from the University of Pune, Pune,\nIndia, in 1997 and the M.Sc. degree in telecom-\nmunications and software from the University of\nSurrey, Surrey, U.K., in September 1999, where he\nis currently working toward the Ph.D. degree in the\nfield of IP network security.\nHe has been a Research Fellow at the Centre\nfor Communication Systems Research (CCSR),\nUniversity of Surrey, since January 2000, and he\nhas worked on several European research projects\nincluding GEOCAST and VIP-TEN.\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \nHOWARTH et al.: DYNAMICS OF KEY MANAGEMENT IN SECURE SATELLITE MULTICAST 319\nZhili Sun (M\u201999) received the B.Sc. degree in\nmathematics from Nanjing University, Nanjing,\nChina, in 1982 and the M.Phil. and Ph.D. degrees\nfrom the Department of Computing, Lancaster\nUniversity, Lancaster, U.K.\nHe is a Reader in the Centre for Communication\nSystems Research (CCSR), University of Surrey,\nSurrey, U.K. From 1989 to 1993, he did Postdoctoral\nResearch in the Telecommunications Group, Queen\nMary, University of London, London, U.K. He has\nbeen principal investigator and technical coordinator\nin a number of European R&D projects including the ESPRIT BISANTE\nproject on evaluation of broadband traffic over satellite using a simulation\napproach, the TEN-telecom VIP-TEN project on quality-of-service (QoS) of IP\ntelephony over satellites, the GEOCAST project on IP multicast over satellites,\nand the ICEBERGS project on IP-based multimedia conferencing over\nsatellites. He is Leader of the Satellite Networking Group of research fellows\nand Ph.D. students. He also teaches M.Sc., undergraduate, and industrial\ncourses on satellite networking, computer and data networks, IP networking,\nand Internet traffic engineering.\nHaitham Cruickshank (M\u201999) received the B.Sc.\ndegree in electrical engineering from the University\nof Baghdad, Baghdad, Iraq, in 1980, the M.Sc.\ndegree in telecommunications from the University of\nSurrey, Surrey, U.K., and the Ph.D. degree in control\nsystems from Cranfield Institute of Technology,\nCranfield , U.K., in 1995.\nHe is a Senior Research Fellow at the University of\nSurrey and has worked there since January 1996 on\nseveral European research projects in the ACTS, ES-\nPRIT, TEN-TELECOM, and IST programs. His main\nresearch interests are network security, satellite network architectures, and VoIP\nand IP conferencing over satellites.\nDr. Cruickshank is a Member of the Satellite and Space Communications\nCommittee of the IEEE Communications Society and is also is a Chartered Elec-\ntrical Engineer and Corporate Member of the Institution of Electrical Engineers\n(IEE), U.K.\nAuthorized licensed use limited to: University of Surrey. Downloaded on February 18,2010 at 10:53:46 EST from IEEE Xplore.  Restrictions apply. \n"}