{"doi":"10.1016\/j.jcss.2004.04.009","coreId":"66657","oai":"oai:dro.dur.ac.uk.OAI2:610","identifiers":["oai:dro.dur.ac.uk.OAI2:610","10.1016\/j.jcss.2004.04.009"],"title":"Minimal unsatisfiable formulas with bounded clause-variable difference are fixed-parameter tractable.","authors":["Szeider, S."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-09","abstract":"Recognition of minimal unsatisfiable CNF formulas (unsatisfiable CNF formulas which become satisfiable if any clause is removed) is a classical DP-complete problem. It was shown recently that minimal unsatisfiable formulas with n variables and n+k clauses can be recognized in time . We improve this result and present an algorithm with time complexity ; hence the problem turns out to be fixed-parameter tractable (FTP) in the sense of Downey and Fellows (Parameterized Complexity, 1999).\\ud\n\\ud\nOur algorithm gives rise to a fixed-parameter tractable parameterization of the satisfiability problem: If for a given set of clauses F, the number of clauses in each of its subsets exceeds the number of variables occurring in the subset at most by k, then we can decide in time  whether F is satisfiable; k is called the maximum deficiency of F and can be efficiently computed by means of graph matching algorithms. Known parameters for fixed-parameter tractable satisfiability decision are tree-width or related to tree-width. Tree-width and maximum deficiency are incomparable in the sense that we can find formulas with constant maximum deficiency and arbitrarily high tree-width, and formulas where the converse prevails","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/66657.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/610\/1\/610.pdf","pdfHashValue":"bb5e11e6ee8faa027f1b0100611e63ed454ab753","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:610<\/identifier><datestamp>\n      2011-06-15T15:49:49Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Minimal unsatisfiable formulas with bounded clause-variable difference are fixed-parameter tractable.<\/dc:title><dc:creator>\n        Szeider, S.<\/dc:creator><dc:description>\n        Recognition of minimal unsatisfiable CNF formulas (unsatisfiable CNF formulas which become satisfiable if any clause is removed) is a classical DP-complete problem. It was shown recently that minimal unsatisfiable formulas with n variables and n+k clauses can be recognized in time . We improve this result and present an algorithm with time complexity ; hence the problem turns out to be fixed-parameter tractable (FTP) in the sense of Downey and Fellows (Parameterized Complexity, 1999).\\ud\n\\ud\nOur algorithm gives rise to a fixed-parameter tractable parameterization of the satisfiability problem: If for a given set of clauses F, the number of clauses in each of its subsets exceeds the number of variables occurring in the subset at most by k, then we can decide in time  whether F is satisfiable; k is called the maximum deficiency of F and can be efficiently computed by means of graph matching algorithms. Known parameters for fixed-parameter tractable satisfiability decision are tree-width or related to tree-width. Tree-width and maximum deficiency are incomparable in the sense that we can find formulas with constant maximum deficiency and arbitrarily high tree-width, and formulas where the converse prevails. <\/dc:description><dc:subject>\n        SAT problem<\/dc:subject><dc:subject>\n         Minimal unsatisfiability<\/dc:subject><dc:subject>\n         Fixed-parameter complexity<\/dc:subject><dc:subject>\n         DP-complete problem<\/dc:subject><dc:subject>\n         Tree-width<\/dc:subject><dc:subject>\n         Bipartite matching<\/dc:subject><dc:subject>\n         Expansion.<\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        Journal of computer and system sciences, 2004, Vol.69(4), pp.656-674 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2004-09<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:610<\/dc:identifier><dc:identifier>\n        issn:0022-0000<\/dc:identifier><dc:identifier>\n        doi:10.1016\/j.jcss.2004.04.009<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/610\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1016\/j.jcss.2004.04.009<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/610\/1\/610.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn:0022-0000","0022-0000"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":["SAT problem","Minimal unsatisfiability","Fixed-parameter complexity","DP-complete problem","Tree-width","Bipartite matching","Expansion."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n14 October 2008\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nSzeider, S. (2004) \u2019Minimal unsatisfiable formulas with bounded clause-variable difference are fixed-parameter\ntractable.\u2019, Journal of computer and system sciences., 69 (4). pp. 656-674.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.jcss.2004.04.009\nPublisher\u2019s copyright statement:\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nMinimal Unsatisfiable Formulas with Bounded\nClause-Variable Difference are\nFixed-Parameter Tractable 1\nStefan Szeider 2\nDepartment of Computer Science, University of Durham, Durham, England\nAbstract\nRecognition of minimal unsatisfiable CNF formulas (unsatisfiable CNF formulas\nwhich become satisfiable if any clause is removed) is a classical DP -complete prob-\nlem. It was shown recently that minimal unsatisfiable formulas with n variables and\nn + k clauses can be recognized in time nO(k). We improve this result and present\nan algorithm with time complexity O(2kn4); hence the problem turns out to be\nfixed-parameter tractable (FPT) in the sense of Downey and Fellows (Parameter-\nized Complexity, 1999).\nOur algorithm gives rise to a fixed-parameter tractable parameterization of the\nsatisfiability problem: If for a given CNF formula F , the number of clauses in each of\nits subsets exceeds the number of variables occuring in the subset at most by k, then\nwe can decide in time O(2kn3) whether F is satisfiable; k is called the maximum\ndeficiency of F and can be efficiently computed by means of graph matching algo-\nrithms. Known parameters for fixed-parameter tractable satisfiability decision are\ntree-width or related to tree-width. Tree-width and maximum deficiency are incom-\nparable in the sense that we can find formulas with constant maximum deficiency\nand arbitrarily high tree-width, and formulas where the converse prevails.\nKey words: SAT problem, minimal unsatisfiability, fixed-parameter complexity,\nDP -complete problem, tree-width, bipartite matching, expansion\n1 Parts of this paper appeared in preliminary form in the Proceedings of the 9th\nAnnual International Conference on Computing and Combinatorics (COCOON\u201903),\nLecture Notes in Computer Science 2697, pp. 548\u2013558.\n2 The research was carried out during the author\u2019s post-doctoral position at the\nUniversity of Toronto and was supported by the Austrian Science Fund (FWF),\nProject J2295-N04.\n1\n1 Introduction\nWe consider propositional formulas in conjunctive normal form (CNF) repre-\nsented as sets of clauses. A formula is minimal unsatisfiable if it is unsatisfiable\nbut omitting any of its clauses makes it satisfiable. Recognition of minimal\nunsatisfiable formulas is computationally hard, shown to be DP -complete by\nPapadimitriou and Wolfe [24] (DP\u2014sometimes denoted as DP\u2014is the class\nof problems that can be considered as the difference of two NP-problems; DP\nis located at the second level of the Boolean Hierarchy and contains all NP\nand all co-NP problems; see, e.g., [23]).\nSince for a minimal unsatisfiable formula F the number m of clauses is strictly\ngreater than the number n of variables (a result attributed to M. Tarsi in [1]),\nit is natural to parameterize minimal unsatisfiable formulas with respect to\nthe parameter\n\u03b4(F ) := m\u2212 n,\nthe deficiency of F . Following [18] we denote the class of minimal unsatisfiable\nformulas with deficiency k by MU(k).\nIt is known that for fixed k, formulas in MU(k) have short resolution refuta-\ntions and so can be recognized in nondeterministic polynomial time (Kleine\nBu\u00a8ning [17]). Moreover, deterministic polynomial time algorithms have been\ndeveloped for the special cases MU(1) and MU(2), based on the very struc-\nture of formulas in the respective classes (Davidov, et al. [8] and Kleine\nBu\u00a8ning [18]). Finally it was shown by Kullmann [19] and by Fleischner, et\nal. [12] that for any fixed k, formulas in MU(k) can be recognized in poly-\nnomial time. The algorithm of [19] relies on the fact that formulas in MU(k)\nnot only have short resolution refutations, but such refutations can even be\nfound in polynomial time. On the other hand, the algorithm of [12] relies on\nthe fact that the search for a satisfying truth assignment can be restricted to\ncertain assignments which correspond to matchings in bipartite graphs (we\nwill describe this approach in more detail in the sequel. Both algorithms have\ntime complexity nO(k) ([12] provides the more explicit upper bound O(nk+1\/2l)\nfor formulas of length l with n variables).\nThe degree of the polynomials constituting time bounds of the quoted algo-\nrithms [19,12] strongly depends on k, since a \u201ctry all subsets of size k\u201d-strategy\nis employed. Consequently, even for small k, the algorithms become imprac-\nticable for larger inputs. The theory of parameterized complexity (Downey\nand Fellows [10]) focuses on this issue. A problem is called fixed-parameter\ntractable (FPT ) if it can be solved in time O(f(k) \u00b7n\u03b1) where n measures the\nsize of the instance and f(k) is any computable function of the parameter k\n(the constant \u03b1 is independent from k).\n2\nAs a main result of this paper we show that MU(k) is fixed-parameter tractable,\nstating an algorithm with time complexity O(2kn4). The gained speedup re-\nlies on the interaction of two concepts, maximum deficiency and expansion,\nboth stemming from graph theory (the graph theoretic concepts carry over to\nformulas by means of incidence graphs, see Section 4). Ultimately, we make\nuse of a characterization of q-expanding bipartite graphs due to Lova\u00b4sz and\nPlummer [21] (Theorem 2 below).\n1.1 Maximum deficiency and expansion\nThe maximum deficiency of a formula F is defined as\n\u03b4\u2217(F ) = max\nF \u2032\u2286F\n\u03b4(F );\nthus always \u03b4\u2217(F ) \u2265 0. This parameter was first considered for formulas by\nFranco and Van Gelder [14]. For minimal unsatisfiable formulas, deficiency and\nmaximum deficiency agree. Moreover, it turned out that maximum deficiency\nis the right pivotal point for attacking MU(k): if one has an efficient way\nof deciding satisfiability for formulas with bounded maximum deficiency, then\none can also recognize efficiently minimal unsatisfiable formulas with bounded\ndeficiency [20,12].\nFormulas with maximum deficiency 0, called \u201cmatched formulas\u201d in [14], are\nalways satisfiable. The maximum deficiency of a formula can be considered\nas its distance from being a matched formula, and provides a measure of its\nhardness. For generalizations of the concept of matched formulas, see [28].\nWe call a formula F q-expanding if for every nonempty set X of variables of F\nthere are at least |X|+ q clauses C of F such that some variable of X occurs\nin C. It is known that minimal unsatisfiable formulas are 1-expanding [1] and\nthat any formula contains an equisatisfiable 1-expanding subset (two formulas\nare called equisatisfiable if either both are satisfiable or both are unsatisfiable);\nmoreover, any such subset is unique and can be found efficiently [20,12]. Fur-\nthermore, if each literal of a formula F \u2208 MU(k), k \u2265 2, is contained in at\nleast 2 clauses, then F is 2-expanding [17,18]. We extend the various quoted\nresults and pinpoint the importance of the notion of q-expansion for satisfia-\nbility decision.\nLet F [x = \u03b5] denote the formula obtained from F by instantiating the variable\nx with a truth value \u03b5 \u2208 {0, 1} and applying the usual simplifications (see\nSection 2.2 for exact definitions). It is known that in general \u03b4\u2217(F [x = \u03b5]) \u2264\n\u03b4\u2217(F ) + 1 holds, and if F is 1-expanding, then even \u03b4\u2217(F [x = \u03b5]) \u2264 \u03b4\u2217(F ) (see\n[20]). Moreover by simultaneous instantiation of \u03b4\u2217(F ) variables one can reduce\nany satisfiable formula to a formula with maximum deficiency 0 ([12], see\n3\nTheorem 1 below). Thus, for deciding satisfiability of formulas with maximum\ndeficiency k, it sufficies to try all possible instantiations of \u2264 k variables. If\nk is fixed, then this can be carried out in polynomial time, but the degree of\nthe polynomial strongly depends on k. Hence this approach does not yield a\nfixed-parameter tractable algorithm.\nKey to our improvement is an efficient algorithm which reduces a given formula\nto an equisatisfiable formula F such that instantiating any variable of F with\nany truth value 0 or 1 decreases its maximum deficiency. We call such a formula\nF to be \u03b4\u2217-critical. We show that if every literal of a 2-expanding formula F\noccurs in at least two clauses, then F is \u03b4\u2217-critical (Lemma 12).\nWe present a variant of the DLL algorithm (Davis, Logemann, and Loveland\n[6]) applying splittings (branchings from F to F [x = 0] and F [x = 1]) to\n\u03b4\u2217-critical formulas only. Consequently, the maximum deficiency decreases at\neach splitting, and so the height of the resulting search tree is bounded by the\nmaximum deficiency of the input formula. A careful analysis of the reductions\napplied at the nodes of the search tree gives the following time complexity\n(the hidden constant does not depend on k).\n(1) Satisfiability of formulas with n variables and maximum deficiency k can\nbe decided in time O(2kn3).\nThe presented algorithm provides certificates for its decision: if the input for-\nmula is satisfiable, then it outputs a satisfying truth assignment, otherwise a\nregular resolution refutation.\nTo decide whether a formula F belongs to MU(k), we first check the necessary\ncondition \u03b4(F ) = \u03b4\u2217(F ) = k; if this holds true, then we check whether F is\nunsatisfiable, and whether F \\ {C} is satisfiable for all clauses C of F . This\ncan be accomplished by n + k + 1 applications of the above result (1). Hence\nwe get the following.\n(2) Minimal unsatisfiable formulas with n variables and n + k clauses can be\nrecognized in time O(2kn4).\n1.2 Fixed-parameter tractable parameterizations of SAT\nOur result on fixed-parameter tractable SAT decision for formulas with bounded\nmaximum deficiency is interesting by its own, as there are only a few known pa-\nrameterizations which allow fixed-parameter tractable SAT decision (for a sur-\nvey, see Szeider [27]). Most of such parameterizations are based on structural\ndecomposition: tree-width (Gottlob, et al. [15]), branch-width (Alekhnovich\nand Razborov [2]), clique-width (Courcelle, et al. [4]). These graph parameters\n4\ncan be applied to CNF formulas via \u201cincidence graphs\u201d or \u201cprimal graphs,\u201d\nsee [27].\nThe following remarks emphasize the significance of our algorithm.\n(1) Maximum deficiency and the quoted parameters are incomparable: as\nshown in [27], there are formulas with bounded maximum deficiency and\narbitrarily large clique-width (resp. tree-width or branch-width); con-\nversely, there are formulas with bounded clique-width (resp. tree-width\nor branch-width) and arbitrarily large maximum deficiency.\nIn particular, the maximum deficiency of formulas whose incidence\ngraphs are grids is at most 1, but the tree-width of n\u00d7 n grids is n. The\nsignificance of this discrepancy is further emphasized by Robertson and\nSeymour\u2019s deep Excluded Grid Theorem [25], which states that graphs\nof high tree-width necessarily have large square grids as minors.\n(2) Maximum deficiency can be computed in polynomial time by matching\nalgorithms [12]. Hence we can determine the hardness of a given instance\nwith respect to our algorithm in advance. This is not possible for tree-\nwidth and related parameters: computation of tree-width or branch-width\nis NP-hard [3,26], and it is not known whether graphs with fixed clique-\nwidth \u2265 4 can be recognized in polynomial time [5].\n(3) Franco, et al. [13] show that satisfiability of certain propositional formulas\nwhose only connective is the implication is fixed-parameter tractable with\nrespect to the number of occurrences of the always-false constant f (this\nresult is listed in the appendix of [10] as pure implicational satisfia-\nbility of fixed f-depth); an improved algorithm is presented in [16].\nAs shown in [27], however, if one transforms a CNF formula F into an\nequisatisfiable propositional formula PF of the type considered in [13],\nthen the maximum deficiency of F is a lower bound for the number of\nf -occurrences in PF ; thus, our algorithm dominates the algorithm of [13]\nif applied to CNF formulas.\n(4) Most of today\u2019s state-of-the-art SAT-solvers (see, e.g., [31] for a survey)\nare based on the DLL procedure. Our algorithm is based on the DLL\nprocedure as well, and our techniques can be incorporated into existing\nsolvers.\nThe remainder of this paper is organized as follows. In Section 2 we define\nthe objects we are going to study (formulas in CNF, truth assignments, and\nresolution derivations), and in Section 3 we develop the basic graph theoretic\ntools (matchings in bipartite graphs and expansion properties). In Section 4 we\nintroduce the incidence graph construction and carry over the graph theoretic\nconcepts and results of the previous section to formulas.\nSection 5 contains the main technical results: we develop an efficient reduc-\ntion that transforms a given formula F into a smaller equisatisfiable formula\n5\nF \u2032 such that any instantiation of any variable of F \u2032 decreases its maximum\ndeficiency (\u201cF \u2032 is \u03b4\u2217-critical\u201d). In Section 6 we state the new algorithm for de-\nciding satisfiability of formulas with bounded maximum deficiency, deploying\nthe reduction of Section 5. This algorithm serves in turn as a subroutine for\nthe recognition of minimal unsatisfiable formulas with bounded deficiency. We\nclose with some remarks on how our techniques can be used in a SAT-solver\nand on possible improvements.\n2 Notation and Preliminaries\n2.1 Formulas\nWe assume an infinite supply of propositional variables. A literal is a variable\nx or a complemented variable x; if y = x is a literal, then we write y = x;\nwe also use the notation x1 = x and x0 = x. For a set S of literals we put\nS = { x : x \u2208 S }; S is tautological if S \u2229 S 6= \u2205. A clause is a finite non-\ntautological set of literals; the empty clause is denoted by \u0003. A finite set of\nclauses is a CNF formula (or formula, for short). The length of a formula F\nis\n\u2211\nC\u2208F |C|. For a literal x we write #x(F ) for the number of clauses of F\nwhich contain x.\nA literal x is a pure literal if #x(F ) \u2265 1 and #x(F ) = 0; x is a singular literal\nif #x(F ) = 1 and #x(F ) \u2265 1. A literal x occurs in a clause C if x \u2208 C \u222a C;\nvar(C) denotes the set of variables which occur in C. For a formula F we put\nvar(F ) =\n\u22c3\nC\u2208F var(C). Let F be a formula and X \u2286 var(F ). We denote by FX\nthe set of clauses of F in which some variable of X occurs; i.e.,\nFX := {C \u2208 F : var(C) \u2229X 6= \u2205 }.\nF(X) denotes the formula obtained from FX by restricting all clauses to literals\nover X, i.e.,\nF(X) := {C \u2229 (X \u222aX) : C \u2208 FX }.\n2.2 Truth assignments\nA truth assignment is a map \u03c4 : X \u2192 {0, 1} defined on some set X of variables;\nwe write var(\u03c4) = X. If var(\u03c4) is just a singleton {x} with \u03c4(x) = \u03b5, then we\ndenote \u03c4 simply by x = \u03b5. We say that \u03c4 is empty if var(\u03c4) = \u2205. A truth\nassignment \u03c4 is total for a formula F if var(\u03c4) = var(F ). For x \u2208 var(\u03c4) we\n6\ndefine \u03c4(x) = 1\u2212 \u03c4(x). For a truth assignment \u03c4 and a formula F , we put\nF [\u03c4 ] = {C \\ \u03c4\u22121(0) : C \u2208 F, C \u2229 \u03c4\u22121(1) = \u2205 };\ni.e., F [\u03c4 ] denotes the result of instantiating variables according to \u03c4 and ap-\nplying the usual simplifications. A truth assignment \u03c4 satisfies a clause if the\nclause contains some literal x with \u03c4(x) = 1; \u03c4 satisfies a formula F if it sat-\nisfies all clauses of F (i.e., if F [\u03c4 ] = \u2205). A formula is satisfiable if it is satisfied\nby some truth assignment; otherwise it is unsatisfiable. A formula is minimal\nunsatisfiable if it is unsatisfiable, and every proper subset of it is satisfiable.\nWe say that formulas F and F \u2032 are equisatisfiable (in symbols F \u2261sat F \u2032) if\neither both are satisfiable or both are unsatisfiable.\nA truth assignment \u03b1 is autark for a formula F if var(\u03b1) \u2286 var(F ) and \u03b1\nsatisfies Fvar(\u03b1); that is, \u03b1 satisfies all affected clauses. Note that the empty as-\nsignment is autark for every formula, and that any total satisfying assignment\nof a formula is autark. The key feature of autark assignments is the following\nobservation of Monien and Speckenmeyer [22].\nLemma 1 If \u03b1 is an autark assignment of a formula F , then F [\u03b1] is an\nequisatisfiable subset of F .\nThus, in particular, minimal unsatisfiable formulas have no autark assignments\nexcept the empty assignment. If x\u03b5 is a pure literal of F , \u03b5 \u2208 {0, 1}, then x = \u03b5\nis an autark assignment, and F [x = \u03b5] can be obtained from F by the \u201cpure\nliteral rule\u201d. We note that the reduction of F to F [\u03b1] by means of Lemma 1\ncan be considered as an instance of a \u201ccrown rule\u201d as described in [11].\n2.3 Resolution and Davis-Putnam resolution.\nIf C1, C2 are clauses and C1 \u2229 C2 = {x} holds for some literal x, then the\nclause C = (C1 \u222a C2) \\ {x, x} is called the resolvent of C1 and C2.\nLet F be a formula. A sequence C1, . . . , Cn is a resolution derivation from F if\nfor each i \u2208 {1, . . . , n} either Ci \u2208 F (\u201cCi is an axiom\u201d), or Ci is the resolvent\nof Cj and Cj\u2032 for some 1 \u2264 j < j \u2032 \u2264 i\u22121 (\u201cCj and Cj\u2032 are the parents of Ci\u201d).\nIn general, a clause in a resolution derivation may have different \u201chistories\u201d;\nthat is, the clause may have different pairs of parents, and it may be both, an\naxiom and a derived clause. However, we tacitly assume some arbitrary but\nfixed history. A resolution derivation is a resolution refutation if it contains\nthe empty clause.\nA thread of a resolution derivation R is a subsequence D1, . . . , Dk of R such\nthat for each i = 2, . . . , k, Di\u22121 is a parent of Di in R. A resolution derivation\n7\nR is regular if for each thread D1, . . . , Dk of R we have (D1 \u2229 Dk) \u2286 Di,\ni = 1, . . . , k. It is well known that a formula is unsatisfiable if and only if it\nhas a regular resolution refutation (see, e.g., Urquhart [30]).\nConsider a formula F and a literal x of F . We obtain a formula F \u2032 from F by\nadding all possible resolvents w.r.t. x, and by removing all clauses in which x\noccurs. We say that F \u2032 is obtained from F by Davis-Putnam resolution and we\nwrite DPx(F ) = F\n\u2032. It is well known that F \u2261sat DPx(F ). In fact, the so called\nDavis-Putnam procedure [7] successively eliminates variables in this manner\nuntil either the empty formula or a formula which contains the empty clause\nis obtained. The Davis-Putnam procedure can be considered as a special case\nof regular resolution (cf. [30]).\nUsually, DPx(F ) contains more clauses than F , however, if #x(F ) \u2264 1 or\n#x(F ) \u2264 1, then clearly |DPx(F )| < |F |. In the sequel we will focus on\nDPx(F ) where x is a singular literal of F .\n3 Graph Theoretic Tools\nAll considered graphs are finite and simple (no multiple edges or self-loops).\nWe denote a bipartite graph G by the triple (V1, V2, E) where V1 and V2 give\nthe bipartition of the vertex set of G, and E denotes the set of edges of G. An\nedge between v1 \u2208 V1 and v2 \u2208 V2 is denoted as ordered pair (v1, v2). NG(X)\ndenotes the set of all vertices y adjacent to some x \u2208 X in G, i.e., NG(X) is\nthe (open) neighborhood of X. For graph theoretic terminology not defined\nhere, the reader is referred to [9].\nA matching M of a graph G is a set of independent edges of G; i.e., distinct\nedges in M have no vertex in common. A vertex of G is called matched by M ,\nor M-matched, if it is incident with some edge in M ; otherwise it is exposed\nby M , or M-exposed. A matching M of G is a maximum matching if there is\nno matching M \u2032 of G with |M \u2032| > |M |. A maximum matching of a bipartite\ngraph on v vertices and e edges can be found in time O(v1\/2e) by the algorithm\nof Hopcroft and Karp (see, e.g, [21]).\nConsider a bipartite graph G = (V1, V2, E). We say that G is q-expanding if\nq \u2265 0 is an integer such that |NG(X)| \u2265 |X|+ q holds for every nonempty set\nX \u2286 V1. Note that by Hall\u2019s Theorem, G is 0-expanding if and only if G has a\nmatching of size |V1|; see [21]. We also note that the maximum q for which G\nis q-expanding is known as the surplus of G, denoted by \u03c3(G), and that the\nequation \u03c3(G) = max\u22056=X\u2286V1 |NG(X)| \u2212 |X| holds.\nLet M be a matching of a graph G. A path P in G is called M-alternat-\n8\ning if edges of P are alternately in and out of M ; an M -alternating path is\nM-augmenting if both of its ends are M -exposed. If P is an M -augmenting\npath, then the symmetric difference of M and the set of edges which lie on P\nis a matching of size |M | + 1. In this case we say that M \u2032 is obtained from\nM by augmentation. Conversely, by a well-known result of Berge (see, e.g.,\n[21, Theorem 1.2.1]) a matching M is a maximum matching if there is no\nM -augmenting path.\nIn our considerations we often have to deal with bipartite graphs for which\nan \u201calmost\u201d maximum matching is given. In such cases it would be inefficient\nto construct a maximum matching from scratch, since a maximum matching\ncan be obtained by just a few augmentations:\nLemma 2 Let G = (V1, V2, E) be a bipartite graph and M a matching of G\nwhich exposes s1 vertices of V1 and s2 vertices of V2. Then we can obtain a\nmaximum matching M \u2032 of G in time O(min(s1, s2) \u00b7 (|E|+ |V1 \u222a V2|)).\nPROOF. Alternating paths are just directed paths in the bipartite digraph\nobtained from G by orienting the edges in M from V1 to V2, and orienting the\nedges in E \\M from V2 to V1. Hence we can find an M -augmenting path by\nbreadth first search starting from the set of M -exposed vertices in V2. Thus,\nan M -augmenting path can be found in time O(|E| + |V1 \u222a V1|). Since each\naugmentation decreases the number of exposed vertices in V1 and in V2, the\nlemma follows. \u0003\nLet M be a matching of G. We define RG,M as the set of vertices of G which\ncan be reached from some M -exposed vertex in V2 by an M -alternating path\n(see Figure 1 for an illustration). By means of the above breadth-first-search\napproach we can easily obtain the basic graph theoretic results needed for our\nconsiderations:\n\ufe38 \ufe37\ufe37 \ufe38\nV2 \u2229 RG,M\nV1 \u2229 RG,M\n\ufe37 \ufe38\ufe38 \ufe37\n\ufe38 \ufe37\ufe37 \ufe38\nV2 \\RG,M\nV1 \\RG,M\n\ufe37 \ufe38\ufe38 \ufe37\nFig. 1. A bipartite graph G with a maximum matching M (indicated by bold lines).\nLemma 3 Given a bipartite graph G = (V1, V2, E), V = V1 \u222a V2, and a max-\nimum matching M of G, then the following statements hold true.\n(1) RG,M can be obtained in time O(|V |+ |E|).\n9\n(2) No edge joins vertices in V1 \\ RG,M with vertices in V2 \u2229 RG,M ; no edge\nin M joins vertices in V1 \u2229RG,M with vertices in V2 \\RG,M .\n(3) All vertices in V1 \u2229 RG,M and V2 \\RG,M are matched vertices.\n(4) If G is not 0-expanding, then |V1 \\RG,M | > |NG(V1 \\RG,M)|.\n(5) |V2 \u2229 RG,M | \u2212 |NG(V2 \u2229 RG,M)| = |V2| \u2212 |M |.\n(6) If RG,M 6= \u2205, then RG,M induces a 1-expanding subgraph of G.\nPROOF. Let Si denote the set of M -exposed vertices in Vi, i = 1, 2.\n(1) We consider G as a directed graph as in the proof of Lemma 2. Now\nRG,M contains just the vertices which can be reached from vertices in S2 by\na directed path. And so RG,M can be obtained by breadth-first-search in time\nO(|V |+ |E|).\n(2) Suppose there is some edge (u, w) \u2208 E with u \u2208 V1 \\ RG,M and w \u2208\nV2 \u2229 RG,M . If w \u2208 S2, then u \u2208 RG,M , a contradiction; hence w \/\u2208 S2. By\ndefinition of RG,M , there is an M -alternating path P from some s \u2208 S2 to\nw; the last edge of P is traversed from V1 to V2, hence it belongs to M ;\nconsequently (u, w) \/\u2208 M . Now Pu is an M -alternating path from s to u, and\nso u \u2208 RG,M , again a contradiction. Thus there is no edge between vertices in\nV1 \\RG,M and V2 \u2229RG,M . A similar argument shows that no edge of M joins\nvertices in V1 \u2229 RG,M with vertices in V2 \\RG,M .\n(3) Consider any vertex u \u2208 V1 \u2229RG,M and let P be some M -alternating path\nfrom some s \u2208 S2 to u (P exists by definition of RG,M). It follows that u must\nbe M -matched, since otherwise P would be M -augmenting, contradicting the\nmaximality of M . On the other hand, vertices in V2 \\ RG,M are M -matched\nsince S2 \u2286 RG,M by definition.\n(4) By (2) and (3), M matches the vertices in (V1 \\ RG,M) \\ S1 to vertices in\nV2 \\ RG,M and vice versa. Hence |V1 \\ RG,M | \u2212 |S1| = |(V1 \\ RG,M) \\ S1| =\n|V2 \\ RG,M | \u2264 |NG(V1 \\ RG,M)|. If G is not 0-expanding, then S1 6= \u2205 follows\nby Hall\u2019s Theorem.\n(5) By (2) and (3), M matches the vertices in V1 \u2229 RG,M to vertices in (V2 \u2229\nRG,M) \\ S2 and vice versa. Hence |S2| = |V2 \u2229 RG,M | \u2212 |V1 \u2229 RG,M | = |V2 \u2229\nRG,M | \u2212 |NG(V2 \u2229RG,M)|. In turn, |S2| = |V2| \u2212 |M | by definition of RG,M .\n(6) Choose any nonempty set X = {u1, . . . , un} \u2286 V1\u2229RG,M . We have to show\nthat |NG(X) \u2229RG,M | \u2265 n + 1. Let w1, . . . , wn \u2208 V2 such that (ui, wi) \u2208 M for\ni = 1, . . . , n. By (2) above, {w1, . . . , wn} \u2286 RG,M . Choose any x \u2208 X. Since\nx \u2208 RG,M , there is some M -alternating path P which starts in some s \u2208 S2\nand ends in x. Let (u, w) be the first edge occurring on P with u \u2208 X. Since P\ntraverses (u, w) from w to u, (u, w) \/\u2208 M and so w \/\u2208 {w1, . . . , wn}. However,\nw \u2208 NG(X) \u2229 RG,M ; hence |NG(X) \u2229 RG,M | \u2265 |{w, w1, . . . , wn}| = n + 1\n10\nfollows. \u0003\nWe note in passing that we get the same set RG,M for every maximum matching\nM of G; this follows from the fact that every maximum matching M \u2032 matches\nthe vertices in V1\u2229RG,M (these vertices belong to every minimum vertex cover,\nsee [1]).\nLet G = (V1, V2, E) be a bipartite graph. The deficiency of G is defined as\n\u03b4(G) := |V2| \u2212 |NG(V2)| (if V1 contains no isolated vertices, then \u03b4(G) =\n|V2|\u2212|V1|). The maximum deficiency of G is defined as \u03b4\u2217(G) := maxY\u2286V2 |Y |\u2212\n|NG(Y )|. Note that \u03b4\u2217(G) \u2265 0 follows by taking Y = \u2205. The next lemma, a\ndirect consequence of Lemma 3(5), is well-known (see, e.g., [21]). It shows that\n\u03b4\u2217(G) can be calculated efficiently.\nLemma 4 A maximum matching of a bipartite graph G = (V1, V2, E) exposes\nexactly \u03b4\u2217(G) vertices of V2.\nLemma 5 Let G = (V1, V2, E) be a 1-expanding bipartite graph and let Y be\na proper subset of V2. Then |Y | \u2212 |NG(Y )| \u2264 \u03b4\u2217(G)\u2212 1.\nPROOF. Choose a vertex w \u2208 V2 \\Y . Since G\u2212w is 0-expanding, there is a\nmaximum matching M of G which exposes w. Let S2 be the set of M -exposed\nvertices of V2. By the preceding lemma, |S2| = \u03b4\u2217(G). Since w \u2208 S2 \\ Y ,\n|Y \u2229 S2| \u2264 \u03b4\u2217(G) \u2212 1 follows. However, every vertex in Y \\ S2 is matched to\nsome vertex in NG(Y ), thus |NG(Y )| \u2265 |Y \\S2|. Consequently |Y |\u2212|NG(Y )| \u2264\n|Y | \u2212 |Y \\ S2| = |Y \u2229 S2| \u2264 \u03b4\u2217(G)\u2212 1. \u0003\n4 Matchings and Expansion of Formulas\nTo every formula F we associate a bipartite graph I(F ), the incidence graph of\nF , whose vertices are the clauses and variables of F , and where each clause is\nadjacent to the variables which occur in it; that is, I(F ) = (var(F ), F, E(F ))\nwith (x, C) \u2208 E(F ) if and only if x \u2208 var(C); see Fig. 1. for an example.\nBy means of this construction, concepts for bipartite graphs apply directly to\nv w x y z\n{v, x, y} {v, w, y, z} {w, x, z}\nFig. 2. Incidence graph of the formula F = {{v, x, y}, {v, w, y, z}, {w, x, z}}.\nformulas. In particular, we will speak of q-expanding formulas, matchings of\n11\nformulas, and the (maximum) deficiency of formulas. That is, a formula F is\nq-expanding if and only if |FX | \u2265 |X|+ q for every nonempty set X \u2286 var(F ).\nThe deficiency of a formula F is \u03b4(F ) = |F |\u2212|var(F )|; its maximum deficiency\nis \u03b4\u2217(F ) = maxF \u2032\u2286F \u03b4(F\n\u2032). If var(F ) = \u2205, then F is q-expanding for any q, and\nwe have \u03b4\u2217(F ) = |F | \u2264 1. Note that 1-expanding formulas are exactly the\n\u201cmatching lean\u201d formulas of [20]. In terms of formulas, Lemmas 4 and 5 read\nas follows (see [20] for an alternate proof of Lemma 7).\nLemma 6 Every maximum matching of F exposes exactly \u03b4\u2217(F ) clauses.\nLemma 7 If F is 1-expanding and F \u2032 ( F , then \u03b4\u2217(F \u2032) \u2264 \u03b4\u2217(F )\u2212 1.\nA matching M of a formula F gives rise to a partial truth assignment \u03c4M as\nfollows. For every (x, C) \u2208 M we put \u03c4M (x) = 1 if x \u2208 C, and \u03c4M(x) = 0 if\nx \u2208 C. If |M | = |F |, then \u03c4M evidently satisfies F ; thus we have the following\n(this observation has been made in [29] and [1]).\nLemma 8 If a formula F has a matching which matches all clauses, i.e., if\n\u03b4\u2217(F ) = 0, then F is satisfiable.\nFormulas F with maximum deficiency 0 are termed matched formulas in [14]\n(the probabilistic analysis of [14] shows that, in a certain sense, matched\nformulas are more numerous than formulas belonging to several well-known\nclasses, including extended-, renamable-, and q-Horn formulas, CC-balanced\nformulas, and single lookahead unit resolution (SLUR) formulas). For exam-\nple, the formula F of Figure 2 is matched, since all clauses of F are matched by\nthe matching M = {(v, {v, x, y}), (w, {v, w, y, z}), (x, {w, x, z})}. M gives rise\nto the satisfying truth assignment \u03c4M with \u03c4M (v) = 0, \u03c4M (w) = 1, \u03c4M(x) = 0.\nThe next lemma is essentially [12, Lemma 10].\nLemma 9 Given a formula F of length l and a maximum matching M of F ,\nthen we can find in time O(l) an autark assignment \u03b1 of F such that F [\u03b1] is\n1-expanding; M \u2229 E(F [\u03b1]) is a maximum matching of F [\u03b1].\nPROOF. We apply the construction of Lemma 3 to the incidence graph I(F ).\nThus F splits into formulas F1 = F \u2229 RI(G),M and F2 = F \\ F1. We consider\nMi = M \u2229 E(Fi), i = 1, 2. Consequently, \u03b1 := \u03c4M2 is an autark assignment of\nF with F [\u03b1] = F1. Moreover, by Lemma 3, F [\u03b1] is 1-expanding and M1 is a\nmaximum matching of F [\u03b1]. \u0003\nIn view of Lemma 1 we get immediately the following (see also [1,14]).\n12\nLemma 10 Minimal unsatisfiable formulas are 1-expanding. Hence \u03b4\u2217(F ) =\n\u03b4(F ) holds for minimal unsatisfiable formulas.\nThe next result extends Lemma 8 to formulas with positive maximum defi-\nciency.\nTheorem 1 (Fleischner, et al. [12]) A formula F is satisfiable if and only\nif F [\u03c4 ] is a matched formula for some truth assignment \u03c4 with |var(\u03c4)| \u2264\n\u03b4\u2217(F ).\nIn particular, for \u03b4\u2217(F ) \u2264 1, Theorem 1 yields the following.\nLemma 11 Let F be a formula of length l on n variables. If \u03b4\u2217(F ) \u2264 1, then\nwe can find a satisfying truth assignment of F (if it exists) in time O(nl).\nTheorem 1 yields an nO(k) time algorithm for satisfiability of formulas with\n\u03b4\u2217(F ) \u2264 k, since for checking satisfiability we just have to consider all instan-\ntiations of at most k variables and to check whether the resulting formulas are\nmatched. Thus satisfiability of formulas with bounded maximum deficiency\nbelongs to the complexity class XP, see [10].\n5 Main Reductions\n5.1 \u03b4\u2217-critical formulas\nWe call a formula F \u03b4\u2217-critical if \u03b4\u2217(F [x = \u03b5]) \u2264 \u03b4\u2217(F ) \u2212 1 holds for every\n(x, \u03b5) \u2208 var(F ) \u00d7 {0, 1}. The objective of this section is to reduce a given\nformula F efficiently to a \u03b4\u2217-critical formula F \u2032 ensuring \u03b4\u2217(F \u2032) \u2264 \u03b4\u2217(F ) and\nF \u2261sat F \u2032. Thus \u03b4\u2217-critical formulas constitute a \u201cproblem kernel\u201d in the sense\nof [10].\nThe next lemma pinpoints a sufficient condition for formulas being \u03b4\u2217-critical.\nLemma 12 2-expanding formulas without pure or singular literals are \u03b4\u2217-crit-\nical.\nPROOF. Let F be a 2-expanding formula without pure or singular literals,\n|F | = m. Choose any (x, \u03b5) \u2208 var(F )\u00d7 {0, 1} and consider F \u2032 = F [x = \u03b5]. We\ncan write F = {C1, . . . , Cm} such that for integers r, s, t with 1 \u2264 r \u2264 s \u2264 t \u2264\n13\nm we have\nx\u03b5 \u2208 Cj \u21d4 1 \u2264 j \u2264 r;\nx1\u2212\u03b5 \u2208 Cj \u21d4 r + 1 \u2264 j \u2264 t;\nx1\u2212\u03b5 \u2208 Cj and Cj \\ {x1\u2212\u03b5} \u2208 F \u21d4 r + 1 \u2264 j \u2264 s;\nwe have r \u2265 2 and t \u2265 r + 2. We put Dj := Cj \\ {x1\u2212\u03b5} and get\nF \u2032 = {Ds+1, . . . , Dm} = {Ds+1, . . . , Dt, Ct+1, . . . , Cm}.\nWe choose a maximum matching M of F which exposes C1 and C2. (Such\nmatching exists: since F is 2-expanding, F2 = F \\ {C1, C2} is 0-expanding;\nand since F has no pure or singular literals, var(F2) = var(F ). Thus F2 has a\nmaximum matching M with |M | = |var(F2)| = |var(F )|; such M is a maximum\nmatching of F .) The matching M gives rise to a (possible non-maximum)\nmatching M \u2032 of F \u2032 by setting\nM \u2032 = { (y, Dj) : (y, Cj) \u2208 M, y 6= x, s + 1 \u2264 j \u2264 m }.\nWe show that the number of M \u2032-exposed vertices of F \u2032 is strictly smaller than\nthe number of M -exposed vertices of F . That is, |I \u2032| < |I| for I = { 1 \u2264 j \u2264\nm : Cj is M -exposed } and I \u2032 = { s + 1 \u2264 j \u2264 m : Dj is M \u2032-exposed }.\nLet jx \u2208 {1, . . . , t} be the unique integer such that (x, Cj) \u2208 M . If jx \u2264 s, then\n|I\u2229{s+1, . . . , m}| = |I \u2032|; otherwise, if jx > s, then |I\u2229{s+1, . . . , m}| = |I \u2032|\u22121.\nThus |I \u2229{s+1, . . . , m}| \u2265 |I \u2032|\u22121 holds in any case. On the other hand, since\n1, 2 \u2208 I by the choice of M , we have |I \u2229 {1, . . . , s}| \u2265 2. Consequently\n|I| = |I \u2229 {1, . . . , s}|+ |I \u2229 {s + 1, . . . , m}| \u2265 2 + |I \u2032| \u2212 1 \u2265 |I \u2032|+ 1.\nBy means of Lemma 6 we conclude \u03b4\u2217(F ) = |I| > |I \u2032| \u2265 \u03b4\u2217(F \u2032). Thus F is\n\u03b4\u2217-critical as claimed. \u0003\n5.2 First step: eliminating pure and singular literals\nConsider a sequence S = (F0, M0), . . . , (Fq, Mq) where Fi is a formula and Mi\nis a maximum matching of Fi, 0 \u2264 i \u2264 q. We call S a reduction sequence\n(starting from (F0, M0)) if for each i \u2208 {1, . . . , q} one of the following holds:\n\u2022 Fi = Fi\u22121[\u03b1i] for some nonempty autark assignment \u03b1i of Fi\u22121.\n\u2022 Fi = DPxi(Fi\u22121) for a singular literal xi of Fi\u22121.\nNote that var(Fi) ( var(Fi\u22121), hence q \u2264 |var(F0)|. By Lemma 1 and since\nalways DPx(F ) \u2261sat F , F0 and Fq are equisatisfiable. The following can be\nverified easily.\n14\nLemma 13 Let (F0, M0), . . . , (Fq, Mq) be a reduction sequence. Any satisfying\ntruth assignment \u03c4q of Fq can be extended to a satisfying truth assignment \u03c40\nof F0; any regular resolution refutation Rq of Fq can be extended to a regular\nresolution refutation R0 of F0.\nPROOF. We put I = { 1 \u2264 i \u2264 q : Fi = Fi\u22121[\u03b1i] }, and I \u2032 = { 1 \u2264 i \u2264\nq : Fi = DPxi(Fi\u22121) }; I \u2229 I \u2032 = \u2205 and I \u222a I \u2032 = {1, . . . , q}.\nIf \u03c4q is a satisfying assignment of Fq, then we get a satisfying assignment of\nF0 by setting \u03c40 = \u03c4q \u222a \u22c3i\u2208I \u03b1i.\nWe obtain inductively a regular resolution refutation R0 of F0 as follows. Let\nRi be a regular resolution refutation of Fi for some i \u2208 {1, . . . , q}. If i \u2208 I,\nthen Ri is trivially a regular resolution refutation of Fi\u22121, since Fi \u2286 Fi\u22121.\nNow assume i \u2208 I \u2032. Let C1, . . . , Ck be the clauses of Fi\u22121 which contain x or x.\nEvery axiom C of Ri which is not contained in Fi\u22121 is the resolvent of clauses\nCj, Cj\u2032, 1 \u2264 j, j \u2032 \u2264 k. Thus C1, . . . , Ck, Ri is a regular resolution refutation of\nFi\u22121. \u0003\nLemma 14 Let F0 be a formula on n variables with \u03b4\n\u2217(F0) \u2264 n, and let M0\nbe a maximum matching of F0. We can construct in time O(n3) a reduction\nsequence S = (F0, M0), . . . , (Fq, Mq), q \u2264 n, such that exactly one of the\nfollowing holds.\n(1) \u03b4\u2217(Fq) \u2264 \u03b4\u2217(F0)\u2212 1;\n(2) \u03b4\u2217(Fq) = \u03b4\n\u2217(F0), Fq is 1-expanding and has no pure or singular literals.\nPROOF. We construct the reduction sequence inductively; assume that we\nhave already constructed (F0, M0), . . . , (Fi\u22121, Mi\u22121) for some i \u2265 1. We obtain\nFi applying the first of the following cases which is appropriate.\nCase 1: Fi\u22121 is not 1-expanding. We apply Lemma 9 and obtain a nonempty\nautark assignment \u03b1 of Fi\u22121. We put Fi := Fi\u22121[\u03b1] and Mi := Mi\u22121 \u2229 E(Fi).\nCase 2: Fi\u22121 has a pure literal x\n\u03b5, (x, \u03b5) \u2208 var(Fi\u22121) \u00d7 {0, 1}. We remove the\nclauses which contain x\u03b5 from Fi\u22121 and get an equisatisfiable proper subset Fi.\n(Note that Fi = Fi\u22121[x = \u03b5] and that x = \u03b5 is an autark assignment of Fi\u22121; cf.\nthe discussion in Section 2.2.) Since Fi\u22121 is 1-expanding, \u03b4\n\u2217(Fi) \u2264 \u03b4\u2217(Fi\u22121)\u22121\nfollows by Lemma 7. The matching M \u2032i = Mi\u22121 \u2229 E(Fi) is possibly not a\nmaximum matching of Fi, but it exposes not more clauses of Fi than Mi\u22121\nexposes clauses of Fi\u22121; thus we need at most \u03b4\n\u2217(Fi\u22121) augmentations to get a\nmaximum matching Mi of Fi (cf. Lemma 6). We put q = i and do not extend\nthe reduction sequence any further.\n15\nCase 3: Fi\u22121 has a singular literal x\n\u03b5, (x, \u03b5) \u2208 var(Fi\u22121) \u00d7 {0, 1}. We put\nFi = DPx(Fi\u22121). For integers 1 \u2264 s \u2264 t \u2264 m we can write\nFi\u22121 = {C1, . . . , Cm},\nFi = {Ds+1, . . . , Dm} = {Ds+1, . . . , Dt, Ct+1, . . . , Cm},\nsuch that x\u03b5 \u2208 C1, x1\u2212\u03b5 \u2208 Cj for 2 \u2264 j \u2264 t, and Dj is the resolvent of\nC1 and Cj for j = s + 1, . . . , t (that is, for j \u2208 {2, . . . , s}, the resolvent of\nC1 and Cj is either tautological, or it is already contained in Fi). We may\nassume, w.l.o.g., that (y1, C1) \u2208 Mi\u22121 for some variable y1 \u2208 var(Fi\u22121) (for, if\nC1 is Mi\u22121-exposed, we consider the matching Mi\u22121 \\ {(x, Cjx)} \u222a {(x, C1)})\ninstead; jx is the unique integer in {1, . . . , t} with (x, Cjx) \u2208 Mi\u22121).\nWe define the matching\nM \u2032i = { (y, Di) : (y, Ci) \u2208 M, y 6= x, s + 1 \u2264 i \u2264 m }.\nIf there is some j \u2208 {s + 1, . . . , t} such that Cj is Mi\u22121-matched but Dj\nis M \u2032i -exposed, then (x, Cj) \u2208 Mi\u22121 follows; and so, since y1 is M \u2032i -exposed\nand since y1 \u2208 var(Dj) = (var(C1) \u222a var(Cj)) \\ {x}, we conclude that M \u2032\u2032i =\nM \u2032i \u222a {(y1, Dj)} is a matching of Fi which exposes at most \u03b4\u2217(Fi\u22121) clauses.\nOtherwise, if such j does not exist, we simply put M \u2032\u2032i = M\n\u2032\ni . In any case, M\n\u2032\u2032\ni\nexposes at most \u03b4\u2217(Fi\u22121) clauses of Fi, and so \u03b4\n\u2217(Fi) \u2264 \u03b4\u2217(Fi\u22121) follows by\nLemma 6.\nCase 3a: s = 1; (i.e., |Fi| = |Fi\u22121| \u2212 1). We have var(Fi) = var(Fi\u22121) \\ {x},\nand consequently, the matching M \u2032\u2032i is a maximum matching of Fi; we put\nMi = M\n\u2032\u2032\ni .\nCase 3b: s > 1; (i.e., |Fi| < |Fi\u22121| \u2212 1). Since M \u2032\u2032i exposes at most \u03b4\u2217(Fi\u22121)\nclauses, we need at most \u03b4\u2217(Fi\u22121) augmentations to obtain a maximum match-\ning Mi of Fi. We put q = i, and do not extend the reduction sequence any\nfurther.\nWe show that in Case 3b even \u03b4\u2217(Fi) \u2264 \u03b4\u2217(Fi\u22121)\u2212 1 holds. Since Fi\u22121 is 1-ex-\npanding, we can choose for every clause C \u2208 Fi\u22121 some maximum matching\nof Fi\u22121 which exposes C. In particular, we can assume that C2 is Mi\u22121-exposed\n(and simultaneously, by the same argument as above, that C1 is Mi\u22121-matched).\nThen, however, the matching M \u2032\u2032i constructed above exposes at most \u03b4\n\u2217(Fi\u22121)\u2212\n1 clauses of Fi. Hence \u03b4\n\u2217(Fi) \u2264 \u03b4\u2217(Fi\u22121)\u2212 1 follows by Lemma 6.\nIn each of the above cases, the construction of Fi can be carried out in time\nO(n2); in Cases 1 and 3a this also suffices to construct Mi. In Cases 2 and 3b\nwe have to perform at most \u03b4\u2217(Fi\u22121) \u2264 n augmentations; thus, by Lemma 2,\ntime O(n3) suffices for Cases 2 and 3b. Since q \u2264 n, and since Cases 2 and\n16\n3b occur at most once (we stop the construction of the reduction sequence in\nboth cases), the claimed time complexity follows. \u0003\n5.3 Second step: reduction to 2-expanding formulas\nBy the above results we can efficiently reduce a given formula until we end\nup with a formula which is 1-expanding and has no pure or singular literals.\nNext we present further reductions which yield \u03b4\u2217-critical formulas.\nTheorem 2 below is due to Lova\u00b4sz and Plummer [21, Theorem 1.3.6] and\nprovides the basis for an efficient test for q-expansion. We state the theorem\nusing the following construction: From a bipartite graph G = (V1, V2, E),\nx \u2208 V1, and q \u2265 1, we obtain the bipartite graph Gqx by adding new vertices\nx1, . . . , xq to V1 and adding edges such that the new vertices have exactly the\nsame neighbors as x; i.e., Gqx = (V1 \u222a {x1, . . . , xq}, V2, E \u222a { xiy : xy \u2208 E }).\nTheorem 2 (Lova\u00b4sz and Plummer [21]) A 0-expanding bipartite graph\nG = (V1, V2, E) is q-expanding if and only if Gqx is 0-expanding for every\nx \u2208 V1.\nLemma 15 Given a bipartite graph G = (V1, V2, E) and a maximum matching\nM of G. For every fixed integer q \u2265 0, deciding whether G is q-expanding and,\nif G is not q-expanding, finding a \u201cwitness set\u201d X \u2286 V1 with |NG(X)| <\n|X|+ q, can be performed in time O(|V1| \u00b7 |E|+ |V2|).\nPROOF. We may assume that G has no isolated vertices (for, if x \u2208 V1 is\nisolated, then G is not 0-expanding and {x} is a witness set; on the other\nhand, we can delete any isolated vertex in V2 without affecting q-expansion).\nWe compute the set of vertices RG,M (recall the definition in Section 3). If\nG is not 0-expanding, V1 \\ RG,M is a witness set by Lemma 3(4), and we are\ndone. Hence we assume that G is 0-expanding; i.e., |M | = |V1|.\nFor each vertex x \u2208 V1 we perform the following procedure. We obtain the\ngraph Gqx = (V\n\u2032\n1 , V\n\u2032\n2 , E\n\u2032) with V \u20321 = V1 \u222a {x1, . . . , xq} and V \u20322 = V2. Note\nthat the given matching M is also a matching of Gqx, and that x1, . . . , xq are\nexactly the M -exposed vertices of V \u20321 . We extend M to a maximum matching\nM \u2032 of Gqx by at most q augmentations. Now Gqx is 0-expanding if and only if\n|M \u2032| = |V \u20321 | = |V1|+ q.\nAssume that Gqx is not 0-expanding; i.e., V\n\u2032\n1 contains M\n\u2032-exposed vertices. As\nabove, we obtain the set RGqx,M \u2032 and put X\n\u2032 := V \u20321\\RGqx,M \u2032. Lemma 3(4) yields\n|NGqx(X \u2032)| < |X \u2032|. Since X \u2032 contains M \u2032-exposed vertices, and since every\nM \u2032-exposed vertex of V \u20321 belongs to {x1, . . . , xq} by construction, {x1, . . . , xq}\u2229\n17\nX \u2032 6= \u2205 follows. We show that {x, x1, . . . , xq} \u2286 X \u2032 holds. Suppose to the\ncontrary that for some x\u2032, x\u2032\u2032 \u2208 {x, x1, . . . , xq} we have x\u2032 \u2208 X \u2032 and x\u2032\u2032 \/\u2208 X \u2032.\nSince x\u2032\u2032 \u2208 RGqx,M \u2032, Gqx contains an M \u2032-alternating path P which starts in\nsome M \u2032-exposed vertex of V \u20322 and ends in x\n\u2032\u2032. For the last edge (x\u2032\u2032, y) of P ,\ny \u2208 RGqx,M \u2032\u2229V \u20321 follows. Since NGqx(x\u2032) = NGqx(x\u2032\u2032) by construction of Gqx, we\nhave (y, x\u2032) \u2208 E \u2032. This, however, is impossible by Lemma 3(2). Hence indeed\n{x, x1, . . . , xq} \u2286 X \u2032. We put X := X \u2032\\{x1, . . . , xq}. Since NGqx(X \u2032) = NG(X),\nwe have |NG(X)| < |X \u2032| = |X| \u2212 q; thus X is a witness set.\nIf we perform the above construction for all x \u2208 V1, we either end up with\na witness set X \u2286 V1, |NG(X)| < |X| + q, or we may conclude by means of\nTheorem 2 that G is q-expanding.\nIt remains to estimate the required time. The preprocessing (identification of\nisolated vertices and the construction of RG,M) can certainly be carried out in\ntime O(|V1| + |V2| + |E|); see Lemma 3(1). This estimation is dominated by\nthe claimed time complexity. For each x \u2208 V1 we construct Gqx, perform at\nmost q augmentations, and construct RGqx,M \u2032. In view of Lemmas 2 and 3(1),\nand since q is a fixed constant, each of these three tasks can be carried out in\ntime O(|V1|+ |V2|+ |E|). Moreover, after the preprocessing, G has no isolated\nvertices, thus |V1| + |V2| = O(|E|). Hence we need at most time O(|V1| \u00b7 |E|)\nto process all vertices in V1; this estimation is dominated by the claimed time\ncomplexity as well. \u0003\nLemma 16 Let F be a 1-expanding formula without pure or singular literals\nand let X \u2286 var(F ) with |FX | \u2264 |X|+1. Then F \\FX \u2261sat F and \u03b4\u2217(F \\FX) \u2264\n\u03b4\u2217(F )\u2212 1.\nPROOF. Since F is 1-expanding, |FX | = |X|+1 follows. We show that F(X)\nis satisfiable. Because F is 1-expanding, every clause C \u2208 F is exposed by\nsome maximum matching MC of F . Any maximum matching of F matches\nthe variables in X to clauses in FX ; hence, for every C \u2208 FX , the assignment\n\u03c4MC (see Section 4 for the definition) satisfies FX \\ {C}. Every proper subset\nG of F(X) is a subset of (FX \\ {C})(X) for some C \u2208 FX ; thus \u03c4MC satisfies G.\nWe conclude that F(X) is either satisfiable or minimal unsatisfiable.\nIf F(X) is minimal unsatisfiable, then |F(X)| \u2265 |X| + 1 by Lemma 10; on the\nother hand, |F(X)| \u2264 |FX | = |X|+ 1; hence the deficiency of F(X) is exactly 1.\nIn [8] it is shown that every minimal unsatisfiable formula with deficiency\n1 different from {\u0003} has a singular literal; however, every singular literal of\nF(X) is also a singular of F , but F has no singular literals by assumption. Thus\nF(X) cannot be minimal unsatisfiable, and must therefore be satisfiable. Since\na satisfying total assignment \u03b1 of F(X) is a nonempty autark assignment of\nF with F [\u03b1] = F \\ FX , we conclude by Lemma 1 that F \u2261sat F \\ FX . Using\n18\nLemma 7, we get \u03b4\u2217(F \\ FX) \u2264 \u03b4\u2217(F )\u2212 1. \u0003\nLemma 17 Let F be a 1-expanding formula without pure or singular literals,\nm = |F |, n = |var(F )|, and let M be a maximum matching of F . We need at\nmost O(n2m) time to decide whether F is 2-expanding, and if it is not, to find\nan autark assignment \u03b1 of F with \u03b4\u2217(F [\u03b1]) \u2264 \u03b4\u2217(F )\u2212 1 and some maximum\nmatching M \u2032 of F [\u03b1].\nPROOF. We apply Lemma 15 to the incidence graph of F . Thus O(n2m)\ntime suffices to decide whether F is 2-expanding, and if it is not, to find a\nset X \u2286 var(F ) with |FX | = |X| + 1. Note that \u03b4\u2217(F(X)) \u2264 1, and by the\npreceding lemma, F(X) is satisfiable. By means of Lemma 11 we can find a\nsatisfying total assignment \u03b1 of F(X) in time O(|X|2 \u00b7 (|X| + 1)) \u2264 O(n2m).\nSince \u03b1 is a nonempty autark assignment of F , \u03b4\u2217(F [\u03b1]) \u2264 \u03b4\u2217(F )\u2212 1 follows\n(Lemmas 1 and 7). We consider the matching M \u2032 = M \u2229 E(F [\u03b1]). Since M\nmatches every variable x \u2208 X to some clause C \u2208 FX , and since |FX |\u2212|X| = 1,\nit follows that M matches at most one variable y \u2208 var(F [\u03b1]) \u2286 var(F ) \\X to\na clause C \u2208 FX . Consequently, at most one variable of F [\u03b1] is M \u2032-exposed.\nTherefore, we need at most one augmentation to obtain a maximum matching\nM \u2032 of F [\u03b1]; this requires O(nm) time (Lemma 2). Whence the lemma is shown\ntrue. \u0003\nWe summarize the results of this section:\nTheorem 3 Let F0 be a formula on n variables with \u03b4\n\u2217(F0) \u2264 n, and let\nM0 be a maximum matching of F0. We can obtain in time O(n3) a reduction\nsequence (F0, M0), . . . , (Fq, Mq), q \u2264 n, such that exactly one of the following\nholds:\n(1) \u03b4\u2217(Fq) \u2264 \u03b4\u2217(F0)\u2212 1;\n(2) \u03b4\u2217(Fq) = \u03b4\n\u2217(F0) and Fq is \u03b4\n\u2217-critical.\n6 Proof of the Main Results\nTheorem 4 Satisfiability of formulas with n variables and maximum defi-\nciency k can be decided in time O(2kn3). The decision is certified by a satis-\nfying truth assignment or a regular resolution refutation of the input formula.\nPROOF. Let F be any given formula with |var(F )| = n, |F | = m, and\n\u03b4\u2217(F ) = k. Consequently, m \u2264 n + k, and the length l of F is at most\nnm \u2264 n(n + k).\n19\nBy trivial reasons, we can decide satisfiability of F in time O(2n), i.e., by\nconstructing a binary tree T , a \u201cDLL tree\u201d: The root is labeled by F , and\neach vertex which is labeled by a formula F \u2032 with var(F ) 6= \u2205 has two children,\nlabeled by F \u2032[x = 0] and F \u2032[x = 1], respectively, for some x \u2208 var(F \u2032). The\nleaves of F are labeled by \u2205 or {\u0003}. F is satisfiable if and only if some leaf w is\nlabeled by \u2205. In this case, the path from the root to w determines a satisfying\ntruth assignment of F . On the other hand, if F is unsatisfiable, then all leaves\nmust be labeled by {\u0003}. Now T gives rise to a regular resolution refutation R\nof F by means of the following (well known) construction:\nThe formula {\u0003} has the trivial resolution refutation R = \u0003. Let F be a\nformula and (x, \u03b5) \u2208 var(F ) \u00d7 {0, 1}. If R\u03b5 is a regular resolution refutation\nof F [x = \u03b5], then adding x1\u2212\u03b5 to some of the clauses in R\u03b5 yields a regular\nresolution derivation R\u2032\u03b5 of {x1\u2212\u03b5} from F . The concatenation R\u20320, R\u20321, \u0003 is a\nregular resolution refutation of F .\nHence the theorem holds trivially if k \u2265 n; next we consider the non-trivial\ncase k < n.\nWe apply the Hopcroft-Karp algorithm to the incidence graph of F and find\na maximum matching M of F in time O(l\u221an + m) \u2264 O(n3).\nWe are going to construct a search tree T of height \u2264 k such that each vertex\nv of T has at most 2 children and is labeled by a reduction sequence Sv. If\nSv = (F0, M0), . . . , (Fr, Mr), then we write first(v) = F0 and last(v) = Fr.\nWe construct T inductively as follows. We start with a root vertex v0, and we\nlabel it by a reduction sequence constructed by means of Theorem 3, starting\nfrom (F, M). Assume that we have already constructed some search tree T \u2032.\nIf var(last(v)) = \u2205 for all leaves v of T \u2032, then we halt. Otherwise, we pick a leaf\nv of T \u2032 with var(last(v)) 6= \u2205; let Sv = (F0, M0), . . . , (Fr, Mr). By Theorem 3,\none of the following holds:\n(1) \u03b4\u2217(Fr) \u2264 \u03b4\u2217(F0)\u2212 1;\n(2) \u03b4\u2217(Fr) = \u03b4\n\u2217(F0) and Fr is \u03b4\n\u2217-critical.\nIn the first case we add a single child v\u2032 to v, and we label v\u2032 by a reduction\nsequence starting from (Fr, Mr); i.e., first(v\n\u2032) = Fr.\nIn the second case we pick a variable x \u2208 var(Fr) and obtain the formulas\nF \u2032 = Fr[x = 0] and F\n\u2032\u2032 = Fr[x = 1]. We construct maximum matchings M\n\u2032\nand M \u2032\u2032 of F \u2032 and F \u2032\u2032, respectively. As above, M \u2032 and M \u2032\u2032 can be obtained\nby the Hopcroft-Karp algorithm in time O(n3) (in practice it may be more\nefficient to construct M \u2032 and M \u2032\u2032 from Mr as in the proof of Lemma 12).\nWe add two vertices v\u2032 and v\u2032\u2032 as children of v to T \u2032. We label v\u2032 and v\u2032\u2032 by\na reduction sequence starting from (F \u2032, M \u2032) and (F \u2032\u2032, M \u2032\u2032), respectively; i.e.,\n20\nfirst(v\u2032) = F \u2032 and first(v\u2032\u2032) = F \u2032\u2032.\nFor any pair of vertices v, v\u2032, if v\u2032 is a child of v, then \u03b4\u2217(first(v\u2032)) \u2264\n\u03b4\u2217(first(v))\u2212 1. Hence the construction terminates and we get a tree T of\nheight at most \u03b4\u2217(F ) = k. Hence T has at most 2k\u2212 1 vertices. It follows now\nfrom Theorem 3 that time O(2kn3) suffices for constructing T .\nIf v is a leaf of T , then deciding satisfiability of last(v) is trivial, since last(v) =\n\u2205 or last(v) = {\u0003}. However, since first(v) \u2261sat last(v) holds for all vertices v\nof T , and since for a non-leaf v, last(v) is satisfiable if and only if first(v \u2032) is\nsatisfiable for at least on of its children v\u2032, we can inductively read off from T\nwhether F is satisfiable. That is, similarly to the DLL tree considered above,\nF is satisfiable if and only if last(v) is satisfiable for at least one leaf v of T .\nMoreover, Lemma 13 allows us to obtain from T a satisfying truth assignment\n(if F is satisfiable) or a regular resolution refutation (if F is unsatisfiable)\nsimilarly as from a DLL tree as described above. Thus the theorem is shown\ntrue. \u0003\nTheorem 5 Minimal unsatisfiable formulas with n variables and n+k clauses\ncan be recognized in time O(2kn4).\nPROOF. If k \u2265 n, then the theorem holds by trivial reasons, since we can\nenumerate all total truth assignments of F in time O(2n); hence we assume\nk < n. Let F = {C1, . . . , Cm}, m = n + k < 2n. If F is minimal unsatisfi-\nable, then it must be 1-expanding and so \u03b4\u2217(F ) = \u03b4(F ) = k; the latter can be\nchecked efficiently (Lemma 9). Furthermore, we have to check whether F is un-\nsatisfiable, and whether Fi := F \\{Ci} is satisfiable for all i \u2208 {1, . . . , m}. This\ncan be accomplished by m+1 applications of Theorem 4 (we have \u03b4\u2217(Fi) \u2264 k\u22121\nby Lemma 7). Thus the time complexity O((m + 1)2kn3) \u2264 O(2kn4) fol-\nlows. \u0003\n7 Concluding Remarks\nThe reductions developed in Section 5 are well-suited for being included in\nan actual DLL-type SAT-solver, as the computational costs of their appli-\ncation is low\u2014the average costs can be expected to be significantly lower\nthan the cubic worst-case time complexity stated in Theorem 3. Moreover,\nthe search tree traced out by such a SAT-solver is then guaranteed to have\nat most 2min(\u03b4\n\u2217(F ),|var(F )|) leaves. It makes sense to apply the reductions even\nif the maximum deficiency of the given formula is large, since any subsequent\nbranching is then guaranteed to make significant progress.\n21\nFor implementing the reductions in a SAT-solver, we suggest to use a data\nstructure which holds a formula together with a maximum matching. The\nmaximum matching is then maintained incrementally when various operations\nare applied to the formula, so it suffices to run a matching algorithm just once\nat program initiation. As set forth in the proof of Lemma 9, any matching-\nautarkies that arise at run time can so be pruned in linear time. by means of\na simple DFS procedure.\nThe algorithms presented above certainly leave room for improvements. For\nexample, a speed-up could be gained by a further postponement of branch-\nings, achieved by additional reductions. \u03b4\u2217-critical formulas as obtained by the\nreductions of Section 5 impose very specific structural properties which offer\na starting point for conceiving additional reduction rules.\nReferences\n[1] R. Aharoni and N. Linial. Minimal non-two-colorable hypergraphs and minimal\nunsatisfiable formulas. J. Combin. Theory Ser. A, 43:196\u2013204, 1986.\n[2] M. Alekhnovich and A. A. Razborov. Satisfiability, branch-width and Tseitin\ntautologies. In Proc. of the 43rd Annual IEEE Symposium on Foundations of\nComputer Science (FOCS\u201902), pages 593\u2013603, 2002.\n[3] S. Arnborg, D. G. Corneil, and A. Proskurowski. Complexity of finding\nembeddings in a k-tree. SIAM J. Algebraic Discrete Methods, 8(2):277\u2013284,\n1987.\n[4] B. Courcelle, J. A. Makowsky, and U. Rotics. On the fixed parameter complexity\nof graph enumeration problems definable in monadic second-order logic. Discr.\nAppl. Math., 108(1-2):23\u201352, 2001.\n[5] B. Courcelle and S. Olariu. Upper bounds to the clique width of graphs. Discr.\nAppl. Math., 101(1-3):77\u2013114, 2000.\n[6] M. Davis, G. Logemann, and D. Loveland. A machine program for theorem-\nproving. Comm. ACM, 5:394\u2013397, 1962.\n[7] M. Davis and H. Putnam. A computing procedure for quantification theory.\nJournal of the ACM, 7(3):201\u2013215, 1960.\n[8] G. Davydov, I. Davydova, and H. Kleine Bu\u00a8ning. An efficient algorithm for\nthe minimal unsatisfiability problem for a subclass of CNF. Ann. Math. Artif.\nIntell., 23:229\u2013245, 1998.\n[9] R. Diestel. Graph Theory, volume 173 of Graduate Texts in Mathematics.\nSpringer Verlag, New York, 2nd edition, 2000.\n[10] R. G. Downey and M. R. Fellows. Parameterized Complexity. Springer Verlag,\n1999.\n22\n[11] M. R. Fellows. Blow-ups, win\/win\u2019s, and crown rules: Some new directions\nin fpt. In H. L. Bodlaender, editor, Graph-Theoretic Concepts in Computer\nScience (WG 2003), volume 2880 of Lecture Notes in Computer Science, pages\n1\u201312. Springer Verlag, 2003.\n[12] H. Fleischner, O. Kullmann, and S. Szeider. Polynomial-time recognition of\nminimal unsatisfiable formulas with fixed clause-variable difference. Theoret.\nComput. Sci., 289(1):503\u2013516, 2002.\n[13] J. Franco, J. Goldsmith, J. Schlipf, E. Speckenmeyer, and R. P. Swaminathan.\nAn algorithm for the class of pure implicational formulas. Discr. Appl. Math.,\n96\/97:89\u2013106, 1999.\n[14] J. Franco and A. Van Gelder. A perspective on certain polynomial time solvable\nclasses of satisfiability. Discr. Appl. Math., 125:177\u2013214, 2003.\n[15] G. Gottlob, F. Scarcello, and M. Sideri. Fixed-parameter complexity in AI and\nnonmonotonic reasoning. Artificial Intelligence, 138(1-2):55\u201386, 2002.\n[16] P. Heusch, S. Porschen, and E. Speckenmeyer. Improving a fixed parameter\ntractability time bound for the shadow problem. J. of Computer and System\nSciences, 67(4):772\u2013788, 2003.\n[17] H. Kleine Bu\u00a8ning. An upper bound for minimal resolution refutations. In\nG. Gottlob, E. Grandjean, and K. Seyr, editors, CSL\u201998, volume 1584 of Lecture\nNotes in Computer Science, pages 171\u2013178. Springer Verlag, 1999.\n[18] H. Kleine Bu\u00a8ning. On subclasses of minimal unsatisfiable formulas. Discr. Appl.\nMath., 107(1\u20133):83\u201398, 2000.\n[19] O. Kullmann. An application of matroid theory to the SAT problem. In\nFifteenth Annual IEEE Conference on Computational Complexity, pages 116\u2013\n124, 2000.\n[20] O. Kullmann. Lean clause-sets: Generalizations of minimally unsatisfiable\nclause-sets. Discr. Appl. Math., 130(2):209\u2013249, 2003.\n[21] L. Lova\u00b4sz and M. D. Plummer. Matching Theory, volume 29 of Annals of\nDiscrete Mathematics. North-Holland Publishing Co., Amsterdam, 1986.\n[22] B. Monien and E. Speckenmeyer. Solving satisfiability in less than 2n steps.\nDiscr. Appl. Math., 10:287\u2013295, 1985.\n[23] C. H. Papadimitriou. Computational Complexity. Addison-Wesley, 1994.\n[24] C. H. Papadimitriou and D. Wolfe. The complexity of facets resolved. J. of\nComputer and System Sciences, 37(1):2\u201313, 1988.\n[25] N. Robertson and P. D. Seymour. Graph minors. V. Excluding a planar graph.\nJ. Combin. Theory Ser. B, 41(1):92\u2013114, 1986.\n[26] P. D. Seymour and R. Thomas. Call routing and the ratcatcher. Combinatorica,\n14(2):217\u2013241, 1994.\n23\n[27] S. Szeider. On fixed-parameter tractable parameterizations of SAT. In\nE. Giunchiglia and A. Tacchella, editors, Theory and Applications of\nSatisfiability, 6th International Conference, SAT 2003, Selected and Revised\nPapers, volume 2919 of Lecture Notes in Computer Science, pages 188\u2013202.\nSpringer Verlag, 2004.\n[28] S. Szeider. Generalizations of matched CNF formulas. Ann. Math. Artif. Intell.,\n43(1-4):223\u2013238, 2005.\n[29] C. A. Tovey. A simplified NP-complete satisfiability problem. Discr. Appl.\nMath., 8(1):85\u201389, 1984.\n[30] A. Urquhart. the complexity of propositional proofs. Bull. of Symbolic Logic,\n1(4):425\u2013467, Dec. 1995.\n[31] L. Zhang and S. Malik. The quest for efficient boolean satisfiability solvers.\nIn D. Brinksma and K. G. Larsen, editors, Computer Aided Verification:\n14th International Conference (CAV 2002), volume 2404 of Lecture Notes in\nComputer Science, pages 17\u201336, 2002.\n24\n"}