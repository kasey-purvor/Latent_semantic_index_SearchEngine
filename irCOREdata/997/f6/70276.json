{"doi":"10.1109\/MDSO.2005.31","coreId":"70276","oai":"oai:eprints.lancs.ac.uk:12665","identifiers":["oai:eprints.lancs.ac.uk:12665","10.1109\/MDSO.2005.31"],"title":"Free riding on Gnutella revisited:the bell tolls?","authors":["Hughes, D.","Coulson, G.","Walkerdine, J."],"enrichments":{"references":[{"id":16314788,"title":"Availability and Locality Measurements of Peer-to-Peer File Systems,&quot;Proc. ITCom: Scalability and Traffic Control","authors":[],"date":"2002","doi":"10.1117\/12.475282","raw":"J. Chu, K. Labonte, and B. Levine, &quot;Availability and Locality Measurements of Peer-to-Peer File Systems,&quot;Proc. ITCom: Scalability and Traffic Control in IP Networks II Conf., SPIE, vol. 4, 868, 2002. IEEE Distributed Systems Online  June 2005","cites":null},{"id":16314783,"title":"Free Riding on Gnutella,&quot;","authors":[],"date":"2000","doi":"10.5210\/fm.v5i10.792","raw":"E. Adar and B. Huberman, &quot;Free Riding on Gnutella,&quot; http:\/\/www.firstmonday.dk\/issues\/issue5_10\/adar\/index.html First Monday, Oct. 2000.","cites":null},{"id":16314781,"title":"High Availability, Scalable Storage, Dynamic Peer Networks: Pick Two,&quot;","authors":[],"date":"2003","doi":null,"raw":"C. Blake and R. Rodrigues, &quot;High Availability, Scalable Storage, Dynamic Peer Networks: Pick Two,&quot; http:\/\/www.usenix.org\/events\/hotos03\/tech\/full_papers\/blake\/blake_html Proc. 9th Workshop Hot Topics in Operating Systems (HotOS-IX), Usenix, 2003.","cites":null},{"id":16314785,"title":"Measurement, Modelling and Analysis of a Peer-to-Peer File-Sharing Workload,&quot;Proc.","authors":[],"date":"2003","doi":"10.1145\/945445.945475","raw":"K. Gummadi et al., &quot;Measurement, Modelling and Analysis of a Peer-to-Peer File-Sharing Workload,&quot;Proc. 19th ACM Symp. Operating Systems Principles (SOSP), ACM, 2003, pp. 19 22.","cites":null},{"id":16314779,"title":"Measuring and Analyzing the Characteristics of","authors":[],"date":"2003","doi":"10.1007\/s00530-003-0088-1","raw":"S. Saroiu, P. Gummadi, and S. Gribble, &quot;Measuring and Analyzing the Characteristics of Napster and Gnutella Hosts,&quot;Multimedia Systems, vol. 9, no. 2, Springer-Verlag, 2003, pp. 170 184.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2005-06","abstract":"A new analysis of free riding on the Gnutella network updates data from 2000 and points to an increasing downgrade in the network's overall performance and the emergence of a \"metatragedy\" of the commons. Individuals who use peer-to-peer (P2P) file-sharing networks such as Gnutella face a social dilemma. They must decide whether to contribute to the common good by sharing files or maximize their personal experience by free riding, downloading files while not contributing any to the network. Individuals gain no personal benefits from uploading files (in fact, it's inconvenient), so it's \"rational\" for users to free ride. However, significant numbers of free riders degrade the entire system's utility, creating a \"tragedy of the digital commons.","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/70276.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/12665\/1\/BellTolls.pdf","pdfHashValue":"9ea5ca9beae59fcbeeac3c094456bcfa57981db0","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:12665<\/identifier><datestamp>\n      2018-01-24T00:04:30Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Free riding on Gnutella revisited:the bell tolls?<\/dc:title><dc:creator>\n        Hughes, D.<\/dc:creator><dc:creator>\n        Coulson, G.<\/dc:creator><dc:creator>\n        Walkerdine, J.<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        A new analysis of free riding on the Gnutella network updates data from 2000 and points to an increasing downgrade in the network's overall performance and the emergence of a \"metatragedy\" of the commons. Individuals who use peer-to-peer (P2P) file-sharing networks such as Gnutella face a social dilemma. They must decide whether to contribute to the common good by sharing files or maximize their personal experience by free riding, downloading files while not contributing any to the network. Individuals gain no personal benefits from uploading files (in fact, it's inconvenient), so it's \"rational\" for users to free ride. However, significant numbers of free riders degrade the entire system's utility, creating a \"tragedy of the digital commons.\"<\/dc:description><dc:date>\n        2005-06<\/dc:date><dc:type>\n        Journal Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:relation>\n        http:\/\/dx.doi.org\/10.1109\/MDSO.2005.31<\/dc:relation><dc:identifier>\n        Hughes, D. and Coulson, G. and Walkerdine, J. (2005) Free riding on Gnutella revisited:the bell tolls? IEEE Distributed Systems Online, 6 (6). pp. 1-18. ISSN 1541-4922<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/12665\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1109\/MDSO.2005.31","http:\/\/eprints.lancs.ac.uk\/12665\/"],"year":2005,"topics":["QA75 Electronic computers. Computer science"],"subject":["Journal Article","PeerReviewed"],"fullText":"IEEE DISTRIBUTED SYSTEMS ONLINE 1541-4922 \u00a9 2005 Published by the IEEE Computer Society \nVol. 6, No. 6; June 2005\nFree Riding on Gnutella Revisited: The Bell Tolls? \nDaniel Hughes, Lancaster University\nGeoff Coulson, Lancaster University\nJames Walkerdine, Lancaster University\nA new analysis of free riding on the Gnutella network updates data from 2000 and \npoints to an increasing downgrade in the network's overall performance and the \nemergence of a \"metatragedy\" of the commons. \nIndividuals who use peer-to-peer (P2P) file-sharing networks such as Gnutella1 face a social dilemma. They \nmust decide whether to contribute to the common good by sharing files or maximize their personal experience \nby free riding, downloading files while not contributing any to the network. Individuals gain no personal \nbenefits from uploading files (in fact, it's inconvenient), so it's \"rational\" for users to free ride. However, \nsignificant numbers of free riders degrade the entire system's utility, creating a \"tragedy of the digital \ncommons.\"2\nEytan Adar and Bernardo Huberman published an extensive study that traced Gnutella August 2000 user traffic \nover 24 hours.3 Their study contradicted the then-orthodox view that user participation and hence \ncommunication in P2P file-sharing systems is symmetrical. It also suggested a number of techniques that \ndevelopers could use to discourage free riding. \nOver 100 research papers have cited this report, even in recent publications. However, four years is a long time \nfor P2P research, a field that is only five years old. So, we decided to revisit and expand the 2000 study of \nGnutella usage. We found that free riding has increased significantly since 2000. Furthermore, we believe that \na \"metatragedy of the commons\" has now emerged, wherein, to maximize their share of the communal \nGnutella user base, rational Gnutella developers choose not to implement anti-free riding measures. \nThe 2000 study\nThe 2000 Gnutella study reported three main findings: a significant amount of free riding exists, free riding is \nuniform across different IP domains and connection speeds, and a peer can effectively be a free rider even if it \nshares many files. \nIEEE Distributed Systems Online  June 2005 \n1\nA significant amount of free-riding occurs\nTo gauge the prevalence of free riding, the 2000 study analyzed Pong and QueryHit messages (see the \n\"Gnutella 0.4\" sidebar for more information about Gnutella messages). The study found that 66 percent of \npeers shared no files at all, while 73 percent shared 10 or fewer files. Additionally, Adar and Huberman \nobserved that a very small proportion of the peers are responsible for the vast majority of the sharing: the top 1 \npercent of sharing peers accounted for 47 percent of all QueryHits, and the top 25 percent of these peers \nprovided 98 percent of the QueryHits. \nFree-riding is uniform across domains\nTo characterize free riders, the study performed two analyses. The first analyzed logged Pongs to determine if \nfree riding occurred more among peers in particular IP domains. The answer was no. The report noted a linear \nrelationship between the number of peers in a domain and the number of files that the domain as a whole \nclaims to make available to the network. The second analysis plotted the number of QueryHits each domain \ngenerated against that domain's number of peers. This showed a similarly linear relationship between the \nnumber of peers in a domain and the number of files served. So, the study concluded that free riding was \nuniformly distributed across IP domains. \nThe study speculated that domains could represent bandwidth equivalency classes (for example, cable links \ntypically connect peers on rr.com (http:\/\/rr.com) while narrowband links typically connect peers on aol.com, \nhttp:\/\/aol.com). From this, the study further concluded that free riding was uniformly distributed across \nconnection speeds. \nPeers that share files may still free ride\nThe 2000 study compared the number of files that peers advertised with the number of QueryHits they \nissued. This comparison showed numerous instances of peers claiming to share many files actually responding \nto very few Query messages. Although these peers offered files, their offerings were so unpopular with the \ngeneral Gnutella community that they were de facto free riding. Furthermore, the study noted that the range of \npopular files was actually quite narrow. One percent of search terms accounted for 37 percent of total queries \nissued, while the top 25 percent of search terms accounted for 75 percent of all Query traffic. \nCritique\nThe 2000 study offers a comprehensive analysis of the Gnutella network, based on a statistically sound sample \nof Gnutella user traffic. (See the \"Related Work in P2P\" sidebar for more information about other studies.) \nHowever, it makes two assumptions without sufficient validation: \nFirst, we looked at its assumption that domains could represent bandwidth equivalency classes and the \nconclusion that a node's tendency to free ride is unrelated to connection speed. To verify this hypothesis, we \nanalyzed the relationship between the connection speed nodes reported in Pong messages and the number of \nfiles the node makes available to the network. \nIEEE Distributed Systems Online  June 2005 \n2\nSecond, although the 2000 study briefly describes the concentration of Gnutella queries, it doesn't explain in \ndetail the experiments used to gather this information, limiting the results' usefulness. We used natural-\nlanguage processing tools4 to perform a detailed analysis of Query traffic. \nChanges to Gnutella\nSince 2000 (see the \"Gnutella 0.4\" sidebar), the Gnutella protocol has adopted significant changes primarily \nto improve its scalability. A loose coalition of developers working on the most popular Gnutella clients \nproposed these changes through the Gnutella Request for Comments.5 The most significant changes since 2000 \n(that is, from version 0.42 to 0.66) are as follows: \nl       ultrapeers and the Query Routing Protocol (QRP), \nl       Pong caching, and \nl       support for rich queries. \nUltrapeers and the QRP\nGnutella 0.4 had two scalability problems: flooding tended to unduly swamp the network, and TTL values in \nmessages (introduced to alleviate the flooding effect) tended to reduce the number of peers that any given \nsearch reached before the TTL mechanism terminated the search, usually around 10,000.7\nTo alleviate these problems, Gnutella 0.6 introduces a new scheme that uses ultrapeers and leaf nodes to create \na hierarchically structured Gnutella network. Peers with faster connections may elect to become ultrapeers, \nmaintaining many connections to the Gnutella network simultaneously (and hence routing more traffic). Those \npeers with limited resources may join the network as leaf nodes, maintaining only a small number of network \nconnections and typically not accepting incoming connections (which is the role of ultrapeers). As only \nultrapeers typically respond to incoming Ping messages, this arrangement significantly reduces the network's \nlevel of Ping and Pong traffic. \nUltrapeers also proxy for leaf nodes, only forwarding queries to leaf nodes if it appears that the node can \nanswer. This is supported by the QRP, which specifies that each leaf node should upload a vector to directly \nconnected ultrapeers containing the file names that the leaf node is sharing. The ultrapeer filters incoming \nqueries, so that leaf nodes only receive queries when their vector contains a matching file name. \nPong caching\nPing and Pong traffic comprised a significant proportion of traffic on Gnutella 0.4. To reduce this bandwidth \nconsumption, Gnutellla 0.6 introduces caching schemes for Pong messages. These include the Gnutella Pong \ncache implementation and the Ping reduction scheme.6\nThese schemes share several commonalities. Peers store a periodically refreshed array of nPong messages. \nIEEE Distributed Systems Online  June 2005 \n3\nWhen such a peer receives an incoming Ping message, it responds with several Pong messages (typically 10) \nfrom its cache rather than forwarding the Ping. The peer chooses returned Pongs to represent peers \ndistributed across the network. Pong-caching reduces the network's volume of traffic, and because each cache \ncarries Pongs from peers across the network, responses tend to be more representative. \nSupport for rich queries\nGnutella 0.4 doesn't support searches based on metadata or search by universal resource names. HUGE, the \nHash\/URN Gnutella extension,6 lets peers discover resources based on universal resource names within \nstandard Query and QueryHit messages. A peer wishing to retrieve URN data places a prefix of the \nrequired data in a standard Query message (ignored by peers that don't support the HUGE protocol). This lets \npeers search by SHA1 (Secure Hash Algorithm 1) hash value, which supports swarming, downloads of the \nsame file from multiple sources simultaneously.6\nLimeWire's (http:\/\/www.limewire.com) meta-information search protocol lets peers associate metadata with \nqueries and responses through extensible XML data, which contains separate schemas for different media \ntypes. This enables rich queries and, potentially, more accurate search term matching. \nUsing URNs in both schemes shouldn't affect the observed volume of search, response traffic, or amount of \nfree riding.\nChanges in usage patterns\nSince 2000, several important changes affecting Gnutella users have occurred that could significantly impact \nfree riding:\n copyright enforcement activities such as legal action against users sharing copyrighted files and \nantipiracy advertising campaigns, \n blocking of P2P services by ISPs, and \n access technology developments. \nCopyright enforcement\nEffective copyright law enforcement on systems such as Gnutella poses problems because of the expense \ninvolved in prosecuting a significant proportion of the user community. However, to the extent that free riding \nbecomes prevalent, copyright law enforcement through prosecution becomes increasingly feasible (because \nfew users share any files). Furthermore, copyright enforcement affects other people beyond those prosecuted; \nthis activity increases the fear of prosecution and hence the perceived risk involved in sharing files. In fact, the \nprobability of any user sharing files is likely inversely proportional to a function of the perceived detriment \ncaused, forming the basis of a positive feedback loop (see figure 1). \nIEEE Distributed Systems Online  June 2005 \n4\nFigure 1. Copyright enforcement activity as a positive feedback system.\nOur analysis of Query and QueryHit messages on Gnutella (see the \"Our experimental results\" section) \nreveals that a significant volume of queries target copyrighted materials and that a similar proportion of \nresponses refer to copyrighted files. This, together with analysis of figure 1 indicates that the future looks bleak \nfor those who wish to use Gnutella for sharing copyrighted media. Ironically, targeting peers sharing \ncopyrighted media also causes problems for those who wish to download public-domain material. Currently, \nthe same small set of servers predominantly serve public-domain and copyrighted media. If you remove these \nservers, it will drastically reduce the volume of public-domain and copyrighted material available. \nBlocking P2P services\nMany ISPs block access to P2P services because file-sharing traffic is potentially disruptive for other network \nservices, and ISPs themselves come under legal attack for copyright violation. For example, the threat of legal \naction against academic institutions effectively persuaded such institutions to restrict access to P2P services. \nP2P service blocking also occurs as a by-product of the increasing use of firewalls and network address \ntranslation. Peers behind a NAT can share files using the Push mechanism. However, if both the sharing peer \nand the downloading peer use NAT, file transfer is impossible.1 In fact, as the number of NAT-based peers on \nthe network increases, the number of such cases grows drastically (see figure 2). \nIEEE Distributed Systems Online  June 2005 \n5\nFigure 2. The effect of NAT (network address translation) on peer-to-peer transfer capability.\nWe observed 10 percent of peers reporting NAT addresses in Ping messages, twice that observed by the 2000 \nstudy. When only 10 percent of peers report NAT addresses, 1 percent of file transfers are impossible; \nhowever, as the number of peers using NAT rises to 50 percent, the proportion of impossible transfers rises to a \nmuch more significant 25 percent. So, the increasing use of NAT poses a worrying trend for the Gnutella \nnetwork. \nAnti-free riding schemes\nSince 2000, the P2P research community has created several anti-free riding mechanisms, based on incentives. \nThe Fasttrack network, for example, implements a reward-based scheme that ranks users according to the \nnumber of files they successfully upload to the network. \nBittorrent (http:\/\/bitconjurer.org\/BitTorrent\/protocol.html) takes enforced participation further, making \nuploading an intrinsic part of the protocol. In this scheme, download speed is throttled such that users \nproviding more upload bandwidth receive faster downloads. \nAnother work suggests a punitive approach to discouraging free riding.8 In this scheme, the system applies \nthree punishment levels based on the free riding's observed severity: \n At the least punitive level, the scheme limits the propagation of messages sent from peers that \ndownload more than they upload. \n At the second level, the system may ignore searches that free riding peers generate. \n At the third level, the system may disconnect malicious or unproductive peers from the \nnetwork. \nIEEE Distributed Systems Online  June 2005 \n6\nMMAPS9 seeks to establish a marketplace that lets users trade resources in a P2P environment. The \nmarketplace is one situation in which social dilemmas produce cooperation in the real world. Such an \nenvironment discourages free riding because users must upload files to gain download credits. \nIn a specifically Gnutella context, the 2000 study suggested several ways to patch Gnutella against free riding, \nincluding automatic content caching as implemented in AGnuS10 and enforced sharing of downloaded files. \nInterestingly, Gnutella has not implemented either of these measures or any of the others described. \nOur experimental results\nAs each Gnutella peer participates in routing network messages and these messages subsume all network \ninteractions, you can perform monitoring experiments simply by deploying a modified peer onto the Gnutella \nnetwork to log samples of these messages. To this end, we developed a specialized peer based on the JTella \n(http:\/\/jtella.sourceforge.net) base classes. You can access these classes and associated tools on Lancaster \nUniversity's P2P Web site (http:\/\/polo.lancs.ac.uk\/p2p). \nProtocol modifications such as those discussed in the previous section shouldn't affect our experiments, with \nthe exception of those that involve Pong logging. Because only ultrapeers accept incoming connections, we \nexpect to log fewer Pong messages on the Gnutella 0.6 network, so we'll need a longer trace for accurate \nstatistics than Adar and Huberman used in their experiments. Accordingly, we performed a one-week \nmonitoring session and verified the results with three additional 24-hour weekend traces. We maximized our \nsample base by connecting to the network as an ultrapeer and maintaining a large number of connections to \nboth ultrapeers and leaf nodes. We compared our results directly against the 2000 study's findings. \nFinding 1\nOur results indicate that 85 percent of peers share no files and that 86 percent share 10 or fewer files. The 2000 \nstudy found that 66 percent of peers share no files, and 73 percent of peers share 10 or fewer, so free riding has \nincreased significantly since then. Figure 3a illustrates that a small proportion of peers shares the vast majority \nof files and that most peers share no files. \nIEEE Distributed Systems Online  June 2005 \n7\nFigure 3. Rank ordering of peers (a) by number of files served and (b) by QueryHits.\nTable 1 shows these results as separate figures for each of the three traces we carried out. The consistency of \nthese traces gives us confidence that the results are typical and repeatable. \nTable 1. Consistency of the three traces.\nIEEE Distributed Systems Online  June 2005 \n8\nWe found that the top 1 percent of sharing peers provide 50 percent of all QueryHits, and the top 25 percent \nprovide 98 percent. The 2000 study indicated that the top 1 percent of peers sending QueryHit messages \nwere responsible for 47 percent of all QueryHits, and the top 25 percent of peers provided 98 percent. Figure \n3b shows a rank ordering of peers based on the number of QueryHits issued over 24 hours. Although these \nresults confirm Adar's overall findings, we observe that the situation has become more extreme. We \nhypothesize that this is due to increasing copyright enforcement activities and, to a lesser extent, P2P file-\nservice blocking and the increasing use of NAT. \nFinding 2\nTo determine if free riding is uniform across domains, we resolved our data into domains and top-level \ndomains (discarding addresses that we couldn't easily resolve). Figures 4a and 4b show the results, which \nconfirm Adar's findings, showing a reasonably linear relationship between a domain's number of peers and \nnumber of files available. This confirms that there is no evidence of free riding being more prevalent in some \ndomains than others.\nIEEE Distributed Systems Online  June 2005 \n9\nIEEE Distributed Systems Online  June 2005 \n10\nFigure 4. Analysis (a) by domain, (b) by top-level domain, and (c) by connection speed.\nThe 2000 study based the hypothesis that free riding is uniformly distributed across connection speeds on an \nassumption that domains could proxy for bandwidth. To investigate this more thoroughly, we first analyzed the \nnetwork's reported peer speed. Figure 4c shows a rank ordering of 6,000 peers according to connection speed \nover 24 hours. \nWe then divided peers into bandwidth equivalency classes based on their reported speed and plotted this \nagainst the average number of QueryHit messages generated over 24 hours by nodes in each bandwidth class \n(see figure 5). The number of QueryHits that peers generated isn't independent of host speed as hypothesized \nby Adar, but varies across bandwidth classes. As you might expect, users on single-line ISDN links generate \nmore QueryHits on average than users on dial-up links, and users on dual-line ISDN, cable, and ADSL links \ngenerate even more QueryHits. Counterintuitively, however, users on T1 or better connections typically \ngenerated fewer QueryHits, as Saroiu also observed.11 A minority of users (2 percent) also report their \nbandwidth as unknown. \nFigure 5. Peer speed against QueryHits.\nSo, our results don't support the idea that free riding is uniform across connection speeds. The initial \ninvestigation might have lacked detail; it didn't directly compare connection speed to the number of \nQueryHits generated or to changes in user behavior. However, reported bandwidth is somewhat unreliable. \nSaroiu discovered that up to 30 percent of nodes that report a low connection speed (single-line ISDN or lower) \nactually have significantly higher bandwidth and that 10 percent of nodes that report a high connection speed \n(T1+) actually have significantly lower bandwidth. However, Saroiu's direct measurements of peer connection \nspeed also corroborate our findings.\nIEEE Distributed Systems Online  June 2005 \n11\nFinding 3\nThe 2000 study found that the number of QueryHits a peer generates isn't proportional to the number of files \nthe peer offers, as the bulk of queries concentrate on particular topics and only a small number of peers share \npopular files. \nTo investigate this, we recorded 25,000 search terms and performed word frequency analysis on them, isolating \ncommon phrases such as \"star trek\" as single items and removing stop words such as \"and\" and \"the.\" We \nfound that the top 1 percent of peers accounted for only 10 percent of Query messages and that 25 percent of \npeers accounted for 73 percent of Query traffic. The 2000 study found that 1 percent of search terms \naccounted for 37 percent of total queries, and the top 25 percent of search terms accounted for 75 percent of \nQuery traffic. This might indicate that Gnutella users search for a broader range of material now than was \nobserved in 2000; however, we could also attribute the difference to the different experimental methods used in \nour studies. Adar didn't describe the methods used to analyze search term popularity, so this is difficult to \nassess. Table 2 breaks down Query popularity. \nTable 2. Search term popularity.\nFigure 6 shows a rank ordering of search terms. As you can see, this approximates a Zipf distribution \n(confirming the results reported elsewhere.5) \nIEEE Distributed Systems Online  June 2005 \n12\nFigure 6. Rank ordering of search terms by percent of total search terms.\nFixing Gnutella\nThe 2000 study observed the difficulty of provoking spontaneous cooperation in anonymous groups and \nsuggested that the \"tragedy of the digital commons\" might render useless systems that rely on spontaneous \ncooperation. Other work echoes this idea, including one that calls for the implementation of incentive \nschemes.12 Our experiments show that free riding has increased significantly since 2000. Additionally, we \nbelieve that a positive feedback regime is in operation, the effect of which, along with the increasing use of \nNAT, is to progressively increase free riding on Gnutella. If left unchecked, the logical conclusion of both \ntrends will be the Gnutella network's collapse. \nGiven the significant problems caused by free riding, modifying Gnutella to discourage free riding behavior (as \nrecommended by Adar, Blake, and others) should be a high priority. However, no such modifications to the \nprotocol have been made, despite significant research on incentive schemes. The Gnutella developer \ncommunity has instituted other large-scale revisions to the Gnutella protocol, such as the ultrapeer scheme for \nscalability, but they haven't addressed the problem of free riding. We hypothesize that a metatragedy of the \ncommons contributes to the Gnutella developer community's lack of action, arising from a confluence of the \nfollowing factors: \nl       a loose coalition of developers working on popular Gnutella clients proposes Gnutella modifications;\nl        clients that implement schemes to encourage sharing make it difficult for users to free ride; and\nl        most users are free riders.\nConsequently, client developers have little motivation to introduce anti-free riding measures because the user \ncommunity would likely not adopt them their introduction would result in a significant number of users \nmigrating to clients that don't have anti-free riding schemes. \nIEEE Distributed Systems Online  June 2005 \n13\nGnutella developers benefit from individuals using their clients for example, direct payment from \ncommercial clients or a large user community able to contribute to the development effort in the case of open \nsource clients. Either way, Gnutella developers share and even compete for users as a common resource. For \nexample, consider the large-scale advertising of commercial Gnutella clients (such as LimeWire and \nBearShare, http:\/\/www.bearshare.com). \nDevelopers must decide whether to address free riding by patching their clients and therefore reducing their \nuser base or to maximize their user base by not implementing incentive measures. Thus, it's \"rational\" for \ndevelopers wishing to create successful clients to not implement such measures even though this degrades the \nnetwork's overall performance and, in the longer term, would reduce the total number of Gnutella users who \nwould likely migrate to other P2P file-sharing networks. \nSo, two \"tragedies\" afflict Gnutella. First, the tragedy of the digital commons leads rational users to free ride to \nmaximize their download efficiency. Second, a metatragedy leads Gnutella developers, who wish to maximize \ntheir user base, to not update their clients with incentive measures. \nConclusion\nGnutella remains unique among P2P file-sharing systems, both in being completely open and in having a large, \nestablished, and studied user base. We can draw valuable lessons from the falling participation level observed \nsince 2000 and from Gnutella host developers' lack of response to this problem. In theory, you could address \nthe metatragedy of the commons by introducing a central body to enforce implementation of necessary \nprotocol changes. This seems fundamentally at odds with the P2P philosophy. Yet, finding an effective balance \nbetween maintaining the protocol's open nature and effectively managing its evolution could prove critical to \nthe Gnutella protocol's long-term survival. \nReferences\n1.  The Gnutella Protocol Specification v0.4,2000, \nhttp:\/\/www9.limewire.com\/developer\/gnutella_protocol_0.4.pdf. \n2.  G. Hardin, \"The Tragedy of the Commons,\" \nhttp:\/\/www.sciencemag.org\/cgi\/content\/full\/162\/3859\/1243, Science, vol. 162, no. 3859, 1968, pp. 1243\n1248. \n3.  E. Adar and B. Huberman, \"Free Riding on Gnutella,\" \nhttp:\/\/www.firstmonday.dk\/issues\/issue5_10\/adar\/index.html, First Monday, Oct. 2000. \n4.  P. Rayson and R. Garside, \"Comparing Corpora Using Frequency Polling,\"Proc. Workshop Comparing \nCorpora, Assoc. for Computational Linguistics, Oct. 2000, pp. 1 6. \n5.  K. Sripanidkulchai, \"The Popularity of Gnutella Queries and Its Implications on Scalability,\" \nhttp:\/\/www-2.cs.cmu.edu\/~kunwadee\/research\/p2p\/gnutella.html. \n6.  Gnutella 0.6, RFC Gnutella 0.6, June 2002, http:\/\/rfc-gnutella.sourceforge.net\/src\/rfc-0_6-draft.html. \n7.  J. Ritter, \"Why Gnutella Can't Scale, No Really,\"Feb. 2001, \nIEEE Distributed Systems Online  June 2005 \n14\nhttp:\/\/www.darkridge.com\/~jpr5\/doc\/gnutella.html. \n8.  M. Karakaya, I. Korpeoglu, and O. Ulusoy, \"A Distributed and Measurement-Based Framework against \nFree Riding in Peer-to-Peer Networks,\" http:\/\/doi.ieeecomputersociety.org\/10.1109\/PTP.2004.1334963 \nProc. 4th IEEE Int'l Conf. Peer-to-Peer Computing (P2P 04), IEEE CS Press, 2004, pp. 276 277. \n9.  B. Strulo, A. Smith, and J. Farr, \"An Architecture for Peer-to-Peer Economies,\" \nhttp:\/\/doi.ieeecomputersociety.org\/10.1109\/PTP.2003.1231528, Proc. 3rd IEEE Int'l Conf. Peer-to-Peer \nComputing (P2P 03), IEEE CS Press, 2003, p. 208. \n10.  D. Hughes, I. Warren, and G. Coulson, \"AGnuS: The Altruistic Gnutella Server,\" \nhttp:\/\/csdl.computer.org\/comp\/proceedings\/p2p\/2003\/2023\/00\/20230202abs.htm Proc. 3rd IEEE Int'l \nConf. Peer-to-Peer Computing (P2P 03), IEEE CS Press, 2003, p. 202. \n11.  S. Saroiu, P. Gummadi, and S. Gribble, \"Measuring and Analyzing the Characteristics of Napster and \nGnutella Hosts,\" Multimedia Systems, vol. 9, no. 2, Springer-Verlag, 2003, pp. 170 184. \n12.  C. Blake and R. Rodrigues, \"High Availability, Scalable Storage, Dynamic Peer Networks: Pick Two,\" \nhttp:\/\/www.usenix.org\/events\/hotos03\/tech\/full_papers\/blake\/blake_html Proc. 9th Workshop Hot \nTopics in Operating Systems (HotOS-IX), Usenix, 2003. \nDaniel Hughes is a PhD research student at Lancaster University's Computing \nDepartment. His research interests include distributed systems and peer-to-peer systems. He \nreceived his master's degree in distributed interactive systems from Lancaster University. \nContact him at Computing Dept., InfoLab 21, South Dr., Lancaster Univ., Lancaster LA1 \n4WA, UK; hughesdr@comp.lancs.ac.uk. \nGeoff Coulson is a professor of computer science at Lancaster University's Computing \nDepartment. His main research interests are next-generation middleware and programmable \nnetworking. He received his PhD in computer science from Lancaster University. He is a \nmember of the ACM and British Computer Society. Contact him at Computing Dept., \nInfoLab 21, South Dr., Lancaster Univ., Lancaster LA1 4WA, UK; geoff@comp.lancs.ac.uk. \nJames Walkerdine is a research associate at Lancaster University's Computing \nDepartment. His research interests include cooperative systems, information management, \nhuman-computer interaction, and peer-to-peer systems. He received his PhD in computer \nscience from Lancaster University. He is a member of the British Computer Society. Contact \nhim at Computing Dept., InfoLab 21, South Dr., Lancaster Univ., Lancaster LA1 4WA, UK; \nwalkerdi@comp.lancs.ac.uk. \nCite this article: Daniel Hughes, Geoff Coulson, and James Walkerdine, \"Free Riding on Gnutella Revisited: \nThe Bell Tolls?\" IEEE Distributed Systems Online, vol. 6, no. 6, 2005. \nGnutella 0.4\nIEEE Distributed Systems Online  June 2005 \n15\nGnutella is an open protocol that supports peer-to-peer resource discovery. The protocol builds an unstructured, \ndecentralized overlay network,1 in which each host must forward both resource discovery and network-\nmaintenance messages. In this sidebar, we first discuss the base Gnutella protocol, Gnutella 0.4, which was \nprevalent when the 2000 study took place. In the main text, we discuss version 0.6, which includes significant \nchanges. The protocol uses five message types: \nl        Ping is used in peer discovery. A peer receiving a Ping responds with a Pong message.\nl       Pong is a response to a Ping. It contains the responding peer's address and the amount of data it \nserves.\nl        Query is a search message. If a peer receiving a Query has matching data, it generates a \nQueryHit. \nl       QueryHit is a response to a Query. It contains information required to acquire the requested data. \nl       Push enables the support of downloads from firewalled peers. \nAdditionally, the protocol has three phases: connecting to the network, discovering resources, and transferring \nresources.\nNetwork connection\nAcquiring an initial host address, used to bootstrap network entry, occurs outside the Gnutella protocol, \ntypically via a GWebCache (Gnutella Web-Caching System).2 A newly arriving peer connects to a peer \ndiscovered in this way by initiating TCP connections to that host. Subsequently, a peer discovers further peers \nby sending a Ping message to directly connected peers. Each peer broadcasts, or floods, these messages to all \nneighboring peers. All peers that receive a Ping should respond with a Pong, which is forwarded back along \nthe incoming Ping's path to the originating peer. Pong messages contain the network address and port on \nwhich the sending peer is listening for incoming Gnutella connections as well as information from the peer \nregarding the amount of data and number of files available to the network. To avoid swamping the network, \npeers tag all messages with a time-to-live value, typically 7. Peers decrement a message's TTL value as it's \nrouted, discarding a message when its TTL equals 0. \nResource discovery\nPeers listen for incoming Query messages and broadcast them across the network by flooding them to each of \ntheir neighbors. If a peer can satisfy a Query, it sends a QueryHit message back along the same path. \nQueryHit messages contain the network address and port on which the responding peer is listening for HTTP \nfile-transfer connections. QueryHits also include the peer's connection speed and a set of hits (matching file \nnames) that satisfy this Query. \nIEEE Distributed Systems Online  June 2005 \n16\nResource transfer\nFile transfer occurs outside the Gnutella protocol. When a requesting peer receives a QueryHit message, it \ncan attempt to initiate a direct download from the target peer (the QueryHit message specifies its port and IP \naddress) via HTTP. However, if the target peer is behind a firewall, the requesting peer can instead send a \nPush message to the target, containing the requested file's details and the network address and port to push it \nto. On receiving a Push, the target peer establishes the HTTP connection and pushes the file to the requesting \npeer. \nReferences\n1.  J. Walkerdine, L. Melville, and I. Sommerville, \"Dependability Properties of P2P Architectures,\"Proc. \n2nd IEEE Int'l Conf. Peer-to-Peer Computing (P2P 02), IEEE CS Press, 2002, pp. 173 174. \n2.  Gnutella 0.6, RFC Gnutella 0.6, June 2002, http:\/\/rfc-gnutella.sourceforge.net\/src\/rfc-0_6-draft.html. \nRelated Work in P2P\nSince 2000, many others have studied the Gnutella network notably Stefan Saroiu and his colleagues1 and \nCharles Blake and Rodrigo Rodrigues.2 However, these studies differ significantly from the 2000 study in their \nfocus. \nAlthough Eytan Adar and Bernardo Huberman3 focused specifically on user behavior in the context of sharing \nfiles, the Saroiu work attempts to more completely characterize the peers that constitute file-sharing networks \nby considering factors such as the bottleneck bandwidth between hosts, IP-level latencies, and the frequency of \nhost disconnection and reconnection. In May 2001, Saroiu used a crawler to gather information about the \nGnutella network by aggressively broadcasting Ping messages and logging the metadata in the resulting \nPong messages. Unlike the Adar study, which assumes that domains represent bandwidth equivalency classes, \nSaroiu explicitly measures host bandwidth both as reported by the hosts and also by direct inspection, through \nwhich Saroiu discovered that a significant number of peers misreport their bandwidth. \nThe Blake study took place in 2003 and also analyzes Gnutella traffic. As you might expect, due to the \ndeployment of the Gnutella 0.6 protocol, it discovered significantly different network characteristics from the \nAdar and Saroiu studies. This study examines in detail the extent to which peer-to-peer (P2P) systems can \nprovide large-scale, reliable storage and, as such, focuses on churn rate and host capabilities. As with Adar and \nSaroiu, Blake traces Gnutella traffic; but unlike these studies, Blake doesn't perform a detailed analysis of \nusers' sharing behavior. Our work focuses on a detailed analysis of a user's file-sharing behavior, rather than \nthe low-level network factors that the Saroiu and Blake traces primarily addressed. \nOther work4 analyzes a long-term trace of traffic on the Kazaa file-sharing network and attempts to model this \nsystem's workload to inform caching schemes. This work helps you to understand the workload of large-scale, \nIEEE Distributed Systems Online  June 2005 \n17\nfile-sharing systems; however, like the Blake study, it doesn't specifically address free riding. Similarly, \nanother work studies file popularity and availability on Gnutella (and Napster) over one month but doesn't \nspecifically address free riding.5\nGenerally, studies such as the ones we've mentioned provide information about real-world P2P workloads that \nyou can use to more effectively evaluate P2P systems. Those studies that consider users' sharing behavior \ncorroborate the Adar study's basic observation that free riding is a significant problem on Gnutella and, by \nimplication, on other anonymous, decentralized P2P file-sharing systems. Unlike the Adar study or our work, \nthese studies don't consider free riding's causes or analyze free rider demographics. \nReferences\n1.  S. Saroiu, P. Gummadi, and S. Gribble, \"Measuring and Analyzing the Characteristics of Napster and \nGnutella Hosts,\"Multimedia Systems, vol. 9, no. 2, Springer-Verlag, 2003, pp. 170 184. \n2.  C. Blake and R. Rodrigues, \"High Availability, Scalable Storage, Dynamic Peer Networks: Pick Two,\" \nhttp:\/\/www.usenix.org\/events\/hotos03\/tech\/full_papers\/blake\/blake_html Proc. 9th Workshop Hot \nTopics in Operating Systems (HotOS-IX), Usenix, 2003. \n3.  E. Adar and B. Huberman, \"Free Riding on Gnutella,\" \nhttp:\/\/www.firstmonday.dk\/issues\/issue5_10\/adar\/index.html First Monday, Oct. 2000. \n4.  K. Gummadi et al., \"Measurement, Modelling and Analysis of a Peer-to-Peer File-Sharing \nWorkload,\"Proc. 19th ACM Symp. Operating Systems Principles (SOSP), ACM, 2003, pp. 19 22. \n5.  J. Chu, K. Labonte, and B. Levine, \"Availability and Locality Measurements of Peer-to-Peer File \nSystems,\"Proc. ITCom: Scalability and Traffic Control in IP Networks II Conf., SPIE, vol. 4, 868, 2002. \nIEEE Distributed Systems Online  June 2005 \n18\n"}