{"doi":"10.1080\/00207540410001716453","coreId":"137935","oai":"oai:dspace.lib.cranfield.ac.uk:1826\/1002","identifiers":["oai:dspace.lib.cranfield.ac.uk:1826\/1002","10.1080\/00207540410001716453"],"title":"Development of a knowledge model for managing schedule disturbance in steel-making","authors":["Roy, Rajkumar","Adesola, B. A.","Thornton, S."],"enrichments":{"references":[{"id":38117579,"title":"A knowledge model for decision support to manage schedule disturbance in steelmaking (PhD Thesis,","authors":[],"date":"2002","doi":null,"raw":"ADESOLA, B., 2002, A knowledge model for decision support to manage schedule disturbance in steelmaking (PhD Thesis, Cranfield University, UK).","cites":null},{"id":38117585,"title":"An Expert System for Scheduling in a Steelmaking Plant.","authors":[],"date":"1991","doi":"10.1109\/64.482954","raw":"DORN, J. AND SHAMS, R., 1991, An Expert System for Scheduling in a Steelmaking Plant. Proceedings of the 1 st World Congress on Expert Systems, pp. 395-404.","cites":null},{"id":38117586,"title":"Case-based reactive scheduling, In Roger Kerr and Elisabeth Szelke (eds) Artificial Intelligence in Reactive Scheduling (Chapman &","authors":[],"date":"1995","doi":"10.1080\/00207549608905071","raw":"DORN, J., 1995, Case-based reactive scheduling, In Roger Kerr and Elisabeth Szelke (eds) Artificial Intelligence in Reactive Scheduling (Chapman & Hall, London) pp.32-50 .   33 DORN, J. AND SHAMS, R., 1996, Scheduling High-grade Steelmaking. IEEE Expert Special Issue on AI in Steelmaking, 11 (1), pp. 28-35.","cites":null},{"id":38117588,"title":"Cooperative Scheduling and its Application to Steelmaking Processes.","authors":[],"date":"1991","doi":"10.1109\/41.88909","raw":"NUMAO, M. AND MORISHITA, S., 1991, Cooperative Scheduling and its Application to Steelmaking Processes. IEEE Transactions on Industrial Electronics, Vol. 38, No. 2. pp. 150-155.","cites":null},{"id":38117583,"title":"Generic Tasks and Task Structures: History, Critique and New Directions. In","authors":[],"date":"1993","doi":"10.1007\/978-3-642-77927-5_12","raw":"CHANDRASEKARAN, B. AND JOHNSON, T.R., 1993, Generic Tasks and Task Structures: History, Critique and New Directions. In David J.M., Krivine J.P., and Simmons R. (Eds.) Second Generation Expert Systems (Springer-Verlag, London), pp. 233-272.","cites":null},{"id":38117590,"title":"How things are intended to work: Capturing functional knowledge in device design.","authors":[],"date":"1993","doi":null,"raw":"VESCOVI, M., IWASAKI, Y., FIKES, R, AND CHANDRASEKARAN, B., 1993, How things are intended to work: Capturing functional knowledge in device design. Proceedings of the 13 th International Joint Conference on Artificial Intelligence.","cites":null},{"id":38117584,"title":"Integration of continuous caster and hot strips mill planning for steel production.","authors":[],"date":"2000","doi":"10.1002\/1099-1425(200007\/08)3:4<185::aid-jos42>3.0.co;2-g","raw":"COWLING, P. AND REZIG, W., 2000, Integration of continuous caster and hot strips mill planning for steel production. Journal of Scheduling, Vol. 3, Number 4.","cites":null},{"id":38117589,"title":"Knowledge engineering, principles and methods.","authors":[],"date":"1998","doi":"10.1016\/s0169-023x(97)00056-6","raw":"STUDER, R., BENJAMINS, V.R. AND FENSEL, D., 1998, Knowledge engineering, principles and methods. Data and Knowledge Engineering, 25(1-2), pp.161\u2014197.","cites":null},{"id":38117587,"title":"Managing Engineering Knowledge. In Melody Stokes (Ed) MOKA: Methodology for Knowledge Based Engineering Applications.","authors":[],"date":"2001","doi":null,"raw":"MOKA CONSORTIUM, 2001, Managing Engineering Knowledge. In Melody Stokes  (Ed) MOKA: Methodology for Knowledge Based Engineering Applications. ISBN 1860582958.","cites":null},{"id":38117581,"title":"Model-driven knowledge acquisition: Interpretation models,","authors":[],"date":"1987","doi":null,"raw":"BREUKER, J., WIELINGA, B., SOMEREN, M. V., DE HOOG, R., SCHREIBER, G., DE GREEF, P., BREDEWEG, B., WIELMAKER, J. BILLAUT, J., DAVOODI, M. AND S. HAYWARD., 1987, Model-driven knowledge acquisition: Interpretation models, Technical report, ESPRIT Project P1098, University of Amsterdam, Netherlands.","cites":null},{"id":38117582,"title":"The dynamic rescheduler conquering the changing production environment.","authors":[],"date":"1988","doi":"10.1109\/caia.1988.196100","raw":"BROWN, M.C., 1988, The dynamic rescheduler conquering the changing production environment. Proceedings of the 4 th IEEE Conference on AI Applications, San Diego, USA, pp. 175-180.","cites":null},{"id":38117580,"title":"XPat: A tool for Manufacturing Knowledge Elicitation. In","authors":[],"date":"2000","doi":"10.1007\/978-1-4471-0351-6_28","raw":"ADESOLA, B., ROY, R. AND THORNTON, S., 2000, XPat: A tool for Manufacturing Knowledge Elicitation. In R. Roy (ed.) Industrial Knowledge Management - Micro KM Approach (Springer Verlag).","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2004-09-15","abstract":"The development of a knowledge model, which describes the reasoning process in managing schedule disturbance in steel-making, is presented. A literature review shows the lack of research in developing a knowledge model for decision-making in steel-making. The knowledge model distinguishes three knowledge categories: task, inference and domain. Knowledge is captured for the ten most common types of disturbances in steel-making. A common inference model exists for disturbance management. A knowledge elicitation methodology called eXpert Process Knowledge Analysis Technique (XPat) combined with a CommonKADS approach was used to capture process knowledge for managing schedule disturbance in steel-making. Finally, the knowledge model is validated through paper-based simulations of three common disturbance scenarios. The validation process consisted of three components: accuracy, completeness and consistency","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/137935.pdf","fullTextIdentifier":"http:\/\/hdl.handle.net\/1826\/1002","pdfHashValue":"7d97d37d1a9556127c5caeb7f96654683e903a64","publisher":"Taylor & Francis","rawRecordXml":"<record><header><identifier>\noai:dspace.lib.cranfield.ac.uk:1826\/1002<\/identifier><datestamp>2010-04-12T14:26:18Z<\/datestamp><setSpec>hdl_1826_24<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>Development of a knowledge model for managing schedule disturbance in steel-making<\/dc:title><dc:creator>Roy, Rajkumar<\/dc:creator><dc:creator>Adesola, B. A.<\/dc:creator><dc:creator>Thornton, S.<\/dc:creator><dc:description>The development of a knowledge model, which describes the reasoning process in managing schedule disturbance in steel-making, is presented. A literature review shows the lack of research in developing a knowledge model for decision-making in steel-making. The knowledge model distinguishes three knowledge categories: task, inference and domain. Knowledge is captured for the ten most common types of disturbances in steel-making. A common inference model exists for disturbance management. A knowledge elicitation methodology called eXpert Process Knowledge Analysis Technique (XPat) combined with a CommonKADS approach was used to capture process knowledge for managing schedule disturbance in steel-making. Finally, the knowledge model is validated through paper-based simulations of three common disturbance scenarios. The validation process consisted of three components: accuracy, completeness and consistency.<\/dc:description><dc:publisher>Taylor & Francis<\/dc:publisher><dc:date>2006-02-16T16:27:20Z<\/dc:date><dc:date>2006-02-16T16:27:20Z<\/dc:date><dc:date>2004-09-15<\/dc:date><dc:type>Article<\/dc:type><dc:format>141900 bytes<\/dc:format><dc:format>application\/pdf<\/dc:format><dc:identifier>R. Roy, B. A. Adesola, S. Thornton., Development of a knowledge model for managing schedule disturbance in steel-making. International Journal of Production Research vol. 42 No 18, September 15, 2004, pp. 3975 \u2013 3994<\/dc:identifier><dc:identifier>0020-7543<\/dc:identifier><dc:identifier>http:\/\/hdl.handle.net\/1826\/1002<\/dc:identifier><dc:identifier>http:\/\/dx.doi.org\/10.1080\/00207540410001716453<\/dc:identifier><dc:language>en<\/dc:language><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn:0020-7543","0020-7543"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":[],"subject":["Article"],"fullText":" 1\nDevelopment of a Knowledge Model for  \nManaging Schedule Disturbance in Steelmaking \nR.Roy1, B.A. Adesola1, and S.Thornton2 \n1Department of Enterprise Integration, School of Industrial and Manufacturing Science, \nCranfield University, Bedford, MK43 0AL, UK. Email: {r.roy or b.adesola}@cranfield.ac.uk \n2Corus UK Ltd., Teesside Technology Centre, P.O. Box 11, Grangetown, Middlesborough, \nCleveland TS6 6UB, UK. Email: Steve.Thornton@corusgroup.com \n \nAbstract \nThis paper presents the development of a knowledge model, which describes the \nreasoning process in managing schedule disturbance (MSD) in steelmaking. Literature \nreview shows the lack of research in developing a knowledge model for decision \nmaking in steelmaking. In this paper the knowledge model distinguishes three \nknowledge categories: the task knowledge, the inference knowledge and the domain \nknowledge. The knowledge is captured for ten most common types of disturbances in \nsteelmaking. It is observed that a common inference model exists for the disturbance \nmanagement. A knowledge elicitation methodology called XPat [eXpert Process \nKnowledge Analysis Technique] combined with CommonKADS approach was used \nto capture process knowledge for managing schedule disturbance in steelmaking. \nFinally the knowledge model is validated through paper based simulations of three \ncommon disturbance scenarios. The validation process consisted of three components: \naccuracy, completeness and consistency.  \n \nKeywords: \nManaging schedule disturbance, steelmaking, application of knowledge modelling, \nknowledge engineering. \n 2\n \n1. Introduction \nIn practice the scheduling systems used to assign activities to resources often assume \nthe generated schedule will remain workable for the foreseeable future. The process of \nmanually constructing the predictive schedule for steelmaking of a twelve-hour shift \nby a human scheduler takes at least two hours. This manual scheduling time means \nthat it is difficult to react to unforeseen production events, e.g. rushed order, \nespecially during night shifts and weekends when experts might not be available \n(Cowling and Reizig, 2000). In addition, when it is necessary in advance to schedule \nseveral parallel activities, which share resources, the quality of manually generated \nschedules deteriorates with time due to unplanned events. This can cause disturbances \nand disruption to plans requiring modification actions or even rescheduling (Brown, \n1988). Frequent rescheduling often results in instability and lack of continuity in \ndetailed schedule execution. Due to the dynamic nature of the steelmaking process \nhowever, it is often difficult to maintain the original short-term schedule. The \nschedule disturbance management is a manual process and requires many years of \nexperience. The research presented in this paper intends to formalise the knowledge \nrequired to manually modify a schedule in order to minimize the impact of any \ndisturbance. The knowledge can then be used in a decision support system to improve \nthe management of schedule disturbance and avoid unnecessary rescheduling. \n \nThis paper presents a knowledge model for decision support to manage schedule \ndisturbance in steelmaking (hypothesis). Knowledge modelling is an approach to \ndevelop a Knowledge-Based System (KBS). This is a transformation approach to \nknowledge capture, by modelling \u2018what an expert does\u2019. A knowledge model for the \n 3\nMSD is a semi-formal representation of the tasks involved, the inference mechanism \nto manage the disturbance and any domain specific knowledge. In section 2, the paper \npresents an overview of managing schedule disturbance in steelmaking. Section 3 \ndescribes the approach for knowledge model development and section 4 presents \nvalidation of the knowledge model through case studies. Section 5 in the paper \npresents a discussion on the research methodology and results and finally section 6 \nconcludes with the limitation of the approach and the future research. \n \n2. Managing Schedule Disturbance in Steelmaking \nScheduling in general is a dynamic activity where several repair actions may be \nrequired depending on internal or external influences. Managing schedule \ndisturbances (MSD) is a complex knowledge intensive activity, performed by human \nexperts. This activity encompasses several ranges of dynamic tasks, such as \ngenerating alternative actions and making decision. MSD is necessary to ensure \nreaction in one domain does not affect the rest of the schedule. Disturbance in \nsteelmaking can be caused by a variety of unexpected events ranging from external \ninfluence to internal constraints. The word disturbance has been used in this context to \nmean  \n\u2018An interruption due to unexpected disruption in the steelmaking process\u2019 \nThis suggests disturbance is an incident, in which the state of normal behaviour is \nupset. For example an external influence may be rushed orders and an internal \nconstraint may be machine or tool breakdown, rework due to wrong product \nspecifications. MSD in steelmaking is:  \n\u2018A problem solving process, whereby specific problem solving knowledge (PSK) \nis specified in order to generate a set of instructions as possible actions\u2019 \n 4\n \nThe generation of instruction set depends on time available and the state of the overall \nsteelmaking schedule.  \n \nThe task of managing schedule disturbance is popularly termed as reactive \nscheduling. The human schedulers, as experts, solve problems by inferring knowledge \nfrom experience and communicating instructions about the schedule either by word of \nmouth or via Gantt chart. The use of Gantt chart in general scheduling is widespread. \nThe Gantt chart is a formal tool for communicating change in the schedule. In \npractice, there is more to reactive scheduling than updating the Gantt chart. Informal \ncommunication is common between schedulers and shop floor operatives. It is \nobserved that no one has addressed the issue of knowledge capture to support manual \nMSD. It is important to understand \u2018what the experts do to solve reactive scheduling \nproblem\u2019 and how to represent the heuristics employed during this process. The major \naim of this research is to prove that a generic model for MSD in steelmaking can be \ndeveloped. The overall argument is that MSD in steelmaking is a complex knowledge \nintensive activity that should be aided by a decision support mechanism to address \nany process constraints. According to Dorn and Shams, compatibility constraints of \nhigher grades of steel impose requirements on the sequence in which orders are \nproduced, (Dorn and Shams, 1991). To achieve certain characteristics, when \nchemicals are added it may also react with the steelmaking aggregate. \n 5\n \n3. Developing a knowledge model for MSD in steelmaking \nThe ability of human schedulers to react to unexpected events or disturbances is \nidentified as their capacity to reason about the predictive schedule and possible \nactions to minimise disruption on the shop floor. Reasoning about possible actions \nrequires understanding of processes and knowledge from past experience. This section \nfocuses on the development of a knowledge model for MSD in steelmaking.  \n \n3.1. The Approach \nIn steelmaking scheduling, each categories of disturbance are handled differently. It is \nessential that each categories of disturbance and possible action to modify or \nreschedule is well understood. In order to model the process of MSD in steelmaking \nscheduling ten most common categories of disturbances were identified: Steel out-of-\nspecification in BOS plant, Steel out-of-specification in SSM plant, Steel temperature \ntoo hot, Steel temperature too cold, Hot Metal Supply (HMS), Tap Needs Outlet, Heat \nNeeds Outlet, Clash on SSM Equipment, Clash on Concast Equipment, and Ladle \nGate Failure. The categories of MSD are identified using a series of semi structured \ninterviews with experts from three different plants within Corus. Authors also studied \nshift logs for any disturbance and analysed previous company documentation. \nProblem solving knowledge (PSK) from these categories was captured using the XPat \nmethodology (Adesola et. al., 2001). XPat knowledge elicitation methodology is easy \nto use by the experts and is suitable for process knowledge capture. This is followed \nby the development of knowledge items contained in the PSK. Adesola (2002) \nreviewed seven knowledge modelling frameworks (KMFs) to evaluate their suitability \nto support different stages of knowledge capture and reuse. CommonKADS \nmethodology in (Schreiber, et. al., 1999) emerged as the most effective in terms of \n 6\nexplicit realisation of evaluation criteria. Therefore, CommonKADS methodology is \nfollowed to analyse the XPat interview results and develop the knowledge model. \nValidation of the model is performed using paper-based simulations of three case \nstudies for accuracy, completeness and consistency. \n \nThe process of developing PSK for MSD consists of seven steps. The first two steps \nidentify and capture domain specific knowledge and their sources. Steps three and \nfour describe direct knowledge elicitation techniques used to collect, interpret and \ntransform problem solving processes. Direct knowledge elicitation techniques such as \ninterviewing and protocol analysis have been used in steps 1 - 4.  \n \nStep 1: Review existing documentation \nStep 2: Generate Scenarios \nStep 3: Interview Experts using a questionnaire based on XPat \nStep 4: Transcribe and Interpret \nStep 5: Determine Task Type  \nStep 6: Validate and repeat steps 3 - 5 \nStep 7: Document PSK \n \nThe protocol knowledge acquired is analysed to produce output in the form of rules \nand procedures. These represent the domain expertise that people bring to bear in the \ndecision process. Once the knowledge have been identified and elicited the next step \nis to classify the nature of task. To elicit knowledge, simple structured questions were \ndeveloped based on XPat approach. The questions were intended to allow knowledge \nengineers to draw out from expert schedulers how they reason during problem solving \n 7\nand what information sources are used and or reused, the people involved and the \nnature of interactions. Four experts were interviewed, in addition, the authors \nobserved experts during MSD. Figure 1 present a problem solving (procedural) flow \nchart for steel out-of-specification in the Basic Oxygen Steelmaking (BOS) Vessel.  \n \nDifferent categories of disturbance require different PSK. A PSK in this case consists \nof eleven knowledge items as listed below.  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFigure 1: Problem solving (procedural) flowchart for out-of-specification \n(OOS) Steel in the BOS Vessel \nO O S  S tee l a t B O S  P lan t:C on v erte r V esse l\nB O S  A n a ly s is\nO u t o f S pec\nId en tify  \nW h a t E lem en t is O O S ?\nC an  O O S\nele m en t b e  re c tified\nin  th e  C o n v erte r\nV esse l\nT ap  a s n o rm al \nan d  con t inu e  to  \ncas t\nY es\nN o\nIs  E lem en t O O S\nw ith in  C u s tom e r\nL im it\nY es\nN o\nIs  th e re  tim e  \nto  co n tac t th e  \nc u sto m er\nIs  th e  lad le  \nthe  fi rst\nin  a  se qu en c e\nY es W ill th e\n cus tom e r accep t \nO O S  stee l\nY es\nC rea te\nH ea t N e ed s  O u tle t\nP A 1\nP A 2\nR 1\nR 2\nR 3\nR 4\nC an  O O S\nS tee l b e  rea llo ca ted\nY es\nR 6\nR 5\nR 7\nN o\nN o\nY es\nN o\nA n a ly s is  T as k\nS y n th e sis  T as k\n 8\n \n1. Problem description \u2013 A brief description of the problem in terms of the nature \nof the problem and its location.  \n2. Entities involved \u2013 A list of the steelmaking equipment and systems involved in \nthe disturbance. \n3. People involved \u2013 A list of people consulted by the shift scheduler about possible \nactions.  \n4. Relevant knowledge \u2013 This refers to both tacit and explicit knowledge relevant to \naddress the disturbance. \n5. Problem recognition \u2013 An indication of who inform the shift scheduler, sources \nmay include people and systems  \n6. Consequences \u2013 A measure of the effect on business and scheduling overall \n7. Possible Actions \u2013 This refers to repair actions linked to the reasoning process. \n8. Considerations -  This describe the possible implication on cost and performance. \n9. Implementation \u2013 A procedural flowchart illustrating the flow of reasoning. \n10. Glossary of Term \u2013 List of common terminology used during problem solving. \n11. Data Utilised \u2013 Indicates the required data and information to generate actions  \n \nItem number nine represents procedural or problem solving flowcharts, which \nillustrate the flow of reasoning. Together all of these represent a structured format for \neliciting knowledge about different categories of disturbance. \n 9\n \n3.2. From PSKs to a Knowledge Model \nCommonKADS, the leading methodology, influenced the development of knowledge \nmodel in this research. It distinguishes three knowledge categories: task knowledge, \ninference knowledge and domain knowledge. The task knowledge defines control over \nthe inferences, the inference knowledge describes basic inference steps performed \nusing domain knowledge and the domain knowledge specifies knowledge and \ninformation types in an application. The knowledge model development starts by \nselecting a template knowledge model (TKM) from the CommonKADS library of \ntemplates. Template selection is itself a knowledge intensive activity, because it \nrequires understanding of the domain and the goals that the task intends to achieve.  \n \nFrom the initial study, it is observed that the task of MSD is a combination of analytic \nand synthetic tasks. The nearest inference structure in this case is the configuration \ndesign task template in Schreiber et al., (1999). Configuration design method uses a \nvariation of the propose-critique-modify class of method described in Chandrasekaran \nand Johnson (1993). The \u201cpropose\u201d part of the method is similar to the predictive \nschedule, the \u201ccritique-modify\u201d doesn\u2019t exactly fit MSD but some of the features are \nsimilar to construct and repair a schedule. Since existing task templates are not \nadequate for MSD, this template presents a useful starting point to adapt and construct \na TKM for the application task at hand. \n 10\n \n3.2.1. Mapping XPat to CommonKADS: Knowledge Specification \nThe flowchart in Figure 1 features two major classes of problem solving tasks, \nanalytic and synthetic (Breuker, et. al., 1987; Schreiber, et. al., 1999; Tansley and \nHayball 1993). It captures typical analytic and synthetic features of the problem-\nsolving knowledge. For each disturbance category, the flowchart method was used to \ncollect procedures used for problem solving. The flowchart indicates how steelmaking \nschedulers reason during problem solving process. The interpretations of these \nflowcharts provide the necessary understanding for the role of knowledge and the \ninferences made.  \n \nFigure 2 shows the two routes prescribed in CommonKADS methodology to map \nreasoning process onto the knowledge model specification. The \u2018middle-out\u2019, requires \nparallel activities involving decomposition of tasks through the application of \nmethods whilst refining the domain knowledge at the same time. The inference \nstructure represents inference functions with the \u201cellipse-shape\u201d and knowledge roles \nwith the \u201crectangle-shape\u201d. The task knowledge and the domain knowledge are \nmapped to the inference structure via the inference functions and knowledge roles \nrespectively. The approach taken in this research is the middle-out route. The decision \nto start construction of the inference structure by middle-out route was influenced by \nthe flowchart method of collecting problem solving knowledge. \n 11\n \n3.2.2. Inference Knowledge Specification \nIt is observed that existing CommonKADS TKM are not adequate for the problem of \nMSD in steelmaking, hence it is necessary to adapt the existing template and construct \nan inference structure for MSD. In the previous section, the decision to adapt and \nconstruct the TKM via the middle-out route was made based on data available about \nproblem solving process. This section discusses the evolution of the inference \nstructure for MSD. \nFigure 2: Knowledge Model Specification (Schreiber, et. al., 1999). \nDOMAIN SCHEMA\n\u2022Concepts\n\u2022Relations\n\u2022Rule Types\nExpressions in knowledge bases\nKNOWLEDGE\nBASE\nDEFINITIONS\nrole mapping\ndefines control over\nmiddle in middle out\nTasks\nand Methods\nInference\nstructure\n 12\n \nThe Evolution of Inference Structure for MSD in Steelmaking \nFigure 3 illustrate the evolution of the inference structure. A bottom-up approach to \nmodel based knowledge acquisition has been applied to construct an inference \nstructure. The inference structure is based on available \u2018configuration design\u2019 task \ntemplate that fits only part of the reasoning pattern of the knowledge intensive task \nidentified, during knowledge elicitation (Adesola, et al., 2002). Authors studied all ten \ncategories of disturbances (corresponding to ten categories of PSKs) identified during \nthe research. It is observed that a common pattern exists between the PSKs, which \nsuggests steelmaking scheduling experts\u2019 reason about the problem solving in a \nsimilar way. To achieve a generic inference structure the steps in problem solving \nwere identified in order abstract patterns of behaviour. The steps were then put \ntogether to form an inference structure through an iterative approach which involve \ncommunication with the experts and refinement at each stage to update the reasoning \nprocess. There were two iterations in the evolution of the inference structure.  \nFigure 3: Evolution of Inference structure for MSD in steelmaking \nInitial Inference \nStructure\nIntermediate\nInference \nStructure\nFinal\nInference \nStructure \nConfiguration\nDesign TKM\nBottom-Up\nTop-Down\nSelect and Construct\nInitial Inference Structure\nValidate Reasoning Process \nand Refine as Intermediate \nInference Structure\nValidate Reasoning \nProcess and Refine as \nFinal Inference Structure\nAnnotate \nFinal \nInference \nStructure\nwith\nDomain Data\n 13\n \nChanges made to the initial and intermediate inference structure include identifying \ninput\/output for the newly discovered inference functions in order to extend the \nreasoning process. The first task was to identify and evaluate model mismatches in the \nintermediate inference structure and delete them. With further iteration the \nintermediate inference structure was annotated with domain data and further \nrefinement was carried out to produce the final inference structure.  \n \nThe Final Inference Structure \nThe final inference structure in Figure 4 demonstrates a combination of task types. \nMonitoring is an analytic task to establish behaviour of a system (Breuker, et. al., \n1987), the task involves selecting a system parameter that can reveal new findings, a \nnorm value is then specified and compared with the new findings. If there is any \ndifference it is usually classified as minor or major discrepancy representing the \nanalysis part of the task. The task of modifying a schedule is synthetic by nature. The \ngoal of a synthetic task is to find a structural description of a system in terms of some \ngiven set of elements, formalism or partial structures. In order to identify a \nspecification, a synthetic task may initially contain an analytic task (Breuker, et. al., \n1987). \n \nConstruction of the inference structure is realised by identifying first, the inference \nfunctions for the analysis task, and then synthetic tasks. For the analytic task, the three \ninferences identified were \u2018monitor\u2019, \u2018verify\u2019 and \u2018specify\u2019. For the synthetic task, the \nthree inferences identified were \u2018generate\u2019, \u2018modify\u2019 and \u2018reschedule\u2019. The flowchart \nmethod abstracts the analytic task of monitoring and classifying system behaviour. It \nprovides a top-level view of the problem-solving method. \n 14\nFigure 4: Inference structure for MSD in steelmaking \n \nThe human scheduler receives system data (unsolicited message), analyses it and may \nobtain additional data if he chooses. The \u2018system data\u2019 is a message, informing that \nthere has been a violation. The violation is of type represented as \u2018constraints\u2019 or \n\u2018business rule\u2019. In this example, the \u2018monitor\u2019 inference checks the chemical analysis \nagainst the specifications of each element for \u2018constraint violation\u2019. The \u2018verify\u2019 \ninference confirms the status of the schedule via a \u2018truth\u2019 value. If a constraint is \nviolated, it returns \u2018True\u2019 else \u2018False\u2019. Depending on the categories of disturbance, \npossible actions may range from, \u2018do nothing\u2019, to local modification action, or in the \nlast resort, reschedule of the whole program.  If the truth-value returned is \u2018True\u2019, a \n\u2018discrepancy\u2019 class is identified. This will then point to \u2018specify\u2019 inference to find an \nappropriate \u2018fix\u2019. The process of generating actions to \u2018modify\u2019 the heat sequence \ndepends on the state of the schedule and implements the action list, and in the worst \ncase produces a message to ask for rescheduling. \nmonitor\nDiscrepancy\nreceive\nObtain\nspecify\naction\nlist\ntruth \nvalue\nschedule\nmodify\nreschedule\nverify\n System \ndata\nIndex of Problem\nSolving Knowledge\ngenerate\nFix\nConstraints and\nBusiness Rules\nChange\nlist\n 15\n \n3.2.3. Task Knowledge Specification \nIn the previous section, a middle-out approach was followed to construct an inference \nstructure for MSD in steelmaking. This section describes the process of specifying \ntask knowledge, the control structure and general characteristic of the task manage-\nschedule-disturbance. Figure 5 shows the task structure for MSD. The task Manage-\nSchedule-Disturbance was identified using XPat. The task structure was developed by \nfollowing five steps. \n \nStep 1: Define the top-level task. This is the goal the scheduler intends to achieve. \nStep 2: Identify task method to realise the top-level task. \nStep 3: Decompose the task method into subtasks. \nStep 4: Decompose subtasks into subtask methods \nStep 5: Decompose subtask methods into primitive tasks, that is, leaf functions. \n \nThe link between task and inference structure is shown as the leaf function. The \nstructure is a decomposition of top level composite task. The task knowledge category \ndescribes the goals and the strategies that will be employed to realise the goals. In this \ncase the task is to manage-schedule-disturbance to maintain sequence of heats, in \norder to minimise the risk of needing to reschedule orders. The task knowledge is \ndescribed in a hierarchical fashion. The top-level task1 MANAGE-SCHEDULE-\nDISTURBANCE is decomposed into smaller tasks, which in turn is split into even \nsmaller tasks. The task does not include rescheduling task. It only decides whether \nrescheduling is necessary, therefore rescheduling is shown as dashed dotted line in the \n                                                          \n1 Composite task is a problem solving action it specifies an abstraction level and require decomposition before it \ncan be executed.  \n 16\ndiagram (see Figure 5). The lowest level tasks2 are the leaf functions and are linked to \ninferences and transfer functions in the inference structure. \nFigure 5: Task Structure for MSD in steelmaking \n \nThe task method defines a reasoning goal, in other words, how the task MANAGE-\nSCHEDULE-DISTURBANCE can be realised through decomposition into sub-\nfunctions. In this case, the top-level task is decomposed by a task method MONITOR-\nCONSTRUCT-REPAIR. The sub task \u2018monitor\u2019 describes the activities that track \nschedule execution and verify the state of the original schedule. This involves looking \nup at the Gantt chart and other information sources for systems data. The sub-task \n\u2018construct\u2019 specifies problem solving knowledge and generates possible actions for a \ngiven problem. This involves negotiating with shop floor operators, suppliers (Blast \nfurnace for hot metal) and the customers (mill schedulers) to find solution to maintain \nstability of the steelmaking process. For example, in the event of out-of-specification \nsteel in BOS Vessel the scheduler uses his\/her expertise to generate possible actions \n                                                          \n2 Primitive task as they have enough knowledge available that they can be solved without further decomposition. \n Manage-Schedule \nDisturbance\nManage Schedule \nDisturbance by Monitor-\nConstruct-Repair\nMonitor\nVerify\nRepairConstruct\nMonitor\nSchedule \nVerify \nSequence\nGenerate \nAction\nModify\nSequence\nReschedule \nSequence\nSpecify \nFix\nMonitor Specify Generate\nInstruction\nto Modify\nschedule\nInstruction to\nReschedule\nTask\nTask\nMethod\nSub\nTasks\nSub\nTask\nMethods\nLeaf\nFunctions\n(Inferences)\n 17\nby analysing requirements and trade-offs to balance the objectives of the plant. The \nsub task \u2018repair\u2019 presents possible modification actions to remove constraint violation \nor generate change list for rescheduling action where it is necessary. The latter action \nis the last resort.  \n \nThe sub-tasks are decomposed into sub-task methods. For example, the sub task \n\u201cmonitor\u201d is decomposed into \u201cmonitor-schedule\u201d and \u201cverify-sequence\u201d. In real life, \nthese two functions are performed iteratively by the scheduler during the problem \nsolving process. In order to respond to system data that indicates discrepancy, the \nmonitor function tracks system data (feedback from various sources including \nunsolicited messages received) from the shop floor operators. For verification, the \nscheduler checks specification for constraint violation. For example, if temperature is \ntoo hot in a ladle such that it is not possible to send the steel to a caster, verify sub-\ntask will return false, a Boolean value. This result of verification will be passed onto \nspecify sub-task which will call the appropriate problem solving knowledge (PSK) \nfrom the index of PSK.  \n \nThe index of PSK is where procedures are stored for the different categories of \ndisturbance such as out-of-specification, temperature-too-hot, ladle-gate-failure etc. \nThe leaf functions describe the lowest level of reasoning in the inference structure, \n(Schreiber, et. al., 1999). For the purpose of problem solving, the \u2018construct\u2019 method \nuses \u2018specify\u2019 and \u2018generate\u2019 function, as procedures for handling specific problems. \nIn order to present actions to address a specific problem, the sub-task \u2018modify\u2019 is \nemployed and the \u2018reschedule\u2019 function is used when it is not feasible to \u2018modify\u2019 a \nschedule.  \n 18\n \nControl Structure \nIn Figure 6 a graphical representation of the method control structure for MONITOR-\nCONSTRUCT-REPAIR task is shown. This presents a graphical view of the method \nof control. The control structure assumes there is an observation that can verify the \nexistence of a discrepancy and then the steps are followed. In Figure 7, a generic \ndefault method applicable to MSD in steelmaking is shown. The method is data \ndriven, this is represented with the use of the transfer function \u2018receive\u2019 (an external \nagent a human user or a subsystem has the initiative). Whenever the system receives \nexternal data the controller checks for abnormal behaviour in the schedule execution. \nThe system checks the observed values by actively seeking new data (through \u2018obtain\u2019 \ntransfer function).  \nFigure 6: Control Structure for MONITOR-CONSTRUCT-REPAIR \nT rue\nFalse\nT rue\nFalse\nm onitor\nverify\nspecify\ngenerate\nm odify\nreschedule\nS tart m anage-schedule-d isturbance\nby m onitor-construct-repair\n 19\n \n3.2.4. Domain Knowledge Specification \nThe domain knowledge is static in the sense that, it presents a description of the facts \nabout the domain without knowing how this knowledge might be used in problem \nsolving. In this sense, domain knowledge is task dependent and domain specific. \nScheduling task in general is relatively weak in providing domain knowledge because \nof the dynamic nature of scheduling task as compared to other synthetic tasks e.g. \nconfiguration designs.  \n \nGeneral characterization of managing-schedule-disturbance task \n \nGoal:    Given a set of units and resources assigned to a  \nschedule, monitor execution, find constraint violation  \nand apply a fix-action to satisfy constraint. \n \nTypical Example: Disturbance management in steelmaking. \n \nTerminology:  \nSystem data: data that initiate disturbance in a process \nDiscrepancy: abnormal behaviour in schedule execution \nFix: an ordered list of possible actions to remove or at least  \nminimise discrepancy \nConstraint: a control or something that limit process behaviour.  \n \nInput: Complaints about disturbance affecting a schedule \n \nOutput: A set of instructions to minimise the impact of schedule  \ndisturbance in steelmaking. \n \nFeatures:  \nManaging schedule disturbance is traditionally a manual activity and  \nin principle lacking any structure. The activity straddles both analytic  \nand synthetic task and demands balanced attention.  \n \nFigure 7: Default method for MSD in steelmaking \n 20\n \nCommonKADS does not prescribe a fixed formalism for describing domain structure. \nHowever, \u2018frames\u2019, \u2018is-a hierarchy\u2019, \u2018rule sets\u2019 are examples of domain structures, \nwhich are used in CommonKADS. In order to acquire domain knowledge, each item \nof declarative knowledge was classified into four types: concepts, attributes, relations \nand rule types.  \n \nThe starting point for domain knowledge modelling is the analysis of interview \ntranscript to generate a set of concepts, relations and attributes. Using the transcript of \ninterview in (Adesola, et. al., 2000) the following domain knowledge were elicited. \nFigure 8, shows the domain schema drawn from elicited domain knowledge using \nXPat. The natural language analysis (Vescovi, et. al., 1993) technique provides a good \nfirst guidance for understanding the meaning of text in the transcript. The main \nproblems with this approach however, is that it is time consuming, one needs different \nscenarios for analysing different types of sentences. \nFigure 8: Typical domain knowledge types in MSD through monitor-construct-repair \nschedule-element schedule-\nelement\nheat Steelmaking-equipment\nBOS-equipment SSM-equipment\n1\n*\n*\n1 constraint\nviolate\nfix action\nconstraint\nexpression\naction type\ncomputes\ncalculation\nexpression\nheat-\ntemporary-\ndefinition\n1 *\nHeat-element element-limit\nLocated-atHeat-number:integer\nfix\nindex of problem\nsolving knowledge\n1\n*\nCode of\npractice\nConcast-equipment\n 21\n \n4. Knowledge Model Validation  \nThis section presents the validation of the reasoning process through paper-based \nsimulations, as adapted from CommonKADS. The validation process consists of three \ncomponents. The first component concerns what is happening and the entities \ninvolved in domain specific terminology, this was validated for accuracy. The second \ncomponent describes the associated inference functions and knowledge roles3 \nrequired, determining the actions; this was validated for completeness. The third \ncomponent provides for additional explanation and comments about actions, which \nare taken, this was validated for consistency. Therefore, accuracy, completeness and \nconsistency are used as the measurement criteria for the validation; they are also \nsupported by existing literature on knowledge analysis. The knowledge model is \nvalidated with three case studies that reflect the required system behaviour. A paper \ntrace in terms of the knowledge model constructs is generated. A set of questionnaires \nwas designed from the measurement criteria to validate the knowledge model. Three \nexperts validated the knowledge model, which lasted 12 man-hours over three days \nduring this time changes were made to the structure and contents of the knowledge \nmodel. Informal discussion about the behaviour of the model was captured on \naudiotape and transcribed, this was later used to support changes to the paper trace \nwhere appropriate.  \n \nThe case studies chosen represent the most common categories of disturbance in \nsteelmaking scheduling. The inference structure for MSD is validated with domain \nexperts to confirm that it is sufficiently detailed. The validation also indicates that it is \n                                                          \n3 Abstract names of data objects that indicate their role in the reasoning process. \n 22\neasy to find domain knowledge that could act as static roles4 for the inference \nstructure. . Table 1 shows the three case studies for the knowledge model validation, \nthere are two scenarios for each case study. A complete description of all three cases \nwith the scenarios can be found in Adesola (2002). Appendix A presents a paper \nbased simulation result for \u2018Steel OOS BOS Vessel-B (Scenario 1)\u2019 Case Study result \nas a sample. \nTable 1: Case Studies for Knowledge Model Validation \nCase studies Description \nA Out-of-specification in the BOS Vessel \nB Out-of-specification in the Secondary Steelmaking (SSM) plant \nC Steel Temperature Too Hot BOS \/ SSM plant \n \nEach scenario describes specific disturbance, the conditions and actions. The paper \nsimulation is performed in a tabular form with three columns, the first column \nidentifies what happens in the domain, entities involved including the scheduler, the \nshop floor operator and the systems used. In the second column, the knowledge model \n(inference functions and knowledge roles) identifies necessary variables and rules to \ngenerate possible actions. The knowledge model realises the required problem solving \nthrough the sequence of inferences defined. The third column provides explanation \nand comments about action to validate the knowledge model. Each experts were \ngiven: (a) the three case studies, (b) six paper simulation tables and (c) a set of semi-\nstructured questionnaires. Each expert was required to study and cross check items (a) \nand (b) above. Each column of the paper simulation table is validated against the \nmeasurement criteria. For example, the domain data is validated for accuracy, \nknowledge model is validated for completeness and the explanation is validated for \nconsistency. After cross checking, experts were asked to complete the validation \n                                                          \n4 These are more or less stable over time, they specify collection of domain knowledge that is used to make inferences \n 23\nquestionnaire and comment on their overall experience. Table 2 presents the \nvalidation results.  \nTable 2: Knowledge Model Validation Results, a score of 4 means \u2018strongly agree\u2019 and 1 means \n\u2018strongly disagree\u2019. \n \nCase \nStudies Scenario \nKnowledge Model \nSimulation \nMeasurement \nCriteria \nExpert \nA \nExpert \nB \nExpert \nC \nScore \nE\/12 x \n% \nDomain Data Accuracy 4 4 4 100% \nKnowledge Model Completeness 4 3 4 91% 1. Vessel-B \nExplanation Consistency 3 4 4 91% \nDomain Data Accuracy 4 3 3 83% \nKnowledge Model Completeness 4 3 4 91% \nA \n \nSteel OOS \nBOS Vessel 2. Vessel-C \nExplanation Consistency 3 3 4 83% \nDomain Data Accuracy 4 3 3 83% \nKnowledge Model Completeness 4 2 3 75% 1. Flusher-B \nExplanation Consistency 4 3 4 91% \nDomain Data Accuracy 4 4 3 91% \nKnowledge Model Completeness 2 3 3 66% \nB \n \nSteel OOS \nSSM Plant 2. RH- Degasser \nExplanation Consistency 3 3 3 75% \nDomain Data Accuracy 3 3 3 75% \nKnowledge Model Completeness 2 2 2 50% 1. Vessel-B \nExplanation Consistency 2 2 2 50% \nDomain Data Accuracy 3 3 3 75% \nKnowledge Model Completeness 4 3 4 91% \nC \nSteel \nTemperature \nToo Hot \nBOS\/SSM \nplant \n2. RH- \nDegasser \n Explanation Consistency 4 3 3 83% \n61 54 59 58 \n=61\/72 =54\/72 =59\/72 =58\/72   \n84% 75% 81% 80% \n \nThe result of paper based simulation (Table 2) indicates the model match problem \nsolving behaviour. The experts scored 84% (average) for accuracy of domain data, \nwhich indicates the domain data reflected typical systems data for a specific category \nof disturbance in steelmaking scheduling. For the knowledge model, the experts \nscored 77% to indicate that the knowledge model completely captures the inferencing \nprocess in the problem solving behaviour to MSD. The result of explanation (79%) \nindicates there is consistency in the relationship expressed between the domain data \nand the analysis in the knowledge model. \n 24\n \n5. Discussion  \nThere is now an overall consensus that the process of building a KBS may be seen as \na modelling activity (Studer, 1998). A generic inference structure for disturbance \nmanagement in steelmaking scheduling has been constructed. Many components have \nbeen identified with potential for reuse. The methodology applied in this research \nfollows an academic approach, which pursues a framework for capturing human \nknowledge and conversion into a system for reuse combined with parallel validation \nthrough case studies in the industrial environment.  \n \nA methodology, called XPat, to capture process knowledge has been applied. The \nmethod aims to improve the natural knowledge elicitation technique by facilitating \nexperts to express and display their expertise within a flexible and structured process. \nFrom the interpretation of interview transcript, ten categories of disturbances in \nsteelmaking were elicited from experts. Eleven knowledge items were defined for \neach category of disturbances. These knowledge items constitute problem-solving \nknowledge for MSD in steelmaking. The knowledge items include implementation \nflowcharts for each PSK. This part of the research is prone to bias due to the \ninterpretation by the researchers. The bias is minimised by careful design of the \nquestionnaire and through additional observation. The benefit of developing the \nknowledge model this way is that it is easy to trace each function through the \ninference function. The knowledge model is reusable and adaptable. One of the main \nadvantages of model based knowledge engineering is the concept of reusability. \nPotentially, combination of model elements can be reused. It is intuitively clear from \nthe knowledge model in the research that large parts of model are not specific to \n 25\nsteelmaking. Parts of the task and the inference knowledge can re-occur in other \ndomain and\/or tasks.  \n \nThe knowledge model has been validated with three case studies. The approach \nemployed for validation was repeated \u201cwalk through\u201d paper simulation with domain \nexperts. Where necessary, feedback from the walk-through tests was used to \niteratively modify and extend the knowledge model. The case study has shown that \nthe knowledge model has accurately captured problem solving knowledge and rules. \nThe knowledge model is generic to steelmaking. Although the knowledge model has \nnot been tested in other industries, it is expected that this can provide a basis for \nanalysing management of schedule disturbance in other sectors. The knowledge \nmodel reflects expert reasoning process.  \n \nHowever as with any other research, the methodology has some limitations. The \nweakness of the methodology is its applicability to other domain, since time and \nresources limited the research; it has not been tested widely. With more time and \nresources the methodology should be tested in complex environment, like managing \nairline gate assignment. \n \nIn future, a prototype decision support system will be developed (for offline use) to \nimplement the knowledge model and to exploit the inference structure in other \napplication areas where disturbance management is critical to the business.  \n 26\n \n6. Conclusions  \nThis paper has identified human expertise as the dominant factor in manual \nscheduling. It has demonstrated how the result of knowledge elicitation through XPat \nmethodology can be utilised to develop a knowledge model for MSD in steelmaking. \nThis proves the hypothesis of this research.  \n \nThe main problem is that MSD in steelmaking is not formalised. This research has \nformalised elicited knowledge for decision support to MSD in steelmaking. The \napproach is novel and supports \u201cmiddle-out\u201d route for completing knowledge model \nin CommonKADS. The approach demonstrates that it is possible to construct a \ngeneric inference structure from problem solving knowledge identified by flowcharts. \nThe inference structure is sufficiently detailed for implementation to provide the \nreasoning process for managing schedule disturbance.  \n \nThe knowledge model has been validated with a case study in out-of-specification \nsteel \u2013 BOS Vessel. The case study shows that the knowledge model has accurately \ncaptured problem solving knowledge and rules. The knowledge model is generic to \nsteelmaking. Although the knowledge model has not been tested in other industries, it \nis expected that this can provide a basis for analysing management of schedule \ndisturbance in other sectors.  \n \nIn conclusion, this paper presents the development of a knowledge model to manage \nschedule disturbance in steel making. In future, the model can be implemented to \ndevelop a decision support system for the disturbance management. \n 27\n \n7. Acknowledgements \nThis research is being carried out as part of a Doctoral study at Cranfield University \nand is sponsored by EPSRC and Corus UK Ltd. Authors would like to thank the \nemployees of Corus UK Ltd. for their help and support during the knowledge \nelicitation. \n \n8. The Appendix: Case Study A \nPaper based Simulation Result for Scenario 1, Steel Out of Specification (OOS) \nBOS at Vessel-B \nSteel chemistry is OOS in BOS Vessel-B. The scheduler received the information via \nthe operator at the BOS Vessel. The quality code is 1522, heat number in 2461. The \ncustomer will not accept OOS steel. The number of ladle in sequence is 8, heat \nposition in sequence is 3, and the process route is VFD (Vessel Flush Degas). Figure 9 \nshows annotated inference structure for MSD with data about out-of-specification \n(OOS) steel in BOS Vessel-B.  \n \nCondition:  Time is 16:45, required concast delivery time is 17:55. \n  There is time to contact the contact the customer. \nCustomer will not accept out-of-spec steel. \nThere is no quality that can be made from heat-need-outlet. \n \n \nAction:  \u201cCreate Heat-Needs-Outlet: Check the 24 Hour (Hard copy \nof Slab or Bloom Machine) schedule for qualities that can be \nmade from Heat-needs-outlet. Tap heat as alternative quality\u201d \n 28\n \nFor practical purposes, the paper simulation process is conducted in a tabular form. \nThe reasoning process, employed in MSD is described. The case study is an example \nof schedule disturbance covered in the validation process. The knowledge components \nof the inference structure, that is, the dynamic roles5, e.g. the system-data, the \nschedule, the discrepancies, etc has been instantiated with domain specific objects \n(Figure A.1).  \nFigure A.1: An Annotated Inference structure for \nSteel Chemistry Out of Spec (OOS) Steel in BOS Vessel \nThe case study reflects required systems behaviour.  After several iterations and \nrefinement, the inference structure was validated with domain experts to confirm that \nthe inference structure was sufficiently detailed. The validation also indicates that it \nwas easy to find domain knowledge that could act as static roles6 for the inference \nstructure. A paper trace in terms of the knowledge model constructs is generated. \n                                                          \n5 These are run-time inputs and outputs of inferences. The dynamic roles have different instantiations at \neach invocation. \n6 These are more or less stable over time, they specify collection of domain knowledge that is used to \nmake inferences \nSpecify\nTruth\nValue\nCarbon = 0.2\nSilicon = 0.1\nHeat locate at\nVessel\nConstraints\n& Business \nRules\nRectify and\nTap as normal\nIndex of\nProblem\nSolving \nKnowledge\nVerify\nModify\nGenerate\nMonitor\nreceive\nObtain Carbon\nis too high\nReschedule\nChange\nList\nVessel::PSK\n\u2018B\u2019 Vessel heat\n out-of-specification\nin-spec=false\nwithin-customer-limit=false\ncontrollable= true\nheat located-at Vessel-B\nin-spec=false\nwithin-customer-limit=false\ncontrollable= true\nCustomer-limit. Carbon-LL = 0.02\nCustomer-limit. Carbon-UL = 0.07\nAnalysis summary. Carbon  = 0.2\nIF time-available > time-required for rectification\nTHEN add treatment , rectify in the Vessel, tap as\nnormal and continue to the next station\nBOS-Vessel Out-of-specification\nproblem-solving-knowledge\n Customer-limit.nickel-LL =0.0\n Customer-limit. nickel-UL =0.08\n Analysis-summary.nickel =0.1\n 29\nDomain Knowledge Model Explanation \n Receive System Data \n \nScheduler: [Look up to identify the problems]                     \nOperator : \u201cB-Vessel heat is OOS\u201d \nSystem:      BC System \u2013 Quality Code       \n                   Data  \n                   Merlin Schedule \u2013 Heat Location \n                   Vax Mgmt System \u2013 Analysis Summary \nMANAGE SCHEDULE \nDISTURBANCE: \nmonitor: system-data; \nHeat.location = Vessel-B \n \nThe scheduler monitors system-data, \nreceive operator feedback for which \nmanage schedule disturbance task is \nstarted. The heat located at Vessel-B is \nOOS \n \nObtain Additional Data \n \nScheduler: [Asked operator what element is OOS] \nOperator:   [The value of Carbon and Nickel is too high] \nSystem:      Vax Mgmt System \u2013 Heat  \n                   Status and Analysis Summary (AS) \nOBTAIN: system data; \n \nHeat.carbon-element-analysis = false \nHeat.nickel-element-analysis = false \nCarbon and nickel are the two elements out \nof specification as the element analysis \nvalue indicate false. \nCompare Analysis Summary with Customer limit \n \nScheduler: [Check specification] \nOperator:   [Awaiting instruction] \nSystem:      BC System \u2013 QC 10 and  \n                   QC 02 for Quality   \n                   code 1522 Vessel-B Heat  \n                   no. 2461  \n Heat\/Sequence of Heats = 3 of 8 \nCustomer Limit Elemen\nt \n \nAnalysi\ns  \nSummar\ny \nLower \nLimit \nUpper Limit \nC  0.2 0.02 0.07 \nNI  0.1 0.0 0.08 \nTemperature: not affected \nverify: truth-value; \nHeat.within-customer-limits = false \nHeat.element-controllable = false \nHeat.carbon-element-analysis = 0.2 \nHeat.carbon-element-analysis-customer-\nlower-limit = 0.02 \nHeat.carbon-element-analysis-customer-\nupper-limit = 0.07 \nHeat.nickel-element-analysis = 0.1 \nHeat.nickel -element-analysis-customer-\nlower-limit = 0.0 \nHeat.nickel-element-analysis-customer-\nupper-limit = 0.08 \nThis inference checks whether element \nanalysis is within customer limits and \ncontrollable, it returns a truth-value \u2013 true \nor false. It checks each element against \ncode of practice specification for customer \nacceptance limits. In this case element OOS \ninclude controllable and uncontrollable \nelements: Carbon and Nickel exceeds \ncustomer limit. \n \n \nSpecify PSK \n \nScheduler: [Specify PSK] \nOperator:   [Awaiting instruction] \nSystem: \u201cCall Vessel out-of-specification psk\u201d \nspecify: fix: \nVESSEL::OOS-PROBLEM-SOLVING-\nKNOWLEDGE  \nThis inference states the precise PSK to fix \nout-of-specification steel in the BOS \nVessel. The inferencing method is forward \nreasoning. A PSK is specified to fix out-of-\nspecification steel in the Vessel. \n \n 30\nGenerate possible actions \n \nScheduler: [Generate possible actions] \nOperator:   [Awaiting instruction] \nSystem: \u201cCheck condition and generate  \n              action\u201d \n              \u201cCalculate time available for  \n              rectification\u201d \n \n \n \n \nCondition: Time (i.e. Time on the  \n                  clock)    = 20:20 \n                  Required concast delivery   \n                  time = 21:30 \n  \nQ. Is there time available for rectification? Yes \n \n \ngenerate: actions; \nBasis for time to rectify in the Vessel \nHeat.tap-to-open-time = 65  (for Quality \n1522) \nHeat.time-until-required-at-concast = \n[delivery-time less current-time] \nHeat.time-available-from-tap = [delivery-\ntime less heat tap-to-open-time] \nHeat.time-available-for-rectification = \n[time-until-required-at-concast less time-\navailable-from-tap] \n \nRules for calculating extra time per \nsample number \nIF at Vessel and sample = 1 THEN  \nextra-time = 10 \nELSE IF at Vessel and sample = 2 THEN  \nextra-time = 5 \nELSE extra-time = \u201c0\u201d \nEND  \nHeat-time-available-for-rectification = \nHeat-time-available-for-rectification + \nextra-time \n \nThe Rule \nIF time-available-for-rectification =>10 \nTHEN \n          there is sufficient-time-to-rectify in \nthe vessel,  \n          tap-as-normal and continue-to-the-\nnext-station \nELSE  \n \nThis inference produces action to solve the \nOOS problem in the Vessel. This is \nachieved by computing all possible \ncombinations in an algorithm as the rules \nfor calculating time indicates. For example \ndepending on the state of the plant, the \nfollowing questions are asked: \n \nIs there time available for rectification? Yes \n \n \nAlthough there is no time to rectify in the \nVessel the element OOS is uncontrollable. \nThe scheduler instructs the operator to \nreblow in the vessel.  The scheduler checks \nfor quality that can be made from heat-\nneed-outlet, and found there is no quality \nthat can be made from heat-need-outlet. \nThe scheduler instructs the operator to tap \nas an alternative quality \n 31\n IF time-available-for-rectification < 10 \nTHEN \nthere is insufficient-time-to-rectify \nin the vessel, ask-the-caster-\noperator-to-slow-down-casting-for-\nsufficient-time , rectify in the vessel, \ntap-as-normal and continue-to-the-\nnext-station \nELSE create heat-needs-outlet \nEND  \nComments \nNote that a judgement may need to be \nmade concerning the actual time for \nrectification at present this is set to 10 \nminutes e.g. 10 minutes \n \n \nDisplay modification instruction \n \nScheduler: [Advice shopfloor about  \n                  possible actions] \nOperator:   [Receive possible action] \nSystem: \u201cDisplay problem statement,                   \n              advice and explanation\u201d  \n \n \n \nmodify: schedule; \n \nProblems \nelement C is out of spec for Customer \nLimit at VESSEL-B. Controllable: true; \nAnalysis: 0.2. upper limit: 0.07. lower \nlimit: 0.02 element NI is out of spec for \nCustomer Limit at VESSEL-B. \nControllable: false; \nAnalysis: 0.1. upper limit: 0.08. lower \nlimit: 0.0 \n \nAdvice \n \u201cCreate Heat Needs Outlet, find \nalternative quality and available caster for \nheat- needs-outlet.  Tap heat as alternative \nquality\u201d.  \nThis inference seeks to adapt the schedule \nby displaying relevant actions as \ninstructions to advice shop floor operators \nin order to maintain stability in the \nsteelmaking process.   \n \nIn this case although there is time to rectify \nin the vessel, the element out of spec is \nuncontrollable and the customer will not \naccept steel with OOS elements. This \ninference display problems, advice and \nexplanation. The heat will have to be \nrescheduled. The scheduler informs weekly \nplanner by complete the production \nplanning and report sheet. \n \n \n \nDisplay rescheduling instructions  \n \n \nOBTAIN: rescheduling instructions;  \nNot applicable in this case \n \nThis transfer function is only required if the \nscheduler cannot manually modify schedule \nas illustrated in the above two scenarios.  \n 32\n9. References \nADESOLA, B., 2002, A knowledge model for decision support to manage schedule \ndisturbance in steelmaking (PhD Thesis, Cranfield University, UK). \nADESOLA, B., ROY, R. AND THORNTON, S., 2000, XPat: A tool for Manufacturing \nKnowledge Elicitation. In R. Roy (ed.) Industrial Knowledge Management - Micro KM \nApproach (Springer Verlag). \nBREUKER, J., WIELINGA, B., SOMEREN, M. V., DE HOOG, R., SCHREIBER, G., DE \nGREEF, P., BREDEWEG, B., WIELMAKER, J. BILLAUT, J., DAVOODI, M. AND S. \nHAYWARD., 1987, Model-driven knowledge acquisition: Interpretation models, Technical \nreport, ESPRIT Project P1098, University of Amsterdam, Netherlands. \nBROWN, M.C., 1988, The dynamic rescheduler conquering the changing production \nenvironment. Proceedings of the 4th IEEE Conference on AI Applications, San Diego, USA, \npp. 175-180. \nCHANDRASEKARAN, B. AND JOHNSON, T.R., 1993, Generic Tasks and Task \nStructures: History, Critique and New Directions. In David J.M., Krivine J.P., and Simmons \nR. (Eds.) Second Generation Expert Systems (Springer-Verlag, London), pp. 233-272. \nCOWLING, P. AND REZIG, W., 2000, Integration of continuous caster and hot strips mill \nplanning for steel production. Journal of Scheduling, Vol. 3, Number 4. \nDORN, J. AND SHAMS, R., 1991, An Expert System for Scheduling in a Steelmaking \nPlant. Proceedings of the 1st World Congress on Expert Systems, pp. 395-404.  \nDORN, J., 1995, Case-based reactive scheduling, In Roger Kerr and Elisabeth Szelke (eds) \nArtificial Intelligence in Reactive Scheduling (Chapman & Hall, London) pp.32-50 . \n 33\nDORN, J. AND SHAMS, R., 1996, Scheduling High-grade Steelmaking. IEEE Expert \nSpecial Issue on AI in Steelmaking, 11 (1), pp. 28-35. \nMOKA CONSORTIUM, 2001, Managing Engineering Knowledge. In Melody Stokes  (Ed) \nMOKA: Methodology for Knowledge Based Engineering Applications. ISBN 1860582958. \nNUMAO, M. AND MORISHITA, S., 1991, Cooperative Scheduling and its Application to \nSteelmaking Processes. IEEE Transactions on Industrial Electronics, Vol. 38, No. 2. pp. \n150-155. \nSCHREIBER, G., AKKERMANS, H., ANJEWIERDEN, DE HOOG, R., SHADBOLT, N., \nVAN DE VELDE, W., AND WIELINGA, B., 1999, Knowledge Engineering and \nManagement: The CommonKADS Methodology (A Bradford Book, The MIT Press, \nCambridge, Massachusetts). \nSTUDER, R., BENJAMINS, V.R. AND FENSEL, D., 1998, Knowledge engineering, \nprinciples and methods. Data and Knowledge Engineering, 25(1-2), pp.161\u2014197. \nTANSLEY, D.S.W. AND HAYBALL, C.C., 1993, Knowledge Based Systems Analysis and \nDesign: A KADS Developer\u2019s Handbook (BCS Practitioners Series, Prentice Hall). \nVESCOVI, M., IWASAKI, Y., FIKES, R, AND CHANDRASEKARAN, B., 1993, How \nthings are intended to work: Capturing functional knowledge in device design. Proceedings \nof the 13th International Joint Conference on Artificial Intelligence.  \n"}