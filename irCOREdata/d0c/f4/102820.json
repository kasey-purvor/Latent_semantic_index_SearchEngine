{"doi":"10.1109\/ICON.2005.1635596","coreId":"102820","oai":"oai:epubs.surrey.ac.uk:2365","identifiers":["oai:epubs.surrey.ac.uk:2365","10.1109\/ICON.2005.1635596"],"title":"Group Key Management with Network Mobility","authors":["Ng, Wee Hock Desmond","Sun, Zhili","Cruickshank, Haitham"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2005","abstract":"Secure multicast communication is important for both\\ud\nwired and wireless applications. For groups with frequent join or depart requests, a distributed architecture that partitions the group members into several areas is preferred. Inside each area, scalable algorithms such as Logical Key Hierarchy (LKII) can be used to update the group key. However, these algorithms do not consider mobile members traveling in a Mobile Network as a whole. In this paper, we proposed two group key management schemes, which treat mobile members traveling in a Mobile Network as a whole. Both schemes try to reduce the communication costs when the Mobile Network moves in or out of the area. Simulation results show significant reduction in communications costs even for small number of mobile members\\ud\nin the Mobile Network","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"Institute of Electrical and Electronics Engineers","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:epubs.surrey.ac.uk:2365<\/identifier><datestamp>\n      2017-10-31T14:05:18Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><setSpec>\n      6469766973696F6E733D656E67616E64706879736963616C736369656E636573:656C656374726F6E6963656E67696E656572696E67:63637372<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/epubs.surrey.ac.uk\/2365\/<\/dc:relation><dc:title>\n        Group Key Management with Network Mobility<\/dc:title><dc:creator>\n        Ng, Wee Hock Desmond<\/dc:creator><dc:creator>\n        Sun, Zhili<\/dc:creator><dc:creator>\n        Cruickshank, Haitham<\/dc:creator><dc:description>\n        Secure multicast communication is important for both\\ud\nwired and wireless applications. For groups with frequent join or depart requests, a distributed architecture that partitions the group members into several areas is preferred. Inside each area, scalable algorithms such as Logical Key Hierarchy (LKII) can be used to update the group key. However, these algorithms do not consider mobile members traveling in a Mobile Network as a whole. In this paper, we proposed two group key management schemes, which treat mobile members traveling in a Mobile Network as a whole. Both schemes try to reduce the communication costs when the Mobile Network moves in or out of the area. Simulation results show significant reduction in communications costs even for small number of mobile members\\ud\nin the Mobile Network.<\/dc:description><dc:publisher>\n        Institute of Electrical and Electronics Engineers<\/dc:publisher><dc:date>\n        2005<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/epubs.surrey.ac.uk\/2365\/1\/SRF002497.pdf<\/dc:identifier><dc:identifier>\n          Ng, Wee Hock Desmond, Sun, Zhili and Cruickshank, Haitham  (2005) Group Key Management with Network Mobility   13th IEEE International Conference on Networks jointly held with the 7th IEEE Malaysia International Conference on Communications, Proceedings 1 and 2, 2.  pp. 716-721.      <\/dc:identifier><dc:relation>\n        http:\/\/ieeexplore.ieee.org\/xpls\/abs_all.jsp?arnumber=1635596&tag=1<\/dc:relation><dc:relation>\n        10.1109\/ICON.2005.1635596<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/epubs.surrey.ac.uk\/2365\/","http:\/\/ieeexplore.ieee.org\/xpls\/abs_all.jsp?arnumber=1635596&tag=1","10.1109\/ICON.2005.1635596"],"year":2005,"topics":[],"subject":["Article","PeerReviewed"],"fullText":"Group Key Management with Network Mobility\nWee Hock Desmond Ng, Zhili Sun, Haitham Cruickshank\nCentre for Communication Systems Research\nUniversity of Surrey\nUnited Kingdom\n{W.Ng I Z.Sun I H.Cruickshank}lsurrey.ac.uk\nAbstract-Secure multicast communication is important for both\nwired and wireless applications. For groups with frequent join or\ndepart requests, a distributed architecture that partitions the\ngroup members into several areas is preferred. Inside each area,\nscalable algorithms such as Logical Key Hierarchy (LKII) can be\nused to update the group key. However, these algorithms do not\nconsider mobile members traveling in a Mobile Network as a\nwhole. In this paper, we proposed two group key management\nschemes, which treat mobile members traveling in a Mobile\nNetwork as a whole. Both schemes try to reduce the\ncommunication costs when the Mobile Network moves in or out\nof the area. Simulation results show significant reduction in\ncommunications costs even for small number of mobile members\nin the Mobile Network.\nKeywords-group key management; secure multicast; network\nmobility\n1. INTRODUCTION\nIP multicast enables efficient group communication by\nallowing the sender to transmit a single copy of data, with\nnetwork elements such as routers and switches making copies\nas necessary for the receivers. This solves the scalability issues\nat the sender side and allows better utilization of network\nresources such as bandwidth and buffer space. IP multicast not\njust benefits wired network applications [2] such as pay-per-\nview and multi-party games., wireless applications [3-5] such\nas group-oriented mobile commerce, distance education and\nintelligent transportation systems gain significant boost from it.\nIn order for IP multicast to scale to virtually any group size,\nit relies on a single group address to identify the set of\nrecipients rather than explicitly listing them. However, this\nanonymous receiver model prevents the content provider from\ncharging the members. The only way to provide controlled\naccess to data is to encrypt the multicast communication with a\ngroup key and distribute this shared group key to all authorized\nmembers [6-18]. Generally, applications might need\nconfidentiality, authentication, integrity and non-repudiation\n[6]. If membership is dynamic, this shared group key has to be\nupdated and redistributed to all authorized members securely\nevery time whenever there is a change in the membership in\norder to provide forward and backward secrecy. Forward\nsecrecy means a departing member cannot obtain information\nabout future group communication and backward secrecy\nmeans that a joining member cannot obtain information about\npast group communication. Even if there is no change in the\ngroup membership, the group key might need to be refreshed\nafter it has been in use for a given amount of time to thwart\ncryptanalysis.\nIn a typical multicast key management scheme, a trusted\nentity, known as the group controller (GC), is responsible for\ngenerating, distributing and replacing the group key for a\nmulticast session. The operation for changing the key whenever\nthere is a change in group membership is known as rekeying\nand rekeying cost denotes the total number of unicast or\nmulticast messages that needs to disseminate to the members\ndufing rekeying. In order to minimize the rekeying costs f'or\nlarge group, the GC makes use of auxiliary keys, known as key\nencryption keys (KEKs), to update the group key. One popular\ntechnique is to employ a hierarchy of keys [9-13], in which\neach member is being assigned a set of keys based on its\nlocation in the key tree.\nWhen the number of group members becomes large, group\nkey management can become a significant overhead and a\npotential system overhead [18]. Thus, scalable approaches\ntowards group key management [19-20] are needed. These\napproaches achieve scalability by partitioning the group\nmembers into a number of smaller areas to distribute the\nprocessing workload. The partition of the group members into\nareas may be done on either a physical or logical basis.\nIn wireless networks, mobility adds another dimension of\ncomplexity to the design of key management scheme by\nallowing members not only to join or depart the group but also\ntransfer between areas [16, 18, 21, 22].\nIn this paper, we propose two group key management\nschemes for rekeying mobile members in a Mobile Network. A\nMobile Network is a leaf network, which includes one or more\nmobile routers used to provide connectivity to the Internet 123,\n24]. Typical examples are passengers traveling in train using\ntheir laptop wireless LAN cards to connect to wireless LAN\naccess points deployed in the train. Existing algorithms do not\nconsider mobile members in a Mobile Network as a whole,\ntherefore resulting in a waste of network resources and\ncomputation power at both the members and GC side when a\nMobile Network moves in or out of the area. In addition, out-\nof-sync problem between the multicast data and the keys [25]\nmight occur because the interval between each joining\nmembers might be very small when a Mobile Network moves\ninto an area. It is also very inefficient since the first set ofnew\nkeys is actually not used and is immediately replaced by the\nsecond set ofnew keys. Similar problem occurs when a Mobile\nNetwork moves off from the area. The remaining of this paper\n1-4244-0000-7\/05\/$20.00 02005 IEEE. 716\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 16,2010 at 14:26:08 UTC from IEEE Xplore.  Restrictions apply. \nis structured as follows. Section II provides the background\nmaterial of Logical Key Hierarchy (LKH) and group key\nmanagement architecture. Constraints and assumption are\ncovered in this section too. In Section IlI, we describe our two\ngroup key management schemes. We present our analytical\ncomparison and simulation results in Section IV and V\nrespectively. Finally, we list our conclusion in Section VI.\nII. BACKGROUND\nA. Logical Key Hierarchy (LKH)\nFor a a balanced key tree [9, 10, 13] with outdegree, k, the\nGC stores all (kN - 1)1(k - 1) keys while each member needs to\nstore log k N + I keys, where N is the total number of group\nmembers. A key tree is considered balanced when the\ndifference between any two member nodes to the root is not\nmore than one [26]. For example, in Figure 1, member Ul\nknows keys KI, K2 and K5 while member U7 knows keys Kl,\nK4 and KI 1. In this example, KI is the Traffic Encryption Key\n(TEK) which is used to encrypt the multicast data, K2 to K4\nare the Key Encryption Keys (KEKs) for rekeying purposes\nand KS to K13 are the individual keys associated with the\ngroup members on the leaf nodes.\nWhen a member is removed from the group, the GC must\nchange all the keys in the path from this member's leafnode to\nthe root to achieve forward secrecy. All the other group\nmembers that remain in the multicast group must update their\nkeys accordingly, namely change the keys in the intersection\nbetween the path from their leaf nodes to the root and the path\nfrom the removed member's leafnode to the root. In particular,\nthis means that every remaining member will leam the new\nTEK. The rekeying cost is k log kN - I keys when the key tree\nis balanced. For example, suppose member U9 is departing, all\nthe keys he stores (Kl and K4), except his individual key K13,\nmust be changed. The GC needs to encrypt the new K4, K4',\nwith KI I and K12 for U7 and U8. Then it encrypt Kl'with K2,\nK3 and K4' for all group members.\nIf backward secrecy is required, then a join operation is\nsimilar to a remove operafion in which the keys that the joining\nmember receives must be different fiom the keys previously\nused in the group. When the key tree is balanced, the rekeying\ncost is 2109 kN keys. Suppose member U9 is joining the group,\nthe GC first encrypts K4' with K4 for U7 and U8. Then it\nencrypts Kl' with KI for Ul to U8. Finally, it encrypts KI' and\nK4' with the individual key ofU9 for U9.\nB. Group key ManagementArchitecture\nAlthough the rekeying cost in LKH increases linearly with\nlogarithm of the group size for a join or depart request,\nsignificant communication costs can be introduced if the group\nsize is large with frequent join or depart requests. Furthermore,\nit suffers from \"1 affect NA\" problem [15], where action of one\nmember, i.e. join or depart request, affects all the other group\nmembers.\nOne approach to achieve scalability is to partition the group\nmembers into a number of smaller areas to distribute the\nprocessing workload [19, 20]. Figure 2 illustrates the group key\nmanagement architecture; all members belong to a domain,\ndenoted by the collection of cells, managed by a Domain\nGroup Controller (DGC). The domain is divided into several\nareas, each managed by an Area Group Controller (AGC)\nwithin it. We partition the members on physical basis; therefore\nthe member movement within an area does not require any\nrekeying. Rekeying is only needed when a member transfers\nbetween areas, joins or departs in one area.\nDuring the multicast session, the DGC is responsible for\ngenerating the group key and distributes it to all AGCs. Each\nAGC can use any scalable algonrthms such as LKH to\ndistribute the group key to the members. It is important to note\nthat the root of the key tree is now become a KEK as well. In\norder not to overload the DGC, the registration and\nderegistration of the members are carred out by the AGC too.\nC. Constraints andAssumption\nIn this work, we focus on strict security. This means no\nmember can decrypt the multicast data unless he\/she is\ncurrently a member of the multicast group. Specifically, the\nfollowing constraints are enforced:\n* Backward Secrecy: When a member joins the\nmulticast group, the group key must be changed to\nensure that the new member cannot decode any\npreviously transmitted multicast data.\n* Forward Secrecy: When a member departs the\nmulticast group, the group key must be changed to\nensure that the departing member cannot decode\nfuture data transmissions.\nFor both backward and forward secrecy, the group key\nalgorithm must halt the multicast data transmission until all the\nremaining members receive the group key securely. There are\nseveral assumptions we have made:\nTEK:\nKEK: ()( 9\nIndividual\nKey K 6 K B K I M I((\nUI U2 U3 U4 U5 U6 U7 U8 U9\nFigure 1. Logical key tree\nFigure 2. Group key management architecture\n717\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 16,2010 at 14:26:08 UTC from IEEE Xplore.  Restrictions apply. \n* Reliable Delivery of rekeying messages: We assume\nthat all rekeying messages are reliably received by the\ngroup members.\n* Group Membership Policy Decisions: We assume that\nthe GCs possess sufficient information to determine\nwhich members are allowed to participate.\nlII. NETWORK MOBILUTY REKEYING SCHEMES\nIn order to reduce network resources and computation\npowers needed by the AGC and group members in one area\nwhen a Mobile Network moves in or out ofan area, we propose\ntwo group key management schemes which treat the mobile\nmembers in a Mobile Network as a whole. Both schemes can\nadopt any scalable key tree algorithms such as LKH. Our\nschemes are different from those proposed in [16, 18, 21, 22,\n27] because we are more interested in mobility over large area.\nA. Delayed Network Mobility Rekeying Scheme (DNARS)\nIn our first scheme, Delayed Network Mobility Rekeying\nScheme (DNMRS), we delay the rekeying operation by a short\ninterval when a mobile member transfers between areas while\nstill maintaining both forward and backward secrecy. In\naddition, we also partition the group members into two key\ntrees, one for static members and one for mobile members. By\nseparating them, we can minimize the computation powers at\nthe static member side when a mobile member joins or departs\nthe area and via versa.\nWhen a static or mobile member wishes to join or depart\nthe multicast group, the AGC in the area, AGCi, will rekey the\ngroup immediately as described in section II. In addition, the\nAGCi will inform the DGC about it and the DGC will generate\na new group key and multicast it to all the AGC. In situations\nwhere a mobile member transfers between areas, the mobile\nmember will initiate a transfer by notifying the AGC in the old\narea, AGCi, and the AGC in the new area, AGCj. Both AGCi\nand AGCj do not perform rekeying immediately; instead they\nwait for a short interval before rekeying the group in their area.\nThis is because if the mobile members are traveling in a Mobile\nNetwork, all the mobile members will start to de-register with\nAGCi and register with AGCj when the Mobile Network is\ngoing to move into a new area. The interval between eachjoining or departing request is usually very short. It is\nimportant to note that delaying the rekeying in both areas does\nnot affect the latency in the multicast data. This is because\nthere is no change in the group membership, which means that\nthe group key does not need to be changed. In other words, the\nDGC does not need to be notified.\nIf we assume that the mobile member is trusted within the\nmulticast group, then the AGCi does not need to perform\nrekeying when a mobile member transfers from one area to\nanother. Instead, the AGCi keeps a list of the mobile member\nthat performs such transfer. This list is cleared whenever the\nAGCi performs a rekeying. Allowing a mobile member to have\nmore than one set of valid keys while he\/she stays in the\nmulticast group does not compromise the requirement stated in\nSection II, as long as all the keys he\/she possesses are updated\nwhen he\/she finally departs from the multicast group. DNMRS\nis different compared to batch rekeying [25, 27, 28], which\ntrade-off security for performance, because the AGC will only\ndelay rekeying if the mobile member is transferring between\nareas. Furthermore, we like to emphasize that batch rekeying\ndoes not fuilfil our requirement.\nAs there might be several Mobile Networks in an area,\nadditional information needed by the AGCi is the default router\nof the mobile members. This allows AGCi to place all mobile\nmembers in the mobile network together to minimize the\nrekeying costs if LKH is used. As shown in Figure 3, Sl to S8\nare the static members and MI to M6 are the mobile members.\nIn the mobile member key tree, the AGCi groups the members\nin same Mobile Network together. In this case, assume Mobile\nNetwork 1 moves out from the area, no rekeying is needed\nsince K16 is not needed anymore. However, if the related\nmobile members are not properly placed together, rekeying\nmight be needed.\nB. Mobile Group Controller Scheme(MGCS)\nFor our second scheme, Mobile Group Controller Scheme\n(MGCS), we introduce another trusted entity, known as Mobile\nGroup Controller (MGC). A MGC is deployed on the Mobile\nNetwork and it plays a similar role as an AGC. The main\ndifference between them is a MGC is mobile. In this case, the\nregistration and de-registration of the mobile members in the\nMobile Network are handled by the MGC. As for the static\nmembers and individual mobile members, they will register or\nde-register with the AGC in the area. Unlike DNMRS and\nother existing algorithms, a mobile member only needs to\nregister and de-register once with the MGC as long as he\/she\nstays inside the Mobile Network. Transferring between areas\ndoes not require the mobile members in the Mobile Network to\nde-register with the AGCi and re-register with the AGCj.\nIn MGCS, the MGC can receive the group key either from\nthe DGC or the AGC in that area. Since it is possible for the\nMobile Network to experience loss of service during\nmovement therefore it is preferably for the MGC to obtain the\ngroup key from the AGC in that area. In addition, the MGC\nshould confirm with the present AGC that the group key has\nnot been changed when the Mobile Network moves into a new\narea. Compared with existing schemes, this scheme reduces the\nlatency needed for rekeying to almost none since there is no\nchange in the group membership. Furthermore, no computation\nis needed by the AGC and the group members as there is no\nchange in the group membership when a Mobile Network\nmoves in or out of an area.\nSi ?Q) (K\nS1 9 S3S4 ~S6S6 tS\nFigure 3. Key tree for static and mobile members\n718\n(KI K\nK K 2MlNi2 fvS Mt gNi4ev\"ki2\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 16,2010 at 14:26:08 UTC from IEEE Xplore.  Restrictions apply. \nIV. ANALYTICAL COMPARISON\nIn this section, we focus on three performance metrics: (i)\ngroup member key storage, (ii) GC key storage and (iii)\nrekeying costs for the various join and depart request in one\narea. For simplicity, we adopt LKH in our two schemes but the\nother scalable algorithms will yield similar performance too.\nWe assume that there is only one Mobile Network in the area,\nwith a total number of Mmobile members and the total number\nof static members is ND.\nTable I examines the key storage needed by the AGC,\nMGC and group members. Generally, all three AGCs have\nsimilar key storage. The only difference is that the MGCS\nrequires another trusted entity, MGC, to handle the mobile\nmembers in the Mobile Network.. As for the group members,\nboth static and mobile members in LKH have similar key\nstorage as they are placed in a single key tree. In the case of\nDNMRS and MGCS, the static members and the mobile\nmembers are in separate key tree, which leads to different key\nstomge between them. This is advantageous for mobile\nmembers as mobile members might have limited storage.\nTable II examines the rekeying costs for the various join or\ndepart event. It can be seen that both static and mobile\nmembers in LKH have similar rekeying costs for each\nindividual event as they are placed in the same key tree. As for\nTABLE I. KEY STORAGE FOR AGC, MGC AND GROUP MEMBERS\nLKH DNMRS MGCS\nKey storage for AGC k(No + M) - I k(No + M) -2 kNo -I\n+ +1 +1\nk-i k-i k-I\nKey storage for static member Flogk (No + M)1 +2 Flogk N0 +2 [lOgs N01 +2\nKey storage for mobile member Flog, (No + M)1 + 2 Dlog, M + 2 Fiog, MI + 2\nkM-i\n+1\nKey storage for MGC - k-I\nTABLE 1I. REKEYING COSTS FOR GROUP MEMBERS FOR VARIOUS JOIN OR DEPART EVENT\nLKH DNMRS MGCS\nRekeying costs for 2Flog, (N0 +M)1+1i 2Fiog, N 1+1i 2[log, N0 1+1|\nStatic member static member\njoins the area Rekeying costs for 2F1og,, (N. + M)1 1 I 1\nmobile member\nRekeying costs for kFlog, (No + M)I kFlog, No 1 kFlog, No 1\nStatic member static member\ndeparts the area Rekeying costs for k[iogk (N. + M)1 1 1\nmobile member\nRekeying costs for M\nMobile Network static member =2Flogk (No + m)1\nmoves into Rekeying costs for M k(M- 1)\nthe area mobile member 2Flogk (N, +m)l k -1)\nkI\nRekeying costs for M\nMobileNetwork | static member |\nmoves out of Rekeying costs for M\ntthe area | mobile member IZ kFlogk (N0 + i)1 -I |\n719\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 16,2010 at 14:26:08 UTC from IEEE Xplore.  Restrictions apply. \nDNMRS and MGCS, the static and mobile members are placed\non separate key trees, therefore the join or depart request of a\nstatic member does not affect the key tree of the mobile\nmembers. Regardless ofwhether the Mobile Network moves in\nor out of an area, the static and mobile members in MGCS do\nnot need any rekeying if there is no change in the group\nmembership. In the case of LKH, when the Mobile Network\nmoves in or out of an area, the rekeyiig costs can overwhelm\nthe AGC and the static members as each mobile member starts\nto de-register with the old AGC and register with the new\nAGC. This is because LKH did not anticipate the mobile\nmembers in the Mobile Network, therefore it performs a\nrekeying each time a mobile member joins or departs the area,\nresulting in a waste of network resources and computation\npower.\nV. COMPARISON USING SUMULATION\nIn this section, we use simulation to get a better\nunderstanding on the rekeying costs for the static and mobile\nmembers when the Mobile Network moves in and out of the\narea. The worst case is assumed although the result might be\nbetter. For our simulation, we use a balanced binary key tree\n(k12). There are a total of 8192 static members in the area and\nwe vary the total number of mobile members in the Mobile\nNetwork from I to 200. Similarly as in section IV, we assume\nthat there is only one Mobile Network in the area.\nFigure 4 shows the rekeying costs for the static and mobile\nmembers when the Mobile Network moves into the area. We\ncan see that the rekeying cost for static and mobile members in\nLKH is very high compared to DNMRS and MGCS. This is\nbecause it did not consider mobile members in Mobile Network\nas a whole. In our simulation, we assume that the mobile\nmembers register and de-register within the waiting period in\nthe DNMRS. If the mobile members in the Mobile Network\nregister outside the waiting period, the rekeying costs will be\nslightly higher than the one shown below. The static members\nin DNMRS do not need any rekeying since there is no change\nin group membership. As for the mobile members in DNMRS,\nthe rekeying cost consists of the cost to create a new key tree.\nIn the case ofMGCS, no rekeying is needed for both the static\nand mobile members when the Mobile Network moves into an\narea since there is no change in the group membership.\nFigure 5 shows the rekeying costs for the static and mobile\nmembers when the Mobile Network moves out of the area.\nSimilarly, LKH incurs huge rekeying costs due to the lack of\nanticipation of the mobile members in the Mobile Network. A\nrekeying is performed every time a mobile member de-registers\nwith the old AGC. As for DNMRS and MGCS, rekeying is not\nneeded. This is because the mobile members are placed on\nseparate key tree; therefore the key tree of the static members is\nnot affected when the mobile members transfer to another area.\nVI. CONCLUSION\nIn this paper, we presented two group key management\nschemes, which consider mobile members in Mobile Network\nas a whole. Doing so can reduce the rekeying costs by a\nsignificant amount when the Mobile Network moves in or out\nof the area compared to existing algorithms. Proper placement\nPerfornance evaluaon when a Mobile Network moves Iioths area\nNutnOer or mobie members tnrrer of mobie rrernber\nFigure 4. Rekeying costs when a Mobile Network moves into the area\nPerformance evaluation when a Mobil Network rnoves out ofthe area\n60i\nSotl\n.5 404\nc 301\nCD\ncc 204\nION\nRekeying costs for static and mobile members\n+ LKH\nt00 a- DNMRS\n-'-MGCS\n110\nDO\n~00\na10\n0 50s 100 150 200\nNurrber of mobile members\nFigure 5. Rekeyig costs when a Mobile Network moves out ofthe area\nof the mobile members in the key tree is also taken into\nconsideration in order to minimize the rekeying costs.\nThe first scheme, DNMRS, delays the rekeying operation\nwhen a mobile wishes to transfer between areas. In addition,\nthe group members are partitioned into two key trees: one for\nstatic members and one for mobile members. This approach\nhas several advantages. First, the key storage of the mobile\nmembers is minimized and this benefits mobile devices with\nlimited storage. Second, the join or depart event of a static\nmember does not affect the mobile members and similarly thejoin and depart event of the mobile member does not affect the\nstatic members since both of them are placed on separate key\ntree. This benefits those mobile devices with limited\ncomputation power. Reducing the number of decryptions can\nalso help to conserve energy which leads to battery saving.\nThird, even though the AGC needs to wait for a short time\nperiod, which is sufficient long enough for all mobile members\nin the Mobile Network to send their registration or de-\nregistration when the Mobile Network moves in or out of the\narea, it does not affect the latency in the multicast data since the\nmulticast data is not halted.\nThe second scheme, MGCS, introduces another trusted\nentity, MGC, which is responsible for all the mobile members\nin the Mobile Network. All mobile members in the Mobile\nNetwork need to register or de-register with the MGC only\nonce when they want to join or depart from the multicast\nsession. Similarly as the DNMRS, the joining and departing of\na static member does not affect the mobile members. As long\nas there is no change in the group membership, no rekeying\ncost is incurred during the movement. Compared to DNMRS,\nthis approach is better since the mobile members do not need to\n720\nifnn\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 16,2010 at 14:26:08 UTC from IEEE Xplore.  Restrictions apply. \nde-register with the old AGC and register with the new AGC\nwhen the Mobile Network moves from one area to another.\nREFERENCES\n[I] S.E. Deering, \"Host Extensions for IP Multicasting\", RFC 1112, IETF,\nAug 1989.\n[2] S. Paul, \"Multicast on the Internet and its applications\", Kluwer\nAcademic Publishers, 1998.\n[3] U. Varshney, \"Multicast over wireless networks\", Communications of\nACM, Vol. 45, Issue 12, pp. 31-37, Dec. 2002.\n[4] U. Varshney, \"Multicast support in mobile commerce application\",\nIEEE Computer, Vol. 35, Issue 2, pp. 115-117, Feb 2002.\n[5] N. Shi, \"Mobile commerce applications\", Idea Group Publishers, 2004.\n[6] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Noar, B. Pinkas,\n\"Multicast security: A taxonomy and efficient constructions\", In Proc.\nIEEE INFOCOM, Vol. 2. pp. 708-716, Mar. 1999.\n[7] H. Hamey and C. Muckerhirn, \"Group key management protocol\n(GKMP) specification\", RFC 2093.\n[8] H. Harney and C. Muckenhim, \"Group key management protocol\n(GKMP) architecture\", RFC 2094.\n[9] D.M. Wallner and E.J. Harder and R.C. Agee, \"Key management for\nmulticast issues and architectures\", RFC 2627, Jun. 1999.\n[10] C. Wong, M. Gouda and S. Lam, \"Secure group communication using\nkey graphs\", IEEE\/ACM Trans. Networking, Vol. 8. pp. 12-23, Feb.\n2000.\n[11] D. Balenson, D. McGrew and A. Sherman, \"Key Management for large\ndynamic groups: One-way fumction trees and amortised initialisation\",\nInternet Draft, draft-irf-smug-groupkeymgmt-oft-OO.txt. Aug. 2000.\n[12] M. Valdvogel, G. Caronni, D. Sun, N. Weiler and B. Plattner, \"The\nversakey frameworks: versatile group key management\", IEEE JSAC\n(Special Issue on Middleware), Vol. 17, No. 9, pp. 1614-1631, Sept\n1999.\n[13] M.P. Howarth, S. lyengar, Z. Sun, H. Cruickshank, \"Dynamics of key\nmanagement in secure satellite multicast\", IEEE JSAC, Feb 2004.\n[14] A. Ballardie, \"Scalable multicast key distribution\", RFC 1949, 1996.\n[15] S. Mittra, \"lolus: A framework for scalable secure multicasting\", In\nProc. ACM SIGCOMM, Vol. 27, pp. 277-288, Sept. 1997.\n[16] B. DeCleene, L. Dandeti, S. Griffin, T. Hardjono, D. Kiwior, J. Kurose,\nD. Towsley, S. Vasudevan, C. Zhang, \"Secure group communication for\nwireless networks\", In Proc. MILCOM, Oct. 2001.\n[17] A. Perrig, \"Efficient collaborative key management protocol for secure\nautonomous group communication\", In Proc. International Workshop on\nCryptographic Techniques and E. Commerce (CrypTEC), pp. 192-202,\n1999.\n[I8] C. Zhang, B. DeCleene, J. Kurose, D. Towsley, \"Compaison of inter-\narea rekeying algorithms for secure wireless group communications\", In\nProc. Performance Evaluation, Vol. 49, pp. 1-20, Sept. 2002.\n[19) T. Hardjono, B. Cain, 1. Monga, \"Inter-domain group key management\nprotocol\", Intemet Draft, draft-int-smug-intragkm-OO.xt, Sept. 2000.\n[20] M. Baugher, R. Canetti, L. Dondeti, F. Lindholm, \"Group key\nmanagement architecture\", Internet Draft, draft-msec-gkmarch-08.txt,\nJun. 2004.\n[21] L. Dondeti, B. DeCleene, S.P. Griffin, T. Hardjono, J. Kurose, D.\nTownsley, C. Zhang, S. Vasudevan, \"Group key management in wireless\nand mobile environments\", Internet Draft, draft-dondeti-irtf-smug-gkan-\nmobility-OO.xt, Jul. 2001.\n[221 S.P. Griffin, B. DeCleene, L. Dondeti, R.M. Flynn, D.Kiwior, A. Olbert,\n\"Hierarchical key management for mobile multicast members\",\nTechnical Report, Northrop Grumman Information Technology, 2002.\n[23] H.Y. Lach, C. Janneteau and A. Petrscu, \"Network mobility in beyond-\n3G systems\", IEEE Communication Magazine, Jul. 2003.\n[24] T. Emst, \"Network mobility support goals and requirements\", Internet\nDraft, draft-ietf-nemo-requirement-03.txt, Oct. 2004.\n[25] X.S. Li, Y.R. Yang, M. Gouda, S. Lam, \"Batch rekeying for secure\ngroup communications\", In Proc. IO\"' International WWW Conference,\npp. 525-534, May 2001.\n[26] MJ. Moyer, J.R. Rao, P. Rohatgi, \"Maintaining balanced key trees for\nsecure multicast\", Intemet Draft, draft-irf-smug-key-tree-balance-OO.txt,\nJun. 1999.\n[27] Y. Sun, W. Trappe, K JR. Liu, \"A Scalable Multicast Key Management\nScheme for Hetergenous Wireless Networks\", IEEE\/ACM Trans.\nNetworking, Vol. 12, pp. 653-666, Aug. 2004.\n[28] S. Setia, S. Koussih, S. Jajodia, \"Kronos: A scalable group rekeying\napproach for secure multicast\", In Proc. IEEE Symposium on Security\nand Privacy, 2000.\n[29] X.B. Zhang, S. Lam, D.Y. Lee, Y.R. Yang, \"Protocol design for scalable\nand reliable group rekeying\", IEEE\/ACM Trans. Networking, Vol. II,\npp. 908-922, Dec 2003.\n721\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 16,2010 at 14:26:08 UTC from IEEE Xplore.  Restrictions apply. \n"}