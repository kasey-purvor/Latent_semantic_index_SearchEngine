{"doi":"10.1109\/WOWMOM.2010.5534933","coreId":"67892","oai":"oai:eprints.lancs.ac.uk:34654","identifiers":["oai:eprints.lancs.ac.uk:34654","10.1109\/WOWMOM.2010.5534933"],"title":"Autonomic diagnosis of anomalous network traffic.","authors":["Marnerides, Angelos","Pezaros, Dimitrios P.","Hutchison, David"],"enrichments":{"references":[{"id":822295,"title":"A Functional Composition Framework for Autonomic Network Architectures &quot;.","authors":[],"date":"2008","doi":null,"raw":".  Sifalakis M., Louca A., Peluso L., Mauthe A., Zseby T., &quot;A Functional Composition Framework for Autonomic Network Architectures &quot;.  In proceedings  of  2nd  IEEE  International  Workshop  on  Autonomic Communications  and  Network  Management  (IEEE  NOMS\/ACNM ' 08), Salvador, Bahia, Brazil, April 7-11, 2008.","cites":null},{"id":823205,"title":"A Signal Analysis for Network Traffic Anomalies.\u201d,","authors":[],"date":null,"doi":null,"raw":".  Barford  P.,  Kline  J.,  Plonka  D.,  Ron  A.,  \u201cA  Signal  Analysis  for Network Traffic Anomalies.\u201d,  in ACM IMW\u201902, Nov. 6-11, Marseille, France, 2002","cites":null},{"id":821381,"title":"Autonomic Network Architecture (ANA) Project details available at: http:\/\/www.ana-project.org","authors":[],"date":null,"doi":null,"raw":".  Autonomic Network Architecture (ANA) Project details available at: http:\/\/www.ana-project.org","cites":null},{"id":823855,"title":"Basic Concepts in Information Theory and Statistics: Axiomatic Foundations and Applications\u201d,","authors":[],"date":"1975","doi":"10.2307\/1268669","raw":".  Mathai A. M.,  Rathie P. N., \u201cBasic Concepts in Information Theory and  Statistics:  Axiomatic  Foundations  and  Applications\u201d,  Wiley Halstead, New York, Wiley Eastern, New Delhi (1975).","cites":null},{"id":821763,"title":"Characteristics of network traffic flow anomalies.\u201d,","authors":[],"date":"2001","doi":null,"raw":".  Barford  P.,  Plonka  D.,  \u201cCharacteristics  of  network  traffic  flow anomalies.\u201d,  in  Proceedings  of  ACM  SIGCOMM,  Internet Measurement Workshop, San Francisco, California, USA, November 2001.","cites":null},{"id":822116,"title":"Characterization of Network-wide Anomalies in Traffic Flows.\u201d,","authors":[],"date":"2004","doi":"10.1145\/1030194.1015492","raw":".  Lakhina A., Crovella M., Diot C., \u201cCharacterization of Network-wide Anomalies  in  Traffic  Flows.\u201d,  in    ACM  SIGCOMM  Internet Measurement Conference (IMC), 2004","cites":null},{"id":822506,"title":"Detection and Mitigation of Abnormal Traffic Behaviour","authors":[],"date":"2008","doi":"10.1145\/1544012.1544063","raw":".  Marnerides  A.  K.,  Pezaros  D.  P.,  Hutchison  D.,  \u201cDetection  and Mitigation of Abnormal Traffic Behaviour in Autonomic  Networked Environments\u201d., 4th ACM CoNEXT Student Workshop, December 9-12, 2008, Madrid, Spain.","cites":null},{"id":821839,"title":"Diagnosing Network-wide traffic Anomalies.\u201d,","authors":[],"date":null,"doi":"10.1145\/1030194.1015492","raw":".  Lakhina A., Crovella M., Diot C., \u201cDiagnosing Network-wide traffic Anomalies.\u201d, in ACM SIGCOMM, Aug. 30- Sept 3, Oregon, Portland, USA, 2004","cites":null},{"id":824118,"title":"Explicit Application-Network Cross-layer Optimisation\u201d,","authors":[],"date":"2008","doi":null,"raw":".  Pezaros, D., P., Mathy, L., \u201cExplicit Application-Network Cross-layer Optimisation\u201d,  4th  International  Telecommunication  Networking WorkShop (IT-NEWS) on QoS in Multiservice IP Networks (QoS-IP 2008),  Venice,  Italy,  February  13-15,  2008","cites":null},{"id":823471,"title":"Internet Traffic Classification Using Bayesian Analysis Techniques&quot;","authors":[],"date":"2005","doi":"10.1145\/1071690.1064220","raw":".  Moore  A.  ,W.,    Zuev  D.,  &quot;Internet  Traffic  Classification  Using Bayesian  Analysis  Techniques&quot;  in  the  Proceedings  of  the  ACM SIGMETRICS Banff, Canada, June 2005.","cites":null},{"id":822813,"title":"Mining Anomalies Using Traffic Feature Distributions\u201d,","authors":[],"date":"2005","doi":"10.1145\/1090191.1080118","raw":".  Lahkina, A., Crovella, M., Diot, C., 2005, \u201cMining Anomalies Using Traffic Feature Distributions\u201d, ACM SIGCOMM 2005, Philadelphia, Pensylvania, USA.","cites":null},{"id":823734,"title":"On measures of information and their characterizations.\u201d","authors":[],"date":"1975","doi":null,"raw":".  Acz\u00e9l  J.,  Dar\u00f3czy  Z.,  \u201cOn  measures  of  information  and  their characterizations.\u201d Mathematics in Science and Engineering, vol. 115, Academic Press, New York, San Francisco, London, 1975","cites":null},{"id":822932,"title":"Traffic Classification using a Statistical Approach\u201d, Intel Research Paper,","authors":[],"date":"2005","doi":null,"raw":".  Zuev,  D.,  Moore,  W.,  A.,  \u201cTraffic  Classification  using  a  Statistical Approach\u201d, Intel Research Paper, 2005","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-06-14","abstract":"Network traffic abnormalities pose one of the greatest threats for networked environments. Autonomic communications offer a solution: it should be possible to design network mechanisms that behave adaptively and respond to any anomalous phenomenon that threatens normal network behaviour. In this paper we present the design of an adaptive anomaly detection component that has been built as part of an autonomic network system. We have implemented an entropy estimator to predict the onset of anomalous traffic behaviour within an autonomic resilience framework, and a Supervised Na\u00efve Bayesian classifier which synergistically empower the core properties of self-adaptation, self-learning and self-protection for next generation networks. Being part of an always-on, automated measurement and control infrastructure, such mechanism enforces the adaptive system reaction to suboptimal network operation and its subsequent restoration, while requiring minimal static (re)configuration and operator intervention","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/67892.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/34654\/1\/AOC2010.pdf","pdfHashValue":"dfaede5f26e799d9c3bea856e34959c182d8ea36","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:34654<\/identifier><datestamp>\n      2018-01-24T02:17:08Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413735<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Autonomic diagnosis of anomalous network traffic.<\/dc:title><dc:creator>\n        Marnerides, Angelos<\/dc:creator><dc:creator>\n        Pezaros, Dimitrios P.<\/dc:creator><dc:creator>\n        Hutchison, David<\/dc:creator><dc:subject>\n        QA75 Electronic computers. Computer science<\/dc:subject><dc:description>\n        Network traffic abnormalities pose one of the greatest threats for networked environments. Autonomic communications offer a solution: it should be possible to design network mechanisms that behave adaptively and respond to any anomalous phenomenon that threatens normal network behaviour. In this paper we present the design of an adaptive anomaly detection component that has been built as part of an autonomic network system. We have implemented an entropy estimator to predict the onset of anomalous traffic behaviour within an autonomic resilience framework, and a Supervised Na\u00efve Bayesian classifier which synergistically empower the core properties of self-adaptation, self-learning and self-protection for next generation networks. Being part of an always-on, automated measurement and control infrastructure, such mechanism enforces the adaptive system reaction to suboptimal network operation and its subsequent restoration, while requiring minimal static (re)configuration and operator intervention.<\/dc:description><dc:date>\n        2010-06-14<\/dc:date><dc:type>\n        Contribution to Conference<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/eprints.lancs.ac.uk\/34654\/1\/AOC2010.pdf<\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1109\/WOWMOM.2010.5534933<\/dc:relation><dc:identifier>\n        Marnerides, Angelos and Pezaros, Dimitrios P. and Hutchison, David (2010) Autonomic diagnosis of anomalous network traffic. In: 11th IEEE WoWMoM Conference Autonomic and Opportunistic Communications Workshop 2010, 2010-06-142010-06-17.<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/34654\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1109\/WOWMOM.2010.5534933","http:\/\/eprints.lancs.ac.uk\/34654\/"],"year":2010,"topics":["QA75 Electronic computers. Computer science"],"subject":["Contribution to Conference","PeerReviewed"],"fullText":"Autonomic Diagnosis of Anomalous Network Traffic \nAngelos K. Marnerides, David Hutchison \nComputing Department, Infolab21 \nLancaster University \nLancaster, UK \n{a.marnerides,dh}@comp.lancs.ac.uk \nDimitrios P. Pezaros \nDepartment of Computing Science \nUniversity of Glasgow \nGlasgow, UK \ndp@dcs.gla.ac.uk\n \nAbstract\u2014 Network traffic abnormalities pose one of the greatest \nthreats for networked environments. Autonomic communications \noffer a solution: it should be possible to design network \nmechanisms that behave adaptively and respond to any \nanomalous phenomenon that threatens normal network \nbehaviour. In this paper we present the design of an adaptive \nanomaly detection component that has been built as part of an \nautonomic network system. We have implemented an entropy \nestimator  to predict the onset of anomalous traffic behaviour \nwithin an autonomic resilience framework, and a Supervised \nNa\u00efve Bayesian classifier which synergistically empower the core \nproperties of self-adaptation, self-learning and self-protection for \nnext generation networks. Being part of an always-on, automated \nmeasurement and control infrastructure, such mechanism \nenforces the adaptive system reaction to suboptimal network \noperation and its subsequent restoration, while requiring \nminimal static (re)configuration and operator intervention.  \nKeywords- Autonomic Networks; Resilience; Anomaly \ndetection; Ttraffic classifier \n \nI.  INTRODUCTION  \nAn increasingly important requirement for next generation \nnetworks is that they exhibit autonomic behaviour in order to \nminimise the need for static configuration and operator \nintervention. Autonomic architectures are being designed to \nemploy self-* mechanisms such as self-adaptation, self-\nconfiguration, self-awareness and self-protection, based on \nalways-on automated measurement, monitoring and control of \ntheir networked and system components. The diagnosis of \nanomalous traffic in autonomic networked environments in \nparticular, poses great challenges that are hard to be \nconfronted from both a system and a network perspective. By \ndefinition, autonomic systems are required to behave \nintelligently and to adapt their operation at the onset of sudden \nchanges in the network traffic, so that they can mitigate the \neffects of malicious or legitimate processes that threaten the \nsystem with resource starvation.  \n \nHowever, due to the diversity and the dynamic behaviour of \nsources of suboptimal network operation, the entirety of \nanomalous traffic cannot be classified by statically using a \nsingle detection methodology. It is therefore required for a \nsystem to be supported by mechanisms that adapt to the \noperational traffic dynamics and provide reasonably accurate \nconclusions regarding traffic behaviour.  \n \nWork done in the area of measurement-based anomaly \ndetection has provided valuable results presenting numerous \ndetection\/classification techniques such as those reported in \n[2][3][4]. Most of these methodologies can be instrumented \nwithin an autonomic context employing principles of self-\nlearning and self-adaptation without the need of external \noperator guidance.  \n \nWe argue that our proposed design and implementation is a \ncontribution towards the practical and theoretical \ninstrumentation of the aforementioned principles. Our \nanomaly diagnosis engine provides for adaptive prediction and \nfurther categorization of network anomalies. In this way, \nabnormalities caused by legitimate or malicious intentions \nmay be initially predicted, detected and at the same time be \nclassified on a real-time scenario. These abilities are achieved \ndue to the collaborative behaviour that our architecture \nenforces on the selected algorithms we have implemented.  \n \nIn addition, our diagnosis framework operates within an \noverall resilience architecture that we also present in this \ndocument. Within the context of resilient networking, a \nsystem or network is required to keep its operation under an \nacceptable service level at the onset of various threats. Our \nproposed diagnosis component acts as the threat detection \nengine where it will be the unit in charge for notifying a \nmitigation engine in order to confront the threat in real-time. \nHence, our framework implicitly serves one extra autonomic \ncapability that of self-optimization. At the same time, it \nexhibits a pluggable behaviour which facilitates autonomic \nnetwork nodes running our resilience architecture to \ndynamically employ a desired algorithm either for prediction \nor for classification, in order to customise the process of \nnetwork behaviour diagnosis. We have used the Autonomic \nNetwork Architecture (ANA) node infrastructure to deploy the \nmeasurement-based diagnosis component, since it fulfils the \ncore autonomic requirements and at the same time offers \nflexible design capabilities [1]. \n \nThe remainder of this paper is structured as follows: section II \nbriefly describes our resilience architecture that hosts the \ndiagnosis mechanism, and introduces the ANA node \ninfrastructure. Section III shows the engineering and internal \nalgorithmic design of our detection framework where Section \nIV is purely dedicated on presenting the implementation of our \nprototype. Section V discusses the achievements and potential \nThis work was supported in part by the EU FP6-IST Autonomic Network \nArchitecture (ANA) Project (FP6-IST-27489).   \n \n978-1-4244-7265-9\/10\/$26.00 \u00a9 2010 IEEE \nof the proposed system, discusses future work and concludes \nthe paper. \nII. RESILIENCE ARCHITECTURE \n Autonomic network environments are required to be \nresilient. Resilience is defined as the ability for a network to \nprovide and maintain an acceptable level of service in the face \nof various challenges to normal operation [7]. \n \nOur resilience architecture adopts a modular design that uses \ninformation from a distinct monitoring facility [8]. It is \ncomposed by two core Functional Blocks (FBs), the Detection \nEngine (DE) and the Remediation Engine (RE). In ANA, any \nprotocol entity generating, consuming, processing and \nforwarding information is abstracted as a FB, which may \nreside locally on an ANA node-host or it may be distributed \nacross many hosts on a same or different compartments. A \ncompartment is a primitive abstraction within the ANA \nterminology and is responsible for determining how FBs \ncooperate in order to provide particular functionality (or a \nservice) to the data, control, and management planes [5]. In \ngeneral, a compartment refers to the most absolute network \nentity which is autonomous and implements all the operational \nand administrative rules for a given communication context. \n \nIn simple terms, an ANA node is a local means for message \nexchange between FBs [5]. At the same time, one or more \nANA nodes can map directly onto a physical networked host, \nor a single ANA node may span across multiple physical \nnodes. In reality, the ANA node is considered as the collection \nof mandatory and optional software components that in \npractice allow a physical device (e.g. router, switch, computer, \nsensor) to \u201crun ANA\u201d [6]. It is mainly composed of three core \nelements: the Minimal Infrastructure for Maximal \nExtensibility (MINMEX), the ANA playground and the ANA \nhardware abstraction layer. The ANA MINMEX provides the \nbasic low-level functionalities which are required to bootstrap \nand run ANA. In parallel, it facilitates the generic sets of \nmethods (API) that are used by \u201cclients\u201d of the MINMEX (i.e. \nprotocols, applications). \n \nThe ANA Playground acts as a development framework and \ncouples with a dedicated execution environment, where the \nmore advanced and complex networking functionalities of \nANA are placed [6]. This is the place where both commodity \nand bespoke functionalities are hosted. Commodity elements \nare \u201cpublic\u201d components that one can re-use such as \ncryptographic primitives, compression schemes and error \nrecovery codes. \n \nThe resilience architecture we have designed and implemented \nresides within the ANA Playground. Fig. 1 shows a conceptual \nrepresentation in respect to the location of our architecture \nwithin an ANA node. As already mentioned, we conduct \nresilience instrumentation using a monitoring facility that also \nresides within the Playground.  \n \n \nFigure 1: Resilience architecture within an ANA node. \n \nFig. 2 shows the resilience architecture emphasizing on the \nbasic data flow interactions between the FBs. Initially, a \nmonitoring entity sends real-time per-flow information of \nmonitored traffic to the DE on a designated interface which in \nANA terms we refer to as the Information Dispatch Point \n(IDP). IDPs act as generic communication pivots between the \nvarious FBs and they offer the advantage of re-organising \ncommunication paths between FBs. In addition, IDPs permit \nto implement forwarding tables which are fully decoupled \nfrom addresses and names: i.e., in ANA, the next hop \u201centity\u201d \n(local or remote) is always identified by an IDP. This allows \neasily adding (and using) new networking technology and \nprotocols as long as they export their communication services \nas IDPs do not revise any of the current designations. \n \n \nFigure 2: The Resilience Architecture. \n \nAfter receiving per-flow data, the DE internally performs \nentropy estimation on selected flow features in order to detect \nan anomaly, and subsequently applies runtime classification \nvia a supervised Na\u00efve Bayes estimator. By these actions, the \nDE is eligible to decide whether the observed flows are the \nresult of a local or compartment-wide anomaly. As soon as a \ndecision regarding the precise nature of the anomaly is made, \nthe DE composes a summary specification message that sends \nto its closest RE. Depending on the nature and causes of the \nidentified event, and according to its classification by the DE, \nan appropriate remediation action is taken by RE. For \nexample, in response to an attack, traffic shaping and possibly \nhost blacklisting can be enforced, whereas in case of \nlegitimate very high traffic demands towards particular \nnetwork resources, appropriate load balancing algorithms are \nput in place to enable fast content propagation [16]. In case of \na compartment-wide threat, the RE distributes the threat \ninformation to regionally-close REs. These subsequently \ndecide at which compartment region they should take action \nfor confronting the event. Nevertheless, further description of \nthe internals of the Remediation Engine is outside the scope of \nthis paper, and the interested reader should refer to [16].  \n \nIII. THE DETECTION ENGINE DESIGN \nA. An Anomaly Diagnosis Framework \nA milestone in our design was to identify the correct \nmethodologies to apply in our prototype. Recently, \nconsiderable attention has been drawn to the analysis of the \ndistributions of selected traffic features (i.e. combination of \nfields in packet headers) without the need for analysing large \ntraffic volumes.   \n \nIt has been mentioned in [10] that several anomalies are \ncoupled with particular features present on each packet, and \nthat their direct observation would, in theory, cause less \nprocessing cost and increased efficiency on the extraction of \nabnormal traffic characteristics. This work has evaluated the \npractical feasibility and detailed accuracy of selecting \nparticular traffic features as opposed to the old volume-based \ntraffic analysis methods, such as those presented in [2][12]. \nAlongside the practical feasibility, there were also some \npromising results showing that initial entropy estimation on \nthe selected features provides a valuable heuristic for anomaly \ndetection. Therefore, we have included the entropy metric as a \nbasic initial detection scheme. \n \nA topic that always accompanies detection frameworks is that \nof traffic classification whose challenges are unmet. \nTechniques employed by most classification mechanisms have \nbeen based on traffic volume metrics that are not reliable in \nproviding sufficient information with respect to the structure \nof a specific phenomenon. For the classification of particular \nanomalies, we had initially considered several techniques from \npast literature but the most promising was the one presented in \n[11][13]. It is based on a Na\u00efve Bayesian Classifier that \naccurately classified events whose traffic characteristics look \nalmost identical from a volume-based perspective (e.g. WWW \ntraffic from attack traffic). \n \nApart from the generic requirements of reasonably accurate \nand cost-effective detection\/classification, the basic algorithms \nfor the initial prototype were chosen based on their similarity \nin theoretically treating traffic behaviour. As we explain in the \nnext section, both entropy estimation and Bayesian \nclassification adopt a probabilistic, stochastic view of \noperational traffic. We have selected the particular \ncombination since we have a strong hypothesis that traffic \nbehaviour within autonomic environments is dynamic and \nrandom, mainly due to the diversity of networks that ANA \nincorporates. As we explain next, ANA\u2019s principles as well as \nthe diversity and dynamicity within traffic subsequently lead \nto a hypothesis that spotted anomalies would promote \ndiscriminative properties beyond those already defined in \ntraditional backbone networks.  \n \nWithin ANA, inter and intra-compartment communication \nsessions go beyond traditional layering since they are achieved \nby abstractions such as the IDPs and compartments. Even \nthough they facilitate node interaction under heterogeneous \nnetworks, they enable opaqueness to any mechanism that tries \nto monitor the environmental configurations (e.g. routing) that \ntake place on lower levels of session initiation between two \nentities. Also, apart from IP-based networks, ANA by \nprinciple allows the incorporation of IP-independent networks \n(e.g. sensor networks) that can exhibit particular and \nidiosyncratic anomalies within their traffic behaviour. Under \nsuch a scheme, anomalies within a compartment are the \naggregation of challenges triggered by several different \nenvironments. This fact leads to the assumption that statistical \n(e.g the distribution of flow interarrival times) properties that \ncharacterise normal behaviour and distinguish types of \nanomalies will capture different values than those observed in \ntraditional backbone networks.   \n \nAs an example, we can consider the case where a malicious, \nblackhole node that already has compromised the routing \nprotocol of a large wireless sensor network (WSN) wants to \nexploit the initial protocol negotiations with an IP \ncompartment. In such a scenario, the attacker would easily \nperform eavesdropping on the application-layer services that \nthe particular compartment offers (since the services provided \nby each compartment are public to every node and \ncompartment IDPs have no security mechanisms) and further \n\u201clegally\u201d request for a particular service in order to join the IP \ncompartment. Subsequently the attacker node would be able to \ntamper the TCP negotiation (e.g. by using a fake RST or ACK \nflag) and create a blackhole route in its new environment. In \nparallel with the newly formed blackhole, the attacker node \nstill behaves as a blackhole to its old WSN compartment and \nis in a position to trigger anomalies such as a (D)DoS on both \ncompartments. Obviously, due to the WSN nature, a (D)DoS \nin such an environment is volume-wise comparatively much \nsmaller rather than a (D)DoS in an IP environment. \nNevertheless, such an action would lead to different pattern on \nthe ANA traffic distributions since a monitoring entity under \nANA is not concerned only with a single compartment but \nrather with all inter-connected compartments. \n \nHaving as a basis the aforementioned scenario as well as the \nhypothesis in respect with the different values we\u2019ll possibly \nobserve on traffic distributions, we constructed some ANA-\nspecific characteristics that our detection\/classification \nmechanism should follow. We required an anomaly diagnosis \nframework that would exhibit common mathematical \nproperties on both the detection and classification phase \nhaving at the same the capability to process a range of features \nfrom all the traditional layers. In parallel we considered as \nnecessary that our component should be able to extract and \nfurther classify \u201clightweight\u201d unobserved anomalies (e.g. the \nWSN (D)DoS example). In addition, an important aspect is for \nour framework to be adaptive. This capability is not only \ndetermined by the algorithmic design but also from a pure \nengineering point of view. Our Detection Engine was \nformulated in a pluggable fashion where a diversity of various \ndetection\/classification methodologies may be \nplugged\/removed based on the customised requirements of \neach compartment (i.e. based on which other types of \ncompartments is connected with) in order for our engine to \nadapt at the environment-specific traffic (e.g. WSN traffic). \n \nB. DE Internal Design \n As shown in Fig. 3, the DE is internally composed by the \nLogic Brick, the Classifier, the Notifier brick, and a \nConfiguration Manager (CM). The latter is in charge of \nhandling all configuration settings in order for the DE to bind \nand configure itself with the interface provided by the adaptive \nmeasurement FB. In addition, it is the unit that allows \ndynamic binding and configuration of the RE with the DE as it \nwill be described in the following subsection.  \n \nThe Notifier brick (NB) is in charge of sending periodical \nupdates to the RE. These are initially classifications passed to \nthe NB by the Classifier who purely acts as the storage facility \nfor the classified events. According to the nature of the already \nclassified event, the NB instructs the RE to take either a local \nor a distributed remediation action. In case of no anomaly \nbeing reported, the NB still updates the RE within the time \ninterval defined from the configuration made at the CM. \n \n \nFigure 3:The DE high-level internal design. \n \nThe Logic Brick (LB) is the main control processing \ncomponent in the DE. This is where the two most basic \ncapabilities exist, prediction and learning. The prediction unit \n(Predictor) is in charge of applying all the prediction \nalgorithms based on the runtime measurements taken by the \nadaptive measurements FB which are received on the \ndedicated measurement reception IDP [8].  \nOn our current prototype, the Predictor acts according to the \nestimates given by the distribution of selected flow features \n(e.g. total number of packets of a complete bidirectional flow) \nand applies entropy estimation in order to characterise the \nevolution of selected fields in each flow received. We assume \nX  corresponds to a finite number of selected flow-feature \nmeasurements ],...,,[ 21 nxxx where each value possesses a \nprobability [ ]npppP ,...,, 21= . For each n, there is a \ncorresponding uncertainty function )( pa  and therefore the \nfunction ),...,( 21 nn pppA  states the average uncertainty for \nthe range of all the set of finite random values in X . Based on \naxioms by Azcel and Daroczy [14] and Mathai and Rathie \n[15], we summarise and reform the relationships between the \naforesaid functions, and as a result we attain the generalised \nformula that is also known as the Shannon\u2019s entropy:  \n\u0001\n=\n\u2212==\nn\ni\niinn pppppAxH\n1\n221 log),...,,()(          (1) \nUsing formula (1), we achieve an approximation of the \nevolutionary probabilistic behaviour that a selected flow \nfeature would take. This technique will enable prediction of a \npossible anomaly within the network traffic on a local or \ncompartment-wide scenario. In more detail, the prediction \nachieved is based on a simple comparison accommodated \nbetween the new entropy value and past pre-known entropy \nvalues observed in the particular compartment for the selected \nflow feature throughout time. As we explain in the following \nsection (III), past entropy values are stored in a dedicated \ndatabase present within the Predictor.  \nHowever, at this point we need to clarify that for the particular \ncase of ANA, we need to go beyond single-layer features and \nexploit properties from some or even all of the traditional \nlayers. Therefore, our current Predictor implementation \naccepts a range of features to be processed in a way to provide \na summary of joint multivariate entropy results. For example, \nin a case where a wired Ethernet compartment interacts with a \nvariation of other wireless and IP compartments, there is a \npossible selection of features ranging from the traditional data \nlink layer (e.g Ethernet packets size distribution) to the \nnetwork layer (e.g. TCP\/UDP packets or bytes interarrival \ntime) and application layer (e.g. SMTP byte size in case of \nmail-based attacks). This way, a deeper and at the same time \nbroader view of the network statistics may be visualised and \npost-processed in the learning phase as employed by the \nLearner unit.   \n \nThe Learner unit is in charge of performing run-time traffic \nclassification based on the sample multivariate entropy results \ngiven by the Predictor and the already categorised past events \nstored in the Classifier. The Learner unit currently uses a \nsupervised Na\u00efve Bayes estimator which \u2013being a probabilistic \nclassifier\u2013 accepts a range of training data and classifies \ncertain events at runtime. In our case, the training data are the \nconclusive entropy outcomes provided by the Predictor. \nTherefore, the already selected probability distributions of \nflow features constructed by the Predictor will be the input in \nour Na\u00efve Bayes classifier, in order to achieve a statistical \nmodel defining the different anomaly groups (i.e. classes). So, \nif we let X  be a random vector with n  variables: \n \n[ ]nxxxX ,...,, 21=              (2) \n \nwe can use it as input to the classifier and include it in the \nBayes theorem that gives the following formula: \n\u0001\n=\njc\njj\njj\nj\ncXfcP\ncXfcP\nXcP )|()(\n)|()()|(\n           (3) \nFormula (3) considers the discriminant functions given by any \nn variable in X as independent and that )( jcP  is the \nprobability of obtaining the anomaly class independently of \nthe observed data given by X . The function )|( jcXf  is a \ndistribution function defining the probability of X  given by \njc . The calculation of this formula is the main action taken by \nthe Learner and provides a number denoting the Bayes \nlikelihood ratio, therefore making it extremely feasible to \nminimise the cost or the probability error and resulting in \naccurate classification [11].  \n \nObviously, since we employ a supervised scheme, complete \nruntime classification is achieved with a threshold-based \ncomparison between a training data set and the likelihood \nestimation performed on the new data input. The training data \nset contained within the Learner holds likelihood values for \nthe joint entropy (univariate or multivariate feature \ndistributions) of past inputs given by the Predictor. Those \nlikelihood values were initially grouped based on simply \nwhether they belong to the normal or abnormal traffic \nspectrum and subsequently, those within the abnormal group \nare clustered into several sub-groups indicating the exact \nanomaly. In our current prototype, the training data set holds \nvalues for Flash Events and local as well as distributed Denial \nof Service (DoS) attacks. The values we embedded in our \nprototype were decided based on results obtained in [11] and \n[13]. \nIV. THE DETECTION ENGINE IMPLEMENTATION \n There are three main components encapsulating the \nfunctionality entailed in the DE. The Logic Brick (LB), the \nNotifier Brick (NB) and the Configuration Manager (CM). \nFig. 4 shows a diagrammatical view of the data flow taking \nplace within our implementation.  \n \nThe Adaptive Measurement (AM) FB that is composed by 5 \nbricks has generic IDPs in charge of handling configuration \nand binding parameters. The AM IDPs are published as \nservices within the local MINMEX and at the same time are \nadvertised as a compartment-wide service. By exploiting this \nflexibility, it is therefore feasible for a remote DE to attach \nitself on a physically distant ANA node.  \nAs bootstrapping stage, the CM sends binding parameters to \nthe AM and at the same time transmits AM-compatible \nconfiguration parameters that will subsequently serve the \nmeasurement requirements coming from the DE. The binding \nparameters are simple messages denoting the compartment-\nrelated presence of the client DE to the AM (e.g. IP address). \n \n \nFigure 4: DE data flow & functionality. \n \nOn the other hand, the configuration parameters are series of \nfiltering commands composed within a file requesting a \ncustomized operation of the bricks orchestrating the AM. An \nexample might be the request by a DE to get measurements \nonly for TCP flows from specific source\/destination addresses \nwithin the local compartment.  \n \nAt the same time, the CM accepts binding and configuration \nrequests from a local or remote RE. Similarly to the binding \ndone between the DE and the AM, a RE may bind itself by \nstating its position within the compartment. The configuration \ncurrently implemented allows a RE to determine a diagnosis \nnotification time interval as received by the NB (which resides \nwithin the DE) and furthermore, to request from the DE to run \npreferred algorithms in a pluggable fashion. The algorithms to \nbe plugged are meant to complement the standard algorithms \nwe have implemented and described in the previous section. \n \nPrediction and learning algorithms are initially plugged \nthrough the configuration done from an RE towards the CM, \nand are then placed correctly in the DE by the Algorithm \nPlugin Manager (APM). The APM is a management sub-\ncomponent that resides within the LB and is in charge for \ninitially cancelling the operations of the current running \nalgorithms and for substituting them with the requested \nalgorithm \u201cplugins\u201d. These plugins are pre-compiled binaries \nand are not obliged to follow the ANA API since they are \ncalled as subroutines from the ALgorithm EXecutor (ALEX) \nunits, which are placed within the Predictor and Learner \ncomponents. However, a plugin request is not full if it is \ncomposed only by a pre-compiled binary. A request is \nconsidered to be fully compatible with the APM if it is \naccompanied with a \u201clocation\u201d parameter denoting which unit \n(e.g. the Predictor or the Learner) to be attached to. Any \nwrong configuration parameters are discarded from the APM \nconfiguration IDP (i.e. ALEXConfigIDP). The Predictor \ncomponent holds a dedicated IDP (i.e. MeasurementIDP) that \npublishes itself on the local MINMEX and receives \nmeasurements according to the initial configuration agreed \nbetween the CM and the AM. A FIFO queue is on the \nreception of the Predictor and measurement data are then \npassed to the ALEX unit. Based upon the estimations done in \nthe ALEX, they are then stored on a local database and \nsubsequently sent to an output FIFO queue.  \n \nThe Predictor\u2019s conclusive estimations are passed to a \nreception queue that resides within the Learner component \nwhich employs all learning algorithms (in our current \nprototype a Supervised Na\u00efve Bayesian Classifier) via the \noperations done by its dedicated ALEX unit. Since the \nclassification scheme within the Learner is supervised, a \ntraining set database is present in order for the ALEX to \nperform comparison with the real-time input coming from the \nreception queue. As soon as a coherent classification \nconclusion is structured, it is sent to the notification queue. \nThe notification queue updates the Classifier DB within a \ndedicated time interval (currently 4 seconds). While the \nClassifier DB updates its data, it also sends a conclusive \nnotification that includes the type of anomaly (e.g. local DoS) \nand the related traffic flow group to the Notifier Brick (NB).  \n \nAs can be seen from Fig. 4, the NB\u2019s notification reception \nIDP is attached to a Decision Unit (DU) which is in charge of \nseparating local from compartment-wide classified events. \nEvery local threat is transmitted from the DU to the System \nNotifier (SN) which will then notify the local RE. Similarly, \nthe Compartment Notifier (CN) is the unit that publishes \nnotifications in case of a compartment-wide anomaly (e.g. a \nDDoS) where the local RE is required to interact with remote \nREs in order to mitigate such event. The NB holds one IDP \nthat is mainly for handling data received from remote REs. \nWhether or not a network anomaly is manifested, the NB \nregularly updates the locally attached RE regarding the traffic \nstatus within an agreed time interval. \nV. DISCUSSION & CONCLUSION \n In this paper, we have presented the design and \nimplementation of a traffic anomaly detection component that \ncan be an integral part of next generation autonomic network \ninfrastructures. \n \nVia this work we have shown that the exploitation of carefully \ndesigned infrastructures, complex issues such as anomaly \ndetection may be reasonably resolved in an affordable manner. \nOur diagnosis framework contributes to the composition of \nimportant autonomic capabilities such as adaptability, self-\nlearning and self-protection, and also to self-optimization by \nbeing a component of the overall resilience architecture. In \nparallel, our framework prototype sets a core foundational \ncontribution towards the realisation of an always-on \nmeasurement and control framework which to the best of our \nknowledge has not been seriously considered.      \n \nThe results presented in [10][11] ensure that our algorithmic \ndesign satisfies the requirements of  real-time anomaly \ndiagnosis.  Therefore, we have already started evaluating our \nengine\u2019s behaviour within the overall resilience architecture \nthat we have also presented in this document. The overall \narchitecture is in the process of being tested on the autonomic \ncommunications testbed provided within the ANA project \n(ANA-Lab). The ANA-Lab is a distributed ANA node \ninfrastructure that provides the capability of virtual topology \ninstrumentation through distributed monitoring and control \nfacilities. Our target is to accommodate a series of \nexperiments using (live as well as captured) operational traffic \ntraces in order to examine the practical system performance of \nour architecture.   \nREFERENCES \n[1]. Autonomic Network Architecture (ANA) Project details available at: \nhttp:\/\/www.ana-project.org \n[2]. Barford P., Plonka D., \u201cCharacteristics of network traffic flow \nanomalies.\u201d, in Proceedings of ACM SIGCOMM, Internet \nMeasurement Workshop, San Francisco, California, USA, November \n2001. \n[3]. Lakhina A., Crovella M., Diot C., \u201cDiagnosing Network-wide traffic \nAnomalies.\u201d, in ACM SIGCOMM, Aug. 30- Sept 3, Oregon, Portland, \nUSA, 2004 \n[4]. Lakhina A., Crovella M., Diot C., \u201cCharacterization of Network-wide \nAnomalies in Traffic Flows.\u201d, in  ACM SIGCOMM Internet \nMeasurement Conference (IMC), 2004 \n[5]. Sifalakis M., Louca A., Peluso L., Mauthe A., Zseby T., \"A Functional \nComposition Framework for Autonomic Network Architectures \".  In \nproceedings of 2nd IEEE International Workshop on Autonomic \nCommunications and Network Management (IEEE NOMS\/ACNM \n'08), Salvador, Bahia, Brazil, April 7-11, 2008. \n[6]. Jelger C., Bouabene G., Schmid S., \u201cAutonomic Network Architecture \n(ANA) Blueprint \u2013 Second Version\u201d, ANA, February 2009 \n[7]. Hutchison, D., Sterbenz, J. P.G, Jabbar, A. Sholler, M., 2006 D3.2: \nResilience\/Security Framework, Deliverable D3.2 ANA December \n2006 \n[8]. Marnerides A. K., Pezaros D. P., Hutchison D., \u201cDetection and \nMitigation of Abnormal Traffic Behaviour in Autonomic Networked \nEnvironments\u201d., 4th ACM CoNEXT Student Workshop, December 9-\n12, 2008, Madrid, Spain. \n[9]. Bouabene G., Jelger C., Keller A., Rodriguez D., \u201cANA Core  \nDocumentation\u201d Deliverable D.1.11, ANA, December 2008 \n[10]. Lahkina, A., Crovella, M., Diot, C., 2005, \u201cMining Anomalies Using \nTraffic Feature Distributions\u201d, ACM SIGCOMM 2005, Philadelphia, \nPensylvania, USA.  \n[11]. Zuev, D., Moore, W., A., \u201cTraffic Classification using a Statistical \nApproach\u201d, Intel Research Paper, 2005   \n[12]. Barford P., Kline J., Plonka D., Ron A., \u201cA Signal Analysis for \nNetwork Traffic Anomalies.\u201d,  in ACM IMW\u201902, Nov. 6-11, Marseille, \nFrance, 2002 \n[13]. Moore A. ,W.,  Zuev D., \"Internet Traffic Classification Using \nBayesian Analysis Techniques\" in the Proceedings of the ACM \nSIGMETRICS Banff, Canada, June 2005. \n[14]. Acz\u00e9l J., Dar\u00f3czy Z., \u201cOn measures of information and their \ncharacterizations.\u201d Mathematics in Science and Engineering, vol. 115, \nAcademic Press, New York, San Francisco, London, 1975  \n[15]. Mathai A. M.,  Rathie P. N., \u201cBasic Concepts in Information Theory \nand Statistics: Axiomatic Foundations and Applications\u201d, Wiley \nHalstead, New York, Wiley Eastern, New Delhi (1975).  \n[16]. Pezaros, D., P., Mathy, L., \u201cExplicit Application-Network Cross-layer \nOptimisation\u201d, 4th International Telecommunication Networking \nWorkShop (IT-NEWS) on QoS in Multiservice IP Networks (QoS-IP \n2008), Venice, Italy, February 13-15, 2008\n"}