{"doi":"10.1016\/j.jda.2009.07.001","coreId":"15416","oai":"oai:dro.dur.ac.uk.OAI2:7418","identifiers":["oai:dro.dur.ac.uk.OAI2:7418","10.1016\/j.jda.2009.07.001"],"title":"Computing sharp 2-factors in claw-free graphs.\\ud","authors":["Broersma, H.J.","Paulusma, Daniel"],"enrichments":{"references":[{"id":942331,"title":"A maxfm;ng algorithm for determining the graph H from its line graph","authors":[],"date":"1973","doi":"10.1016\/0020-0190(73)90029-X","raw":null,"cites":null},{"id":943372,"title":"A note on cycles in 2-factors of line graphs,","authors":[],"date":"1999","doi":null,"raw":null,"cites":null},{"id":943365,"title":"Closure concepts for claw-free graphs,","authors":[],"date":"1998","doi":"10.1016\/S0012-365X(97)00210-0","raw":null,"cites":null},{"id":942333,"title":"Closure, 2-factor, and cycle coverings in claw-free graphs,","authors":[],"date":"1999","doi":null,"raw":null,"cites":null},{"id":942328,"title":"Even subgraphs of bridgeless graphs and 2-factors of line graphs,","authors":[],"date":"2007","doi":"10.1016\/j.disc.2006.11.023","raw":null,"cites":null},{"id":942330,"title":"Graph factors and factorization: 1985-2003: A survey,","authors":[],"date":"2007","doi":"10.1016\/j.disc.2005.11.059","raw":null,"cites":null},{"id":942327,"title":"Graph Theory, Addison-Wesley,","authors":[],"date":"1969","doi":null,"raw":null,"cites":null},{"id":943367,"title":"Graph Theory, Second edition, Graduate Texts in Mathematics 173,","authors":[],"date":"2000","doi":null,"raw":null,"cites":null},{"id":942329,"title":"Hamiltonian results in K1;3-free graphs,","authors":[],"date":"1984","doi":"10.1002\/jgt.3190080116","raw":null,"cites":null},{"id":943369,"title":"On 2-factors in claw-free graphs,","authors":[],"date":"1999","doi":"10.1016\/S0012-365X(98)00398-7","raw":null,"cites":null},{"id":942332,"title":"On a closure concept in claw-free graphs,","authors":[],"date":"1997","doi":null,"raw":null,"cites":null},{"id":942334,"title":"On the number of components in a 2-factor of a claw-free graph,","authors":[],"date":"2007","doi":"10.1016\/j.disc.2006.11.022","raw":null,"cites":null},{"id":943371,"title":"On traceability and 2-factors in claw-free graphs,","authors":[],"date":"2004","doi":null,"raw":null,"cites":null},{"id":943366,"title":"Regular factors in K1;3-free graphs,","authors":[],"date":"1991","doi":"10.1002\/jgt.3190150304","raw":null,"cites":null},{"id":943368,"title":"Regular factors in K1;n-free graphs,","authors":[],"date":"1991","doi":"10.1002\/jgt.3190150310","raw":null,"cites":null},{"id":943370,"title":"Ryja\u00b4c\u02c7ek Claw-free graphs\u2014a survey,","authors":[],"date":"1997","doi":null,"raw":null,"cites":null},{"id":943364,"title":"Sharp upper bounds for the minimum number of components of 2-factors in claw-free graphs,","authors":[],"date":null,"doi":"10.1007\/s00373-009-0855-7","raw":null,"cites":null},{"id":943373,"title":"Two-factors with few cycles in claw-free graphs,","authors":[],"date":"2001","doi":"10.1016\/S0012-365X(00)00317-4","raw":null,"cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-09-01","abstract":"In a previous paper we obtained an upper bound for the minimum number of components of a 2-factor in a claw-free graph. This bound is sharp in the sense that there exist infinitely many claw-free graphs for which the bound is tight. In this paper we extend these results by presenting a polynomial algorithm that constructs a 2-factor of a claw-free graph with minimum degree at least four whose number of components meets this bound. As a byproduct we show that the problem of obtaining a minimum 2-factor (if it exists) is polynomially solvable for a subclass of claw-free graphs. As another byproduct we give a short constructive proof for a result of Ryj\u00e1\u010dek, Saito and Schelp.\\ud\n\\u","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/15416.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/7418\/1\/7418.pdf","pdfHashValue":"fe73fe8234d1e89befd7577ab3055e7d2660d27e","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:7418<\/identifier><datestamp>\n      2013-04-03T12:16:54Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Computing sharp 2-factors in claw-free graphs.\\ud\n<\/dc:title><dc:creator>\n        Broersma, H.J.<\/dc:creator><dc:creator>\n        Paulusma, Daniel<\/dc:creator><dc:description>\n        In a previous paper we obtained an upper bound for the minimum number of components of a 2-factor in a claw-free graph. This bound is sharp in the sense that there exist infinitely many claw-free graphs for which the bound is tight. In this paper we extend these results by presenting a polynomial algorithm that constructs a 2-factor of a claw-free graph with minimum degree at least four whose number of components meets this bound. As a byproduct we show that the problem of obtaining a minimum 2-factor (if it exists) is polynomially solvable for a subclass of claw-free graphs. As another byproduct we give a short constructive proof for a result of Ryj\u00e1\u010dek, Saito and Schelp.\\ud\n\\ud\n<\/dc:description><dc:subject>\n        Claw-free graph<\/dc:subject><dc:subject>\n         2-factor<\/dc:subject><dc:subject>\n         Number of components<\/dc:subject><dc:subject>\n         Polynomial algorithm. <\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        Journal of discrete algorithms, 2010, Vol.8(3), pp.321-329 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2010-09-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:7418<\/dc:identifier><dc:identifier>\n        issn:1570-8667<\/dc:identifier><dc:identifier>\n        doi:10.1016\/j.jda.2009.07.001<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/7418\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1016\/j.jda.2009.07.001 <\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/7418\/1\/7418.pdf<\/dc:identifier><dc:rights>\n        NOTICE: this is the author's version of a work that was accepted for publication in Journal of discrete algorithms.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["1570-8667","issn:1570-8667"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":["Claw-free graph","2-factor","Number of components","Polynomial algorithm."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n07 October 2010\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nBroersma, H.J. and Paulusma, D. (2010) \u2019Computing sharp 2-factors in claw-free graphs.\u2019, Journal of discrete\nalgorithms., 8 (3). pp. 321-329.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.jda.2009.07.001\nPublisher\u2019s copyright statement:\nNOTICE: this is the author\u2019s version of a work that was accepted for publication in Journal of discrete algorithms.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nComputing Sharp 2-factors in Claw-free Graphs? ??\nHajo Broersma and Danie\u00a8l Paulusma\nDepartment of Computer Science, Durham University, DH1 3LE Durham,\nUnited Kingdom, {hajo.broersma,daniel.paulusma}@durham.ac.uk\nAbstract. In a previous paper we obtained an upper bound for the minimum\nnumber of components of a 2-factor in a claw-free graph. This bound is sharp in\nthe sense that there exist infinitely many claw-free graphs for which the bound is\ntight. In this paper we extend these results by presenting a polynomial algorithm\nthat constructs a 2-factor of a claw-free graph with minimum degree at least four\nwhose number of components meets this bound. As a byproduct we show that\nthe problem of obtaining a minimum 2-factor (if it exists) is polynomially solv-\nable for a subclass of claw-free graphs. As another byproduct we give a short\nconstructive proof for a result of Ryja\u00b4c\u02c7ek, Saito & Schelp.\n1 Introduction\nIn this paper we consider 2-factors of claw-free graphs. Graph factors are well-studied.\nSee [16] for a survey. Our motivation to study 2-factors goes back to the well-known\nNP-complete decision problem H-CYCLE (cf. [9]) in which the problem is to decide\nwhether a given graph has a hamiltonian cycle, i.e., a connected 2-regular spanning sub-\ngraph. In the related problem 2-FACTOR the connectivity condition is dropped, hence\nthe problem is to decide whether a given graph admits a 2-factor, i.e., a 2-regular span-\nning subgraph. This makes the problem considerably easier in the algorithmic sense:\nit is well-known that 2-FACTOR can be solved in polynomial time by matching tech-\nniques, and a 2-factor can be constructed in polynomial time if the answer is YES\n(cf [14]). Clearly, a hamiltonian cycle is a 2-factor consisting of one component, and\nthe minimum number of components of a 2-factor can be seen as a measure for how far\na graph is from being hamiltonian. So, from an algorithmic viewpoint a natural question\nis to consider the problem of determining a 2-factor of a given graph with a minimum\nnumber of components. Obviously, this is an NP-hard problem. Hence it makes sense\nto search for 2-factors with a reasonably small number of components if we aim for\npolynomial time algorithms. For this research we have restricted ourselves to the class\nof claw-free graphs. This is a rich class containing, e.g., the class of line graphs and the\nclass of complements of triangle-free graphs. It is also a very well-studied graph class,\nboth within structural graph theory and within algorithmic graph theory; see [7] for\na survey. Furthermore, computing a 2-factor with a minimum number of components\nremains NP-hard for the class of claw-free graphs.\n? This work has been supported by EPSRC (EP\/D053633\/1).\n?? A preliminary and shortened version of this paper appeared in the Proceedings of the 33rd\nInternational Symposium on Mathematical Foundations of Computer Science (MFCS 2008).\nIn [1] we already obtained an upper bound for the minimum number of components\nof a 2-factor in a claw-free graph. This bound is sharp in the sense that there exist\ninfinitely many claw-free graphs for which the bound is tight; we will specify this later.\nWhen considering the related complexity problems, we soon realized that the proof\nmethods used in [1] need to be extended in order to obtain a polynomial algorithm that\nconstructs a corresponding 2-factor, e.g., a 2-factor whose number of components is at\nmost our upper bound. In the present paper we present this polynomial time algorithm.\n2 Terminology and Background\nWe consider graphs that are finite, undirected and simple, i.e., without multiple edges\nand loops. For notation and terminology not defined in this paper we refer to [4].\nLet G = (V (G), E(G)) be a graph of order |G| = |V (G)| = n and of size e(G) =\n|E(G)|. The neighbor set of a vertex x in G is denoted by NG(x) = {y \u2208 V (G) | xy \u2208\nE(G)}, and its cardinality by dG(x). We denote the minimum (vertex) degree of G by\n\u03b4G = min{dG(x) | x \u2208 V (G)}. If no confusion can arise we often omit the subscripts.\nLet Kn denote the complete graph on n vertices. A graph F is called a 2-factor\nof a graph G if F is a 2-regular spanning subgraph of G, i.e., if F is a subgraph of\nG with V (F ) = V (G) and dF (x) = 2 for all x \u2208 V (F ). A claw-free graph is a\ngraph that does not contain an induced subgraph isomorphic to the four-vertex star\nK1,3 = ({u, a, b, c}, {ua, ub, uc}).\n2.1 Known Results\nSeveral interesting problems are still open for claw-free graphs such as the conjecture\nof Matthews and Sumner [15] that every 4-connected claw-free graph is hamiltonian.\nHowever, there is quite a lot known on 2-factors in claw-free graphs, including some\nvery recent results. Results of both Choudum & Paulraj [3] and Egawa & Ota [5] imply\nthat every claw-free graph with \u03b4 \u2265 4 contains a 2-factor.\nTheorem 1 ([3, 5]). A claw-free graph with \u03b4 \u2265 4 has a 2-factor.\nWe observe that every 4-connected claw-free graph has minimum degree at least four,\nand hence has a 2-factor. A 2-connected claw-free graph already has a 2-factor if \u03b4 =\n3 [20]. However, in general a claw-free graph with \u03b4 \u2264 3 does not have to contain a\n2-factor. Examples are easily obtained.\nFaudree et al. [6] showed that every claw-free graph with \u03b4 \u2265 4 has a 2-factor with\nat most 6n\/(\u03b4 + 2) \u2212 1 components. Gould & Jacobson [11] proved that, for every\ninteger k \u2265 2, every claw-free graph of order n \u2265 16k3 with \u03b4 \u2265 n\/k has a 2-factor\nwith at most k components. Fronc\u02c7ek, Ryja\u00b4c\u02c7ek & Skupien\u00b4 [8] showed that, for every\ninteger k \u2265 4, every claw-free graph G of order n \u2265 3k2 \u2212 3 with \u03b4 \u2265 3k \u2212 4 and\n\u03c3k > n+ k2 \u2212 4k + 7 has a 2-factor with at most k \u2212 1 components. Here \u03c3k denotes\nthe minimum degree sum of any k mutually nonadjacent vertices.\nIf a graph G is claw-free, 2-connected and has \u03b4 \u2265 4, then G has a 2-factor with at\nmost (n+1)\/4 components [13]. If a graph G is claw-free, 3-connected and has \u03b4 \u2265 4,\nthen G has a 2-factor with at most 2n\/15 components [13].\n2\nIn [1] we considered claw-free graphs with \u03b4 \u2265 4. Our motivation for this is as\nfollows. We first note that the number of components of a 2-factor in any graph on\nn vertices is obviously at most n\/3. For claw-free graphs with \u03b4 = 2 that have a 2-\nfactor we cannot do better than this trivial upper bound. This is clear from considering\na disjoint set of triangles (cycles on three vertices). For claw-free graphs with \u03b4 = 3\nthat have a 2-factor, the upper bound n\/3 on its number of components is also tight, as\nshown in [1]. Hence, in order to get a nontrivial result it is natural to consider claw-free\ngraphs with \u03b4 \u2265 4.\nOur two main results in [1] provide answers to two open questions posed in [20].\nTheorem 2 ([1]). A claw-free graph G on n vertices with \u03b4 \u2265 5 has a 2-factor with at\nmost (n\u2212 3)\/(\u03b4 \u2212 1) components unless G is isomorphic to Kn.\nTheorem 3 ([1]). A claw-free graph G on n vertices with \u03b4 = 4 has a 2-factor with\nat most (5n \u2212 14)\/18 components, unless G belongs to a finite class of exceptional\ngraphs.\nBoth results are tight in the following sense. Let f2(G) denote the minimum number\nof components in a 2-factor of G. Then in [20], for every integer d \u2265 4, an infinite\nfamily {F di } of claw-free graphs with \u03b4(F di ) \u2265 d is given such that f2(F di ) > |F di |\/d \u2265\n|F di |\/\u03b4(F di ). This shows we cannot replace \u03b4 \u2212 1 by \u03b4 in Theorem 2. The bound in\nTheorem 3 is tight in the following sense. There exists an infinite family {Hi} of claw-\nfree graphs with \u03b4(Hi) = 4 such that\nlim\n|Hi|\u2192\u221e\nf2(Hi)\n|Hi| =\n5\n18\n.\nThis family can be found in [20] as well.\nThe exceptional graphs of Theorem 3 have at most seventeen vertices. They are de-\nscribed in [1], and we will not specify them here. In [1] we also explain that Theorem 2\nand 3 together improve the previously mentioned result of Faudree et al. [6] and that\nTheorem 2 also improves the previously mentioned result of Gould & Jacobson [11].\n2.2 Results of This Paper\nThe proofs in [1] do not yield algorithms for constructing 2-factors that satisfy the upper\nbounds in Theorems 2 and 3. In the remainder of this paper we will develop a new\napproach to these problems in order to establish polynomial algorithms that construct\n2-factors of claw-free graphs with minimum degree at least four. Using our results in [1]\nwe show that the number of components in these 2-factors are guaranteed to satisfy the\nupper bounds of Theorems 2 and 3. We will illustrate our approach by concentrating on\nTheorem 2. It will be immediately clear that the same approach works for Theorem 3 in\nexactly the same way. As a byproduct we show that the problem of obtaining a minimum\n2-factor (if it exists) is polynomially solvable for a subclass of claw-free graphs which\nwe describe later on. As another byproduct we give a short constructive proof for a\nresult of Ryja\u00b4c\u02c7ek, Saito & Schelp [19].\n3\n3 The Algorithm for Constructing 2-factors of Claw-free Graphs\nWe split our polynomial time algorithm into six different parts. For the first two parts\nwe do not have to develop any new theory or algorithms, but can rely on the beautiful\nexisting machinery from the literature. The first part of this says that claw-free graphs\nbehave the same with respect to our problem as line graphs obtained from them by\nperforming some closure operation which will be explained shortly. The second part\nthen describes the known equivalence of our problem with an analogous problem based\non concepts and results in the preimage graphs of line graphs. Our new contributions\nare described and explained in the third, fourth, fifth and sixth part. In the third part\nwe consider preimage graphs that are trees and in the fourth part we consider preimage\ngraphs that are triangle-free. Finally, in the fifth and sixth part we translate the results\nback to the original domain of claw-free graphs and mention some special class for\nwhich our algorithm finds a 2-factor with a minimum number of components.\nStep 1: restrict to line graphs of triangle-free graphs\nThe line graph of a graph H with edges e1, . . . , ep is the graph L(H) with vertices\nu1, . . . , up such that there is an edge between any two vertices ui and uj if and only if\ni and ej share one end vertex in H . It is easy to verify and well-known (see e.g. [12])\nthat line graphs are claw-free graphs, but that the class of claw-free graphs is much\nricher (in fact, line graphs have been characterized by a set of nine forbidden induced\nsubgraphs). We show that we can restrict ourselves to an even smaller subclass of claw-\nfree graphs, namely the class of line graphs of triangle-free graphs. For this purpose we\nuse the closure concept as defined in [18].\nThe closure of a claw-free graph is defined as follows. Let G be a claw-free graph.\nThen, for each vertex x of G, the set of neighbors of x in G induces a subgraph with\nat most two components. If this subgraph has two components, both of them must be\ncliques. If the subgraph induced by N(x) is connected, we add edges joining all pairs\nof nonadjacent vertices in N(x). This operation is called the local completion of G at\nx. The closure cl(G) of G is a graph we can obtain by recursively repeating the local\ncompletion operation, as long as this is possible. Ryja\u00b4c\u02c7ek [18] showed that the closure\nof G is uniquely determined, i.e., that the ordering in which one performs the local\ncompletions does not matter. Ryja\u00b4c\u02c7ek [18] also showed that G is hamiltonian if and\nonly if cl(G) is hamiltonian. This result was later extended to 2-factors [19].\nTheorem 4 ([19]). Let G be a claw-free graph. Then G has a 2-factor with at most k\ncomponents if and only if cl(G) has a 2-factor with at most k components.\nThe following relationship between claw-free graphs and triangle-free graphs exists.\nTheorem 5 ([18]). IfG is a claw-free graph, then there is a triangle-free graphH such\nthat L(H) = cl(G).\nIt is well-known that apart from K3 which is L(K3) and L(K1,3), every connected line\ngraph F has a unique H with F = L(H) (see e.g. [12]). We call H the preimage graph\nof F . For K3 we let K1,3 be its preimage graph. For disconnected graphs we define the\npreimage graphs according to their components.\n4\nRecall that f2(G) denotes the minimum number of components in a 2-factor of\na graph G. By Theorem 4 and Theorem 5, we deduce that for a claw-free graph G,\nf2(G) = f2(cl(G)) = f2(L(H)), where H is the (triangle-free) preimage graph of\ncl(G). Recall that the closure of a claw-free graph can be obtained in polynomial time.\nSince it is known that the preimage graph of a line graph can be obtained in polynomial\n(linear) time (see e.g. [17]) we can efficiently compute H .\nStep 2: translate the problem into finding dominating systems\nAn even graph is a graph in which every vertex has a nonzero even degree. A connected\neven graph is called a circuit. For q \u2265 2, a star K1,q is a complete bipartite graph with\nsets A = {c} and B with |B| = q; the vertex c is called the center and the vertices in\nB are called the leaves of K1,q .\nLet H be a graph that contains a set S consisting of stars with at least three edges\nand circuits, all (stars and circuits) mutually edge-disjoint. We call S a system that\ndominates H or simply a dominating system if for every edge e of H the following\nholds:\n\u2013 e is contained in one of the stars of S, or\n\u2013 e is contained in one of the circuits of S, or\n\u2013 e shares an end vertex with an edge of at least one of the circuits in S.\nGould & Hynds [10] proved the following result.\nTheorem 6 ([10]). The line graph L(H) of a graph H has a 2-factor with k compo-\nnents if and only if H has a dominating system with k elements.\nCombining Theorem 4 and Theorem 5 with Theorem 6 yields the following result.\nTheorem 7. Let G be a claw-free graph. Then G has a 2-factor with k components\nif and only if the (triangle-free) preimage graph of G has a dominating system with k\nelements.\nThe edge degree of an edge xy in a graph H is defined as dH(x) + dH(y) \u2212 2. We\ndenote the minimum edge degree of H by \u03b4e = \u03b4e(H). Due to the previous discussions\nit is clear that Theorem 2 is equivalent to the following theorem.\nTheorem 8. A triangle-free graph H with \u03b4e(H) \u2265 5 has a dominating system with at\nmost (e(H)\u2212 3)\/(\u03b4e(H)\u2212 1) elements unless H is isomorphic to K1,e(H).\nWe will now concentrate on determining (in polynomial time) a sharp dominating sys-\ntem, i.e., one that satisfies the upper bound of Theorem 8. We first deal with the case\nthat H is a tree. In this case we can even determine a minimum dominating system in\npolynomial time.\n5\nStep 3: compute minimum dominating systems for trees\nHere we present a polynomial time algorithm for computing the number of elements in a\nminimum dominating system of any given tree. We use the following new terminology.\nA minimum dominating system, or shortly, an m-system of a graph H is a dominating\nsystem ofH with the smallest number of elements. We denote such a system byM(H),\nand its number of elements bym(H). IfH does not allow a dominating system we write\nm(H) =\u221e.\nA vertex with degree 1 in a graph F is called an end vertex or leaf of F . An edge\nwhich is incident with a leaf is called a pendant edge. We say that we add a pendant\nedge to F if we add a new vertex to F and join it to precisely one of the vertices of F .\nTwo edges are called independent if they do not share any end vertices. A matching is\na set of mutually independent edges.\nWe write Hq(w) to denote a tree H that contains a vertex w to which we added\nq new pendant edges. Note that H0(w) = H . Let H1, . . . ,Hp be a set of p mutually\nvertex-disjoint trees, where each Hi contains a vertex wi. We say that we have joined\ntrees H1, . . . ,Hp in w1, . . . , wp by u if we add a new vertex u with edges uwi for\ni = 1, . . . , p. If p = 0, then the resulting tree H(u) is the single vertex u, which has\na dominating system of 0 elements by definition. Before we present our algorithm we\nfirst deduce a number of equations. Note that m(H1(w)) =\u221e if H = ({w}, \u2205).\nLemma 1. Let w1, . . . , wp be a set of p vertices belonging to mutually disjoint trees\nH1, . . . ,Hp, respectively. Let H(u) be the tree obtained after joining H1, . . . ,Hp in\nw1, . . . , wp by u. Then m(H(u)) =\uf8f1\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f2\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f3\n0 if p = 0\np\u2211\ni=1\nm(H1(wi)) if p \u2208 {1, 2}\nmin\n{ p\u2211\ni=1\nm(H1(wi)),\n1 + min\ni1<i2<i3\n{ 3\u2211\nj=1\nm(Hij ) +\n\u2211\ni\/\u2208{i1,i2,i3}\nmin{m(Hi),m(H1(wi)}\n}}\nif p \u2265 3.\nProof. We prove each case separately.\n\u2022 Let p = 0. Then H(u) = ({u}, \u2205). So, m(H(u)) = 0 by definition of a dominating\nsystem.\n\u2022 Let 1 \u2264 p \u2264 2. Then, in any dominating system of H(u), u is not a star center,\nand consequently, each wi is the center of a star containing the edge uwi. Note that in\neach tree H1(wi), wi is a star center (because the new pendant edge to wi needs to be\ncovered by a star). Hence, we can combine any m-systemsM1(wi) of each H1(wi) to\nobtain an m-systemM(H(u)) with\u2211pi=1m(H1(wi)) elements.\n\u2022 Let p \u2265 3. First consider the set of dominating systems of H(u) in which u is not a\nstar center. In all these dominating systems, each wi is the center of a star containing\nthe edge uwi. Similar to the previous case, we can combine any m-systems of each\n6\nH1(wi) to obtain a dominating system S of H(u) with\n\u2211p\ni=1m(H\n1(wi)) elements.\nWe note that S has the minimum number of elements over all dominating systems of\nH(u) in which u is not a star center.\nSecondly, consider the set of dominating systems ofH(u) in which u is a star center.\nIn all these dominating systems, the star with center u contains at least three edges, say\nuwi1 , uwi2 , and uwi3 , by definition of a dominating system. For the remaining edges\nuwi we act as follows. In each dominating system of H(u) that has a star with center\nu, such an edge uwi either belongs to the star with center u, or else to the star with\ncenter wi. We compute an m-system M(Hi) and an m-system M(H1(wi)). Then\nwe choose the one with the smallest number of elements, which we denote by M\u2217i .\nSo, |M\u2217i | = min{m(Hi),m(H1(w1)}. We now combine the m-systems of Hij for\nj = 1, 2, 3, together with the dominating systemsM\u2217i and a star that contains the edges\nuwij for j = 1, 2, 3 plus possibly some more edges depending on our choice for each\nM\u2217i . We try all possible triples (i1, i2, i3), and choose the combination with the smallest\ntotal number of elements. This way we obtain a dominating system S \u2032 of H(u) that has\n1 + min\ni1<i2<i3\n{ 3\u2211\nj=1\nm(Hij ) +\n\u2211\ni\/\u2208{i1,i2,i3}\nmin{m(Hi),m(H1(wi)}\n}\nelements. We note that S \u2032 has the minimum number of elements over all dominating\nsystems of H(u) in which u is a star center.\nFinally, we compare the numbers of elements of S and S \u2032, and we choose (the) one\nwith the smallest number of elements. This yields an m-systemM(H(u)). uunionsq\nUsing Lemma 1 we can prove the following theorem.\nTheorem 9. The problem of finding a minimum dominating system is polynomially\nsolvable for the class of trees.\nProof. Let H be a tree with a designated vertex v0. We partition V (H) into L0 \u222a L1 \u222a\n. . . \u222a Lr such that for i = 0, . . . , r, Li is the set of vertices at distance i from v0.\nNote that L0 = {v0}. For v \u2208 V (H)\\{v0}, we let v+ \u2208 N(v) be the first vertex on\nthe (unique) path from v to v0 in H , and we let the subtree Hv be the component of\nH \u2212 vv+ that contains v.\nNow let v \u2208 V (H). Suppose v has neighbors w1, . . . , wp in Hv . Then Hv is ob-\ntained after joining the p mutually disjoint trees Hw1 , . . . ,Hwp in w1, . . . , wp by v.\nSuppose we have already computed the values m(Hwi) and m(H\n1\nwi(wi)). Then, using\nLemma 1, we can easily computem(Hv). We observe that the treeH1v (v) is obtained af-\nter joining the treesHwi , . . . ,Hwp together with a new single vertex tree ({wp+1}, \u2205) in\nw1, . . . , wp+1 by v. Hence, we can use Lemma 1 to computem(H1v (v)) as well. So, our\nstrategy is to recursively compute the values m(Hv) and m(H1v (v)): for i = 1, . . . , r,\nwe first compute the values m(Hvi) and m(H1vi(v\ni)) for all vi \u2208 Li, and use them to\ncompute m(Hvi\u22121) and m(H1vi\u22121(v\ni\u22121)) for all vi\u22121 \u2208 Li\u22121 according to Lemma 1.\nClearly, computing m(H) this way can be done in polynomial time.\nIn order to find an m-systemM(H), we keep track of the stars as follows. Firstly,\nfor each v \u2208 V (H), we remember whether v is a star center in an m-system of Hv\n7\nwhen we compute m(Hv). In case v is the center of a star Sv , we keep track of the\nedges in Sv as well. Secondly, we check whether v becomes the center of a star Sv\n(and which edges belong to Sv if Sv exists) both when we compute m(Hv+) and when\nwe compute m(H1v+(v\n+)). Note that we can do this in polynomial time when we use\nthe formula in Lemma 1. With the above information we can efficiently compute an\nm-systemM(H), as the following claim shows.\nClaim. For all v in each Li we can compute in polynomial time whether v is the center\nof a star Sv of an m-systemM(H) and, if so, which edges of H belong to Sv .\nWe prove this claim by induction on i. Let i = 0. When we computed the value for\nm(Hv0) = m(H) by using Lemma 1, we checked whether v0 is the center of a star\nin an m-system of H . In case v0 is the center of such a star Sv0 , we also remembered\nwhich edges belong to Sv0 .\nNow suppose i \u2265 1. Let v \u2208 Li. By the induction hypothesis, we know whether v+\nis the center of a star in an m-systemM(H) or not. First suppose v+ is not the center\nof a star in an m-systemM(H). Then v is the center of a star Sv inM(H), and Sv is\na star in an m-systemM(H1v (v)) as well. So, we kept track of Sv . Now suppose v+ is\nthe center of a star Sv+ in an m-systemM(H). By the induction hypothesis, we know\nwhich edges Sv+ has. Then there are two cases: either vv+ belongs to Sv+ , or it does\nnot. If vv+ belongs to Sv+ , then v is the center of a star Sv inM(H) if and only if Sv\nis a star inM(Hv). If vv+ does not belong to Sv+ , then v is the center of a star Sv in\nM(H), and Sv is a star in an m-systemM(H1v (v)). In both cases we kept track of all\nthe edges of Sv . uunionsq\nStep 4: compute sharp dominating systems for general triangle-free graphs\nSuppose G is a claw-free graph. Let H be the preimage of cl(G), i.e., the triangle-free\ngraph with L(H) = cl(G). We now assume that H is not a tree. If H is a forest we\napply Theorem 9 on each of its components, which are trees. Below we discuss the case\nin which H is not a forest but contains one or more circuits.\nThe key idea behind our approach in this case is to start with an even subgraph\nX of H , then to \u201cbreak\u201d the circuits in X by removing a number of edges, such that\nwe obtain a new graph H\u2217 that is a forest. Then we can apply our approach from the\nprevious section to each component of H\u2217 if we first add sufficiently many pendant\nedges to ensure that each component has minimum edge-degree at least \u03b4e(H). In this\nprocedure we have to add more edges than we remove. However, we will have the\nfollowing advantage. The added pendant edges have to be dominated by (extra) stars\nin any dominating system of H\u2217, and these stars can be merged together into fewer\nelements of a dominating system in the original graph H . In other words, the larger\nnumber of stars we get by applying the upper bounds to H\u2217 will provide the necessary\ncompensation for the larger number of edges that we created. This way we are able to\nestablish our upper bound for H . In [1] we gave a nonconstructive proof to show that\nthis approach works. This proof in [1] was based on a number of assumptions on the\nchoice of the even subgraph X of H . Here we follow an alternative approach which\nenables a constructive proof.\n8\nLet X be an even subgraph of H with set of components C. For each C \u2208 C we\ndo as follows. First suppose C is isomorphic to a complete bipartite graph K2,2k for\nsome k \u2265 1. Let A(C) = {s, t} and B(C) = {s1, s2, . . . , s2k} be the partition classes\nof C. If k = 1, we choose edges ss1 and ts2. If k \u2265 2, we choose the 2k edges\nssi (i = 1, . . . , 2k). If C is not isomorphic to some K2,2k, we choose at most one\n(arbitrary) edge from C. We call the set of all chosen edges an X-set and denote it by\nM . Let H\u2217 = (H \u2212 E(X)) \u222aM . We call H\u2217 an X-graph of H .\nLemma 2. Let H be a triangle-free graph that is not a forest. We can compute in poly-\nnomial time an X-graph of H that is a forest.\nProof. We present the following polynomial time algorithm that has H as input and\nthat outputs an X-graph of H that is a forest.\nCREATE-A-FOREST\nPhase 1. Construct an even subgraph X \u2032 of H by adding mutually edge-disjoint cycles\nto X \u2032 until this is not possible anymore.\nPhase 2. Choose an X \u2032-set M \u2032 and check whether its X \u2032-graph H \u2032 is a forest. If H \u2032 is\na forest, output H \u2032. If not go to Phase 3.\nPhase 3. Let D be a cycle in H \u2032. Let C\u2217 be the set of circuits of X \u2032 that share an edge\nwith D. Consider each C \u2208 C\u2217.\nCase 1. C shares exactly one edge e with D.\nRemove e from X \u2032 \u222aD.\nCase 2. C is isomorphic to some K2,2k and shares exactly two edges e, e\u2032 with D.\nLet A(C) = {s, t} and B(C) = {s1, s2, . . . , s2k} be the partition classes of C.\nIf k = 1, then we may without loss of generality assume e = ss1 and e\u2032 = ts2.\nRemove ss2 and ts1 from X \u2032 \u222aD.\nIf k = 2, then we may without loss of generality assume e = ss1 and e\u2032 = ss2.\nRemove ss1 and ss2 from X \u2032 \u222aD.\nAfter dealing with all circuits in C\u2217, we have obtained a subgraph Y \u2032 of X \u2032 \u222aD. Go to\nPhase 2 with Y \u2032 instead of X \u2032.\nIn order to show that this algorithm is correct and runs in polynomial time, we start with\nmaking four observations. First, a set C\u2217 in Phase 3 is nonempty, as otherwise X \u2032 \u222aD\nwould be an even subgraph of H with more edges than X \u2032. Second, by definition of an\nX-set, Case 1 and Case 2 are the only cases we have to consider in Phase 3. Third, by\nthe construction, a subgraph Y \u2032 obtained in Phase 3 is indeed an even subgraph of H ,\nand fourth, |V (Y \u2032)| \u2265 |V (X \u2032)| as we did not remove any vertices from X \u2032 \u222a D. We\nclaim that either Y \u2032 contains fewer components than X \u2032 or else |V (Y \u2032)| > |V (X \u2032)|.\nAs each phase is performed in polynomial time, the algorithm will then terminate in\npolynomial time with as output some X-graph H\u2217 that is a forest.\nThe above claim can be verified as follows. Suppose Y \u2032 does not contain fewer\ncomponents. We observe that all vertices of D belong to the same circuit of Y \u2032. As\nC\u2217 6= \u2205, we then find that Y \u2032 cannot contain more components than X \u2032. Hence Y \u2032 must\nhave the same number of components as X \u2032. This means that |C\u2217| = 1, say C\u2217 = {C}\n9\nand that there are no components of X \u2032 that only share vertices with D. If C shares\nonly one edge with D, then |V (Y \u2032)| > |V (X \u2032)| as |D| \u2265 4. In the other case, C is\nisomorphic to some K2,2k and shares (exactly) two edges with D. Suppose k = 1. If\nD contains exactly four edges, then D is a four-cycle on the same four vertices as C.\nThen H contains an induced K4. As H is triangle-free, this is not possible. Hence, D\ncontains more than four edges. This implies that |V (Y \u2032)| > |V (X \u2032)|. Finally, suppose\nk \u2265 2. In that case, C shares two vertices with D that have a common end-vertex.\nHence, also here we find that |V (Y \u2032)| > |V (X \u2032)| as |D| \u2265 4. uunionsq\nNote that the above result implicitly implies that we can not only compute the desired\nX-graph H\u2217 of H in polynomial time but also the corresponding even subgraph X .\nTheorem 10. Let H be a triangle-free graph not isomorphic to K1,e(H) such that\n\u03b4e(H) \u2265 5. Then a dominating system of H with at most (e(H) \u2212 3)\/(\u03b4e(H) \u2212 1)\nelements can be found in polynomial time.\nProof. Let H be a triangle-free graph that is not isomorphic to K1,e(H) and that has\nd = \u03b4e(H) \u2265 5. Recall that we can apply Theorem 9 on each component of H if H is\na forest. This way we even get a minimum dominating system of H , which satisfies the\ndesired upper bound due to Theorem 8.\nSuppose H is not a forest. By Lemma 2, we compute in polynomial time an X-\ngraph H\u2217 of H that is a forest. It can happen that H\u2217 does not have minimum edge\ndegree at least d. In the proof of Theorem 8 of [1], we therefore modifiedH\u2217 into a new\nforest H \u2032 by adding some new pendant edges and removing some vertices. This proof\ncan be rewritten in constructive form. In order to show the polynomial upper bound\non the running time we include this algorithm, called COMPUTE-A-DOMINATING-\nSYSTEM, below. It has as input H together with X as computed by Lemma 2. From\nits description it will be directly clear that it runs in polynomial time indeed. For its\ncorrectness we refer to [1].\nWe first give some terminology. Let V1(H) be the degree one vertices ofH and C be\nthe set of circuits of X . For each C \u2208 C we partition V (C) into two sets I(C) \u222a J(C),\nwhere I(C) denotes the set of vertices in C that are only adjacent to vertices in V (C)\u222a\nV1(H) and J(C) denotes the set V (C)\\I(C). Note that J(C) = \u2205 for some C \u2208 C\nimplies that the component of H containing C consists of vertices of V (C) \u222a V1(H)\nonly. Our algorithm makes use of a subroutine called ADD-AND-REMOVE. The latter\nalgorithm considers each circuit in C and decides which vertices of C should be deleted\nand to which vertices new pendant edges should be added. We give its description after\npresenting the main algorithm.\nCOMPUTE-A-DOMINATING-SYSTEM\nLet C\u2032 = {C \u2208 C | J(C) = \u2205}. If C\u2032 = C then output C. Otherwise, delete the\ncomponents that contain the circuits in C\u2032 from H , and perform the algorithm ADD-\nAND-REMOVE on each C \u2208 C\\C\u2032. Denote the resulting forest by H \u2032.\nApply Theorem 9 on each component of H \u2032 in order to obtain a minimum dominating\nsystem S \u2032 of H \u2032.\n10\nLet S \u2032(C) be the set of stars that dominate the remaining vertices of C in S \u2032. For each\nC \u2208 C replace the stars in S \u2032(C) by C. Keep all other elements of S \u2032. Add C\u2032. Output\nthe resulting dominating system S.\nBelow we state the algorithm ADD-AND-REMOVE that has as input a circuit C \u2208 C\nwith J(C) 6= \u2205. For convenience, we write I = I(C) and J = J(C). Furthermore, let\nd\u2217(u) denote the number of edges incident with a vertex u \u2208 I in the subgraph of H\nobtained from H[V (C) \u222a V1(H)] after removing E(C). Let J\u2217 be the subset of J that\nconsists of all vertices u with d\u2217(u) \u2265 d.\nADD-AND-REMOVE\nCase 1. J\u2217 6= \u2205.\nRemove all edges of C and all vertices of I together with their possible neighbors\nin V1(H). To each u \u2208 J\u2217 add one new pendant edge, and to each u \u2208 J\\J\u2217 add\nd\u2212 d\u2217(u) + 1 new pendant edges.\nCase 2. J\u2217 = \u2205 and |J | = 1.\nLet J = {u}. Remove all vertices of C except u. Add d new pendant edges to u.\nCase 3. J\u2217 = \u2205 and |J | \u2265 2.\nLet u1, u2 \u2208 J . Let v1, v2 be two vertices inC such that u1v1 and u2v2 are independent.\nCase 3a. C = u1v1u2v2u1.\nRemove u1v2 and v1u2. For each u \u2208 C, add d\u2212 d(u) + 2 new pendant edges.\nCase 3b. |C| \u2265 5 and v1, v2 \u2208 I .\nRemove all edges of C and all vertices of I together with their possible neighbors in\nV1(H). Add d\u2212 d\u2217(u) + 1 new pendant edges to each u \u2208 J .\nCase 3c. |C| \u2265 5 and v1 \u2208 I, v2 \u2208 J .\nRemove all edges of C except u1v1. Remove all vertices of I together with their possi-\nble neighbors in V1(H). Add d\u2212d\u2217(u)+1 new pendant edges to each u \u2208 J\\{u1, v1}.\nAdd d\u2212 d\u2217(u) new pendant edges to u \u2208 {u1, v1}.\nCase 3d. |C| \u2265 5 and v1 \u2208 J, v2 \u2208 I .\nAct as in Case 3c with the roles of v1 and v2 reversed.\nCase 3e. |C| \u2265 5 and v1, v2 \u2208 J .\nCase 3e-1. I 6= \u2205.\nLet y \u2208 I be such that there exists a path P from u1 to y in C that besides y only uses\nvertices from J . Let x be the neighbor of y on P . If x \/\u2208 {u2, v2} return to Case 3c with\nvertices x, y in the role of u1, v1, respectively. If x \u2208 {u2, v2} return to Case 3c with\nvertices x, y in the role of u2, v2, respectively.\nCase 3e-2. I = \u2205 and C has an edge u3v3 independent from u1v1 and u2v2.\nIf d = 5 add three and if d = 6 add four new pendant edges to each u \u2208 C. If d \u2265 7\nremove all edges of C except u1v1, add d \u2212 d\u2217(u) + 1 new pendant edges to each\nu \u2208 C\\{u1, v1} and d\u2212 d\u2217(u) new pendant edges to u \u2208 {u1, v1}.\nCase 3e-3. I = \u2205 and C is a five-cycle.\nWrite C = x1x2x3x4x5x1. Remove all edges from C except x1x2. Add d\u2212 d(xi) + 2\nnew pendant edges for i = 1, 2 and d\u2212 d(xi) + 3 new pendant edges for i = 3, 4, 5.\n11\nCase 3e-4. I = \u2205 and C is isomorphic to K2,2k for some k \u2265 2.\nLet A(C) = {s, t} and B(C) = {s1, . . . , s2k} be the partition classes of C. Remove\nall edges tsi of E(C) for i = 1, . . . , 2k. Add d\u2212d(t)+2k+1 new pendant edges to t.\nAdd d\u2212d(si)+2 new pendant edges to each si for i = 1, . . . , 2k. To s add d\u2212d(s)+1\nnew pendant edges if d(s) \u2264 d or one new pendant edge if d(s) \u2265 d+ 1.\nuunionsq\nStep 5: translate the dominating systems back into 2-factors\nOnce we have obtained a dominating system S for the preimage graph H with cl(G) =\nL(H), it is easy to translate this back into a 2-factor of cl(G) in polynomial time:\n\u2013 the stars in S correspond to complete graphs in cl(G) on at least three vertices; a\nhamiltonian cycle can clearly be constructed in polynomial time;\n\u2013 the circuits in S and the edges they dominate correspond to hamiltonian subgraphs\nin cl(G); one can construct a hamiltonian cycle by traversing the circuit, picking\nup the edges (vertices in cl(G)) one by one and inserting dominated edges at the\nfirst instance an end vertex of a dominated edge is encountered. For traversing\nthe circuits we use the polynomial algorithm that finds a eulerian tour in an even\nconnected graph (cf. [4]).\nStep 6: translate 2-factors in cl(G) to 2-factors in G\nWe first introduce some notations. Let C = v1v2 . . . vpv1 be a cycle with a fixed orien-\ntation. The successor vi+1 of vi is denoted by v+Ci = v\n+\ni and its predecessor vi\u22121 by\nv\u2212Ci = v\n\u2212\ni . The segment vivi+1 . . . vj is denoted by vi\n\u2212\u2192\nCvj , where the subscripts are\nto be taken modulo |C|. The converse segment vjvj\u22121 . . . vi is denoted by vj\u2190\u2212Cvi. We\nuse similar notations for paths.\nWe assume we are given a 2-factor F \u2032 of cl(G) of a claw-free graph G. Let k be\nthe number of components of F \u2032. Here, we show how to obtain in polynomial time\na 2-factor F of G such that F has at most k components. We base our translation of\nthe following new theorem, which generalizes a similar result for hamiltonicity [2] in\nalgorithmic sense.\nTheorem 11. LetG be a graph and let {u, v, x, y} be a subset of four vertices of V (G)\nsuch that uv 6\u2208 E(G) and {x, y} \u2286 N(u) \u2229N(v). Let N(x) \u2286 N(u) \u222aN(v) \u222a {u, v}\nand let N(y) \\ (N(x)\u222a {x}) induce a complete graph (or be empty). Then we can find\na 2-factor of G with at most k components in polynomial time, if G+ uv has a 2-factor\nwith k components.\nProof. Suppose G + uv has a 2-factor F \u2032 with at most k components. Below we give\na number of polynomial time transformations of F \u2032 such that we obtain a 2-factor F\nof G with at most k components. If uv \/\u2208 E(F \u2032) then F \u2032 is a 2-factor of G. Suppose\nuv \u2208 E(D) for some (cycle) component D of F \u2032, say v = u\u2212. Let P = u\u2212\u2192Dv. We\ndistinguish the following three cases.\n12\nFirst suppose x \/\u2208 V (D). Let x \u2208 V (D\u2032) for some (cycle) component D\u2032 of F . By\nour assumptions, we may without loss of generality assume that x+D\n\u2032\nu \u2208 E(G). Then\nwe replace D and D\u2032 by a new cycle ux+D\n\u2032\u2212\u2192\nD\u2032xv\n\u2190\u2212\nP u, and we are done.\nSecond suppose x \u2208 V (D) but y \/\u2208 V (D). Let y \u2208 V (D\u2217) for some (cycle)\ncomponent D\u2217 of F . Let y\u2032 = y+D\n\u2217\nand y\u2032\u2032 = y\u2212D\n\u2217\nbe the neighbors of y on D\u2217.\nSuppose y\u2032y\u2032\u2032 \u2208 E(G). Then we replace D\u2217 by y\u2032\u2212\u2192D\u2217y\u2032\u2032y\u2032 and D by uyv\u2190\u2212P u, and we\nare done. Suppose y\u2032y\u2032\u2032 \/\u2208 E(G). Since N(y)\\(N(x)\u222a{x}) induces a complete graph,\nwe find that one of the edges xy\u2032, xy\u2032\u2032, say xy\u2032, must exist in G. By our assumptions,\nwe then find that y\u2032u or y\u2032v belongs to E(G), and we are done by the same argument\nas in the previous case.\nThird suppose {x, y} \u2282 V (D). Say x is on u\u2212\u2192P y. First suppose xy \u2208 E(D). We\nreplace D by u\n\u2212\u2192\nP xv\n\u2190\u2212\nP yu, and we are done. Now suppose xy \/\u2208 E(D). Then x+ 6= y.\nBy our assumptions, x+ \u2208 N(u) \u222a N(v). Suppose ux+ \u2208 E(G). We replace D by\nux+\n\u2212\u2192\nP vx\n\u2190\u2212\nP u. Hence we may assume vx+ \u2208 E(G). Suppose y\u2212 = x+. Then we\nreplace D by uy\n\u2212\u2192\nP vy\u2212\n\u2190\u2212\nP u. Hence we may assume y\u2212 6= x+. Suppose y\u2212x \u2208 E(G).\nThen we replace D by u\n\u2212\u2192\nP xy\u2212\n\u2190\u2212\nP x+v\n\u2190\u2212\nP yu. Hence we may assume y\u2212x \/\u2208 E(G).\nSuppose y+ = v. Then we replace D by u\n\u2212\u2192\nP xvx+\n\u2212\u2192\nP yu. Hence we may assume y+ 6=\nv. Suppose y+x \u2208 E(G). Then we replace D by u\u2212\u2192P xy+\u2212\u2192P vx+\u2212\u2192P yu. Hence we may\nassume y+x \/\u2208 E(G). As y\u2212x \/\u2208 E(G), we then find y\u2212y+ \u2208 E(G) due to our\nassumptions. Then we replace D by u\n\u2212\u2192\nP y\u2212y+\n\u2212\u2192\nP vyu. This proves Theorem 11. uunionsq\nNote that in Theorem 11, x and y can be nonadjacent, and G does not have to be claw-\nfree. However, the following observation is easy to see.\nObservation 1 ([2]) If G is claw-free, then the conditions of Theorem 11 are satisfied\nif x and y are adjacent.\nThen, by the following observation, we can indeed transform a 2-factor of cl(G) that\nhas k components to a 2-factor ofG that has at most k components. This means we have\nproven our main result. For convenience we include the proof of the next observation.\nObservation 2 ([2]) Let x be a vertex of a claw-free graph G with G[N(x)] connected\nand non-complete. Then the local completion of G at x can be obtained by iteratively\njoining pairs {u, v} \u2286 N(x) that satisfy the conditions in Theorem 11 for some y \u2208\nN(u) \u2229N(v).\nProof. Consider the subgraph Hx of G induced by N(x) \u222a {a \u2208 V (G) | ab \u2208 E(G)\nfor some b \u2208 N(x)}. Note that x is a vertex of Hx and that Hx is claw-free. Hence,\nby Observation 1, x and y satisfy the conditions of Theorem 11 (in Hx) for every\ny \u2208 N(x). Since we only join nonadjacent pairs in N(x), N(x) and N(y) will keep\nthese properties for all y \u2208 N(x). uunionsq\nNote that the above approach gives a short constructive proof for Theorem 4 (the\nresult of Ryja\u00b4c\u02c7ek, Saito & Schelp in [19]).\nWe note that Theorem 9 has the following consequence as a byproduct. We need a\nfew definitions before we can state the result. A cut vertex of a graphG is a vertex whose\n13\nremoval increases the number of components. A block ofG is a maximal subgraph ofG\nwithout cut vertices (of itself). Hence if G has no isolated vertices, its blocks are either\nK2\u2019s or (maximal) 2-connected subgraphs. For the purpose of our next result we call\na block B of a claw-free graph G a semiclique if B becomes a complete subgraph of\ncl(G). Since a claw-free graph in which every block is a semiclique has a forest as its\npreimage, we obtain the following consequence of Theorem 9.\nCorollary 1. Let G be a claw-free graph in which all blocks are semicliques. If G has\na 2-factor, then we can construct a minimum 2-factor of G in polynomial time.\n4 Conclusions\nIn [1] we obtained sharp upper bounds for the minimum number of components of a 2-\nfactor in a claw-free graph. Here we extended these results by presenting a polynomial\nalgorithm that constructs a 2-factor of a claw-free graph with minimum degree at least\nfour whose number of components meets this bound. As a byproduct we showed that\nthe problem of obtaining a minimum 2-factor (if it exists) is polynomially solvable for a\nsubclass of claw-free graphs in which all blocks are semicliques. As another byproduct\nwe gave a short constructive proof for a result of Ryja\u00b4c\u02c7ek, Saito & Schelp.\nOur polynomial time algorithm yields a 2-factor with a number of components be-\nlow a guaranteed upper bound. This upper bound is completely determined by an upper\nbound we find for the number of elements of a dominating system of a certain tree (that\nis obtained from he corresponding triangle-free graph in Theorem 8). As this upper\nbound is sharp (cf. [20]), our next goal will be to determine the extremal tree cases and\ntry to exclude these from happening. This refined analysis may lead to a better upper\nbound for claw-free graphs for which the current upper bound is not sharp. Another\nway to improve our algorithm is trying to refine the algorithm that constructs the tree\nH\u2217 in Lemma 2 such that we have more information on the number of circuits in the\neven subgraph X of H .\nFinally, Corollary 1 shows that our algorithm yields a 2-factor with a minimum\nnumber of components for claw-free graphs with arbitrary minimum degree in which\nall blocks are semicliques. In future research we aim to generalize this result, i.e, to find\na larger class of claw-free graphs for which our (possibly modified) algorithm solves\nthe problem of finding a minimum 2-factor. We will also analyze the class of claw-free\ngraphs with minimum degree 3 that have a 2-factor more carefully.\nReferences\n1. H.J. Broersma, D. Paulusma and K. Yoshimoto, Sharp upper bounds for the minimum number\nof components of 2-factors in claw-free graphs, Graphs Combin., to appear.\nsee http:\/\/www.dur.ac.uk\/daniel.paulusma\/Papers\/Submitted\/claw.pdf\n2. H.J. Broersma and H. Trommel, Closure concepts for claw-free graphs, Discrete Math. 185\n(1998) 231\u2013238.\n3. S.A. Choudum and M.S. Paulraj, Regular factors in K1,3-free graphs, J. Graph Theory 15\n(1991) 259\u2013265.\n14\n4. R. Diestel, Graph Theory, Second edition, Graduate Texts in Mathematics 173, Springer\n(2000).\n5. Y. Egawa and K. Ota, Regular factors in K1,n-free graphs, J. Graph Theory 15 (1991) 337\u2013\n344.\n6. R.J. Faudree, O. Favaron, E. Flandrin, H. Li, Z. Liu, On 2-factors in claw-free graphs, Discrete\nMath. 206 (1999) 131\u2013137.\n7. R. Faudree, E. Flandrin, and Z. Ryja\u00b4c\u02c7ek Claw-free graphs\u2014a survey, Disc. Math. 164 (1997)\n87\u2013147.\n8. D. Fronc\u02c7ek, Z. Ryja\u00b4c\u02c7ek, and Z. Skupien\u00b4, On traceability and 2-factors in claw-free graphs,\nDiscussiones Mathematicae Graph Theory 24 (2004) 55\u201371.\n9. M.R. Garey and D.S. Johnson, Computers and Intractability. W.H. Freeman and Co., New\nYork, 1979.\n10. R. Gould and E. Hynds, A note on cycles in 2-factors of line graphs, Bull. of ICA. 26 (1999)\n46\u201348.\n11. R.J. Gould and M.S. Jacobson, Two-factors with few cycles in claw-free graphs, Discrete\nMath. 231 (2001) 191\u2013197.\n12. F. Harary, Graph Theory, Addison-Wesley, Reading MA, 1969.\n13. B. Jackson and K. Yoshimoto, Even subgraphs of bridgeless graphs and 2-factors of line\ngraphs, Discrete Math. 307 (2007) 2775\u20132785.\n14. L. Lovasz and M.D. Plummer, Matching Theory, North-Holland Mathematics Studies 121,\nNorth-Holland, Amsterdam.\n15. M.M. Matthews and D.P. Sumner, Hamiltonian results in K1,3-free graphs, J. Graph Theory\n8 (1984) 139\u2013146.\n16. M.D. Plummer, Graph factors and factorization: 1985-2003: A survey, Discrete Math. 307\n(2007) 791\u2013821.\n17. N.D. Roussopoulos, A max{m,n} algorithm for determining the graph H from its line\ngraph G, Information Processing Letters 2 (1973) 108-112.\n18. Z. Ryja\u00b4c\u02c7ek, On a closure concept in claw-free graphs, J Combin Theory Ser B 70 (1997)\n217\u2013224.\n19. Z. Ryja\u00b4c\u02c7ek, A. Saito and R.H. Schelp, Closure, 2-factor, and cycle coverings in claw-free\ngraphs, J. Graph Theory 32 (1999) 109\u2013117.\n20. K. Yoshimoto, On the number of components in a 2-factor of a claw-free graph, Discrete\nMath. 307 (2007) 2808\u20132819.\n15\n"}