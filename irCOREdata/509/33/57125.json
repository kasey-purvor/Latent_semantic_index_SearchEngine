{"doi":"10.1002\/spip.280","coreId":"57125","oai":"oai:eprints.lincoln.ac.uk:81","identifiers":["oai:eprints.lincoln.ac.uk:81","10.1002\/spip.280"],"title":"Agent-based simulation of open source evolution","authors":["Smith, N.","Capiluppi, A.","Ramil, J.F."],"enrichments":{"references":[{"id":18432767,"title":"2004a, \u201cStructural Evolution of An Open Source System: A Case Study\u201d,","authors":[],"date":"2004","doi":"10.1109\/wpc.2004.1311059","raw":"Capiluppi A., Morisio M. & Ramil J.F., 2004a, \u201cStructural Evolution of An Open Source System: A Case   Study\u201d,   Proceedings   of   the   12th   International   Workshop   on   program Comprehension(IWPC), June 24-26, 2004, Bari, Italy, pp. 172 - 182 .","cites":null},{"id":18432773,"title":"A complexity measure,","authors":[],"date":"1976","doi":"10.1109\/tse.1976.233837","raw":"McCabe TJ, A complexity measure, 1976, IEEE Transactions on Software Engineering, SE-2 (1976) pp. 308-320.","cites":null},{"id":18432782,"title":"A Reference Model for the Smooth Growth of Software Systems,","authors":[],"date":"1996","doi":"10.1109\/tse.2002.1027802","raw":"Turski W.M., 1996, A Reference Model for the Smooth Growth of Software Systems, IEEE Trans.","cites":null},{"id":18432781,"title":"A Study of Open Source Software Evolution Data using Qualitative Simulation,","authors":[],"date":"2005","doi":"10.1002\/spip.230","raw":"Smith N., Capiluppi A., Ramil J.F., 2005, A Study of Open Source Software Evolution Data using Qualitative Simulation, Software Process Improvement and Practice 10: 287-300.Sommerville I, 2001, Software Engineering, 6th Ed., Addison-Wesley, Wokingham, UK.","cites":null},{"id":18432772,"title":"Agent-Based Modeling of Open Source using Swarm\u201d,","authors":[],"date":"2002","doi":null,"raw":"Madey GR, Freeh VW, Tynan RO, 2002, \u201cAgent-Based Modeling of Open Source using Swarm\u201d, Proc. of Americas Conference on Information Systems (AMCIS 2002), Dallas, Texas, August.","cites":null},{"id":18432771,"title":"Available from links at: http:\/\/w3.umh.ac.be\/evol\/publications.html of October","authors":[],"date":"1985","doi":null,"raw":"Lehman M. M. and Belady L 1985; Program Evolution \u2013 Processes of Software Change, Acad. Press, London, 1985. Available from links at: http:\/\/w3.umh.ac.be\/evol\/publications.html <as of October 2005> Lehman M.M., 2000a, \u201cApproach to a Theory of Software Process and Software Evolution\u201d, FEAST 2000 Workshop, Imp. Col., 10- 12 Jul. 2000, also as Res. Rep. 2000\/2, Dept. of Comp., Imp. Col., Feb. 2000 http:\/\/www.doc.ic.ac.uk\/~mml\/feast2\/papers\/pdf\/645.pdf <as of October 2005> Lehman M.M., 2000b, \u201cRules and Tools for Software Evolution Planning and Management\u201d, FEAST 2000 Workshop., Imp. Col., 10-12 Jul. 2000, also as Tech. Report, 2000\/14 Nov. 2000, Imp. Col., Dept. of Comp, http:\/\/www.doc.ic.ac.uk\/~mml\/feast2\/papers\/pdf\/611_2.pdf <as of October 2005> Lehman MM and Stenning V., 1996, \u201cFEAST\/1 Proposal Part 2, Case for Support\u201d, EPSRC proposal,   Computing   Dept.   Imperial   College   London,   1996, http:\/\/www.doc.ic.ac.uk\/~mml\/feast2\/case96-2.html <as of Oct 2005> Lehman MM, Kahen G and Ramil JF, 2002, Behavioural Modelling of Long lived Evolution Processes\u2013 Some Issues and an Example, J. of Software Maintenance and Evolution 14: 335 \u2013 Madhavji N, Lehman M, Perry D, Ramil JF, (eds), 2006, Software Evolution and Feedback, Wiley, 2006.","cites":null},{"id":18432780,"title":"Complex Systems Modeling\u201d, Indiana University and Los Alamos National Laboratory, http:\/\/informatics.indiana.edu\/rocha\/complex\/csm.html of Oct","authors":[],"date":"2003","doi":null,"raw":"Rocha,   2003   \u201cComplex   Systems   Modeling\u201d,   Indiana   University  and   Los   Alamos   National Laboratory, http:\/\/informatics.indiana.edu\/rocha\/complex\/csm.html <as of Oct 2005> Scacchi W, 2006, Article on the evolution of open source software to appear as a book chapter in Madhavji et al. (2006).","cites":null},{"id":18432774,"title":"Design Complexity Measurement and Testing,","authors":[],"date":"1989","doi":"10.1145\/76380.76382","raw":"McCabe TJ and Butler CW, 1989, Design Complexity Measurement and Testing, Communications of the ACM 32(12): 1415 \u2013 1425 Mens T Ramil JF, and Godfrey M, 2004, Analyzing the Evolution of Large-scale Software: Guest Editorial. Journal on Software Maintenance and Evolution 16(6): 363-365.","cites":null},{"id":18432776,"title":"http:\/\/ccl.northwestern.edu\/netlogo\/ < as of Oct","authors":[],"date":"2005","doi":null,"raw":"NetLogo, 2005, http:\/\/ccl.northwestern.edu\/netlogo\/ < as of Oct 2005> Rajlich VT and Bennett KH, 2000, A Staged Model for the Software Life Cycle, IEEE Computer 33(7): 66 \u2013 71.","cites":null},{"id":18432765,"title":"Metrics and Analysis of Software Architecture Evolution with Discontinuity\u201d,","authors":[],"date":"2002","doi":"10.1145\/512058.512059","raw":"Aoyama M, 2002, \u201cMetrics and Analysis of Software Architecture Evolution with Discontinuity\u201d, Proc. 5th Intl. Workshop on Principles of Software Evolution, IWPSE 2002, Orlando, FL: 103 \u2013 Box G.E.P et al, Statistics for Experimenters, An Introduction to Design, Data Analysis and Model Building, Wiley, 1978 Brooks F, 1995, The Mythical Man-Month: Essays on Software Engineering, 20th Anniversary Ed., Addison-Wesley.","cites":null},{"id":18432766,"title":"Models for the Evolution of OS Projects\u201d,","authors":[],"date":"2003","doi":"10.1109\/icsm.2003.1235407","raw":"Capiluppi A., 2003, \u201cModels for the Evolution of OS Projects\u201d, Proc. ICSM, Amsterdam, 22 \u2013 26 Sept. 2003, pp. 65 - 74.","cites":null},{"id":18432769,"title":"Populating a Release History Database from Version Control and Bug Tracking Systems\u201d,","authors":[],"date":"2003","doi":"10.1109\/icsm.2003.1235403","raw":"Fischer M, Pinzger M and Gall H 2003, \u201cPopulating a Release History Database from Version Control and Bug Tracking Systems\u201d, Proc. ICSM 2003, 22-26 Sept, Amsterdam,: 23 \u2013 32 Herraiz I, 2005, \u201cThe Evolution of Large Open Source Software\u201d, research seminar, Computing Dept., The Open University, Milton Keynes, U.K., 28 July 2005.","cites":null},{"id":18432770,"title":"Programs, Cities, Students, Limits to Growth?\u201d, Inaugural Lecture,","authors":[],"date":"1974","doi":"10.1007\/978-1-4612-6315-9_6","raw":"Lehman  M.M., 1974, \u201cPrograms, Cities, Students, Limits to Growth?\u201d, Inaugural Lecture, in Imperial College of Science and Technology Inaugural Lecture Series, vol. 9, pp. 211 \u2013 229.","cites":null},{"id":18432777,"title":"Qualitative Simulation of Models of Software Evolution,","authors":[],"date":"2002","doi":"10.1002\/spip.158","raw":"Ramil J.F. & Smith N., 2002, Qualitative Simulation of Models of Software Evolution, Journal of Software Process: Improvement and Practice, 7: 95 \u2013 112.","cites":null},{"id":18432779,"title":"REsearch Links to Explore and Advance Software Evolution, http:\/\/labmol.di.fc.ul.pt\/projects\/release\/ of Oct.","authors":[],"date":"2005","doi":null,"raw":"RELEASE,   2005,   REsearch   Links   to   Explore   and   Advance   Software   Evolution, http:\/\/labmol.di.fc.ul.pt\/projects\/release\/ <as of Oct. 2005> Robles G., Merelo J.J., Gonzalez-Barahona J.M. 2005 \u201cSelf-Organized Development in Libre Software: a Model based on the Stigmergy Concept\u201d, ProSim 2005, St Louis, Missouri,May 21-23, 2005.","cites":null},{"id":18432764,"title":"Software Project Dynamics \u2013 An Integrated Approach,","authors":[],"date":"1991","doi":"10.1145\/69586.358135","raw":"Abdel-Hamid T.K., Madnick S.E., 1991, Software Project Dynamics \u2013 An Integrated Approach, Prentice Hall, Englewood Cliffs,, NJ: 263 pp Antoniades P., Samoladas I., Stamelos I., Bleris G.L., 2005, Dynamical simulation models of the Open   Source   Development   process.   In   Stefan   Koch   (ed.),   Free\/Open   Source   Software Development, Idea Group, Inc.","cites":null},{"id":18432778,"title":"The Cathedral and the Bazaar O'Reilly","authors":[],"date":"2001","doi":"10.5210\/fm.v3i2.578","raw":"Raymond, E. S., 2001 The Cathedral and the Bazaar O'Reilly Media Inc.","cites":null},{"id":18432768,"title":"The evolution of source folder structure in actively evolved open source systems\u201d,","authors":[],"date":null,"doi":"10.1109\/metric.2004.1357886","raw":"Capiluppi A., Morisio M. & Ramil J.F., 2004b, \u201cThe evolution of source folder structure in actively evolved open source systems\u201d, Proceedings of the 10th International Symposium on Software Metrics, Sept. 11-17, Chicago, Illinois, pp. 2 - 13 Capiluppi A., Faria A.E. & Ramil J.F., 2005, \u201cExploring the Relationship between Cumulative Change and Complexity in an Open Source Systems\u201d, 9th European Conference on Software Maintenance and Reengineering (CSMR), Manchester, UK, March 21-23, 2005 Dalle J.M., David P.A. 2004.  SimCode: Agent-based Simulation Modelling of Open-Source Software Development, available online at http:\/\/opensource.mit.edu\/papers\/dalledavid2.pdf <as of Feb. 2005> FEAST, 2005,  Feedback, Evolution And Software Technology, Dept. of Computing, Imperial College, http:\/\/www.doc.ic.ac.uk\/~mml\/feast\/ <as of Oct. 2005> Godfrey M and Tu Q, 2001, \u201cGrowth, Evolution and Structural Change in Open Source Software\u201d, Proc. of the 4th Intl. Workshop on the Principles of Software Evolution, Sept. 10-11, 2001, Vienna, Austria.","cites":null},{"id":18432783,"title":"The Reference Model for Smooth Growth of Software Systems Revisited,","authors":[],"date":"2002","doi":"10.1109\/tse.2002.1027802","raw":"Softw. Eng., 22(8): 599 \u2013 600 Turski W.M., 2002, The Reference Model for Smooth Growth of Software Systems Revisited, IEEE Trans. Softw. Eng., 28(8): 814 \u2013 815.","cites":null},{"id":18432775,"title":"Two Case Studies of Open Source Software Development: Aache and Mozilla,","authors":[],"date":"2002","doi":"10.1145\/567793.567795","raw":"Mockus A., Fielding RT, and Herbsleb J, 2002, Two Case Studies of Open Source Software Development: Aache and Mozilla, ACM Trans. Software Engineering and Methodology 11(3): 309-346.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2006-06","abstract":"We present an agent-based simulation model developed to study how size, complexity and effort relate to each other in the development of open source software (OSS). In the model, many developer agents generate, extend, and re-factor code modules independently and in parallel. This accords with empirical observations of OSS development. To our knowledge, this is the first model of OSS evolution that includes the complexity of software modules as a limiting factor in productivity, the fitness of the software to its requirements, and the motivation of developers. \\ud\nValidation of the model was done by comparing the simulated results against four measures of software evolution (system size, proportion of highly complex modules, level of complexity control work, and distribution of changes) for four large OSS systems. The simulated results resembled the observed data, except for system size: three of the OSS systems showed alternating patterns of super-linear and sub-linear growth, while the simulations produced only super-linear growth. However, the fidelity of the model for the other measures suggests that developer motivation and the limiting effect of complexity on productivity have a significant effect on the development of OSS systems and should be considered in any model of OSS development","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/57125.pdf","fullTextIdentifier":"http:\/\/eprints.lincoln.ac.uk\/81\/1\/Smith_Capiluppi_Ramil-prosim%202005%20special%20issue_issues_addressed_final.pdf","pdfHashValue":"89a4c5d86eb087f0bbc5074aad6b7b77d0619904","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lincoln.ac.uk:81<\/identifier><datestamp>\n      2013-03-13T08:21:57Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D6A6163735F47:6A6163735F47343030<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.lincoln.ac.uk\/81\/<\/dc:relation><dc:title>\n        Agent-based simulation of open source evolution<\/dc:title><dc:creator>\n        Smith, N.<\/dc:creator><dc:creator>\n        Capiluppi, A.<\/dc:creator><dc:creator>\n        Ramil, J.F.<\/dc:creator><dc:subject>\n        G400 Computer Science<\/dc:subject><dc:description>\n        We present an agent-based simulation model developed to study how size, complexity and effort relate to each other in the development of open source software (OSS). In the model, many developer agents generate, extend, and re-factor code modules independently and in parallel. This accords with empirical observations of OSS development. To our knowledge, this is the first model of OSS evolution that includes the complexity of software modules as a limiting factor in productivity, the fitness of the software to its requirements, and the motivation of developers. \\ud\nValidation of the model was done by comparing the simulated results against four measures of software evolution (system size, proportion of highly complex modules, level of complexity control work, and distribution of changes) for four large OSS systems. The simulated results resembled the observed data, except for system size: three of the OSS systems showed alternating patterns of super-linear and sub-linear growth, while the simulations produced only super-linear growth. However, the fidelity of the model for the other measures suggests that developer motivation and the limiting effect of complexity on productivity have a significant effect on the development of OSS systems and should be considered in any model of OSS development.<\/dc:description><dc:date>\n        2006-06<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/81\/1\/Smith_Capiluppi_Ramil-prosim%202005%20special%20issue_issues_addressed_final.pdf<\/dc:identifier><dc:identifier>\n          Smith, N. and Capiluppi, A. and Ramil, J.F.  (2006) Agent-based simulation of open source evolution.  Software process: improvement and practice, 11  (4).   pp. 423-434.  ISSN 1077-4866  <\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1002\/spip.280<\/dc:relation><dc:relation>\n        10.1002\/spip.280<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.lincoln.ac.uk\/81\/","http:\/\/dx.doi.org\/10.1002\/spip.280","10.1002\/spip.280"],"year":2006,"topics":["G400 Computer Science"],"subject":["Article","PeerReviewed"],"fullText":"Agent-based Simulation of Open Source Evolution\nNeil Smith, Andrea Capiluppi, Juan Fern\u00e1ndez Ramil\nComputing Department\nThe Open University\nWalton Hall, Milton Keynes MK7 6AA, U.K.\n{n.smith, a.capiluppi. j.f.ramil}@open.ac.uk\nAbstract\nWe present an agent-based simulation model developed to study how size, complexity and effort \nrelate  to  each  other  in  the  development  of  open  source  software  (OSS).  In  the  model,  many \ndeveloper agents generate, extend, and refactor code modules independently and in parallel. This \naccords with empirical observations of OSS development. To our knowledge, this is the first model \nof  OSS  evolution  that  includes  the  complexity  of  software  modules  as  a  limiting  factor  in \nproductivity, the fitness of the software to its requirements, and the motivation of developers. \nValidation of the model was done by comparing the simulated results against four measures of \nsoftware evolution (system size, proportion of highly complex modules, level of complexity control \nwork, and distribution of changes) for four large OSS systems. The simulated results resembled the \nobserved data,  except for system size:  three of the OSS systems showed alternating patterns of \nsuperlinear and sublinear growth while the simulations only produced superlinear growth. However, \nthe fidelity of the model for the other measures suggests that developer motivation and the limiting \neffect of complexity on productivity have a significant effect on the development of OSS systems \nand should be considered in any models of OSS development. \nKeywords: simulation  models,  software  process,  open  source  software,  software  evolution, \nproductivity, metrics, Agent-based simulation.\n1. Introduction\nThe application of  simulation models to software processes includes the support of decisions \nabout resources and the impact of process improvements, such as the introduction of inspections. \nSimulation modelling can also help in evaluating possible explanations for empirical observations. \nThe vast majority of real world software applications are evolved from existing versions, not created \nfrom  scratch,  and  a  large  amount  of  effort  go  into  evolution,  not  into  initial  development \n(Sommerville 2001). There is now a body of knowledge about software evolution (e.g. Lehman & \nBelady 1985, Rajlich & Bennett 2000, Aoyama 2002, Madhavji et al. 2006) based on observations \nand on a variety of software process models (e.g. Lehman et al. 2002, Smith et al. 2005). In spite of \nthe advances over the years, the management of software evolution is one of the most challenging \nsoftware  engineering  problems.  In  order  to  make  progress  in  this  area,  we  are  interested  in \nunderstanding the drivers of software evolution, as a basis to the generation of theories of software \nevolution. \nThis  is  an  important  topic  since  software  engineering  lacks  an  empirically  validated  theory \n(Lehman 2000a). Even though this could be seen as a topic of interest to academics only, it can have \na  practical  and useful  output  in  terms of  guidance and justification for  good practice (Lehman \n2000b). Guidance to good practice is one of the roles of theory in other engineering disciplines. For \nexample, one can use electromagnetic field theory to reduce electromagnetic interference between \nnearby cables. In a similar way, one could consider Brooks\u2019s law (Brooks 1995) that \u201cadding people \nto a late project make it later\u201d to derive guidelines for managing a late project. Similarly, Lehman\u2019s \nfirst law of software evolution, \u201cContinual Change\u201d (Lehman 1974), can justify the introduction of \nconfiguration and change management in the software process (Lehman 2000b). Due to the human \ninvolvement at all levels in the software process we expect that the theories related to the software \nprocess  will  be  more  qualitative  than  the  quantitative  theories  typical  of  physical  systems.  If \nsoftware processes are subject to general influences that can be modelled and captured in theories, \nthen process simulation modelling will play a role in evaluating the empirical support for them. The \ninvestigation of  such theories  should include not  only the study of  empirical  data  in  search of \npatterns,  but  also  the  investigation  of  ways  of  abstracting  and  representing  any  behavioural \nregularities found, and of the limits of such theories. For example, we would like to know whether \ntheories are able to explain and predict break points in otherwise apparently regular evolution.\nThis  paper  reports  our  attempts  to  replicate  empirical  observations  of  size,  complexity, \nrefactoring work and distribution of changes of a set of open source software (OSS) systems. The \nfree availability of empirical data makes OSS an attractive topic for investigation. OSS development \nprojects are very modular:  multiple developers work in parallel  on different parts of a software \nsystem  with  less  influence  from a formal  plan  than  in  proprietary software  development.  This \nsuggests that an agent based model of the software development process would be appropriate.  The \nuse of such a model was proposed some 10 years ago (Lehman & Stenning 1996). However, to our \nknowledge, the model presented here is the first model of open source evolution that includes three \nsignificant factors: the complexity of the software modules as a limiting factor in productivity; the \nfitness of the software to the requirements; and the motivation of developers. This is an advance \nover the work of other researchers (Madey et al. 2002, Robles et al.. 2005). These OSS simulations \nhave  dealt  with  mainly two  dimensions  (system size  and  number  of  developers)  and  how  an \nincreased number of developers produces more output (lines of code and source files).\nThe structure of this paper is as follows: Section 2 provides the motivation for this research. \nSection 3 introduces our agents-based model for simulating an OSS environment, the assumptions \non which it is based, and the hypotheses of our research. Section 4 describes the empirical data and \nthe system from which it is derived. Section 5 compares the simulation output with the empirical \ndata. Section 6 describes related work in simulation of OSS software evolution. Section 7 concludes \nthe paper and indicates topics for further work.\n2. Motivation and Background\nMany simulations of software development are based on the traditional approach to modelling \ncomplex systems. The system's behaviour is abstracted into a set of differential equations which \ndefine the structure of the causal links between the state variables in the model (Iwasaki & Simon \n1986); this describes the mechanisms that are believed to operate in the referent system. The set of \nequations is solved to produce a behaviour, which is compared to the empirical data. This approach \nhas produced results in the study of traditional software development (e.g. Abdel-Hamid & Madnick \n1991)  and has  produced predictions  such as the diminishing growth rate  implied by Lehman\u2019s \nsecond law of  increasing  complexity (Lehman 1974)  and  observed  in  a  number  of  proprietary \nsoftware systems (Turski 1996, FEAST 2001, Turski 2002). In our previous work we explored the \nuse  of  qualitative  simulation  to  bridge  the  gap  between  high  level  (qualitative)  theories  and \nempirical data (Ramil & Smith 2002, Smith et al. 2005). \nComputing is a rapidly evolving disciplineand there is a need to compare the theories to new \nemergent forms of software development, such as the OSS domain. This presents some challenges. \nMany OSS systems do  not  show the  types  of  evolutionary behaviour  seen  in  the  evolution  of \ntraditional software (Godfrey & Tu 2002, Herraiz 2005). About one-third of OSS systems grow at \nsuper-linear rates (seemingly contradicting Lehman's second and fifth laws) (Herraiz 2005). In OSS, \nthe inclusion of more contributors leads to more growth (also contradicting both Lehman\u2019s second \nand fifth laws and Brooks's law). \nThis different behaviour may be due to the different architectural structure of OSS development: \nour hypothesis is that OSS development behaves differently because OSS systems are more modular \nthan proprietary software. We believe that the distributed nature of OSS applies not only to the \nsoftware itself but also at the community evolving it (also following Brooks's observation that the \narchitecture of a system reflects the structure of the organisation evolving it (Brooks 1995)).  OSS \nevolution involves a community of individuals providing their work mainly on a voluntary basis and \nwithout a strong centralised leadership (Raymond 2001, Scacchi 2006). This invalidates one of the \nassumptions of our previous simulation models: the existence of a centralised management control \nwhich will react against excessive complexity by assigning developers to complexity control work \n(Smith et al. 2005). \nWe propose that, while each module within an OSS system may be monolithic, and will behave \nin the manner described by Lehman, Belady and Brooks, the overall  modular and decentralised \narchitecture of the software and of the community evolving it will restrict the impact of software \ngrowth stagnation to small parts of the system where they will not have a significant effect on the \nevolution of the whole. To investigate this hypothesis, we have developed an agent-based model \n(Rocha 2003) that captures the  decentralised and modular nature of OSS development.  The next \nsection describes the details of the model and section 5 shows the simulation results generated by it. \n3. Agent-based Simulation Model\nOur simulation model  is  based on the  Lehman\u2019s  laws of  software  evolution (Lehman 1974, \nLehman & Belady 1985, Lehman 2000b), our own experience observing OSS development, as well \nas on the models developed by other researchers (Antoniades et al. 2005, Robles et al. 2005, Madey \net al. 2002). However, to our knowledge, the model presented here is the first agent-based model of \nopen source evolution that includes the complexity of the software modules as a limiting factor in \nproductivity, the fitness of the software to the requirements, and the motivation of developers. We \nbelieve that these are important factors that need to be studied.\nOur motivation for developing this model lies in our understanding of the actions of individual \nOSS developers (Mockus et al. 2002, Raymond 2001). OSS development is inherently decentralised \nand  non-coercive:  developers  choose  to  become involved  in  an  OSS  project  and  choose  what \naspects of the project to work on. They generally have pride in their work and take pains to ensure \nthat it is easily maintainable.\nWe used the NetLogo (2005) multi-agent simulation tool to develop our model. We selected \nNetLogo primarily because it is freely available on the web and well documented and supported. In \nthis tool, agents move around a virtual world, interacting with it and with other agents. There is no \ncentralised control or co-ordination of the agents' actions. Agents are responsible to maintaining \ntheir own state. The NetLogo virtual world consists of a grid of \u201cpatches\u201d, each of which can have a \nstate.  Generally,  agents  have  only local  knowledge  about  their  surroundings.  Both  agents  and \npatches are active agents in the simulation, performing actions and asking other agents to perform \nother actions. Simulation proceeds by each agent and patch repeating its behaviour independently, \noften  by following  stochastic  functions  influenced  by the  agent's  state  and  local  environment. \nAgents perform their own actions asynchronously and as rapidly as they can. In an agent-based \nsimulation,  the  overall  behaviour  of  the  system  is  an  emergent  property  of  the  individual, \nindependent  interactions  of  the  agents.  This  approach  differs  from  the  traditional  modelling \napproach where the state of the system is captured in a single set of global state variables, such as \nstocks and flows. \nIn our  model,  patches  represent  modules of  software  source  code  and agents  represent  both \ndevelopers and unfulfilled  requirements. Figure 1 shows a class diagram that illustrates the main \nconcepts of developers interacting in the system by creating, modifying, and refactoring modules. \nThe level of abstraction of the model is not determined a priori: a module could represent a single \nprocedure, a file, a library, or some other modular part of a software system. Each module records \nboth its fitness for purpose (gauged against a set of external requirements) and its complexity. The \ncomplexity of a module acts as an inhibitor to changes to that module. To model the changes in \nexternal  requirements  and invalidation  of  assumptions  that  are  a  driving force  behind software \nevolution, patches have a stochastic process for modelling their decrease in fitness.  Modules also \nhave  a  random  chance  to  spawn  a  new  requirement  in  a  neighbouring,  empty  patch.  Finally, \nmodules have a chance to capture the attention of a developer passing through cyberspace, and so \n\u201ccreate\u201d a new developer agent in the model; this only happens is the module is interesting (i.e. its \nfitness is below the developer boredom threshold; see below). In the model, each patch repeatedly \nexhibits these behaviours, checking if it should generate a new requirement, decrease in fitness, or \ncapture the attention of a new developer agent. These behaviours are shown in Figure 2.\n<<Figure 1 approx here>>\nIn the model, software developers are represented by agents. These agents walk randomly around \nthe software system, changing the code as they go. Agents have four behaviours, depending on their \nlocation.  As  with  patches,  each  developer  repeatedly and  asynchronously cycles  through  these \nbehaviours, following the pseudocode in Figure 2.\n1. If  a  developer  is  on  an  unfulfilled  requirement,  it  creates  a  new  module that  fulfils  that \nrequirement, with a certain (low) fitness and complexity. \n2. If a developer is on a module with high complexity and high fitness, it may attempt to refactor \nthat module. Refactoring leaves the module's fitness unchanged, but reduces its complexity by a \nrandom amount. \n3. If the developer is on a module that it is not refactoring, it will attempt to  develop the module; \nthis increases both the module's fitness and complexity by a random amount. It will also slightly \nreduce the fitness of adjacent modules, due to coupling between them. However, if the module is \ncomplex, the agent may not be able to improve the module, in which case the module is left \nunchanged. \n4. Finally, developers have a motivation factor (we call this boredom threshold in the model). If the \nfitness of the module they are on is above this threshold, there is a chance that the developer will \nfind the project boring and leave. Developers may also leave if they move outside the system.\n<<Figure 1 approx here>>\nSimulation  starts with a single module.  This  both spawns new requirements and attracts  the \nattention of developers. The developers will create modules to fulfil the requirements and therefore \nenlarge the project. As the project grows, more developers are attracted and more requirements are \nidentified.  The  code  of  the  full  NetLogo  model  is  freely  available  from \nhttp:\/\/mcs.open.ac.uk\/ac5468\/simulation\/.\n4. Empirical Data\nTo validate the model, we compared the simulated output to empirically observed behaviour. The \nempirical data was derived from data in OSS repositories. Previous research has shown that data \nsuch as change-log records, program headers and configuration management offer a rich source to \nderive data for the study of software evolution (Capiluppi 2003, Capiluppi et al. 2004a,b, Mens et \nal. 2004, Fischer et al. 2003, RELEASE 2005). For this study, we selected four OSS systems which \nwe have examined in previous studies (Capiluppi et al. 2004a,b). Table 1 indicates the data sources \nwe used to extract the empirical data used in this research.\n<<Table 1 approx here>>\nWe extracted several attributes for each software system, taking measurements over releases for \nsize in number of files,  files handled (Lehman & Belady 1985),  average complexity (measured \nusing the McCabe index (McCabe 1976)), and the level of complexity control work (measured as \nthe  proportion  of  files\/functions  which  were  subject  to  a  decrease  in  their  complexity  in  two \ncontiguous releases).  The data collection was aimed at measuring the systems' size, complexity, \namount  of  anti-regressive  work,  and  distribution  of  touches:  the  purpose  of  this  work  is  to \ncharacterise an OSS environment in order to compare it against the simulated results obtained from \nthe model described above.\n\uf0b7 Measurement of size of the system:   size was evaluated using number of source functions (as a \nsurrogate for the systems' growth). When release data was available, the code base and its size at \neach release were evaluated using our tools. We believe that an approach based on measuring \nsize of the released source code more genuinely displays the overall evolution of the system than \nmeasuring the size of the whole repository. Releases contain those parts of code that were chosen \nto be included in what is normally called a stable configuration. We prefer releases for the study \nof size of code contained onto the whole CVS server, because they represent stable points. The \nright-most column in Table 1 indicates the number of releases studied. The evaluation of the size \nachieved is displayed in a joint visualisation in Figure 3a for all the projects: the X axis indicates \nthe time of each release, while the Y axis indicates the size achieved. Measures are relative to the \nmaximum values  of  both metrics,  in  order  to  allow the comparison of  systems with largely \ndifferent values in size achieved. As can be seen, only one case (Wine) exhibited a monotonically \nincreasing trend; in the other systems at least one period of stagnation was observed between two \nperiods of growth. Figure 3b shows one of the cases with a discontinuous pattern of growth \n(Gaim system).\n<<Figure 3a and 3b approx here>>\n\uf0b7 Measurement of  complexity:   We looked at complexity at the level of granularity of functions. \nWithin  this  level  we  consider  the  McCabe  cyclomatic  number  as  a  measure  of  complexity \n(McCabe 1976). Next, we define the highly complex subpart of the system as the set of highly \ncomplex functions. We use the accepted threshold value for the McCabe index of 15 in order to \ndistinguish between less complex functions and more complex ones (McCabe & Butler 1989). \nOne of the proposed systems had already been evaluated (Capiluppi et al. 2005) for the purpose \nof tracking the amount of highly complex functions: a similar approach has been used for the \nother systems in this  case study.  This  is  shown through a boxplot  [Box 1978]  visualisation, \nwhich displays the variation of the dataset (i.e. the percentage of the highly complex elements in \na specific system) along the number of its releases.  Figure 4a shows that, in all the analysed \nsystems, the highly complex subpart is never larger than 10% of the overall system. Figure 4b \nshows the overall trend of highly complex functions for two Gaim and Mplayer.\n<<Figure 4a and 4b approx here>>\n\uf0b7 Measurement  of  the  level  of  complexity  control  work:   An  adequate  level  of  complexity \ncontrol (also termed anti-regressive work Lehman 1974; Lehman & Belady 1985)) is  widely \nrecognized as an essential countermeasure to software aging (Parnas 1994), and to sustain the \nevolution of software (Ratzinger & Gall 2005). We measured the level of complexity control \nwork by comparing every function between two consecutive releases and by counting how many \nof them experienced a reduction in their cyclomatic complexity. From a quantitative analysis, our \nresults illustrate that there is a correlation between the trend of the size growth and the amount of \ncomplexity control work: Figure 5a, 5b, 5c and 5d show the trends for the studied systems.\n<<Figure 5a, 5b, 5c and 5d approx here>>\n\uf0b7 Distribution of changes:   We term the number of different releases during which a file has been \nmanipulated, via addition, removal, or modification of code as the release touches of that file. A \nsingle release touches indicates that the file has  never been modified after its  creation.  The \nmaximum  possible  number  of  release  touches  for  a  file  is  the  number  of  releases.  The \nquantitative observation we drew from the chosen case studies, when analysing the distribution \nof release touches, resembled those already achieved (Capiluppi  et al. 2005): a small subset of \nelements (files or functions\/methods\/classes) is touched a large number of times by developers, \nwhilst most of the elements receive few (if not none) touches (Figure 6). This behaviour can be \nsummarised  by  visualising,  per  each  system,  its  release-touches  profile,  or  by  giving  the \nskewness of the distribution. The higher the skewness, the more asymmetric the distribution of \nthe release touches in a system.\n<<Figure 6 and Table 2 approx here>>\n5. Results and validation\nWe used the empirical data describe above to calibrate and validate our model. We did this by \nexploring the parameter space of the models, looking at the generated output, and comparing it to \nthe empirical evidence from the four case studies. The comparison was done by examining four \ngroups of attributes: growth, complexity complexity control work, and distribution of touches.\nWe exhaustively explored the parameter space of the model by determining a range of possible \nvalues  for  each  of  the  nine  controlling  parameters  in  the  model.  This  resulted  in  256 distinct \ncombinations of parameter values. The model was run for each of these parameter combinations and \nthe results logged.\nThe  model  seemed  most  sensitive  to  the  value  of  the  boredom threshold  parameter,  which \ncontrols when new developers join and leave the project (if a module's fitness is below the boredom \nthreshold, it may attract new developers; if the fitness is above the boredom threshold, developers \non that module may leave the project). If the boredom threshold of developers was set very high, \ndevelopers did not leave the project when they encountered high-fitness modules. As these modules \ncontinued to attract new developers, the number of developers grew extremely rapidly and soon \nswamped the development environment. In contrast, if the boredom threshold was very low, the \nevolution of the first few modules resulted in a system that was sufficiently fit for purpose that no \nnew developers were attracted; the original developers soon left the project and were not replaced. \nNeither  of  these  behaviours  is  at  all  similar  to  the  empirical  data,  so  the  results  from  these \nsimulation runs were discarded.\nThe simulation results were also strongly affected by the effectiveness of the refactoring work \ndone  by developers.  When  refactoring  was  ineffectual  or  not  attempted,  the  both  the  average \ncomplexity of the system and the proportion of the highly complex subpart grew over time. This in \nturn led to an unusual behaviour for the average fitness of the system: it peaked in the early stages of \ndevelopment and gradually declined thereafter. This was due to the large number of 'old' modules \nthat had suffered bitrot (so they became unfit for purpose) but could not be improved due to their \ncomplexity. This also led to the anomalous situation of these modules attracting many functionally \nineffectual developers. \nThe rest of the runs yielded very similar behaviours (up to linear scalings of the various results): \nthe system size grew super-linearly, the proportion of complex modules remained constant and low, \nthe portion of work assigned to complexity control increased over time, and the distribution of \ntouches was very skewed.\n\uf0b7 Growth  patterns  :  Figure  3  shows  the  empirical  growth  patterns.  Figure  7a  shows  that  the \nsimulation model is able to reproduce the continuous growth pattern seen in Wine. The second \npattern (discontinuous growth) is not directly reproduced by the model, but it can be generated by \nvarying  the  controlling  parameters  during  simulation,  such  as  adjusting  the  chance  of  new \ndevelopers appearing (thus changing the number of developers) or changing the threshold that \ndetermines  when a  module adequately meets  its  requirements  (similar  to  the  idea of  S-type \nprograms defined by Lehman & Belady (1985)). In the further work section we highlight an \nextension of the model for capturing the discontinuous trends, based on the fulfilment of the \ninitial requirements.\n<<Figure 7a approx here>>\n\uf0b7 Complexity patterns:   As shown in Figure 4, all of the four systems studied present a similar trend \nwhen analysing the percentage of highly complex functions. The simulated data is similar to \nthem  (Figure  7b),  as  long  as  new  modules  have  an  initial  complexity  below  the  reporting \nthreshold.  Both  complex  and  non-complex  modules  attract  developers  who  perform  some \nrefactoring work and hence keep the average complexity constant. This is very similar to the \nempirical observations.\n<<Figure 7b approx here>>\n\uf0b7 Complexity  control  :  in  the  four  systems  studied  the  empirical  observations  show  that  the \ncumulative amount of complexity control (also termed refactoring) work, that is, the work aimed \nat decreasing the complexity of a software system, increases slowly but then closely follows the \ngrowth trend. That is, the complexity control rate meets and even exceeds the functional growth \nrate. As visible in Figure 8a, the simulation model is able to reproduce this pattern. Refactoring \nwork is taking an increase amount of work but this is sustained because in OSS the effort comes \nfrom an unbounded pool of developers.\n<<Figure 8a approx here>>\n\uf0b7 Release Touches  : as shown in the empirical observations (Figure 6), the studied software systems \nshow a long-tailed distributions of release touches. The model is able to simulate this aspect. \nAlbeit  a  qualitative  resemblance  is  obtained,  the  skewness  factor  is  not  very  large,  as  we \nobserved a value of 0.81 for the simulated output.  The highly skewed profile is reproduced by \nour simulation engine, as visible in Figure 8b.\n<<Figure 8b approx here>>\n6. Related Work\nThe study of evolutionary trends in software evolution has been the focus of several quantitative \nsimulation models using system dynamics (e.g., Lehman  et al. 2002). This modelling effort has \nbeen inspired by observations of proprietary software. The OSS domain was originally studied using \ndirect  visualization  of  trends  based  on  quantitative  metric  data  extracted  from  OSS  system \n(Capiluppi et al. 2004). A important study by Godfrey & Tu (2001) highlighted differences between \nthe  evolution  of  Linux  (a  popular  OSS  operating  system)  and  previously  studied  systems, \nparticularly its apparently super-linear growth. Our model provides a possible explanation for such a \nsuper-linear growth.\nResearch efforts  specifically involving simulation  of  some aspects  of  OSS development  and \nevolution  have  taken  place  and  this  area  of  research  is  becoming very popular,  driven  by the \navailability of OSS data. Examples include Madey et al. (2002), who used the existing SWARM \nagent-based  simulation  tools,  and  Dalle  & David  (2004),  who  built  their  own agent  platform, \nSimCode. A dynamic simulation of OSS processes is also described by Antoniades  et al. (2005), \nwhere  empirically  observed  patterns  of  size  growth  and  developers  joining  the  project  are \nreproduced by a simulation. Robles et al. (2005) propose a biologically-inspired simulation, where \ndevelopers learn from other developers through observing changes in the source code, rather than \nexplicitly communicating with each other. This type of model has been used to investigate questions \nrelated to the amount of effort allocated to OSS projects and whether a significant attraction of new \ndevelopers can be achieved in  the evolution of  the project.  Their  research shares  our focus on \nproduct characteristics (e.g. size and complexity) and on evolution. However, to our knowledge, the \nmodel presented here is the first model of open source evolution that includes the complexity of the \nsoftware modules as a limiting factor in productivity, the fitness of the software to the requirements, \nand the motivation of developers.\n7. Conclusions and Further Work\nThis  paper  presented an agent-based simulation  model  of  OSS evolution.  Our model,  while \nsimple,  incorporates  many of  the  features  that  may explain  the  differences  between  OSS  and \nproprietary development (Godfrey & Tu 2001, Herraiz 2005). We found that the model was able to \nreplicate the observed patterns in three of the four areas examined (complexity, complexity control, \ndistribution of changes) in the four systems studied. In one area, system growth, the model was only \nable to replicate the continuous superlinear growth pattern seen in one of the four systems studied. \nDiscontinuous behaviour can be artificially generated by changing parameters during a simulation. \nHowever, this is not satisfying as an explanation and more work is needed. Having said that,  the \nmodel presented here appears to provide an explanation for the unbounded growth trends (Godfrey \n&  Tu  2001,  Herraiz  2005)  observed  in  some  OSS  software.  By  itself,  this  is  an  important \ncontribution.\nWe included three novel factors in our model: the complexity of software modules as a limiting \nfactor  in  productivity,  the  fitness  of  the  software  to  its  requirements,  and  the  motivation  of \ndevelopers. All three of these factors are required for the model to produce plausible results. If the \nfitness of modules and the interests of developers are misaligned, the model quickly deviates from \nempirical observations. If the modules created are perfectly fit for purpose, developers have little to \ndo and leave the project, resulting in a moribund project. If the developers never leave the project, \nno matter how fit for purpose existing modules are, the number of developers grows excessively \nlarge.  The  'desire'  of  developers  in  the  model  to  refactor  complex  code,  which  reduces  the \ncomplexity of that module and hence the system overall, leads to the highly complex subpart of the \nmodel  to  remain  at  a  constant  and  low  level,  in  accordance  with  the  empirical  observations. \nExperiments  where this  refactoring behaviour  was prevented led to situations  where the highly \ncomplex subpart grew much faster than the overall size of the system and the average fitness of the \nsystem  decreased  over  time.  This  indicates  that  refactoring  is  a  significant  activity  in  OSS \ndevelopment that allows the system to remain fit for purpose and able to continuously grow. These \nresults  indicate  that  all  of  the  novel  factors  introduced  in  this  model  are  required  for  faithful \nsimulations of OSS evolution. \nThe work reported in this paper, particularly the problem in simulating discontinuous trends, has \nlead to the view that a better model may be developed by modelling the actions of core developers. \nObservations of some OSS projects indicate that they are led by core developers who perform most \nof the changes in the software while others make a much smaller number of contributions (Mockus \net al. 2002). This suggests that we need to include mechanisms in the model which reflect the role \nof  core  developers  in  influencing  the  evolution  of  some  OSS  systems.  An  alternative  way of \nexplaining the discontinuous trends of size growth could be to make the distribution of requirements \nless  even,  with  clusters  of  requirements  representing  new  functional  areas  for  the  project  to \nincorporate.  This  would  generate  rapid  growth while  a new area is  explored followed by slow \ngrowth then those requirements are fulfilled.\n8. Acknowledgements\nAndrea Capiluppi acknowledges the Faculty of Maths and Computing, The Open University, and \nin particular to Drs Bashar Nuseibeh and Uwe Grimm, for financial support that made this work \npossible. Juan Fern\u00e1ndez Ramil gratefully acknowledges the UK EPSRC for funding.\n9. References\nAbdel-Hamid T.K., Madnick S.E., 1991,  Software Project Dynamics \u2013 An Integrated Approach, \nPrentice Hall, Englewood Cliffs,, NJ: 263 pp\nAntoniades P., Samoladas I., Stamelos I., Bleris G.L., 2005, Dynamical simulation models of the \nOpen  Source  Development  process.  In  Stefan  Koch  (ed.),  Free\/Open  Source  Software \nDevelopment, Idea Group, Inc.\nAoyama M, 2002, \u201cMetrics and Analysis of Software Architecture Evolution with Discontinuity\u201d, \nProc. 5th Intl. Workshop on Principles of Software Evolution, IWPSE 2002, Orlando, FL: 103 \u2013 \n107\nBox G.E.P et al, Statistics for Experimenters, An Introduction to Design, Data Analysis and Model \nBuilding, Wiley, 1978\nBrooks F, 1995, The Mythical Man-Month: Essays on Software Engineering, 20th Anniversary Ed., \nAddison-Wesley.\nCapiluppi A., 2003, \u201cModels for the Evolution of OS Projects\u201d, Proc. ICSM, Amsterdam, 22 \u2013 26 \nSept. 2003, pp. 65 - 74.\nCapiluppi A., Morisio M. & Ramil J.F., 2004a, \u201cStructural Evolution of An Open Source System: A \nCase  Study\u201d,  Proceedings  of  the  12th  International  Workshop  on  program \nComprehension(IWPC), June 24-26, 2004, Bari, Italy, pp. 172 - 182 .\nCapiluppi A., Morisio M. & Ramil J.F., 2004b, \u201cThe evolution of source folder structure in actively \nevolved open source systems\u201d, Proceedings of the 10th International Symposium on Software \nMetrics, Sept. 11-17, Chicago, Illinois, pp. 2 - 13\nCapiluppi  A.,  Faria A.E. & Ramil  J.F.,  2005, \u201cExploring the Relationship between Cumulative \nChange and Complexity in an Open Source Systems\u201d, 9th European Conference on Software \nMaintenance and Reengineering (CSMR), Manchester, UK, March 21-23, 2005\nDalle  J.M.,  David  P.A.  2004.  SimCode:  Agent-based  Simulation  Modelling  of  Open-Source \nSoftware Development, available online at http:\/\/opensource.mit.edu\/papers\/dalledavid2.pdf <as \nof Feb. 2005>\nFEAST,  2005,  Feedback,  Evolution  And  Software  Technology,  Dept.  of  Computing,  Imperial \nCollege, http:\/\/www.doc.ic.ac.uk\/~mml\/feast\/ <as of Oct. 2005>\nGodfrey M and Tu Q, 2001, \u201cGrowth, Evolution and Structural Change in Open Source Software\u201d, \nProc.  of the 4th Intl.  Workshop on the Principles of Software Evolution,  Sept.  10-11,  2001, \nVienna, Austria.\nFischer M, Pinzger M and Gall  H 2003, \u201cPopulating a Release History Database from Version \nControl and Bug Tracking Systems\u201d, Proc. ICSM 2003, 22-26 Sept, Amsterdam,: 23 \u2013 32\nHerraiz I, 2005, \u201cThe Evolution of Large Open Source Software\u201d, research seminar, Computing \nDept., The Open University, Milton Keynes, U.K., 28 July 2005.\nIwasaki, Y. and Simon, H. A., 1986, Causality in Device Behaviour, Artificial Intelligence 26: 3-32.\nLehman  M.M.,  1974,  \u201cPrograms,  Cities,  Students,  Limits  to  Growth?\u201d,  Inaugural  Lecture,  in \nImperial College of Science and Technology Inaugural Lecture Series, vol. 9, pp. 211 \u2013 229.\nLehman M. M. and Belady L 1985;  Program Evolution \u2013 Processes of Software Change, Acad. \nPress, London, 1985. Available from links at: http:\/\/w3.umh.ac.be\/evol\/publications.html <as of \nOctober 2005>\nLehman  M.M.,  2000a,  \u201cApproach  to  a  Theory of  Software  Process  and  Software  Evolution\u201d, \nFEAST 2000 Workshop, Imp. Col., 10- 12 Jul. 2000, also as Res. Rep. 2000\/2, Dept. of Comp., \nImp.  Col.,  Feb.  2000 http:\/\/www.doc.ic.ac.uk\/~mml\/feast2\/papers\/pdf\/645.pdf  <as  of  October \n2005>\nLehman  M.M.,  2000b,  \u201cRules  and  Tools  for  Software  Evolution  Planning  and  Management\u201d, \nFEAST 2000 Workshop., Imp. Col., 10-12 Jul. 2000, also as Tech. Report, 2000\/14 Nov. 2000, \nImp.  Col.,  Dept.  of  Comp,  http:\/\/www.doc.ic.ac.uk\/~mml\/feast2\/papers\/pdf\/611_2.pdf  <as  of \nOctober 2005>\nLehman  MM  and  Stenning  V.,  1996,  \u201cFEAST\/1  Proposal  Part  2,  Case  for  Support\u201d,  EPSRC \nproposal,  Computing  Dept.  Imperial  College  London,  1996, \nhttp:\/\/www.doc.ic.ac.uk\/~mml\/feast2\/case96-2.html <as of Oct 2005>\nLehman  MM,  Kahen  G and  Ramil  JF,  2002,  Behavioural  Modelling  of  Long lived  Evolution \nProcesses\u2013 Some Issues and an Example,  J. of Software Maintenance and Evolution 14: 335 \u2013 \n351\nMadhavji N, Lehman M, Perry D, Ramil JF, (eds), 2006, Software Evolution and Feedback, Wiley, \n2006.\nMadey GR, Freeh VW, Tynan RO, 2002, \u201cAgent-Based Modeling of Open Source using Swarm\u201d, \nProc. of Americas Conference on Information Systems (AMCIS 2002), Dallas, Texas, August.\nMcCabe  TJ,  A  complexity  measure,  1976,  IEEE Transactions  on  Software  Engineering,  SE-2 \n(1976) pp. 308-320.\nMcCabe TJ and Butler CW, 1989, Design Complexity Measurement and Testing, Communications \nof the ACM 32(12): 1415 \u2013 1425\nMens T Ramil JF, and Godfrey M, 2004, Analyzing the Evolution of Large-scale Software: Guest \nEditorial. Journal on Software Maintenance and Evolution 16(6): 363-365.\nMockus  A.,  Fielding  RT,  and  Herbsleb  J,  2002,  Two Case  Studies  of  Open  Source  Software \nDevelopment: Aache and Mozilla,  ACM Trans. Software Engineering and Methodology 11(3): \n309-346.\nNetLogo, 2005, http:\/\/ccl.northwestern.edu\/netlogo\/ < as of Oct 2005>\nRajlich VT and Bennett KH, 2000, A Staged Model for the Software Life Cycle, IEEE Computer \n33(7): 66 \u2013 71.\nRamil J.F. & Smith N., 2002, Qualitative Simulation of Models of Software Evolution, Journal of  \nSoftware Process: Improvement and Practice, 7: 95 \u2013 112.\nRaymond, E. S., 2001 The Cathedral and the Bazaar O'Reilly Media Inc.\nRELEASE,  2005,  REsearch  Links  to  Explore  and  Advance  Software  Evolution, \nhttp:\/\/labmol.di.fc.ul.pt\/projects\/release\/ <as of Oct. 2005>\nRobles  G.,  Merelo  J.J.,  Gonzalez-Barahona  J.M.  2005  \u201cSelf-Organized  Development  in  Libre \nSoftware: a Model based on the Stigmergy Concept\u201d, ProSim 2005, St Louis, Missouri,May 21-\n23, 2005.\nRocha,  2003  \u201cComplex  Systems  Modeling\u201d,  Indiana  University  and  Los  Alamos  National \nLaboratory, http:\/\/informatics.indiana.edu\/rocha\/complex\/csm.html <as of Oct 2005>\nScacchi W, 2006, Article on the evolution of open source software to appear as a book chapter in \nMadhavji et al. (2006).\nSmith N., Capiluppi A., Ramil J.F., 2005, A Study of Open Source Software Evolution Data using \nQualitative Simulation, Software Process Improvement and Practice 10: 287-300.\nSommerville I, 2001, Software Engineering, 6th Ed., Addison-Wesley, Wokingham, UK.\nTurski W.M., 1996, A Reference Model for the Smooth Growth of Software Systems, IEEE Trans.  \nSoftw. Eng., 22(8): 599 \u2013 600\nTurski  W.M.,  2002,  The Reference Model  for  Smooth  Growth  of  Software Systems Revisited, \nIEEE Trans. Softw. Eng., 28(8): 814 \u2013 815.\n"}