{"doi":"10.1007\/978-3-642-13182-0_12","coreId":"65217","oai":"oai:dro.dur.ac.uk.OAI2:6483","identifiers":["oai:dro.dur.ac.uk.OAI2:6483","10.1007\/978-3-642-13182-0_12"],"title":"Frameworks for logically classifying polynomial-time optimisation problems.\\ud","authors":["Gate, J.","Stewart, I. A."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":["Ablayev, F,","Mayr , E. F."],"datePublished":"2010-06-20","abstract":"We show that a logical framework, based around a fragment of existential second-order logic formerly proposed by others so as to capture the class of polynomially-bounded P-optimisation problems, cannot hope to do so, under the assumption that P \u2260 NP. We do this by exhibiting polynomially-bounded maximisation and minimisation problems that can be expressed in the framework but whose decision versions are NP-complete. We propose an alternative logical framework, based around inflationary fixed-point logic, and show that we can capture the above classes of optimisation problems. We use the inductive depth of an inflationary fixed-point as a means to describe the objective functions of the instances of our optimisation problems","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65217.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6483\/1\/6483.pdf","pdfHashValue":"325989b86b28c494089407cddf93af8986398db5","publisher":"Springer","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6483<\/identifier><datestamp>\n      2015-03-31T12:10:55Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Frameworks for logically classifying polynomial-time optimisation problems.\\ud\n<\/dc:title><dc:creator>\n        Gate, J.<\/dc:creator><dc:creator>\n        Stewart, I. A.<\/dc:creator><dc:description>\n        We show that a logical framework, based around a fragment of existential second-order logic formerly proposed by others so as to capture the class of polynomially-bounded P-optimisation problems, cannot hope to do so, under the assumption that P \u2260 NP. We do this by exhibiting polynomially-bounded maximisation and minimisation problems that can be expressed in the framework but whose decision versions are NP-complete. We propose an alternative logical framework, based around inflationary fixed-point logic, and show that we can capture the above classes of optimisation problems. We use the inductive depth of an inflationary fixed-point as a means to describe the objective functions of the instances of our optimisation problems.<\/dc:description><dc:subject>\n        Descriptive complexity<\/dc:subject><dc:subject>\n         Optimisation problems<\/dc:subject><dc:subject>\n         Fixed-point logic.<\/dc:subject><dc:publisher>\n        Springer<\/dc:publisher><dc:source>\n        Ablayev, F, & Mayr , E. F. (Eds.). (2010). 5th International Computer Science Symposium in Russia, CSR 2010, 16-20 June 2010, Kazan, Russia ; proceedings. Berlin: Springer, pp. 120-131, Lecture notes in computer science(6072)<\/dc:source><dc:contributor>\n        Ablayev, F,<\/dc:contributor><dc:contributor>\n        Mayr , E. F.<\/dc:contributor><dc:date>\n        2010-06-20<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6483<\/dc:identifier><dc:identifier>\n        issn:0302-9743<\/dc:identifier><dc:identifier>\n        issn: 1611-3349<\/dc:identifier><dc:identifier>\n        doi:10.1007\/978-3-642-13182-0_12<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6483\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1007\/978-3-642-13182-0_12<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6483\/1\/6483.pdf<\/dc:identifier><dc:rights>\n        The final publication is available at Springer via http:\/\/dx.doi.org\/10.1007\/978-3-642-13182-0_12<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0302-9743"," 1611-3349","issn: 1611-3349","issn:0302-9743"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":["Descriptive complexity","Optimisation problems","Fixed-point logic."],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n12 July 2010\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nGate, J. and Stewart, I. A. (2010) \u2019Frameworks for logically classifying polynomial-time optimisation\nproblems.\u2019, in 5th International Computer Science Symposium in Russia, CSR 2010, 16-20 June 2010, Kazan,\nRussia ; proceedings. Berlin: Springer-Verlag, pp. 120-131. Lecture notes in computer science. (6072).\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1007\/978-3-642-13182-012\nPublisher\u2019s copyright statement:\nThe original publication is available at www.springerlink.com\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nFrameworks for logically classifying\npolynomial-time optimisation problems\nJames Gate and Iain A. Stewart\nSchool of Engineering and Computing Sciences,\nDurham University, Science Labs,\nSouth Road, Durham DH1 3LE, U.K.\ne-mail: j.s.gate\/i.a.stewart@durham.ac.uk\nNovember 19, 2009\nAbstract\nWe show that a logical framework, based around a fragment of exis-\ntential second-order logic formerly proposed by others so as to capture\nthe class of polynomially-bounded P-optimisation problems, cannot hope\nto do so, under the assumption that P 6= NP. We do this by exhibit-\ning polynomially-bounded maximisation and minimisation problems that\ncan be expressed in the framework but whose decision versions are NP-\ncomplete. We propose an alternative logical framework, based around\ninflationary fixed-point logic, and show that we can capture the above\nclasses of optimisation problems. We use the inductive depth of an infla-\ntionary fixed-point as a means to describe the objective functions of the\ninstances of our optimisation problems.\nkeywords: finite model theory; descriptive complexity; optimisation prob-\nlems.\n1 Introduction\nThe theory of computational complexity is primarily concerned with the classi-\nfication of decision problems, and although many (NP-complete) decision prob-\nlems are actually decision versions of more natural optimisation problems, the\nclassification of optimisation problems does not fit naturally into many of the\navailable standard classification frameworks. Whilst there do exist criteria\nagainst which we can classify optimisation problems, such as according to their\napproximation properties [11], it was not until Papadimitriou and Yannakakis\n[18] proposed the use of existential second-order logic as a means for classifica-\ntion that a natural and robust framework became available. The classification\nof optimisation problems within this logical framework was subsequently signif-\nicantly clarified by Panconesi and Ranjan [17] and Kolaitis and Thakur [13, 14]\n(we briefly explain Kolaitis and Thakur\u2019s work later).\n1\nThe optimisation problems considered in the papers above are (polynomially-\nbounded) NP-optimisation problems. The class of (polynomially-bounded) P-\noptimisation problems is an important sub-class of optimisation problems. Typ-\nical of P-optimisation problems are the maximum unit flow problem, the maxi-\nmum 2-satisfiability problem, the minimum shortest-path problem and the min-\nimum cut problem. In [16], Manyem attempted to logically capture the class\nof polynomially-bounded P-optimisation problems by utilizing a fragment of\nexistential second-order logic (where the first-order part of any formula is a\nuniversally-quantified Horn formula) which is known to capture the class of de-\ncision problems P (on ordered structures; this characterization was due to Gra\u00a8del\n[6]). As we demonstrate here, proceeding as Manyem suggests results in failure\n(assuming that P 6= NP), for there are polynomially-bounded optimisation prob-\nlems that can be expressed within his logical framework but whose associated\ndecision problems are NP-complete (by definition, an NP-optimisation problem\nis a P-optimisation problem if its associated decision problem is in P). However,\nwe present a new framework based around inflationary fixed-point logic and\nwhere we use the inductive depth of an inflationary fixed-point as a mechanism\nby which to compute the values of the objective functions of the instances of\nour optimisation problems. We show that the classes of polynomially-bounded\nP-maximisation problems and polynomially-bounded P-minimisation problems\ncan be captured within our framework.\nIn the next section we give definitions as regards optimisation problems rele-\nvant to this paper, we explain Kolaitis and Thakur\u2019s logical frameworks and their\nmain results, and we present Manyem\u2019s logical framework for the attempted\ncharacterization of classes of polynomially-bounded P-optimisation problems.\nIn Section 3, we prove that Manyem\u2019s logical framework does not yield log-\nical characterizations of the classes of polynomially-bounded P-maximisation\nand polynomially-bounded P-minimisation problems, before presenting a new\nlogical framework in Section 4 which enables us to logically characterize these\nclasses of optimisation problems. Our conclusions and directions for further\nresearch are presented in Section 5.\n2 A framework for classification\nIn this section, we define classes of (non-deterministic polynomial-time) opti-\nmisation problems and provide logical frameworks for the classification of such\nproblems. These classes and frameworks come from [13, 14, 17, 18]. Further-\nmore, we present some classification results from [13, 14]. In addition, we refine\ndefinitions and notions from [1, 16]. In particular, we define classes of (deter-\nministic) polynomial-time optimisation problems and we explain how the logical\nframework presented in [1, 16], together with the subsequent analysis, was some-\nwhat incongruous.\n2\n2.1 P-optimisation problems\nWe begin by defining what we mean by a polynomial-time optimisation problem,\nor P-optimisation problem for short.\nDefinition 1 A maximisation problem (resp. minimisation problem) Q is a\n4-tuple (I,F , f, opt) where:\n1. I is the set of instances of Q, with I recognisable in polynomial-time;\n2. F is the set of feasible solutions to some instance of I, where we denote\nby F(I) the set of feasible solutions to instance I;\n3. f : I \u00d7 F \u2192 N \u222a {\u22a5} is the objective function, and is such that:\n\u2022 f(I, J) = \u22a5 if, and only if, J 6\u2208 F(I);\n\u2022 there is a polynomial pf such that f(I, J) is computable in time\npf (|I|);\n4. for any instance I \u2208 I, if F(I) is non-empty then opt(I) = max{f(I, J) :\nJ \u2208 F(I)} (resp. opt(I) = min{f(I, J) : J \u2208 F(I)}), and if F(I) is empty\nthen opt(I) = \u22a5.\nThe class of optimisation problems consists of the class of maximisation problems\nin union with the class of minimisation problems. The maximisation (resp.\nminimisation) problem Q is a P-maximisation problem (resp. P-minimisation\nproblem) if:\n5. the problem of deciding whether a given instance I \u2208 I and a given\ninteger m are such that there exists a feasible solution J \u2208 F(I) such that\nf(I, J) \u2265 m (resp. f(I, J) \u2264 m) can be solved in polynomial-time.\nThe class of P-optimisation problems Popt is the class of P-maximisation prob-\nlems Pmax in union with the class of P-minimisation problems Pmin. The classes\nof NP-optimisation problems NPopt, NP-maximisation problems NPmax, and\nNP-minimisation problems NPmin are defined analogously except that in condi-\ntion 5 \u2018non-deterministic polynomial-time\u2019 replaces \u2018polynomial-time\u2019. We refer\nto the problem in condition 5 as the decision version of Q.\nImportantly, for us the solution of an optimisation problemQ = (I,F , f, opt)\nis an algorithm that given any instance I of the problem, produces as output\nthe value opt(I) and not (necessarily) an optimal feasible solution from F(I) (if\nthere is one). In fact, this algorithm need not even work with representations of\nfeasible solutions; all it has to do is to come up with the optimal value. Note that\nall problems Q = (I,F , f, opt) in Popt can be solved in polynomial-time, for:\ngiven any instance I of size n and any feasible solution J \u2208 F(I), by definition\nf(I, J) is O(2p(n)), where p is some polynomial; and repeating the algorithm in\ncondition 5 in tandem with a binary search yields a polynomial-time algorithm\nthat computes opt(I).\nWe have three remarks.\n3\nRemark 2 Note that Definition 1 implies that all feasible solutions to some\ninstance can be taken to have size bounded by some polynomial in the size of\nthe instance. Given that our notion of a solution of an optimisation problem\nis such that a numeric value should be found and not a witnessing feasible\nsolution, there is no real need to discuss the computational nature of a set of\nfeasible solutions corresponding to some instance. In particular, Definition 1\nsays nothing about the complexity of deciding whether some potential feasible\nsolution is indeed an actual feasible solution to some instance. It turns out that\nmost (instances of) natural optimisation problems have easily recognizable sets\nof feasible solutions.\nRemark 3 The reader will have noted that according to Definition 1, every\noptimisation problem is in fact an NP-optimisation problem, and so condition\n5 is redundant when defining an NP-optimisation problem. However, we have\nincluded it as it appears in analogous definitions in [13, 14]; for in these defi-\nnitions the objective function is defined to be computable in time polynomial\nin the size of the input, i.e., the instance and a feasible solution, rather than\nin the size of the instance. Our notion of an optimisation problem is such that\nevery feasible solution to some instance necessarily has size bounded by some\npolynomial in the size of the instance, whereas in [13, 14] there is scope for con-\nsidering optimisation problems whose instances have feasible solutions of size\nexponential in the size of the instance. As far as we know, such optimisation\nproblems have never been considered.\nRemark 4 We should point out that Manyem\u2019s definition of a P-optimisation\nproblem in [16], and subsequently in [1], is slightly different from that in Defi-\nnition 1, for Manyem had an extra condition, namely that:\n6\u2032. the problem of computing an optimal solution for a given instance I of Q\ncan be solved in time polynomial in |I|.\nWe have dropped this condition as we feel that the condition is not intrinsic to\nour notion of the solution of an optimisation problem (for us, and as is the case\nin [13, 14], we are only concerned with whether solutions of certain sizes exist\nand not with actually exhibiting such solutions). We wish our P-optimisation\nproblems to be analogous to the NP-optimisation problems of [13, 17, 18] where\nno such condition exists. Indeed, imposing such a condition in the context\nof NP is somewhat problematic as not only would we be asking for a non-\ndeterministic polynomial-time transducer but checking optimality would provide\ndifficulties too. Dropping Manyem\u2019s additional condition provides for a more\nappropriate analysis. (Note that the conditions 1 \u2013 5 and 6\u2032, above, mirror\nManyem\u2019s conditions (i) \u2013 (vi) in [16].)\n2.2 Polynomially-bounded P-optimisation problems\nThe classes defined in the following definition play an important role (as we\nshall explain soon).\n4\nDefinition 5 An optimisation problem Q is polynomially-bounded if there is a\npolynomial q such that for every instance I of Q, opt(I) \u2264 q(|I|) (we reiterate\nthat in general the value opt(I) might be exponential in |I|). We denote the class\nof polynomially-bounded P-optimisation problems by PPBopt , the (sub-)class of\npolynomially-bounded P-maximisation problems by PPBmax, and the (sub-)class of\npolynomially-bounded P-minimisation problems by PPBmin. There are analogous\ndefinitions of NPPBopt , NP\nPB\nmax, and NP\nPB\nmin.\nWe now mention some examples of optimisation problems.\nExample 6 Consider the maximum flow problem MAXUNITFLOW = (I,F ,\nf, opt), where:\n\u2022 I is the set of triples (G, s, t), with G a digraph and s and t two distinct\nvertices of G, where s has in-degree 0 and t has out-degree 0, so that all\nedges are assumed to have unit capacity;\n\u2022 F((G, s, t)) is the set of all possible flows for (G, s, t);\n\u2022 f(I, J), for some instance I and for some feasible solution J \u2208 F(I), is\nthe size of the flow J .\nIt is well-known that the decision version of MAXUNITFLOW is in P (see, e.g.,\n[2]); thus, MAXUNITFLOW \u2208 Pmax. In fact, MAXUNITFLOW \u2208 P\nPB\nmax.\nExample 7 Consider the maximum 2-satisfiability problem MAX2SAT = (I,\nF , f, opt), where:\n\u2022 I is the set of conjunctive normal form formulae \u03d5 where every clause has\n2 literals;\n\u2022 F(\u03d5) is the set of truth assignments on the Boolean variables involved in\n\u03d5;\n\u2022 f(I, J), for some instance I and for some feasible solution J \u2208 F(I), is\nthe number of clauses of I made true under the truth assignment J .\nIt is well-known that the decision version of MAX2SAT is NP-complete (see,\ne.g., [5]). Hence, MAX2SAT is in NPPBmax (and not in Pmax unless P = NP).\nIf we define MAXHORN2SAT just as was MAX2SAT except that all instances\nare in addition Horn formulae then thanks to a result in [10] where the decision\nversion of MAXHORN2SAT was shown to be NP-complete, we obtain that\nMAXHORN2SAT is in NPPBmax and unlikely to be in P\nPB\nmax. However, if we\ndefine the problem MAX2SAT(\u22642) by restricting instances of MAX2SAT so\nthat every variable appears in at most 2 clauses then as the decision version of\nMAX2SAT(\u22642) can be solved in linear time [19], MAX2SAT(\u22642) is in PPBmax.\nExample 8 Consider the minimum shortest-path problem MINSP = (I,F , f,\nopt), where:\n5\n\u2022 I is the set of triples (G, s, t), with G a digraph and s and t two distinct\nvertices of G;\n\u2022 F((G, s, t)) is the set of all possible paths in G from s to t;\n\u2022 f(I, J), for some instance I and for some feasible solution J \u2208 F(I), is\nthe length of the path J .\nIt is well-known that the decision version of MINSP is in P (see, e.g., [2]); thus,\nMINSP \u2208 PPBmin.\nHenceforth, we define the maximum or the minimum of the empty set as\nbeing \u22a5.\n2.3 Using logic to classify NP-optimization problems\nWe begin with some basic definitions. For us, a signature \u03c3 is a finite tuple\nof relation symbols R1, R2, . . . , Rr, where each Ri has arity ai, and constant\nsymbols C1, C2, . . . , Cc. A finite structure over \u03c3, or \u03c3-structure, A of size n,\nwhere n \u2265 2, consists of a domain, or universe, {0, 1, . . . , n\u2212 1} and a relation\nRi of arity ai (resp. constant Cj), for every relation symbol Ri (resp. constant\nsymbol Cj) in \u03c3 (it causes no confusion that we do not differentiate between\nrelations and relation symbols, and constants and constant symbols). We denote\nboth the size and the domain of a structure A as |A| (again, this causes no\nconfusion). Let \u03c3 and \u03c4 be signatures with no symbols in common. Suppose\nthat A is a \u03c3-structure and B is a \u03c4 -structure with |A| = |B|. The \u03c3 \u222a \u03c4 -\nstructure (A,B) has domain that of A (and B) with relations and constants\ncorresponding to symbols from \u03c3 (resp. \u03c4) inherited from A (resp. B). If\n\u03c4 = \u3008S1, S2, . . . , St\u3009, where each Si is a relation symbol, then we sometimes\ndenote (A,B) by (A, S1, S2, . . . , St). A problem is an isomorphism-closed set of\nfinite structures over some fixed signature; so, a problem refers to a decision\nproblem (as opposed to an optimisation problem). Of particular interest to us\nis a successor relation; that is, a binary relation over some domain of size n\nwhere this relation is of the form\n{(a0, a1), (a1, a2), . . . , (an\u22122, an\u22121) : all ai\u2019s are distinct}.\nWe assume that the reader is familiar with using first-order logic FO and second-\norder logic SO to define problems (we refer the reader to texts such as [3, 7, 9,\n15]).\nHenceforth, all instances of some optimisation problem are finite structures\nA over some fixed signature, \u03c3 say, and we say that such an optimisation prob-\nlem is over \u03c3. We make no assumptions as regards the feasible solutions of\nsome instance although in practice they tend to be structures over some (fixed)\nsignature. Such a framework fully captures all of the optimisation problems\nfrom the previous section, for if one formally considers instances of optimisation\nproblems as strings of symbols (as one must if one is to classify the solution of\n6\noptimisation problems using a device like a Turing machine) then strings over\nan alphabet consisting of m symbols, say, can be considered as finite structures\nover a signature consisting of m unary relation symbols and a binary relation\nsymbol where the corresponding binary relation of any structure is a successor\nrelation, detailing an ordering of the elements of the structure, and for every\nelement in the domain of the structure, exactly one of the unary relations holds.\nHowever, adopting our logical framework allows us to consider optimisation\nproblems via a more natural representation than strings; for example, an op-\ntimisation problem whose instances are digraphs is more naturally described\nusing a binary relation encoding adjacency matrices than as a string denoting\nthe concatenation of the rows of adjacency matrices.\nIn [13], Kolaitis and Thakur characterized the classes of polynomially-bound-\ned NP-maximization problems NPPBmax and polynomially-bounded NP-minimiz-\nation problems NPPBmin.\nTheorem 9 (Kolaitis and Thakur [13]) Let Q = (I,F , f, opt) be a max-\nimisation problem over \u03c3. The following are equivalent.\n1. Q is a polynomially-bounded NP-maximization problem, i.e., Q \u2208 NPPBmax.\n2. There exists a signature \u03c4 , consisting solely of relation symbols and disjoint\nfrom \u03c3, and a first-order formula \u03d5(x) over \u03c3 \u222a \u03c4 , where x is a k-tuple of\nvariables, for some k, such that for every instance A \u2208 I:\nopt(A) = max\nB\n{|{u \u2208 |A|k : (A,B) |= \u03d5(u)}|},\nwhere B ranges over all \u03c4 -structures of size |A|.\nMoreover, if one of the above conditions holds then the formula \u03d5, above, can\nbe taken to be a \u03a02-formula.\nTheorem 10 (Kolaitis and Thakur [13]) Let Q = (I,F , f, opt) be a min-\nimisation problem over \u03c3. The following are equivalent.\n1. Q is a polynomially-bounded NP-minimization problem, i.e., Q \u2208 NPPBmin.\n2. There exists a signature \u03c4 , consisting solely of relation symbols and disjoint\nfrom \u03c3, and a first-order formula \u03d5(x) over \u03c3 \u222a \u03c4 , where x is a k-tuple of\nvariables, for some k, such that for every instance A \u2208 I:\nopt(A) = min\nB\n{|{u \u2208 |A|k : (A,B) |= \u03d5(u)}|},\nwhere B ranges over all \u03c4 -structures of size |A|.\nMoreover, if one of the above conditions holds then the formula \u03d5, above, can\nbe taken to be a \u03a32-formula.\n7\nNote that in Theorems 9 and 10 a \u03c4 -structure B (of size |A|) need not correspond\nto a feasible solution of A as is defined in Q.\nThe class of (logically-defined) maximisation problems defined in Theorem 9\nis called MAX \u03a02 and the class of minimisation problems defined in Theorem 10\nis called MIN \u03a32, with the notation derived from the syntax of the defining\nfirst-order formula. By imposing suitable restrictions upon the formula \u03d5 in\nTheorems 9 and 10, one obtains classes such as MAX \u03a0i, MAX \u03a3i, MIN \u03a0i,\nand MIN \u03a3i, for i \u2265 0. Obviously, NP\nPB\nmax = MAX \u03a02 = MAX \u03a0i and NP\nPB\nmin =\nMIN \u03a32 = MIN \u03a3i, for all i \u2265 2. In fact, Kolaitis and Thakur also proved the\nfollowing result.\nTheorem 11 (Kolaitis and Thakur [13])\n\u2022 MAX \u03a30 \u2282 MAX \u03a31 \u2282 MAX \u03a01 = MAX \u03a32 \u2282MAX \u03a02 = NP\nPB\nmax.\n\u2022 MIN \u03a30 = MIN \u03a31 \u2282MIN \u03a01 = MIN \u03a32 = MIN \u03a02 = NP\nPB\nmin.\nKolaitis and Thakur observed in [14] that many natural optimisation problems\nare such that a feasible solution to an instance is a finite set of relations satisfying\na first-order sentence and that the objective function is the cardinality of one of\nthese relations. Consequently, Kolaitis and Thakur went on in [14] to vary their\nlogical framework slightly. They defined the following classes of optimisation\nproblems. Note that for a relation X , we write |X | to denote the number of\ntuples in X .\nDefinition 12 Let Q = (I,F , f, opt) be a maximisation problem over \u03c3 and\nlet i \u2265 1. The optimisation problem Q is in MAX F\u03a0i if, and only if, there\nexists a \u03a0i (first-order) sentence \u03d5 over \u03c3 \u222a \u03c4 , where \u03c4 = \u3008S1, S2, . . . , St\u3009 and\nwhere each Sj is a relation symbol not appearing in \u03c3, with the property that\nfor every instance A of I:\nopt(A) = max\nB\n{|S1| : (A,B) |= \u03d5},\nwhere B ranges over all \u03c4 -structures of size |A|.\nThe classes MAX F\u03a3i, MIN F\u03a0i, and MIN F\u03a3i, for i \u2265 1, are defined analo-\ngously.\nKolaitis and Thakur [14] showed that these new classes of optimisation prob-\nlems are closely related to the classes discussed earlier.\nTheorem 13 (Kolaitis and Thakur [14])\nMAX \u03a30\nMAX F\u03a31\n}\n\u2282 MAX \u03a31 \u2282MAX \u03a01 = MAX F\u03a01 = MAX \u03a32\n= MAX F\u03a32 \u2282MAX \u03a02 = MAX F\u03a02 = NP\nPB\nmax.\nMIN \u03a30 = MIN \u03a31 = MIN F\u03a01\nMIN F\u03a31\n}\n\u2282 MIN F\u03a32 \u2282 MIN F\u03a02 = MIN \u03a01\n= MIN \u03a32 = MIN \u03a02 = NP\nPB\nmin.\nThe bracketing used in the statement of Theorem 13 is to denote that the classes\nare incomparable.\n8\n2.4 Manyem\u2019s framework for P-optimization problems\nInspired by the work of Kolaitis and Thakur, in [16] Manyem (and subse-\nquently with Bueno in [1]) attempted to provide a suitable logical framework\nto characterize the classes of polynomially-bounded P-maximisation problems\nand polynomially-bounded P-minimisation problems. Whereas Kolaitis and\nThakur\u2019s logical framework had been derived from Fagin\u2019s seminal characteri-\nzation of NP as the class of problems definable in existential second-order logic\n[4], Bueno and Manyem tried to take Gra\u00a8del\u2019s characterization of P [6] as the\nclass of problems definable in a particular fragment of existential second-order\nlogic as their inspiration. We shall now describe Gra\u00a8del\u2019s result.\nWe say that a quantifier-free first-order formula over \u03c3 \u222a \u03c4 , where \u03c4 consists\nentirely of relation symbols and is disjoint from \u03c3, is a Horn formula over\n(\u03c3, \u03c4) if it is a conjunction of clauses where each clause contains at most one\npositive atom involving a symbol from \u03c4 . The logic \u2203SO-Horn is the fragment\nof existential second-order logic consisting of all formulae over some signature\n\u03c3 of the form:\n\u2203S1\u2203S2 . . .\u2203St\u2200y1\u2200y2 . . .\u2200ym\u03d5,\nwhere each Si is a relation symbol not in the underlying signature \u03c3, each\nyj is a (first-order) variable, and \u03d5 is a Horn formula over (\u03c3, \u03c4), where \u03c4 =\n\u3008S1, S2, . . . , St\u3009. We say that a logic L describes , or captures , a class of (deci-\nsion) problems C in the presence of a built-in successor relation, or on ordered\nstructures , if the following are equivalent:\n\u2022 the problem \u2126, over the signature \u03c3, is in C;\n\u2022 there is a sentence \u03a6 of L over the signature \u03c3 \u222a \u3008succ,min,max\u3009, where\nsucc is a binary relation symbol not in \u03c3 and min and max are constant\nsymbols not in \u03c3, such that:\n\u2013 for every \u03c3-structure A, as to whether the expansion of A by a suc-\ncessor relation succ and constants min and max, so that min (resp.\nmax) is the minimal (resp. maximal) element of the linear order de-\nscribed by succ, satisfies \u03a6 is independent of the particular successor\nrelation chosen (that is, \u03a6 is order invariant);\n\u2013 for every \u03c3-structure A, A \u2208 \u2126 if, and only if, the expansion of A by\nsome successor relation succ and corresponding constants min and\nmax satisfies \u03a6.\nFor more on built-in successor relations, we refer the reader to [3, 7, 9, 15].\nOne bit of notational convenience we use is that when we talk of a sentence of\nsome logic over some signature \u03c3 in the presence of a built-in successor relation,\nwe suppress mention of the binary relation symbol succ and the two constant\nsymbolsmin andmax even though they are present and need to be instantiated\nwith some successor relation and two constants in order for us to interpret the\nsentence in some \u03c3-structure. Also, when we say that a (quantifier-free first-\norder) formula is a Horn formula over (\u03c3, \u03c4) then we impose no conditions as\n9\nregards the occurrence of atoms involving the relation symbol succ and the\nconstant symbols min and max (unless min or max appears in some atom\ninvolving a relation symbol from \u03c4).\nTheorem 14 (Gra\u00a8del [6]) A problem is in P if, and only if, it can be defined\nby a sentence of \u2203SO-Horn in the presence of a built-in successor relation.\nIn [16], Manyem gave a definition of a P-optimisation problem and a logical\nframework within which to try and capture the classes of polynomially-bounded\nP-maximisation problems and polynomially-bounded P-minimisation problems.\nAs we have already mentioned, his definition of a P-optimisation problem was\nat variance with the definition to be expected should one proceed analogously to\nrelated research on (NP) optimisation problems, mentioned above. In Theorem\n3 of [16] he claims that every polynomially-bounded P-maximisation problem\nQ = (I,F , f, opt) over \u03c3 (according to his definition) is such that there exists a\nsignature \u03c4 consisting of only relation symbols and disjoint from \u03c3 and a Horn\nformula \u03d5(y) over (\u03c3, \u03c4), where y is the tuple of free variables of \u03d5, such that\nfor every instance A \u2208 I:\nopt(A) = max\nB\n|{u : (A,B,u) |= \u2200x1\u2200x2 . . .\u2200xk\u03d5(y)}|,\nwith B ranging over all \u03c4 -structures with domain |A| and u detailing values\nfor the variables of y. Manyem made a similar claim relating to polynomially-\nbounded P-minimisation problems in Theorem 10 of [16]. Manyem allowed for\nthe use of a built-in successor relation in the formula \u03d5, above, but did not\nexplain how \u03d5(y) might be order-invariant; consequently, he left open the pos-\nsibility that |{u : (A,B,u) |= \u2200x1\u2200x2 . . .\u2200xk\u03d5(y)}| might vary depending upon\nthe particular successor relation chosen. Manyem made no claims as regards\nthe converse direction; that is, whether optimisation problems definable in the\nabove logical form are necessarily polynomially-bounded P-optimisation prob-\nlems. Manyem attempted to demonstrate the efficacy of his framework by defin-\ning within it the problems MAXUNITFLOW and MINSP (see Examples 2.1.2\nand 2.2.1 of [16])). Unfortunately there were errors in both definitions (with\nreference to [16]: the original formula in (25) is not equivalent to a universally\nquantified set of Horn clauses; nor is the formula \u03d55 at the bottom of page 17).\nIn the next section, we show howManyem\u2019s framework cannot hope to be used to\nlogically capture the class of polynomially-bounded P-maximisation problems\nor the class of polynomially-bounded P-minimization problems (in an analo-\ngous fashion to the characterizations of the classes of polynomially-bounded\nNP-maximisation and polynomially-bounded NP-minimisation problems as ob-\ntained by Kolaitis and Thakur).\n3 The failure of Manyem\u2019s framework\nWe show how any framework defined in accordance with that proposed by\nManyem will not suffice to characterize the classes of polynomially-bounded\n10\nP-maximisation problems and polynomially-bounded P-minimisation problems.\nWe remind the reader of the maximisation problemMAXHORN2SAT of NPPBmax:\nan instance of MAXHORN2SAT consists of a set of clauses where each clause is\na Horn clause involving at most 2 literals; a feasible solution to such an instance\nis a truth assignment on the underlying Boolean variables; and the objective\nfunction is the number of clauses of the instance satisfied by the given truth as-\nsignment. The decision version of the maximisation problem MAXHORN2SAT\nwas proven to be NP-complete in [10].\nTheorem 15 There exists a polynomially-bounded maximisation problemQ =\n(I,F , f, opt) such that:\n\u2022 Q is over \u03c3 = \u3008H,Z\u3009, where H is a relation symbol of arity 4 and Z is a\nconstant symbol, with I the set of \u03c3-structures;\n\u2022 \u03c4 = \u3008P, T \u3009, where P and T are both relation symbols of arity 1, so that\nthe set of feasible solutions F(A) to some instance A \u2208 I is the set of\n\u03c4 -structures with domain |A|;\n\u2022 \u03d5 is a Horn formula over (\u03c3, \u03c4) with free variables x1, x2, x3, y, so that\ngiven some instance A \u2208 I and some feasible solution B \u2208 F(I),\nf(A,B) = |{u : (A,B, u) |= \u2200x1\u2200x2\u2200x3\u03d5(y)}|;\n\u2022 the decision version of Q is NP-complete.\nProof Let I be an instance of the decision version of MAXHORN2SAT of\nsize n; so, w.l.o.g. I involves clauses C1, C2, . . . , Cn and Boolean variables\nX1, X2, . . . , Xn. Every clause is of one of the following forms:\n(i) Xi \u21d2 Xj\n(ii) Xi \u2227Xj \u21d2 false\n(iii) true \u21d2 Xi\n(iv) Xi \u21d2 false.\nDefine the signature \u03c3 = \u3008H,Z\u3009, where H is a relation symbol of arity 4 and\nZ is a constant symbol, and the signature \u03c4 = \u3008P, T \u3009, where P and T are\nboth relation symbols of arity 1. Let \u03a6(I) be the \u03c3-structure with domain\n{0, 1, . . . , n}, with the constant Z = 0 and with the relationH defined as follows:\n(i) if clause Ck of I is of the form Xi \u21d2 Xj then (i, 0, j, k) \u2208 H ;\n(ii) if clause Ck of I is of the form Xi \u2227Xj \u21d2 false then (i, j, 0, k) \u2208 H ;\n(iii) if clause Ck of I is of the form true \u21d2 Xi then (0, 0, i, k) \u2208 H ;\n(iv) if clause Ck of I is of the form Xi \u21d2 false then (i, 0, 0, k) \u2208 H .\n11\nThis completely defines H .\nDefine the formula \u03a8\u2032 over \u03c3 \u222a \u03c4 as\n\u2200x1\u2200x2\u2200x3(\n((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(x2, Z, x3, x1) \u2227 P (x2) \u2227 \u00acP (x3))\n\u21d2 \u00acT (x1))\n\u2227 ((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(x2, x3, Z, x1) \u2227 P (x2) \u2227 P (x3))\n\u21d2 \u00acT (x1))\n\u2227 ((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(Z,Z, x2, x1) \u2227 \u00acP (x2))\u21d2 \u00acT (x1))\n\u2227 ((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(x2, Z, Z, x1) \u2227 P (x2))\u21d2 \u00acT (x1))\n\u2227 \u00acT (Z)).\nNote that the matrix of \u03a8\u2032 is a Horn formula over (\u03c3, \u03c4).\nWe claim that there exists a truth assignment on X1, X2, . . . , Xn making at\nleast m clauses of I true if, and only if, there exist unary relations P and T over\n{0, 1, . . . , n} such that (\u03a6(I), P, T ) |= \u03a8\u2032 and |T | \u2265 m.\nSuppose that pi is a truth assignment on X1, X2, . . . , Xn making at least m\nclauses of I true. Define\nP = {i : 1 \u2264 i \u2264 n, pi(Xi) = true}\nand\nT = {k : 1 \u2264 k \u2264 n, pi makes clause Ck of I true}.\nThere are 4 cases to consider.\n(i) Suppose that Ck is of the form Xi \u21d2 Xj and that pi makes Ck false ; so,\npi(Xi) = true and pi(Xj) = false . Hence, P (i) and \u00acP (j) hold. Conse-\nquently, H(i, 0, j, k)\u2227 P (i)\u2227 \u00acP (j) holds. Furthermore, \u00acT (k) holds and\nso\n(H(i, 0, j, k) \u2227 P (i) \u2227 \u00acP (j))\u21d2 \u00acT (k) holds.\nIf pi makes Ck true then pi(Xi) = false or pi(Xj) = true, and so at least\none of \u00acP (i) and P (j) holds with the consequence that\n(H(i, 0, j, k) \u2227 P (i) \u2227 \u00acP (j))\u21d2 \u00acT (k) holds.\n(ii) Suppose that Ck is of the form Xi \u2227 Xj \u21d2 false and that pi makes Ck\nfalse ; so, pi(Xi) = true and pi(Xj) = true. Hence, P (i) and P (j) hold.\nConsequently, H(i, j, 0, k)\u2227 P (i) \u2227 P (j) holds. Furthermore, \u00acT (k) holds\nand so\n(H(i, j, 0, k) \u2227 P (i) \u2227 P (j))\u21d2 \u00acT (k) holds.\nIf pi makes Ck true then pi(Xi) = false or pi(Xj) = false, and so at least\none of \u00acP (i) and \u00acP (j) holds with the consequence that\n(H(i, j, 0, k) \u2227 P (i) \u2227 P (j))\u21d2 \u00acT (k) holds.\n12\n(iii) Suppose that Ck is of the form true \u21d2 Xi and that pi makes Ck false; so,\npi(Xi) = false . Hence, \u00acP (i) holds. Consequently, H(0, 0, i, k) \u2227 \u00acP (i)\nholds. Furthermore, \u00acT (k) holds and so\n(H(0, 0, i, k) \u2227 \u00acP (i))\u21d2 \u00acT (k) holds.\nIf pi makes Ck true then pi(Xi) = true, and so P (i) holds with the conse-\nquence that\n(H(0, 0, i, k) \u2227 \u00acP (i))\u21d2 \u00acT (k) holds.\n(iv) Suppose that Ck is of the form Xi \u21d2 false and that pi makes Ck false; so,\npi(Xi) = true. Hence, P (i) holds. Consequently, H(i, 0, 0, k)\u2227P (i) holds.\nFurthermore, \u00acT (k) holds and so\n(H(i, 0, 0, k) \u2227 P (i))\u21d2 \u00acT (k) holds.\nIf pi makes Ck true then pi(Xi) = false , and so \u00acP (i) holds with the\nconsequence that\n(H(i, 0, 0, k) \u2227 P (i))\u21d2 \u00acT (k) holds.\nConsequently, |T | \u2265 m and by definition of H , (\u03a6(I), P, T ) |= \u03a8\u2032.\nConversely, suppose that there exist unary relations P and T over {0, 1, . . . ,\nn} such that (\u03a6(I), P, T ) |= \u03a8\u2032 and |T | \u2265 m (note that \u00acT (0) holds). Define\nthe truth assignment pi on X1, X2, . . . , Xn via\npi(Xi) = true if, and only if, P (i) holds,\nfor all i = 1, 2, . . . , n. Consider the clause Ck of I. Again, there are 4 cases.\n(i) Suppose that T (k) holds and that Ck is of the form Xi \u21d2 Xj ; thus,\nH(i, 0, j, k) holds in \u03a6(I). As (\u03a6(I), P, T ) |= \u03a8\u2032, we must have that\n\u00acP (i) \u2228 P (j) holds. Thus, pi(Xi) = false or pi(Xj) = true and we have\nthat clause Ck of I is true under pi.\n(ii) Suppose that T (k) holds and that Ck is of the form Xi \u2227 Xj \u21d2 false ;\nthus, H(i, j, 0, k) holds in \u03a6(I). As (\u03a6(I), P, T ) |= \u03a8\u2032, we must have that\n\u00acP (i) \u2228 \u00acP (j) holds. Thus, pi(Xi) = false or pi(Xj) = false and we have\nthat clause Ck of I is true under pi.\n(iii) Suppose that T (k) holds and that Ck is of the form true \u21d2 Xi; thus,\nH(0, 0, i, k) holds in \u03a6(I). As (\u03a6(I), P, T ) |= \u03a8\u2032, we must have that P (i)\nholds. Thus, pi(Xi) = true and we have that clause Ck of I is true under\npi.\n(iv) Suppose that T (k) holds and that Ck is of the form Xi \u21d2 false; thus,\nH(i, 0, 0, k) holds in \u03a6(I). As (\u03a6(I), P, T ) |= \u03a8\u2032, we must have that \u00acP (i)\nholds. Thus, pi(Xi) = false and we have that clause Ck of I is true under\npi.\n13\nConsequently, the truth assignment pi makes at least m clauses of I true.\nDefine \u03a8 as \u03a8\u2032 \u2227 T (y), where y is a new variable. Define the maximisation\nproblem Q = (I,F , f, opt) as follows:\n\u2022 an instance of I is a \u03c3-structure;\n\u2022 a feasible solution to an instance A \u2208 I is a \u03c4 -structure whose domain is\n|A|;\n\u2022 the objective function f(A,B), where A \u2208 I and B \u2208 F(A), is given by\n|{u : (A,B, u) |= \u03a8(y)}|.\nWe can clearly construct the instance \u03a6(I) of the decision version of Q from\nthe instance I of the decision version of MAXHORN2SAT in polynomial-time.\nHence, using the result from [10] that the decision version of MAXHORN2SAT\nis NP-complete, we obtain that the decision version of Q is NP-complete too,\nand our result follows.\nThe minimisation problem MINHORN2SAT from [12] (where it was called\n2-MINSAT) is defined exactly as was MAXHORN2SAT except that instead\nof trying to maximise the number of clauses satisfied, we try to minimise the\nnumber of clauses satisfied. It was proven in [12] that the decision version of\nMINHORN2SAT is NP-complete.\nTheorem 16 There exists a polynomially-bounded minimisation problem Q =\n(I,F , f, opt) such that:\n\u2022 Q is over \u03c3 = \u3008H,Z\u3009, where H is a relation symbol of arity 4 and Z is a\nconstant symbol, with I the set of \u03c3-structures;\n\u2022 \u03c4 = \u3008P, T \u3009, where P and T are both relation symbols of arity 1, so that\nthe set of feasible solutions F(A) to some instance A \u2208 I is the set of\n\u03c4 -structures with domain |A|;\n\u2022 \u03d5 is a Horn formula over (\u03c3, \u03c4) with free variables x1, x2, x3, y, so that\ngiven some instance A \u2208 I and some feasible solution B \u2208 F(I),\nf(A,B) = |{u : (A,B, u) |= \u2200x1\u2200x2\u2200x3\u03d5(y)}|;\n\u2022 the decision version of Q is NP-complete.\nProof Our proof is very similar to that of Theorem 15 and so we only highlight\nthe essential differences. Adopting the nomenclature of the proof of Theorem 15,\nwe proceed exactly as we did in that proof except that instead of defining \u03a8\u2032\n14\nwe define the formula \u03a8\u2032\u2032 as\n\u2200x1\u2200x2\u2200x3(\n((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(x2, Z, x3, x1) \u2227 (\u00acP (x2) \u2228 P (x3)))\n\u21d2 \u00acT (x1))\n\u2227 ((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(x2, x3, Z, x1) \u2227 (\u00acP (x2) \u2228 \u00acP (x3)))\n\u21d2 \u00acT (x1))\n\u2227 ((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(Z,Z, x2, x1) \u2227 P (x2))\u21d2 \u00acT (x1))\n\u2227 ((x1 6= Z \u2227 x2 6= Z \u2227 x3 6= Z \u2227H(x2, Z, Z, x1) \u2227 \u00acP (x2))\u21d2 \u00acT (x1))\n\u2227 T (Z)).\nNote that the matrix of \u03a8\u2032\u2032 can easily be converted to an equivalent Horn formula\nover (\u03c3, \u03c4).\nWe claim that there exists a truth assignment on X1, X2, . . . , Xn making at\nmost m clauses of I true if, and only if, there exist unary relations P and T\nover {0, 1, . . . , n} such that (\u03a6(I), P, T ) |= \u03a8\u2032\u2032 and |T | \u2265 n+ 1\u2212m.\nSuppose that pi is a truth assignment on X1, X2, . . . , Xn making at most m\nclauses of I true. Define\nP = {i : 1 \u2264 i \u2264 n, pi(Xi) = true}\nand\nT = {k : 1 \u2264 k \u2264 n, pi makes clause Ck of I false} \u222a {0}.\nSuppose that Ck is of the form Xi \u21d2 Xj and that pi makes Ck true. So,\npi(Xi) = false or pi(Xj) = true, and \u00acP (i) or P (j) holds. Thus, H(i, 0, j, k) \u2227\n(\u00acP (i) \u2228 P (j)) holds. Also, \u00acT (k) holds and so\n(H(i, 0, j, k) \u2227 (\u00acP (i) \u2228 P (j)))\u21d2 \u00acT (k) holds.\nIf pi makes Ck false then pi(Xi) = true and pi(Xj) = false, and P (i) and \u00acP (j)\nhold. Thus,\n(H(i, 0, j, k) \u2227 (\u00acP (i) \u2228 P (j)))\u21d2 \u00acT (k) holds.\nThe same reasoning applies in each of the other 3 cases (corresponding to the dif-\nferent forms of Ck). Hence, if there exists a truth assignment on X1, X2, . . . , Xn\nmaking at most m clauses of I true then there exist unary relations P and T\nover {0, 1, . . . , n} such that (\u03a6(I), P, T ) |= \u03a8\u2032\u2032 and |T | \u2265 n+ 1\u2212m.\nConversely, suppose that there exist relations P and T over {0, 1, . . . , n}\nsuch that (\u03a6(I), P, T ) |= \u03a8\u2032\u2032 and |T | \u2265 n+ 1\u2212m. Define the truth assignment\npi on X1, X2, . . . , Xn via\npi(Xi) = true if, and only if, P (i) holds.\nSuppose that T (k) holds and that Ck is of the form Xi \u21d2 Xj ; so, H(i, 0, j, k)\nholds in \u03a6(I). As (\u03a6(I), P, T ) |= \u03a8\u2032\u2032, we must have that P (i) \u2227 \u00acP (j) holds.\n15\nThus, pi(Xi) = true and pi(Xj) = false, with pi making Ck false . The same\nreasoning applies in each of the other 3 cases. Hence, if there exist unary\nrelations P and T over {0, 1, . . . , n} such that (\u03a6(I), P, T ) |= \u03a8\u2032\u2032 and |T | \u2265\nn+1\u2212m then there exists a truth assignment onX1, X2, . . . , Xn making at most\nm clauses of I true (note that T (Z) holds). Thus, there exists a truth assignment\non X1, X2, . . . , Xn making at most m clauses of I true if, and only if, there\nexist unary relations P and T over {0, 1, . . . , n} such that (\u03a6(I), P, T ) |= \u03a8\u2032\u2032\nand |\u00acT | \u2264 m, where \u00acT = {u : \u00acT (u) holds}.\nBy defining \u03a8 as \u03a8\u2032\u2032 \u2227 \u00acT (y) and the minimisation problem Q just as we\ndefined the maximisation problem Q in the proof of Theorem 15, reasoning as\nin the proof of Theorem 15, except using the NP-completeness of the decision\nversion of the problem MINHORN2SAT, yields the result.\nAn immediate consequence of Theorems 15 and 16 is that any framework\nbased around Gra\u00a8del\u2019s characterisation of P using restricted (Horn) formulae of\nexistential second-order logic (as advocated by Manyem) will not characterize\nthe class of polynomially-bounded P-maximisation problems nor the class of\npolynomially-bounded P-minimisation problems (assuming that P 6= NP).\nNote also that when working with polynomially-bounded P-minimisation\nproblems, there is a pronounced difference between the original framework pro-\nposed by Kolaitis and Thakur [13], where in order to obtain the objective\nfunction value we count the number of elements satisfying some formula, and\nthe amended one [14], where we count the cardinality of a witnessing relation\n(Manyem chose to adopt the former framework when he strove for a logical\nclassification of P-optimisation problems in [16]). Whilst MIN F\u03a01 \u2282 MIN\u03a01,\nwith MIN F\u03a01 still containing NP-hard optimisation problems (like VERTEX\nCOVER), if we have some optimisation problem Q = (I,F , f, opt), over \u03c3,\nwhere for every instance A \u2208 I for which F(A) is non-empty,\nopt(A) = max\nB\n{|B0| : (A,B) |= \u2200x1\u2200x2 . . .\u2200xk\u03d5},\nwith \u03d5 a Horn sentence over (\u03c3, \u03c4), B ranging over all \u03c4 -structures with domain\n|A| and B0 a specific relation from B, then Q is indeed a polynomially-bounded\nP-optimisation problem. To see this, simply \u2018expand\u2019 the sentence \u03d5 in any\ninstance A in order to obtain a collection of Horn formulae. If there exists a\nwitnessing set of relations B then there is a unique \u2018minimal\u2019 set of relations B,\ncomputable in polynomial-time. The cardinality of the relation B0 from this set\nof relations B yields the value opt(A). Thus, if we were to adopt the amended\nframework from [14] and Manyem\u2019s approach to obtaining a logical characteri-\nzation of polynomially-bounded P-minimisation problems then it is feasible that\nwe might be able to do so (though we would have to ensure that all defining for-\nmulae were order-invariant, as we explained at the end of Section 2.4). Even this\nrevised framework would fail for polynomially-bounded P-maximisation prob-\nlems, though, as is demonstrated by the proof of Theorem 15 (as always, we\nassume that P 6= NP).\n16\n4 Logically capturing PPBmax and P\nPB\nmin\nIn this section we provide logical characterizations of the classes of polynomially-\nbounded P-maximisation problems and polynomially-bounded P-minimisation\nproblems. The logic we use is not a fragment of existential second-order logic\nbut the well-known inflationary fixed-point logic FO(IFP). We use the induc-\ntive process of building fixed-points in order to provide values for the objective\nfunctions of our optimisation problems.\n4.1 Inflationary fixed-point logic\nLet us begin by reminding the reader as to the definition of the logic FO(IFP)\n(we only provide brief definitions here and refer the reader to any of [3, 7, 9, 15]\nfor more substantive details).\nLet \u03c3 be some signature and let R be a k-ary relation symbol not in \u03c3.\nSuppose that \u03d5(R,x) is some formula of some logic over \u03c3 \u222a \u3008R\u3009 whose free\nvariables are those of the k-tuple x. Let A be some \u03c3-structure. We build the\ninflationary fixed-point of \u03d5(R,x) in A as follows. We define (the k-ary relation)\nR0 over |A| as being the empty set. For i \u2265 1, we define\nRi = {u \u2208 |A|k : Ri\u22121(u) holds or \u03d5(Ri\u22121,u) holds in A}.\nThe inflationary fixed-point of \u03d5(R,x) in A is defined as Ri, where i is the\nleast integer for which Ri = Ri+1, and the inductive depth of this inflationary\nfixed-point is i.\nInflationary fixed-point logic FO(LFP) is built using the usual first-order\nconstructs as well as the IFP operator, which allows us to construct inflationary\nfixed-points. The IFP operator is applied as follows. Suppose that \u03d5 is a formula\nof FO(IFP) over \u03c3 that involves an additional k-ary relation symbol R (not in\n\u03c3) and has free variables those of the k-tuple x and those of the m-tuple y. The\nformula [IFPR,x\u03d5](z) is a formula of FO(IFP), where z is a tuple of variables\nand constant symbols, and the free variables are those of the tuple y together\nwith any variables appearing in z (in particular, the occurrences of the variables\nof x in \u03d5 are bound by the application of IFP). Note that \u03d5 might simply be a\nfirst-order formula or it might already involve applications of the IFP operator.\nLet A be a \u03c3-structure. Assuming that u is a tuple of elements of |A|\nproviding values for the free variables of [IFPR,x\u03d5](z), we say that [IFPR,x\u03d5](z)\nholds in (A,u) if (the interpretation of) z lies in the inflationary fixed-point\nof \u03d5(R,x) in (A,u). We write depth(A,u)([IFPR,x\u03d5]) to denote the inductive\ndepth of the inflationary fixed-point of \u03d5(R,x) in (A,u).\nInflationary fixed-point logic has been extensively studied within finite model\ntheory. Pertinent to this paper is the following result where we denote the logic\nFO(IFP) in the presence of a built-in successor relation by FOs(IFP).\nTheorem 17 (Immerman [8], Vardi [20]) A problem is in P if, and only\nif, it can be defined by a sentence of FOs(IFP). Moreover, any sentence of\nFOs(IFP) is logically equivalent to one of the form [IFPR,x\u03d5](max), where \u03d5 is\n17\nquantifier-free first-order and max is a tuple every component of which is the\nconstant symbol max.\n4.2 Our logical characterisations\nWe now use the inflationary fixed-point logic FOs(IFP) to provide logical char-\nacterisations of the classes of polynomially-bounded P-maximisation problems\nPPBmax and polynomially-bounded P-minimisation problems P\nPB\nmin. However, be-\nfore we do so we need another definition relating to formulae of FOs(IFP). Let \u03d5\nbe a formula of FOs(IFP) over the signature \u03c3\u222a\u3008R\u3009, where R is a k-ary relation\nsymbol, so that the free variables of \u03d5 are those of the k-tuple of variables x.\nWe say that \u03d5(R,x) is depth-invariant if the inductive depth of the inflationary\nfixed-point of \u03d5(R,x) in any \u03c3-structure is independent of the actual underlying\nsuccessor relation.\nTheorem 18 Let Q = (I,F , f, opt) be a maximisation problem over \u03c3. The\nfollowing are equivalent.\n1. Q is a polynomially-bounded P-maximisation problem (i.e., Q \u2208 PPBmax).\n2. There exists some depth-invariant formula \u03d5(R,x) of FOs(IFP) over \u03c3 \u222a\n\u3008R\u3009, where R is a k-ary relation symbol and the free variables of \u03d5 are\nthose of the k-tuple x, such that for any A \u2208 I:\n\u2022 if F(A) is non-empty then A |= [IFPR,x\u03d5](min) and the optimal\nvalue opt(A) is given by depthA([IFPR,x\u03d5])\u2212 1;\n\u2022 if F(A) is empty then A 6|= [IFPR,x\u03d5](min).\nProof Suppose that Q \u2208 PPBmax and let k be such that opt(A) < |A|\nk, for all\nstructures A \u2208 I for which F(A) is non-empty. Let R be a new k-ary relation\nsymbol (that is not in \u03c3). By definition, the decision problem Q\u2032 over \u03c3 \u222a \u3008R\u3009\ndefined as\n{(A, R) : A \u2208 I, R \u2286 |A|k and there is a feasible solution\nB \u2208 F(A) s.t. f(A,B) \u2265 |R|}\nis in P. By Theorem 17, there exists some sentence [IFPS,y\u03c8(R,S,y)](max) of\nthe logic FOs(IFP) for which\n(A, R) \u2208 Q\u2032 if, and only if, (A, R) |= [IFPS,y\u03c8(R,S,y)](max),\nwhere S \/\u2208 \u03c3 is some m-ary relation symbol (and hence y is an m-tuple of\nvariables), and where \u03c8 is quantifier-free first-order over \u03c3 \u222a \u3008R,S\u3009 and has\nfree variables those of the tuple y (note that it is not necessarily the case that\nm = k).\nNow, define the formula \u03d5max(R,x) as:\n[IFPS,y\u03c8(R,S,y)](max) \u2227 (x =min \u2228 \u2203z(x = z+ 1 \u2227R(z)))\n18\n(we write: x = z+1, for example, as short-hand for the quantifier-free first-order\nformula that expresses that x is the successor of z in the lexicographic order on\nk-tuples induced by the built-in successor relation; x = min, for example, as\nshort-hand for x1 = min \u2227 x2 = min \u2227 . . . \u2227 xk = min; and \u2203z, for example,\nas short-hand for \u2203z1\u2203z2 . . .\u2203zk). The formula \u03d5max(R,x) is clearly depth-\ninvariant. We claim that for any \u03c3-structure A \u2208 I for which F(A) is non-\nempty,\nopt(A) = depthA([IFPR,x\u03d5max])\u2212 1.\nSuppose that A \u2208 I with the set of feasible solutions F(I) non-empty;\nconsequently, if R0 is the empty relation then (A, R0) \u2208 Q\u2032; that is, (A, R0) |=\n[IFPS,y\u03c8(R,S,y)](max). Suppose that R\ni is the relation constructed after the\nith iteration of the IFP operator and that:\n\u2022 (A, Ri) |= [IFPS,y\u03c8(R,S,y)](max)\n\u2022 Ri consists of the i smallest k-tuples from |A|k (w.r.t. the lexicographic\nordering induced by the built-in successor relation).\nThus, Ri+1 consists of Ri plus the (i+1)th smallest k-tuple from |A|k. By induc-\ntion, if Ri is the inflationary fixed-point of \u03d5max(R,x) in A then: |R\ni| = i and\ni = depthA([IFPR,x\u03d5max]; and opt(A) = i\u2212 1. Also, A |= [IFPR,x\u03d5max](min).\nAlternatively, suppose that the set of feasible solutions F(I) is empty. So, if\nR0 is the empty relation then (A, R0) 6|= [IFPS,y\u03c8(R,S,y)](max) and A 6|=\n[IFPR,x\u03d5max](min).\nConversely, suppose that Q satisfies the hypothesis in 2. in the statement\nof the theorem. As opt(A) is bounded above by |A|k, for any instance A \u2208 I,\nin order to show that Q is in PPBmax we simply need to show that the decision\nproblem consisting of deciding whether for any given instance A \u2208 I and any\ngiven integer m, opt(A) \u2265 m, is solvable in polynomial-time. However, as\nthe canonical algorithm computing the inflationary fixed-point of the formula\n[IFPR,x\u03d5] in some instance A \u2208 I runs in time polynomial in |A|, we can\neasily augment this algorithm with a clock in order to count the number of\niterative steps, and thus the inductive depth of this inflationary fixed-point, in\npolynomial-time too. Thus, Q \u2208 PPBmax as required.\nTheorem 19 Let Q = (I,F , f, opt) be a minimisation problem over \u03c3. The\nfollowing are equivalent.\n1. Q is a polynomially-bounded P-minimisation problem (i.e., Q \u2208 PPBmin).\n2. There exists some depth-invariant formula \u03d5(R,x) of FOs(IFP) over \u03c3 \u222a\n\u3008R\u3009, where R is a k-ary relation symbol and the free variables of \u03d5 are\nthose of the k-tuple x, such that for any A \u2208 I:\n\u2022 if F(A) is non-empty then A |= [IFPR,x\u03d5](min) and the optimal\nvalue opt(A) is given by |A|k \u2212 depthA([IFPR,x\u03d5]) + 1;\n\u2022 if F(A) is empty then A 6|= [IFPR,x\u03d5](min).\n19\nProof The proof is similar to that of Theorem 18 and so we only include brief\ndetails. We adopt the nomenclature of the proof of Theorem 18 throughout.\nSuppose that Q \u2208 PPBmin and let k be such that opt(A) < |A|\nk, for all\nstructures A \u2208 I for which F(A) is non-empty. Let R be a new k-ary relation\nsymbol. Define the decision problem Q\u2032 over \u03c3 \u222a \u3008R\u3009 as\n{(A, R) : A \u2208 I, R \u2286 |A|k and there is a feasible solution\nB \u2208 F(A) s.t. f(A,B) \u2264 |R|}.\nAs Q\u2032 \u2208 P, by Theorem 17 there exists some sentence [IFPS,y\u03c8\n\u2032(R,S,y)](max)\nof the logic FOs(IFP) for which\n(A, R) \u2208 Q\u2032 if, and only if, (A, R) |= [IFPS,y\u03c8\n\u2032(R,S,y)](max),\nwhere S \/\u2208 \u03c3 is some m-ary relation symbol, y is some m-tuple of variables, and\n\u03c8\u2032 is quantifier-free first-order over \u03c3 \u222a \u3008R,S\u3009 with free variables those of the\ntuple y.\nDefine the formula \u03d5min(R,x) as:\n[IFPS,y\u03c8(R,S,y)](max) \u2227 (x =min \u2228 \u2203z(x = z+ 1 \u2227R(z))),\nwhere \u03c8 is \u03c8\u2032 with every occurrence of an atom involving R replaced with its\nnegation. By reasoning as in the proof of Theorem 18, for any \u03c3-structure A \u2208 I\nfor which F(A) is non-empty, we have that\nopt(A) = |A|k \u2212 depthA([IFPR,x\u03d5min]) + 1\nand the result follows.\nNote that the actual numeric formulae giving the value of an optimal solu-\ntion in Theorems 18 and 19 in terms of the depth of a fixed-point construction\nare to some extent unimportant. All that matters is that they are efficiently\ncomputable, which both formulae are. In consequence, we obtain logical char-\nacterizations of the classes PPBmax and P\nPB\nmin.\n5 Conclusions\nIn this paper we have clarified the applicability of logical frameworks in relation\nto capturing classes of polynomially-bounded NP-optimisation problems. We\nhave seen: that Manyem\u2019s framework does not (and will not) suffice; that there\nare additional differences between the two frameworks proposed by Kolaitis\nand Thakur when one restricts so as to consider P-optimisation problems; and\nthat there does exist an alternative logical framework capturing polynomially-\nbounded P-optimisation problems.\nWe suggest the following as directions for further research. Whilst Manyem\u2019s\nattempt to capture classes of polynomial-time optimisation problems using frag-\nments of existential second-order logic with the first-order quantifier-free part\n20\nrestricted to be a conjunction of Horn clauses has gone awry, it would be in-\nteresting to continue this investigation in relation to the hierarchy results from\nTheorem 13. That is, what happens at the lower end of this hierarchy when\nwe restrict the first-order quantifier-free part of formulae to be a conjunction\nof Horn clauses, or even Krom clauses (a Krom clause is a clause with exactly\n2 literals)? In order to work with the full class of P-optimisation problems,\nwe need some way of sensibly incorporating the built-in successor relation into\nany framework. We surmise that this should be possible but will require some\ntechnical consideration. Of course, there is always the question of the relation-\nships between restricted logically defined classes in the absence of any built-in\nrelations.\nKolaitis and Thakur have shown that there are optimisation problems in\nMIN \u03a01 that are not in MIN F\u03a01, and that both classes contain NP-hard min-\nimisation problems. We have shown that restricting MIN F\u03a01 by enforcing that\nthe quantifier-free part of formulae should be a conjugation of Horn clauses\nyields only P-minimisation problems, whereas doing likewise with MIN \u03a01 can\nyield NP-hard minimisation problems. It would be interesting to better under-\nstand the relationship between the restricted versions of MIN \u03a01 and MIN F\u03a01\n(and between the restricted versions of MAX \u03a01 and MAX F\u03a01, for that mat-\nter).\nFinally, there is no doubt that polynomial-time optimisation problems are\nnot as abundant as NP-optimisation problems, nor do they straddle the P versus\nNP divide as do NP-optimisation problems. Nevertheless, a more wide-ranging\ninvestigation as to the relationship between, for example, P-optimisation prob-\nlems and optimisation problems that can be solved in NC or NL and into alter-\nnative means of logically defining P-optimisation problems is warranted.\nAcknowledgement The authors are indebted to Prabhu Manyem for many\nclarifying conversations as regards his work, undertaken whilst he spent a sab-\nbatical stay in Durham.\nReferences\n[1] Orestes Bueno and Prabhu Manyem. Polynomial-time maximisation\nclasses: syntactic hierarchy. Fundamenta Informaticae, 84(1):111\u2013133,\n2008.\n[2] Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. Introduc-\ntion to Algorithms. MIT Press, 1990.\n[3] Heinz-Dieter Ebbinghaus and Jo\u00a8rg Flum. Finite Model Theory. Mono-\ngraphs in Mathematics. Springer, 1999.\n[4] Ronald Fagin. Generalized first-order spectra and polynomial-time recog-\nnizable sets. In Complexity and Computation, volume 7 of SIAM-AMS\nProceedings, pages 43\u201373, 1974.\n21\n[5] Michael R. Garey and David S. Johnson. Computers and Intractability, A\nGuide to the Theory of NP-Completeness. W. H. Freeman and Company,\n1979.\n[6] Erich Gra\u00a8del. Capturing complexity classes by fragments of second-order\nlogic. Theoretical Computer Science, 101(1):35\u201357, 1992.\n[7] Erich Gra\u00a8del, Phokion G. Kolaitis, Leonid Libkin, Martin Marx, Joel\nSpencer, Moshe Y. Vardi, Yde Venema, and Scott Weinstein. Finite\nModel Theory and Its Applications. Texts in Theoretical Computer Sci-\nence. Springer, 2007.\n[8] Neil Immerman. Relational queries computable in polynomial time. Infor-\nmation and Control, 68(1-3):86\u2013104, 1986.\n[9] Neil Immerman. Descriptive Complexity. Graduate Texts in Computer\nScience. Springer, 1999.\n[10] Brigitte Jaumard and Bruno Simeone. On the complexity of the maximum\nsatisfiability problem for horn formulas. Information Processing Letters,\n26(1):1\u20134, 1987.\n[11] David Johnson. Approximation algorithms for combinatorial problems.\nJournal of Computer and System Sciences, 9(3):256\u2013278, 1974.\n[12] Rajeev Kohli, Ramesh Krishnamurti, and Prakash Mirchandani. The\nminimum satisfiability problem. SIAM Journal of Discrete Mathematics,\n7(2):275\u2013283, 1994.\n[13] Phokion G. Kolaitis and Madhukar N. Thakur. Logical definability of\nNP optimization problems. Information and Computation, 115(2):321\u2013353,\n1994.\n[14] Phokion G. Kolaitis and Madhukar N. Thakur. Approximation properties\nof NP minimization classes. Journal of Computer and System Sciences,\n50(3):391\u2013411, 1995.\n[15] Leonid Libkin. Elements of Finite Model Theory. Texts in Theoretical\nComputer Science. Springer, 2004.\n[16] Prabhu Manyem. Syntactic characterizations of polynomial time optimiza-\ntion classes. Chicago Journal of Theoretical Computer Science, 2008(3):1\u2013\n23, May 2008.\n[17] Alessandro Panconesi and Desh Ranjan. Quantifiers and approximation.\nTheoretical Computer Science, 107(1):145\u2013163, 1993.\n[18] Christos H. Papadimitriou and Mihalis Yannakakis. Optimization, approxi-\nmation, and complexity classes. Journal of Computer and System Sciences,\n43(3):425\u2013440, 1991.\n22\n[19] Venkatesh Raman, Bala Ravikumar, and S. Srinivasa Rao. A simplified NP-\ncomplete MAXSAT problem. Information Processing Letters, 65(1):163\u2013\n168, 1998.\n[20] Moshe Y. Vardi. The complexity of relational query languages. In Pro-\nceedings of 14th ACM Ann. Symp. on the Theory of Computing, pages\n137\u2013146, 1982.\n23\n"}