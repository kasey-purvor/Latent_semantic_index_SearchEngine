{"doi":"10.1016\/j.simpat.2009.02.005","coreId":"138867","oai":"oai:dspace.lib.cranfield.ac.uk:1826\/3552","identifiers":["oai:dspace.lib.cranfield.ac.uk:1826\/3552","10.1016\/j.simpat.2009.02.005"],"title":"Network modelling and simulation tools","authors":["Rahman, Muhammad Azizur","Pakstas, Algirdas","Wang, Frank Zhigang"],"enrichments":{"references":[{"id":38092065,"title":"92618. Big Brother Homepage.","authors":[],"date":"2006","doi":null,"raw":"Big Brother Professional Edition. Quest Software Inc., 8001 Irvine Center Drive, Irvine, CA  92618. Big Brother Homepage. (http:\/\/www.bb4.org\/, 2006)","cites":null},{"id":38092034,"title":"A Better Model for Generating Test Networks\u201d,","authors":[],"date":"1996","doi":"10.1109\/glocom.1996.586131","raw":"M. Doar, \u201cA Better Model for Generating Test Networks\u201d,  Proc. of IEEE Global Telecommunications Conference (GLOBECOM), London, November 1996.","cites":null},{"id":38091985,"title":"Alec Yasinsac. On the Credibility of Manet Simulations.","authors":[],"date":"2006","doi":"10.1109\/comst.2007.4444751","raw":"Todd R. Andel, Alec Yasinsac. On the Credibility of Manet Simulations. Computer Magazine, IEEE Computer Society, July 2006, pp48-54.","cites":null},{"id":38092076,"title":"An Approach to Integration of Network Design and Simulation tools\u201d,","authors":[],"date":"2005","doi":"10.1109\/contel.2005.185845","raw":"Rahman M.A., A. Pakstas and F.Z. Wang. \u201cAn Approach to Integration of Network Design and Simulation tools\u201d, Proc. of the 8th International IEEE Conference on Telecommunications (ConTEL 2005), Zagreb, Croatia, June 15-17, 2005, p173-180.","cites":null},{"id":38092004,"title":"An Ethernet Simulator for Undergraduate Networking\u201d.","authors":[],"date":"1993","doi":"10.1145\/169073.169373","raw":"Barnett III B.L. \u201cAn Ethernet Simulator for Undergraduate Networking\u201d. ACM SIGCSE Bulletin, Vol 25, Issue 1, 1993, p145-150. (Proceedings of the 24th SIGCSE Technical Symposium on Computer Science Education. Indianapolis, Indiana, USA.)","cites":null},{"id":38091988,"title":"An Overview of Some Network Modeling, Simulation & Performance Analysis Tools.\u201d","authors":[],"date":"1997","doi":"10.1109\/iscc.1997.616022","raw":"Humayun Akhtar, \u201cAn Overview of Some Network Modeling, Simulation & Performance Analysis Tools.\u201d Proceedings of the 2nd IEEE Symposium on Computers and Communications (ISCC '97), 1997 p344-348.","cites":null},{"id":38092021,"title":"An Ultra-Scale Simulation Framework\u201d.","authors":[],"date":"2000","doi":"10.1016\/s0743-7315(02)00003-5","raw":"Wilsey P. A. and D. M. Rao. \u201cAn Ultra-Scale Simulation Framework\u201d.  Journal of Parallel and Distributed Computing, January 2000, Vol 10, No 1, 2000, p18-38.","cites":null},{"id":38092032,"title":"and M.Faloutsos, \u201cOn PowerLaw Relationships of the Internet Topology\u201d,","authors":[],"date":"1999","doi":"10.1145\/316194.316229","raw":"C.Faloutsos, P.Faloutsos, and M.Faloutsos, \u201cOn PowerLaw Relationships of the Internet Topology\u201d, Proc. of the ACM SIGCOMM, 1999.","cites":null},{"id":38091991,"title":"B a c h m a n n","authors":[],"date":"1991","doi":"10.1109\/ieeestd.1991.101023","raw":"B a c h m a n n  D . W . ,  M . E .  S e g a l ,  M . D .  S r i n i v a s a n ,  T .  J . Teorey. \u201cNetMod: A Design Tool for Large\u2013Scale Heterogeneous Campus Network\u201d. Center for Information Technology Integration (CITI), University of Michigan. (IEEE J. on Selected Areas in Communications. January 1991, Vol 9, No 1, 1990, p15-24)","cites":null},{"id":38092046,"title":"Binary Sugla, NetMap: A Network Discovery Tool.","authors":[],"date":"1998","doi":null,"raw":"Nelson Tang, Binary Sugla, NetMap: A Network Discovery Tool. Report for Network & Service Management Research Lab, Bell Laboratories, Lucent Technologies, 21 September 1998. (http:\/\/www.cs.ucla.edu\/~tang\/papers\/lucent_discovery.pdf)","cites":null},{"id":38092041,"title":"BRITE: An Approach to Universal Topology Generation\u201d,","authors":[],"date":"2001","doi":"10.1109\/mascot.2001.948886","raw":"Alberto Medina, Anukool Lakhina, Ibrahim Matta, and John Byers, \u201cBRITE: An Approach to Universal Topology Generation\u201d, Proc. of MASCOTS 2001, Cincinnati, OH, August 2001.","cites":null},{"id":38092040,"title":"Brite: Universal topology Generator from a User\u2019s Perspective\u201d,","authors":[],"date":"2001","doi":"10.1109\/mascot.2001.948886","raw":"A. Medina, A. Lakhina, I. Matta,  J. Byers, \u201cBrite: Universal topology Generator from a User\u2019s Perspective\u201d, Technical Report, BUCS-TR-2001-003, April 12, 2001, Boston University. (http:\/\/www.cs.bu.edu\/brite\/ publications\/usermanual.pdf)","cites":null},{"id":38092027,"title":"CoarseGrained Network Simulation for Wide-Area Distributed Systems.","authors":[],"date":"2002","doi":null,"raw":"Syam Gadde, Jeff Chase, Amin M. Vahdat. CoarseGrained Network Simulation for Wide-Area Distributed Systems.  Communication Network and Distributed Systems Modeling and Simulation Conference (CNDS2002), 27-31  January 2002. (http:\/\/www.cs.ucsd.edu\/~vahdat\/papers\/ cnds02.pdf)","cites":null},{"id":38092011,"title":"Comnet III: A Network Simulation Laboratory Environment For A Course In","authors":[],"date":"1998","doi":"10.1109\/fie.1998.738567","raw":"Ahjua S.P. \u201cComnet III: A Network Simulation Laboratory Environment For A Course In Communications Networks\u201d. Frontiers in Education Conference (IEEE\/ASEE conference), Tempe, AZ, 1998. (http:\/\/fie.engrng.pitt.edu\/fie98\/papers\/1205.pdf.)","cites":null},{"id":38092013,"title":"COMNET III: Object-Oriented Network Performance Prediction.","authors":[],"date":"1994","doi":"10.1109\/wsc.1994.717232","raw":"Goble J.G. and R. Mills. COMNET III: Object-Oriented Network Performance Prediction. Proceedings of the 1994 Winter Simulation Conference,  1994, p443-445.","cites":null},{"id":38092012,"title":"Company. \u201cCOMNET III User\u2019s Manual\u201d.","authors":[],"date":"1995","doi":null,"raw":"CACI Products Company.  \u201cCOMNET III User\u2019s Manual\u201d. January 1995.","cites":null},{"id":38092043,"title":"Composable Tool For Network Discovery and Security Analysis.","authors":[],"date":"2002","doi":"10.1109\/csac.2002.1176274","raw":"Giovanni Vigna, Fredrik Valeur, Jingyu. Zhou, Richard A. Kemmerer. Composable Tool For Network Discovery and Security Analysis. 18 th  Annual Computer Security Application Conference, San Diego California, 09\u201313 December, 2002, p14-24. (http:\/\/www.acsac.org\/2002\/papers\/108.pdf).","cites":null},{"id":38092047,"title":"Composable Tool For Network Discovery and Security Analysis\u201d.","authors":[],"date":"2002","doi":"10.1109\/csac.2002.1176274","raw":"Giovanni Vigna, Fredrik Valeur, Jingyu. Zhou, Richard A. Kemmerer, \u201cComposable Tool For Network Discovery and Security Analysis\u201d. 18th Annual Computer Security Application Conference, San Diego ACCEPTED MANUSCRIPT California, 09\u201313 December, 2002, p14-24. (http:\/\/www.acsac.org\/2002\/papers\/108.pdf).","cites":null},{"id":38091999,"title":"Considering Processing Cost in Network Simulators.","authors":[],"date":null,"doi":null,"raw":"Ning Weng, Ramaswary Ramaswary, Tilman Wolf. Considering Processing Cost in Network Simulators. Proc. of Workshop on Models, Methods and Tools for Reproducible Network Research (MoMeTools) in conjunction with ACM SIGCOMM, Karlsruhe, Germany, 25 & 27 August 2003, p47-56.","cites":null},{"id":38092024,"title":"Dummynet Tool. (Site Visited 12.9.2004).","authors":[],"date":null,"doi":null,"raw":"Luigi Rizzo. Dummynet Tool. (Site Visited 12.9.2004). (http:\/\/info.iet.unipi.it\/ ~luigi\/ip_dummynet\/).","cites":null},{"id":38092022,"title":"Dummynet: A Simple Approach to the Evaluation of Network Protocols.","authors":[],"date":"1997","doi":"10.1145\/251007.251012","raw":"Luigi Rizza. Dummynet: A Simple Approach to the Evaluation of Network Protocols. ACM SIGCOMM, Computer Communication Review. January 1997, Vol 27, issue 1, p31-41.","cites":null},{"id":38092019,"title":"Efficient Largescale Process-oriented Parallel Simulations\u201d.","authors":[],"date":"1998","doi":"10.1109\/wsc.1998.745022","raw":"Perumalla K.S. and R.M. Fujimoto. \u201cEfficient Largescale Process-oriented Parallel Simulations\u201d. Proceedings of the 30th Winter Simulation Conference, 1998, p459-466.","cites":null},{"id":38092025,"title":"Ethersim: A Simulator for Application\u2013Level Performance Modeling","authors":[],"date":"1998","doi":"10.1016\/s0169-7552(97)00120-7","raw":"M. Srivastava, Partho Minshra, Prathima Agrawal, G. Nguyen. Ethersim: A Simulator for Application\u2013Level Performance Modeling of Wireless and Mobile ATM Networks. Computer Networks and ISDN Systems, 1998, Vol 29, p2067-2090.","cites":null},{"id":38092039,"title":"Fan Chung, Linyuan Lu, \u201cA Random Graph Model for Massive Graphs\u201d,","authors":[],"date":"2000","doi":"10.1145\/335305.335326","raw":"William Aiello, Fan Chung, Linyuan Lu, \u201cA Random Graph Model for Massive Graphs\u201d, Proc. of the 32nd Annual Symposium on Theory of Computing, 2000.","cites":null},{"id":38092044,"title":"Fremont: A System for Discovering Network Characteristics and","authors":[],"date":"1993","doi":null,"raw":"Davis C. M. Wood, Sean S. Coleman, Michael F. Schwartz, \u201cFremont: A System for Discovering Network Characteristics and Problems.\u201d Proc. of the USENIX Winter Conference, San Diego, California. 25-29 January 1993, p335-348.","cites":null},{"id":38092030,"title":"Giuseppe Lo Re, \u201cComputer Network Topologies: Models and Generation Tools\u201d,","authors":[],"date":"2001","doi":"10.1007\/978-3-540-48507-0_9","raw":"Giuseppe Di Fatta, Giuseppe Lo Presti, Giuseppe Lo Re, \u201cComputer Network Topologies: Models and Generation Tools\u201d,  Technical Report No. 5\/2001, University of Palermo, Italy, July 2001.","cites":null},{"id":38092028,"title":"GloMoSim: A Library for Parallel Simulation of Large-scale Wireless Network\u201d.","authors":[],"date":"1998","doi":"10.1109\/pads.1998.685281","raw":"Zeng X., R. Bagrodia and M. Gerla. \u201cGloMoSim: A Library for Parallel Simulation of Large-scale Wireless Network\u201d. Proceedings of the 12th workshop on Parallel and Distributed Simulation, Banff, Alberta, Canada, 1998, p154-161.","cites":null},{"id":38092074,"title":"HP OpenView Software.","authors":[],"date":"2006","doi":null,"raw":"Hewlett-Packard Company. HP OpenView Software. (http:\/\/www.openview.hp.com, 2006)","cites":null},{"id":38092006,"title":"Introducing MaRS, a Routing Testbed\u201d,","authors":[],"date":null,"doi":"10.1145\/141790.141798","raw":"Alaettinoglu C., Dussa-Zieger, I. Matta,  A.U. Shankar and O. Gudmundsson. \u201cIntroducing MaRS, a Routing Testbed\u201d, ACM SIGCOMM, pp 95-96.","cites":null},{"id":38092042,"title":"KOM ScenGen The Swiss Army Knife for Simulation and Emulation Experiments\u201d,","authors":[],"date":"2003","doi":"10.1007\/978-3-540-40012-7_8","raw":"Oliver Heckmann, Krishna Pandit, Jens Schmitt, Ralf Steinmetz, \u201dKOM ScenGen The Swiss Army Knife for Simulation and Emulation Experiments\u201d, First International Workshop on Multimedia Interactive Protocols and Systems (MIPS), Napoli, Italy, 18-21 November 2003, p91-106.","cites":null},{"id":38092075,"title":"LLC,10 Buck Road,PO Box 130,","authors":[],"date":"2006","doi":null,"raw":"Intermapper. Dartware, LLC,10 Buck Road,PO Box 130,  Hanover, NH 03755-0130 USA. (http:\/\/www.intermapper.com\/, 2006)","cites":null},{"id":38092078,"title":"M.Garofalakis, B.Jai, C.Martin, R.Rastogi, A.Silbershatz, \u201cTopology Discovery in Heterogenous IP Networks: The NetInventory System\u201d,","authors":[],"date":"2004","doi":"10.1109\/tnet.2004.828963","raw":"Y. Breitbart, M.Garofalakis, B.Jai, C.Martin, R.Rastogi, A.Silbershatz, \u201cTopology Discovery in Heterogenous IP Networks: The NetInventory System\u201d, IEEE\/ACM Transactions on Networking, 2004, Vol.12, No 3, p401-414.","cites":null},{"id":38091986,"title":"MANET simulation studies: the incredibles.","authors":[],"date":"2005","doi":"10.1145\/1096166.1096174","raw":"Stuart Kurkowski, Tracy Camp, and Michael Colagross. MANET simulation studies: the incredibles. ACM SIGMOBILE MCCR Vol. 9, Issue 4, pp. 50-61, Oct. 2005.","cites":null},{"id":38092036,"title":"Modeling Internet Topology\u201d,","authors":[],"date":"1997","doi":"10.1109\/35.587723","raw":"K. Calvert, M. Doar, E. Zegura, \u201cModeling Internet Topology\u201d,  IEEE Transactions on Communications, December 1997.","cites":null},{"id":38092015,"title":"Modeling the Global Internte\u201d.","authors":[],"date":"1999","doi":null,"raw":"Cowie J.H., D.M. Nicol and A.T. Ogieliski. \u201cModeling the Global Internte\u201d. Computing in Science and Engineering. Vol 1, Issue 1, 1999, p42-50.","cites":null},{"id":38092035,"title":"Modelling Internet Topology\u201d,","authors":[],"date":"1997","doi":"10.1109\/35.587723","raw":"K. Calvert, M. Doar, and E. Zegura, \u201cModelling Internet Topology\u201d,  IEEE   Communications Magazine, June 1997.","cites":null},{"id":38091989,"title":"Models and Algorithms for Network Planning Tools - Practical Experiences.","authors":[],"date":"2003","doi":null,"raw":"Jukka K. Nurminen. Models and Algorithms for Network Planning Tools - Practical Experiences. System Analysis Laboratory Research Reports, Helsinki University of Technology, May 2003. (http:\/\/lib.hut.fi\/Diss\/2003\/isbn9512265745\/article6.pdf)","cites":null},{"id":38092069,"title":"Nessus Security Scanner. The &quot;Nessus&quot; Project. Nessus Org. Nessus Homepage.","authors":[],"date":"2006","doi":"10.1016\/b978-193183608-1\/50017-3","raw":"Renaud Deraison. Nessus Security Scanner. The &quot;Nessus&quot; Project. Nessus Org.  Nessus Homepage. (http:\/\/nessus.org\/, 2006).","cites":null},{"id":38092067,"title":"NetView discovery tool. IBM Tivoli Netview Software. Tivoli Systems Inc. (http:\/\/www-306.ibm.com\/software\/tivoli\/ products\/ netview\/,","authors":[],"date":"2006","doi":"10.1571\/pr4-30-04cc","raw":"IBM Tivoli NetView discovery tool.  IBM Tivoli Netview Software. Tivoli Systems Inc. (http:\/\/www-306.ibm.com\/software\/tivoli\/ products\/ netview\/, 2006)","cites":null},{"id":38091984,"title":"Network Analysis, Architecture and Design.","authors":[],"date":"2003","doi":"10.1016\/b978-012370480-1\/50006-2","raw":"James, D. McCabe. Network Analysis, Architecture and Design.  Morgan Kaufman Publishers. San Francisco, Inc. Francisco, Ca, 2003.","cites":null},{"id":38091994,"title":"Network Design Tool: TND-Tool\u201d. ComNets Annul Report. Communication Networks,","authors":[],"date":"1996","doi":null,"raw":"Shahbaz M. \u201cNetwork Design Tool: TND-Tool\u201d. ComNets  Annul Report. Communication Networks, Aachen University of Technology, Germany, 1996. (http:\/\/www.comnets.rwth-aachen.de\/report96\/node129. html).","cites":null},{"id":38091987,"title":"Network Modelling and Simulation Tools\u201d,","authors":[],"date":"2007","doi":"10.1016\/j.simpat.2009.02.005","raw":"Rahman M.A., A. Pakstas and F.Z. Wang.   \u201cNetwork Modelling and Simulation Tools\u201d,  Proc. of the 8th EPSRC Annual Postgraduate Symposium on the Convergence of Telecommunications, Networking and ACCEPTED MANUSCRIPT Broadcasting (EPSRC PGNet 2007), Liverpool John Moores University, June 28-29, 2007, Liverpool, UK.","cites":null},{"id":38091996,"title":"Network Planning with a PerformancePrediction Tool\u201d.","authors":[],"date":"1999","doi":null,"raw":"Post. S.D. \u201cNetwork Planning with a PerformancePrediction Tool\u201d. International Journal of Network Management, Vol 9, Issue 3, 1999, p167-173.","cites":null},{"id":38092010,"title":"Network Simulations with OPNET\u201d.","authors":[],"date":"1999","doi":"10.1109\/wsc.1999.823089","raw":"Chang X. 1999. \u201cNetwork Simulations with OPNET\u201d. Proceedings of the 1999 Winter Simulation Conference, Vol 1, 1999, p307-314.","cites":null},{"id":38092001,"title":"Network Simulators, by Sally Floyd.","authors":[],"date":null,"doi":null,"raw":"Network Simulators, by Sally Floyd. (http:\/\/www.icir.org\/models\/simulators.html)","cites":null},{"id":38092073,"title":"Nmap\u2013 Security Scanner,","authors":[],"date":"2006","doi":null,"raw":"Fyodor. Nmap\u2013 Security Scanner, INSECURE.ORG. (http:\/\/www.insecure.org\/nmap\/index.html, 2006).","cites":null},{"id":38092017,"title":"Parallel Simulation Techniques for Large-Scale Networks\u201d.","authors":[],"date":"1998","doi":"10.1109\/35.707816","raw":"Bhatt S. and B. R. Fujimoto. \u201cParallel Simulation Techniques for Large-Scale Networks\u201d. IEEE Communication Magazine, 1998, N8, 1998, p42-49.","cites":null},{"id":38091997,"title":"Resource Configuration and Network Design in extensible Networks\u201d.","authors":[],"date":"2003","doi":null,"raw":"Choi S. \u201cResource Configuration and Network Design in extensible Networks\u201d. PhD Thesis. Department of Computer Science and Engineering, Washington University, 2003. (http:\/\/www.arl.wustl.edu\/~syc1\/web\/paper\/ thesis.pdf)","cites":null},{"id":38092033,"title":"Routing of Multipoint Connections\u201d,","authors":[],"date":"1988","doi":"10.1109\/49.12889","raw":"B. M. Waxman, \u201cRouting of Multipoint Connections\u201d, IEEE Journal of Selected Areas in Communication, Vol. 6, No. 9, December 1988, p1617\u20131622.","cites":null},{"id":38092031,"title":"S.Jamin, S.Shenker, and W.Willinger, \u201cNetwork Topology Generators: Degree-Based vs.","authors":[],"date":"2002","doi":"10.1145\/633025.633040","raw":"H. Tangmunarunkit, R.Govindan, S.Jamin, S.Shenker, and W.Willinger, \u201cNetwork Topology Generators: Degree-Based vs. Structural\u201d, Proc. of the ACM SIGCOMM, 2002.","cites":null},{"id":38092007,"title":"Simulation Large Networks: How Big is Big Enough?\u201d.","authors":[],"date":"2002","doi":"10.1109\/mascot.2003.1240649","raw":"Riley G.F. and M.H. Ammar.  \u201cSimulation Large Networks: How Big is Big Enough?\u201d. Proceedings of 1ST International Conference on Grand Challenge for Modeling and Simulation, San Antonio, TX, 2002, p39-45.","cites":null},{"id":38092020,"title":"Simulation of Ultra-Large Communication Network\u201d.","authors":[],"date":"1999","doi":"10.1109\/mascot.1999.805046","raw":"Wilsey P.A. and D.M. Rao. \u201cSimulation of Ultra-Large Communication Network\u201d. Proceedings of 7th International Symposium on Modeling. Analysis and Simulation of Computer and Telecommunication Systems, MASCOT\u201999, 1999, .p112-119.","cites":null},{"id":38092009,"title":"Simulator \u00a9Copyright","authors":[],"date":"2005","doi":null,"raw":"Wireless IP Simulator \u00a9Copyright 2005 -OSTG Open Source. Technology Group. (http:\/\/sourceforge.net\/projects\/wipsim\/, 2005)","cites":null},{"id":38092038,"title":"Sugih Jamin, \u201cInet: Internet Topology Generator\u201d,","authors":[],"date":"2000","doi":null,"raw":"Cheng Jin, Qian Chen, Sugih Jamin, \u201cInet: Internet Topology Generator\u201d, Technical Report Research Report CSE-TR-433-00, University of Michigan at Ann Arbor, 2000.","cites":null},{"id":38092045,"title":"Tcl Extensions for Network Management Applications.","authors":[],"date":"1995","doi":null,"raw":"J. Schonwalder and H. Langendorfer. Tcl Extensions for Network Management Applications. In Proc. 3rd Tcl\/Tk Workshop, Toronto, Canada, 6-8 July 1995, p279-288.","cites":null},{"id":38092018,"title":"TeD - A Language for Modeling Telecommunication Networks\u201d.","authors":[],"date":"1998","doi":"10.1145\/274084.274085","raw":"Perumalla K., R. Fujimoto and A. Ogielski. \u201cTeD - A Language for Modeling Telecommunication Networks\u201d. ACM SIGMETRICS Performance Evaluation Review, Vol 25, Issue 4, 1998, p4\u201311. ACCEPTED MANUSCRIPT","cites":null},{"id":38092008,"title":"The Georgia Tech Network Simulator.","authors":[],"date":"2003","doi":"10.1145\/944773.944775","raw":"G. F. Riley. The Georgia Tech Network Simulator. Proc. of the ACM SIGCMM 2003 Workshops, Germany, August 2003, p5-12.","cites":null},{"id":38092003,"title":"The Network Workbench: Network Simulation Software for Academic Investigation of","authors":[],"date":"2000","doi":"10.1016\/s1389-1286(99)00133-4","raw":"Pullen J.M.  \u201cThe Network Workbench: Network Simulation Software for Academic Investigation of Internet Concepts\u201d. Computer Networks. Elsevier Science Ltd, March 2000, Vol 3, Issue 3, 2000, p365-378.","cites":null},{"id":38092037,"title":"Topology Modeling, by Sally Floyd.","authors":[],"date":null,"doi":null,"raw":"Topology Modeling, by Sally Floyd. (http:\/\/www.icir.org\/models\/topologies.html)","cites":null},{"id":38092016,"title":"Toward Realistic Million\u2013Node Internet","authors":[],"date":"1999","doi":null,"raw":"Cowie J.H., D.M. Nicol and A.T. Ogieliski. \u201cToward Realistic Million\u2013Node Internet Simulations\u201d. International Conference on Parallel and Distributed Processing Techniques and Applications (PDPTA\u201999), Las Vegas, Nevada, 1999, p2129-2135.","cites":null},{"id":38092026,"title":"Traffic Engineering for Quality of Services in the Internet, at Large Scale.","authors":[],"date":"2000","doi":null,"raw":"David Griffin. Traffic Engineering for Quality of Services in the Internet, at Large Scale. Technical Report, CEC Deliverable Number: 201\/UCL\/bl, TEQUILA Consortium, May 2000.","cites":null},{"id":38092005,"title":"Traffic Engineering for Quality of Services in the Internet, at Large Scale\u201d.","authors":[],"date":"2000","doi":null,"raw":"Griffin D. \u201cTraffic Engineering for Quality of Services in the Internet, at Large Scale\u201d. Technical Report, CEC Deliverable Number: 201\/UCL\/bl, TEQUILA Consortium, 2000.","cites":null},{"id":38091983,"title":"Which network Design Tool Is Right for You?\u201d","authors":[],"date":"2000","doi":"10.1109\/6294.877494","raw":"Bragg A.W. \u201cWhich network Design Tool Is Right for You?\u201d IT Professional, September\/October, 2000, p23-31.","cites":null},{"id":38092000,"title":"Why We Don\u2019t Know How To Simulate the Internet.","authors":[],"date":"1997","doi":"10.1145\/268437.268737","raw":"Vern Paxson, Sally Floyd. Why We Don\u2019t Know How To Simulate the Internet. Proceedings of the 29 th Winter Simulation Conference, December 1997, p1037-1044.","cites":null},{"id":38091990,"title":"Wide Area Network Design: Concepts and Tools for Optimization\u201d.","authors":[],"date":"1989","doi":"10.1109\/mcom.2000.867843","raw":"Cahn R.S. \u201cWide Area Network Design: Concepts and Tools for Optimization\u201d. Morgan Kaufman  Publishers, San Francisco, 1989.","cites":null},{"id":38091993,"title":"XNetMod: A Design Tool for Large-Scale Networks\u201d.","authors":[],"date":"1993","doi":null,"raw":"Deboo K. \u201cXNetMod: A Design Tool for Large-Scale Networks\u201d. CITI Technical Report TR-93-6. University of Michigan, 1993. (http:\/\/www.citi.umich.edu\/techreports\/reports\/citi-tr-93-6.pdf).","cites":null},{"id":38092029,"title":"Zesong Di. QUIPS-II: A Simulation Tool For The Design And Performance Eveluation Of Diffserv-Based Network,","authors":[],"date":"2002","doi":"10.1016\/s0140-3664(02)00028-2","raw":"H. T. Mouftah, Zesong Di. QUIPS-II: A Simulation Tool For The Design And Performance Eveluation Of Diffserv-Based Network, Computer Communications, 1 July, 2002, Vol 25, Issue 11-12, p1125-1131.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2009-07","abstract":"Computer network technologies have been growing explosively and the study in computer networks is being a challenging task. To make this task easy, different users, researchers and companies have developed different network modelling and simulation (MS) tools. These network MS tools can be used in education and research as well as practical purposes. They vary with their characteristics. This paper reviews some of the most important network MS tools developed recently. This paper also shows a classification of the tools used in communications networks","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/138867.pdf","fullTextIdentifier":"http:\/\/hdl.handle.net\/1826\/3552","pdfHashValue":"b8ee96dc374b014b185949aa1ade240608fbcbca","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\noai:dspace.lib.cranfield.ac.uk:1826\/3552<\/identifier><datestamp>2010-04-09T12:30:17Z<\/datestamp><setSpec>hdl_1826_19<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>Network modelling and simulation tools<\/dc:title><dc:creator>Rahman, Muhammad Azizur<\/dc:creator><dc:creator>Pakstas, Algirdas<\/dc:creator><dc:creator>Wang, Frank Zhigang<\/dc:creator><dc:subject>Modelling<\/dc:subject><dc:subject>Network<\/dc:subject><dc:subject>Researcher<\/dc:subject><dc:subject>Simulation<\/dc:subject><dc:subject>Tools<\/dc:subject><dc:description>Computer network technologies have been growing explosively and the study in computer networks is being a challenging task. To make this task easy, different users, researchers and companies have developed different network modelling and simulation (MS) tools. These network MS tools can be used in education and research as well as practical purposes. They vary with their characteristics. This paper reviews some of the most important network MS tools developed recently. This paper also shows a classification of the tools used in communications networks.<\/dc:description><dc:publisher>Elsevier<\/dc:publisher><dc:date>2009-08-06T10:57:18Z<\/dc:date><dc:date>2009-08-06T10:57:18Z<\/dc:date><dc:date>2009-07<\/dc:date><dc:type>Article<\/dc:type><dc:identifier>Muhammad Azizur Rahman, Algirdas Pakstas, Frank Zhigang Wang, Network modelling and simulation tools, Simulation Modelling Practice and Theory, Volume 17, Issue 6, July 2009, Pages 1011-1031<\/dc:identifier><dc:identifier>1569-190X<\/dc:identifier><dc:identifier>http:\/\/hdl.handle.net\/1826\/3552<\/dc:identifier><dc:identifier>http:\/\/dx.doi.org\/10.1016\/j.simpat.2009.02.005<\/dc:identifier><dc:language>en<\/dc:language><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["issn:1569-190X","1569-190x"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2009,"topics":["Modelling","Network","Researcher","Simulation","Tools"],"subject":["Article"],"fullText":"Accepted Manuscript\nReview: Network Modelling and Simulation Tools\nMuhammad Azizur Rahman, Algirdas Pak\u0161tas, Frank Zhigang Wang\nPII: S1569-190X(09)00019-7\nDOI: 10.1016\/j.simpat.2009.02.005\nReference: SIMPAT 781\nTo appear in: Simulation Modeling Practices and Theory\nReceived Date: 19 June 2007\nRevised Date: 9 January 2009\nAccepted Date: 13 February 2009\nPlease cite this article as: M.A. Rahman, A. Pak\u0161tas, F.Z. Wang, Review: Network Modelling and Simulation Tools,\nSimulation Modeling Practices and Theory (2009), doi: 10.1016\/j.simpat.2009.02.005\nThis is a PDF file of an unedited manuscript that has been accepted for publication. As a service to our customers\nwe are providing this early version of the manuscript. The manuscript will undergo copyediting, typesetting, and\nreview of the resulting proof before it is published in its final form. Please note that during the production process\nerrors may be discovered which could affect the content, and all legal disclaimers that apply to the journal pertain.\nACCEPTED MANUSCRIPT \n \n \n \nReview: Network Modelling and Simulation \nTools \nMuhammad Azizur Rahman1, Algirdas Pak\u0161tas1, Frank Zhigang Wang2 \n1, 2London Metropolitan University, 66-220 Holloway Road, London N7 8DB England \n3Cranfield University, Cranfield, Bedfordshire MK43 0AL, England \n1m.rahman@londonmet.ac.uk, 2a.pakstas@londonmet.ac.uk, 3f.wang@Cranfield.ac.uk \n \nAbstract \nComputer network technologies have been growing explosively \nand the study in computer networks is being a challenging task. \nTo make this task easy, different users, researchers and \ncompanies have developed different network modelling and \nsimulation (MS) tools. These network MS tools can be used in \neducation and research as well as practical purposes. They vary \nwith their characteristics. This paper reviews some of the most \nimportant network MS tools developed recently. This paper also \nshows a classification of the tools used in communications \nnetworks. \n \nKey words: \nModelling, Network, Researcher, Simulation, Tools   \nI. INTRODUCTION \nNetwork is a complex mix of applications, communications \nprotocols and link technologies, traffic flows and routing \nalgorithms. It is immensely complex. Network design process \nis a challenging task, requiring designers to balance user \nperformance expectations with costs and capacities. One of \nthe obvious approaches to deal with complexity is the use of \nmodelling and simulation (MS) techniques. There are \ncurrently available various MS tools created by the separate \ncompanies and groups of researchers in academia which are \nintended for use as practical and\/or educational tools for \nnetwork design. There is a need to study the existing network \nMS tools, their functionality, advantages and function \nprocedure and special features. Nearly every general-purpose \nnetwork design tool works the same way [1], sometimes \nhaving complementary features.   \nThe network design process is a challenging task, requiring \ndesigners to balance user performance expectations with costs \nand capacities. External factors, such as government policies \nand regulations, the competitive situation, available \ntechnological services and products are adding complexity to \nthe design process. Organisational strategies, culture and \npolicies also affect the planning and design process. The \namount of human and technical resources in the data \ncommunication functions of the organisation can also \nstrongly affect the choice. Electronic communication is so \nubiquitous in modern business that it is hard to develop an \noverall strategic vision that is comprehensive and at the same \ntime detailed enough to be useful. Additionally, these factors \ncan change and make the planning process even more \ncomplex. The business role of the proposed network \napplication adds extra complexity to planning process.  \nNetwork analysis, architecture and the design process have \nbeen considered art, combining an individual\u2019s particular \nrules on evaluating and choosing network technologies \ntogether with knowledge about how technologies, services \nand protocols can be meaningfully combined [2, p2]. During \nthe network design process, technologies for each area of the \nnetwork are evaluated and chosen, and strategies to connect \nthese technologies across the network are developed.  The \nnetwork design process includes a requirement analysis, flow \nanalysis, logical design, physical design and finally making a \ndecision about addressing and routing [2]. The network \ndesign process may have multiple goals that are often hard to \nformulate, define or compare with each other. In order to \nachieve a good design, it is often essential to build a network \nmodel and apply certain tools to evaluate different scenarios. \nNetwork design is also achieving design goals by applying \nthe trade-off, within constraints to parts of the whole network. \nResearchers typically conduct the simulation using only \none simulation package. Different tools show different results \nwith the same simulation models. There is a wide variation in \ntheir results. It is very hard to assume which tool\u2019s results are \naccurate [3]. This divergence and\/or inconsistent results \nsuggest that one or all of the output might be wrong\/not \nperfect. Basically, no tool is perfect\/accurate as it depends on \nprotocol stack, traffic generation parameters, application, \nusage profile, package difference, incorrect parameter setting \nand improper level of details. Insufficient statistical analysis \nof independent simulation runs and improper data collection \ntechniques can produce ambiguous or inaccurate conclusions. \nSimulation assumptions imposed by the tools always affect \nresearch outcomes. A surveyed was performed on Mobile Ad \nHoc Networking and Computing (MobiHoc) from where \nsignificant Shortfalls were found [4]. The paper [4] presents \nthe results of the survey with the summarize common \nsimulation pitfallsed studies. Thus, it would be useful, if a \nmodel could be analysed using different tools simultaneously.  \nUnfortunately, errors in simulation models or improper data \nanalysis often produce incorrect or misleading results. \nSimulation is a powerful method, but sometimes it has \npitfalls. Generalization and lack of rigor can lead to \nACCEPTED MANUSCRIPT \n \n \n \ninaccuracy, which can result in wrong calculations or \ninappropriate implementation decisions.  \nThis purpose of this paper is to review these MS tools so \nthat researchers can select the right tools for their \nexperiments. Different tools are analysed in this paper and \naccording to their characteristics they are classified. Different \nresearchers classified the network tools in different ways. But \nnone to them extensively considered all of the tools together. \nFor example network discovery tools are not considered. One \n[5] of the papers shows the classifications of the tools. A brief \nreview of the some of the tools is also performed in the paper \n[6].The paper has the following objectives: a) to review recent \nnetwork Modeling and Simulation tools; b) to help researches \nto select the right tools for their needs; and c) to identify \nissues that seem to be open to further research. The \ninformation of tools described in this paper is collected from \nmanual, different papers, and website. Some of the tools from \ndifferent groups (e.g., Brite, Ns-2, Glomosim, Delite, Opnet, \nEthereal, THC-RUT, etc.) are practically tested by the \nauthors.  \n Rest of the paper is organised as follows. Section II \ndescribes the classification of MS tools. Section III, Section \nIV, Section V and Section VI describe the most used and \nrecently developed different kinds of MS tools. Finally, \nSection VII provides conclusions. \nII. CLASSIFICATION OF THE NETWORK MS TOOLS \nThere are different types of network MS tools available and \nthey are used in many ways. According to the uses and \navailability (we analysed 100 tools), the network tools can be \nclassified into four groups: analytical tools, simulation tools, \ntopology discovery tools and topology generation tools. The \npotential candidate tools are considered and selected \naccording to some criteria. The primary criterion is that the \ntools must have text-formatted input and\/or output file(s) so \nthat the information (stored data) of the model can be \nretrieved. The secondary criterion is that the tools have to \nhave rich networking features (e.g. supported description of \nprotocols and applications, various types of networks \n(LAN\/MAN\/WAN); then the usefulness of the tool, i.e., the \noutput of the tools and its analysis capabilities.  Finally, the \navailability of the tools in the market has been considered. \nAnalytical tools help to design a network model and \ncalculate different factors (e.g. reliability, utilisation) of the \nmodel. On the contrary, simulation tools simulate dynamic \nbehaviors (e.g. packet passing, link failure, TCP protocol) of \na network model besides modelling. The topology generation \ntools help to generate small as well as large topologies based \non different algorithms. Finally, the topology discovery tools \nextract the actual network information from an existing \nsystem and map them graphically and\/or in text format. This \ntype of tool is used for network management purposes. \nQuantitative network design tools produce more accurate and \ndefensive results than qualitative methods. On the other hand, \nanalytical tools may design and analyse the network models \nmore efficiently and provide solutions more quickly than a \nsimulation tool but do not always achieve the required \naccuracy. Most often, the dynamic behaviour of the protocol \ncannot be visualised using the analytical tools but can be \nvisualised using simulation. The topology which is generated \nor discovered by a specialised tool can be visualised and \nanalysed by simulation and analytical tools. \nBoth analytical tool and topology discovery tool can be \nclassified into two: educational (free) and commercial tools. \nNetwork simulation tools can be divided into three: \neducational (free), commercial and specialised tool. The Fig. \n1 shows the classification of the tools.  This paper is focusing \non the most recent MS tools. \n \n \n \n \n \n \n \nFig. 1: Classification of the Network Design and Simulation tools \nIII. ANALYTICAL TOOLS FOR NETWORK DESIGN \nThe analytical tool typically formulates the network \nplanning problems as optimisation models where given cost \nfunctions are minimised (maximised) under a set of \nconstraints [7]. Normally a single model tries to capture many \nrelevant aspects of the problem. When an optimal solution to \nthe network model is found, the values of the decision \nvariables can be used to decide the optimal action to be taken. \nA. Educational Tools \nDEsign tool LITE, Delite [8] is an educational and \npractical wide area network (WAN) design tool, which can \nproduce network designs of limited size using a set of the \nembedded network design algorithms. Delite can produce \ngraphical displays representing network nodes and links as \nwell as some additional analysis data (delay analysis, \nreliability analysis, average delay analysis of the link, average \nnumber of hops, link utilisation for every separate link \nbetween nodes, utilisation of each node, overall network \nmodel utilisation, etc.). There are seven files that are handled \nby the Delite tool for each network design. However, the most \nimportant for the users are .gen (original node information, \ncoordinates and available link types) and .net (additionally \nhas table of links between nodes i.e. actual design) files. \nLinks between nodes can be generated using a few design \nalgorithms. Thus, various designs may have different costs, \ndelays, reliability, average number of hops etc. Other files are \nTools \nEducational Commercial\nEducational Commercial Specialised\nCommercial\nTopology \nDiscovery\nEducational  \nTopology \nGeneration \nAnalytical Simulation\nACCEPTED MANUSCRIPT \n \n \n \nused for different purposes: noeqip.tbl and param.tbl are \npredefined (used to supply some network parameters), .cst file \ndescribes the costs associated with link types (e.g. T1, T3, \nD96 etc.), .req file describes capacity of each link type, .inp \nfile contains the names of files related to a particular model. \nThe users can edit all of the files mentioned above as they are \nin ASCII text format. The algorithms used for designing the \ntopology of a network model supported by Delite are: Prim, \nPrimdijkstra, Tour (Nearest Neighbour), Tour (Farthest \nNeighbour), Esau-Williams, Sharma, Multispeed Tree \nDesign, Nearest Neighbour-Esau_Williams, Multicenter \nEsau_William, Mentor, Incrementour. Contributor: Robert \nS. Cahn. Supports: different types of network design \nalgoriths (mentioned above). Languages: C. Advantages: 1) \nText formated input and output files so user can manually \nchange the input files to see the effects; 2) Population is \ntaking part in designing the models; 3) World map can be \nincluded in the model to see the suitability of the model; 4) \ncan include more algorithms in this tool. Limitation: 1) \nlimited number of nodes supported as this is a small scale \nnetwork tool; 2) documentatoin is no rich enough. \nCappuccino [9] is a web based non-commercial network \ndesign tool. Using the tool, users can design network model, \ncalculate maximum traffic of each link and a lower bound of \nthe link cost of the network. The switches can be scattered \nrandomly inside the rectangular area (0, 0, 400, 400). The \nproperties of the switches are expressed by switch name, X \ncoordinate, Y coordinate, Alpha (originating capacity for a \nswitch) and Omega (termination capacity for a switch), which \ncan be changed by the users. The Alpha denotes the \nmaximum communication rate, which is permitted by the \nnetwork to originate from switch to the rest of the network. \nThe Omega denotes the maximum communication rate, which \nis permitted by the network to terminate to a switch from the \nrest of the network. Traffic between switches is limited by \nusing set-pair-constraints, which specifies the maximum \ntraffic between two switch sets. While designing a network \nmodel, initially 20 switches are scattered in a region. User can \nadd, delete and modify the switches as required. Topology is \nchosen using predefined algorithms implemented in the tool \nor manually. Then traffic constraint, which specifies \nmaximum traffic between two sets of switches, is chosen. The \ncost coefficient is proportional to the link length and a link \nhas two-bandwidth capacity (incoming and outgoing). The \ntool uses shortest path routing algorithm for traffic. The \nalgorithms for network topology implemented in the tool are: \nbest star, minimum panning tree (Krustral\u2019s algorithm), \ndelaunay triangulation and complete graph. Using shortest \npath routing and taking account the constraints, the tool \ncalculates the maximum traffic and a lower bound cost on \nevery link so that user can see how far away the network is \nfrom the optimal. The lower bound cost of the link is \ncalculated based on complete graph.  Users can also analyse \nthe traffic of each link, switch and traffic constraints of each \nusing window menu. User can edit the switch information and \nupdate the calculation. The tool is very user friendly. It is \nplatform independent. This tool will help network \nusers\/designers create their non-blocking network model. \nLanguages: Java. Advantages: This is web based.  \nLimitation: Very limited applications. \nB. Commercial Tools \nXNetMod [10, 11] (based on NetMod tool), a LAN \nmodelling tool that allows users to analyse the performance of \na configuration before implementing it. Three approaches to \nperformance evaluation of this tool are analysis, simulation \nand measurements. XNetMod can be used networking \nenvironment consisting of thousands of computers sites. \nXNetMod provides customised forms to enable one to specify \ninput parameters for the elements. XNetMod supports two \ntypes of topology: ring and bus and two connectors: Router \nand Bridge. To facilitate the concept of bottom-up design, \nXNetMod allows users to cerate subnetworks. At present \nthere is only one element type, Subnet in the Subnetwork \nelement group. XNetMod supports analytic and simulation \ntechniques. It can summarise the entire results of an analysis \nor simulation of just the result for a particular node. \nSupports: FDDI, token ring, token Bus, generic bridge, \ngeneric router, subneting. Languages: C. Advantages: 1) \nggraphically display and manipulate network topology; 2) \nease of subnetwork definition; 3) three types of analysis of \ndata are supported; 4) flexibility of easily add or delete \nsubnetworks; 5) ability to provide substantial user interaction \nfor either simple parameter change of major reconfiguration \nof LANs and backbone;  6) hierarchical modelling capability \nfor extremely large models; 7) query and generate reports \nbased on currently displayed model. \nTND-Tool (Topological Network Design Tool) [12] is used \nto find out an effective solution to the network topology \ndesign problem. The idea behind developing the TND-Tool \nare twofold: first providing network designer and operator \nwith a tool to facilitate their work, second offering topology \ndesign researchers an environment for testing and \nrepresenting the output of their network design algorithms. It \npermits to select between node types, link types and data \nbases for different kinds of networks. A Network viewer \nallows to display the current topological network structure \nduring the optimisation process. Users, engineers are able to \nset up a network interactively by inserting nodes and links, \ntyping in network information, e.g. traffic values, moving, \nadding and removing some part of the network. According to \nthe tariffs defined, the TND-Tool calculates the cost for an \nexisting network on the screen or a network resulting from an \noptimisation algorithm. The TND-Tool consists of four \nmajor modules: 1) representation module is the graphical user \ninterface of the system providing all important facilities \nneeded by the network engineer; 2) optimisation module \nenables integration of network optimisation algorithms; 3) \ncost calculation module is the entity providing the rules for \ncalculation of network cost, e.g. tariff tables and cost \nfunctions; 4) data base module provides all the needed data \nfor the functionality of the system. Currently, the TND-Tool \nis used for designing GSM (Global System for Mobile \ncommunication) and DCS1800 (Digital Cellular System \nACCEPTED MANUSCRIPT \n \n \n \n1800) fixed networks as part of the cellular mobile \ncommunication networks. The TND-Tool is not limited to \ncellular networks and has been designed as a platform for \ndesigning all kinds of networks such as Wireless Local Loop, \nSatellite networks, ATM networks and so on. Supports: \nWAN, Wireless, ATN, Satellite. Advantages: 1) an \ninteractive menu  and mouse-driven tool; 2) Web based. \nLimitation: 1) Limited only to calculate the cost of design; 2) \nLimited number of topoloy design algorigm supported. \nNetRule [13] is designed to combine the best features of \nthe mathematical analysis and simulation tool. It is mainly \nperformance prediction tool to design the actual network. \nNetRule can model and stress test very large networks (1,000 \nto 10,000 nodes). It has a customised GUI like a simulator. It \nuses closed-form mathematical analysis that evaluates \nnetwork load and performance in seconds with detail and \naccuracy that matches the best practice of mathematical \nanalysis. The tool lets users to create or open network models \nand libraries, edit them graphically, and evaluate their \nperformance. The diagram can animate message flow, \nhighlight bottlenecks and shows utilisation and delays bars as \ncomponents. It uses shared objects definitions to reduce \nmodelling time and allow global changes. The NetRule \nlibrary includes: 1) LANs, including many CSMA\/CD, token \nring and polling protocols; 2) Frame relay clouds with access \nports and virtual circuits; 3) ATM switches and SONET links; \n4) Routers, hubs, bridges and Ethernet switches; 5) Point-to-\npoint T1 and other speeds; and 6) FDDI; 7) ISDN. Reports \n(output) are available for object definitions as well as for \nevaluation statistics that can be sorted or can be exported to \nspreadsheet, database, presentation or graphics packages. The \nmost interesting features of the NetRule are period objects, \nwhich let one to establish different workloads during different \ntimes of day (day and night period) or time of years. \nHistogram can be produced for performance analysis. \nNormally the report includes: computer delay\/job, computer \nutilisation, job cost, job delay, link delay\/pkt, link utilisation. \nAnother important feature of NetRule is that it can import \nnetwork topology that has been discovered with a network \nmanagement tool. Contributor: Analytical Engines Inc. \nSupports: CSMA\/CD, Frame relay, ISDN, FDDI, ATM, \nSONET, point to point T1 connection. Languages: Java. \nAdvantages: 1) supports very large scale network (1,000 to \n10,000 nodes); 2) user can import ALL or any part of a \nnetwork and its parameters to build or modify a NetRule \nmodel. E.g .cap files, .csv format file,MIB data; 3) Supports \ngeneralisation option for clients, servers, and\/or applications \n(for example, mathematically determining the typical client);  \n4) it can extract from  traffic files and make a new file for all \ncomputers which can potentially be servers, all applications \n(using port numbers), user traffic flow. \nXNP (Extensible Network Planner) [14] is a \ncomprehensive network design tool for both extensible and \nconventional networks. It is implemented using several \nmethods and incorporated them into a previously unpublished \njava-based software tool, Cappuccino. Its objective is to \nconfigure a least-cost network that accommodates any traffic \npattern satisfying the given traffic constrains. XNP allows \nnetwork designers to quickly create, configure and evaluate \nnetwork designs by providing a convenient graphic-based \ninterface and automated functions. There are five essential \nbuilding blocks in designing a network in XNP. Users can \ncreate a trail topology in the blank drawing area of the XNP \nmain window. XNP allows two types of links (unidirectional \nand bidirectional). Application format (number of processing \nsteps, number of machine instructions and bandwidth \nrequired) can be added or removed by user-friendly buttons. \nXNP provides three ways to specify traffic expectations. XNP \nprocess will iterate through all links and processing nodes to \ncompute the capabilities for them. XNP will redraw the \ntopology to show the differences in resources capabilities \nagain and again. The thickness of each links shows its \ncapability relative to other link\u2019s capabilities. Users can \nevaluate the network configuration by computing a lower \nbound on the cost of the best network configuration. By \nadjusting options of lower bound and therefore by considering \ndesign restrictions for using resource again and again, one can \nobtain more accurate and useful measure. XNP allows three \ndifferent ways to view the drawing area-only the trail \ntopology and the design space together or the design space \nonly.  XNP also allows to manage multiple designs at a time \nso than one can try for different trial topologies and compare \nthem. Supports: supported algorithms are:  1) Complete \nnetwork; 2) Delaunay triangulation; 3) Delaunay triangulation \nwith trimmed links; 4) Link complement; 4) Minimum \nspanning tree; 5) Random link adder; 6) Random node adder; \n7) Star network; and 8) Symmetric link adder; 9) \nGeographical planar projection- longitude and latitude; 10) \nGrid network \u2013 N x M grid network; 11) Torus network- N x \nM torus network. 12) Localised traffic constraints; 13) \nProportioned Pairwise traffic constraints. Languages: Java. \nAdvantages: 1) Extensible. \nNPEST (Network Processing Estimator) [15] is a tool for \npacket processing cost on a network node. All of the \ncalculations are done with the help of processing instruction \nper packet. When sending a packet from one node to another, \nthe following delays occur: (1) transmission delay (the time it \ntakes to send a packet into a wire); (2) propagation delay (the \ntime it takes to transmit a packet via a wire); (3) processing \ndelay (the time it takes to handle a packet on the networking \ncomponents); and (4) queuing delay (the time the packet is \nbuffered before it can be sent).  Normally the cost for the \ndelay (2) and (4) are simulated using standard simulator. The \ndelay for (1) and (3) are ignored. From this tool, per packet \nprocessing cost, per-byte cost and total processing costs \n(processing delay) are found and this cost can be simulated. \n \nThe NPEST is a framework on top of which packet \nprocessing functionality can be implemented and simulated \nusing an actual processor simulator. NPEST allows \nimplementing packet processing functionality as a simple C \nprogram with the NPEST framework providing all the \nnecessary packet trace processing and memory management.   \nACCEPTED MANUSCRIPT \n \n \n \nTable 1: Summary of network analytical tools \nTools Usages Design \nAlgorithm(s) \nTarget \nNetwork \nModel \nOutputs  Stored Data File  Platform \nDelite Educational Some \npredefined \nalgorithms \nWAN  Graphical  \nLink analysis, node utilisation, overall \nutilisation in percent, delay analysis \nSpecial formatted \nText file \nWindows \n \nCappuccino Educational Predefined \nDesign \nalgorithms  \nWAN Link cost, capacity etc Graphical output, no \ntext file \nWindows \nWeb \nbased \nXNetMod  Commercial User defined \ntopology. \nLAN, \nSubnetwork \nDelay, average packet queue length, packet \ndelay time, utilisation,  \nGraphical output, No \ntext file \nWindows \nUnix \nTND-Tool Commercial User Defined \ntopology. \nWAN, \nWireless, \nATN, \nSatellite \nAnalysis of Cost of deigned network. Graphical output. \nNo Text file \nWindows \nNetRule Commercial User defined \ntopology \nWAN, LAN, \nATM \nswitches, \nISDN, FDDI \n Computer Delay, Computer Utilisation, Jobs \ncost, Job delay, Link Delay, Link Utilisation, \nhistogram representation. \nReport can be \nimported to \nspreadsheet, database \nWindows \nXNP Commercial Predefined \ndesign \nalgorithms  \nWAN Resource capacities, Cost analysis of links. XNP formatted text \nfile \nWindows \nUNIX \nNPEST Commercial Predefined \nalgorithm \nWAN Cost analysis of Packet processing. Need further \ninvestigation \nUnix, \nLinux,, \nRedhat \n \nThe NPEST results can be used integrated and used in \nnetwork simulations and nodes. One way is to integrate \nNPEST with a network simulator that uses actual packet \ntraces and simulate the processing of the packets. The other \nway of using realistic processing cost estimates is to obtain \nstatistics from the NPEST and the using these in network \nsimulations or modules. \n \nThe NPEST framework implements the functions that are \nnecessary to read and write packets, control the processor \nsimulator and manage memory. The NPEST consists of the \nfollowing sections: NPEST framework, NPEST application \nand NPEST API. The framework provides basic \u201clayer 2\u201d \nfunctions that prepare packet for processing, which includes \nreading the packet from the input trace file, extracting headers \nand writing back the processed packets to output trace file, \nmanage memory allocated to packets and controls the \nprocessor simulator. The application component is the \nsoftware that requires to be evaluated for processing cost. The \nAPI defines the interface between framework and the \napplication. The cost is calculated using consideration on \nprocessor clock, processor instruction set, memory access \ntime, flow and packet size, processor cycle.  \n \nSeveral metrics can be derived from NPEST prototype. \nSuch as, instruction count (number of instruction executed), \nmemory access (number of memory references performed), \ninstruction mix (percent of instruction that belong to different \ncategories). The outputs of the NPEST are overall statistics \n(total instruction, total memory access) and application \nstatistics (total instructions, total memory access, average \ninstruction\/packet, average packet memory access\/ packet, \naverage lookup memory access\/packet), instruction mix in \npercent (load, store, unconditional branch, conditional branch, \ninstruction computation, FP computation). Using the number \nof instruction executed, actual time taken can be estimated. \nThe memory access statistics gives an indication if memory \ncould become a bottleneck for a given application.  \nThis tool is helpful for the users interested for node cost \nanalysis and can be used with integration with other network \ndesign and simulation tool. OS: Unix, Linux, Redhat. \nSupported elements: ARM, Developed Languages: C. \nOutputs: Performance analysis, observe dynamic behaviour \nwith instant changes while simulation runs; observe the \ndynamic reaction of failure of network. \nTable 1 shows the summary of analytical MS tools. \nIV. NETWORK SIMULATION TOOLS \nSimulation is the discipline of designing a model of an \nactual or theoretical or physical system and manipulating the \nmodel in such a way that it operates on time or place to \ncompress it, thus enabling one to practice the interaction. \nMany unimportant details can be abstracted away and \nsimulations can be completely repeatable. In a simulation, a \nmathematical\/logical model is numerically evaluated over the \nperiod of interest and performance measures are estimated \nfrom model-generated data.  \nSimulations are complementary to analysis [16], not only \nby providing a check on the assumptions of the models and \non the correctness of the analysis, but by allowing exploration \nof complicated scenarios that would be either difficult or \nimpossible to analyse. Simulation plays a vital role in helping \nresearchers to develop intuition. Simulation analysis is \napplicable to systems of almost any level of complexity. \nA   Educational Tools \nns-2 (Network Simulator) [17, 18, 19, 20 ], a VINT \n(Virtual Inter-Network Testbed) project from U.C. \nBerkeley\/LBL\/Xerox PARC, is a discrete event simulator \ntargeted at network research, which provides substantial \nsupport for simulation of TCP, routing and multicast \nprotocols. The simulator is using a Tcl\/Otcl (Tool Command \nLanguage\/Object Oriented Tcl) as a command and \nACCEPTED MANUSCRIPT \n \n \n \nconfiguration interface. There are four types of files related to \nns-2 simulator. Model is described in files .tcl or .ns which \nhave common subset of commands but not exactly compatible \nbetween each other\u2019s. While simulator runs a model defined \nin .tcl\/.ns file, simulation trace file (.tr) and animation file \n(.nam) are created during the session. Network Animator \n(.nam) files are used to visualise the behaviour of the network \nprotocols and traffic of the model. Once created, users can \nplay with the .nam file just like a media player and check the \nbehaviour repeatedly. ns-2 facilitates the three broad themes \nof network research simulations: 1) selecting a mechanism \nfrom several options; 2) exploring complex behaviour; and 3) \ninvestigating unforeseen multiple-protocol interaction. \nSupports: TCP family, UDP, CBR, FTP, HTTP, Pareto, \nExponential protocols, wires, wireless, unicast, multicast. \nLanguages:  both C++ and OTcl languages. Outputs: \ndynamic output. Advantages: 1) user can design model both \nmanually or writing code; 2) easy configurable and fast \nsimulation by using two different languages (OTcl and C++); \n3) many protocol already implemented; 5) dynamic behaviour \ncan be visualised using nam editor; 6) Open source code and \ncan be extended for future. Limitation: 1) Long time to get \nused to usign it; 2) does not large scale simuaton (e.g., \ninternet). 3) incomplete API; 4) no real time simulation; 5) no \nperformance analysis is possible 6) badly documented source \ncode; 7) no direct support of mobility and shared wireless \nradio channels; 8) unable to scale to networks of Internet size \ndue to the computational requiremets of fine-grain packet-\nlevel simulation and memory needed to maintain queues at \neach network link. \nNetwork Workbench [21] is a discrete event network \nsimulator developed for the academic investigation of Internet \nprotocol. It contains a complete protocol stack, abstracted \nfrom the Internet stack and a set of exercise that focus on \ncritical protocol algorithms in the Internet stack. Network \nWorkbench has several version, which are: version 0(1994), \nversion 1(1994), version 2(1997), and version 3(1998). This \ntool supports several network topology, DLC error control, \nCSMA\/CD collision backoff, optimal route computation, \nreliable transport, multicast, and LAN\/MAN integration. It \nsupports FDDI (Fiber Distributed Data Interface), OSPF \n(Open Shortest-Path-First). Workbench is abstracted from the \ninternet (TCP\/IP) stack. It contains five layers (application, \ntransport, network, datalink control, and physical). The \nNetwork Workbench tool can be used to study of WAN \ntopology, DLC (datalink control layer) frame formatting, \nDLC flow and error control, CSMA\/CD local area network, \nnetwork layer routing, reliable transport, multicast networking \netc. Summary of statistics of the performance is produced at \nthe end of the simulation. Contributor: J. Mark Pullen. \nSupports: network topology, DLC error control, CSMA\/CD \ncollision backoff, optimal route computation, reliable \ntransport, multicast, and LAN\/MAN integration, OSPF, \nFDDI, Ethernet, TCP\/IP. Languages: C++. Limitation: Very \nlimited implementation of protocols. \nNetsim (M.I.T.\u2019s Network Simulator) [20, 22] is a single \nprocess discrete event simulator used for the investigation of \nmany aspects of Local Area Network (LAN).  Netsim has \nthree main goals: 1) flexibility of experiment of specifying \nthe network and traffic; 2) simulate the accurate behaviour of \nEthernet; and 3) has features that make running sequences of \nrelated experiments easier. The experimental data of Netsim \nsimulation is stored in an experiment description file which \ncontains: the layout of the network to be simulated, the traffic \ngeneration behaviour of the station on the network, \ninformation about repetitive of each run and about the \nsequence of parameters to be used for a series of experiments, \netc. The entries specify the physical characteristics (e.g., \nlength, packet size, data rate, number of attached stations) and \ntraffic generation behaviour of the attached station. There are \nfive types of traffic distributions in Netsim: exponential, \nuniform, deterministic, continuously queued and user defined \ndiscrete distribution (e.g. biomodal). Netsim collects \ninformation on many aspects of the operation of the simulated \nnetwork. For example, average packet delay, histogram of \npacket queuing delays and collisions per packet transmitted, \noverall throughput (percentage utilisation), actual data rate, \naverage, queuing delay, variance of queuing delay, observed \npacket transmission rate, average message size, total observed \ncollision rate and total number of packet, maximum packet \nsize, minimum packet size, maximum data rate etc. \nContributor: MIT LCS Advanced Network Architecture \ngroup. Supports: Ethernet link, a point-to-point link, a switch \n(switches packets between several links), a host (about the \nsame as a switch), Purdue's implementation of TCP, data \nsupplier and consumer from TCP, a simple Poisson traffic \nsource and a packet sink. Languages: C. Advantages: 1) \nNetsim is a publicly available ATM simulator originally \ndeveloped at MIT; 2) its source code is freely available and \nmodifiable; 3) Netsim has a user friendly Graphical Interface \n(GUI). Limitation:1) The GUI however is very primitive and \nis inadequate for instructional purposes. It is not fault-tolerant \nto novice users. An incorrect sequence of keys or mouse \nclicks could cause the simulation to crash; 2) Its uses are \nlimited. \nMaRS (Maryland Routing Simulator) [23, 24] is a discrete-\nevent simulator proving a flexible platform for the evaluation \nand comparison of network routing algorithms. MaRS allows \nphysical network, routing algorithm and traffic sources. \nMaRS is structured in two parts: a simulation engine, which \nmanages the event list and user interface and a set of \ncomponents for modelling the network configuration and \nhandling certain simulation functions. MaRS has been used to \nevaluate and compare several next-hop routing algorithms: \ntwo distance-vector algorithms- a) Loop-free Bellman-Ford \nRouting Protocol Without Bouncing Effect, a Failsafe \nDistributed routing Protocol; b) a link-state algorithm (the \nNew Routing Algorithm) for ARPANET. MaRS is limited \ndue to the lack of scrolling capability in the user interface \nwindow. Thus, users are limited in what can be displayed to \nthe size of the non-scrolling window. In addition, MaRS \nconstrains itself to a point-to-point network structure and \ntherefore is not readily suitable for simulating networks with \nbroadcast communication. Contributor: University of \nMaryland. Supports: network routing protocols (SPF, \nMerlin_Segall, Bellman_Ford), FTP, Telnet, Workload \n(Poison, uniform). Languages: C. Limitation: 1) Its support \nfor transport layer protocol and application source models is \nvery limited; 2) a primitive GUI is provided; 3) not available \nnow. \nACCEPTED MANUSCRIPT \n \n \n \npdns (Parallel\/Distributed ns) [25] simulator consists of \nextensions to the widely used and publicly available ns \nnetwork simulator. The extensions allow many existing ns \nsimulations to be run in a distributed environment with \nminimal changes. The pdns implementation also takes \nadvantages of the large body of existing models found in ns \nand uses those without modification. Also includes in the \npdns extensions is novel packet routing method called NIx-\nvector that allow routing decisions without the necessity of \nrouting tables, resulting in substantial memory saving. While \ndistributing the ns tool to several processors, for connecting \neach sub-model, IP address and a network mask is added to \nphysical end point (nodes) for communication in logic as well \nas physical connection. For routing, each simulated node will \nstart with routine table priori and dynamic routing \ninformation in the simulation time using Boarder Gateway \nProtocol (BGP) to adapt to any change in the simulated \nnetwork topology.  For event time management and event \ndistribution among the parallel simulation sub-models, \nRTIKIY and LBTS (lower bound time-stamp) etc. time \nmanagement run-time library are used. For synchronous event \ncommunication, multicast group management (MCAST) \nstrategy is used. Contributor:  The PADS research group at \nGeorgia Institute of Technology. Advantages: 1) Very large-\nscale simulator (hundreds of thousands of nodes); 2) IP \nAddresses are supported. \nThe GTNetS (Georgian Tech Network Simulator) [19, \n26] was developed by George F. Riley using C++ language. \nGTNetS has a number of basic design goals, which is \ncategorized into seven high-level goals. The GTNetS is a full \nfeatured network simulation environment that can be used for \nexperimental networking research on moderate to large-scale \ntopologies. The design is such that it is easy to learn and use. \nGTNetS is presently fully capable of distributed large-scale \nsimulations of routers, end-systems, LAN\u2019s and various end-\nuser applications. Researchers find the tool useful in instance \nwhere existing tool can not be achieve the scale needed to \nwork functions being studied or can not achieve the scale \nneeded to produce the desired results.  \n \nThe object-oriented methodology is used to design the tool \nfor easy extension and modification. All queueing methods \nuse a subclass of queue to define their behavior. The \nsimulator is designed like real networks are designed. In \nGTNetS, there is a clear distinct between nodes, interfaces, \nlinks, and protocols. Node objects represent the basic \nfunctionality of a network (either a router or end-user \nsystem), and contain one or more interface objects. Each \ninterface objects has an IP address and associated network \nmask, as well as a link object encapsulating the behavior of \nthe transmission medium. Packets in GTNetS consist of a list \nof protocol data objects (PDUs). This list is created and \nextended while a packet moves down the protocol stack the \nvarious layers. When moving up the stack, each protocol \nlayer removes and processes the corresponding protocol \nheader in a fashion closely modeling a real protocol stack. \nEach protocol layer communicates with the layers below it by \ninvoking a DataRequest method, specifying the packet and \nany protocol specific information required by the next lower \nlayer. GTNetS used NIx-Vector routing as the default packet \nrouting mechanism. \nSimulation models for a number of different random \nnumber generators are provided, including exponential, \nPareto, normal, uniform, empirical and constant. GTNetS \nallows the specification of default object types wherever \npractical. For nearly every objects (links, queues, protocols, \netc), a default value is provided that allows for creation of \nobject without specifying details. It provides a number of \nstock objects for creating well-known topologies such as star, \ndumbbell, grid and tree. GTNetS includes simulation models \nof a number of popular protocols at the application layer, \ntransport layers, network layer and link layer (IEEE 802-3 for \nwired networks, IEEE 802.11 for wireless). The application \nlayer models included in GTNetS are: Gnutello, GCache, \nSyn-Flood and UDP storm. The transport protocols are: TCP, \nTCP Reno, TCP NewReno, TCP Tahoe and TCP SACK \nlayer, UDP. Additionally, the design of TCP model uses a \nclient\/server paradigm. Data contents as well as length can be \nmodel within this tool.  The tool uses IPV4 exclusively for \nthe network layer protocol. DropTail and Random Early \nDetection (RED) queues are implemented. Nodes with \nwireless interfaces also have mobility models and support \nrandom initial node placements.  \n \nThe GTNetS simulator consists of a large number of C++ \nobjects, which implement the behavior of a variety of network \nelements. Building and running a simulator using GTNetS \nconsisting of creating a C++ main program that instantiates \nthe various network elements to describe the network \ntopology and the various applications and protocols used to \nmove simulated data through the topology. The C++ main \nprogram is then compiled with any compiler that fully \ncompiles with the C++ standards. After the successfully \ncompiling the main program, it make is linked with the \nGTNetS object libraries. The resulting executable binary is \nsimply executed as any other application, which results in the \nsimulation of the topology and data flows specified in the \nmain program.  \n \n Finally, GTNetS keeps and optionally reports detailed \nstatistics about the simulator\u2019s performance. These statistics \ninclude the number of objects created, number of simulation \nevents, memory used, just to name a few, which assist the \nsimulator user in identifying resource limitations or \nperformance problems should they occur.  The tool has a \nnumber of data summation primitives in gathering \nperformance statistics. Histogram(e.g., sequence number of \npacket vs. time in a TCP connection) can be plotted for data \nsets. The histogram objects can then be queried and printed. \nPacket tracing in the simulation can be performed for \nanalysis. The trace file is saved in text format (.txt).  \n \nThe tool runs both in windows and Unix in C++ standard \nand freely available. Input file(c++) and output can be saved \nfor later use. The tool can handle up to half-million nodes; up \nto 455,168 TCP flows and more than 4 billion simulated \npacket transmission events. With 480,000 nodded topology, \nsimulation can complete within 15 minutes. Any user who \nhas a good understanding of the design and operation of real \nnetworks will find that GTNetS works similarly. \nContributor: Riley;  Year: 2002; Supported Operating \nsystem: Windows, Unix;  Supported elements: Ethernet and \npoint to point link, Static and NixVectors routing, IPV4 \nACCEPTED MANUSCRIPT \n \n \n \nmodels, TCP family,  UDP,    DropTail, RED; Developed \nLanguages: C++.   \n \nWIPSIM-Development of the Wireless IP Simulator [27] \nwas started in 2000 in the WING-group of CPK at Aalborg \nUniversity. In July 2001, the framework of the simulator was \nredesigned to allow for easy addition of protocols and \nmechanisms by multiple developers. Several reasons to start \nwriting a new simulator instead of using an existing tool: No \n(affordable) simulator available that could fulfill the needs of \nthe WING-group; Increased learning effect by implementing \nprotocols from scratch; Create tool that could aid in \neducation. WIPSIM is an event-driven simulator, written in \nANSI-C++ and is open source. Input and output are handled \nusing text-files: Scenario-file: movement of the nodes and the \ntraffic in the network; Network-file: nodes, interface, \nprotocols and their parameters; Config-file: default \nparameters for protocols, aliases \n \nThe framework of the simulator connects the different layers \nof the protocol stack. Each part of the framework is \nimplemented as a base-class, which provides the interface for \naccess to other parts of the simulator and to other layers. Each \nspecific protocol implementation can then be derived from \nthis base-class.  \n \nAt the physical layer, interfaces of nodes are either in-range \nor out-of-range of each other. Currently, no detailed radio \npropagation models are used, a frame transmitted at the \nphysical layer either reaches other nodes (if the interface of \nthat node is in-range) or not (if the interface is not in-range). \nOptionally, a frame error rate can be set. The radio \npropagation is kept this simple to reduce simulation overhead \nand because the focus of the simulator is the IP and MAC \nlayer. \n \nMovement of nodes is described in the scenario-file, where \nevent are listed where nodes move in- and out-of-range of \neach other. Any tool can be used to provide the input for the \nmovement of nodes to the scenario-file based on the desired \nmobility model. As such, mobility is pre-determined before \nthe simulation starts. This allows for comparison of different \nprotocols under the exact same mobility conditions. \nMoreover, it reduces the amount of calculations that needs to \nbe done in case a number of simulations are carried out with \nthe same mobility. Contributor: WING-group of CPK at \nAalborg University; Supported elements: MAC, IP layer, cd \nhoc rouing protocols and connectivily, node mobility, AODV, \nOLSR, Multipath-aodv, simple shortest path algorithm (e.g. \nDijkstra), Diddserv, CBR UDP model, MPEG-4 video source \nmodel. Developed Languages: C++. Extensibility:  easily \nextendible. Outputs: calculates average packet delays, \nthroughput, packet delivery ratios etc. Advantages: \nDevelopment knowledge available within CNTK; Simulator \n+ source code freely available; Design of the general \nframework of the simulator makes it easy to add new \nprotocols\/mechanisms; Source code is well documented. \nLimitation: User\/developer base is still small, therefore there \nis some uncertainty about the correctness of the \nimplementation of protocols; the number of implemented \nprotocols is not so large yet; Development and user \ndocumentation is still under development \nB    Commercial Tools \nOPNET (Optimised Network Engineering tool) [19, 20, \n28, 29] was launched in 1987 as a first commercial available \nsimulation tool for communication networks. It provides a \ncomprehensive development environment for the \nspecification, simulation and performance analysis of \ncommunication network. It can simulate all kind of wired \nnetworks and a 802.11 compliant MAC layer implementation \nis also provided. A large number of communication systems \nfrom a single LAN to global satellite networks can be \nsupported. The most important features of OPNET are: \nmodelling and simulation cycle (to assist user to go through \nthree phases in design circle-building model, execution of \nsimulation and the analysis of output), hierarchical modelling \n(describes different aspects of the complete model being \nsimulated), specialised in communication networks (support \nfor existing protocols and allow users to either modify theses \nexisting models or develop new models), automatic \nsimulation generation. An OPNET model consists of three \nlayers: the network models, the node model and the process \nmodel. The tool allows the different layers in a protocol stack \nrunning on individual nodes to be represented. OPNET \ncontains various tools for data collection. A probe editor \nallows specifying: 1) which statistics are to be collected from \nwhere (Probe editor); 2) their own statistics (analyse tool); 3) \nanimation view and formats (Filter Tool, Animation viewer). \nOPNET contains objects that are capable of generation vast \namount of output data during simulation. It can generate error \nrate and throughputs, delay queue size. Packet trace may be \ndone. Output can be plotted in graph, such as end-to end \ndelay vs. queue buffer capacity, loss ratio vs. queue buffer \ncapacity. Probability distribution function, cumulative \ndistribution function as well as histogram can be plotted for \nseveral data sets. OPNET is extensively used for the study of \nTCP transport across different types of ATM bearer \ncapabilities and diffserv per hop behaviour. Contributor: Mil \n3 Inc. Supports: routing protocols (OSPF, RIP, EIGRP, BGP, \nIGRP, DSR, TORA IS-IS, PNNI), Diffserv, MAC, mobility \nof nodes, ad hoc connectivity, different application models. \nNode failure models, modelling of power-consumptiion etc. \nLanguages: C, Java. Advantages: 1) extendible; 2) large \ncustomer base;  3) professional support; 4) very well \ndocumented; 5) ships with a large number of built-in \nprotocols. Limitation: 1) relatively high price; 2) complex, \ntakes time to learn; 3) there is restriction to its portability. \nCOMNET III [30, 31, 32] is a commercial integrated \ndiscrete event object-oriented simulator for modelling and \nperformance analysis of computer network. With COMNET \nIII, users can create a variety of network architectures, \nincluding LANs, MANs WANs, packet switching, ATM, \nframe relay and so on. COMNET is entirely driven by \ngraphical user interface. Users are able to graphically display \ntraffic modelling patterns, use of realistic network objects to \nreflect real networks and apply the network concepts. \nCOMNET III allows the users to model, tune and analyse the \nperformance of various types of networks. It provides an \nextensive library of nodes, links, protocols and traffic objects. \nThe library of link objects include two classes: point to point \nlinks and multi-access links. Multi-access protocols that can \nbe modelled include CSMA\/CD, CSMA, ALOHA, Token \nBUS, Token Ring, FDDI and Polling.  It supports subnets. It \nhas two kinds of sources: application sources and traffic \nACCEPTED MANUSCRIPT \n \n \n \nsources. There are four types of traffic generators: message \nsources, session sources, response sources and call sources. \nCOMNET III is able to produce about 100 reports for \ndifferent model building blocks. Most commonly produced \nreports include node utilisation and application delays, link \ndelays, channel utilisation, message delays, packet delays, \ncalls blocked, disconnected and preempted, session set up \ndelay, collusion statistics, token ring statistics, buffer \nstatistics etc. Contributor: CACI Company. Supports: LAN \n(Ethernet, Token ring, FDDI), MAN, internet, packet switch, \ncircuit switch, ATM, bursty traffic, CSMA, CSMA\/CD, \nALOHA, Polling, Protocols (TCP\/IP, IPX, SNA, DECNet). \nAdvantages: 1) a graphical package, allow quickly and easily \nanalyse and predict the performance of network; 2) allows \nusers the flexibility to try an unlimited number of \u201cwhat if\u201d \nscenarios; 3) realistic and accurate results. Limitation: 1) \nsource code is not available; 2) new modules were very \ndifficult to add; 3) It is restricted to experimenting with the \nset of networking protocols provided by the package; 4) It is \nnot programmable by the users. \nREAL (REalistic And Large) [33] is a network simulator \noriginally intended for studying the dynamic behaviour of \nflow and congestion control schemes in packet-switched data \nnetworks. It provides around 30 modules that exactly emulate \nthe actions of several well-known flow control protocols \n(such as TCP), and 5 research scheduling disciplines (such as \nFair Queuing and Hierarchical Round Robin). There are \nnearly 30 source types, corresponding to 30 or so transport \nprotocol and workload types. The sources can be categorised \ninto one of two types: flow-controlled and non-flow-\ncontrolled data sources. REAL has a graphical user interface \n(GUI) written in Java.  The simulator takes as input a network \nscenario (a description of network topology, protocols, \nworkload and control parameters) described in NetLanguage \n(ASCII). It supports sources or sinks node, gateways \n(synonymously with routers, bridges and switches). Users \nhave to specify some network parameters, the transport \nprotocol (in particular, the flow control) and the workload at \neach source. Finally, users must specify control parameters \nsuch as the latency and bandwidth of each communication \nline, the size of trunk board buffers, packet sizes etc. \nContributor: S. Keshav at Cornell University. Supports: \nTCP\/IP, XNS, FTP, Telnet, ill behaved, FIFO, FCFS, Fair \nQueuing (FQ), DEC congestion avoidance and Hierarchical \nRound Robin. Languages: C, JAVA (GUI only). \nAdvantages: 1) the GUI allows users to quickly build \nsimulation scenarios with a point-and-click interface; 2) \nsource code is provided so that interested users can modify \nthe simulator to their own purposes; 3) extendible. \nLimitation: 1) NEST (initial tool) didn't not allow for timers, \nREAL sends out a timer packet from a source back to itself to \nreturn after some specified time, but timers cannot be reset \nusing this method; 2) misses some of the behaviours in the \ncommon protocol implementation; 3) do not support common \nimplementation of protocols (direct execution). Instead it uses \ncodes that simulates the major characterstisc of the protols. \nSSF (Scalable Simulation Framework) [34, 35] is designed \nto model very large-scale networks, which are described in \ngeneric modelling language called Domain Modelling \nlanguage (DML). SSF can be run in a distributed environment \n(called DaSSE) on a tightly coupled shared-memory \nsymmetric multiprocessor. DaSSF achieves good parallel \nperformance by using a periodic time-stepped approach. All \nprocessors can safely process messages between \nsynchronisation cycles without fear of erroneous results due \nto unsafe events. SSF supports multicast in-channel (many to \none communication) as well as multicast out-channel (one to \nmany) and bus-style channel mapping (many to many). \nSSFNET is the first collection of SF-based models for \nsimulating Internet protocol and networks. The SSFNET \nlibraries include component models for network elements \n(hosts, routers, network interface card, local area networks) \nand network protocols (currently IP, UDP, TCP, BGP and \nOSPF). SSFNET models are self-configuring, that is each \nSSFNET class instance can autonomously configure itself. \nSSF has been demonstrated on networks of several hundred \nthousand nodes.  Contributor: Renesys Corporation. \nSupports: TCP, UDP, BGP protocols. Languages: Java, \nC++. Outputs:  packet-by-packet simulation. Advantages: 1) \nOpen souce code; 2) Free for education; 3) Platform \nindependentent; 4) This has open source code and based on \nOOP, it can be enhanced in future. Limitation: Dynamic \nsimulation cannot be visualised using this tool. \nTeD (Telecommunication Description Language) [36, 37, \n38] is a language for describing telecommunications \nnetworks, coupled with an optimistic network simulation \nengine, based on Georgia Tech Time-warp. The TeD \nlanguage specification is split into two distinct parts- \nMetaTeD and \u201cExternal Language\u201d. MetaTeD defines a set of \nconcepts for modelling the dynamic interactions of entities \nand their compositions. When MetaTeD is appropriately \ncombined with any regular general-purpose programming \nlanguage (say C++) then complete language is formed. TeD is \nprocess-oriented where the number of processes easily \nexceeds one million, warranting efficient support for large-\nscale process orientation. It has demonstrated good \nperformance and scalability when modelling ATM cell \nswitches and private network-network interface (PNNI), \nInternet and wireless network. TeD has been demonstrated on \nnetwork models consisting of tens of thousands of nodes. \nConservative and Optimistic synchronous processes have \nbeen implemented in TeD. Contributor: Kalyan Perumalla, \nAndrew Ogielski, Richard Fujimoto at Georgia Tech. Year: \n1996. Supports: TCP\/IP,  ATM Private Network to Network \nInterface (PNNI) signaling neworks, Multicasting protocols, \nwireless networks. Languages: C++ and Meta-language \n(MetaTed). Outputs: Simulation of models. Advantages: 1) \nTeD itself is independent of the underlying  parallel simulator \nand can be used with other parallel simulator (e.g. Nops, \nrecently developed at Darmouth); 2) TeD achieves high \nparallel performance on multiprocessor machine, speeding up \nthe simulation by a factor proportional to N for N-processor \nmachine. Limitation:1) Limited protocols are implemented; \n2) Not freely available. \nUSSF (Ultra-Large Simulation Framework) [39, 40] \nsimulator is based on the WARPED simulation engine. \nWARPED is a parallel discrete event optimistic simulator \nbased on Time Warp. The syntax and semantic of the input \ntopology models for USSF are described in a Topology \nSpecification Language (TSL). Using TSL, large topologies \ncan be built from smaller sub-topologies and sub-sub-\nACCEPTED MANUSCRIPT \n \n \n \ntopologies. The topology is parsed into an Intermediate \nFormat (TSL-IF). The analysed TSL-IF by the help of static \nanalyser and code generator modules is then used to generate \nan optimal simulatable network topology. USSF is used to \nmodel large networks using a network of Dual-CPU Pentium \nprocessors connected by an Ethernet network. Decoupling of \nthe data and states are provided for swapping data and states \nin and out of the main memory based on demand, freeing up \nthe memory for better performance of the simulation. USSF \nhas been demonstrated on network models of hundreds of \nthousands of nodes. The current implementation of USSF is \nin C++ language in UNIX system.  Contributor:  Dhananjai  \nMadhava  Rao, Philip. A. Wilsey. Supports: LAN, MAN, \nLanguages: C++. Advantages: Very large-scale simulator \n(hundreds of thousands of nodes). \n \nDummynet [41, 42] is a simple, accurate and flexible \nnetwork simulation tool with minimum modification to an \nexisting protocol stack, allowing experiments to be run on a \nstandalone system and can be used to simulate network with \narbitrary topologies. Dummynet works by intercepting \ncommunications of the protocol layer under test and \nsimulating the effects of finite queues, bandwidths limitations \nand communication delays and possibly lossy links. The tool \nallows the use of real traffic generators and protocol \nimplementations while solving the problem of simulating \nunusual environment.  The running of an experiment with this \ntool is as easy and quick as running the desired set of \napplications on a workstation and as a consequence no \noverheads in the communication and experiments can be \nperformed up to the maximum operating speed supported by \nthe system in use.  \n \nThe basic version of Dymmynet works at the interface \nbetween TCP and IP. The implementation takes less than 300 \nline of kernel code in FreeBSD. Under normal condition, \nthere is no system overhead. The principle operation is to \nimplement typical protocol stack where each layer \ncommunicates with the adjacent ones. In Dummynet, to \nsimulate the presence of a network between two \ncommunicating peers the following elements are inserted in \nthe flow of data:  Router with bounded queues size and a \ngiven queueing policy; and communication links (pipes) with \ngiven bandwidth and delays. \n Losses due to congestion are simulated by bounded size \nqueues. Random packet reordering is also simulated. These \nshow the unreliability of the networks. According to [41], a \nsimplest setting is introduced in Dummynet, which includes \none or two routers and one pipe. RED, FIFO with droptail \nqueue policies are implemented in Dummynet. Some filtering \nrules are used to affect the traffic (e.g. TCP traffic to\/from \nport, all traffic through a given interface). \n \nThe applications of Dummynet are debugging, study of \nnew protocol and performance evaluation. Several protocols \ncan be tested using this tool and can see the bugs and can \ndebug the unexpected features of the implementations. This \ntool makes it easy to simulate unusual or hard to reproduce \nsettings in the study of new protocols. The tool can be used to \nstudy the behaviour of existing or new congestion control \nmechanism in presence of bottleneck links or any \nasynchronous links. Performances can be evaluated for a \nmodel in specific parameter settings.  \nThere are some limitations in Dummynet. It can only \napproximate the behaviour of a real system with given \nfeatures. Most of the approximation introduced by the tool \nderived from granularity and the precision of the operating \nsystem\u2019s timer, and in many cases have little influence on the \nexperiments. A second problem is that the periodic task might \nbe run late or even misses one or more timer ticks. Events in \nthe tool occur synchronous with the system\u2019s timers, which \nmay hide or amplify some real-world phenomenon that occurs \ndue to race condition. The current implementation of \ndummynet lacks any automated tool to setup an arbitrary \nnetwork topologies starting from a graphical or textural \ndescription. The tool uses low-level user interface like \ncommand. More details of the commands are shown in the \npaper [41].  \n \nAccording to the paper [41], Dummynet tool can be extended \nto simulate complex network model and graphical output can \nbe visualized. Trace file can be constructed to for the traffic \ninformation. Dummynet runs in FreeBSD and file is not \nsaved and therefore the overhead introduced to the tool is \nalmost negligible. Contributor:  Luigi Rizzo. Year: \nSept.1997. Supported Operating system: FreeBSD. \nSupported elements: TCP\/IP, FTP, Telnet, Web borwsers, \nUDP. Developed Languages: C. Extensibility:Yes. \nOutputs: Emulates a link with fair queueing, artificial delay, \netc., for testing protocols. Simulate the effects of bandwidth \nlimitations, propagation delays, bounded-size queues, packet \nlosses, multipath. Advantages: Free. Open source; Great \ncontrol over operating parameters, simplicity and availability \nto use real traffic generators, high accuracy; almost no \noverhead. Limitation: Dummynet can only approximate the \nbehaviours of a real system with given features; The periodic \ntask might be run late or  even miss one or more timer ticks \ndepending  on the overall system load; Events in dummynet \noccur synchronously with system\u2019s timer which might hide or \namplify some real world phenomenona  which occur because \nof race conditions. \n \nEthersim [43] is a simulation tool to model and study the \nperformance of multimedia\u2013oriented integrated service ATM \nnetworks with mobile hosts and wireless links. It is a discrete \nevent base simulator core and incorporates models of user \napplications and transport, network and MAC layer protocols. \nIt provides the capability to specify a cellular wireless ATM \nnetwork topology and hosts and basestations. \n  \nEthersim consists of five special entities relevant to \nmodelling mobility and wireless communication: an air \nmodule, a map, a mover, mobile hosts, and basestations. The \nair module models the physical air-interface effects (e.g. RF \npower decay, frequency collusion etc). The map module is \nused to define a geographical region and the placement of \nvarious wireless entities (e.g., basestations, mobile hosts) in it \nand is constructed using an undirected graph structure whose \nnode represent arbitrary geographical region referred to as \nroom or cell. The mover is a central entity that moves the \nmobile hosts on the map. Ethersim allows for both random \nand goal\u2013directed movements of the mobile hosts, and allows \nsynchronous goal-directed movements to model conference \nroom type mobility patterns. Basestation is a switch with \nradios, which maintains a routing table using which it routes \npackets coming in on import port to an output port where they \nACCEPTED MANUSCRIPT \n \n \n \nare buffered. The mobile host is derived from the wired host \nand subsumes all its functionality with additional \nenhancements (e.g., mobility aware, rerouting protocols, \nMAC sub-module, and mobile capability with speed). The \ntool is constructed is a modular fashion to allow functionality \nat different levels of the protocol stack to be modified \nindependently, thereby allowing network protocol designers \nto study the interaction between policies embedded in the \nprotocol at different layers.  \n \nEthersim has a rich variety of network components such as \nhosts, links, switches, ATM and TCP\/IP protocol modules \nthat allow the modelling of variety of mixed of wired and \nwireless network scenarios. Ethersim supports wireless and \nmobility aspects in an integral fashion and uses the network \nreference model consists of wired and wireless parts. The \nwired part is composed of switches and wired static hosts \nwith point-to-point wired links connecting the hosts to \nswitches ports or one switch port to another switch ports. \nSome switches acts as basestations having equipped with \nradio interfaces. Wireless mobile hosts are derived from the \nstandard wired host by replacing the wired network link \ninterface with a radio. The radio-equipped host can \ngeographically moves with the users who are carrying it. \nRadio may have multiple channels and radio may be \nconfigured to operate on one of the channels. Channels are \nintrinsically broadcast oriented.  \n \nEthersim supports mobile network protocol (mobile IP and \nmobile ATM), wireless links including bandwidth, large scale \nand small scale propagation loss, receiver sensitivity, \nmultiplexing technique (FDM, TDM, frequency hopping, \ndirect sequence spread spectrum etc.), medium access \nprotocols and hand-off protocols (hard vs. soft hand off), \nflexible pattern of  host mobility (direct and random \nmovements of mobile users), convergence and divergence of \nroaming to\/from a meeting location, and different application \nmodels and adaptation. While host mobbing from one \nbasestation to another, Ethersim uses a single parameterized \nConnection Manager module which follows the combination \nof the rerouting schemes of extension, extension with loop \nremoval, total rebuild, partial rebuild to a fixed anchor switch, \npartial  rebuild to a dynamically selected cross-over switch, \nmulticast to neighbouring basestations.  \n \nThe main software modules of Ethersim are: wired static \nhost, switch, wired link, basestation, wireless mobile host, air, \nmap, mover, traffic source (statistical and trace driven), \nprotocol modules (transport, connection establishment, and \npacket scheduling), measurement modules and graphical user \ninterface modules. The tool uses a single parameterized \nhybrid Connection Manager module to reroute the packets \nwhile host moving.  \n \nEthersim allows to accurately measuring the effect of the \nfrequency hop collisions on the average throughput of \napplications run on the top of TCP. It has various \nperformance measurement and graphical user interface \nroutine to interpret the simulation results. Host mobility \naffects the achievable user and network performance as \nmeasured by the throughput, packet delay, link utilization \nlevels. Ethersim allows studying the delay for rerouting the \npacket path as host moves, handoff and register to new \nbasestation as policies and parameters used in MAC, network \nand transport layers are varied. With Ethersim, user can \nvisualise the effects of reroute, throughput due to frequency \ncollusion, effect of time interval length, performance impact \non host mobility, rerouting policy on per-packet delay etc. \nError recovery and congestion control mechanism can also be \nstudied using the tool. Contributor:  AT&T Bell Laboratory \nYear: 1998. Supported Operating system: Unix. \nSupported elements: Wired and Wireless network, LAN, \nWAN, hosts, links, switches, ATM and TCP\/IP protocol, \nmobile IP and mobile ATM, multiplexing technique (FDM, \nTDM), CBR, VBR, ABR, UBR, MAC protocol, noise \nmodels(e.g. aussian), propagation loss, rerouting models. \nDeveloped Languages: Java.  Extensibility: Yes. Outputs: \nperformance (throughput, packet delay, link utilization), \ncollusion probability, packet loss. Advantages: Support \nmixed wired and wirelss network scenerio; Several host \nmovement policies have been implemented (random \nmovement, goal-directed movement, group movement, mixed \nmovement) which may be diverge or converge; Rich in \nmodels. Limitation: Multiath interference has not yet \nincluded; MAC is still limited. \n \nBONeS (Block Oriented Network Simulator) [44] is a \ncommercial product of Cadence Designer Systems. To use \nthis tool, license is required. BONeS allows the user to \ninvestigate event-driven network systems at the packet level \nby building up systems in the form of input\/output modules in \na signal flow block diagram and simulate the responses at \nchosen probes with given starting parameters. BONeS comes \nwith a variety of supported networking protocols for both \nwireless and terrestrial environments. No limitation of the \nnumber of nodes, links and agents. \n \nThere is a Motif graphical environment in BONeS \nsimulator for capturing the design or architecture of \ncommunication networks and simulating the performance of \nthe captured designs. The user specifies a network design by \ndrawing a hierarchical block diagram with building blocks \nfrom the user-extendible BONeS designer model library. \nModelling elements at the lowest level are called primitives, \nand written in C++. These blocks accept data structures as \ninputs, perform simple operations such as modifying fields \nwithin the data structures, and return data structures as \noutputs. A typical BONeS Designer session consists of four \nsteps:  Creating Data Structure; Constructing Block \nDiagrams; Running Simulations; Evaluating he results. \nThe data structures, necessary to complete the specification \nof BONeS designer model using a graphical data structure \neditor (DSE), are defined hierarchically and can have an \narbitrary number of fields which can contain simple entities, \nsuch as the sequence number and the time stamps. These data \nstructures are defined to meet the needs of the simulation and \ndo not necessarily duplicate the actual packet structure in the \nnetwork being simulated. The first step for a model design is \nto create a data structure. \n \nThe network model is also constructed graphically, using \nthe BONeS designer block diagram editor (BDE). Primitives \nand other blocks are placed on the workstation screen and \nconnected to form protocol functions. These functions are in \nturn grouped to form nodes, and nodes are then connected by \ncommunication links to form a topological network model. \nACCEPTED MANUSCRIPT \n \n \n \nHierarchical and some form of model aggregation are used to \nmanage the complexity of models of large networks. The user \nspecifies parameters of the individual blocks at some points \nprior to simulation. Measures characteristics of traffic and \ncommunication links can easily be incorporated into BONeS \nmodels.  \n \nOnce the network model definition is complete; BONeS \nDesigner performs a variety of error and consistency checking \nand automatically translates the graphical model into a C++ \nprogram. An event-driven simulation of the network model is \nthen executed, with user-specified values for model \nparameters. During the simulation, data structures created by \nsome source models flow along connection lines to various \nprocessing modules, which may alter the content of the data \nstructures and\/or modify their path through the block \ndiagram. Once the simulation has been stated, the current \nsimulation clock time, stop time and whether error and \nwarning messages have occurred. Eventually, data structure \narrives at sink modules, where they are taken out of the \nsystem. A BONeS simulation continues until there are no \nmore data structures in the block diagram or until the \nsimulation clock reaches a user-specified stop time. These are \nperformed using the simulation manager. The simulation \nmanager also provides the capability to record the sequence \nof the execution of a model or to aid in debugging block \ndiagram.   \n \nDuring the simulation, BONeS Designer collects data to \nvarious points in the network using a variety of probes. The \nuser specifies the location and types of the probe. The BONeS \nDesigner library manager takes care of the storage and \nretrieval of the simulation models, programs, parameter value, \nand simulation data. The data collected during the simulation \nare analysed and displayed graphically using the post \nprocessor. The PP has built-in analytical function for \nperforming statistical operations on the data. To display \nresults, the user typically goes through the following steps: \nselecting simulation; selecting probes;  applying a conditional \nor filter to the data probe (not necessary); specifying the X- \nand Y-axis expressions. Contributor: Cadence Designer \nSystems. Year:    1998. Supported Operating system: Unix. \nSupported elements: LAN, CSMA,TCP\/IP, Wireless \nprotocol, ATM support. Developed Languages:  C\/C++.  \nExtensibility:Extendible.  Outputs: analyze simulation \nresults, compute statistical and performance measures \n(throughput and latency) and display results in graphical \nplots.  Advantages: a large library of readymade models; \nInteractive simulation tool for debugging and validating \nmodels. Limitation: Slow for large simulations;Learning \nBones is really hard; Not available now a days. \n \nThe GUTS is a transfer level simulator to simulate wide-\narea network application and services. It is high level wide\u2013\narea network simulator whose goal is to enable simulation or \nrealistic Internet- scale topologies, under a range of realistic \nworkload [45]. The tool is designed explicitly for modelling \nfor simulating networked services at the application level, \nrather than at the transport level or below. The model does not \nuse network queues. GUTS models a network as a directed \ngraph with nodes that represent either hosts or routers and \nlinks that represent direct network connections between two \nnodes. Each link has two static properties-total capacity and \npropagation and two dynamic properties-allocated bandwidth \nand transfers in progress. The network model allocates \nbandwidth for a transfer only once, using the transient state of \nthe network at the beginning of the transfer, and the allocation \nremains fixed for the transfer\u2019s duration. The services \nprovides by GUTS include content distribution networks \n(CDNs), replicated Internet services, grid computing,  peer-\nto-peer networks, a flexible workload construction system, \nsupporting several types of client request patterns and object \nproperties. \n \n The tool is written in object-oriented language C++. GUTS \nruns (execution time) more than 2 orders of magnitude faster \nthan ns [45]. Event rates of GUTS are lower than ns. The tool \ncan handle few hundred of nodes. Grade et al shows in [45] \nthat though the traffic of GUTS are more bursty than Ns-2, \nthe mean traffic is nearly same. Contributor: Syam Gadde, \nJeff Chase, Amin Vahdat.Year:  2002.  Supported elements: \nTCP family, congestion control, WAN design, coarse-grain \nalgorithm. Developed Languages: C++.  Outputs:  \nsimulation of realistic Internet-scale topology (directed graph) \nmaintaining accurate aggregate performance metrics that \nenable to compare the relative performance of services over a \ncommon network infrastructure. Advantages: Runs more \nthan two orders of magnitude faster than ns simulator; Much \nlow event rates (than ns); The Guts network model\u2019s \nasymptotic running time is less than packer- based network \nsimulation model. Limitation:  Limite network protocols are \nimplemented; No network queueing model is used; \nC  Specialised Tools \nATM-TN (ATM Traffic and Network simulator) [46] is \ndesigned to characterise cell level network behaviour. The \nsimulator incorporates three classes of ATM traffic source \nmodels: an aggregate Ethernet model, an MPEG model, \nWorld Wide Web transaction model and six classes of \nATMswitch architectures including output buffered, shared \nmemory buffered and cross bar switch models. The ATM-TN \nsimulator can be used to characterise arbitrary ATM networks \nwith dynamic multimedia traffic loads. Call set up and tear \ndown via ATM signalling is implemented in addition to the \nvarious types of cell traffic streams generated by voice, video \nand data. The simulator is built on a simple, efficient \nsimulation language called SimKit, which is capable of \nsupporting both fast sequential and parallel execution. Parallel \nexecution is supported using WarpKit, an optimistically \nsynchronised kernel that is aimed at shared memory \nmultiprocessor platforms. The main design principles of the \nATM-TN are: 1) accurately mimic ATM network behaviour \nat the cell level for specific traffic loads; 2) create a modular \nextensible architecture; and 3) achieve responsible execution \ntimes for ATM networks that consist of hundreds of traffic \nsources. The structure of ATM-TN consists of the \ncomponents: traffic models, switch models, an ATM \nModelling Framework (MF), SimKit, WrapKit, OSS and the \nTelecom Modelling Framework (TMF). Several distinct \ncomponents are to construct traffic models: input traffic \nsources (e.g. FTP, Telnet, Mosaic, JEPG, MPEG), ATM \nAdaptation Layer (AAL) for converting source data to cell \npackets, access control mechanisms (e.g. leaky bucket). There \nare three types of traffic models are used: MPEG, Ethernet \nand WWW. The basic switch models in ATM-TN simulator \nACCEPTED MANUSCRIPT \n \n \n \nhave two components: the control module and the switch \nfabric. Besides dynamic behaviour of ATM network, \nanalytical outputs can be estimated which include: \npropagation delay, link capacity in bit\/sec, error rate, work \nload and several parameters. Contributor:  Telesim project \nled by Brian Unger at University of Calgary. Supports: \nATM, Data sources (FTP, Telnet, Mosaic, TCP\/IP), Video \nsources (JPEG, MPEG, video- conferencing), WWW model, \nQnet model. Languages: C++. Outputs: Link utilisation, \nQoS, delay analysis. Advantages: 1) Overhead is low; 2) \nHigh performance and realistic model; 3) The amount of \ncomputation associated with processing such events is very \nlow; 4) ATM-TN has a GUI that provides easy simulation \nscenario configuration, data set organisation, and control over \nsimulation execution and report generation. Limitation: At \npresent, workload is balanced manually. \n \nGlomosim (Global Mobile System simulator) [19, 47, 48, \n49] is a scalable simulation environment for wireless mobile \nnetwork systems. It is designed using the parallel discrete-\nevent simulation capability provided by PARSEC. The \nprotocol stack includes: models for the channel, radio, MAC, \nnetwork, transport, and higher layers. It supports TCP, IEEE \n802.11 CSMA\/CA, MAC, UDP, HTTP, FTP, CBR, Fishleye, \nLARScheme-1, ODMRP, WRP, DSR, MACA, Telnet, \nAODV, etc. protocols. \nThere is a visualisation tool VT designed to view and help \ndebugging the protocols. Glomosim currently supports \nprotocols for only wireless network. In the future, it is \nplanned to add functionality to simulate a wired as well as a \nhybrid network. There are eight files related to a network \nmodel designed in Glomosim network simulator. Six input \nfiles are used to execute a network model: Configuration file, \nNodes file, Mobility file (movement of the nodes and traffic), \nRouters file, Application file, Ber_bpsk file (Bit Error Rate). \nTwo files are related to the output of the network model. \n \nTable 2: Summary of the small and large scale network simulation tools \nTools Usages Target Network \nModel \nOutputs  Stored Data \nFormat  \nPlatform \nNs-2 Educational, \nResearch \nWAN Simulation of several protocols Text file (ns\/tcl \nformat) \nUnix \nNetwork \nWorkbench \nEducational, \nresearch \nLAN\/MAN Simulation of network, summary of interlayer statistics Test file Windows \nUnix \nNetSim Educational LAN (Ethernet) Simulation, histogram of packet queuing delay, offered load, \noverall throughput (%), actual data rate, average queuing delay, \nvariance of queuing delay, packet transmission rate, and total \nnumber of packets.  \nText file Windows \nMaRS Educational WAN, link-\nstate and \ndistance vector \nrouting, SPF, \nExBF, Segal \nrouting \nSimulation of application traffic-ftp, telnet, simple, various \nmeters (binary, bar graph, histogram, line graphs, etc), periodic \nand event updated statistics, throughput, delay, jitter, dropped \npackets, routing load etc., no trace file, Hope count, utilisation, \ndelay and hope-normalised delay. \nNot known-\nrequire further \ninvestigation \nUNIX, \nWindows \nOPNET Commercial LAN \nSatellite, radio \nmodelling \nSimulation of several protocols, delay, utilisation etc. \nperformance analysis. \nText file \n(C\/C++ format) \nX window \nCOMNET III Commercial LAN,  MAN,  \nWAN \nNode utilisations, application delays, link delays and utilisation, \nmessage delays, packet delays, calls blocked, disconnected and \npre-empted, session setup delays etc.  \nGraphical \ninput\/output. \nNo text file for \nmodelling \nUnix \nREAL Commercial LAN Statistics such as the number of packets sent by each source of \ndata, number of packet received by sink, the queuing delay at \neach queuing point, and the number of dropped and \nretransmitted packets. \nText file Unix  \nATM-TN Specialised LAN, MAN, \nWAN \nSimulation of ATM network  Text file in \nUnix system.  \nUnix \nGloMoSim Specialised Wireless \nnetwork \nSimulation of wireless network Text file (two \nconfiguration \nfiles) \nWindows \nUnix  \nDummynet Commercial LAN Simple tcp \/ip protocol, Debugging protocol, study new \nprotocol, Performance evaluation \nNo output file FreeBSD \nEtherSiM Commercial Wired and \nwireless \nnetwork, WAN \nPerformance analysis (throughput, packet delay, link \nutilization), collusion probability, packet loss. \nFurther \ninvestigation \nneeded \nUnix  \nBoNES Commercial, \nresearch \nWAN, \nWireless, ATM \nsupport \nPer flow monitoring, no automatic trace generation, trace, built-\nin post processing tool. \nFurther \ninvestigation \nneeded \nNeed further \nstudy \nGTNets Educational, \nresearch \nLAN\/WAN Simulation as well as performance analysis, histogram of \nresponse time \nText file \n( C based \nsource code) \nUnix \nWIPSIM Educational Wireless \nnetwork \nSimulation of all layers of the OSI model, calculation of  \naverage packet delays, throughput, packet delivery ratios etc. \nText file OS \nindependent \nQUIPS Specialized Differentiated \nService \nSimulation of behaviour of DS. Text file Unix \nPlanNet Commercial WAN, LAN Need further study Need further \nstudy \nNeed further \nstudy \n  \nACCEPTED MANUSCRIPT \n \n \n \nAll of the statistics (selected simulation events) is compiled \ntogether into a file called glomo.stat that is produced at the \nend of the simulation. Trace file is produced (if \u2018write trace\u2019 \noption is chosen) which can be played as many times as user \nwants and this is faster than real time. Basically, Glomo.stat \nand trace files store same set of data. But trace file can be \nsimulated any time, which is not possible with Glomo.stat. \nSupports: TCP family, UDP, CBR, FTP, HTTP protocols, \nwireless. Languages:  Java, C. Outputs: Dynamic output in \nVT tool, trace file. Advantages: 1) Easy configurable and \nfast simulation; 2) Many protocol already implemented; 3) \nWell documented; 4) Dynamic behaviour can be visualise \nusing VT tool; 5) Large scale simulator; 6) Open source code; \n7) can be extended for future.  Limitation: 1) Currently wired \nnetwork is not imnplemented; 2) Incomplete API.  \n \nQUIPS-II (Queen\u2019s University IP simulation-II) [50], a \nsuccessor of QUIPS, is a discrete event specialised simulator \nused for the design and performance evaluation of \ndifferentiated service (Diffserv or DS) based on network \ndifferentiated services or DS architecture that has recently \nbecome a promising method to address QoS (Quality of \nService) issues in IP networks. Instead of the peer-flow \ntreatment in Resource reSerVation Protocol (RSVP), diffserv \nnetworks provide QoS to each packet in the traffic stream. \nThe simulator implements both the expedited and the assured \nforwarding per-hop forwarding behaviour in Diffserv \nnetwork, sharing many features of IETF proposal. By setting \nup a network model with variable parameters, simulation can \nbe carried out to observe the Diffserv behaviours. \nQUIPS II has been designed in a modular fashion using a \nnumber of building blocks including network modules, \ncontrol modules, and a GUI. These building blocks interact \nwith each other.  The network modules represent physical \nnetwork components, including senders, receivers, links and \nnodes. The control modules are used to get global parameters, \nread the network topology file, set parameters and collect \nstatistics during simulation. The GUI provides a friendly \ninteractive environment to users for setting parameters and \nmonitoring simulation runs. \nQUIPS-II decomposed a DS domain into four kinds of \nphysical (network module) components:  senders, receivers, \nnode and link where each kind of component is implemented \nby a corresponding network module. A sender is a data source \nthat generates a traffic flow which could be one of the three \nservices classes (Premium, Assured, Best-effort) depending \non the sender\u2019s configuration. When generated, each packet in \nthe traffic is marked in its DS field by the sender. The \nsimulator could simulate two types of traffic: CBR and bursty \ntraffic. A receiver is a destination that consumes the packets \nsent by it peer sender and each receiver has only one peer \nsender. When a receiver receives a packet, its delay and \nothers results are measured. A node represents a router in the \nphysical network, which could be either an edge router or an \ninterior router (two types of node). This module is the most \nimportant element in the simulator to implement Diffserv. \nLink is modelled as a unidirectional link, which is \ncharacterized, by its propagation delay and bandwidth.  \nThe control modules are used for controlling (a monitor, a \nstopper, and some related data files) and monitoring the \nsimulation, which have a monitor, a stopper, and some files (4 \ntypes). The monitor is used to collect and display the \nperformance measurements (average delay, average drop rate \netc.) of interest periodically. The stopper is used to specify the \nconditions of stopping a simulation run.  \n \n   QUIPS-II provides a user-friendly GUI interface. There are \nfive tabs in the GUI: Global parameter tab, PHB tab, Network \nTopology tab, Result tab and Logs tab. The Global parameter \npanel is used to set parameters (maximum packets sent, \npacket size etc), the PHB panel is for displaying the current \nPHB groups supported by DS domain including the \nparameters peak rate\/target rate of traffic flow etc. The \nnetwork topology panel shows the network components \n(sender, receiver, server, nodes and links). The result panel \nshows the simulation result updated periodically and finally \nLog panel shows the information generated during simulation \nrun. \n \n QUIPS-II uses the RIQ algorithm for queue management. \nRIQ is a modified version of RED, which is used to detect \nupcoming congestion and provides better network utilization. \nNormally to each traffic flow is 20% for the Premium, 40% \nfor the Assured and the remaining 40% for the best effort. \nUser can change these schemes using this tool. User will be \nable to realize the concept of QoS, traffic conditioning, \ndifferent traffic flows. There are three types of PHBs in the \nDiffser architecture implemented in QUIPS-II which are: \nExpedited Forwarding (EF), Assured Forwarding (AF) and \nBest-Effort (BE) which are used to built Premium service \n(low loss, low latency, low jitter, assured bandwidth0, \nAssured service (assured minimum throughput) and Best \neffort (no QoS) services in IP network respectively. User can \nfind this tool useful to see the packet drop and delay \nbehaviour for different services with different workload.  \nThere are four kinds of files in QUIPS II, which are: PHB \nfiles (a set of TCAS to specify the DS endpoint with \ncharacteristics), network configuration files (configuration of \nseveral topologies with parameters setting), record file \n(various simulation result) and log files (record of the \nexecution logs of simulation runs). These files are useful for \nlater analysis. QUIPS-II runs in UNIX environment. The tool \nis developed using JAVA programming language. \nContributor: Queens University. Supported Operating \nsystem: Unix. Supported elements: RSVP, BE, QoS, AF, \nRIQ, DS, CBR, bursty traffic. Developed Languages:   \nJAVA. Extensibility: Extensible.Outputs: performance \nmeasurements (average delay, average drop rate etc.).  \n \nTable 2 and Table 3 show the summary of small and large \nscale simulators, and very large scale simulators respectly.  \nV. NETWORK TOPOLOGY GENERATION TOOLS \nThere are not too many works which are focused on the \noverview of topology generation tools and if they do, it \nmostly relates to the algorithms on which tools are based (see \ne.g. [51, 52]). It appears that there are the following historical \nperiods in development of topology generators and their use \nfor Internet research: \n\u2022 Before 1999 when there was a strong belief that \nInternet is hierarchical [52] (Waxman algorithm, tools \nTiers, Transit-Stub); \n \nACCEPTED MANUSCRIPT \n \n \n \nTable 3: Summary of the very large-scale network simulation tools  \nTool Usages Description Simulation \nresolutions \nScale of \noperation \nStored Data \nFormat \nPlatfor\nm \nPdns Educational, \nNetwork \nresearch \nExtension to the ns simulator. Works in conjunction with \nGeorgia\u2019s RTIKIT to process events in a correct \ntimestamp(LBTS) order in the case of distributed simulation. \nThe topology is modelled using (GT-ITM). \nPacket level Hundred \nof \nthousands \nText file(tcl) Unix  \nTeD Commercial, \nNetwork \nresearch \nTele-communication networks, TeD (telecommunication \nDescriptive Language) is a tool that brings automated \nparallelisation of network simulation by transforming its \nmodels into functionally equivalent GTW (Georgia Time- \nWarp). C++ classes in ns become entities in TeD but ns packet \nclass is implemented as an event. On the negative side, it \nacknowledges the cost of \u2018state-saving\u2019 as the most serious \namong Time Warp overheads. \nPacket level Tens of \nthousand \nTED \nlanguage \n(text) \nSun \nSolaris  \nSSF Commercial, \nNetwork \nresearch  \nLarge-scale networks described in domain modelling language \n(DML), SSF is a discrete event modelling API designed for  \nvery large networks and can execute a million or more \nconcurrent TCP\/IP flows. SSFNET models are self-configuring \nand configuring data is hierarchical structured. SSF architecture \nhas just five generic primary classes. \nIP packet Few \nhundred \nthousand \nDML(domai\nn modelling \nlanguage) \nconfiguration \nfile \nLinux, \nSun \nSolaris,\n, Unix, \nWindo\nws \nUSSF Commercial, \nresearch \nTo simulate complex model with over 1 million components, \nUSSF is a framework that runs as an application on an \nunderlying parallel kernel and utilising its services. The kernels \ninclude the WARPED based on optimistic PDES and NOTIME \n(an asynchronous PDES kernel). RTEL was developed to \nreduce the static size of the application modules and in turn its \nstatic memory requirements. It is an ideal candidate for \nsimulating large applications that contain LPs of common \ndescription. \nLP (message \npassing) \nFew \nhundred \nthousand \nTSL \n(topology \nspecification \nlanguage) \nformat(text) \nLinux \nSWiMNet Commercial Wireless, mobile network. Simulation of MH, BS and BSC \nconcepts. Call blocking\/dropping, channel utilization, quality of \nservices etc. \nPredefined  \nPCS  model \nFew \nhundred \nthousand \nFurther \ninvestigation \nneeded \nLinux \nGUTS Commercial \nResearch \ntoward \ncoarser \ngained \nnetwork \nmodels \nA high level wide area network simulator designed to \nenable simulation or internet-scale topologies under a \nrange of realistic work loads. No network queues are \nused in the model and model allocates the bandwidth to \na particular transfer only once and it remains fixed \nduring the transmission of that transfer-block. The \nsimulator tries to simulate by using bulk-transfers as \ntraffic composed in the backbone is of  bursty nature. \nNo network \nqueues \ntransfer \nlevel burst \nmessage \nFew \nhundred \nnodes \nNeed \nfurther \nstudy \nNeed \nfurther \nstudy \n \n\u2022 1999-2001 after it was discovered [51-53] that the \nInternet\u2019s degree distribution is a power law and \nmost of the work was focused on producing and \nsimulating such topologies (see e.g. [49-51]); \n \n\u2022 Since 2001 [42] when attention was shifted again \nfrom local properties well represented by degree \ndistributions towards large-scale properties which \nnaturally are better represented by hierarchical \ngenerators. \nMost of these tools found are discussed briefly in this \nsection. \nWaxman [54] is one of the first topology generators \nwhich produces random graphs based on the Erdos-Renyi \nrandom graph model, but it includes network specific \ncharacteristics such as placing the node on a plane and \nusing a probability function to interconnect two nodes in \nthe Waxman model that is parameterized by the distance \nthat separates them in the plan. \nTiers [51, 55] is a multi-tier network topology generator \nthat implements models trying to imitate the structure of \nthe Internet. The generated model of Tiers is based on a \nthree-level hierarchical structure aimed reproducing the \ndifferentiating between WANs, MANs and LANs \ncomprising the Internet. To generate a random topology \nusing Tiers, one specifies a target number of LANs and \nMANs. Currently Tiers cannot generate more than one \nWAN per random topology. For each level of hierarchy, \none also specifies a fixed number of nodes per network. A \nminimum spanning tree is computed to connect all edges, \nthen other edges are created based on user-specified \naverage inter-level and intra-level redundancy. Edge \nformation favors close-by nodes, resulting in topologies \nwith large diameters. Tiers is written in C++.  \nTransit-stub (TS) [56] is a package for generating and \nanalyzing graph models of internetworks. According to the \nedge count, the Transit-Stub model produces the connected \nsub-graphs by repeatedly generating graph and checking \nthe graph for connectivity and unconnected graph are \ncancelled. This method ensures that the resulting sub-graph \nis from all possible random graphs. Several types of \ninformation are related to nodes and edges for the \naugmentation of the basic topology (e.g. label (string) of \nnode for properties of node, an identifiers of each node for \nindicating the stub or domain, global identifier for the \nbelonging domain, a domain-local identifier). Each edge \nhas a routing policy (shortest path) weight that can be used \nto find routes that follow the standard domain-based \nrouting. TS model does not currently support \nrepresentation of host systems. The TS generation software \nis written in C language. \nACCEPTED MANUSCRIPT \n \n \n \nGT-ITM [57, 58] is a popular topology generator that \nproduces topologies based on several different models. The \nGT-ITM topology generator can be used to create flat \nrandom graphs and two types of hierarchical graphs, the N-\nlevel and transit-stub. The main characteristics of GT-ITM \nare that it provides the Transit-Stub (TS) model that \nfocuses on reproducing the hierarchical structure of the \ntopology of the Internet. In the TS model, a connected \nrandom graph is first generated. Each node in that graph \nrepresents an entire Transit domain. Each transit domain \nnode is expanded to form another connected random graph, \nrepresenting the backbone topology of the transit domain. \nNext, for each node in each transit domain, a number of \nrandom graphs are generated representing stub domains \nthat are attached to that node. Finally, some extra \nconnectivity is added, in the form \u2018back-door\u2019 links \nbetween pairs of nodes, where a pair of nodes consists of a \nnode from a transit domain and another from a stub \ndomain or one node from each of two different stub \ndomains. GT-ITM also includes five flavours of flat \nrandom graphs. \nInet [59] and PLRG [60] are two generators aimed at \nreproducing the connectivity properties of Internet \ntopologies. These generators initially assign nodes degree \nfrom a power-law distribution and then proceed to \ninterconnect them using different rules, Inet first \ndetermined whether the resulting typologies will be \nconnected, forms a spanning tree using nodes if degree \ngreater than two, attaches nodes with degree one to the \nspanning tree and then match the remaining unfulfilled \ndegrees of all nodes with each other. PLRG works similar \nto Inet in that it takes as an argument the numbers of the \nnodes to be generated and exponent value of alpha. This \nexponent value is the parameter n power law distribution \nwhich is used to assign a prior degree to the nodes of the \ntopology. \nBRITE [58, 61, 62] is a generator based on the AS \npower-laws. Furthermore, BRITE also incorporates recent \nfindings on the origin of power-laws and observations of \nskewed network placement and locality in network \nconnections on the Internet. By studying a number of \nexisting topology generators, the authors of BRITE claim \nthat the preferential connectivity and incremental growth \nare the primary reasons for power-laws on the Internet. For \ncompleteness, topologies are generated that incorporate \nboth skewed node placement and locality in network \nconnections as well as topologies with just incremental \ngrowth and preferential connectivity. To generate a \ntopology on a plane, the plane is first divided into HSxHS \nsquares, then the number of nodes in each square is \nassigned according to the node placement (NP) which is \neither a uniform random distribution or a bounded Pareto \ndistribution. The bounded Pareto distribution gives a \nskewed node placement where a non-negligible number of \nsquares have a large number of nodes in them. Each square \nis further divided into LSxLS smaller squares and the \nassigned nodes are then uniformly distributed among the \nsmaller squares. A backbone node is selected from each of \nthe top-level squares populated with nodes and a spanning \ntree is formed among the backbone nodes. Nodes are then \nconnected one at a time to nodes that are already connected \nto the backbone. A new node can have preferential \nconnectivity in its choice of neighboring nodes: locality-\nbased, outdegree-based or both. The locality-based \npreferential connectivity uses a Waxman probability \nfunction to connect nodes in the topology. In outdegree-\nbased preferential connectivity, the probability of a new \nnode connecting to an existing node is the ratio of the \nexisting node\u2019s outdegree over the sum of all outdegrees of \nnodes in the connected network. Finally, when mixing both \nlocality based and outdegree-based preferential \nconnectivity, the probability of connecting to an existing \nnode under outdegree-based preferential connectivity is \nweighted by the Waxman probability between the new \nnode and the existing node. Each new node introduces new \nlinks. \nKOM ScenGen [63] is a topology generator that \nsupports the manual and automatic creation of \nexperimentation scenarios for network research from the \ntopology creation over traffic generation to evaluation. The \nscenario includes all parameters needed for the simulation \nand experiment, e.g. topology, link and node properties, \ntraffic mix, parameters, measurement points etc. In \nScenGen, in the first step, a topology is created manually \nor automatically. Then the properties of the links and \nnodes (e.g. capacity, queuing algorithm) are set manually \nor automatically. Also the traffic parameters for the \nscenario have to be set. Next the network load which is the \ntraffic of all nodes is created. This step can be followed by \na plausibility check where several things critical for the \nscenario can be checked for plausibility. An example \nwould be estimating the capacity necessary for the \ngenerated traffic and comparing it with the available \ncapacity. If much more bandwidth is needed than offered, \nthe operator might want to change the scenario parameters. \nAfter the plausibility check the scenario is exported to ns-2 \nfor simulation and\/or to a collection of scripts and \nconfiguration files that are used to setup the scenario in a  \nTable 4: Network Topology Generation Tools. \nTools Scale of \ntopology \nOS Generated Topology Implemented \nLanguages \nType of \nOutput \nWaxman Large Unix Random graph C Text file \nTiers Large Unix Three level-hierarchy model for LAN, MAN, WAN C++ Text file \nTransit-Stub Large  Unix  Random graph C Text file \nGT-ITM Very Large Unix Transit-stub model C Text file \nInet Very large Unix Internet, Spanning tree C Text file \nPLRG Large Unix Spanning tree C Text File \nBRITE Very Large Unix Seven types of model C++, Java Text file \nKOM ScenGen Large  Windows, Unix Network Scenario (topology and traffic) Java Text File \n \nACCEPTED MANUSCRIPT \n \n \n \ntestbed. The next step is to manually adapt the ns-2 files or \nthe scripts and configuration files for specific needs. After \nthat the simulation or experiment can be conducted and in \nthe last step be evaluated. In this tool, there are several \ntraffic models, sink models, load generators, traffic \ngenerators. There is a converter with ScenGen which can \nimport the topologies generated by the tools Tiers, BRITE, \nGT-ITM, Inet, and NLANR. Currently, there are two \nexport modules available in ScenGen: one for ns-2 and \nother for ScenGen\u2019s own testbed. \nAnother set of topologies for which special generators \nare not required are regular topologies such as the mesh, \nstar, tree, ring, lattice, etc. These topologies have the \nadvantages that they are very simple and are generally used \nfor simplicity or to simulate specific scenarios such as \nLANs or other shared communication media.  \nTable 4 shows the summary of network topology \ngeneration tools. \nVI. NETWORK DISCOVERY TOOLS \nCurrently, networks are monitored, maintained and \ndiagnosed using discovery tools that rely on network \nprotocols like Internet Control Message Protocol (ICMP) \nand Simple Network Management Protocol (SNMP). These \ntools support network discovery and provide the means to \nremotely query and control network devices, such as \nrouters and hosts. These discovery tools have proved to be \neffective in determining configuration problems and in \nhelping the security analysis [64]. \nThe network discovery tools are commonly used for \nnetwork management because they may help to discover \nthe nodes, links, topology, bandwidth, utilisation, \noperational state of links, bottlenecks and problems within \ncabling or routine information distributed among LANs, \nwithin the domain and in the network backbone, type of \nservices, deployed services, traffic, infrastructure, etc. \nThese types of information help the users\/planners to map, \ncontrol, maintain, monitor, and secure the network. \nThere are many network discovery tools available. Some \nof the leading discovery tools are briefly discussed in this \nsection.  \nA   Educational Network Discovery Tools \nFremont [65] is a network discovery tool that uses a \ncombination of non-SNMP protocols and techniques to \ndiscover the network: watching ARP (Address Resolution \nprotocol) packets; sending ICMP ping and netmask \nrequests and using traceroute; watching RIP (Routing \nInformation Protocol) packets between routers; and reading \nDNS reverse-lookup information and using similar naming-\nconversion heuristics as Scotty to locate multi-homed \nmachines. The use of so many techniques to discover the \nnetwork has the advantage of increasing the accuracy of the \ndiscovery. On the contrary, it relies on non-standard \nheuristics, not to mention the amount of work required to \nproperly implement and coordinate the multitude of the \nprotocols. \nScotty [66] is built upon a custom Tcl-based API. The \nnetwork discovery tool itself is called tkined and .tkined \nuses ICMP (ping, traceroute, netmask request) and DNS \nheuristic to discover a network. The advantage of this \nmethod is that the protocols are generally well supported. \nThe disadvantages are that accuracy can suffer, since the \nheuristics are based on common practice in use, not on \nwell-defined standards. \nNetMap-there are different discovery tools with the \nsame name \u201cNetMap\u201d. As described in [67], NetMap is an \nattempt to solve the problem of mapping out the \ninterconnections of networks and machines. For \nmaintaining network, an up-to-date map is needed of the \nnetwork that shows the topology and any hardware \nattached. NetMap relies on a comprehensive network \nmodel that is not limited to a specific network level. \nNetMap uses only Internet Control Message Protocol \n(ICMP) and SNMPv1 for the system information. ICMP \nwas chosen because NetMap focuses only on IP-layer \ndetection and the features of ICMP that are virtually \nuniversally supported. NetMap can discover any network to \nwhich it has IP connectivity due to its non-reliance on \nprotocols such as ARP. The output of the NetMap is in text \nformat.  \nWhen all discovering is completed, Netmap will print out \nthe network table it has constructed as well as some \nstatistics, such as the number of machines found, the \nnumber with valid agents and so on. If a machine is found \nin the ping phase but does not support SNMP, it will not be \nadded to the network map. As SNMP does not provide \nmuch the accuracy (about 50%), NetMap is not very much \nused in practice. NetMap is implemented in C++ on Solaris \n2.5.1 platform. It uses SNMP API library to facilitate \nSNMP access.  \nAnother tool also called NetMap is described in [68] \nwith a comparison with other network discovery tools. \nBig Brother [69] is a loosely-coupled distributed set of \ntools for monitoring and displaying the current status of an \nentire network and notifying network administrator if \nsomething should be done. Big Brother consists of local \nclients that test system conditions and the availability of \nnetwork services and send these status reports to one or \nmore display servers where these reports appear as little \ndots on a web page, or pager servers that notify \nadministrators about system problems. The most important \nfeatures of this tool are: simple testing of the network \nconnectivity via ping; discovery of the availability of ftp, \nhttp, smtp, pop3, dns, telnet, imap, nntp, and ssh servers; \nlocal system clients monitor disk space, CPU usage, \nmessages, and can check that important processes are up \nand running; support for multiple DISPLAY and PAGER \nservers for high-availability; warning and alarm levels are \nall easily redefinable; Web display can be easily modified; \nsupport for custom external tests; Integration with other \nsystems like MRTG; many custom tests available to test \nthings like Oracle databases; notify via e-mail, numeric \npager, alphanumeric pager, or custom pager; notify based \non machine name, test type, time of day, test result; delay \nnotifications until a problem has existed for a \nACCEPTED MANUSCRIPT \n \n \n \npredetermined amount of time; require notifications be \nacknowledged; disable repeated pages from the web \ndisplay; automatic escalation should a problem exist for \nlonger than a predetermined amount of time. \nB Commercial Network Discovery Tools \nLANsurveyor [70] makes it easy to map, manage, and \nreport on entire network. LANsurveyor provides four \nessential functions in one cost-effective application: \nautomatic network maps, asset management reports, \nnetwork monitor, and remote administration and \ndistribution of software. Once network nodes are \ndiscovered, LANsurveyor compiles the information into a \ncohesive, easy to view network map with lines representing \nnetwork connectivity and each node represented with an \nicon. LANsurveyor generates a map of the entire network \nautomatically using several different methods, including \nICMP (ping), NetBIOS, and SNMP. Maps can be printed \nor exported for display or editing in any editor. \nLANsurveyor allows administrators to create reports that \ninclude more than 100 different pieces of information. \nNetView [71] allows IP discovery, visualization, \nautomatic update, event notification and so on. NetView \nperforms TCP\/IP discovery and displays network \ntopologies for administrators. Also, the software manages \nevents and SNMP traps and performs network monitoring \nby identifying network failure root causes and gathering \ntrending and analytical data. It too seems use SNMP for \ngathering its system information. NetView uses a Web-\nbased interface, so the application\u2019s data is easily \naccessible from any Web browser. NetView maintains a \ndevice inventory, easing network administrators\u2019 asset \nmanagement tasks. NetView is available for a variety of \nplatforms, including AIX, Linux, Solaris, and Windows \nNT\/2000. \nNessus [72] is a completely new security auditing tool \nwhich aims to be an up-to-date and easy to use tool. It is a \nnetwork scanner that can check for vulnerabilities by \nattempting to exploit them. This makes it more accurate, \nbut also more heavy-handed, than other scanning tools that \nassume well-known port numbers. Nessus supports port \nscanning, and attacking, based on IP addresses or host \nname(s). It can also search through network DNS \ninformation and attack related hosts at the bequest. Tests \nare implemented as plug-ins, which are grouped into \nfamilies, for example dealing with distributed denial of \nservice tools. Individual plug-ins or families can be \ninstalled or not to give good control of what vulnerabilities \nare scanned for. Plug-ins are frequently updated to cover \nnew vulnerabilities. Key features of Nessus are multihost. \ntesting, multithreading, plugin support, easy-to-write \nplugins, easy-to-use reporting system etc. The plug-in \narchitecture of Nessus allows users to customize it for their \nsystems and networks. As with any scanner, Nessus is only \nas good as the signature database it relies upon. \nFortunately, Nessus is frequently updated. It features full \nreporting, host scanning, and real-time vulnerability \nsearches. It has a client\/server architecture, the server \ncurrently runs on Linux, FreeBSD, NetBSD and Solaris, \nclients are available for Linux, Windows and there is a Java \nclient. There could be false positives and false negatives, \neven in a tool as powerful and as frequently updated as \nNessus. \nNmap [73] is a popular much more fully-featured host \nscanning tool that can be used to determine the topology of \na network. Nmap has been available for many years and is \nprobably the most often used tool when gathering \ninformation. It features advanced techniques such as TCP-\nIP fingerprinting, a method by which the returned TCP-IP \npackets are examined and the host OS is deduced based on \nvarious quirks present in all TCP-IP stacks. Nmap also \nsupports a number of scanning methods from normal TCP \nscans (simply trying to open a connection as normal) to \nstealth scanning and half-open SYN scans (great for \ncrashing unstable TCP-IP stacks). Administrators can use \nNmap on a network to find host systems and open ports on \nthose systems. Nmap is a competent first step in \nvulnerability assessment. User can map out all the hosts \nwithin his network and even pass an option that will allow \nit to attempt to identify the operating system running on a \nparticular host. Nmap is a good foundation for establishing \na policy of using secure services and stopping unused \nservices. Nmap can be run from a shell prompt or using a \ngraphical frontend. A shell prompt accepts the nmap \ncommand followed by the <hostname> or <IP address> of \nthe machine user wants to scan. Nmap tests the most \ncommon network communication ports for listening or \nwaiting services. This knowledge can be helpful to an \nadministrator who wants to close down unnecessary \nservices. \n \nTable 5: Network Discovery Tools. \nTool Usages Description Node \nDiscovery \nTopology \nDiscovery \nNode  \nManagement \nOutput \nFremont Educational  Topology discovery tool Yes Yes No Text file \nScotty  Educational Network management Tool Yes Yes Yes Text file \nNetMap Educational Port scanning, network analysis tool Yes Yes No Text file \nBig Brother Educational, \ncommercial \nNetwork monitoring tool  No  No  Yes  Text file \nLANsurveyor Commercial Topology discovery, Network mapping. Yes  Yes  Yes  Text file \nNetView Commercial Topology discovery tool Yes Yes Yes Text file \nNessus Commercial Vulnerability scanning tool Yes  No  No  No text file \nNmap Commercial Port scanning Yes No No No text file \nOpen View Commercial  Network management tool Yes Yes Yes Database \nIntermapper Commercial Port scanning, topology discovery, network analysis \ntool \nYes Yes Yes Text file \nACCEPTED MANUSCRIPT \n \n \n \n \nOpenView [74] is a Hewlet-Packard\u2019s package that covers a \nwide range of network and system management tasks. The \ntool specially covers network discovery. Based on \nconfiguration choices, it uses SNMP to gather information \nabout network hardware, but how it determines the existence \nof the machines in the first place is unclear. HP OpenView is \nquite mature and has many partner developers. Thus, it is very \ncomprehensive package and naturally, it is also quite \nexpensive. In addition, due to its size, it uses a significant \namount of resources and its operation has impact on the \nnetworks.  \nInterMapper [75] is a networking monitoring and alerting \nsoftware that shows the potential network problems before \nend-users and customers suffer downtime or poor \nperformance. SNMP probes discover and query elements \nacross the distributed network - whether it spans several \nrooms, a building, an office park, or distributed locations. \nSynthetic transactions test critical applications and alert use to \nemail, web, or directory server problems. \nTable 5 shows the summary of the network discovery tools. \nVII. INTEGRATION OF THE TOOLS \nIt would be useful, if a model could be analysed using \ndifferent tools simultaneously. One tool can be complemented \nby other tools for their distinctive features. In this respect, \nthere is a need for integrating analytical, simulation, topology \ndiscovery and generation tools altogether. In the integrated \nenvironment, the user\/planner would have the facility to test \nhis\/her network model in different views and could consider \nthe outputs from different angles. Understanding the strengths \nand weaknesses of a specific model in different design \nenvironments makes it possible to improve the design \nprocess. \n \nIf all of the network MS tools are integrated and used \ntogether then the complementary features can be applied in a \nnetwork model and justified it [76]. For the proof of this \nconcept, four tools have been integrated (e.g., Ns-2, Delite, \nGlomosim and Brite). As different tools are designed by \ndifferent developers, it is natural that they have different \npurposes, nature and characteristics as well as \nincompatibilities. Delite is a rich tool with its topology design \nalgorithms. It has analysis capability, such as node reliability, \nutilisation etc. There is a limitation of the Delite, which is that \nit does not support any model to be designed with more than \n100 nodes. The ns-2 is a simulation tool with rich network \nfeatures. Most probably, this is the most popular tool now-a-\ndays. It supports most of the TCP\/IP protocol suit. ns-2 uses \nnam editor as a companion tool to edit a model as well as to \nvisualise the dynamic behaviours. User can design a model \nmanually or write down code (tcl script) to design a network \nmodel. Anyway, ns-2 has no analysis capabilities and \ntopology design algorithms. Brite is topology generation tool, \nwhich is used to create synthetic topology. It supports eight \ntypes of different topology models. Glomosim is a wireless \nsimulation tool, which is becoming popular day by day. It has \nalso rich networking features. One can design a network \nmodel using one tool and transform this model in other format \nand then can perform experiment and see its features. For an \ninstance, one can design topology using Brite tool and \ntransform it into Ns-2 format, do experiments of different \nprotocols with the topology, then analyse its reliability, \nutilisation transforming into Delite model (format).  \nVIII. CONCLUSIONS \nIn this paper, a survey of the research work on network MS \ntools with a classification is presented. We have tried to \nreview all the recent research work very briefly that have \nbeen brought to our attention, identified which are the main \ncontributions that have been made, and what are the issues \nthat seem to be open to further research. \nTopology of a network or a group of networks (e.g. \nInternet) has a strong bearing on many management and \nperformance issues. Investigation of the topological \ncharacteristics of computer network and its practical uses is \nmuch more accurate when right tools are applied. In this \npaper, a review of the research work on network topology \ngeneration and discovery tools is presented. \nNetwork discovery tools are pretty diverse and can do tasks \nfrom purely topology discovery to network mapping, to port \nscanning and even vulnerability scanning. Discovering \nphysical IP network connectivity is not easy task and despite \nthe critical role of topology information in enhancing the \nmanageability of modern IP networks, none of the network \nmanagement platforms currently available on the market can \noffer a general-purpose tool for automatic discovery of \nphysical IP network connectivity [77]. \nOur overall conclusion from this survey is that parallel, \nvery large-scale network simulators are relatively new and \nstill rapidly evolving field where Internet is trying to map. \nExisting research has certainly made significant contribution \nin this field. However rapid advances in simulation \ntechnology enable to execute highly interactive and dynamic, \nparallel simulations\/animations on the network technology. \nReferences: \n [1] Bragg A.W. \u201cWhich network Design Tool Is Right for \nYou?\u201d IT Professional, September\/October, 2000, p23-\n31. \n[2] James, D. McCabe. Network Analysis, Architecture \nand Design. Morgan Kaufman Publishers. San \nFrancisco, Inc. Francisco, Ca, 2003. \n[3] Todd R. Andel, Alec Yasinsac. On the Credibility of \nManet Simulations. Computer Magazine, IEEE \nComputer Society, July 2006, pp48-54. \n[4] Stuart Kurkowski, Tracy Camp, and Michael Colagross. \nMANET simulation studies: the incredibles. ACM \nSIGMOBILE MCCR Vol. 9, Issue 4, pp. 50-61, Oct. \n2005. \n[5] Rahman M.A., A. Pakstas and F.Z. Wang.  \u201cNetwork \nModelling and Simulation Tools\u201d, Proc. of the 8th \nEPSRC Annual Postgraduate Symposium on the \nConvergence of Telecommunications, Networking and \nACCEPTED MANUSCRIPT \n \n \n \nBroadcasting (EPSRC PGNet 2007), Liverpool John \nMoores University, June 28-29, 2007, Liverpool, UK.  \n[6] Humayun Akhtar, \u201cAn Overview of Some Network \nModeling, Simulation & Performance Analysis Tools.\u201d \nProceedings of the 2nd IEEE Symposium on \nComputers and Communications (ISCC '97), 1997 \np344-348. \n[7] Jukka K. Nurminen. Models and Algorithms for Network \nPlanning Tools - Practical Experiences. System Analysis \nLaboratory Research Reports, Helsinki University of \nTechnology, May 2003. \n(http:\/\/lib.hut.fi\/Diss\/2003\/isbn9512265745\/article6.pdf) \n[8] Cahn R.S. \u201cWide Area Network Design: Concepts and \nTools for Optimization\u201d. Morgan Kaufman  Publishers, \nSan Francisco, 1989. \n[9] Ma H. (Bob). \u201cNetwork Design Tool. Computer Science \nand Engineering\u201d, Washington University in St. Louis, \nMO., 1989. (http:\/\/www.cs.wustl.edu\/~javagrp\/ network-\ndesign- tool.html). \n[10] Bachmann D.W., M.E. Segal, M.D. Srinivasan, T. J. \nTeorey. \u201cNetMod: A Design Tool for Large\u2013Scale \nHeterogeneous Campus Network\u201d. Center for \nInformation Technology Integration (CITI), University of \nMichigan. (IEEE J. on Selected Areas in \nCommunications. January 1991, Vol 9, No 1, 1990, p15-\n24)  \n[11] Deboo K. \u201cXNetMod: A Design Tool for Large-Scale \nNetworks\u201d. CITI Technical Report TR-93-6. University \nof Michigan, 1993. \n(http:\/\/www.citi.umich.edu\/techreports\/reports\/citi-tr-93-\n6.pdf). \n[12] Shahbaz M. \u201cNetwork Design Tool: TND-Tool\u201d. \nComNets Annul Report. Communication Networks, \nAachen University of Technology, Germany, 1996. \n(http:\/\/www.comnets.rwth-aachen.de\/report96\/node129. \nhtml). \n[13] Post. S.D. \u201cNetwork Planning with a Performance-\nPrediction Tool\u201d. International Journal of Network \nManagement, Vol 9, Issue 3, 1999, p167-173. \n[14] Choi S. \u201cResource Configuration and Network Design in \nextensible Networks\u201d. PhD Thesis. Department of \nComputer Science and Engineering, Washington \nUniversity, 2003. \n(http:\/\/www.arl.wustl.edu\/~syc1\/web\/paper\/ thesis.pdf) \n[15] Ning Weng, Ramaswary Ramaswary, Tilman Wolf. \nConsidering Processing Cost in Network Simulators. \nProc. of Workshop on Models, Methods and Tools for \nReproducible Network Research (MoMeTools) in \nconjunction with ACM SIGCOMM, Karlsruhe, Germany, \n25 & 27 August 2003, p47-56. \n[16] Vern Paxson, Sally Floyd. Why We Don\u2019t Know How \nTo Simulate the Internet. Proceedings of the 29th Winter \nSimulation Conference, December 1997, p1037-1044. \n[17] Bresla L., D. Estrin, K. Fall, S. Floyd, J. Heidemann, A. \nHelmy, P. Huang, S. McCanne, K. Varadhan, Ya Xu and \nH. Yu. \u201cAdvances in Network Simulation\u201d. The VINT \nProject. IEEE Computer, N5, 2000, p59-67. \n[18] Fall K. and K. Varadhan. 2003. The ns Manual. The \nVINT Project, 13 December 2003. \n(http:\/\/www.isi.edu\/nsnam\/ns\/doc\/ns_doc.pdf) \n[19] Network Simulators, by Sally Floyd. \n(http:\/\/www.icir.org\/models\/simulators.html) \n[20] Network Simulation (Wikipedia) \n(http:\/\/en.wikipedia.org\/wiki\/Network_simulation) \n[21] Pullen J.M.  \u201cThe Network Workbench: Network \nSimulation Software for Academic Investigation of \nInternet Concepts\u201d. Computer Networks. Elsevier \nScience Ltd, March 2000, Vol 3, Issue 3, 2000, p365-\n378. \n[22] Barnett III B.L. \u201cAn Ethernet Simulator for \nUndergraduate Networking\u201d. ACM SIGCSE Bulletin, Vol \n25, Issue 1, 1993, p145-150. (Proceedings of the 24th \nSIGCSE Technical Symposium on Computer Science \nEducation. Indianapolis, Indiana, USA.) \n[23] Griffin D. \u201cTraffic Engineering for Quality of Services in \nthe Internet, at Large Scale\u201d. Technical Report, CEC \nDeliverable Number: 201\/UCL\/bl, TEQUILA \nConsortium, 2000. \n[24] Alaettinoglu C., Dussa-Zieger, I. Matta,  A.U. Shankar \nand O. Gudmundsson. \u201cIntroducing MaRS, a Routing \nTestbed\u201d, ACM SIGCOMM, pp 95-96. \n[25] Riley G.F. and M.H. Ammar.  \u201cSimulation Large \nNetworks: How Big is Big Enough?\u201d. Proceedings of \n1ST International Conference on Grand Challenge for \nModeling and Simulation, San Antonio, TX, 2002, p39-\n45. \n[26] G. F. Riley. The Georgia Tech Network Simulator. Proc. \nof the ACM SIGCMM 2003 Workshops, Germany, \nAugust 2003, p5-12. \n[27] Wireless IP Simulator \u00a9Copyright 2005 -OSTG Open \nSource. Technology Group. \n(http:\/\/sourceforge.net\/projects\/wipsim\/, 2005) \n[28] Chang X. 1999. \u201cNetwork Simulations with OPNET\u201d. \nProceedings of the 1999 Winter Simulation Conference, \nVol 1, 1999, p307-314. \n[29] OPNET Technologies, Inc.  2004. \u201cOPNET Modeller\u201d. \n(http:\/\/www.opnet.com\/  products\/modeler\/home.html) \n[30] Ahjua S.P. \u201cComnet III: A Network Simulation \nLaboratory Environment For A Course In \nCommunications Networks\u201d. Frontiers in Education \nConference (IEEE\/ASEE conference), Tempe, AZ, 1998. \n(http:\/\/fie.engrng.pitt.edu\/fie98\/papers\/1205.pdf.) \n[31] CACI Products Company.  \u201cCOMNET III User\u2019s \nManual\u201d. January 1995. \n[32] Goble J.G. and R. Mills. COMNET III: Object-Oriented \nNetwork Performance Prediction. Proceedings of the \n1994 Winter Simulation Conference,  1994, p443-445.  \n[33] Keshav S. \u201cREAL 5.0 User Manual\u201d. Cornell \nUniversity, Ithaca NY.  August 1997. \n(http:\/\/www.cs.cornell.edu\/skeshav\/real\/user.html) \n[34] Cowie J.H., D.M. Nicol and A.T. Ogieliski. \u201cModeling \nthe Global Internte\u201d. Computing in Science and \nEngineering. Vol 1, Issue 1, 1999, p42-50. \n[35] Cowie J.H., D.M. Nicol and A.T. Ogieliski. \u201cToward \nRealistic Million\u2013Node Internet Simulations\u201d. \nInternational Conference on Parallel and Distributed \nProcessing Techniques and Applications (PDPTA\u201999), \nLas Vegas, Nevada, 1999, p2129-2135. \n[36]Bhatt S. and B. R. Fujimoto. \u201cParallel Simulation \nTechniques for Large-Scale Networks\u201d. IEEE \nCommunication Magazine, 1998, N8, 1998, p42-49. \n[37] Perumalla K., R. Fujimoto and A. Ogielski. \u201cTeD - A \nLanguage for Modeling Telecommunication Networks\u201d. \nACM SIGMETRICS Performance Evaluation Review, \nVol 25, Issue 4, 1998, p4\u201311. \nACCEPTED MANUSCRIPT \n \n \n \n[38] Perumalla K.S. and R.M. Fujimoto. \u201cEfficient Large-\nscale Process-oriented Parallel Simulations\u201d. \nProceedings of the 30th Winter Simulation Conference, \n1998, p459-466. \n[39] Wilsey P.A. and D.M. Rao. \u201cSimulation of Ultra-Large \nCommunication Network\u201d. Proceedings of 7th \nInternational Symposium on Modeling. Analysis and \nSimulation of Computer and Telecommunication \nSystems, MASCOT\u201999, 1999, .p112-119. \n[40] Wilsey P. A. and D. M. Rao. \u201cAn Ultra-Scale Simulation \nFramework\u201d. Journal of Parallel and Distributed \nComputing, January 2000, Vol 10, No 1, 2000, p18-38. \n[41] Luigi Rizza. Dummynet: A Simple Approach to the \nEvaluation of Network Protocols. ACM SIGCOMM, \nComputer Communication Review. January 1997, Vol 27, \nissue 1, p31-41. \n[42] Luigi Rizzo. Dummynet Tool. (Site Visited 12.9.2004). \n(http:\/\/info.iet.unipi.it\/ ~luigi\/ip_dummynet\/). \n[43] M. Srivastava, Partho Minshra, Prathima Agrawal, G. \nNguyen. Ethersim: A Simulator for Application\u2013Level \nPerformance Modeling of Wireless and Mobile ATM \nNetworks. Computer Networks and ISDN Systems, 1998, \nVol 29, p2067-2090. \n[44] David Griffin. Traffic Engineering for Quality of \nServices in the Internet, at Large Scale. Technical Report, \nCEC Deliverable Number: 201\/UCL\/bl, TEQUILA \nConsortium, May 2000. \n[45] Syam Gadde, Jeff Chase, Amin M. Vahdat. Coarse-\nGrained Network Simulation for Wide-Area Distributed \nSystems. Communication Network and Distributed \nSystems Modeling and Simulation Conference \n(CNDS2002), 27-31  January 2002. \n(http:\/\/www.cs.ucsd.edu\/~vahdat\/papers\/ cnds02.pdf) \n[46] Unger B. W., P. Gburzynski and C. Williamson. \u201cA \nHigh ATM Traffic and Network Simulator\u201d. Proceeding \nof the 1995 Winter Simulation Conference, Ottawa, \nOntario, 1995, p996-1003. \n[47] Cavin D., Y. Sasson and A. Schiper. \u201cOn the Accuracy \nof MANET Simulators\u201d. POMC\u201902, Toulouse, France, \n2002, p38-43. \n[48] University of California, Los Angeles. 2001. \u201cGloMoSim \nManual (ver. 1.2)\u201d.   07 February 2001. \n(http:\/\/pcl.cs.ucla.edu\/projects\/glomosim\/ \nGloMoSimManual.html) \n[47-49] Zeng X., R. Bagrodia and M. Gerla. \u201cGloMoSim: A \nLibrary for Parallel Simulation of Large-scale Wireless \nNetwork\u201d. Proceedings of the 12th workshop on Parallel \nand Distributed Simulation, Banff, Alberta, Canada, \n1998, p154-161. \n [50] H. T. Mouftah, Zesong Di. QUIPS-II: A Simulation \nTool For The Design And Performance Eveluation Of \nDiffserv-Based Network, Computer Communications, 1 \nJuly, 2002, Vol 25, Issue 11-12, p1125-1131. \n[51] Giuseppe Di Fatta, Giuseppe Lo Presti, Giuseppe Lo Re, \n\u201cComputer Network Topologies: Models and Generation \nTools\u201d, Technical Report No. 5\/2001, University of \nPalermo, Italy, July 2001. \n[52] H. Tangmunarunkit, R.Govindan, S.Jamin, S.Shenker, \nand W.Willinger, \u201cNetwork Topology Generators: \nDegree-Based vs. Structural\u201d, Proc. of the ACM \nSIGCOMM, 2002. \n[53] C.Faloutsos, P.Faloutsos, and M.Faloutsos, \u201cOn Power-\nLaw Relationships of the Internet Topology\u201d, Proc. of the \nACM SIGCOMM, 1999. \n[54] B. M. Waxman, \u201cRouting of Multipoint Connections\u201d, \nIEEE Journal of Selected Areas in Communication, Vol. \n6, No. 9, December 1988, p1617\u20131622. \n[55] M. Doar, \u201cA Better Model for Generating Test \nNetworks\u201d, Proc. of IEEE Global Telecommunications \nConference (GLOBECOM), London, November 1996. \n[56] K. Calvert, M. Doar, and E. Zegura, \u201cModelling Internet \nTopology\u201d, IEEE   Communications Magazine, June \n1997. \n [57] K. Calvert, M. Doar, E. Zegura, \u201cModeling Internet \nTopology\u201d, IEEE Transactions on Communications, \nDecember 1997. \n[58] Topology Modeling, by Sally Floyd. \n(http:\/\/www.icir.org\/models\/topologies.html) \n [59] Cheng Jin, Qian Chen, Sugih Jamin, \u201cInet: Internet \nTopology Generator\u201d, Technical Report Research Report \nCSE-TR-433-00, University of Michigan at Ann Arbor, \n2000. \n[60] William Aiello, Fan Chung, Linyuan Lu, \u201cA Random \nGraph Model for Massive Graphs\u201d, Proc. of the 32nd \nAnnual Symposium on Theory of Computing, 2000. \n[61] A. Medina, A. Lakhina, I. Matta,  J. Byers, \u201cBrite: \nUniversal topology Generator from a User\u2019s Perspective\u201d, \nTechnical Report, BUCS-TR-2001-003, April 12, 2001, \nBoston University. (http:\/\/www.cs.bu.edu\/brite\/ \npublications\/usermanual.pdf) \n[62] Alberto Medina, Anukool Lakhina, Ibrahim Matta, and \nJohn Byers, \u201cBRITE: An Approach to Universal \nTopology Generation\u201d, Proc. of MASCOTS 2001, \nCincinnati, OH, August 2001. \n[63] Oliver Heckmann, Krishna Pandit, Jens Schmitt, Ralf \nSteinmetz, \u201dKOM ScenGen The Swiss Army Knife for \nSimulation and Emulation Experiments\u201d, First \nInternational Workshop on Multimedia Interactive \nProtocols and Systems (MIPS), Napoli, Italy, 18-21 \nNovember 2003, p91-106. \n[64] Giovanni Vigna, Fredrik Valeur, Jingyu. Zhou, Richard \nA. Kemmerer. Composable Tool For Network Discovery \nand Security Analysis. 18th Annual Computer Security \nApplication Conference, San Diego California, 09\u201313 \nDecember, 2002, p14-24. \n(http:\/\/www.acsac.org\/2002\/papers\/108.pdf). \n[65] Davis C. M. Wood, Sean S. Coleman, Michael F. \nSchwartz, \u201cFremont: A System for Discovering Network \nCharacteristics and Problems.\u201d Proc. of the USENIX \nWinter Conference, San Diego, California. 25-29 January \n1993, p335-348. \n[66] J. Schonwalder and H. Langendorfer. Tcl Extensions for \nNetwork Management Applications. In Proc. 3rd Tcl\/Tk \nWorkshop, Toronto, Canada, 6-8 July 1995, p279-288. \n [67] Nelson Tang, Binary Sugla, NetMap: A Network \nDiscovery Tool. Report for Network & Service \nManagement Research Lab, Bell Laboratories, Lucent \nTechnologies, 21 September 1998.  \n(http:\/\/www.cs.ucla.edu\/~tang\/papers\/lucent_discovery.pdf) \n[68] Giovanni Vigna, Fredrik Valeur, Jingyu. Zhou, Richard \nA. Kemmerer, \u201cComposable Tool For Network \nDiscovery and Security Analysis\u201d. 18th Annual \nComputer Security Application Conference, San Diego \nACCEPTED MANUSCRIPT \n \n \n \nCalifornia, 09\u201313 December, 2002, p14-24. \n(http:\/\/www.acsac.org\/2002\/papers\/108.pdf). \n[69] Big Brother Professional Edition. Quest Software Inc., \n8001 Irvine Center Drive, Irvine, CA  92618. Big Brother \nHomepage. (http:\/\/www.bb4.org\/, 2006) \n[70] LANSurveyor, Neon Software, Inc., 244 Lafayette \nCircle, Lafayette, CA 94549. (http:\/\/www.neon.com\/, \n2006) \n [71] IBM Tivoli NetView discovery tool.  IBM Tivoli \nNetview Software. Tivoli Systems Inc.                                  \n(http:\/\/www-306.ibm.com\/software\/tivoli\/ products\/ \nnetview\/, 2006) \n[72] Renaud Deraison. Nessus Security Scanner. The \n\"Nessus\" Project. Nessus Org.  Nessus Homepage. \n(http:\/\/nessus.org\/, 2006). \n[73] Fyodor. Nmap\u2013 Security Scanner, INSECURE.ORG. \n(http:\/\/www.insecure.org\/nmap\/index.html, 2006). \n[74] Hewlett-Packard Company. HP OpenView Software.  \n(http:\/\/www.openview.hp.com, 2006) \n[75] Intermapper. Dartware, LLC, 10 Buck Road, PO Box \n130, Hanover, NH 03755-0130 USA. \n(http:\/\/www.intermapper.com\/, 2006) \n[76] Rahman M.A., A. Pakstas and F.Z. Wang. \u201cAn Approach \nto Integration of Network Design and Simulation tools\u201d, \nProc. of the 8th International IEEE Conference on \nTelecommunications (ConTEL 2005), Zagreb, Croatia, \nJune 15-17, 2005, p173-180.  \n[77] Y. Breitbart, M.Garofalakis, B.Jai, C.Martin, R.Rastogi, \nA.Silbershatz, \u201cTopology Discovery in Heterogenous IP \nNetworks: The NetInventory System\u201d, IEEE\/ACM \nTransactions on Networking, 2004, Vol.12, No 3, p401-\n414. \n \n \n"}