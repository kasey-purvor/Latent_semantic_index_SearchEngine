{"doi":"10.1137\/060669565","coreId":"65286","oai":"oai:dro.dur.ac.uk.OAI2:6287","identifiers":["oai:dro.dur.ac.uk.OAI2:6287","10.1137\/060669565"],"title":"Maximizing supermodular functions on product lattices, with application to maximum constraint satisfaction.","authors":["Krokhin, A.","Larose, B."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2008-02-27","abstract":"Recently, a strong link has been discovered between supermodularity on lattices and tractability of optimization problems known as maximum constraint satisfaction problems. This paper strengthens this link. We study the problem of maximizing a supermodular function which is defined on a product of $n$ copies of a fixed finite lattice and given by an oracle. We exhibit a large class of finite lattices for which this problem can be solved in oracle-polynomial time in $n$. We also obtain new large classes of tractable maximum constraint satisfaction problems","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65286.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6287\/1\/6287.pdf","pdfHashValue":"7f5e756298d046719891d18955783db08b1ddad4","publisher":"Society for Industrial and Applied Mathematics","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6287<\/identifier><datestamp>\n      2011-12-06T09:43:23Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Maximizing supermodular functions on product lattices, with application to maximum constraint satisfaction.<\/dc:title><dc:creator>\n        Krokhin, A.<\/dc:creator><dc:creator>\n        Larose, B.<\/dc:creator><dc:description>\n        Recently, a strong link has been discovered between supermodularity on lattices and tractability of optimization problems known as maximum constraint satisfaction problems. This paper strengthens this link. We study the problem of maximizing a supermodular function which is defined on a product of $n$ copies of a fixed finite lattice and given by an oracle. We exhibit a large class of finite lattices for which this problem can be solved in oracle-polynomial time in $n$. We also obtain new large classes of tractable maximum constraint satisfaction problems.<\/dc:description><dc:subject>\n        Supermodular function<\/dc:subject><dc:subject>\n         Lattices<\/dc:subject><dc:subject>\n         Optimization<\/dc:subject><dc:subject>\n         Tractability<\/dc:subject><dc:subject>\n         Constraint satisfaction.<\/dc:subject><dc:publisher>\n        Society for Industrial and Applied Mathematics<\/dc:publisher><dc:source>\n        SIAM journal on discrete mathematics, 2008, Vol.22(1), pp.312-328 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2008-02-27<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6287<\/dc:identifier><dc:identifier>\n        issn:0895-4801<\/dc:identifier><dc:identifier>\n        issn: 1095-7146<\/dc:identifier><dc:identifier>\n        doi:10.1137\/060669565 <\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6287\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1137\/060669565 <\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6287\/1\/6287.pdf<\/dc:identifier><dc:rights>\n        \u00a9 2008 Society for Industrial and Applied Mathematics<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0895-4801"," 1095-7146","issn: 1095-7146","issn:0895-4801"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2008,"topics":["Supermodular function","Lattices","Optimization","Tractability","Constraint satisfaction."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n05 January 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nKrokhin, A. and Larose, B. (2008) \u2019Maximizing supermodular functions on product lattices, with application\nto maximum constraint satisfaction.\u2019, SIAM journal on discrete mathematics., 22 (1). pp. 312-328.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1137\/060669565\nPublisher\u2019s copyright statement:\n2008 Society for Industrial and Applied Mathematics\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n  \nDurham Research Online \n \nDeposited in DRO: \n05 January 2010 \n \nPeer-review status: \nPeer-reviewed \n \nPublication status: \nPublished version \n \nCitation for published item: \nKrokhin, A. and Larose, B. (2008) 'Maximizing supermodular functions on product lattices, \nwith application to maximum constraint satisfaction.', SIAM journal on discrete mathematics., \n22 (1). pp. 312-328. \n \nFurther information on publishers website: \nhttp:\/\/dx.doi.org\/10.1137\/060669565  \n \nPublisher\u2019s copyright statement: \n\u00a9 2008 Society for Industrial and Applied Mathematics \n \n \n \n \n \n \n \n \n \n \n \n \nUse policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior \npermission or charge, for personal research or study, educational, or not-for-profit purposes provided that : \n \n\uf0a7 a full bibliographic reference is made to the original source \n\uf0a7 a link is made to the metadata record in DRO \n\uf0a7 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders. \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nSIAM J. DISCRETE MATH. c\u00a9 2008 Society for Industrial and Applied Mathematics\nVol. 22, No. 1, pp. 312\u2013328\nMAXIMIZING SUPERMODULAR FUNCTIONS ON PRODUCT\nLATTICES, WITH APPLICATION TO MAXIMUM\nCONSTRAINT SATISFACTION\u2217\nANDREI KROKHIN\u2020 AND BENOIT LAROSE\u2021\nAbstract. Recently, a strong link has been discovered between supermodularity on lattices\nand tractability of optimization problems known as maximum constraint satisfaction problems. This\npaper strengthens this link. We study the problem of maximizing a supermodular function which is\ndefined on a product of n copies of a fixed finite lattice and given by an oracle. We exhibit a large\nclass of finite lattices for which this problem can be solved in oracle-polynomial time in n. We also\nobtain new large classes of tractable maximum constraint satisfaction problems.\nKey words. supermodular function, lattices, optimization, tractability, constraint satisfaction\nAMS subject classifications. 90C27, 68Q25, 68T20\nDOI. 10.1137\/060669565\n1. Introduction. Sub- and supermodular set functions are special real-valued\nfunctions defined on the powerset of a set. They are well studied in combinatorics\n(see bibliographical survey [10]) and have numerous applications in combinatorial op-\ntimization [9, 11] and elsewhere (see, e.g., [24, 28]). Minimization of submodular set\nfunctions is one of the most well-known tractable problems in combinatorial opti-\nmization [11, 27]. Examples of other combinatorial problems that can be solved by\nusing submodular set function minimization include the minimum s-t cut problem\nin networks and finding the largest common independent set in two matroids. The\nsubmodular set function minimization problem was also considered for various relax-\nations of submodular functions such as intersecting or crossing submodular functions.\nSuch relaxations are either defined on some family of subsets of a set, or use a slightly\nmodified form of submodularity [27].\nA more general form of sub- and supermodularity is the one where functions\nare defined on general (i.e., algebraic) lattices [28]. This form of supermodularity is\nvery popular in financial and actuarial mathematics (see, e.g., supermodular games\n[28] and supermodular order on multivariate distributions [23, 25]), but it is relatively\nlittle studied in combinatorics and optimization (see, e.g., section 60.3a of [27]), except\nfor the special case when the lattice is a chain, i.e., a totally ordered set. Sub- and\nsupermodular functions on finite chains can be alternatively represented by matrices\nand arrays which are called Monge and anti-Monge, respectively, matrices and arrays.\nSuch matrices and arrays are used to identify tractable cases of hard optimization\nproblems such as TSP [1].\n\u2217Received by the editors September 11, 2006; accepted for publication (in revised form) November\n4, 2007; published electronically February 27, 2008. A preliminary version of some parts of this paper\nappears in Proceedings of CP\u201905, Sitges, Spain 2005.\nhttp:\/\/www.siam.org\/journals\/sidma\/22-1\/66956.html\n\u2020Department of Computer Science, Durham University, Durham, DH1 3LE, UK (andrei.\nkrokhin@durham.ac.uk). This author\u2019s research is partially supported by the UK EPSRC grant\nEP\/C543831\/1.\n\u2021Department of Mathematics and Statistics, Concordia University, Montre\u00b4al H3G 1M8, QC,\nCanada (larose@mathstat.concordia.ca). This author\u2019s research is partially supported by grants\nfrom NSERC, FQRNT, and CRM.\n312\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 313\nRecently, the general form of supermodularity (on lattices) has been applied to\nclassify the complexity of maximum constraint satisfaction problems which are very\nactively studied optimization problems in artificial intelligence [6] and complexity\ntheory [5]. In a maximum constraint satisfaction problem, informally speaking, one\nis given a finite collection of constraints on overlapping sets of variables, and the\ngoal is to find an assignment of values to the variables with a maximum number\n(or total weight) of satisfied constraints. Some recent papers [3, 8, 19] discovered\nthat there is a strong link between supermodularity on lattices and tractability of\nmaximum constraint satisfaction problems with a restricted set of allowed constraints,\nand developing this connection is the main aim of this paper.\n2. Sub- and supermodularity, and lattices. In this section we describe the\nproblem of maximizing a supermodular function on a product lattice.\nDefinition 2.1. Let A be finite set. A function f : 2A \u2192 R is called a super-\nmodular set function (on A) if the inequality\nf(X) + f(Y ) \u2264 f(X \u2229 Y ) + f(X \u222a Y )\nholds for all X,Y \u2286 A, and it is called submodular if the inverse inequality holds for\nall X,Y .\nThe submodular function minimization problem is, given a submodular function\nf on A, to find a subset X \u2286 A with minimum f(X). It is known [11, 17, 16, 26, 27]\nthat a submodular function on a set A can be minimized in polynomial time (in |A|)\nprovided getting a value of f is a primitive operation.\nA partial order on a set D is called a lattice order if, for every x, y \u2208 D, there\nexists a greatest lower bound x\b y and a least upper bound xunionsq y. The corresponding\nalgebra L = (D,\b,unionsq) is called a lattice. A subset of D closed under the operations\n\b and unionsq is called a sublattice of L. If Li is a lattice on Di, i = 1, . . . , n, then the\nproduct lattice L1 \u00d7 . . .\u00d7 Ln is a lattice with base set D1 \u00d7 . . .\u00d7Dn and operations\nacting componentwise. The lattice Ln is the (direct) product of n copies of L, and it\nis known as the nth power of L. For more information about lattices, see [13].\nDefinition 2.2. Let L be a lattice on D. A function f : Dn \u2192 R is called\nsupermodular on L if\nf(a) + f(b) \u2264 f(a \b b) + f(a unionsq b) for all a,b \u2208 Ln,\nand f is called submodular on L if the inverse inequality holds.\nIf A is a set with |A| = n, then, by identifying subsets of A with 0-1 n-tuples,\none can easily check that the submodular (set) functions on A are simply the n-ary\nsubmodular functions on a lattice on {0, 1} with order 0 < 1. Therefore, it is natural\nto consider the problem of minimizing the submodular functions on a given fixed finite\nlattice L, in the following form:\nInstance: A number n \u2265 1 and a submodular function f on Ln.\nGoal: Find an element a \u2208 Ln such that f(a) = min {f(b) | b \u2208 Ln}.\nWe will denote this problem by SFM(L). We will say that SFM(L) is oracle-\ntractable if it can be solved in polynomial time in n (provided getting the value of\nf on a tuple is a primitive operation). It was mentioned in [3] as an open question\nwhether or not SFM(L) is oracle-tractable for any fixed lattice L. This question was\nmotivated in [3] by its applications in constraint satisfaction which we will describe\nin the next section.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n314 ANDREI KROKHIN AND BENOIT LAROSE\nNote that a function f is submodular if and only if \u2013 f is supermodular. There-\nfore, the SFM(L) problem can also be understood as the supermodular function max-\nimization problem. We will always use this reformulation because we will later apply\nalgorithms for SFM(L) to solve certain maximization problems.\nRecall that a lattice is called distributive if it can be represented by subsets of\na set A, where the operations \b and unionsq are interpreted as set-theoretic intersection\nand union, respectively. Note that, in some earlier papers on submodular functions, a\nfamily of subsets closed under intersection and union is simply called a lattice family\n(or a ring family). The following result is proved in section 49.3 of [27] (see also [26]).\nTheorem 2.3. A submodular function defined on a lattice family L on a set A\ncan be minimized in polynomial time in |A|, provided we can compute in polynomial\ntime the largest and the smallest sets in the family, and the preorder \u000b on A defined\nas follows: u \u000b v if and only if each set U \u2208 L containing v also contains u.\nAssume that we fix a finite distributive lattice L. It is well known that L can\nbe represented by subsets of a set A such that |A| \u2264 |L|. Clearly, we can compute\nin constant time the sets (as 0-1 |A|-tuples) representing the largest and the smallest\nelements of L, and we can also compute the preorder \u000b in constant time. Obviously,\nfor any n, the lattice Ln can be represented by subsets of a set B of cardinality n|A|\n(since an element of L is represented by using |A| bits), while the representations for\nthe largest and the smallest elements of Ln and the preorder for Ln can be trivially\nobtained from those for L. It follows that we can solve the problem SFM(L) in\npolynomial time in n (in fact, in n|L|, but |L| is a constant).\nTo the best of our knowledge, there was up to now not a single nondistributive\nfinite lattice L for which the problem SFM(L) is known to be oracle-tractable. We\nwill provide such examples in this paper.\nThe problem of minimizing submodular functions on nondistributive lattices was\nmentioned in [17]. However, it was not clear in that paper what the parameter should\nbe in this case, since, in combinatorics, submodular functions are traditionally con-\nsidered to be defined on (some or all) subsets of a set, and the standard parameter in\nsuch situations was always the cardinality of the set. We believe that our formulation\nof the problem SFM(L) is an appropriate form of generalization of the standard SFM\nproblem to the case of arbitrary lattices.\nWe will generalize this problem even further, by considering classes of finite lat-\ntices. Let C be a fixed finite class of finite lattices. Define the optimization problem\nSFM(C) as follows:\nInstance: A lattice L\u2032 = L1 \u00d7 . . . \u00d7 Ln such that Li \u2208 C for all 1 \u2264 i \u2264 n, and a\nsupermodular function f on L\u2032.\nGoal: Find an element a \u2208 L\u2032 such that f(a) = max {f(b) | b \u2208 L\u2032}.\nOne can extend the notion of oracle-tractability to the problems SFM(C) in a\nnatural way, assuming that an instance is given by an n-tuple of names of lattices\nin the product and by an oracle for the function f . For any finite class of finite\ndistributive lattices one can follow the same procedure as for a single distributive\nlattice, so, clearly, the following statement holds.\nProposition 2.4. SFM(C) is oracle-tractable for any finite class C of finite\ndistributive lattices.\n3. Maximum constraint satisfaction. Maximum constraint satisfaction prob-\nlems are well-studied combinatorial optimization problems. The standard example of\nsuch problems are Max k-Cut and Max k-Sat.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 315\nLet D denote a finite set with |D| > 1. Let R(m)D denote the set of all m-ary\npredicates over D, that is, functions from Dm to {0, 1}, and let RD =\n\u22c3\u221e\nm=1R\n(m)\nD .\nAlso, let Z+ denote the set of all nonnegative integers.\nDefinition 3.1. A constraint over a set of variables V = {x1, x2, . . . , xn} is an\nexpression of the form f(x), where\n\u2022 f \u2208 R(m)D is called the constraint predicate, and\n\u2022 x = (xi1 , . . . , xim) is called the constraint scope.\nThe constraint f is said to be satisfied on a tuple a = (ai1 , . . . , aim) \u2208 Dm if\nf(a) = 1.\nDefinition 3.2. For a finite F \u2286 RD, an instance of Max CSP(F) is a pair\n(V,C), where\n\u2022 V = {x1, . . . , xn} is a set of variables taking their values from the set D,\n\u2022 C is a collection of constraints f1(x1), . . . , fq(xq) over V , where fi \u2208 F for\nall 1 \u2264 i \u2264 q.\nThe goal is to find an assignment \u03d5 : V \u2192 D that maximizes the number of satisfied\nconstraints, that is, to maximize the function f : Dn \u2192 Z+, defined by f(x1, . . . , xn) =\u2211q\ni=1 fi(xi). If the constraints have (positive integral) weights \u0003i, 1 \u2264 i \u2264 q, then the\ngoal is to maximize the total weight of satisfied constraints, that is, maximize the\nfunction f : Dn \u2192 Z+, defined by f(x1, . . . , xn) =\n\u2211q\ni=1 \u0003i \u00b7 fi(xi).\nExample 3.3 (Max k-Cut). In the Max k-Cut problem, one is given an undi-\nrected graph G = (V,E) with weighted edges, and the goal is to find a partition of\nV into k parts, V = V0 \u222a V1 \u222a \u00b7 \u00b7 \u00b7 \u222a Vk\u22121, maximizing the total weight of edges with\nendpoints in different parts. This problem is exactly the Max CSP({\f=k}) problem\nwhere \f=k is the binary disequality predicate on {0, 1, . . . , k \u2212 1}. To see this, think\nof vertices of a given graph as variables, and apply the predicate to every pair of\nvariables x, y such that (x, y) is an edge in the graph, while keeping all weights the\nsame.\nSince predicates are functions, one can consider supermodular predicates on a\nlattice. For a finite lattice L, we will denote by SpmodL the set of all predicates that\nare supermodular on L.\nIt is easy to see that if f(x1, . . . , xn) =\n\u2211q\ni=1 \u0003i \u00b7 fi(xi) and, for some lattice L,\nevery fi is supermodular on L, then f is also supermodular on L. Moreover, it is\nclear that one can compute the value of f on a given tuple in linear time in the size\nof the instance. Hence, we immediately obtain the following lemma.\nLemma 3.4. Let L be a finite lattice such that the problem SFM(L) is oracle-\ntractable. Then, for any finite set F \u2286 SpmodL, the problem Max CSP(F) is\ntractable.\nIt is intriguing that all known tractable problems Max CSP(F) are essentially\n(i.e., possibly, after removing redundant elements from D) of this form (i.e., with\nF \u2286 SpmodL for some lattice L on D). In particular, it is known [3] (and follows\nfrom Proposition 2.4 and Lemma 3.4) that Max CSP(F) is tractable whenever F\nconsists of supermodular predicates on some distributive lattice.\nIn the rest of this section, we present evidence that supermodularity on lattices\nprobably is the right tool for studying the complexity of problems Max CSP(F).\nFirst, we will consider a form of supermodular constraints that can be defined on\nany lattice.\nDefinition 3.5. A predicate f \u2208 R(n)D will be called 2-monotone1 on a lattice L\n1In [3], such predicates are called generalized 2-monotone.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n316 ANDREI KROKHIN AND BENOIT LAROSE\non D if it can be expressed as follows:\n(3.1) f(x) = 1\u21d4 ((xi1 \u000e ai1) \u2227 . . . \u2227 (xis \u000e ais)) \u2228 ((xj1 \u0011 bji) \u2227 . . . \u2227 (xjt \u0011 bjt)),\nwhere x = (x1, . . . , xn), ai1 , . . . , ais , bj1 , . . . , bjt \u2208 D, and either of the two disjuncts\nmay be empty (i.e., the value of s or t may be zero).\nIt is straightforward to check that every 2-monotone predicate on a lattice is\nsupermodular on it. The next theorem is, to the best of our knowledge, the only one\navailable on the complexity of supermodular constraints on arbitrary lattices.\nTheorem 3.6 (see [3]). Let L be a lattice on a finite set D. If F consists of\n2-monotone predicates on L, then Max CSP(F) is tractable.\nNote that 2-monotone predicates can be defined on any poset, since the definition\ndoes not use the property of the order to be lattice. However, it was shown in [20]\nthat if F consists of all binary 2-monotone predicates on a nonlattice poset, then\nMax CSP(F) is NP-hard.\nAn endomorphism of F is a unary operation \u03c0 on D such that, for all f \u2208 F\nand all (a1, . . . , am) \u2208 Dm, we have f(a1, . . . , am) = 1 \u21d2 f(\u03c0(a1), . . . , \u03c0(am)) = 1.\nWe say that F is a core if every endomorphism of F is injective (i.e. a permutation).\nThe intuition here is that if F is not a core, then it has a noninjective endomorphism\n\u03c0, which implies that, for every assignment \u03d5, there is another assignment \u03c0\u03d5 that\nsatisfies all constraints satisfied by \u03d5 and uses only a restricted set of values, so the\nproblem Max CSP(F) can be reduced to a similar problem over this smaller set.\nTheorem 3.7 (see [5, 3, 19]). Let |D| \u2264 3, and let F \u2286 RD be a core. If there is\na chain C on D such that F \u2286 SpmodC, then Max CSP(F) is tractable. Otherwise,\nMax CSP(F) is NP-hard.\nFor an element d \u2208 D, define the unary predicate ud so that ud(x) = 1 \u21d4 x = d.\nLet CD = {ud | d \u2208 D}.\nTheorem 3.8 (see [7, 8]). Let D be any finite set, and assume that CD \u2286\nF \u2286 RD. If there is a chain C on D such that F \u2286 SpmodC, then Max CSP(F) is\ntractable. Otherwise, Max CSP(F) is NP-hard.\nNote that (assuming that supermodularity is the right tool) chains are the only\nlattices that could possibly appear in Theorems 3.7 and 3.8 because, as is easy to\ncheck, every lattice with at most three elements is a chain and every predicate of the\nform ud is supermodular on a lattice if and only if the lattice is a chain (the latter\nassertion is essentially Lemma 5.1 of [3]).\nHowever, it is known that classes of supermodular predicates on (essentially)\ndifferent lattices are pairwise incomparable. More precisely, for any lattice L, let L\u2202\ndenote the dual lattice of L, i.e., the one obtained from L by reversing the order (or by\nswapping the lattice operations, which is the same). It is obvious from the definition\nthat the classes of supermodular functions on L and on L\u2202 coincide. It was shown\nin [20] that, for any finite lattice L\u2032 (on the same set as L) such that L\u2032 is neither L\nnor L\u2202 , there exists a predicate which is 2-monotone (and hence supermodular) on L,\nbut not supermodular on L\u2032. Hence, essentially, one cannot exclude any lattice from\nthese considerations.\nIt follows that the problem SFM(L) restricted to supermodular functions on\na nondistributive lattice L, such as the functions that can appear in instances of\nMax CSP(F), is of special interest.\nIt is a basic fact in lattice theory (see, e.g., [13]) that a lattice is distributive if it\ndoes not contain, as a sublattice, one of the two minimal nondistributive lattices: the\npentagon N5 and the diamond M3. These two lattices are depicted in Figure 3.1.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 317\nFig. 3.1. The pentagon N5 and the diamond M3.\nIt will follow from the results in this paper that Max CSP(F) is tractable if\nF \u2286 SpmodN5 or F \u2286 SpmodM3 .\n4. SFM and constructions on lattices. In this section we show that tractabil-\nity of SFM(L) is preserved under certain constructions on lattices, and exhibit a large\nclass of nondistributive lattices for which SFM(L) is tractable.\n4.1. General constructions. A congruence on a lattice L is an equivalence\nrelation \u03b8 such that, for all a, b, c, d \u2208 L, the conditions a\u03b8b and c\u03b8d imply that both\n(a \b c)\u03b8(b \b d) and (a unionsq c)\u03b8(b unionsq d) hold.\nIf \u03b8 is a congruence on L and a \u2208 L, then let a[\u03b8] denote the \u03b8-class containing\na. It is well known that every \u03b8-class is a sublattice of L. It is also well known that\nthe family of all \u03b8-classes forms a lattice, called a factor-lattice of L and denoted L\/\u03b8,\nwith operations defined as follows: a[\u03b8]\ba\u2032[\u03b8] = (a\ba\u2032)[\u03b8] and a[\u03b8]unionsqa\u2032[\u03b8] = (aunionsqa\u2032)[\u03b8].\nWe will now introduce a certain notion of a product of classes of lattices that was\nintensively studied in lattice theory (see, e.g., [14] or pp. 489\u2013490 of [13]).\nDefinition 4.1. If V and W are classes of lattices, then their Mal\u2019tsev product,\ndenoted V \u25e6W, consists of all lattices L such that there is a congruence \u03b8 on L with\nthe following properties:\n1. the lattice L\/\u03b8 belongs to W,\n2. every \u03b8-class is a lattice from V.\nLet D denote the class of all distributive lattices, let Dk denote the class of all\ndistributive lattices with at most k elements, and let Dfin denote the class of all finite\nlattices from D.\nExample 4.2. The lattice N5 belongs to D3 \u25e6 D2. It is easy to check that\nthe equivalence relation \u03b8 whose two classes are within the ovals in Figure 4.1 is a\ncongruence. The classes of the congruence are distributive lattices (chains), and the\nlattice N5\/\u03b8 is a distributive lattice (a two-element chain).\nTheorem 4.3. Suppose that V,W are finite classes of finite lattices. If SFM(V)\nand SFM(W) are both oracle-tractable, then SFM(V \u25e6W) is oracle-tractable as well.\nProof. Let L\u2032 = L1 \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 Ln such that Li \u2208 V \u25e6W for all 1 \u2264 i \u2264 n. Then, for\nevery 1 \u2264 i \u2264 n, there exist congruences \u03b8i such that the lattices Ki = Li\/\u03b8i belong\nto W and every \u03b8i-class belongs to V.\nDefine a function f \u2032 on K = K1 \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 Kn by letting\nf \u2032(a1[\u03b81], . . . , an[\u03b8n]) = max f |a1[\u03b81]\u00d7\u00b7\u00b7\u00b7\u00d7an[\u03b8n].\nLet us check that f \u2032 is a supermodular function on K. Take two arbitrary elements\nin K, say (a1[\u03b81], . . . , an[\u03b8n]) and (b1[\u03b81], . . . , bn[\u03b8n]). Choose a\u2032i, b\u2032i, 1 \u2264 i \u2264 n, so\nthat ai\u03b8ia\n\u2032\ni and bi\u03b8ib\n\u2032\ni for all 1 \u2264 i \u2264 n, and f \u2032(a1[\u03b81], . . . , an[\u03b8n]) = f(a\u20321, . . . , a\u2032n) and\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n318 ANDREI KROKHIN AND BENOIT LAROSE\nFig. 4.1. The pentagon N5 is in D3 \u25e6D2.\nf \u2032(b1[\u03b81], . . . , bn[\u03b8n]) = f(b\u20321, . . . , b\n\u2032\nn). Since each \u03b8i is a congruence, it follows that\nf \u2032(a1[\u03b81], . . . , an[\u03b8n]) + f \u2032(b1[\u03b81], . . . , bn[\u03b8n]) = f(a\u20321, . . . , a\n\u2032\nn) + f(b\n\u2032\n1, . . . , b\n\u2032\nn)\n\u2264 f(a\u20321 \b b\u20321, . . . , a\u2032n \b b\u2032n) + f(a\u20321 unionsq b\u20321, . . . , a\u2032n unionsq b\u2032n)\n\u2264 f \u2032((a\u20321 \b b\u20321)[\u03b81], . . . , (a\u2032n \b b\u2032n)[\u03b8n]) + f \u2032((a\u20321 unionsq b\u20321)[\u03b81], . . . , (a\u2032n unionsq b\u2032n)[\u03b8n])\n= f \u2032((a1 \b b1)[\u03b81], . . . , (an \b bn)[\u03b8n]) + f \u2032((a1 unionsq b1)[\u03b81], . . . , (an unionsq bn)[\u03b8n])\n= f \u2032(a1[\u03b81] \b b1[\u03b81], . . . , an[\u03b8n] \b bn[\u03b8n]) + f \u2032(a1[\u03b81] unionsq b1[\u03b81], . . . , an[\u03b8n] unionsq bn[\u03b8n]).\nSince K is a direct product of lattices from W, we infer that f \u2032 can be maximized\nin polynomial time if the evaluation of f \u2032 on a given tuple is a primitive operation.\nThat is, f \u2032 can be maximized in at most p1(n) number of steps, where p1 is a fixed\npolynomial, and some of the steps are evaluations of f \u2032 on a given element of K.\nAssume that SFM(V) can be solved in p2(n) steps, some of which are function\nevaluations. Now, to prove the theorem, it suffices to show that f \u2032 can be evaluated\non any given element of K in p2(n) steps (assuming that evaluating f on a given\nelement of L\u2032 is a primitive operation). Fix an element (a1[\u03b81], . . . , an[\u03b8n]) of K. The\ngoal now is to maximize f on a1[\u03b81] \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 an[\u03b8n]. Every ai[\u03b8i] is a lattice from V,\nso evaluating f \u2032(a1[\u03b81], . . . , an[\u03b8n]) can be done in p2(n) steps by assumption of the\ntheorem. Hence, f can be maximized in p1(p2(n)) steps, some of which are evaluations\nof f on a given tuple.\nCorollary 4.4. If L1 and L2 are finite lattices such that SFM(Li) is oracle-\ntractable for i = 1, 2, then SFM(L1 \u00d7 L2) is oracle-tractable as well.\nProof. Let V = {L1} and W = {L2}. It is immediate that SFM(V) and\nSFM(W) are oracle-tractable. The lattice L\u2032 = L1 \u00d7 L2 belongs to V \u25e6W. In-\ndeed, the relation \u03b8 on L\u2032 defined so that (a1, b1)\u03b8(a2, b2) if and only if b1 = b2 is a\ncongruence such that L\u2032\/\u03b8 is isomorphic to L2 while every \u03b8-class is isomorphic to\nL1. Clearly, when maximizing an n-ary supermodular function on L1 \u00d7 L2, one can\nidentify L\u2032\/\u03b8 with L2 and every every \u03b8-class with L1. The result now follows from\nTheorem 4.3.\nDefinition 4.5. A mapping \u03d5 from a lattice L1 to a lattice L2 is called a\nhomomorphism if, for all a, b \u2208 L1, it holds that \u03d5(a\bb) = \u03d5(a)\b\u03d5(b) and \u03d5(aunionsqb) =\n\u03d5(a)unionsq\u03d5(b). If such a mapping \u03d5 is onto, then L2 is said to be a homomorphic image\nof L1.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 319\nFig. 4.2. The lattice L\u02c6.\nTheorem 4.6. Fix a finite lattice L. If L is a homomorphic image of some finite\nlattice L1 such that SFM(L1) is oracle-tractable, then SFM(L) is oracle-tractable as\nwell.\nProof. Every supermodular function f on Ln can be transformed into a super-\nmodular function f1 on Ln1 by letting f1(a1, . . . , an) = f(\u03d5(a1), . . . , \u03d5(an)) where \u03d5\nis a surjective homomorphism from L1 to L. It is straightforward to check that f1\nis indeed supermodular on L1. Since \u03d5 is surjective, the maximum of f1 coincides\nwith the maximum of f . By assumption, one can find a tuple a maximizing f1 in\npolynomial time in n, and the tuple maximizing f is obtained from a by applying \u03d5\ncomponentwise.\nIt is clear, say, since the pentagon belongs to D3 \u25e6D2, that Theorem 4.3 extends\n(compared to Dfin) the class of lattices L for which SFM(L) is proved to be oracle-\ntractable. We note that Theorem 4.6 further extends this class. Consider, for example,\nthe lattice L\u02c6 shown in Figure 4.2. It is shown in the proof of Theorem 1 of [14] that this\nlattice is a homomorphic image of a lattice belonging to (D4 \u25e6D4) \u25e6D4, so SFM(L\u02c6)\nis oracle-tractable. It is easy to verify that this lattice is simple, that is, it has no\ncongruences except for the equality relation and the full binary relation. Lemma 1 of\n[14] states that if a simple lattice belongs to Mal\u2019tsev product of two classes of lattices,\nthen it belongs to one of these classes. Hence, since L\u02c6 is simple and nondistributive,\nit does not belong to any class obtainable from Dfin by using Mal\u2019tsev product.\nIt follows from Proposition 2.4 and Theorems 4.3 and 4.6 that if a finite lattice\nL belongs to a class obtained from finite sets of distributive lattices by (repeatedly)\nusing Mal\u2019tsev product and also taking homomorphic images, then SFM(L) is oracle-\ntractable. What is the family F of finite lattices L which can be obtained as described\nabove? Unfortunately, it seems quite difficult to give a precise characterization of this\nfamily because, by [22], the process of repeatedly applying Mal\u2019tsev product to D\nresults in different classes of lattices for different orders of applying the operation.\nHowever, in the next subsection we describe a well-understood and rich subclass of\nF, which can be obtained by repeatedly applying Mal\u2019tsev product only to D2. The\nsubclass consists of the so-called bounded finite lattices.\nWe will now describe some lattices that definitely do not belong to the family F.\nFor t \u2265 3, a t-diamond (or simply a diamond), denoted Mt, is a lattice on an (t+2)-\nelement set such that 0Mt , 1Mt are the least and the greatest element, respectively,\nand all t elements in Mt \\{0Mt , 1Mt} are pairwise incomparable. The Hasse diagram\nof Mt is given in Figure 4.3. Note that M3 is often referred to as the diamond. It is\nwell known and easy to check that every diamond is a simple nondistributive lattice.\nIn addition, every diamond has the property that, for every finite lattice L having\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n320 ANDREI KROKHIN AND BENOIT LAROSE\nFig. 4.3. A diamond lattice Mt.\nMt as a homomorphic image, L also contains Mt as a sublattice (see Lemma 6.21\nof [15] or the more general Theorem 2.47 of [18]). Hence, in order to show that no\ndiamond belongs to F, it is sufficient to prove that if a finite lattice L containing Mt\nas a sublattice belongs to X \u25e6 Y, then at least one of these two classes contains a\nlattice with the same property. So assume that L \u2208 X \u25e6Y. By definition, L has a\ncongruence \u03b8 such that L\/\u03b8 \u2208 Y and every \u03b8-class is in X. It is well known and easy\nto show that the restriction \u03b8\u2032 of \u03b8 on Mt is a congruence of Mt. By simplicity of\nMt, all the elements of Mt belong either to a single \u03b8\u2032-class or to pairwise different\n\u03b8\u2032-classes. In the former case, Mt is entirely contained in some \u03b8-class, so this class\nis the required lattice in X. In the latter case, L\/\u03b8 \u2208 Y is the required lattice. This\nargument can be easily generalized to show that, in fact, no lattice containing M3 as\na sublattice belongs to F.\nEven though we have been unable to prove that SFM(Mt) is oracle-tractable,\nwe will show in section 5 that the problems Max CSP(F) with F \u2286 SpmodMt are\ntractable.\n4.2. Finite bounded lattices. Let L be a lattice and u \u000e v two comparable\n(and not necessarily distinct) elements of L. Let I denote the interval [u, v] = {x \u2208\nL | u \u000e x \u000e v} in L.\nDefinition 4.7. The lattice L[I] is said to be obtained from L by doubling the\ninterval I if the base set of L[I] is (L\\ I)\u222a (I \u00d7{0, 1}) and x \u000e y holds in L[I] if and\nonly if\n\u2022 x \u000e y in L and x, y \f\u2208 I, or\n\u2022 x \u2208 L \\ I, y = (b, j) and x \u000e b in L, or\n\u2022 x = (a, i), y \u2208 L \\ I and a \u000e y in L, or\n\u2022 x = (a, i), y = (b, j) such that a, b \u2208 I and a \u000e b in L, and i \u2264 j.\nEssentially, doubling an interval I in L means replacing it with I \u00d7 {0, 1}.\nDefinition 4.8. A finite lattice L is called bounded2 if there is a sequence\nL1, . . . ,Ln such that L1 is one-element, Ln is isomorphic to L, and, for j = 1, . . . , n\u2212\n1, there exists an interval Ij in Lj such that Lj+1 is isomorphic to Lj [Ij ].\nIn other words, a finite lattice is called bounded if it can be obtained from the one-\nelement lattice by successive doubling of intervals. For example, Figure 4.4 demon-\nstrates that the pentagon is a bounded lattice, while it is not hard to check the lattice\nL\u02c6 from Figure 4.2 is not bounded. Bounded lattices play an important role in lattice\ntheory [18]. The name \u201cbounded\u201d comes from an equivalent characterization of such\nlattices, which is usually used as the definition (but does not play any role in this\n2Not to be confused with posets that have both the least and the greatest element.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 321\nFig. 4.4. Obtaining the pentagon by doubling intervals (in three steps). In each step, the white\nelements indicate the interval to be doubled.\npaper). Theorem 2.46 of [18] states that a finite lattice L is bounded if and only if\nthere exists a free lattice FL and a congruence \u03b1 on FL such that L is isomorphic to\nFL\/\u03b1, and every \u03b1-class in FL has both the least and the greatest element.\nIt is easy to check that for any lattice L and any interval I in L, the binary\nrelation \u03b8 on L[I] defined by the rule\n(x, y) \u2208 \u03b8 \u21d4 either x = y \f\u2208 I or x = (a, i), y = (a, j) for some a \u2208 I\nis a congruence of L[I]. Moreover, the lattice L[I]\/\u03b8 is isomorphic to L, and every\n\u03b8-class is either a one-element lattice C1 or a two-element chain C2. Therefore, we\nhave that L[I] belongs to the Mal\u2019tsev product {C1, C2} \u25e6 {L}. So, if we inductively\ndefine D12 = D2 and D\nn\n2 = D2 \u25e6 Dn\u221212 for n > 1, then we have that every finite\nbounded lattice belongs to Dn2 for a suitable n. Hence, Theorem 4.3 (together with\nLemma 3.4) implies the following statement.\nProposition 4.9. Let L be a fixed finite bounded lattice. Then SFM(L) is\noracle-tractable and, for any finite set F \u2286 SpmodL, Max CSP(F) is tractable.\nIt is known (see Lemma 2.40 of [18]) that the class of finite bounded lattices is\na pseudovariety, that is, it is closed under taking homomorphic images, sublattices,\nand finite direct products. Since the two-element chain is a bounded lattice, it follows\nthat every finite distributive lattice is bounded. Interestingly, if one allows not only\nfinite, but arbitrary direct products (i.e., direct products of infinitely many lattices),\nthen one can generate all lattices from finite bounded lattices (this fact immediately\nfollows from Theorems 2.25 and 2.44 of [18]). In other words, every (not necessarily\nfinite) lattice is a homomorphic image of a subalgebra of a direct product of (possibly\ninfinitely many) finite bounded lattices. Unfortunately, this fact seems to be useless\nfor the algorithmic aspects which we are interested in.\n5. MAX CSP on diamonds. In this section, we consider problems Max CSP\n(F) where F consists of supermodular predicates on a diamond Mt (see Figure 4.3).\nThe middle elements of Mt are called atoms. Note that, for every pair of distinct\natoms a and b, we have a\b b = 0Mt and aunionsq b = 1Mt . For simplicity, let L denote an\narbitrary (fixed) t-diamond, t \u2265 3, throughout this section.\n5.1. The structure of supermodular predicates on diamonds. In this\nsubsection, we describe the structure of supermodular predicates on L by representing\nthem as logical formulas involving constants (elements of L) and the order relation \u000e\nof L.\nFor a subset D\u2032 \u2286 D, let uD\u2032 denote the predicate such that uD\u2032(x) = 1 \u21d4\nx \u2208 D\u2032. The following lemma can be easily derived directly from the definition of\nsupermodularity.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n322 ANDREI KROKHIN AND BENOIT LAROSE\nLemma 5.1. A unary predicate uD\u2032 is in SpmodL if and only if either both\n0L, 1L \u2208 D\u2032 or else |D\u2032| \u2264 2 and at least one of 0L, 1L is in D\u2032.\nFor a sequence y = (xi1 , . . . , xim) of variables and a sequence c = (ci1 , . . . , cim) of\nelements of L, we write y \u000e c to denote \u22271\u2264s\u2264m (xis \u000e cis), and the condition y \u0011 c\nis defined dually.\nTheorem 5.2. Every predicate f(x1, . . . , xn) in SpmodL, such that f takes both\nvalues 0 and 1, can be represented as one of the following logical implications:\n1. [(xi \u000e a1) \u2228 \u00b7 \u00b7 \u00b7 \u2228 (xi \u000e al)] =\u21d2 (xi \u000e 0L), where the aj\u2019s are atoms;\n2. \u00ac(y \u0011 c) =\u21d2 (z \u000e d), where y and z are some subsequences of (x1, . . . , xn),\nand c, d are tuples of elements of L (of corresponding length) such that c\ncontains no 0L and d no 1L;\n3. [(xi \u000e b1) \u2228 \u00b7 \u00b7 \u00b7 \u2228 (xi \u000e bk) \u2228 \u00ac(y \u0011 c)] =\u21d2 (xi \u000e a), where the bj\u2019s are\natoms, y does not contain xi, and a \f= 1L;\n4. \u00ac(xi \u0011 b) =\u21d2 [\u00ac(xi \u0011 a1) \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u00ac(xi \u0011 al) \u2227 (y \u000e c)], where the aj\u2019s are\natoms, y does not contain xi, and b \f= 0L;\n5. \u00ac(y \u0011 c) =\u21d2 false, where y is a subsequence of (x1, . . . , xn) and c contains\nno 0L;\n6. true =\u21d2 (y \u000e c), where y is a subsequence of (x1, . . . , xn) and c contains\nno 1L.\nConversely, every predicate that can be represented in one of the above forms\nbelongs to SpmodL.\nExample 5.3. The unary predicate of type (1) above is the same as uD\u2032 where\nD\u2032 = D \\ {a1, . . . , al}. The predicates uD\u2032 \u2208 SpmodL with |D\u2032| \u2264 2 are the unary\npredicates of types (5) and (6).\nRemark 5.4. Note that constraints of types (2), (5), and (6) are 2-monotone on\nL, while constraints of types (3) and (4) (and most of those of type (1)) are not.\nProof of Theorem 5.2. It is straightforward to verify that all of the predicates in\nthe list are actually supermodular. Now we prove the converse. Consider first the\ncase where the predicate f is essentially unary, i.e., there is a variable xi such that\nf(x1, . . . , xn) = uD\u2032(xi) for some D\n\u2032 \u0002 D. If D\u2032 = {x : x \u000e a} or D\u2032 = {x : x \u0011 a}\nfor some atom a, then f is of the form (5) or (6); otherwise, both 0L and 1L are in\nD\u2032 by Lemma 5.1, and if a1, . . . , al denote the atoms of the lattice that are not in D\u2032,\nthen it is clear that f is described by the implication (1).\nNow we may assume that f is not essentially unary. If it is 2-monotone, then it\nis easy to see that f must be described by an implication of type (2), (5), or (6). So\nnow we assume that f is not essentially unary and it is not 2-monotone; we prove\nthat it is described by an implication of type (3) or (4). We require a few claims:\nClaim 0. The set X of all tuples u such that f(u) = 1 is a sublattice of Ln, i.e.,\nis closed under join and meet.\nThis follows immediately from the supermodularity of f .\nClaim 1. There exist indices 1 \u2264 i1, . . . , ik, j1, . . . , jl \u2264 n, atoms e1, . . . , ek and\nb1, . . . , bl of L such that f(x) = 1 if and only if\n[\u00ac(xi1 \u0011 e1) \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u00ac(xik \u0011 ek)]\n\u2228\n[\u00ac(xj1 \u000e b1) \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u00ac(xjl \u000e bl)].\nNotice first that the set Z of tuples u such that f(u) = 0 is convex in Ln; i.e.,\nif u \u000e v \u000e w with f(u) = f(w) = 0, then f(v) = 0. To show this we construct a\ntuple v\u2032 as follows: for each coordinate i it is easy to find an element v\u2032i such that\nvi\b v\u2032i = ui and viunionsq v\u2032i = wi. Hence v\bv\u2032 = u and vunionsqv\u2032 = w so by supermodularity\nof f neither v nor v\u2032 is in X. It follows in particular that neither 0Ln nor 1Ln is in\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 323\nZ; indeed, if 0Ln \u2208 Z, let a be the smallest element in X (the meet of all elements in\nX), which exists by Claim 0. Since Z is convex it follows that every element above a\nis in X so f is 2-monotone, a contradiction. The argument for 1Ln is identical.\nNow let w \u2208 Z be minimal, and let v \u000e w. As above we can find a tuple v\u2032 such\nthat v unionsq v\u2032 = w and v \b v\u2032 = 0Ln ; by supermodularity of f it follows that v = w\nor v\u2032 = w. It is easy to deduce from this that there exists a coordinate s such that\nws is an atom of L and wt = 0L for all t \f= s. A similar argument shows that every\nmaximal element of Z has a unique coordinate which is an atom and all others are\nequal to 1L.\nSince Z is convex, we have that f(x) = 0 if and only if x is above some minimal\nelement of Z and below some maximal element of Z; Claim 1 then follows immediately.\nFor each index i \u2208 {i1, . . . , ik} that appears in the expression in Claim 1, there is\na corresponding condition of the form\n\u00ac(xi \u0011 es1) \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u00ac(xi \u0011 esr );\nlet Ii denote the set of elements of L that satisfy this condition. Obviously it cannot\ncontain 1L and must contain 0L. Similarly, define for each index j \u2208 {j1, . . . , jl} the\nset Fj of all elements of L that satisfy the corresponding condition of the form\n\u00ac(xj \u000e bt1) \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u00ac(xj \u000e btq );\nit is clear that 0L \f\u2208 Fj and 1L \u2208 Fj .\nThe condition of Claim 1 can now be rephrased as follows: f(x) = 1 if and only\nif xi \u2208 Ii for all i \u2208 {i1, . . . , ik} or xj \u2208 Fj for all j \u2208 {j1, . . . , jl}. It is straightfor-\nward to verify that since f is not 2-monotone, one of the Ii or one of the Fj must\ncontain 2 distinct atoms. We consider the first case, and we show that the predicate\nf is of type (4). The case where some Fj contains 2 atoms is dual and will yield\ntype (3).\nClaim 2. Suppose that Ii contains distinct atoms c and d for some i \u2208 {i1, . . . , ik}.\nThen (a) i is the only index with this property, (b) {j1, . . . , jl} = {i}, and (c) Fi does\nnot contain 2 distinct atoms.\nWe prove (b) first. We have that\nf(0L, . . . , 0L, c, 0L, . . . , 0L) = f(0L, . . . , 0L, d, 0L, . . . , 0L) = 1\n(where c and d appear in the ith position) and by supermodularity it follows that\nwe also have f(0L, . . . , 0L, 1L, 0L, . . . , 0L) = 1. Since Ii does not contain 1L, we\nhave that xj \u2208 Fj for each j \u2208 {j1, . . . , jl}; since Fj never contains 0L, (b) follows\nimmediately. Since {j1, . . . , jl} is nonempty, (a) follows immediately from (b). Finally,\nif Fi contained distinct atoms, then by dualizing the preceding argument we would\nobtain that {i1, . . . , ik} = {i} from which it would follow that f would be essentially\nunary, contrary to our assumption. This concludes the proof of the claim.\nLet b denote the minimal element in Fi, and for each index s \u2208 {i1, . . . , ik}\ndifferent from i let cs denote the (unique) maximal element of Is; then we can describe\nf as follows: f(x) = 1 if and only if\n[xi \u2208 Ii \u2227 (y \u000e c)] \u2228 (xi \u0011 b),\nwhere y is a tuple of variables different from xi and c is the tuple whose entries are\nthe cs defined previously. It remains to rewrite the condition xi \u2208 Ii. Suppose first\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n324 ANDREI KROKHIN AND BENOIT LAROSE\nthat there exists at least one atom of L outside Ii, and let a1, . . . , al denote the atoms\noutside Ii. Then it is clear that xi \u2208 Ii if and only if \u00ac(xi \u0011 a1)\u2228\u00b7 \u00b7 \u00b7\u2228\u00ac(xi \u0011 al) holds,\nso the predicate f is of type (4) (simply restate the disjunction as an implication).\nNow for the last possibility, where Ii contains all of D except 1L; then it is easy to\nsee that f can be described by the following:\n[\u00ac(xi \u0011 b) \u2227 (y \u000e c)] \u2228 (xi \u0011 b),\nand this completes the proof of the theorem.\nWe remark that the preceding theorem can be extended to give a similar charac-\nterization of the supermodular constraints on lattices in the larger class of so-called\nrelatively complemented lattices [21].\n5.2. Supermodular constraints on diamonds are tractable.\nTheorem 5.5. If F \u2286 SpmodL, then Max CSP(F) can be solved (to optimality)\nin O(n3 \u00b7 |L|3 + q3) time where n is the number of variables and q is the number of\nconstraints in an instance.\nProof. We will show how the problem can be reduced to the well-known tractable\nproblem Min Cut.\nLet I = {\u03c11 \u00b7f1(x1), . . . , \u03c1q \u00b7fq(xq)}, q \u2265 1, be an instance of weighted Max CSP\n(F), over a set of variables V = {x1, , . . . , , xn}.\nConstruction.\nLet \u221e denote an integer greater than \u2211 \u03c1i. For each constraint fi, fix a repre-\nsentation as described in Theorem 5.2. In the following construction, we will refer to\nthe type of fi which will be a number from 1 to 6 according to the type of represen-\ntation. Every condition of the form (y \u000e c) will be read as \u2227 (xis \u000e cis), and every\ncondition of the form \u00ac(y \u0011 c) as \u2228\u00ac(xis \u0011 cis), where is runs through the indices\nof variables in y. Moreover, we replace every (sub)formula of the form \u00ac(x \u0011 1L) by\u2228n\ni=1 \u00ac(x \u0011 ai), where a1, . . . , an are the atoms of L.\nNext, we construct a digraph GI .\n\u2022 The vertices of GI are as follows:\n\u2013 {T, F} \u222a {xd | x \u2208 V, d \u2208 L} \u222a {x\u00afd | x \u2208 V, d \u2208 L is an atom} \u222a {ei, e\u00afi |\ni = 1, 2, . . . , q}.3\nFor each fi of type (5), we identify the vertex ei with F . Similarly, for each\nfi of type (6), we identify the vertex e\u00afi with T .\n\u2022 The arcs of GI are defined as follows:\n\u2013 For each atom c in L and for each x \u2208 V , there is an arc from x0L to xc\nwith weight \u221e, and an arc from x\u00afc to x1L with weight \u221e.\n\u2013 For each pair of distinct atoms c, d in L and for each x \u2208 V , there is an\narc from xc to x\u00afd with weight \u221e.\n\u2013 For each fi, there is an arc from e\u00afi to ei with weight \u03c1i.\n\u2013 For each fi of types (1\u20134), and each subformula of the form (x \u000e a) or\n\u00ac(x \u0011 a) in the consequent of fi, there is an arc from ei to xa or x\u00afa,\nrespectively, with weight \u221e.\n\u2013 For each fi of types (1\u20134), and each subformula of the form (x \u000e a)\nor \u00ac(x \u0011 a) in the antecedent of fi, there is an arc from xa or x\u00afa,\nrespectively, to e\u00afi, with weight \u221e.\n\u2013 For each fi of type (5), and each subformula of the form \u00ac(x \u0011 a) in it,\nthere is an arc from x\u00afa to e\u00afi with weight \u221e.\n3The vertices xd will correspond to the expressions x \u0003 d and x\u00afd to \u00ac(x \u0004 d).\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 325\n\u2013 For each fi of type (6), and each subformula of the form (x \u000e a) in it,\nthere is an arc from ei to xa with weight \u221e.\nArcs with weight less than \u221e will be called constraint arcs.\nIt is easy to see that GI is a digraph with source T (corresponding to true)\nand sink F (corresponding to false). Note that paths of nonconstraint arcs between\nvertices corresponding to any given variable x \u2208 V precisely correspond to logical\nimplications that hold between the corresponding assertions. Throughout the proof,\nwe say \u201ca cut in GI\u201d meaning a (T, F )-cut.\nDefine the deficiency of an assignment \u03d5 as the difference between\n\u2211q\ni=1 \u03c1i and\nthe evaluation of \u03d5 on I. In other words, the deficiency of \u03d5 is the total weight\nof constraints not satisfied by \u03d5. We will prove that minimal cuts in GI exactly\ncorrespond to optimal assignments to I. More precisely, we will show that, for each\nminimal cut in GI with weight \u03c1, there is an assignment for I with deficiency at most\n\u03c1, and, for each assignment to I with deficiency \u03c1\u2032, there is a cut in GI with weight \u03c1\u2032.\nThe semantics of the construction of GI will be as follows: the vertices of the\nform xa or x\u00afa correspond to assertions of the form x \u000e a or \u00ac(x \u0011 a), respectively,\nand arcs denote implications about these assertions. Given a minimal cut in GI , we\nwill call a vertex xa reaching if F can be reached from it without crossing the cut.\nFurthermore, if a vertex xa is reaching, then this will designate that the corresponding\nassertion is false, and otherwise the corresponding assertion is true. A constraint is\nnot satisfied if and only if the corresponding constraint arc crosses the cut.\nLet C be a minimal cut in GI . Obviously, C contains only constraint arcs. First\nwe show that, for every variable x \u2208 V , there is a unique minimal element a \u2208 L such\nthat xa is nonreaching. All we need to show is the following: if c, d are distinct atoms\nsuch that both xc and xd are both nonreaching, then so is x0L . Assume that, on the\ncontrary, x0L is reaching. Then there is a path from x0L to F not crossing the cut. It\nis easy to notice that such a path has to go through a vertex x\u00afa for some atom a \u2208 L,\nsince the second vertex on this path must be of the form xb for some atom b, and it\nis followed either by a vertex x\u00afa or else by three vertices e\u00afi, ei, xb\u2032 for some 1 \u2264 i \u2264 q\nand some atom b\u2032. However, we have an arc from at least one of the vertices xc, xd to\nx\u00afa, and hence at least one of these vertices would have a path to F not crossing the\ncut, a contradiction.\nNote that, for every x \u2208 V , there are no arcs coming out of x1L . Hence, for every\nx \u2208 V , there is a unique minimal element v \u2208 L such that F cannot be reached from\nxv without crossing the cut.\nDefine an assignment \u03d5C as follows:\n\u03d5C(x) is the unique minimal element a such that xa is nonreaching.\nWe now make some observations. Note that, for all x \u2208 V and a \u2208 L, we have\nthat \u03d5C(x) \u000e a if and only xa is nonreaching. Moreover, if x\u00afa is reaching, then, for\neach atom b \f= a, we have an arc from xb to x\u00afa meaning that \u03d5C(x) \f\u000e b, and hence\n\u03d5C(x) \u0011 a. Furthermore, if x\u00afa is nonreaching, then \u03d5C(x) \f= a. Indeed, if \u03d5C(x) = a,\nthen xb is reaching for all atoms b \f= a, and, since every path from xb to F has to go\nthrough a vertex x\u00afc for some c, we have that x\u00afc is reaching. Then c \f= a, and there is\nan arc from xa to x\u00afc, so xa is reaching, a contradiction. To summarize, we have the\nfollowing:\n\u2022 If a node of the form xa or x\u00afa is reaching, then the corresponding assertion\nis falsified by the assignment \u03d5C .\n\u2022 If a node of the form xa is nonreaching, then \u03d5C(x) \u000e a.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n326 ANDREI KROKHIN AND BENOIT LAROSE\n\u2022 If a node of the form x\u00afa is nonreaching, then the truth value of the corre-\nsponding assertion is undecided.\nSuppose that a constraint arc corresponding to a constraint fi is not in the cut.\nWe claim that fi is satisfied by the assignment \u03d5C . To show this, we will go through\nthe possible types of fi.\nIf fi is of type (1), (2), (5), or (6), then the claim is straightforward. For example,\nlet fi be of type (1). If the node x0L corresponding to the consequent is reaching,\nthen so are all nodes corresponding to the antecedent. Hence, all atomic formulas\nare falsified by the assignment \u03d5C , and the implication is true. If x0L is nonreaching,\nthen \u03d5C(x) = 0L, and the constraint is clearly satisfied. The argument for types (2),\n(5), and (6) is very similar.\nLet fi be of type (3). Then, if the node corresponding to the consequent is non-\nreaching, then the consequent is satisfied by \u03d5C , and so the constraint is satisfied.\nIf this node is reaching, then every node corresponding to the disjuncts in the an-\ntecedent is reaching. Then both antecedent and consequent are falsified by \u03d5C , and\nthe constraint is satisfied.\nLet fi be of type (4), that is, of the form\n\u00ac(xi \u0011 b) =\u21d2 [\u00ac(xi \u0011 a1) \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u00ac(xi \u0011 al) \u2227 (y \u000e c)].\nIf a node corresponding to some conjunct in the consequent is reaching, then the node\ncorresponding to the antecedent is also reaching. So \u03d5C(xi) \u0011 b, and the constraint is\nsatisfied. More generally, if the node corresponding to the antecedent is reaching, then\nthe constraint is satisfied regardless of what happens with the consequent. Assume\nthat all nodes corresponding to conjuncts in the consequent and in the antecedent\nare nonreaching. Then the conjunct (y \u000e c) is satisfied by \u03d5C . Furthermore, we\nknow (see the observations above) that \u03d5C(xi) \f= b, and also that \u03d5C(xi) \f= as for\n1 \u2264 s \u2264 l. If \u03d5C(xi) = 1L, then both the antecedent and the consequent of fi are\nfalse, and hence fi is satisfied. Otherwise, \u03d5C(xi) \f\u0011 b and \u03d5C(xi) \f\u0011 as for 1 \u2264 s \u2264 l,\nso fi is satisfied anyway.\nConversely, let \u03d5 be an assignment to I, and let K be the set of constraints in\nI that are not satisfied by \u03d5. Consider any path from T to F . It is clear that if all\nconstraints corresponding to constraint arcs on this path are satisfied, then we have\na chain of valid implications starting from true and finishing at false. Since this is\nimpossible, at least one constraint corresponding to such an arc is not satisfied by\n\u03d5. Hence, the constraint arcs corresponding to constraints in K form a cut in GI .\nFurthermore, by the choice of K, the weight of this cut is equal to the deficiency of \u03d5.\nIt follows that the standard algorithm [12] for the Min Cut problem can be used\nto find an optimal assignment for any instance of Max CSP(F). This algorithm runs\nin O(k3), where k is the number of vertices in the graph. Since the number of vertices\nin GI is at most 2(1 + n \u00b7 |D|+ q), the result follows.\nWe remark that a partial converse to Theorem 5.5 was proved in [20] where it is\nshown that if F contains all 2-monotone predicates on a diamond and any predicate\nwhich is not supermodular on that diamond, then Max CSP(F) is NP-hard.\n6. Conclusion. We have described a large class of lattices on which the SFM\nproblem is oracle-tractable, and an even larger class of lattices L such that Max CSP\n(F) is tractable whenever all predicates in F are supermodular on L. We believe that\nmore progress in the study of maximum constraint satisfaction can be achieved by\nfurther blending supermodular optimization and algebraic lattice theory.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \nMAXIMIZING SUPERMODULAR FUNCTIONS ON LATTICES 327\nThe three most standard constructions on algebras (and on lattices in particular)\nare the forming of homomorphic images, subalgebras, and direct products. We showed\n(Corollary 4.4 and Theorem 4.6) that two of them preserve oracle-tractability of the\nproblems SFM(L). However, it is an open problem whether, for any finite lattice\nL1, oracle-tractability of SFM(L1) implies oracle-tractability of SFM(L2) for any\nsublattice L2 of L1.\nThis paper explores two ways of obtaining tractability results for Max CSP\nproblems\u2014one is via oracle-tractability of the SFM problem, and the other via explicit\ndescription of supermodular predicates. One other way that remains to be explored\nhas to do with implicit methods (see [2, 4]) of showing that some predicates can be\nsimulated (or \u201cstrictly implemented\u201d [8, 19]) by other predicates. One interesting\nquestion in this connection is whether any supermodular predicate on a lattice can\nbe simulated, i.e., strictly implemented, by 2-monotone predicates on that lattice.\nA positive answer to this question would, together with Theorem 3.6, imply that\nMax CSP(F) is tractable for arbitrary sets F of supermodular predicates on a lattice.\nFinally, we hope that the study of sub- and supermodular functions on lattices\nwill find more applications in combinatorial optimization.\nREFERENCES\n[1] R. E. Burkard, B. Klinz, and R. Rudolf, Perspectives of Monge properties in optimization,\nDiscrete Appl. Math., 70 (1996), pp. 95\u2013161.\n[2] D. Cohen, M. Cooper, and P. Jeavons, An algebraic characterization of complexity for\nvalued constraints, Lecture Notes in Comput. Sci. 4204, Springer-Verlag, Berlin, 2006,\npp. 107\u2013121.\n[3] D. Cohen, M. Cooper, P. Jeavons, and A. Krokhin, Supermodular functions and the com-\nplexity of MAX CSP, Discrete Appl. Math., 149 (2005), pp. 53\u201372.\n[4] D. Cohen, M. Cooper, P. Jeavons, and A. Krokhin, The complexity of soft constraint\nsatisfaction, Artificial Intelligence, 170 (2006), pp. 983\u20131016.\n[5] N. Creignou, S. Khanna, and M. Sudan, Complexity Classifications of Boolean Constraint\nSatisfaction Problems, SIAM Monogr. Discrete Math. Appl. 7, SIAM, Philadelphia, 2001.\n[6] R. Dechter, Constraint Processing, Morgan Kaufmann, San Francisco, CA, 2003.\n[7] V. Deineko, P. Jonsson, M. Klasson, and A. Krokhin, Supermodularity on chains and\ncomplexity of maximum constraint satisfaction, in Proceedings of Eurocomb\u201905, Vol. AE,\nDMTCS, Berlin, Germany, 2005, pp. 51\u201356.\n[8] V. Deineko, P. Jonsson, M. Klasson, and A. Krokhin, The Approximability of MAX CSP\nwith Fixed-Value Constraints, Technical report CoRR cs.CC\/0602075, 2006.\n[9] A. Frank, Applications of submodular functions, in Surveys in Combinatorics, London Math.\nSoc. Lecture Note Ser. 187, K. Walker, ed., Cambridge University Press, Cambridge, UK,\n1993, pp. 85\u2013136.\n[10] A. Frank, Matroids and submodular functions, in Annotated Bibliographies in Combinatorial\nOptimization, M. Dell\u2019Amico, F. Maffoli, and S. Martello, eds., John Wiley, Chichester,\nUK, 1997, pp. 65\u201380.\n[11] S. Fujishige, Submodular Functions and Optimization, Ann. Discrete Math. 58, 2nd ed., El-\nsevier, Amsterdam, 2005.\n[12] A. Goldberg and R. E. Tarjan, A new approach to the maximum-flow problem, J. Assoc.\nComput. Mach., 35 (1988), pp. 921\u2013940.\n[13] G. Gra\u00a8tzer, General Lattice Theory, 2nd ed., Birkha\u00a8user-Verlag, Basel, Switzerland, 2002.\n[14] G. Gra\u00a8tzer and D. Kelly, Products of lattice varieties, Algebra Universalis, 21 (1985),\npp. 33\u201345.\n[15] D. Hobby and R. N. McKenzie, The Structure of Finite Algebras, Contemp. Math. 76, AMS,\nProvidence, RI, 1988.\n[16] S. Iwata, A fully combinatorial algorithm for submodular function minimization, J. Combin.\nTheory Ser. B, 84 (2002), pp. 203\u2013212.\n[17] S. Iwata, L. Fleischer, and S. Fujishige, A combinatorial strongly polynomial algorithm for\nminimizing submodular functions, J. ACM, 48 (2001), pp. 761\u2013777.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCopyright \u00a9 by SIAM. Unauthorized reproduction of this article is prohibited. \n328 ANDREI KROKHIN AND BENOIT LAROSE\n[18] P. Jipsen and H. Rose, Varieties of Lattices, Lecture Notes in Math. 1533, Springer-Verlag,\nBerlin, 1992.\n[19] P. Jonsson, M. Klasson, and A. Krokhin, The approximability of three-valued MAX CSP,\nSIAM J. Comput., 35 (2006), pp. 1329\u20131349.\n[20] A. Krokhin and B. Larose, Maximum Constraint Satisfaction on Diamonds, Technical report\nCS-RR-408, Department of Computer Science, University of Warwick, Warwick, UK, 2004.\n[21] A. Krokhin and B. Larose, Supermodular Sublattices in Products of Relatively Complemented\nLattices, manuscript, 2006.\n[22] V. B. Lender, The groupoid of prevarieties of lattices, Siberian Math. J., 16 (1975), pp. 1214\u2013\n1223 (in Russian).\n[23] A. Mu\u00a8ller and D. Stoyan, Comparison Methods for Stochastic Models and Risks, Wiley Ser.\nProb. Stat., Wiley & Sons, Chichester, UK, 2002.\n[24] H. Narayanan, Submodular Functions and Electrical Networks, Ann. Discrete Math. 54,\nNorth-Holland, Amsterdam, 1997.\n[25] S. D. Promislow and V. R. Young, Supermodular functions on finite lattices, Order, 22\n(2005), pp. 389\u2013413.\n[26] A. Schrijver, A combinatorial algorithm minimizing submodular functions in polynomial time,\nJ. Combin. Theory Ser. B, 80 (2000), pp. 346\u2013355.\n[27] A. Schrijver, Combinatorial Optimization: Polyhedra and Efficiency, Vol. B, Matroids,\nTrees, Stable Sets, Springer-Verlag, Berlin, 2003.\n[28] D. Topkis, Supermodularity and Complementarity, Frontiers Econom. Res., Princeton Univer-\nsity Press, Princeton, NJ, 1998.\n"}