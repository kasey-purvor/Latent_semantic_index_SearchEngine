{"doi":"10.1007\/s12145-010-0043-6","coreId":"68658","oai":"oai:eprints.lancs.ac.uk:31807","identifiers":["oai:eprints.lancs.ac.uk:31807","10.1007\/s12145-010-0043-6"],"title":"A flexible streaming software architecture for scientific instruments","authors":["Grill, Martin","Barratt, Keith","Honary, Farideh"],"enrichments":{"references":[{"id":889378,"title":"A Bayesian approach to electric field and E-region neutral wind estimation with the Poker Flat Advanced Modular Incoherent Scatter Radar. Radio Science Little CG, Leinbach H","authors":[],"date":"2008","doi":"10.1029\/2007RS003805","raw":"Heinselman CJ, Nicolls MJ (2008) A Bayesian approach to electric field and E-region neutral wind estimation with the Poker Flat Advanced Modular Incoherent Scatter Radar. Radio Science Little CG, Leinbach H (1959) The riometer\u2014a device for the continuous measurement of ionospheric absorption. Proc IRE 47:315\u2013320 Mills BY (1952) The distribution of the discrete sources of cosmic radio radiation. Aust J Sci Res 5(2):266\u2013287 Mills BY, Little AG (1953) A high-resolution aerial system of a new type. Aust J Phys 6:272\u2013278 Murayama Y, Mori H, Kainuma S, Ishi M, Nishimuta I, Igarashi K, Yamagishi H, Nishino M (1997) Development of a highresolution imaging riometer for the middle and upper atmosphere observation program at Poker Flat, Alaska. J Atmos Sol Terr Phys 59(8):925\u2013937 Nielsen E (2001) Antenna system for a high resolution imaging riometer. Technical Report MPAE-W-03-01-04, Max-PlanckInstitut f\u00fcr Aeronomie, Lindau, Germany Nielsen E, Hagfors T (1997) Plans for a new rio-imager experiment in Northern Scandinavia. J Atmos Sol Terr Phys 59(8):939\u2013949 Nielsen E, Honary F, Grill M (2004) Time resolution of cosmic noise observationswithacorrelationexperiment.AnnalesGeophysicae\u2014 Atmospheres, Hydrospheres and Space Sciences 22(5):1687\u20131689, SRef- ID:1432- 0576\/ag\/2004-22-1687 Sommerville I (2004) Software engineering, 7th edition. Addison Wesley Strohbach M, Gellersen H-W, Kortuem G, Kray C (2004) Cooperative artefacts: assessing real world situations with embedded technology. In Ubicomp 2004: Ubiquitous Computing, Springer Valentic T (2002) A novel approach to data retrieval and instrumentation control at remote field sites using Python and Network News, February 2002. Available from http:\/\/transport.sri.com\/ TransportDevel\/Sections\/Documentation\/Python10 Earth Sci Inform","cites":null},{"id":889091,"title":"Query processing in sensor networks.","authors":[],"date":"2004","doi":"10.1109\/MPRV.2004.1269131","raw":"Addison-Wesley, Reading Gehrke J, Madden S (2004) Query processing in sensor networks. IEEE Pervasive Computing 1:46. doi:10.1109\/MPRV.2004.1269131 Grill M (2007) Technological Advances in Imaging Riometry. PhD thesis, University of Lancaster Hagfors T, Grill M, Honary F (2003) Performance comparison of cross correlation and filled aperture imaging riometers. Radio Science, 38(6):17\/1\u201317\/5. doi:10.1029\/2003RS002958.","cites":null},{"id":888873,"title":"Wireless sensor networks: a survey.","authors":[],"date":"2002","doi":"10.1016\/S1389-1286(01)00302-4","raw":"Akyildiz IF, Su W, Sankarasubramaniam Y, Cayirci E (2002) Wireless sensor networks: a survey. Comput Netw 38(4):393\u2013422. doi:10.1016\/S1389-1286(01)00302-4 Bray T, Paoli J, Sperberg-McQueen CM, Maier E, Yergeau F, Cowan J (2006) Extensible markup language (XML) 1.1. Technical report, The World Wide Web Consortium (W3C). Available from http:\/\/www.w3.org\/TR\/xml11\/ Christiansen WN, Mathewson DS (1958) Scanning the sun with a highly directional array. Proceedings of the Institution of Radio Engineers, 46:127ff Deacon J (2002) Design patterns. Technical report, Matrice, London, UK Detrick DL, Rosenberg TJ (1990) A phased-array radiowave imager for studies of cosmic noise absorption. Radio Science, 25(4):325\u2013338 ETSI (1997) Digital video broadcasting (DVB); a guideline for the use of DVB specifications and standards. TR 101 200. Technical report, European Telecommunications Standards Institute. Available from http:\/\/www.etsi.fr Gamma E, Helm R, Johnson R, Vissides J (1995) Design patterns.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-02-13","abstract":null,"downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/68658.pdf","fullTextIdentifier":"http:\/\/eprints.lancs.ac.uk\/31807\/1\/art_988.pdf","pdfHashValue":"e8a2d64c74c629c9342bc2d3aefe275d32ddc991","publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:31807<\/identifier><datestamp>\n      2018-01-24T02:56:51Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        A flexible streaming software architecture for scientific instruments<\/dc:title><dc:creator>\n        Grill, Martin<\/dc:creator><dc:creator>\n        Barratt, Keith<\/dc:creator><dc:creator>\n        Honary, Farideh<\/dc:creator><dc:date>\n        2010-02-13<\/dc:date><dc:type>\n        Journal Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/eprints.lancs.ac.uk\/31807\/1\/art_988.pdf<\/dc:identifier><dc:relation>\n        http:\/\/dx.doi.org\/10.1007\/s12145-010-0043-6<\/dc:relation><dc:identifier>\n        Grill, Martin and Barratt, Keith and Honary, Farideh (2010) A flexible streaming software architecture for scientific instruments. Earth Science Informatics. pp. 1-7. ISSN 1865-0473<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/31807\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1007\/s12145-010-0043-6","http:\/\/eprints.lancs.ac.uk\/31807\/"],"year":2010,"topics":[],"subject":["Journal Article","PeerReviewed"],"fullText":"RESEARCH ARTICLE\nA flexible streaming software architecture\nfor scientific instruments\nMartin Grill & Keith Barratt & Farideh Honary\nReceived: 24 August 2009 \/Accepted: 11 January 2010\n# Springer-Verlag 2010\nAbstract The recently completed prototyping efforts for a\nnew type of riometer, the Advanced Rio-Imaging Experiment\nin Scandinavia (ARIES), required the development of a\nuniquely flexible software architecture to deal with what in\nsoftware engineering terms is referred to as a \u2018Wicked\nSystem:\u2019 Source, volume and type of data as well as required\nprocessing are only very loosely defined at the outset of the\nproject. Speed, reconfigurability, remote control and data\nprovenance are of major importance for the success of the\nproject both during development and during operation of the\ndeployed prototype. Details of the Advanced Riometer\nComponents (ARCOM) component-based software architec-\nture are presented. The software architecture is not specific to\nARIES, and ARCOM components can readily be re-used in\nother, similar instruments.\nKeywords Componentry . Geospace . Pipelining .\nProvenance . Software architecture . Streaming\nIntroduction\nRiometers (Relative Ionospheric Opacity Meter using Extra\nTerrestrial Electromagnetic Radiation) (Little and Leinbach\n1959; Detrick and Rosenberg 1990) measure to what extent\ncosmic background noise is being absorbed by the iono-\nsphere. The largest 16\u00d716 (256-element) phased array\nimaging riometer at Poker Flat, Alaska (Murayama et al.\n1997) achieves an angular resolution of 6\u00b0 at zenith which\ntranslates into an area of about 11\u00d711 km at a height of\n90 km. The need for higher spatial resolution provides\nmotivation to prototype riometers based on the Mills Cross\ntechnique (Nielsen and Hagfors 1997; Mills and Little 1953;\nNielsen 2001). Since increasing the number of antenna\nelements becomes increasingly impractical, such riometers\nemploy digital receivers and more complex data processing\ncombined with a sparse antenna array to achieve higher spatial\nresolution. A drawback of a Mills Cross type system, com-\npared to a filled phased array system of similar resolution, is\nthat the required integration time is worse due to the reduced\naperture of the antenna array. This issue has been investigated\nin (Nielsen et al. 2004) and (Hagfors et al. 2003), and con-\ncludes that this effect is sufficiently counterbalanced by\nadvancements in receiver technology over the last decades.\nOperating software to support prototyping of the first\nMills Cross based riometer needed to be flexible enough to\nsupport engineers and scientists during all phases of the\ndevelopment, ranging from initial single beam experiments\nand signal processing algorithm evaluations to final\ncontinuous operation of the fully deployed instrument.\nIn addition to actual absorption signals (\u201cthe data\u201d),\nthere is a strong need for collecting engineering and\nhousekeeping data. This is particularly useful during\ninstrument development, but remains of significant impor-\ntance for potential troubleshooting during routine operation.\nCommunicated by T. Narock\nPart of this work was funded by the UK\u2019s Particle Physics and\nAstronomy Research Council (PPARC), now the Science and\nTechnology Facilities Council (STFC).\nM. Grill (*)\nSRI International,\nMenlo Park, CA, USA\ne-mail: martin.grill@sri.com\nK. Barratt : F. Honary\nLancaster University,\nLancaster, UK\nEarth Sci Inform\nDOI 10.1007\/s12145-010-0043-6\nHaving engineering data embedded in a (the) single\nstream of \u201cdata\u201d allows for unambiguous reconstruction of\nthe chain of events that resulted in any given data point in\nquestion (\u201cprovenance\u201d). In the authors\u2019 experience, the\nability to \u201creplay\u201d data has been an invaluable tool in\nengineering and troubleshooting the ARIES prototype. The\nability to add new data to the stream (for example, adding a\nnew temperature sensor or feedback from the ventilation\nsystem) without having to worry about separate log files\nand data merging, and without breaking any existing code,\nhas turned out to be a big time saver.\nDigital signal processing\nA Mill Cross type riometer is based on the principle of\ncross-correlating signals from the two perpendicular fan\nbeams formed by two perpendicular linear phased arrays as\nfirst conceived and used by (Mills 1952) and (Christiansen\nand Mathewson 1958), albeit not for riometry purposes.\nThe beam forming process for a Mills Cross is illustrated in\nFig. 1. The two small panels on the left show an example of\na fan beam formed by a linear array of antennas along the\ny-axis (top panel) and along the x-axis (bottom panel),\nrespectively. The small inset in the upper right hand corner\nof each panel shows an idealized top-down view of several\nfan beams generated by the arm in question, with the shown\nfan beam highlighted in green.\nWith this type of antenna arrangement, high spatial\nresolution can be achieved with significantly fewer antenna\nelements when compared to a filled array antenna: to achieve\nn times the resolution, the number of antenna elements\nrequired now only increases linearly with n and not n2.\nDuring initial prototyping, the first beam forming stage\n(the Butler Matrix forming fan-shaped beams) was carried\nout in analog electronics, and ARCOM software dealt with\ncontinuous cross-correlation and post-integration. Once the\nfull bank of receivers had become available, forming of the\nnow 32+32=64 fan beams was still carried out using\nanalog electronics as shown in Fig. 2a. However, in this\nincarnation, cross-correlation was handed off to a field-\nprogrammable gate array (FPGA), as standard PC hardware\ncannot currently be easily interfaced with the 64 serial input\nlines delivering a total input data rate of 2.6 Gbits\/s\nproduced by the 64 simultaneously sampling receivers.\nOver time, the signal processing functionality has expanded\nits scope to include the Butler Matrix processing block and\nthis is shown in Fig. 2b. With both beam forming stages\nbeing carried out by digital signal processing, a number of\nsignificant additional capabilities have become possible\nincluding programmable tapering of the array, improved\ntemperature stability due to the reduction in analog\nelectronics, and a better real-time diagnostic capability of\nthe receiver boards.\nARIES operating software\nARIES exhibits many properties of a \u2018Wicked System,\u2019\ndefined as a system whose properties are poorly understood\nat the outset, and are likely to change significantly as\nFig. 1 Beam forming for a Mills Cross\nEarth Sci Inform\nsystem development progresses from prototype to prototype\n(Sommerville 2004). Software design for such systems\nprovides unique challenges to the software engineer\nseeking to support system evolution to the most flexible\nextent possible. The ARIES operating software is the result\nof a structured approach of defining goals, deriving the\noverall architecture and finally designing, implementing\nand integrating the individual (software) building blocks\nthat make up the system.\nSoftware goals\nThe ARIES operating software ARCOM (Advanced\nRiometer Components) is designed around a flexible\ncomponent-based pipelining architecture derived from the\nfollowing goals:\n(i) Speed. On average, the system needs to keep up with\nthe incoming data stream from the receivers. The\nphrasing \u2018on average\u2019 is appropriate, because even\nthough we must not lose any data, we need not\nguarantee that all data is processed immediately. In\nengineering terms, this system can be referred to as a\n\u2018soft real-time\u2019 system.\n(ii) Run-time reconfigurability. To a certain extent, we\nwant to be able to reconfigure the system while it is\nrunning. For example we want to continuously\nintegrate an incoming signal, and then later on add\nfunctionality for logging the incoming signal to a file.\nIn this example, the logging should not affect the\noperation of the integrator.\n(iii) Expandability. We want to be able to develop new\nsystem functionality in the future. This new function-\nality should integrate seamlessly with any existing\nparts of the system.\n(iv) On-line status information. For diagnostic purposes,\nwe want to be able to query the current internal status\nof the system in sufficient detail at any time, and\nwithout affecting the operation of the system.\n(v) Remote control. Due to the physical remoteness of the\nsite, all system functionality should be accessible\nfrom off-site and through potentially slow (56K\nmodem) communication links.\nARCOM architecture\nFigure 3 gives a layer-oriented overview of how ARCOM\nfits in with the other parts of an advanced riometer system.\nThis section discusses major aspects of the ARCOM\narchitecture.\nComponent-based\nThis approach allows for easy insertion and removal of\ncomponents at runtime. Common Object Request Broker\nArchitecture (CORBA) is used for controller-to-component\ncommunication, e.g. to start, stop or query the status of any\ngiven component. A set of three principal (meta-)compo-\nnents was designed. Every component in the ARCOM\ncontrol software behaves like (is derived from) one of these\nprincipal components. The core ARIES control software is\ntherefore made up of only three structurally different\ncomponents, and even those have strong commonalities as\nfar as inter-component communication is concerned. Re-\ncorder components stand at the beginning of a processing\n(a)\n(b)\nFig. 2 ARIES System: a Orig-\ninal design using analog Butler\nMatrices for stage 1 beam\nforming; b Current implementa-\ntion with digital beam forming\nEarth Sci Inform\nchain (pipeline). They collect data from some (hardware)\ndevice (for example the ARIES FPGA or a temperature\nsensor) and transfer it to the standardized shared memory\ninterface. Processor components manipulate incoming data.\nExamples are post-integration, absorption calculation, or\ncropping (reducing the field of view). Processors can also\nbe data sinks. The ALogger component, for example, takes\ndata and writes it to disk. Finally, Adaptors simply provide\na consistent CORBA interface to different hard- and\nsoftware components supplied by third parties, following\nthe \u2018fa\u00e7ade\u2019 design pattern (Gamma et al. 1995; Deacon\n2002). That way, third party components like, for example,\nthe control software for an uninterruptible power supply\n(UPS), can be accessed through a standard CORBA\ninterface, just like any other ARCOM component. Adaptors\ndo not access shared memory interfaces.\nPipelined\nA pipeline architecture follows the natural notion of data\nflowing through the system, being processed as it does so.\nThis model is not limited to one input and one output,\nseveral streams of data may enter the system simultaneous-\nly, to be processed independently or combined together.\nResults may be written to external disk straight away, or\nprocessed by components further down the pipeline. A\npipelining architecture supports reuse of transformations,\nevolving the system by means of adding new trans-\nformations is straightforward, and concurrent systems\n(many processing paths processed simultaneously) are\nreadily supported. Figure 4 is an example of several\ncomponents arranged in a multi-pipeline setup. This depicts\nthe ARCOM configuration for our current FPGA-based\nARIES implementation. All recorder components feed into\nthe same shared memory interface. The resulting data\nstream gets stored to disk by an ALogger component.\nSelected packets can be post-integrated and transmitted\nover the network in real time. Additional components can\nbe added and removed at run-time, and command-line tools\nor additional components can be used to tap into any of the\nshared memory interfaces. The major disadvantage of a\npipelining model is that each transformation needs to agree\non a common input and output format in order to be able to\ntie in with the other transformations along the processing\npipeline. This was turned to an advantage in ARCOM, see\nsection below on ARCOM\u2019s versatile streaming data\nformat.\nShared memory interface\nIn addition to the CORBA interfaces, which are used for\ninfrequent control tasks such as starting and stopping\ncomponents, all components that can take part in pipeline-\nFig. 4 ARCOM configuration\nfor current FPGA-based design\nFig. 3 Multi-layer view of ARCOM and its operating environment.\nDUNES is an independent dial-up networking module implemented\nby the author and is not discussed further in this paper\nEarth Sci Inform\nbased processing are glued together through blocks of\nshared memory with strictly unidirectional data flow.\nEstablishing a shared memory interface for data flow\nbetween components in the processing pipeline allows for\nmaximum speed as data is transferred between components,\nessentially only limited by memory throughput of the\nprocessing hardware. ARCOM shared memory interfaces\nare block-based with flexible block sizes. They are multi-\nclient and multi-master and allow for multiple simultaneous\nread and write operations at any given time. Real-time\ndiagnostics are supported to fine-tune the operating param-\neters of any given interface through functions to retrieve\nand visualize current allocation information. Figure 5\nshows one example snapshot of the internal state of an\nARCOM shared memory interface. Tall (green) arrows\nindicate head pointer position, short (black) arrows indicate\ntail pointer positions. Masters 0 and 2 are connected and\nidle. Master 1 is currently writing to the shared memory\ninterface. Client 0 is waiting for Master 1 to finish. Client 1\nhas recently connected and is waiting for new data packets.\nClient 2 is disconnected. Note particularly how multiple\nmasters can hold a write lock on their part of the data\nstream simultaneously, and how clients consume new data\nin sequence as masters finish writing out their respective\npackets.\nARCOM streaming data format\nAs noted above, any pipelining architecture requires its\nindividual processing stages (components) to agree on a\ncommon data format for passing data along the pipeline.\nThe flexibility requirements faced by ARCOM compared to\nexisting riometer systems are unique in that the data format\nshould accommodate for both existing (well-)defined data\nsources such as existing FPGA implementations of the\nARIES cross-correlator, as well as data produced by yet-to-\nbe-defined-and-implemented future components. Generic\nmulti-purpose data formats have come a long way, with\nXML (eXtensible Markup Language) being the most\nprominent of these formats in recent years (Bray et al.\n2006). XML is uniquely flexible in that it is an inherently\nextensible format that can be customized to represent any\npossible dataset. The major drawback of XML when it\ncomes to inter-component communication between, in this\nsense closely coupled, components in a processing pipeline\nis its text-based format. Parsing XML data, which allows\nboth variable-length tags and content, is processing inten-\nsive and therefore slow. It turns out that flexibility and\nspeed requirements very similar to ARCOM\u2019s exist in quite\na different area, namely digital television. Equipment\ncompliant with the Digital Video Broadcast (DVB) standard\nuses pipeline architectures to multiplex, transmit, receive\nand de-multiplex streams of images, audio, subtitles and\nmany additional, quite unrelated, datasets such as teletext or\nIP (Internet Protocol) packets. The underlying data format\nis the MPEG transport stream, see (ETSI 1997) and\nreferences therein. Inspired by this, ARCOM defines a\ncommon ARCOM streaming data format that, on the\nhighest level, consists of a stream of \u2018packets,\u2019 each packet\nin turn containing one or many \u2018descriptors.\u2019 This format\nprovides high flexibility as follows: Data in this format is\nfuture-proof (unknown packets\/descriptors are simply\nskipped over by processing tools), generic (a basic set of\ntools can deal with arbitrary data streams), hardware-\nfriendly (arbitrary external hardware data sources can be\nmade to \u2018speak\u2019 ARCOM simply by encapsulating their\ndata output into appropriate ARCOM packets, an approach\nvery similar to \u2018tunneling\u2019 in, for example, TCP\/IP networking)\nand fast to process, access, and archive. Grill (2007) gives\ndetails on all currently defined ARCOM packet and descrip-\ntor types. Figure 6 shows the definition of an ARCOM_\nFPGAPACKET packet as an example of a complex ARCOM\nstreaming data packet. Note that although the figure shows\nthe packet exactly as it is issued by version 4.0.1.2 of the\nFPGA firmware, ARCOM does at no stage rely on the\ndetailed knowledge of descriptor offsets, order, or even\nexistence of any particular descriptor. Instead, because the\npacket is made up of \u2018descriptor\u2019 entities, the packet can be\nscanned for descriptors of interest (as identified by their\nrespective descriptor header), and the relevant data is\nextracted\/processed, whilst unknown\/uninteresting des-\ncriptors and packets that are known not to contain any\ndescriptors of interest for the task at hand are simply skipped\nover. This is in contrast to fixed data structures that rely on\nevery processing tool\u2019s knowledge of the precise location\nof any given data point in the structure and require updates\nto all tools to accommodate extra data.\nThe authors would like to acknowledge that ARCOM\u2019s\nproprietary (although open and documented) data model\ngenerally requires at least an additional conversion step\nbefore the data can be fed into existing standard visualiza-\ntion\/processing tools. While deemed an acceptable trade-off\nfor our application at the time, this may be a serious\ncommitment to ask from potential users.Fig. 5 An ARCOM shared memory interface in use\nEarth Sci Inform\nLow-level support tools\nA number of command-line based tools enable day-to-day\noperation and maintenance of ARCOMbased systems and are\npart of the ARCOM distribution. These include the ARCOM\ncommand-line CORBA message dispatcher (sendcmd) to\ninteract (i.e. start, stop, etc.) with running ARCOM compo-\nnents through their CORBA interface, a graphical user\ninterface (gui1.tcl) to graphically control the state of ARCOM\ncomponents, the ARCOM executor (executor.pl) to automat-\nically start up and shut down a complete ARCOM-based\nsystem consisting of many components and shared memory\ninterfaces between them, as well as several \u2018ARCOM packet\ntools\u2019 to spy on, retrieve, display the content of, filter, extract\ndata from ARCOM packet streams and live shared memory\ninterfaces.\nScope and limitations\nIt needs to be emphasized that the ARCOM architecture does\nnot attempt to solve data streaming, routing and processing\nissues arising in (potentially wireless and\/or ad-hoc) distrib-\nuted sensor network applications (Akyildiz et al. 2002). The\nARIES riometer instrument design still follows the more\ntraditional design paradigm of many \u201cdumb\u201d sensors being\nattached to a small number of processing nodes. The primary\ngoal here is to seamlessly integrate data from a variety of\ninputs into one common data \u201cstream,\u201d route this stream to a\n(small) number of co-located and\/or remote nodes for\nprocessing\/archival, and do all this in a way that supports\nthe goals presented in the section on \u201cSoftware goals\u201d above.\nNeither does ARCOM (intend to) provide a solution\nfor distributed query processing in sensor networks as\nFig. 6 Example of an\nARCOM_FPGAPACKET\nEarth Sci Inform\ndescribed, for example, by Gehrke and Madden (2004), or\neven an architecture for collective, distributed reasoning\n(Strohbach et al. 2004). Rather, ARCOM\u2019s pipelining\narchitecture is inherently good for in-sequence processing\nof contiguous time series of data. Typical such processing\ntasks in the field of riometry are on-the-fly (real-time)\nvisualization, beam forming, post-integration, filtering,\nand quiet-day curve derivation and subtraction.\nData dissemination to users for non-real-time purposes\nhappens by the traditional means of transferring archived\nstream data (files) as generated, for example, by the\nALogger component, for the time period of interest. A\ncommonly used method in the field is to make these files\navailable on a file transfer protocol (FTP) server. This is\nin line with current practice for resident archives (RA),\nbut eliminates the need to archive multiple separate file\ntypes for any given instrument as all data is embedded\ninto one single data stream.\nSummary and outlook\nThe ARCOM software architecture provides a versatile run-\ntime environment for scientific instruments and can readily\nbe tailored to support a wide range of data acquisition and\nprocessing tasks. ARCOM is not limited to ARIES, or even\nriometers. The component-based approach, together with\nhigh-speed pipelining through dedicated shared memory\ninterfaces, allows for unprecedented flexibility and run-time\nreconfigurability of an ARCOM-based instrument, thus\nsuccessfully solving the \u2018Wicked Problem\u2019 of ever-evolving\nsystems. The ARCOM architecture and associated data\nstructures such as the ARCOM packet format are well\ndocumented and various tools support the user during setup\nand day-to-day operation. ARCOM is discussed in-depth in\n(Grill 2007). Since its inception, ARCOM has also been\ndeployed for the Advanced Imaging Riometer for Iono-\nspheric Studies (AIRIS). Other instruments have also\nbenefited from ARCOM concepts, for instance the new\nhigh-speed photometer for optical emission measurements\n(SPARKLE) developed by the author, which employs a\npacket-based streaming data format very similar to the\none used by ARCOM. The Center for Geospace Studies\nat SRI International has developed a distributed data\nprocessing and transport architecture called \u2018Data Trans-\nport Network\u2019 (Valentic 2002). This is used in many large-\nscale projects, such as the Advanced Modular Incoherent\nScatter Radar (AMISR) at Poker Flat, Alaska (Heinselman\nand Nicolls 2008). Future efforts will be undertaken\ntowards combining Data Transport Network\u2019s excellent\nperformance in distributed systems and over unreliable\nlinks with ARCOM\u2019s real-time streaming capability\nrequired for \u2018instant-feedback\u2019 type applications such as\ninteractive telescope control.\nReferences\nAkyildiz IF, Su W, Sankarasubramaniam Y, Cayirci E (2002) Wireless\nsensor networks: a survey. Comput Netw 38(4):393\u2013422.\ndoi:10.1016\/S1389-1286(01)00302-4\nBray T, Paoli J, Sperberg-McQueen CM, Maier E, Yergeau F, Cowan\nJ (2006) Extensible markup language (XML) 1.1. Technical\nreport, The World Wide Web Consortium (W3C). Available from\nhttp:\/\/www.w3.org\/TR\/xml11\/\nChristiansen WN, Mathewson DS (1958) Scanning the sun with a\nhighly directional array. Proceedings of the Institution of Radio\nEngineers, 46:127ff\nDeacon J (2002) Design patterns. Technical report, Matrice, London, UK\nDetrick DL, Rosenberg TJ (1990) A phased-array radiowave imager for\nstudies of cosmic noise absorption. Radio Science, 25(4):325\u2013338\nETSI (1997) Digital video broadcasting (DVB); a guideline for the use\nof DVB specifications and standards. TR 101 200. Technical\nreport, European Telecommunications Standards Institute. Avail-\nable from http:\/\/www.etsi.fr\nGamma E, Helm R, Johnson R, Vissides J (1995) Design patterns.\nAddison-Wesley, Reading\nGehrke J, Madden S (2004) Query processing in sensor networks. IEEE\nPervasive Computing 1:46. doi:10.1109\/MPRV.2004.1269131\nGrill M (2007) Technological Advances in Imaging Riometry. PhD\nthesis, University of Lancaster\nHagfors T, Grill M, Honary F (2003) Performance comparison of\ncross correlation and filled aperture imaging riometers. Radio\nScience, 38(6):17\/1\u201317\/5. doi:10.1029\/2003RS002958.\nHeinselman CJ, Nicolls MJ (2008) A Bayesian approach to electric\nfield and E-region neutral wind estimation with the Poker Flat\nAdvanced Modular Incoherent Scatter Radar. Radio Science\nLittle CG, Leinbach H (1959) The riometer\u2014a device for the continuous\nmeasurement of ionospheric absorption. Proc IRE 47:315\u2013320\nMills BY (1952) The distribution of the discrete sources of cosmic\nradio radiation. Aust J Sci Res 5(2):266\u2013287\nMills BY, Little AG (1953) A high-resolution aerial system of a new\ntype. Aust J Phys 6:272\u2013278\nMurayama Y, Mori H, Kainuma S, Ishi M, Nishimuta I, Igarashi K,\nYamagishi H, Nishino M (1997) Development of a high-\nresolution imaging riometer for the middle and upper atmosphere\nobservation program at Poker Flat, Alaska. J Atmos Sol Terr\nPhys 59(8):925\u2013937\nNielsen E (2001) Antenna system for a high resolution imaging\nriometer. Technical Report MPAE-W-03-01-04, Max-Planck-\nInstitut f\u00fcr Aeronomie, Lindau, Germany\nNielsen E, Hagfors T (1997) Plans for a new rio-imager experiment in\nNorthern Scandinavia. J Atmos Sol Terr Phys 59(8):939\u2013949\nNielsen E, Honary F, Grill M (2004) Time resolution of cosmic noise\nobservations with a correlation experiment. Annales Geophysicae\u2014\nAtmospheres, Hydrospheres and Space Sciences 22(5):1687\u20131689,\nSRef- ID:1432- 0576\/ag\/2004-22-1687\nSommerville I (2004) Software engineering, 7th edition. Addison Wesley\nStrohbach M, Gellersen H-W, Kortuem G, Kray C (2004) Cooperative\nartefacts: assessing real world situations with embedded technol-\nogy. In Ubicomp 2004: Ubiquitous Computing, Springer\nValentic T (2002) A novel approach to data retrieval and instrumen-\ntation control at remote field sites using Python and Network\nNews, February 2002. Available from http:\/\/transport.sri.com\/\nTransportDevel\/Sections\/Documentation\/Python10\nEarth Sci Inform\n"}