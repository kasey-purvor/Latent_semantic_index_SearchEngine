{"doi":"10.4230\/LIPIcs.STACS.2010.2469","coreId":"15409","oai":"oai:dro.dur.ac.uk.OAI2:7432","identifiers":["oai:dro.dur.ac.uk.OAI2:7432","10.4230\/LIPIcs.STACS.2010.2469"],"title":"The k-in-a-path problem for claw-free graphs.","authors":["Fiala, J.","Kaminski, M.","Lidicky, B.","Paulusma, Daniel"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":["Marion, Jean-Yves","Thomas, Schwentick"],"datePublished":"2010-01-01","abstract":"Testing whether there is an induced path in a graph spanning $k$ given vertices is already \\NP-complete in general graphs when $k=3$. We show how to solve this problem in polynomial time on claw-free graphs, when $k$ is not part of the input but an arbitrarily fixed integer","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/15409.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/7432\/1\/7432.pdf","pdfHashValue":"1a8ae1df04dca057ebb0680333b57be2875a123c","publisher":"Dagstuhl","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:7432<\/identifier><datestamp>\n      2013-04-03T15:17:23Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        The k-in-a-path problem for claw-free graphs.<\/dc:title><dc:creator>\n        Fiala, J.<\/dc:creator><dc:creator>\n        Kaminski, M.<\/dc:creator><dc:creator>\n        Lidicky, B.<\/dc:creator><dc:creator>\n        Paulusma, Daniel<\/dc:creator><dc:description>\n        Testing whether there is an induced path in a graph spanning $k$ given vertices is already \\NP-complete in general graphs when $k=3$. We show how to solve this problem in polynomial time on claw-free graphs, when $k$ is not part of the input but an arbitrarily fixed integer. <\/dc:description><dc:subject>\n        Induced path<\/dc:subject><dc:subject>\n         Claw-free graph<\/dc:subject><dc:subject>\n         Polynomial-time algorithm.<\/dc:subject><dc:publisher>\n        Dagstuhl<\/dc:publisher><dc:source>\n        Marion, Jean-Yves & Thomas, Schwentick (Eds.). (2010). 27th International symposium on theoretical aspects of computer science, STACS 2010, 4-6 March 2010 ; proceedings. Saarbr\u00fccken, Germany: Dagstuhl, pp. 371-382 , Leibniz international proceedings in informatics(5)<\/dc:source><dc:contributor>\n        Marion, Jean-Yves<\/dc:contributor><dc:contributor>\n        Thomas, Schwentick<\/dc:contributor><dc:date>\n        2010-01-01<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:7432<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/7432\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.4230\/LIPIcs.STACS.2010.2469<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/7432\/1\/7432.pdf<\/dc:identifier><dc:rights>\n        This article is made available under a\\ud\nCreative Commons Attribution-No Derivative Works 3.0 Unported License. http:\/\/creativecommons.org\/licenses\/by-nd\/3.0\/<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":["Induced path","Claw-free graph","Polynomial-time algorithm."],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n07 October 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nFiala, J. and Kaminski, M. and Lidicky, B. and Paulusma, D. (2010) \u2019The k-in-a-path problem for claw-free\ngraphs.\u2019, in 27th International symposium on theoretical aspects of computer science, STACS 2010, 4-6 March\n2010 ; proceedings. Saarbrcken, Germany: Dagstuhl, 371-382 . Leibniz international proceedings in\ninformatics. (5).\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.4230\/LIPIcs.STACS.2010.2469\nPublisher\u2019s copyright statement:\nThis article is made available under a Creative Commons Attribution-No Derivative Works 3.0 Unported License.\nhttp:\/\/creativecommons.org\/licenses\/by-nd\/3.0\/\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nSymposium on Theoretical Aspects of Computer Science 2010 (Nancy, France), pp. 371-382\nwww.stacs-conf.org\nTHE k-IN-A-PATH PROBLEM FOR CLAW-FREE GRAPHS\nJIR\u02c7I\u00b4 FIALA 1 AND MARCIN KAMIN\u00b4SKI 2 AND BERNARD LIDICKY\u00b4 1 AND DANIE\u00a8L PAULUSMA 3\n1 Charles University, Faculty of Mathematics and Physics,\nDIMATIA and Institute for Theoretical Computer Science (ITI)\nMalostranske\u00b4 na\u00b4m. 2\/25, 118 00, Prague, Czech Republic\nE-mail address: fiala@kam.mff.cuni.cz\nE-mail address: bernard@kam.mff.cuni.cz\n2 Computer Science Department, Universite\u00b4 Libre de Bruxelles,\nBoulevard du Triomphe CP212, B-1050 Brussels, Belgium\nE-mail address: marcin.kaminski@ulb.ac.be\n3 Department of Computer Science, University of Durham,\nScience Laboratories, South Road,\nDurham DH1 3LE, England\nE-mail address: daniel.paulusma@durham.ac.uk\nAbstract. Testing whether there is an induced path in a graph spanning k given vertices\nis already NP-complete in general graphs when k = 3. We show how to solve this problem\nin polynomial time on claw-free graphs, when k is not part of the input but an arbitrarily\nfixed integer.\n1. Introduction\nMany interesting graph classes are closed under vertex deletion. Every such class can\nbe characterized by a set of forbidden induced subgraphs. One of the best-known examples\nis the class of perfect graphs. A little over 40 years after Berge\u2019s conjecture, Chudnovsky et\nal. [18] proved that a graph is perfect if and only if it contains neither an odd hole (induced\ncycle of odd length) nor an odd antihole (complement of an odd hole). This motivates the\nresearch of detecting induced subgraphs such as paths and cycles, which is the topic of this\npaper. To be more precise, we specify some vertices of a graph called the terminals and\nstudy the computational complexity of deciding if a graph has an induced subgraph of a\ncertain type containing all the terminals. In particular, we focus on the following problem.\n1998 ACM Subject Classification: G.2.2 Graph algorithms, F.2.2 Computations on discrete structures.\nKey words and phrases: induced path, claw-free graph, polynomial-time algorithm.\nResearch supported by the Ministry of Education of the Czech Republic as projects 1M0021620808\nand GACR 201\/09\/0197, by the Royal Society Joint Project Grant JP090172 and by EPSRC as\nEP\/D053633\/1.\nc\u00a9 J. Fiala, M. Kamin\u00b4ski, B. Lidicky\u00b4, and D. Paulusma\nCC\u00a9 Creative Commons Attribution-NoDerivs License\n27th Symposium on Theoretical Aspects of Computer Science, Nancy, 2010 \nEditors: Jean-Yves Marion, Thomas Schwentick \nLeibniz International Proceedings in Informatics (LIPIcs), Schloss Dagstuhl - Leibniz-Zentrum f\u00fcr Informatik, Germany \nDigital Object Identifier: 10.4230\/LIPIcs.STACS.2010.2469\n372 J. FIALA, M. KAMIN\u00b4SKI, B. LIDICKY\u00b4, AND D. PAULUSMA\nk-in-a-Path\nInstance: a graph G with k terminals.\nQuestion: does there exist an induced path of G containing the k terminals?\nNote that in the problem above, k is a fixed integer. Clearly, the problem is polynomially\nsolvable for k = 2. Haas and Hoffmann [11] consider the case k = 3. After pointing out\nthat this case is NP-complete as a consequence of a result by Fellows [9], they prove W[1]-\ncompleteness (where they take as parameter the length of an induced path that is a solution\nfor 3-in-a-Path). Derhy and Picouleau [6] proved that the case k = 3 is NP-complete even\nfor graphs with maximum degree at most three.\nA natural question is what will happen if we relax the condition of \u201cbeing contained\nin an induced path\u201d to \u201cbeing contained in an induced tree\u201d. This leads to the following\nproblem.\nk-in-a-Tree\nInstance: a graph G with k terminals.\nQuestion: does there exist an induced tree of G containing the k terminals?\nAs we will see, also this problem has received a lot of attention in the last two years. It\nis NP-complete if k is part of the input [6]. However, Chudnovsky and Seymour [4] have\nrecently given a deep and complicated polynomial-time algorithm for the case k = 3.\nTheorem 1.1 ([4]). The 3-in-a-Tree problem is solvable in polynomial time.\nThe computational complexity of k-in-a-Tree for k = 4 is still open. So far, only\npartial results are known, such as a polynomial-time algorithm for k = 4 when the input\nis triangle-free by Derhy, Picouleau and Trotignon [7]. This result and Theorem 1.1 were\nextended by Trotignon and Wei [20] who showed that k-in-a-Tree is polynomially solvable\nfor graphs of girth at least k. The authors of [7] also show that it is NP-complete to decide\nif a graph G contains an induced tree T covering four specified vertices such that T has at\nmost one vertex of degree at least three.\nIn general, k-in-a-Path and k-in-a-Tree are only equivalent for k \u2264 2. However, in\nthis paper, we study claw-free graphs (graphs with no induced 4-vertex star). Claw-free\ngraphs are a rich and well-studied class containing, e.g., the class of (quasi)-line graphs\nand the class of complements of triangle-free graphs; see [8] for a survey. Notice that any\ninduced tree in a claw-free graph is in fact an induced path.\nObservation 1.2. The k-in-a-Path and k-in-a-Tree problem are equivalent for the class\nof claw-free graphs.\nMotivation. The polynomial-time algorithm for 3-in-a-Tree [4] has already proven to be\na powerful tool for several problems. For instance, it is used as a subroutine in polynomial\ntime algorithms for detecting induced thetas and pyramids [4] and several other induced\nsubgraphs [16]. The authors of [12] use it to solve the Parity Path problem in polynomial\ntime for claw-free graphs. (This problem is to test if a graph contains both an odd and even\nlength induced paths between two specified vertices. It is NP-complete in general as shown\nby Bienstock [1].)\nLe\u00b4ve\u02c6que et al. [16] use the algorithm of [4] to solve the 2-Induced Cycle problem\nin polynomial time for graphs not containing an induced path or subdivided claw on some\nfixed number of vertices. The k-Induced Cycle problem is to test if a graph contains an\ninduced cycle spanning k terminals. In general it is NP-complete already for k = 2 [1]. For\nfixed k, an instance of this problem can be reduced to a polynomial number of instances\nTHE k-IN-A-PATH PROBLEM FOR CLAW-FREE GRAPHS 373\nof the k-Induced Disjoint Paths problem, which we define below. Paths P1, . . . , Pk in\na graph G are said to be mutually induced if for any 1 \u2264 i < j \u2264 k, Pi and Pj have\nneither common vertices (i.e. V (Pi)\u2229V (Pj) = \u2205) nor adjacent vertices (i.e. uv \/\u2208 E for any\nu \u2208 V (Pi), v \u2208 V (Pj)).\nk-Induced Disjoint Paths\nInstance: a graph G with k pairs of terminals (si, ti) for i = 1, . . . , k.\nQuestion: does G contain k mutually induced paths Pi such that Pi connects si and ti for\ni = 1, . . . , k?\nThis problem is NP-complete for k = 2 [1]. Kawarabayashi and Kobayashi [14] showed\nthat, for any fixed k, the k-Induced Disjoint Paths problem is solvable in linear time on\nplanar graphs and that consequently k-Induced Disjoint Cycle is solvable in polynomial\ntime on this graph class for any fixed k. In [15], Kawarabayashi and Kobayashi improve the\nlatter result by presenting a linear time algorithm for this problem, and even extend the\nresults for both these problems to graphs of bounded genus. As we shall see, we can also\nsolve k-Induced Disjoint Paths and k-Induced Cycle in polynomial time in claw-free\ngraphs. The version of the problem in which any two paths are vertex-disjoint but may have\nadjacent vertices is called the k-Disjoint Paths problem. For this problem Robertson and\nSeymour [17] proved the following result.\nTheorem 1.3 ([17]). For fixed k, the k-Disjoint Paths problem is solvable in polynomial\ntime.\nOur Results and Paper Organization. In Section 2 we define some basic terminology.\nSection 3 contains our main result: k-in-a-Path is solvable in polynomial time in claw-free\ngraphs for any fixed integer k. This, in fact, follows from a stronger theorem proved in\nSection 4; the problem is solvable in polynomial time even if the terminals are to appear\non the path in a fixed order. A consequence of our result is that the k-Induced Disjoint\nPaths and k-Induced Cycle problems are polynomially solvable in claw-free graphs for\nany fixed integer k. In Section 4 we present our polynomial-time algorithm that solves\nthe ordered version of k-in-a-Path. The algorithm first performs \u201ccleaning of the graph\u201d.\nThis is an operation introduced in [12]. After cleaning the graph is free of odd antiholes\nof length at least seven. Next we treat odd holes of length five that are contained in the\nneighborhood of a vertex. The resulting graph is quasi-line. Finally, we solve the problem\nusing a recent characterization of quasi-line graphs by Chudnovsky and Seymour [3] and\nrelated algorithmic results of King and Reed [13]. In Section 5 we mention relevant open\nproblems.\n2. Preliminaries\nAll graphs in this paper are undirected, finite, and neither have loops nor multiple edges.\nLet G be a graph. We refer to the vertex set and edge set of G by V = V (G) and E = E(G),\nrespectively. The neighborhood of a vertex u in G is denoted by NG(u) = {v \u2208 V | uv \u2208 E}.\nThe subgraph of G induced by U \u2286 V is denoted G[U ]. Analogously, the neighborhood of\na set U \u2286 V is N(U) :=\n\u22c3\nu\u2208U N(u) \\ U . We say that two vertex-disjoint subsets of V are\nadjacent if some of their vertices are adjacent. The distance d(u, v) between two vertices u\nand v in G is the number of edges on a shortest path between them. The edge contraction\n374 J. FIALA, M. KAMIN\u00b4SKI, B. LIDICKY\u00b4, AND D. PAULUSMA\nof an edge e = uv removes its two end vertices u, v and replaces it by a new vertex adjacent\nto all vertices in N(u) \u222aN(v) (without introducing loops or multiple edges).\nWe denote the path and cycle on n vertices by Pn and Cn, respectively. Let P =\nv1v2 . . . vp be a path with a fixed orientation. The successor vi+1 of vi is denoted by v\n+\ni and\nits predecessor vi\u22121 by v\n\u2212\ni . The segment vivi+1 . . . vj is denoted by vi\n\u2212\u2192\nP vj. The converse\nsegment vjvj\u22121 . . . vi is denoted by vj\n\u2190\u2212\nP vi.\nA hole is an induced cycle of length at least 4 and an antihole is the complement of a\nhole. We say that a hole is odd if it has an odd number of edges. An antihole is called odd\nif it is the complement is an odd hole.\nA claw is the graph ({x, a, b, c}, {xa, xb, xc}), where vertex x is called the center of the\nclaw. A graph is claw-free if it does not contain a claw as an induced subgraph. A clique is\na subgraph isomorphic to a complete graph. A diamond is a graph obtain from a clique on\nfour vertices after removing one edge. A vertex u in a graph G is simplicial if G[N(u)] is a\nclique.\nLet s and t be two specified vertices in a graph G = (V,E). A vertex v \u2208 V is called\nirrelevant for vertices s and t if v does not lie on any induced path from s to t. A graph G\nis clean if none of its vertices is irrelevant. We say that we clean G for s and t by repeatedly\ndeleting irrelevant vertices for s and t as long as possible. In general, determining if a vertex\nis irrelevant is NP-complete [1]. However, for claw-free graphs, the authors of [12] could\nshow the following (where they used Observation 1.2 and Theorem 2.7 for obtaining the\npolynomial time bound).\nLemma 2.1 ([12]). Let s, t be two vertices of a claw-free graph G. Then G can be cleaned\nfor s and t in polynomial time. Moreover, the resulting graph does not contain an odd\nantihole of length at least seven.\nThe line graph of a graph G with edges e1, . . . , ep is the graph L = L(G) with vertices\nu1, . . . , up such that there is an edge between any two vertices ui and uj if and only if ei and\nej share an end vertex in H. We note that mutually induced paths in a line graph L(G) are\nin one-to-one correspondence with vertex-disjoint paths in G. Combining this observation\nwith Theorem 1.3 leads to the following result.\nCorollary 2.2. For fixed k, the k-Induced Disjoint Paths problem can be solved in\npolynomial time in line graphs.\nA graph G = (V,E) is called a quasi-line graph if for every vertex u \u2208 V there exist\ntwo vertex-disjoint cliques A and B in G such that N(u) = V (A) \u222a V (B) (where V (A)\nand V (B) might be adjacent). Clearly, every line graph is quasi-line and every quasi-line\ngraph is claw-free. The following observation is useful and easy to see by looking at the\ncomplements of neighborhood in a graph.\nObservation 2.3. A claw-free graph G is a quasi-line graph if and only if G does not\ncontain a vertex with an odd antihole in its neighborhood.\nA clique in a graph G is called nontrivial if it contains at least two vertices. A nontrivial\nclique A is called homogeneous if every vertex in V (G)\\V (A) is either adjacent to all vertices\nof A or to none of them. Notice that it is possible to check in polynomial time if an edge of\nthe graph is a homogeneous clique. This justifies the following observation.\nObservation 2.4. The problem of detecting a homogeneous clique in a graph is solvable\nin polynomial time.\nTHE k-IN-A-PATH PROBLEM FOR CLAW-FREE GRAPHS 375\nb3 b2\na1\na3 S0\nb\n\u2032\n3 b\n\u2032\n2\na\n\u2032\n1\na\n\u2032\n3\nS\n\u2032\n3\nS\n\u2032\n1\nS\n\u2032\n2S\n\u2032\n3\nS3\nS1\nS2S3\nFigure 1: Composition of three linear interval strips (only part of the graph is displayed).\nTwo disjoint cliques A and B form a homogeneous pair in G if the following two\nconditions hold. First, at least one of A,B contains more than one vertex. Second, every\nvertex v \u2208 V (G) \\ (V (A)\u222a V (B)) is either adjacent to all vertices of A or to none vertex of\nA as well as either adjacent to all of B or to none of B. The following result by King and\nReed [13, Section 3] will be useful.\nLemma 2.5 ([13]). The problem of detecting a homogeneous pair of cliques in a graph is\nsolvable in polynomial time.\nLet V be a finite set of points of a real line, and I be a collection of intervals. Two\npoints are adjacent if and only if they belong to a common interval I \u2208 I. The resulting\ngraph is a linear interval graph. Analogously, if we consider a set of points of a circle and\nset of intervals (angles) on the circle we get a circular interval graph. Graphs in both classes\nare claw-free, in fact linear interval graphs coincide with proper interval graphs (intersection\ngraph of a set of intervals on a line, where no interval contains another from the set) and\ncircular interval graphs coincide with proper circular arc graphs (defined analogously). We\nneed the following result of Deng, Hell, and Huang [5].\nTheorem 2.6 ([5]). Circular interval graphs and linear interval graphs can be recognized in\nlinear time. Furthermore, a corresponding representation of such graphs can be constructed\nin linear time as well.\nA linear interval strip (S, a, b) is a linear interval graph S where a and b are the leftmost\nand the rightmost points (vertices) of its representation. Observe that in such a graph the\nvertices a and b are simplicial. Let S0 be a graph with vertices a1, b1, . . . , an, bn that is\nisomorphic to an arbitrary disjoint union of complete graphs. Let (S\u20321, a\n\u2032\n1, b\n\u2032\n1), . . . , (S\n\u2032\nn, a\n\u2032\nn, b\n\u2032\nn)\nbe a collection of linear interval strips. The composition Sn is defined inductively where Si\nis formed from the disjoint union of Si\u22121 and S\n\u2032\ni, where:\n\u2022 all neighbors of ai are connected to all neighbors of a\n\u2032\ni;\n\u2022 all neighbors of bi are connected to all neighbors of b\n\u2032\ni;\n\u2022 vertices ai, a\n\u2032\ni, bi, b\n\u2032\ni are removed.\nSee Figure 1 for an example. We are now ready to state the structure of quasi-line graphs\nas characterized by Chudnovsky and Seymour [3].\nTheorem 2.7 ([3]). A quasi-line graph G with no homogeneous pair of cliques is either a\ncircular interval graph or a composition of linear interval strips.\nFinally, we need another algorithmic result of King and Reed [13]. They observe that\nthe composition of the final strip in a composition of linear interval graphs is a so-called\n376 J. FIALA, M. KAMIN\u00b4SKI, B. LIDICKY\u00b4, AND D. PAULUSMA\nnontrivial interval 2-join and that every nontrivial interval 2-join contains a so-called canon-\nical interval 2-join. In Lemma 13 of this paper they show how to find in polynomial time a\ncanonical interval 2-join in a quasi-line graph with no homogeneous pair of cliques and no\nsimplicial vertex or else to conclude that none exists. Recursively applying this result leads\nto the following lemma.\nLemma 2.8 ([13]). Let G be a quasi-line graph with no homogeneous pairs of cliques and\nno simplicial vertex that is a composition of linear interval strips. Then the collection of\nlinear interval strips that define G can be found in polynomial time.\n3. Our Main Result\nHere is our main result.\nTheorem 3.1. For any fixed k, the k-in-a-Path problem is solvable in polynomial time in\nclaw-free graphs.\nIn order to prove Theorem 3.1 we define the following problem.\nOrdered-k-in-a-Path\nInstance: a graph G with k terminals ordered as t1, . . . , tk.\nQuestion: does there exist an induced path of G starting in t1 then passing through\nt2, . . . , tk\u22121 and ending in tk?\nWe can resolve the original k-in-a-Path problem by k! rounds of the more specific version\ndefined above, where in each round we order the terminals by a different permutation.\nHence, since we assume that k is fixed, it suffices to prove Theorem 3.2 in order to obtain\nTheorem 3.1.\nTheorem 3.2. For any fixed k, the Ordered-k-in-a-Paths problem is solvable in poly-\nnomial time in claw-free graphs.\nWe prove Theorem 3.2 in Section 4 and finish this section with the following consequence\nof it.\nCorollary 3.3. For any fixed k, the k-Disjoint Induced Paths and k-Induced Cycle\nproblem are solvable in polynomial time in claw-free graphs.\nProof. Let G be a claw-free graph that together with terminals t1, . . . , tk is an instance of\nk-Induced Cycle. We fix an order of the terminals, say, the order is t1, . . . , tk. We fix\nneighbors ai and bi\u22121 of each terminal ti. This way we obtain an instance of k-Induced\nDisjoint Paths with pairs of terminals (ai, bi) where b0 = bk. Clearly, the total number\nof instances we have created is polynomial. Hence, we can solve k-Induced Cycle in\npolynomial time if we can solve k-Induced Disjoint Paths in polynomial time.\nLet G be a claw-free graph that together with k pairs of terminals (ai, bi) for i =\n1, . . . , k is an instance of the k-Induced Disjoint Paths problem. First we add an edge\nbetween each pair of non-adjacent neighbors of every terminal in T = {a1, . . . , ak, b1, . . . , bk}.\nWe denote the resulting graphs obtained after performing this operation on a terminal by\nG1, . . . , G2k, and define G0 := G. We claim that G\n\u2032 = G2k is claw-free and prove this by\ninduction.\nThe claim is true for G0. Suppose the claim is true for Gj for some 0 \u2264 j \u2264 2k \u2212 1.\nConsider Gj+1 and suppose, for contradiction, that Gj+1 contains an induced subgraph\nTHE k-IN-A-PATH PROBLEM FOR CLAW-FREE GRAPHS 377\nisomorphic to a claw. Let K := {x, a, b, c} be a set of vertices of Gj+1 inducing a claw with\ncenter x. Let s \u2208 T be the vertex of Gj that becomes simplicial in Gj+1. Then x 6= s. Since\nGj is claw-free, we may without loss of generality assume that at least two vertices of K must\nbe in NGj+1(s)\u222a{s}. Since NGj+1(s)\u222a{s} is a clique of Gj+1 and {a, b, c} is an independent\nset of Gj+1, we may without loss of generality assume that K \u2229 (NGj+1(s) \u222a {s}) = {x, a}\nand {b, c} \u2286 V (Gj+1) \\ (NGj+1(s) \u222a {s}). Then {x, b, c, s} induces a claw in Gj with center\nx, a contradiction. Hence, G\u2032 is indeed claw-free.\nWe note that G with terminals (a1, b1), . . . , (ak, bk) forms a Yes-instance of k-Induced\nDisjoint Paths if and only if G\u2032 with the same terminal pairs is a Yes-instance of this\nproblem. In the next step we identify terminal bi with ai+1, i.e., for i = 1, . . . , k \u2212 1 we\nremove bi, ai+1 and replace them by a new vertex ti+1 adjacent to all neighbors of ai+1 and\nto all neighbors of bi. We call the resulting graph G\n\u2032\u2032 and observe that G is claw-free. We\ndefine t1 := a1 and tk+1 := bk and claim that G\n\u2032 with terminal pairs (a1, b1), . . . , (ak, bk)\nforms a Yes-instance of the k-Induced Paths problem if and only if G\u2032\u2032 with terminals\nt1, . . . , tk+1 forms a Yes-instance of the Ordered-(k + 1)-in-a-Path problem.\nIn order to see this, suppose G\u2032 contains k mutually induced paths Pi such that Pi\nconnects ai to bi for 1 \u2264 i \u2264 k. Then\nP = t1\n\u2212\u2192\nP1b\n\u2212\n1 t2a\n+\n2\n\u2212\u2192\nP2b\n\u2212\n2 . . . tka\n+\nk\n\u2212\u2192\nPktk\nis an induced path passing through the terminals ti in prescribed order. Now suppose\nG\u2032\u2032 contains an induced path P passing through terminals in order t1, . . . , tk+1. For i =\n1, . . . , k + 1 we define paths Pi = ait\n+\ni\n\u2212\u2192\nP t\u2212i+1bi, which are mutually induced. We now apply\nTheorem 3.2. This completes the proof.\n4. The Proof of Theorem 3.2\nWe present a polynomial-time algorithm that solves the Ordered-k-in-a-Path prob-\nlem on a claw-free graph G with terminals in order t1, . . . , tk for any fixed integer k. We\ncall an induced path P from t1 to tk that contains the other terminals in order t2, . . . , tk\u22121\na solution of this problem. Furthermore, an operation in this algorithm on input graph G\nwith terminals t1, . . . , tk preserves the solution if the following holds: the resulting graph G\n\u2032\nwith resulting terminals t\u20321, . . . , t\n\u2032\nk\u2032 for some k\n\u2032 \u2264 k is a Yes-instance of the Ordered-k\u2032-in-\na-Path problem if and only if G is a Yes-instance of the Ordered-k-in-a-Path problem.\nWe call G simple if the following three conditions hold:\n(i) t1, tk are of degree one in G and all other terminals ti (1 < i < k) are of degree two\nin G, and the two neighbors of such ti are not adjacent;\n(ii) the distance between any pair ti, tj is at least four;\n(iii) G is connected.\nThe Algorithm and Proof of Theorem 3.2\nLet G be an input graph with terminals t1, . . . , tk.\nIf k = 2, we compute a shortest path from t1 to t2. If k = 3, we use Theorem 1.1 together\nwith Observation 1.2. Suppose k \u2265 4.\nStep 1. Reduce to a set of simple graphs.\nWe apply Lemma 4.1 and obtain in polynomial time a set G that consists of a polynomial\n378 J. FIALA, M. KAMIN\u00b4SKI, B. LIDICKY\u00b4, AND D. PAULUSMA\nnumber of simple graphs of size at most |V (G)| such that there is a solution for G if and\nonly if there is a solution for one of the graphs in G. We consider each graph in G. For\nconvenience we denote such a graph by G as well.\nStep 2. Reduce to a quasi-line graph.\nWe first clean G for t1 and tk. If during cleaning we remove a terminal, then we output No.\nOtherwise, clearly, we preserve the solution. By Lemma 2.1, this can be done in polynomial\ntime and ensures that there are no odd antiholes of length at least seven left. Also, G stays\nsimple. Then we apply Lemma 4.2, which removes vertices v whose neighborhood contain\nan odd hole of length five, as long as we can. Clearly, we can do this in polynomial time.\nNote that G stays connected since we do not remove cut-vertices due to the claw-freeness.\nBy condition (i), we do not remove a terminal either. Afterwards, we clean G again for t1\nand tk. If we remove a terminal, we output No. Otherwise, as a result of our operations,\nG becomes a simple quasi-line graph due to Observation 2.3.\nStep 3. Reduce to a simple quasi-line graph with no homogeneous clique\nWe first exhaustively search for homogeneous cliques by running the polynomial algorithm\nmentioned in Observation 2.4 and apply Lemma 4.3 each time we find such a clique. Clearly,\nwe can perform the latter in polynomial time as well. After every reduction of such a clique\nto a single vertex, G stays simple and quasi-line, and at some moment does not contain any\nhomogeneous clique anymore, while we preserve the solution.\nStep 4. Reduce to a circular interval graph or to a composition of interval\nstrips.\nLet t\u20321, t\n\u2032\nk be the (unique) neighbor of t1 and t\n\u2032\nk, respectively. As long as G contains homo-\ngeneous pairs of cliques (A,B) so that A neither B is equal to {t1, t\n\u2032\n1} or {tk, t\n\u2032\nk}, we do as\nfollows. We first detect such a pair in polynomial time using Lemma 2.5 and reduce them\nto a pair of single vertices by applying Lemma 4.4. Also performing Lemma 4.4 clearly\ntakes only polynomial time. After every reduction, G stays simple and quasi-line, and we\npreserve the solution. At some moment, the only homogeneous pairs of cliques that are\npossibly left in G are of the form ({t1, t\n\u2032\n1}, B) and ({tk, t\n\u2032\nk}, B). As G does not contain a\nhomogeneous clique (see Step 3), the cliques in such pairs must have adjacent vertex sets.\nHence, there can be at most two of such pairs. We perform Lemma 4.4 and afterwards\nmake the graph simple again. Although this might result in a number of new instances,\ntheir total number is still polynomial because we perform this operation at most twice.\nHence, we may without loss of generality assume that G stays simple. By Theorem 2.7, G\nis either a circular interval graph or a composition of linear interval strips; we deal with\ntheses two cases separately after recognizing in polynomial time in which case we are by\nusing Theorem 2.6.\nStep 5a. Solve the problem for a circular interval graph.\nLet G be a circular interval graph. Observe that the order of vertices in an induced path\nmust respect the natural order of points on a circle. Hence, deleting all points that lie on\nthe circle between tk and t1 preserves the solution. So, we may even assume that G is a\nlinear interval graph. We solve the problem in these graphs in Theorem 4.5.\nStep 5b. Solve the problem for a composition of linear interval strips.\nLet G be a composition of linear interval strips. Because G is assumed to be clean for\nt1, . . . , tk, G contains no simplicial vertex. Then we can find these strips in polynomial\ntime using Lemma 2.8 and use this information in Lemma 4.6. There we create a line\nTHE k-IN-A-PATH PROBLEM FOR CLAW-FREE GRAPHS 379\ngraph G\u2032 with |V (G\u2032)| \u2264 |V (G)|, while preserving the solution. Moreover, this can be done\nin polynomial time by the same theorem. Then we use Corollary 2.2 to prove that the\nproblem is polynomially solvable in line graphs in Theorem 4.7.\nNow it remains to state and prove Lemmas 4.1\u20134.6 and Theorems 4.5\u2013 4.7.\nLemma 4.1. Let G be a graph with terminals ordered t1, . . . , tk. Then there exists a set G\nof nO(k) simple graphs, each of size at most |V (G)|, such that G has a solution if and only if\nthere exists a graph in G that has a solution. Moreover, G can be constructed in polynomial\ntime.\nProof. We branch as follows. First we guess the first six vertices after t1 in a possible\nsolution. Then we guess the last six vertices before tn. Finally, for 2 \u2264 i \u2264 n \u2212 1, we\nguess the last six vertices preceding ti and the first six vertices following ti. We check if\nthe subgraph induced by the terminals and all guessed vertices has maximum degree 2. If\nnot we discard this guess. Otherwise, for every terminal and for every guessed vertex that\nis not an end vertex of a guessed subpath, we remove all its neighbors that are not guessed\nvertices. This way we obtain a number of graphs which we further process one by one.\nLet G\u2032 be such a created subgraph. If G\u2032 does not contain all terminals, we discard G\u2032.\nIf G\u2032 is disconnected then we discard G\u2032 if two terminals are in different components, or else\nwe continue with the component of G\u2032 that contains all the terminals. Suppose there is a\nguessed subpath in G\u2032 containing more than one terminal. If the order is not ti, ti+1, . . . , tj\nfor some i < j, we discard G\u2032. Otherwise, if necessary, we place ti and tj on this subpath\nsuch that they are at distance at least four of each other and also are of distance at least\nfour of each end vertex of the subpath. Because the guessed subpaths are sufficiently long,\nsuch a placement is possible. We then remove ti+1, . . . , tj\u22121 from the list of terminals. After\nprocessing all created graphs as above, we obtain the desired set G. Since k is fixed, G can\nbe constructed in polynomial time.\nLemma 4.2. Let G be a simple claw-free graph. Removing a vertex u \u2208 V (G), the neigh-\nborhood of which contains an induced odd hole of length five, preserves the solution.\nProof. Because G is simple, u is not a terminal. We first show the following claim.\nClaim 1. Let G[{v,w, x, y}] be a diamond in which vw is a non-edge. If there is a solution\nP that contains v, x,w, then there is another solution that contains v, y, w (and that does\nnot contain x).\nIn order to see this take the original solution P and notice that by claw-freeness any neighbor\nof y on P must be in the (closed) neighborhood of v or w. This way the solution can be\nrerouted via y, without using x. This proves Claim 1.\nNow suppose that u is a vertex which has an odd hole C of length five in its neighborhood.\nObviously, G is a Yes-instance if G\u2212u is a Yes-instance. To prove the reverse implication,\nsuppose G is a Yes-instance. Let P be a solution. If u does not belong to P then we\nare done. Hence, we suppose that u belongs to P and consider three cases depending on\n|V (C) \u2229 V (P )|.\nCase 1. |V (C)\u2229V (P )| \u2265 2. Then |V (C)\u2229V (P )| = 2, as any vertex on P will have at most\ntwo neighbors. We are done by Claim 1.\n380 J. FIALA, M. KAMIN\u00b4SKI, B. LIDICKY\u00b4, AND D. PAULUSMA\nCase 2. |V (C) \u2229 V (P )| = 1. Let w \u2208 V (C) belong to P and let the other neighbor of u\nthat belongs to P be x. We note that x must be adjacent to at least one of the neighbors\nof w in C. Then we can apply Claim 1 again.\nCase 3. |V (C) \u2229 V (P )| = 0. Let the two neighbors of u on P be x and y. To avoid a claw\nat u, every vertex of C must be adjacent to x or y. If there is a vertex in C adjacent to\nboth, we apply Claim 1. Suppose there is no such vertex and that the vertices of the C\nare partitioned in two sets X (vertices of C only adjacent to x) and Y (vertices of C only\nadjacent to y). We assume without loss of generality that |X| = 3, and hence contains a pair\nof independent vertices which together with u and y form a claw. This is a contradiction.\nLemma 4.3. Let G be a simple quasi-line graph with a homogeneous clique A. Then\ncontracting A to a single vertex preserves the solution and the resulting graph is a simple\nquasi-line graph containing the same terminals as G.\nProof. Each vertex in A lies on a triangle, unless G is isomorphic to P2, which is not possible.\nHence, by condition (i), A does not contain a terminal. We remove all vertices of A except\none. The resulting graph will be a simple quasi-line graph containing the same terminals,\nand we will preserve the solution.\nLemma 4.4. Let G be a simple quasi-line graph with terminals ordered t1, . . . , tk that has\nno homogeneous clique. Contracting the cliques A and B in a homogeneous pair to single\nvertices preserves the solution. The resulting graph is quasi-line; it is simple unless A or B\nconsists of two vertices u, u\u2032 with u \u2208 {t1, tk} and d(u\n\u2032, ti) \u2264 3 for some ti 6= u.\nProof. Because G does not contain a homogeneous clique, V (A) and V (B) must be adjacent.\nThen, due to condition (ii), there can be at most one terminal in V (A) \u222a V (B). In all the\ncases discussed below we will actually not contract edges but only remove vertices from A\nand B. Hence, the resulting graph will always be a quasi-line graph.\nSuppose A contains t1 or tk, say t1. Suppose |V (A)| = 1, so A only contains t1. Then\nthe neighbor of t1 is in B and |V (B)| \u2265 2. We delete all vertices from B except this neighbor,\nbecause they will not be used in any solution. Clearly, the resulting graph is simple and\nthe solution is preserved. Suppose |V (A)| \u2265 2. Because t1 is of degree one, A consists of\ntwo vertices, namely t1 and its neighbor t\n\u2032\n1. Note that t\n\u2032\n1 does not have a neighbor outside\nA and B, as t1 is of degree one. As V (A) and V (B) are adjacent, t\n\u2032\n1 has a neighbor u in\nB. We delete t1 and replace it by t\n\u2032\n1 in the set of terminals. We delete all vertices of B\nexcept u, because of the following reasons. If these vertices are not adjacent to t\u20321, they will\nnever appear in any solution. If they are adjacent to t\u20321, they will not appear in any solution\ntogether with u, and as such they can be replaced by u. Note that t\u20321 has degree one in the\nnew graph and that this graph is only simple if d(t\u20321, tj) \u2265 4 for all 2 \u2264 j \u2264 k. Clearly, the\nsolution is preserved.\nSuppose A contains a terminal ti for some 2 \u2264 i \u2264 k \u2212 1. Suppose A only contains ti.\nBecause V (A) and V (B) are adjacent, ti is adjacent to a vertex u in B. By condition (i),\nu is the only vertex in B adjacent to ti. We delete all vertices of B except u. Clearly, the\nresulting graph is simple and the solution is preserved. Suppose |V (A)| \u2265 2. By condition\n(ii), A contains only one other vertex t\u2032i and ti, t\n\u2032\ni do not have a common neighbor. Then\nA must be separated of the rest of the graph by B. Furthermore, the other neighbor of ti\nmust be in B. We delete t\u2032i and all vertices of B except the neighbor of ti. Clearly, the\nresulting graph is simple and the solution is preserved.\nSuppose A does not contain a terminal. By symmetry, we may assume that B does not\ncontain a terminal either. Let a\u2032b\u2032 \u2208 E(G) with a\u2032 \u2208 V (A) and b\u2032 \u2208 V (B). Let G\u2032 be the\nTHE k-IN-A-PATH PROBLEM FOR CLAW-FREE GRAPHS 381\ngraph obtained from G by removing all vertices of A except a\u2032 and B except a\u2032, b\u2032. Note\nthat we have kept all terminals and that the resulting graph is simple. Any solution P \u2032 for\nG\u2032 is a solution for G.\nNow assume we have a solution P for G. We claim that |P \u2229 A| \u2264 1 and |P \u2229B| \u2264 1.\nSuppose otherwise, say |P \u2229A| \u2265 2. Then |P \u2229A| = 2, as P is a path. Since t1 and tk are\nnot in A, we find that P contains a subpath xuvy with u, v \u2208 A. Since x is adjacent to\nu \u2208 A, but also non-adjacent to v \u2208 A, we find that x \u2208 B. Analogously we get that y \u2208 B.\nHowever, then xy \u2208 E(G). This is a contradiction.\nSuppose |P \u2229 A| = 0 and |P \u2229 B| = 0. Then P is a solution for G\u2032 as well. Suppose\n|P \u2229A| = 0 and |P \u2229B| = 1. Then we may without loss of generality assume that b\u2032 \u2208 V (P )\nand find that P is a solution for G\u2032 as well. The case |P \u2229A| = 1 and |P \u2229B| = 0 follows by\nsymmetry. Suppose |P \u2229A| = |P \u2229B| = 1, say P intersects A in a and B in b. If ab \u2208 E(G)\nthen we replace ab by a\u2032b\u2032 and obtain a solution for G\u2032. Suppose ab \/\u2208 E(G). Because a\nis not a terminal, a has neighbors x and y on P . If x, y \/\u2208 N(b) then {a\u2032, x, y, b\u2032} induces\na claw in G with center a\u2032. This is not possible. Hence, we may assume without loss of\ngenerality that y is adjacent to b. Since A or B contains at least two vertices, y has degree\nat least three. Then y is not a terminal. Thus we can skip y and exchange ayb in P with\na\u2032b\u2032 to get the desired induced path P \u2032.\nTheorem 4.5. The Ordered-k-in-a-Path problem can be solved in polynomial time in\nlinear interval graphs.\nProof. Let G be a linear interval graph. We may assume without loss of generality that\nthe terminals form an independent set. We use its linear representation that we obtain\nin polynomial time by Lemma 2.8. In what follows the notions of predecessors (left) and\nsuccessors (right) are considered for the linear ordering of the points on the line. Without\nloss of generality we may assume that t1 is the first point and that tk is the last and that no\ntwo points coincide. By our assumption, ti and ti+1 are nonadjacent. From the set of points\nbelonging to the closed interval [ti, ti+1] we remove all neighbors of ti except the rightmost\none and all neighbors of ti+1 except the leftmost. Then the shortest path between ti and\nti+1 is induced. In addition, these partial paths combined together provide a solution unless\nfor some terminal ti its leftmost predecessor is adjacent to its rightmost successor. Hence,\nno induced path may have ti among its inner vertices.\nLemma 4.6 (proof postponed to journal version). Let G be a composition of linear interval\nstrips. It is possible to create in polynomial time a line graph G\u2032 with |V (G\u2032)| \u2264 |V (G)|,\nwhile preserving the solution.\nTheorem 4.7. For fixed k, Ordered-k-in-a-Path is polynomially solvable in line graphs.\nProof. A version of Ordered-k-in-a-Path in which the path is not necessarily induced\ncan be easily translated into an instance of the k-Disjoint Paths problem and solved in\npolynomial time due to Theorem 1.3. Noting that mutually induced paths in a line graph\nL(G) are in one-to-one correspondence with vertex-disjoint paths in G enables us to solve\nthe Ordered-k-in-a-Path problem in polynomial time for line graphs.\n5. Conclusions and Further Research\nWe showed that, for any fixed k, the problems k-in-a-Path, k-Disjoint Induced\nPaths and k-Induced Cycle are polynomially solvable on claw-free graphs. If k is part of\n382 J. FIALA, M. KAMIN\u00b4SKI, B. LIDICKY\u00b4, AND D. PAULUSMA\nthe input these problems are known to be NP-complete. In the journal version we show this\nis true, even when the input is restricted to be claw-free. Perhaps the two most fascinating\nrelated open problems are to determine the complexity of deciding if a graph contains an\nodd hole (whereas the problem of finding an even hole is polynomially solvable [2]) and\nto determine the computational complexity of deciding if a graph contains two mutually\ninduced holes (whereas it is known that the case of two mutually induced odd holes is\nNP-complete [10]). For claw-free graphs these two problems are solved. Shrem et al. [19]\neven obtained a polynomial-time algorithm for detecting a shortest odd hole in a claw-free\ngraph. In the journal version we will address the second problem for claw-free graphs.\nReferences\n[1] D. Bienstock. On the complexity of testing for odd holes and induced odd paths. Discrete Mathematics\n90 (1991) 85\u201392, See also Corrigendum, Discrete Mathematics 102 (1992) 109.\n[2] M. Chudnovsky, K. Kawarabayashi and P.D. Seymour. Detecting even holes. Journal of Graph Theory\n48 (2005) 85\u2013111.\n[3] M. Chudnovsky and P.D. Seymour. The structure of claw-free graphs. In Surveys in combinatorics 2005,\nCambridge (2005) 153\u2013171.\n[4] M. Chudnovsky and P.D. Seymour. The three-in-a-tree problem. Combinatorica, to appear.\n[5] X. Deng, P. Hell, and J. Huang. Linear time representation algorithm for proper circular-arc graphs\nand proper interval graphs. SIAM Journal on Computing 25 (1996) 390\u2013403.\n[6] N. Derhy and C. Picouleau. Finding induced trees. Discrete Applied Mathematics 157 (2009) 3552\u20133557.\n[7] N. Dehry, C. Picouleau, and N. Trotignon. The four-in-a-tree problem in triangle-free graphs. Graphs\nand Combinatorics 25 (2009) 489\u2013502.\n[8] R. Faudree, E. Flandrin, and Z. Ryja\u00b4c\u02c7ek. Claw-free graphs\u2014a survey. Discrete Mathematics 164 (1997)\n87\u2013147.\n[9] M.R. Fellows. The RobertsonSeymour theorems: A survey of applications. In: Proceedings of AMS-\nIMS-SIAM Joint Summer Research Conf. Contemporary Mathematics, Providence, RI (1989) 1-18.\n[10] P. Golovach, M. Kamin\u00b4ski, D. Paulusma, and D. M. Thilikos. Induced packing of odd cycles in a planar\ngraph. In: Proceedings of ISAAC 2009, LNCS 5878 (2009) 514\u2013523.\n[11] R. Haas and M. Hoffmann. Chordless paths through three vertices. Theoretical Computer Science 351\n(2006) 360\u2013371.\n[12] P. van \u2019t Hof, M. Kamin\u00b4ski and D. Paulusma. Finding induced paths of given parity in claw-free graphs.\nIn: Proceedings of WG 2009, LNCS, to appear.\n[13] A. King and B. Reed. Bounding \u03c7 in terms of \u03c9 and \u03b4 for quasi-line graphs. Journal of Graph Theory\n59 (2008) 215-228.\n[14] Y. Kobayashi and K. Kawarabayashi. The induced disjoint paths problem. In: Proceedings of IPCO\n2008, LNCS 5035 (2008) 47\u201361.\n[15] Y. Kobayashi and K. Kawarabayashi. Algorithms for finding an induced cycle in planar graphs and\nbounded genus graphs. In: Proceedings of SODA 2009 (2009) 1146\u20131155.\n[16] B. Le\u00b4ve\u02c6que, D.Y. Lin, F. Maffray, and N. Trotignon. Detecting induced subgraphs. Discrete Applied\nMathematics 157 (2009) 3540\u20133551.\n[17] N. Robertson and P.D. Seymour. Graph minors. XIII. The disjoint paths problem. Journal of Combi-\nnatorial Theory, Series B 63 (1995) 65\u2013110.\n[18] M. Chudnovsky, N. Robertson, P.D. Seymour, and R. Thomas. The strong perfect graph theorem.\nAnnals of Mathematics 164 (2006) 51\u2013229.\n[19] S. Shrem, M. Stern and M.C. Golumbic. Smallest odd holes in claw-free graphs. In Proceedings of WG\n2009, LNCS 5911 (2009) 329\u2013340.\n[20] N. Trotignon and L. Wei. The k-in-a-tree problem for graphs of girth at least k, manuscript.\nThis work is licensed under the Creative Commons Attribution-NoDerivs License. To view a\ncopy of this license, visit http:\/\/creativecommons.org\/licenses\/by-nd\/3.0\/.\n"}