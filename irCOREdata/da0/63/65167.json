{"doi":"10.1016\/j.tcs.2010.04.022","coreId":"65167","oai":"oai:dro.dur.ac.uk.OAI2:6701","identifiers":["oai:dro.dur.ac.uk.OAI2:6701","10.1016\/j.tcs.2010.04.022"],"title":"A class of hierarchical graphs as topologies for interconnection networks.","authors":["Lai, P.-L.","Hsu, H.-C.","Tsai, C.-H.","Stewart, I. A."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-06-01","abstract":"We study some topological and algorithmic properties of a recently defined hierarchical interconnection network, the hierarchical crossed cube HCC(k,n), which draws upon constructions used within the well-known hypercube and also the crossed cube. In particular, we study: the construction of shortest paths between arbitrary vertices in HCC(k,n); the connectivity of HCC(k,n); and one-to-all broadcasts in parallel machines whose underlying topology is HCC(k,n) (with both one-port and multi-port store-and-forward models of communication). Moreover, (some of) our proofs are applicable not just to hierarchical crossed cubes but to hierarchical interconnection networks formed by replacing crossed cubes with other families of interconnection networks. As such, we provide a generic construction with accompanying generic results relating to some topological and algorithmic properties of a wide range of hierarchical interconnection networks","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65167.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6701\/1\/6701.pdf","pdfHashValue":"fc696792d220bdf8c1494ce9ed544dbd02a2f8d9","publisher":"Elsevier","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6701<\/identifier><datestamp>\n      2010-06-02T10:50:19Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        A class of hierarchical graphs as topologies for interconnection networks.<\/dc:title><dc:creator>\n        Lai, P.-L.<\/dc:creator><dc:creator>\n        Hsu, H.-C.<\/dc:creator><dc:creator>\n        Tsai, C.-H.<\/dc:creator><dc:creator>\n        Stewart, I. A.<\/dc:creator><dc:description>\n        We study some topological and algorithmic properties of a recently defined hierarchical interconnection network, the hierarchical crossed cube HCC(k,n), which draws upon constructions used within the well-known hypercube and also the crossed cube. In particular, we study: the construction of shortest paths between arbitrary vertices in HCC(k,n); the connectivity of HCC(k,n); and one-to-all broadcasts in parallel machines whose underlying topology is HCC(k,n) (with both one-port and multi-port store-and-forward models of communication). Moreover, (some of) our proofs are applicable not just to hierarchical crossed cubes but to hierarchical interconnection networks formed by replacing crossed cubes with other families of interconnection networks. As such, we provide a generic construction with accompanying generic results relating to some topological and algorithmic properties of a wide range of hierarchical interconnection networks.<\/dc:description><dc:subject>\n        Interconnection networks<\/dc:subject><dc:subject>\n         Hierarchical interconnection networks<\/dc:subject><dc:subject>\n         Crossed cubes.<\/dc:subject><dc:publisher>\n        Elsevier<\/dc:publisher><dc:source>\n        Theoretical computer science, 2010, Vol.411(31-33), pp.2912-2924 [Peer Reviewed Journal]<\/dc:source><dc:date>\n        2010-06-01<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6701<\/dc:identifier><dc:identifier>\n        issn:0304-3975<\/dc:identifier><dc:identifier>\n        doi:10.1016\/j.tcs.2010.04.022<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6701\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1016\/j.tcs.2010.04.022<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6701\/1\/6701.pdf<\/dc:identifier><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0304-3975","issn:0304-3975"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":["Interconnection networks","Hierarchical interconnection networks","Crossed cubes."],"subject":["Article","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n02 June 2010\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nLai, P.-L. and Hsu, H.-C. and Tsai, C.-H. and Stewart, I. A. (2010) \u2019A class of hierarchical graphs as\ntopologies for interconnection networks.\u2019, Theoretical computer science., 411 (31-33). pp. 2912-2924.\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1016\/j.tcs.2010.04.022\nPublisher\u2019s copyright statement:\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nA class of hierarchical graphs as topologies for\ninterconnection networks\u2217\nPao-Lien Lai1\u2020, Hong-Chun Hsu2,\nChang-Hsiung Tsai1, and Iain A. Stewart3\n1Department of Computer and Information Engineering,\nNational Dong Hwa University, Hualien, Taiwan 974, R.O.C.\n2Department of Medical Informatics, Tzu Chi University,\nHualien, Taiwan 970, R.O.C.\n3Department of Computer Science, Durham University,\nScience Labs, South Road, Durham DH1 3LE, U.K.\nAbstract\nWe study some topological and algorithmic properties of a recently\ndefined hierarchical interconnection network, the hierarchical crossed\ncube HCC(k, n), which draws upon constructions used within the\nwell-known hypercube and also the crossed cube. In particular, we\nstudy: the construction of shortest paths between arbitrary vertices\nin HCC(k, n); the connectivity of HCC(k, n); and one-to-all broad-\ncasts in parallel machines whose underlying topology is HCC(k, n)\n(with both one-port and multi-port store-and-forward models of com-\nmunication). Moreover, some of our proofs are applicable not just to\nhierarchical crossed cubes but to hierarchical interconnection networks\n\u2217This work was supported in part by the National Science Council of the Republic of\nChina under Contract NSC 97-2221-E-259-020.\n\u2020Correspondence to: Assistant Professor Pao-Lien Lai, Fax: 886-3-8634053 e-mail:\nbaolein@mail.ndhu.edu.tw.\n1\nformed by replacing crossed cubes with other families of interconnec-\ntion networks. As such, we provide a generic construction with accom-\npanying generic results relating to some topological and algorithmic\nproperties of a wide range of hierarchical interconnection networks.\nkeywords: hierarchical interconnection networks; hierarchical crossed\ncubes; hypercubes; crossed cubes; routing; broadcasting; connectivity;\ndiameter; twisted cubes; Mo\u00a8bius cubes.\n1 Introduction\nThe choice of interconnection network is crucial in the design of a distributed-\nmemory multiprocessor. As to which network is chosen depends upon a\nnumber of factors relating to the topological, algorithmic, and communication\nproperties of the network and the types of problems to which the resulting\ncomputer is to be applied. There is no one optimum interconnection network\nand a plethora of interconnection networks have been proposed, each with\ndifferent qualities which vary according to the parameter of interest. For\nexample: K. Chi et al. and S. Zhou recently studied network-coding-based\nmulticast networks in [5] and a class of arc-transitive cayley interconnection\nnetworks in [27], respectively.\nHierarchical interconnection networks are, roughly speaking, networks\nwhose edges are partitioned into hierarchies, with each hierarchy defined ac-\ncording to some specific (previously studied) interconnection network. As\nsuch, they usually involve a mix of concepts relating to different existing\ninterconnection networks. Hierarchical interconnection networks often have\nthe following structure. The vertices of the network are first partitioned into\ngroups of vertices, with the vertices of each group interconnected according\nto some prescribed topology. The edges used in this \u2018layer\u2019 of the network are\noften called internal edges. Next, the vertices of the network (sometimes not\nall of them) are partitioned in some alternative way and the vertices of each\nresulting group are interconnected according to some possibly different pre-\nscribed topology. The edges used in this layer of the network are often called\nthe external edges. For example: in [8] the two-level binary hypercube-based\nhierarchical interconnection network is defined where there are 2D collections\nof d-dimensional hypercubes with unique vertices in each hypercube forming\na set of vertices that are interconnected as aD-dimensional hypercube; in [13]\nthe hierarchical cubic network is defined where 2n n-dimensional hypercubes\n2\nare joined so that each vertex in an n-dimensional hypercube is joined to\nexactly one vertex from some other n-dimensional hypercube; and in [20] the\nhierarchical hypercube network is defined where 22\nm\nm-dimensional hyper-\ncubes are joined so that each vertex in an m-dimensional hypercube is joined\nto exactly one vertex from some other m-dimensional hypercube. There\nare many other existing hierarchical networks including those developed and\nstudied in [2, 7, 9, 11, 12, 14, 19, 21, 22, 23, 25, 26].\nAs remarked in [25], hierarchical interconnection networks are appealing\nbecause: parallel machines with an underlying hierarchical interconnection\nnetwork topology can be easily expanded so that changes to both the hard-\nware configuration and the communication software of each processor can be\nminimized; in comparison with some non-hierarchical interconnection net-\nworks, such as the hypercube, they can integrate more vertices yet still use\nthe same number of edges; they can integrate the positive features of two\nor more (non-hierarchical) networks so as to minimize the negative features;\nand they can support new hybrid computer architectures utilizing both op-\ntical and electronic technologies (specifically, processors are partitioned into\ngroups where electronic interconnects are used to connect processors within\nthe same group, while optical interconnects are used for inter-group commu-\nnication).\nA new hierarchical interconnection network, the hierarchical crossed cube\nHCC(k, n), was proposed in [16]. The hierarchical crossed cube draws upon\nconstructions used within the well-known hypercube[22] and also the crossed\ncube (a variation of the hypercube as proposed by Efe [11, 12]). In this pa-\nper, we study some topological and algorithmic properties of HCC(k, n). In\nparticular, we study: the construction of shortest paths between arbitrary\nvertices in HCC(k, n); the connectivity of HCC(k, n); and one-to-all broad-\ncasts in parallel machines whose underlying topology is HCC(k, n) (where\nthese machines have one-port or multi-port store-and-forward models of com-\nmunication). These properties are absolutely fundamental when networks are\nto be used to inter-connect processors within a distributed-memory multi-\nprocessor. This paper subsumes the results in [16] (we provide improved\nproofs of these results) and includes new results relating to one-to-all broad-\ncasts. Moreover, some of our proofs are applicable not just to hierarchical\ncrossed cubes but to hierarchical interconnection networks formed by replac-\ning crossed cubes with other families of interconnection networks. As such,\nwe provide a generic construction with accompanying generic results relating\nto some topological and algorithmic properties of a wide range of hierarchical\n3\ninterconnection networks.\n2 Preliminary definitions\nIn this section we provide definitions relating to hierarchical crossed cubes\n(first defined and considered in [16]). For definitions of relevant concepts\nfrom graph theory and interconnection networks we refer the reader to [24].\nAs we shall see, the construction of hierarchical crossed cubes is built\naround those of hypercubes and crossed cubes. The n-dimensional hypercube\nQn is possibly the most ubiquitous interconnection network and the related\nresearch [1, 10] is still active. Its vertex set is {0, 1}n and there is an edge\njoining two vertices if, and only if, their names differ in exactly one bit\nposition. Of relevance to us is the fact that the shortest path joining any two\nvertices of the n-dimensional hypercube is the Hamming distance between\nthe two vertices; that is, the number of bit positions where the names of\nthe vertices differ. We denote the length of a shortest path joining any two\ndistinct vertices u and v of any connected graph G by dG(u, v), and say that\nthe distance between u and v is dG(u, v), with the diameter of G being the\nmaximum from\n{d : there exist vertices u and v in G such that the distance between\nu and v is d}.\nConsequently, the diameter of Qn is n. The connectivity of a graph G is the\nminimum number of vertices that have to be removed from G (along with\ntheir adjacent edges) so as to produce a disconnected graph. By Menger\u2019s\nTheorem (see [24]), the connectivity of a graph G is equal to the minimum,\ntaken over all pairs of distinct vertices, of the maximum number of vertex-\ndisjoint paths joining the two vertices (where a collection of paths joining\nvertices x and y is vertex-disjoint if no vertex, apart from x and y, appears\non more than one path). Moreover, it is trivial to see that if a graph G has\nconnectivity \u03ba, x is a vertex of G, and S is a subset of \u03ba distinct vertices each\ndifferent from x, then there are \u03ba vertex-disjoint paths joining the vertices in\nS to x in G. The n-dimensional hypercube is well-known to have connectivity\nn (see, for example, [24]).\nThe n-dimensional crossed cube CQn is a variant of the n-dimensional\nhypercube. Like the n-dimensional hypercube, its vertex set is {0, 1}n. How-\never, the definition of the edges of CQn is more involved. We say that\n4\nu2u1 and v2v1, where u1, u2, v1, v2 \u2208 {0, 1}, are pair related if (u2u1, v2v1) \u2208\n{(00, 00), (10, 10), (01, 11), (11, 01)}. The 1-dimensional crossed cube CQ1\nconsists of a solitary edge. The n-dimensional crossed cube CQn is defined\nrecursively and is built from two disjoint copies of an (n \u2212 1)-dimensional\ncrossed cube, CQ0n\u22121 and CQ\n1\nn\u22121, where the name of any vertex in CQ\ni\nn\u22121 is\nthat of the corresponding vertex from CQn\u22121 (that is, a bit-string of length\nn\u2212 1) prefixed with the bit i, for i = 0, 1. There are additional edges joining\nvertices in CQ0n\u22121 to vertices in CQ\n1\nn\u22121. The vertex 0un\u22121un\u22122 . . . u2u1 of\nCQ0n\u22121 is joined to the vertex 1vn\u22121vn\u22122 . . . v2v1 of CQ\n1\nn\u22121 if, and only if,\n(i) un\u22121 = vn\u22121, if n is even;\n(ii) u2iu2i\u22121 and v2iv2i\u22121 are pair related, for all i such that 1 \u2264 i < \u2308\nn\n2\n\u2309.\nA simple induction yields that CQn has n2\nn\u22121 edges (note that by the defi-\nnition of CQn, every vertex in CQ\n0\nn\u22121 has exactly one neighbour in CQ\n1\nn\u22121,\nwith CQ1 consisting of a single edge). The diameter of CQn is known to be\n\u2308n+1\n2\n\u2309 [11] (there is also a formula for the distance between any two vertices\nof CQn, in terms of their names as bit-strings [3]) and CQn has connectivity\nn [17].\nWe are now in a position to give the main definition of this section.\nDefinition 1 Fix k, n \u2265 1. The hierarchical crossed cube HCC(k, n) has\nvertex set {0, 1}k+2n. Each vertex ofHCC(k, n) is written as (u,v,w), where\nu \u2208 {0, 1}k and v,w \u2208 {0, 1}n (throughout the paper, bold type denotes a\nbit-string). The set of edges of HCC(k, n) is partitioned into 2 sets, Eint and\nEext. The set Eint is referred to as the set of internal edges, whilst the set\nEext is referred to as the set of external edges. In more detail,\nEint = {((u,v,w), (u,v,w\n\u2032)) : (w,w\u2032) is an edge of CQn}\nand\nEext = {((u,v,w), (u\n\u2032,w,v)) : (u,u\u2032) is an edge of Qk}.\nIn effect, HCC(k, n) is formed by taking 2k+n disjoint copies of CQn,\nwith CQn(u,v) denoting the copy of CQn on the set of vertices {(u,v,w) :\nw \u2208 {0, 1}n} (the edges of these copies of CQn form the internal edges).\nThe vertices in these copies of CQn are then joined by additional edges\n(the external edges) whereby the vertices are partitioned into 22n sets of 2k\nvertices, with each set of 2k vertices joined by edges to form a copy of Qk.\n5\nConsequently, edges lie in the \u2018internal layer\u2019 or the \u2018external layer\u2019. Clearly,\nHCC(k, n) has 2k+2n vertices, n2k+2n\u22121 internal edges, and k2k+2n\u22121 external\nedges, making (n+k)2k+2n\u22121 edges in total. By the definition of HCC(k, n),\nevery vertex has n internal neighbours and k external neighbours, and so\nHCC(k, n) is (n+ k)-regular. The graph HCC(2, n) can be visualized as in\nFig. 1, where the grey ovals are the copies of CQn and the black edges are the\nexternal edges. Note that the \u2018twist\u2019 in our definition of the external edges\n(where the positions of v and w are swapped) is necessary as otherwise the\nresulting graph would not be connected.\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\nCQ  (00,00...00)n\nCQ  (00,00...01)n\nCQ  (00,00...10)n\nCQ  (00,11...11)n\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\nCQ  (11,00...00)n\nCQ  (11,00...01)n\nCQ  (11,00...10)n\nCQ  (11,11...11)n\nCQ  (10,00...00)n\nCQ  (10,00...01)n\nCQ  (10,00...10)n\nCQ  (10,11...11)n\nCQ  (01,00...00)n\nCQ  (01,00...01)n\nCQ  (01,00...10)n\nCQ  (01,11...11)n\nFigure 1. Visualizing HCC(2, n).\nWe shall write a path of vertices in any graph as u = u0 \u2192 u1 \u2192 u2 \u2192\n. . . \u2192 um = v, where ui \u2192 ui+1 denotes that an edge joins ui and ui+1, or\n6\nas u \u2192\u2217 v if we do not need to detail the vertices of the actual path (note\nthat if we write u \u2192\u2217 v then it might be the case that u = v and the path\nis degenerate). However, in HCC(k, n) we write (u,v,w) \u2192CQn (u,v,w\n\u2032)\nto denote that the edge is an internal edge and (u,v,w) \u2192Qk (u\n\u2032,w,v) to\ndenote that the edge is an external edge (we write \u2192\u2217CQn and \u2192\n\u2217\nQk\nto denote\npaths of internal or external edges, respectively, of arbitrary lengths where\nthese paths might, in fact, be degenerate). Finally, for any u \u2208 {0, 1}, we\ndenote by u the complementary bit to u, and we write 0 to denote a tuple\nof 0\u2019s (of some appropriate length).\n3 Shortest paths\nIn this section, we look at determining the shortest path between any two\nvertices of HCC(k, n), and hence the diameter of HCC(k, n).\nTheorem 2 Let (u,v,w) and (u\u2032,v\u2032,w\u2032) be two distinct vertices of the graph\nHCC(k, n), where k, n \u2265 1. Any path \u03c1 joining (u,v,w) and (u\u2032,v\u2032,w\u2032)\ncontains at least dQk(u,u\n\u2032) external edges, unless u = u\u2032 and v 6= v\u2032 when it\ncontains at least 2 external edges. Furthermore, the length of any such path\n\u03c1 is\n\u2022 at least dQk(u,u\n\u2032)+dCQn(v,v\n\u2032)+dCQn(w,w\n\u2032), if dQk(u,u\n\u2032) is even, un-\nless u = u\u2032 and v 6= v\u2032 when the length of \u03c1 is at least 2+dCQn(v,v\n\u2032)+\ndCQn(w,w\n\u2032)\n\u2022 at least dQk(u,u\n\u2032) + dCQn(v,w\n\u2032) + dCQn(w,v\n\u2032), if dQk(u,u\n\u2032) is odd.\nProof Let \u03c1 be any path from (u,v,w) to (u\u2032,v\u2032,w\u2032) in HCC(k, n) where\ndQk(u,u\n\u2032) is even. Such a path \u03c1 has the form\n(u,v,w) = (u0,v0,w0)\n\u2192\u2217CQn (u0,v0,w1)\u2192Qk (u1,w1,v0)\u2192\n\u2217\nCQn\n(u1,w1,v1)\u2192Qk (u2,v1,w1)\n\u2192\u2217CQn (u2,v1,w2)\u2192Qk (u3,w2,v1)\u2192\n\u2217\nCQn\n(u3,w2,v2)\u2192Qk (u4,v2,w2)\n\u2192\u2217CQn (u4,v2,w3)\u2192Qk (u5,w3,v2)\u2192\n\u2217\nCQn\n(u5,w3,v3)\u2192Qk (u6,v3,w3)\n\u2192\u2217CQn . . .\u2192Qk (u2m,vm,wm)\u2192\n\u2217\nCQn\n(u2m,vm,wm+1) = (u\n\u2032,v\u2032,w\u2032),\nfor some m \u2265 0 for which 2m \u2265 dQk(u,u\n\u2032). Thus: there is a path\nw = w0 \u2192\n\u2217 w1 \u2192\n\u2217 w2 \u2192\n\u2217 . . .\u2192\u2217 wm \u2192\n\u2217 wm+1 = w\n\u2032\n7\nin CQn; a path\nv = v0 \u2192\n\u2217 v1 \u2192\n\u2217 v2 \u2192\n\u2217 . . .vm\u22121 \u2192\n\u2217 vm = v\n\u2032\nin CQn; and a path\nu = u0 \u2192 u1 \u2192 u2 \u2192 . . .\u2192 u2m\u22121 \u2192 u2m = u\n\u2032\nin Qk. Consequently, the length of \u03c1 is at least dQk(u,u\n\u2032) + dCQn(v,v\n\u2032) +\ndCQn(w,w\n\u2032). However, suppose that u = u\u2032 and v 6= v\u2032. Any such path\n\u03c1 must necessarily contain an external edge, and consequently at least two\nexternal edges (because dQk(u,u\n\u2032) is even). Thus, the length of \u03c1 is at least\n2 + dCQn(v,v\n\u2032) + dCQn(w,w\n\u2032).\nLet \u03c1 be any path from (u,v,w) to (u\u2032,v\u2032,w\u2032) in HCC(k, n) where\ndQk(u,u\n\u2032) is odd. Such a path \u03c1 has the form\n(u,v,w) = (u0,v0,w0)\n\u2192\u2217CQn (u0,v0,w1)\u2192Qk (u1,w1,v0)\u2192\n\u2217\nCQn\n(u1,w1,v1)\u2192Qk (u2,v1,w1)\n\u2192\u2217CQn (u2,v1,w2)\u2192Qk (u3,w2,v1)\u2192\n\u2217\nCQn\n(u3,w2,v2)\u2192Qk (u4,v2,w2)\n\u2192\u2217CQn (u4,v2,w3)\u2192Qk (u5,w3,v2)\u2192\n\u2217\nCQn\n(u5,w3,v3)\u2192Qk (u6,v3,w3)\n\u2192\u2217CQn . . .\u2192Qk (u2m,vm,wm)\u2192\n\u2217\nCQn\n(u2m,vm,wm+1)\n\u2192Qk (u2m+1,wm+1,vm)\u2192\n\u2217\nCQn\n(u2m+1,wm+1,vm+1) = (u\n\u2032,v\u2032,w\u2032),\nfor some m \u2265 0 for which 2m+ 1 \u2265 dQk(u,u\n\u2032). Thus: there is a path\nw = w0 \u2192\n\u2217 w1 \u2192\n\u2217 w2 \u2192\n\u2217 . . .\u2192\u2217 wm \u2192\n\u2217 wm+1 = v\n\u2032\nin CQn; a path\nv = v0 \u2192\n\u2217 v1 \u2192\n\u2217 v2 \u2192\n\u2217 . . .vm \u2192\n\u2217 vm+1 = w\n\u2032\nin CQn; and a path\nu = u0 \u2192 u1 \u2192 u2 \u2192 . . .\u2192 u2m \u2192 u2m+1 = u\n\u2032\nin Qk. Consequently, the length of \u03c1 is at least dQk(u,u\n\u2032) + dCQn(v,w\n\u2032) +\ndCQn(v,w\n\u2032). The result follows.\nCorollary 3 Fix k, n \u2265 1. Let (u,v,w) and (u\u2032,v\u2032,w\u2032) be distinct vertices\nof HCC(k, n).\n8\n\u2022 Suppose that dQk(u,u\n\u2032) is even. If u = u\u2032 and v 6= v\u2032 then we have\nthat dHCC(k,n)((u,v,w), (u\n\u2032,v\u2032,w\u2032)) is equal to\n2 + dCQn(v,v\n\u2032) + dCQn(w,w\n\u2032);\notherwise it is equal to\ndQk(u,u\n\u2032) + dCQn(v,v\n\u2032) + dCQn(w,w\n\u2032).\n\u2022 Suppose that dqk(u,u\n\u2032) is odd. Then dHCC(k,n)((u,v,w), (u\n\u2032,v\u2032,w\u2032)) is\nequal to\ndQk(u,u\n\u2032) + dCQn(v,w\n\u2032) + dCQn(w,v\n\u2032).\nIn consequence, the graph HCC(k, n) has diameter max{2, k}+ 2\u2308n+1\n2\n\u2309.\nProof Let (u,v,w) and (u\u2032,v\u2032,w\u2032) be distinct vertices of HCC(k, n). Sup-\npose that:\nu = u0 \u2192 u1 \u2192 u2 \u2192 . . .\u2192 ui = u\n\u2032\nis a shortest path in Qk from u to u\n\u2032;\nv = v0 \u2192 v1 \u2192 v2 \u2192 . . .\u2192 vj = v\n\u2032\nis a shortest path in CQn from v to v\n\u2032; and\nw = w0 \u2192 w1 \u2192 w2 \u2192 . . .\u2192 wl = w\n\u2032\nis a shortest path in CQn from w to w\n\u2032 (of course, any of i, j and l might\nbe 0).\nSuppose that dQk(u,u\n\u2032) is even and that it is not the case that u = u\u2032\nand v 6= v\u2032. Define the path \u03c1 as\n(u,v,w) = (u0,v0,w0)\u2192CQn (u0,v0,w1)\u2192CQn . . .\u2192CQn (u0,v0,wl)\n\u2192Qk (u1,wl,v0)\u2192CQn (u1,wl,v1)\u2192CQn . . .\u2192CQn (u1,wl,vj)\n\u2192Qk (u2,vj ,wl)\u2192Qk (u3,wl,vj)\u2192Qk . . .\u2192Qk (ui\u22122,vj,wl)\n\u2192Qk (ui\u22121,wl,vj)\u2192Qk (ui,vj ,wl) = (u\n\u2032,v\u2032,w\u2032).\nSuppose that u = u\u2032 and v 6= v\u2032. Define the path \u03c1 as\n(u,v,w) = (u,v0,w0)\u2192CQn (u,v0,w1)\u2192CQn . . .\u2192CQn (u,v0,wl)\n\u2192Qk (u\n\u2032\u2032,wl,v0)\u2192CQn (u\n\u2032\u2032,wl,v1)\u2192CQn . . .\u2192CQn (u\n\u2032\u2032,wl,vj)\n\u2192Qk (u,vj ,wl) = (u\n\u2032,v\u2032,w\u2032),\n9\nwhere u\u2032\u2032 is any neighbour of u in Qk.\nSuppose that dQk(u,u\n\u2032) is odd. Define the path \u03c1 as\n(u,v,w) = (u0,v0,w0)\u2192CQn (u0,v0,w1)\u2192CQn . . .\u2192CQn (u0,v0,wl)\n\u2192Qk (u1,wl,v0)\u2192CQn (u1,wl,v1)\u2192CQn . . .\u2192CQn (u1,wl,vj)\n\u2192Qk (u2,vj ,wl)\u2192Qk (u3,wl,vj)\u2192Qk . . .\u2192Qk (ui\u22122,wl,vj)\n\u2192Qk (ui\u22121,vj,wl)\u2192Qk (ui,wl,vj) = (u\n\u2032,w\u2032,v\u2032).\nOf course, to obtain a path (of the same length) from (u,v,w) to (u\u2032,v\u2032,w\u2032),\nwe simply work with paths in CQn from v to w\n\u2032 and from w to v\u2032 instead of\npaths from v to v\u2032 and from w to w\u2032. The result follows by Theorem 2 and\nthe facts that the diameters of Qk and CQn are k and \u2308\nn+1\n2\n\u2309, respectively.\n4 Connectivity\nIn this section, we consider the connectivity of HCC(k, n). We begin with\nHCC(1, n), where n \u2265 1. We can assume that n \u2265 3 as given the depic-\ntions of HCC(1, 1) and HCC(1, 2) in Figs. 2 and 3, it is trivial to see that\nHCC(1, 1) and HCC(1, 2) have connectivity 2 and 3, respectively.\n000 001 100101\n010 011 110111\nFigure 2. The graph HCC(1, 1).\n000CQ  :2\nCQ  :2\n100101001\n010 110111011\n00\n10\n01\n11\n00\n10\n01\n11\n00\n10\n01\n11\n00\n10\n01\n11\n00\n10\n01\n11\n00\n10\n01\n11\n00\n10\n01\n11\n00\n10\n01\n11\nFigure 3. The graph HCC(1, 2).\nProposition 4 Let n \u2265 3. The graph HCC(1, n) has connectivity n+ 1.\n10\nProof Let x and y be any two distinct vertices of HCC(1, n). We shall\nshow how n + 1 vertex-disjoint paths joining x and y can be constructed.\nThere are three essential cases.\nCase 1: x = (0,v,w) and y = (0,v,w\u2032).\nBy [12, 17], there are n vertex-disjoint paths in CQn(0,v) joining x and\ny. Also, consider a path x = (0,v,w) \u2192Q1 (1,w,v) \u2192CQn (1,w,v\n\u2032) \u2192Q1\n(0,v\u2032,w) \u2192\u2217CQn (0,v\n\u2032,w\u2032) \u2192Q1 (1,w\n\u2032,v\u2032) \u2192CQn (1,w\n\u2032,v) \u2192Q1 (0,v,w\n\u2032) =\ny, where v\u2032 is a neighbour of v in CQn and where the path (0,v\n\u2032,w)\u2192\u2217CQn\n(0,v\u2032,w\u2032) is a path in CQn(0,v\n\u2032) corresponding to some path in CQn from\nw to w\u2032 (we adopt this denotation of paths throughout this proof). This\npath from x to y is vertex-disjoint from the other n paths joining x and y.\nCase 2: x = (0,v,w) and y = (0,v\u2032,w\u2032), where v 6= v\u2032.\nChoose n distinct vertices {(0,v, zi) : zi 6\u2208 {v,v\n\u2032,w,w\u2032}, i = 1, 2, . . . , n} in\nCQn(0,v) (note that n \u2265 3). By [12, 17], there are n vertex-disjoint paths in\nCQn(0,v) joining x with the vertices from {(0,v, zi) : zi 6= v,v\n\u2032,w,w\u2032, i =\n1, 2, . . . , n}. Denote the path from x to (0,v, zi) by \u03c1i, for i = 1, 2, . . . , n,\nand consider the path \u03c1i extended by the path (0,v, zi)\u2192Q1 (1, zi,v)\u2192\n\u2217\nCQn\n(1, zi,v\n\u2032) \u2192Q1 (0,v\n\u2032, zi). By [12, 17], there exist n vertex-disjoint paths in\nCQn(0,v\n\u2032) from the vertices of {(0,v\u2032, zi) : i = 1, 2, . . . , n} to y. Hence, we\nclearly have n vertex-disjoint paths in HCC(1, n) from x to y.\nSuppose that w 6= w\u2032. Consider the path: x = (0,v,w) \u2192Q1 (1,w,v)\n\u2192\u2217CQn (1,w,v\n\u2032\u2032) \u2192Q1 (0,v\n\u2032\u2032,w) \u2192\u2217CQn (0,v\n\u2032\u2032,w\u2032) \u2192Q1 (1,w\n\u2032,v\u2032\u2032) \u2192\u2217CQn\n(1,w\u2032,v\u2032) \u2192Q1 (0,v\n\u2032,w\u2032) = y, where v\u2032\u2032 is a vertex of CQn different from v\nand v\u2032. Suppose that w = w\u2032. Consider the path x = (0,v,w)\u2192Q1 (1,w,v)\n\u2192\u2217CQn (1,w,v\n\u2032)\u2192Q1 (0,v\n\u2032,w) = y. In both cases, the resulting path from x\nto y is clearly vertex-disjoint from the other n paths constructed above.\nCase 3: x = (0,v,w) and y = (1,v\u2032,w\u2032).\nSub-case (a): (v 6= w\u2032 and w 6= v\u2032) or (v = w\u2032 and w = v\u2032).\nChoose n distinct vertices {(0,v, zi) : zi 6\u2208 {v,v\n\u2032,w,w\u2032}, i = 1, 2, . . . , n} in\nCQn(0,v) (note that n \u2265 3). By [12, 17], there are n vertex-disjoint paths\njoining x with each of the vertices from {(0,v, zi) : zi 6= v,v\n\u2032,w,w\u2032, i =\n1, 2, . . . , n}. Denote the path from x to (0,v, zi) by \u03c1i, for i = 1, 2, . . . , n. By\n[12, 17], there are n vertex-disjoint paths joining y with each of the vertices\nfrom {(1,v\u2032, zi) : zi 6= v,v\n\u2032,w,w\u2032, i = 1, 2, . . . , n}. Denote the path from y\nto (1,v\u2032, zi) by \u03c1\n\u2032\ni, for i = 1, 2, . . . , n.\n11\nFor each i = 1, 2, . . . , n, extend \u03c1i with the path (0,v, zi) \u2192Q1 (1, zi,v)\n\u2192\u2217CQn (1, zi, zi) \u2192Q1 (0, zi, zi) \u2192\n\u2217\nCQn\n(0, zi,v\n\u2032) \u2192Q1 (1,v\n\u2032, zi) and then with\nthe path \u03c1\u2032i. This results in n vertex-disjoint paths.\nSuppose that v 6= w\u2032 and w 6= v\u2032. The path x = (0,v,w) \u2192Q1\n(1,w,v) \u2192\u2217CQn (1,w,w\n\u2032) \u2192Q1 (0,w\n\u2032,w) \u2192\u2217CQn (0,w\n\u2032,v\u2032) \u2192Q1 (1,v\n\u2032,w\u2032) =\ny is vertex-disjoint from the n paths above. The situation can be visualized\nas in Fig. 4. Suppose that v = w\u2032 and w = v\u2032. The path x = (0,v,w)\u2192Q1\n(1,w,v) = y is trivially vertex-disjoint from the n paths above.\nCQ  (0, v)n\nCQ  (0, z )n 1\nCQ  (0, z  )n n\nx = (0, v, w)\n(1, w, v)\n(0, v, z )1\n(0, v, z  )n\n(1, z , v)1 (1, z  , v)n\nCQ  (0, w )n\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n...\n...\n...\n...\n...\n...\n...\n...\n...\n'\n(0, w , w)'\nCQ  (1, w)n\n(1, w, w )'\n(0, w , v )' '\ny = (1, v , w )' '\n(1, z , z )1 1\n(1, z  , z  )nn(0, z  , z  )nn(0, z  , v )n '\n(1, v , z  )' n\nCQ  (1, v )n '\nCQ  (1, z )n 1 CQ  (1, z  )n n\n(0, z , v )1 '\n(0, z , z )1 1\n(1, v , z )'\n1\nFigure 4. Sub-case 3(a) when v 6= w\u2032 and w 6= v\u2032.\nSub-case (b): v = w\u2032 and w 6= v\u2032.\nChoose n\u22121 distinct vertices {(0,v, zi) : zi 6\u2208 {v,v\n\u2032,w,w\u2032}, i = 1, 2, . . . , n\u2212\n1} in CQn(0,v) and set zn = (0,v,v\n\u2032) (note that n \u2265 3). By [12, 17],\nthere are n vertex-disjoint paths joining x with each of the vertices from\n{(0,v, zi) : zi 6= v,v\n\u2032,w,w\u2032, i = 1, 2, . . . , n \u2212 1, and zn = v\n\u2032}. Denote the\npath from x to (0,v, zi) by \u03c1i, for i = 1, 2, . . . , n.\nChoose n distinct vertices {(1,v\u2032, z\u2032i) : z\n\u2032\ni 6= v,v\n\u2032,w,w\u2032, i = 1, 2, . . . , n} in\nCQn(1,v\n\u2032). By [12, 17], there are n vertex-disjoint paths joining y with each\nof the vertices from {(1,v\u2032, z\u2032i) : z\n\u2032\ni 6= v,v\n\u2032,w,w\u2032, i = 1, 2, . . . , n}. Denote the\npath from y to (1,v\u2032, z\u2032i) by \u03c1\n\u2032\ni, for i = 1, 2, . . . , n.\nFor each i = 1, 2, . . . , n\u2212 1, extend \u03c1i by the path (0,v, zi)\u2192Q1 (1, zi,v)\n\u2192\u2217CQn (1, zi, z\n\u2032\ni) \u2192Q1 (0, z\n\u2032\ni, zi) \u2192\n\u2217\nCQn\n(0, z\u2032i,v\n\u2032) \u2192Q1 (1,v\n\u2032, z\u2032i) and then by\nthe path \u03c1\u2032i. This results in n\u2212 1 vertex-disjoint paths.\nConsider the path \u03c1n extended with the path (0,v,v\n\u2032) \u2192Q1 (1,v\n\u2032,v) =\ny: denote this path by \u03c3. Consider also the path x = (0,v,w) \u2192Q1\n12\n(1,w,v) \u2192\u2217CQn (1,w, z\n\u2032\nn) \u2192Q1 (0, z\n\u2032\nn,w) \u2192\n\u2217\nCQn\n(0, z\u2032n,v\n\u2032) \u2192Q1 (1,v\n\u2032, z\u2032n)\nextended by \u03c1\u2032n to obtain a path \u03c3\n\u2032 from x to y. The paths \u03c3 and \u03c3\u2032 are\nvertex-disjoint and also vertex-disjoint with all of the n\u22121 paths constructed\nabove. The situation can be visualized as in Fig. 5.\nCQ  (0, v)n\nCQ  (0, z )n 1\n(0, v, w)\n(1, w, v)(0, v, z )1\n(0, v, z    )n-1\n(1, z , v)1 (1, z    , v)\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n.\n..\n...\n...\n...\n...\n...\n...\n...\n...\n...\nCQ  (1, w)n\n(1, z , z )1 1\n(1, z    , z    )\n(0, z    , v )'\n(1, v , z    )'\nCQ  (1, v )n '\nCQ  (1, z )n 1 CQ  (1, z    )n\n(0, z , v )1 '\n(0, z , z )1 1\n(1, v , z )'\n1\n(0, v, v )'\n(1, v , v)'\nn-1\n''\nn-1\nn-1 'n-1\n'\n'\n'\n(0, z    , z    )n-1' n-1n-1'\nCQ  (0, z    )n n-1'\nn-1'\n(1, w, z  )'n\n(0, z  , w)'n (0, z  , v )'n '\n(1, v , z  )'n'\nCQ  (0, z  )n 'n\nFigure 5. Sub-case 3(b) when v = w\u2032 and w 6= v\u2032.\nSub-case (c): v 6= w\u2032 and w = v\u2032.\nConsider the mapping (0,x,y) 7\u2192 (1,x,y) and (1,x,y) 7\u2192 (0,x,y) on the\nvertices ofHCC(1, 1). This mapping is clearly an automorphism (see Fig. 2).\nThis reduces this case to Sub-case (b).\nThe result follows.\nTheorem 5 For k, n \u2265 1, HCC(k, n) has connectivity n+ k.\nProof Let x and y be distinct vertices inHCC(k, n). We prove by induction\non k that there are n + k vertex-disjoint paths from x to y in HCC(k, n).\nThe base case follows by Proposition 4 and the discussion of the cases of\nHCC(1, 1) and HCC(1, 2), above. Suppose, as our induction hypothesis,\nthat there are n+k\u22121 vertex-disjoint paths joining any two distinct vertices\ninHCC(k\u22121, n). For i = 0, 1, denote by Hk\u22121(i) the subgraph ofHCC(k, n)\ninduced by the vertices of {(iu,v,w) : u \u2208 {0, 1}k\u22121,v,w \u2208 {0, 1}n}.\nClearly, Hk\u22121(0) and Hk\u22121(1) are isomorphic to HCC(k \u2212 1, n).\nCase 1: x = (0u,v,w) \u2208 Hk\u22121(0) and y = (1u\n\u2032,v\u2032,w\u2032) \u2208 Hk\u22121(1).\nSub-case (a): x is not adjacent to y in HCC(k, n).\n13\nLet y\u2032 = (0u\u2032,w\u2032,v\u2032) (and so y\u2032 6= x); that is, y\u2032 is y\u2019s neighbour in Hk\u22121(0).\nSimilarly, define x\u2032 = (1u,w,v) to be x\u2019s neighbour in Hk\u22121(1) (and so\nx\u2032 6= y). By the induction hypothesis applied to Hk\u22121(0), there are n+ k\u2212 1\nvertex-disjoint paths {\u03c1i : i = 1, 2, . . . , n+k\u22121} in Hk\u22121(0) joining x and y\n\u2032.\nChoose n+k\u22122 of these paths, omitting the path x\u2192 y\u2032 if it exists (and so\nall of the chosen paths have length at least 2). W.l.o.g. let the chosen paths\nbe {\u03c1i : i = 1, 2, . . . , n+ k\u2212 2}. Let the penultimate vertex of the path \u03c1i be\nzi (that is, each zi is a neighbour of y\n\u2032 and is not equal to x) and let \u03c1\u2032i be the\npath \u03c1i truncated at zi. Furthermore, let the neighbour in Hk\u22121(1) of each\nzi be z\n\u2032\ni. By the induction hypothesis applied to Hk\u22121(1), there are n+ k\u2212 1\nvertex-disjoint paths joining the vertices of {z\u2032i : i = 1, 2, . . . , n+k\u22122}\u222a{x\n\u2032}\nto y. Denote the path from each z\u2032i to y by \u03c3i, and the path from x\n\u2032 to y\nby \u03c3. Hence, by extending each path \u03c1\u2032i by the path zi \u2192Qk z\n\u2032\ni and then by\nthe path \u03c3i, for i = 1, 2, . . . , n + k \u2212 2, we obtain n + k \u2212 2 vertex-disjoint\npaths from x to y. We also obtain a path from x to y by extending the path\nx\u2192Qk x\n\u2032 by the path \u03c3, which is vertex-disjoint from all of the other paths\nconstructed from x to y. Finally, consider the omitted path from x to y\u2032,\n\u03c1n+k\u22121, above, in Hk\u22121(0). We can extend this path by the path y\n\u2032 \u2192 y to\nobtain yet another path from x to y which is vertex-disjoint from the n+k\u22121\nother paths just constructed from x to y. The situation can be visualized as\nin Fig. 6.\n...\nx\ny'\n...\ny\nx'\n\u03c11'\n\u03c1n-k-2'\n\u03c31\n\u03c3n-k-2\n...\n\u03c3\nz1\nz1'\nzn-k-2'\nzn-k-2\nH    (0)k-1 H    (1)k-1\n\u03c1n-k-1\nFigure 6. Visualizing the situation in Sub-case 1(a).\nSub-case (b): x is adjacent to y in HCC(k, n).\n14\nSo, x = (0u,v,w) and y = (1u,w,v). Let z be any neighbour of x in\nHk\u22121(0). By the induction hypothesis applied to Hk\u22121(0), there are n+k\u22121\nvertex-disjoint paths from x to z in Hk\u22121(0), one path of which is the path\nx\u2192 z; denote the other paths by \u03c11, \u03c12, . . . , \u03c1n+k\u22122. For i = 1, 2, . . . , n+k\u22122,\ntruncate the path \u03c1i at the penultimate vertex zi and denote it by \u03c1\n\u2032\ni (so,\nzi is a neighbour of z). Let z\n\u2032 be the neighbour of z in Hk\u22121(1), and let\nz\u2032i be the neighbour of zi in Hk\u22121(1), for i = 1, 2, . . . , n + k \u2212 2. By the\ninduction hypothesis applied to Hk\u22121(1), there are n + k \u2212 1 vertex-disjoint\npaths in Hk\u22121(1) from the vertices of {z\n\u2032\ni : i = 1, 2, . . . , n + k \u2212 2} \u222a {z\n\u2032} to\ny: denote the path from z\u2032i to y by \u03c3i and denote the path from z\n\u2032 to y by \u03c3.\nExtend the path \u03c1\u2032i by the path zi \u2192Qk z\n\u2032\ni and then by the path \u03c3i, for each\ni = 1, 2, . . . , n + k \u2212 2. Also, extend the path x \u2192 z by the path z \u2192Qk z\n\u2032\nand then by the path \u03c3. This yields n + k \u2212 1 vertex-disjoint paths from\nx to y in HCC(k, n). Finally, the path x \u2192Qk y gives another path. The\nsituation can be visualized as in Fig. 7.\n...\nx\n...\ny\n\u03c31\n\u03c3n-k-2\n...\n...\nz1\n1z'\nzn-k-2'\nzn-k-2\nH    (0)k-1 H    (1)k-1\nz\nz'\n\u03c1'\n1 \u03c1n-k-2'\n\u03c3\nFigure 7. Visualizing the situation in Sub-case 1(b).\nCase 2: x = (0u,v,w) \u2208 Hk\u22121(0) and y = (0u\n\u2032,v\u2032,w\u2032) \u2208 Hk\u22121(0) (the case\nwhen both x and y are in Hk\u22121(1) is almost identical).\nBy the induction hypothesis applied to Hk\u22121(0), there are n + k \u2212 1 vertex-\ndisjoint paths from x to y in Hk\u22121(0). Let x\n\u2032 and y\u2032 be the neighbours of x\nand y in Hk\u22121(1), respectively. There is a path \u03c3 from x\n\u2032 to y\u2032 in Hk\u22121(1).\nHence, the path obtained by extending the path x\u2192Qk x\n\u2032 by the path \u03c3 and\nthen by the path y\u2032 \u2192Qk y yields an additional path joining x and y that is\n15\nvertex-disjoint with the other n+k\u22121 paths. The result in the statement of\nthis theorem now follows by induction as HCC(k, n) is (n+ k)-regular (and\nso cannot have connectivity greater than n + k).\nTables 1 and 2 show the major topological characteristics (degrees, con-\nnectivities, and diameters) of hypercubes [22], crossed cubes [11, 12], hier-\narchical hypercubes (HHC) [20], hierarchical cubic networks (HCN)[13], and\nhierarchical crossed cubes (HCC)[16] for various practical network sizes of 2l.\nAs seen from the tables, hierarchical crossed cubes compare favourably with\nthese networks, most notably hypercubes and hierarchical cubic networks.\nTable 1: The HCC and similar networks compared.\nnetwork vertices degree connectivity diameter\nQl [22] 2\nl l l l\nCQl [11, 12] 2\nl l l \u2308 l+1\n2\n\u2309\n(m+ 2m)-HHC [20] 2m+2\nm\nm+ 1 m+ 1 2m+1\nHCN(s, s) [13] 22s s+ 1 s+ 1 s+ \u230a s\n2\n\u230b + 1\nHCC(k, n) [16] 2k+2n k + n k + n max{2, k}\n+2\u2308n+1\n2\n\u2309\nNote: l = m+ 2m = 2s = k + 2n\n5 One-to-all broadcasting\nIn this section, we examine one-to-all broadcasting in HCC(k, n). Our ba-\nsic assumption is that we have a synchronous distributed-memory parallel\nmachine M whose underlying topology is that of the graph HCC(k, n); that\nis, there is a global clock which governs when messages are sent from and\nreceived by the processors, which lie at the vertices of HCC(k, n) so that\nany message is sent along some edge of HCC(k, n). It is always assumed\nthat any sent message is received within the same cycle of the global clock.\nThe machine M is one-port if at any time any processor can send at most\none message and simultaneously receive at most one message. The machine\nM is multi-port if at any time any processor can send messages to any sub-\nset of its neighbours and simultaneously receive messages from any subset of\n16\nTable 2: Detailed numerical comparison\ndesired size 2l 26 211 220 237 270\nQl [22] degree 6 11 20 37 70\nconnectivity 6 11 20 37 70\ndiameter 6 11 20 37 70\nCQl [11, 12] degree 6 11 20 37 70\nconnectivity 6 11 20 37 70\ndiameter 4 6 11 19 36\nl \u2212HHC [20] m 2 3 4 5 6\ndegree 3 4 5 6 7\nconnectivity 3 4 5 6 7\ndiameter 8 16 32 64 128\nHCN(s, s) [13] s 3 10 35\ndegree 4 11 36\nconnectivity 4 11 36\ndiameter 3 16 53\nHCC(k, n) [16] k 2 3 4 5 6\nn 2 4 8 16 32\ndegree 4 6 11 21 38\nconnectivity 4 6 11 21 38\ndiameter 6 11 14 23 40\nNote: l = m+ 2m = 2s = k + 2n\nits neighbours. A one-to-all broadcast in M is a distributed algorithm that,\nfirst, constructs a spanning tree within (the underlying topology of) M and,\nsecond, disseminates a message from the root of the tree, using the edges of\nthe tree, so that this message is delivered to every other vertex. The aim\nis usually to complete a one-to-all broadcast in as short a time as possible\n(where time is measured according to the global clock). We always assume\nthat any message has unit size and that each edge has unit capacity; that is,\nwe have a store-and-forward model of computation.\nIntimately related with one-to-all broadcasts is the existence of spanning\ntrees within HCC(k, n), for any spanning tree gives rise to a multi-port\nalgorithm for a one-to-all broadcast in M which takes (global) time equal\nto the depth of the tree (the message originates at the processor at the root\n17\nof the tree and is disseminated according to the tree structure). Of course,\nthis requires that the actual tree can be constructed by M , in a distributed\nfashion, so that any processor has an explicit representation of its parent\nand children (if any) within the tree. If M is a one-port machine then a\nspanning tree still gives rise to a one-port algorithm (in fact, numerous such\nalgorithms, depending upon the dissemination strategy) but the resulting\nalgorithm might take time greater than the depth of the tree. Of course, for\na universal one-to-all broadcast algorithm we need spanning trees rooted at\nevery vertex ofHCC(k, n). We call a spanning tree of a graph a broadcast tree\nif the (rooted) tree is used as the basis of a one-to-all broadcast algorithm.\nWe shall primarily be concerned with the existence of spanning trees in\nHCC(k, n) and their structure, in relation to one-to-all broadcasting in a one-\nport or a multi-port model, rather than the actual (distributed) construction\nof these trees within some synchronous distributed-memory parallel machine.\nWe shall comment briefly on the actual construction of our trees at the end\nof the section.\nThe following theorem shows how broadcast trees in hypercubes and\ncrossed cubes can be composed to form broadcast trees in hierarchical crossed\ncubes. One problematic aspect of this theorem is that the crossed cube CQn\nis known not to be vertex-symmetric when n > 4 [18], although Qk is vertex-\nsymmetric (see [24]; a graph G is vertex-symmetric if given any two distinct\nvertices u and v of G, there is an automorphism of G mapping u to v). Con-\nsequently, our theorem is more involved than it would have been were CQn\nvertex-symmetric.\nTheorem 6 Fix k \u2265 3 and n \u2265 1. For each v \u2208 {0, 1}n and u \u2208 {0, 1}k\u22122,\nlet T vC and T\nu\nQ be broadcast trees in CQn and Qk\u22122 rooted at v and u, re-\nspectively. Let : \u03b4C be the maximum degree of any vertex in any T\nv\nC ; \u03b4Q be\nthe maximum degree of any vertex in any T uQ; rC be the maximum degree of\nthe roots in any T vC ; rQ be the maximum degree of the roots in any T\nu\nQ; \u03b2C\nbe the maximum depth of any tree T vC ; and \u03b2Q be the maximum depth of any\ntree T uQ. If k = 2 and n \u2265 1 then define the trees T\nv\nC and the parameters\n\u03b4C, rC, and \u03b2C as above, and set \u03b4Q = \u03b2Q = 0. For any chosen vertex x of\nHCC(k, n), there exists a broadcast tree T in HCC(k, n), rooted at x, such\nthat\n\u2022 T has depth at most \u03b2Q + 2\u03b2C + 2\n\u2022 any vertex in T has degree at most max{\u03b4Q + rC + 2, \u03b4C + 2}.\n18\nProof We shall begin with the graph HCC(2, n), which can be visualized\nas in Fig. 1. Fix u1, u2 \u2208 {0, 1} and v,w \u2208 {0, 1}\nn. We shall iteratively build\na spanning tree T \u2032 in HCC(2, n) rooted at (u2u1,v,w) as follows.\n\u2022 Initialize the tree T \u2032 as the tree TwC in CQn(u2u1,v) rooted at (u2u1,v,\nw).\n\u2022 Extend T \u2032 by joining each vertex (u2u1,v,x) of T\n\u2032 to its neighbour\n(u2u1,x,v) in CQn(u2u1,x).\n\u2022 Extend (the new) T \u2032 by joining each vertex (u2u1,v,x) of T\n\u2032 to its\nneighbour (u2u1,x,v) in CQn(u2u1,x).\n\u2022 For each vertex (u2u1,x,v) in T\n\u2032, take the tree T vC in CQn(u2u1,x)\nrooted at (u2u1,x,v) and extend T\n\u2032 by incorporating this tree T vC .\n\u2022 For each vertex (u2u1,x,v) in T\n\u2032, take the tree T vC in CQn(u2u1,x)\nrooted at (u2u1,x,v) and extend T\n\u2032 by incorporating this tree T vC .\n\u2022 For each vertex (u2u1,x,y) in T\n\u2032, where y 6= v, extend T \u2032 by joining\n(u2u1,x,y) to its neighbour (u2u1,y,x) of CQn(u2u1,y).\n\u2022 For each vertex (u2u1,x,y) in T\n\u2032, extend T \u2032 by joining (u2u1,x,y) to\nits neighbour (u2u1,y,x) of CQn(u2u1,y).\nThe resulting tree T \u2032 has depth at most 2\u03b2C + 2, maximum degree at most\n\u03b4C+2, and the degree of the root in T\n\u2032 is at most rC+2. It can be visualized\nas in Fig. 8, where: for simplicity we have that u2u1 = 00 and v = w = 0;\nthe grey ovals are copies of trees T xC ; and the black edges are (external) edges\nused in T \u2032. Note that the actual tree T \u2032 of HCC(2, n) just constructed will,\nin general, depend upon u1, u2, v, and w; so, we refer to it as T\n\u2032[u2u1,v,w].\nNow let us turn to HCC(k, n), for k > 2. For any x \u2208 {0, 1}k\u22122, de-\nnote the subgraph of HCC(k, n) induced by the vertices of {(xu2u1,v,w) :\nu1, u2 \u2208 {0, 1},v,w \u2208 {0, 1}\nn} as H2(x). Clearly, any such H2(x) is isomor-\nphic to HCC(2, n).\nFix u = ukuk\u22121 . . . u1 \u2208 {0, 1}\nk and set u\u2032 = ukuk\u22121 . . . u3. Also, fix\nv,w \u2208 {0, 1}n. Let HQ be the connected component of the subgraph of\nHCC(k, n) induced by the vertices of {(xu2u1,v,w), (xu2u1,w,v) : x \u2208\n{0, 1}k\u22122} that contains the vertex (u,v,w) = (u\u2032u2u1,v,w) (note that if\nv 6= w then HQ has two connected components). Clearly, this connected\n19\ncomponent of HQ is isomorphic to Qk\u22122. Consider the tree T\nu\n\u2032\nQ in Qk\u22122\nrooted at u\u2032. Initialize the tree T0 to be the isomorphic copy of T\nu\n\u2032\nQ in HQ\nrooted at (u\u2032u2u1,v,w) (note that if v 6= w then T0 is not a spanning tree\nof HQ and all edges of T0 join vertices of the form (yu2u1,v,w) to vertices\nof the form (y\u2032u2u1,w,v)).\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\nCQ  (00,00...00)n\nCQ  (00,00...01)n\nCQ  (00,00...10)n\nCQ  (00,11...11)n\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\n...\n...\n...\n...\n.\n..\n.\n..\n.\n..\n.\n..\nCQ  (11,00...00)n\nCQ  (11,00...01)n\nCQ  (11,00...10)n\nCQ  (11,11...11)n\nCQ  (01,00...00)n\nCQ  (01,00...01)n\nCQ  (01,00...10)n\nCQ  (01,11...11)n\nCQ  (10,00...00)n\nCQ  (10,00...01)n\nCQ  (10,00...10)n\nCQ  (10,11...11)n\nFigure 8. Visualizing T \u2032 in HCC(2, n).\nConsider some vertex (xu2u1,v,w) (resp. (xu2u1,w,v)) of T0. Also,\nconsider the spanning tree T \u2032[u2u1,v,w] (resp. T\n\u2032[u2u1,w,v]) in HCC(2, n).\nFrom above, H2(x) is isomorphic to HCC(2, n). So, H2(x) has an isomorphic\ncopy of T \u2032[u2u1,v,w] (resp. T\n\u2032[u2u1,w,v]), denoted T\n\u2032[xu2u1,v,w] (resp.\nT \u2032[xu2u1,w,v]), rooted at (xu2u1,v,w) (resp. (xu2u1,w,v)). Extend T0 by\nincluding all the edges of T \u2032[xu2u1,v,w] (resp. T\n\u2032[xu2u1,w,v]). Moreover,\n20\ndo this for all vertices of the form (xu2u1,v,w) or (xu2u1,w,v) of T0. Denote\nthe sub-graph so obtained by T\nOur new graph T is indeed a tree, for given any x \u2208 {0, 1}k\u22122, there\nis exactly one vertex of T0 whose first component is xu2u1, and H2(x) and\nH2(x\n\u2032) are vertex-disjoint when x 6= x\u2032. Moreover, T is a spanning tree\nof HCC(k, n), and has depth at most \u03b2Q + 2\u03b2C + 2 and degree at most\nmax{\u03b4Q + rC + 2, \u03b4C + 2}.\nTheorem 6 is particularly flexible in that different broadcast trees, with\ndifferent properties, can be substituted for the trees T vC and T\nu\nQ. Of particular\nimportance are the binomial trees . The binomial tree B0 consists of a solitary\nvertex which is the root. For n \u2265 1, the binomial tree Bn is defined recursively\nby taking two disjoint copies of Bn\u22121, joining their roots by an edge, and\nmaking one of these roots the root of Bn. The binomial tree Bn clearly\nhas depth n and 2n vertices. If we have a binomial tree embedded in (the\nunderlying topology of) a one-port synchronous distributed-memory parallel\nmachine then we can perform a one-to-all broadcast from the root of this tree\nto all of the processors in the tree in time equal to the depth of the tree (a\nsimple induction shows this, where the first message sent by the root of Bn,\nsay, is to the root of the adjacent sub-tree Bn\u22121). As simple inductions show,\nboth Qk and CQn contain spanning binomial trees which may be rooted\nat any vertex. To see this, for k \u2265 2, Qk is the vertex-disjoint union of\ntwo copies of Qk\u22121, and for n \u2265 2, CQn is the vertex-disjoint union of two\ncopies of CQn\u22121 (with Q1 and CQ1 forming binomial trees, as they both\nconsist of single edges). The induction hypothesis applied to both copies of\nQk\u22121 or both copies of CQn\u22121 yields the result (note that CQn contains a\nbinomial tree rooted at any vertex irrespective of the fact that CQn is not\nvertex-symmetric, for n > 4).\nThe following corollary is immediate from Theorem 6 by substituting\nbinomial trees for the trees T vC and T\nu\nQ (along with the fact that, as remarked\nabove, the depth of the binomial tree Bn is n).\nCorollary 7 Fix k \u2265 2 and n \u2265 1. For any chosen root, there exists a\nbroadcast tree in the graph HCC(k, n) of depth k + 2n.\nOf course, the broadcast tree in HCC(k, n) in Corollary 7 is not binomial\nand so it is not immediate that we can use it to perform an efficient one-to-\nall broadcast in a one-port synchronous distributed-memory parallel machine\n21\nM whose underlying topology is HCC(k, n) (note that k \u2265 2). However, it\nturns out that we can \u2018almost achieve\u2019 an optimal such algorithm. Let T be\nthe broadcast tree in HCC(k, n) obtained from Corollary 7, rooted at some\nvertex (u,v,w) of HCC(k, n) and by using binomial trees. Our broadcast\nalgorithm proceeds as follows (we equateHCC(k, n) with the interconnection\nnetwork of the machine M).\n1. Build the tree T within HCC(k, n) with root (u,v,w), where u =\nu\u2032u2u1.\n2. We broadcast our message in HCC(k, n) from the root (u,v,w) and\naccording to the binomial tree of Qk\u22122 so that after k \u2212 2 time units,\nevery processor in {(xu2u1,v\n\u2032,w\u2032) : x \u2208 {0, 1}k\u22122, (v\u2032,w\u2032) = (v,w), if\ndQk\u22122(u\n\u2032,x) is even, and (v\u2032,w\u2032) = (w,v), if dQk\u22122(u\n\u2032,x) is odd} has\nreceived the message.\n3. As soon as any processor (xu2u1,v,w) or (xu2u1,w,v) has finished\nsending messages in phase 2, above, it broadcasts the message in H2(x)\n(see the proof of Theorem 6 for a definition ofH2(x)) as we now explain.\n4. As any H2(x) is isomorphic to HCC(2, n), let us assume that our root\nprocessor is the processor (u2u1,v,w) of HCC(2, n) (the case when\nthe root is (u2u1,w,v) is identical). This root processor begins by\nbroadcasting the message in CQn(u2u1,v) according to the binomial\ntree in CQn; thus, after at most an additional n time units, every\nprocessor in CQn(u2u1,v) has received the message.\n5. As soon as any processor (u2u1,v,y) of CQn(u2u1,v) has finished send-\ning messages in phase 4, above, it sends the message to its external\nneighbour (u2u1,y,v) and then to its external neighbour (u2u1,y,v).\nThese neighbours then embark upon broadcasting the message in\nCQn(u1u2,y) and CQn(u2u1,y), respectively, according to the bino-\nmial tree in CQn; thus, after at most an additional n + 2 time units,\nevery processor in every CQn(u1u2,y) and CQn(u1u2,y) has received\nthe message.\n6. Finally, as soon as any processor (u1u2,y,x) of any CQn(u1u2,y), apart\nfrom (u1u2,y,v), has finished sending messages in phase 5, above, it\nsends the message to its external neighbour (u2u1,x,y). Similarly, as\nsoon as any processor (u1u2,y,x) of any CQn(u1u2,y) has finished\n22\nsending messages in phase 5, above, it sends the message to its ex-\nternal neighbour (u1u2,x,y). Thus, after an additional 1 time unit,\nevery processor in HCC(k, n) has received the message originating at\n(u,v,w).\nThe following corollary is immediate.\nCorollary 8 Let M be a one-port synchronous distributed-memory parallel\nmachine whose underlying topology is HCC(k, n), where k \u2265 2 and n \u2265 1.\nFor any chosen vertex x, there is a distributed algorithm that performs a\none-to-all broadcast from x in M in time k + 2n+ 1.\nNote that our one-port one-to-all broadcast in Corollary 8 is \u2018almost optimal\u2019,\nfor consider any one-to-all broadcast in our machine M . A simple induction\nshows that at any time t, at most 2t processors have received the message.\nThus, any one-to-all broadcast in M necessarily takes time at least k + 2n\n(when k \u2265 2).\nWhen k = 1 and n \u2265 1, we can employ almost the same construction in\nHCC(k, n) as we did in the proof of Theorem 6 (the reader should refer to\nthe \u2018top half\u2019 of Fig. 8) to obtain the following result.\nCorollary 9 Fix n \u2265 1. For each v \u2208 {0, 1}n, let T vC be a broadcast tree\nin CQn rooted at v. Let \u03b4C be the maximal degree of any vertex in any T\nv\nC\nand \u03b2C be the maximal depth of any tree T\nv\nC . For any chosen vertex x of\nHCC(1, n), there exists a broadcast tree T in HCC(1, n), rooted at x, such\nthat\n\u2022 T has depth at most 2\u03b2C + 2\n\u2022 any vertex in T has degree at most \u03b4C + 1.\nChoosing our broadcast trees in Corollary 9 to be binomial trees and\nproceeding similarly to as we did prior to Corollary 8, we immediately obtain\nthe following result.\nCorollary 10 Let M be a one-port synchronous distributed-memory parallel\nmachine whose underlying topology is HCC(1, n), where n \u2265 1. For any\nchosen vertex x, there exists a broadcast tree in HCC(1, n), rooted at x and of\ndepth 2n+2, and a distributed algorithm that performs a one-to-all broadcast\nin M , according to this tree, in time 2n+ 2.\n23\nAgain, our broadcast algorithm in Corollary 10 is \u2018nearly optimal\u2019 as any\none-to-all broadcast in our machine M necessarily takes time at least 2n+1.\nWe should remark that it might be the case that our one-to-all broadcasts\nin Corollaries 8 and 10 are, in fact, optimal for HCC(k, n), where k \u2265 1 and\nn \u2265 1, for if could well be the case that such broadcasts in HCC(k, n) can\nnot be undertaken in time k + 2n, where k \u2265 2, and 2n + 1, where k = 1,\nrespectively, irrespective of our lower bound arguments. These questions\nremain open.\nConsider when our machine M is an all-port synchronous distributed-\nmemory parallel machine whose underlying topology is HCC(k, n), where\nk \u2265 2. In [12] it is shown that given any vertex x, there is a broadcast\ntree SxC in CQn rooted at x and of depth the diameter of CQn; that is,\nSxC has depth \u2308\nn+1\n2\n\u2309. Of course, the binomial tree Bk in Qk has depth k.\nConsequently, Theorem 6 and Corollary 3 immediately yield the following\nresult.\nCorollary 11 Let M be a multi-port synchronous distributed-memory paral-\nlel machine whose underlying topology is HCC(k, n), where k \u2265 2 and n \u2265 1.\nGiven any vertex x, there is a distributed algorithm that performs a one-to-all\nbroadcast in M in time k + 2\u2308n+1\n2\n\u2309. This algorithm is time-optimal.\nSimilarly, Corollary 9 and Corollary 3 yield the following result.\nCorollary 12 Let M be a multi-port synchronous distributed-memory paral-\nlel machine whose underlying topology is HCC(1, n), where n \u2265 1. Given any\nvertex x, there is a distributed algorithm that performs a one-to-all broadcast\nin M in time 2 + 2\u2308n+1\n2\n\u2309. This algorithm is time-optimal.\nWe end this section with a brief remark concerning the algorithmic con-\nstruction of the trees used in our one-to-all broadcasts, above, under the\nassumption that at some point in time a particular processor x in our ma-\nchine M wishes to undertake a one-to-all broadcast of some particular mes-\nsage. Hitherto, we have not considered the time actually taken to construct\nthese trees (we have simply assumed that these trees are available). Consider\nbroadcasting via a binomial tree in Qk or in CQn. For simplicity, suppose\nthat we wish to broadcast using a binomial tree Bk of Qk where x = 00 . . . 00\nis to sit at the root of the tree. The processor x would compute its neighbour\nin dimension 1, namely 00 . . . 01, and send the message to this neighbour. In\n24\nthe next round, both 00 . . . 00 and 00 . . . 01 would compute their neighbours\nin dimension 2, namely 00 . . . 010 and 00 . . . 011, respectively, and send the\nmessage to these neighbours. This would continue with the 4 active proces-\nsors and their neighbours in dimension 3; and so on. Note that the one-to-all\nbroadcast is such that in each round the amount of time spent on deciding\nwhich of a processor\u2019s neighbours is to be sent the message is constant. Thus,\nalthough the eventual binomial tree has a vertex of degree k, no matter what\nthe value of k the one-to-all broadcast can be completed in k rounds and\nO(k) inclusive time (where \u2018inclusive time\u2019 is to include the time spent in\nthe construction of the tree). An analogous statement can be made as re-\ngards CQn. Hence, we may assume that the times in Corollaries 8 and 10\nrefer to inclusive time (subject to replacing the actual times k + 2n+ 1 and\n2n+2 with some constant times these numbers). As regards multi-port syn-\nchronous distributed-memory parallel machines, we can use Efe\u2019s distributed\nalgorithm to embed the tree SyC in CQn, where the root is y, and all lo-\ncal computation undertaken in any round in order to construct the tree SyC\ntakes constant time. Note that in a multi-port model of computation, we\nmay assume that when broadcasting according to a binomial tree only one\nmessage is ever sent from any processor in any clock cycle. Hence, again all\nlocal computation undertaken in any round in order to construct a binomial\ntree in Qk takes constant time. Thus, we may assume that the times in\nCorollaries 11 and 12 can be taken to mean inclusive time (subject to the\nsame proviso as above). We can make analogous remarks as regards devising\nshortest-path routing algorithms in our machines (given the shortest-path\nrouting algorithm in [12] and the standard shortest-path routing algorithm\nin hypercubes).\n6 Conclusions\nIn this paper we have established some basic topological and algorithmic\nresults concerning hierarchical crossed cubes which are hierarchical intercon-\nnection networks obtained by fusing hypercubes and crossed cubes. However,\nwe now make a crucial observation: nowhere throughout this paper have we\nused any structural properties of crossed cubes apart from the facts that they\nhave diameter \u2308n+1\n2\n\u2309, have connectivity n, contain binomial broadcast trees,\nand contain the broadcast trees as constructed by Efe [12]. Consequently, we\ncan allow any interconnection network to play the role of the crossed cube\n25\nso long as we substitute the appropriate parameters relating to diameter,\nconnectivity, and so on in any consequent results. We have chosen to present\nour research via the crossed cube so as to make it concrete and apparent as\nto the advantages of our general approach.\nFor example, one could substitute one of the many variants of hyper-\ncubes for crossed cubes in our construction such as the twisted cube or the\n1-Mo\u00a8bius cubes. It is known that the n-dimensional twisted cube [15] and\nthe n-dimensional 1-Mo\u00a8bius cube [6] have diameter \u2308n+1\n2\n\u2309 and connectivity n\nand n\u22121, respectively [4, 6]. Thus, we would obtain that hierarchical twisted\ncubes and hierarchical 1-Mo\u00a8bius cubes have diameter max{2, k} + 2\u2308n+1\n2\n\u2309,\nwith the former having connectivity n+k and the latter connectivity n+k\u22121.\nWe need not restrict ourselves to substituting only hypercube variants. We\ncan choose any family of interconnection networks to obtain a new hierarchi-\ncal family to which our results apply. Of course, given appropriate broadcast\ntrees for any new (substitute) interconnection network, we obtain one-to-all\nbroadcast results in the corresponding hierarchical interconnection network.\nWe end with some proposals as regards further research. Of course, there\nare many topological and algorithmic properties of hierarchical crossed cubes\nstill to examine, in both fault-free and faulty environments. However, we\nfeel that our generic construction is interesting as it is widely applicable with\nother interconnection networks replacing crossed cubes. Indeed, we could\nchoose to replace the hypercubes with different interconnection networks too;\nhowever, there are no immediate results derivable from those in this paper\nfor such networks as we have explicitly used the internal structure of the\nhypercube in our proofs. We feel that further investigation of our construc-\ntion, with other networks replacing hypercubes and crossed cubes, would be\nbeneficial as we can use the \u2018modular\u2019 aspects of the construction to piece\ntogether the properties of the component networks in order to establish re-\nsults for the hierarchical interconnection network. We feel that this line of\nresearch is exciting and will yield significant results. As yet, and as far as we\nare aware, there has only been one attempt, in [7], to provide a systematic\nconsideration of hierarchical interconnection networks, and we feel that such\na systematic consideration should be further developed.\n26\nReferences\n[1] J. C. Bermond, A. Ferreira, S. Perennes, and J. G. Peters, Neighborhood\nbroadcasting in hypercubes, SIAM J. Discrete Math. 4 (2007) 823\u2013843.\n[2] S. Campbell, M. Kumar and S. Olariu, The hierarchical cliques inter-\nconnection network, J. Parallel Distrib. Comput., 1 (2004) 16\u201328\n[3] C.-P. Chang, T.-Y. Sung and L.-H. Hsu, Edge congestion and topologi-\ncal properties of crossed cubes, IEEE Trans. Parallel Distrib. Syst., 11\n(2000) 64\u201380.\n[4] C.-P. Chang, J.-N. Wang and J.-H. Hsu, Topological properties of\ntwisted cube, Inform. Sciences , 1-2 (1999) 147\u2013167.\n[5] K. Chi, X. Jiang, S. Horiguchi, and M. Guo, Topology design of network-\ncoding-based multicast networks, IEEE Trans. Parallel Distrib. Syst., 5\n(2008) 627\u2013640.\n[6] P. Cull and S.M. Larson, The Mo\u00a8bius cubes, IEEE Trans. Comput., 5\n(1995) 647\u2013659.\n[7] P. Cull and S.M. Larson, Smaller diameters in hypercube-variant net-\nworks, Telecommun. Syst., 10 (1998) 175\u2013184.\n[8] S.P. Dandamudi and D.L. Eager, Hierarchical interconnection networks\nfor multicomputer systems, IEEE Trans. Comput., C-39 (1990) 786\u2013797.\n[9] D.-R. Duh, G.-H. Chen and J.-F. Fang, Algorithms and properties of a\nnew two-level network with folded hypercubes as basic modules, IEEE\nTrans. Parallel Distrib. Syst., 6 (1995) 714\u2013723.\n[10] T. Dvorak, and P. Gregor, Partitions of faulty hypercubes into paths\nwith prescribed endvertices, SIAM J. Discrete Math. 4 (2008) 1448\u2013\n1461.\n[11] K. Efe, A variation on the hypercube with lower diameter, IEEE Trans.\nComput., 11 (1991) 1312\u20131316.\n[12] K. Efe, The crossed cube architecture for parallel computing, IEEE\nTrans. Parallel Distrib. Syst., 3 (1992) 513\u2013524.\n27\n[13] K. Ghose and K.R. Desai, Hierarchical Cubic Networks, IEEE Trans.\nParallel Distrib. Syst., 4 (1995) 427\u2013435.\n[14] M.M. Hafizur Rahman and S. Horiguchi, HTN: a new hierarchical in-\nterconnection network for massively parallel computers, IEICE Trans.\nInf. Syst., E86-D (2003) 1479\u20131486.\n[15] P.A.J. Hilbers, R.J.M. Koopman and J.L.A. Van de Snepscheut, The\ntwisted cube, Proc. Parallel architecture and Languages Europe (J.W. de\nBakker, P.C. Trelearen, eds.), Springer-Verlag, Eindhoven (1987) 152\u2013\n159.\n[16] H.-C. Hsu, C.-H. Tsai, C.-H. Tsai, G.-J. Wu, S.-H. Liu and P.-L. Lai,\nHierarchical crossed cube: a new interconnection topology, Proc. of\n25th Workshop on Combinatorial Mathematics and Computation The-\nory , Taiwan (2008) 70\u201379.\n[17] P. Kulasinghe, Connectivity of the crossed cube, Inform. Process. Lett.,\n4 (1997) 221\u2013226.\n[18] P. Kulasinghe and S. Bettayeb, Multiply-twisted hypercube with five\nor more dimensions is not vertex-transitive, Inform. Process. Lett., 1\n(1995) 33\u201336.\n[19] J.M. Kumar and L.M. Patnaik, Extended hypercube: a hierarchical\ninterconnection network of hypercube, IEEE Trans. Parallel Distrib.\nSyst., 3 (1992) 45\u201357.\n[20] Q. M. Malluhi and M. A. Bayoumi, The hierarchical hypercube: a new\ninterconnection topology for massively parallel systems, IEEE Trans.\nParallel Distrib. Syst., 1 (1994) 17\u201330.\n[21] M.M.H. Rahman, Y. Inoguchi and S. Horiguchi, Modified hierarchical\n3D-torus network, IEICE Trans. Inf. Syst., E88-D (2005) 177\u2013186.\n[22] Y. Saad and M. H. Schultz, Topological Properties of Hypercube, IEEE\nTran. Computers , 7 (1988) 867\u2013872.\n[23] W. Shi and P.K. Srimani, Hierarchical star: a new two level intercon-\nnection network, J. Syst. Arch., 1 (2005) 1\u201314.\n28\n[24] J. Xu, Topological Structure and Analysis of Interconnection Networks ,\nKluwer, Dordrecht, 2001.\n[25] X. Yang, G.M. Megson and D.J. Evans, An oblivious shortest-path rout-\ning algorithm for fully connected cubic networks, J. Parallel Distrib.\nComput., 10 (2006) 1294\u20131303.\n[26] S.-K. Yun and K.H. Park, Hierarchical hypercube networks (HHN) for\nmassively parallel computers, J. Parallel Distrib. Comput., 2 (1996) 194\u2013\n199.\n[27] S. Zhou, A class of arc-transitive cayley graphs as models for intercon-\nnection networks, SIAM J. Discrete Math. 2 (2009) 694\u2013714.\n29\n"}