{"doi":"10.1007\/s00453-003-1025-6","coreId":"193686","oai":"oai:lra.le.ac.uk:2381\/1820","identifiers":["oai:lra.le.ac.uk:2381\/1820","10.1007\/s00453-003-1025-6"],"title":"Online Scheduling with Partial Job Values: Does Timesharing or Randomization Help?","authors":["Chin, F. Y. L.","Fung, S. P. Y."],"enrichments":{"references":[],"documentType":{"type":null}},"contributors":[],"datePublished":"2003","abstract":"We study the following online preemptive scheduling problem: given a set of jobs with release\\ud\ntimes, deadlines, processing times and weights, schedule them so as to maximize the total value obtained. Unlike\\ud\ntraditional scheduling problems, partially completed jobs can get partial values proportional to their amounts\\ud\nprocessed. Recently Chrobak et al. gave improved lower and upper bounds [1.236, 1.8] on the competitive\\ud\nratio for this problem, the upper bound being achieved by using timesharing to simulate two equal-speed\\ud\nprocessors. In this paper we (1) give a new algorithm MIXED-k with competitive ratio 1\/(1 \u2212 (k\/(k + 1))k )\\ud\nwhich approaches e\/(e\u22121) \u2248 1.582 when k \u2192 \u221e, by using timesharing to simulate k equal-speed processors;\\ud\n(2) give an equivalent but much more practical algorithm MIX, which is e\/(e \u2212 1)-competitive (independent\\ud\nof k), by timesharing the processor with different speeds (depending on the job weights), and use its interesting\\ud\nproperties to devise an efficient implementation; (3) improve the lower bound to 1.25 by showing an identical\\ud\nlower bound for randomized algorithms; and (4) prove a lower bound of 1.618 on the competitive ratio when\\ud\ntimesharing is not allowed, thus answering an open problem raised by Chang and Yap, showing that timesharing\\ud\nprovably helps in giving better algorithms for this problem","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:lra.le.ac.uk:2381\/1820<\/identifier><datestamp>\n                2015-12-18T16:41:34Z<\/datestamp><setSpec>\n                com_2381_316<\/setSpec><setSpec>\n                com_2381_9549<\/setSpec><setSpec>\n                col_2381_1116<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nOnline Scheduling with Partial Job Values: Does Timesharing or Randomization Help?<\/dc:title><dc:creator>\nChin, F. Y. L.<\/dc:creator><dc:creator>\nFung, S. P. Y.<\/dc:creator><dc:description>\nWe study the following online preemptive scheduling problem: given a set of jobs with release\\ud\ntimes, deadlines, processing times and weights, schedule them so as to maximize the total value obtained. Unlike\\ud\ntraditional scheduling problems, partially completed jobs can get partial values proportional to their amounts\\ud\nprocessed. Recently Chrobak et al. gave improved lower and upper bounds [1.236, 1.8] on the competitive\\ud\nratio for this problem, the upper bound being achieved by using timesharing to simulate two equal-speed\\ud\nprocessors. In this paper we (1) give a new algorithm MIXED-k with competitive ratio 1\/(1 \u2212 (k\/(k + 1))k )\\ud\nwhich approaches e\/(e\u22121) \u2248 1.582 when k \u2192 \u221e, by using timesharing to simulate k equal-speed processors;\\ud\n(2) give an equivalent but much more practical algorithm MIX, which is e\/(e \u2212 1)-competitive (independent\\ud\nof k), by timesharing the processor with different speeds (depending on the job weights), and use its interesting\\ud\nproperties to devise an efficient implementation; (3) improve the lower bound to 1.25 by showing an identical\\ud\nlower bound for randomized algorithms; and (4) prove a lower bound of 1.618 on the competitive ratio when\\ud\ntimesharing is not allowed, thus answering an open problem raised by Chang and Yap, showing that timesharing\\ud\nprovably helps in giving better algorithms for this problem.<\/dc:description><dc:date>\n2009-12-08T16:13:47Z<\/dc:date><dc:date>\n2009-12-08T16:13:47Z<\/dc:date><dc:date>\n2003<\/dc:date><dc:type>\nArticle<\/dc:type><dc:identifier>\nAlgorithmica, 2003, 37 (3), pp.149-164<\/dc:identifier><dc:identifier>\n0178-4617<\/dc:identifier><dc:identifier>\nhttp:\/\/link.springer.com\/article\/10.1007%2Fs00453-003-1025-6<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2381\/1820<\/dc:identifier><dc:identifier>\n10.1007\/s00453-003-1025-6<\/dc:identifier><dc:language>\nen<\/dc:language><dc:relation>\nRAE 2007<\/dc:relation><dc:format>\nMetadata<\/dc:format>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["0178-4617","issn:0178-4617"]}],"language":null,"relations":["RAE 2007"],"year":2003,"topics":[],"subject":["Article"],"fullText":null}