{"doi":"10.1080\/0968776940020108","coreId":"14373","oai":"oai:generic.eprints.org:153\/core5","identifiers":["oai:generic.eprints.org:153\/core5","10.1080\/0968776940020108"],"title":"KnowledgePro windows: The order of merit?","authors":["Reynolds, Martin"],"enrichments":{"references":[{"id":1885064,"title":"61Martin Reynolds KnowledgePro Windows: the order of merit?","authors":[],"date":"1992","doi":null,"raw":"61Martin Reynolds KnowledgePro Windows: the order of merit? Hale-Shaw, R. (1992), 'The visual development environment - more than just a pretty face?', PC Magazine, 1, 6, 195-237.","cites":null},{"id":201733,"title":"Choosing an authoring tool for a national CAL programme',","authors":[],"date":"1993","doi":null,"raw":"Reynolds, M. and Pedlar, J. (1993), 'Choosing an authoring tool for a national CAL programme', in Proceedings of CAL '93, London, Pergamon (in press).","cites":null},{"id":201731,"title":"Effectiveness of computer-based instruction - an updated analysis',","authors":[],"date":"1991","doi":"10.1016\/0747-5632(91)90030-5","raw":"Kulik, C. and Kulik, J. (1991), 'Effectiveness of computer-based instruction - an updated analysis', Computers in Human Behaviour, 7, 74-94.","cites":null},{"id":201729,"title":"KnowledgePro Windows: the order of merit?","authors":[],"date":"1992","doi":"10.1080\/0968776940020108","raw":null,"cites":null},{"id":201726,"title":"KnowledgePro: a review and assessment',","authors":[],"date":"1989","doi":"10.1016\/0952-1976(89)90020-1","raw":"Barker, P.G. (1989), 'KnowledgePro: a review and assessment', Engineering Applications of Artificial Intelligence, 2, 4, 325-338.","cites":null},{"id":201730,"title":"Learning Conversations,","authors":[],"date":"1991","doi":"10.1080\/03069887900760091","raw":"Harri-Augstein, S. and Thomas, L. (1991), Learning Conversations, London, Routledge.","cites":null},{"id":201734,"title":"Object-orientated Software, Reading MA, Addison-Wesley. Addresses Knowledge Garden Inc.,","authors":[],"date":"1990","doi":null,"raw":"Winblad, A.L., Edwards, S.D. and King, D.R. (1990), Object-orientated Software, Reading MA, Addison-Wesley. Addresses Knowledge Garden Inc., 12-8 Technology Drive, Setauket, NY 11733, USA. Knowledge Garden (Europe) Ltd., Mount Batton House, Fairacres, Windsor, Berks, SL4 4LE. Ursula Hayes KnowledgePro User Group PEVEIT Department of Computer Science The 'Victoria University of Manchester Oxford Road Manchester M13 9PL","cites":null},{"id":201728,"title":"Object-Oriented Methods,","authors":[],"date":"1991","doi":"10.1016\/0165-0114(91)90122-7","raw":"Graham, I. (1991), Object-Oriented Methods, Reading MA, Addison-Wesley.","cites":null},{"id":201727,"title":"Report on Authoring Tools for the Electronic Design Education Consortium, unpublished report,","authors":[],"date":"1993","doi":null,"raw":"Daeche, N. and Reynolds, M. (1993), Report on Authoring Tools for the Electronic Design Education Consortium, unpublished report, August 1993.","cites":null},{"id":201732,"title":"The National Oral Surgery Computer-Assisted Learning Programme - Final Report, unpublished report, Nuffield Foundation,","authors":[],"date":"1993","doi":null,"raw":"Pedlar, J. and Reynolds, M. (1993), The National Oral Surgery Computer-Assisted Learning Programme - Final Report, unpublished report, Nuffield Foundation, February 1993.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1994","abstract":"The producers of KnowledgePro look set with their latest release of KPWIN (KnowledgePro Windows) to fulfil Richard Hale\u2010Shaw's prophecy that it will become \u2018one of the most powerful visual development environments\u2019 (Hale\u2010Shaw 1992). Comparisons are drawn in this paper between the KPWIN family of products and other authoring tools. The conclusion is that KPWIN is worthy of being included in any courseware developer's tool set. Reasons for preferring a tool from the KnowledgePro family of products for courseware development over three main competitors \u2010 Authorware, Toolbook and Visual Basic \u2010 are explained, and the merits of KPWIN and KPWIN++ (a version that generates C++ code) are examined","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/14373.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/153\/1\/ALT_J_Vol2_No1_1994_KnowledgePro%20windows_%20The%20orde.pdf","pdfHashValue":"5bbb0cba771939b0b2e290618b1eec8e35b62079","publisher":"Universit of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:153<\/identifier><datestamp>\n      2011-04-04T09:27:15Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/153\/<\/dc:relation><dc:title>\n        KnowledgePro windows: The order of merit?<\/dc:title><dc:creator>\n        Reynolds, Martin<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        The producers of KnowledgePro look set with their latest release of KPWIN (KnowledgePro Windows) to fulfil Richard Hale\u2010Shaw's prophecy that it will become \u2018one of the most powerful visual development environments\u2019 (Hale\u2010Shaw 1992). Comparisons are drawn in this paper between the KPWIN family of products and other authoring tools. The conclusion is that KPWIN is worthy of being included in any courseware developer's tool set. Reasons for preferring a tool from the KnowledgePro family of products for courseware development over three main competitors \u2010 Authorware, Toolbook and Visual Basic \u2010 are explained, and the merits of KPWIN and KPWIN++ (a version that generates C++ code) are examined.<\/dc:description><dc:publisher>\n        Universit of Wales Press<\/dc:publisher><dc:date>\n        1994<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        cc_by_nc_nd<\/dc:rights><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/153\/1\/ALT_J_Vol2_No1_1994_KnowledgePro%20windows_%20The%20orde.pdf<\/dc:identifier><dc:identifier>\n          Reynolds, Martin  (1994) KnowledgePro windows: The order of merit?  Association for Learning Technology Journal, 2 (1).  pp. 57-62.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776940020108<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/153\/","10.1080\/0968776940020108"],"year":1994,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"ALT-J VOLUME 2 NUMBER 1\nKnowledgePro Windows: the order of merit?\nMartin Reynolds\nDepartment of Computer Science, The Victoria University of\nManchester, UK\nAbstract\nThe producers of KnowledgePro look set with their latest release of KPWIN (KnowledgePro\nWindows) to fulfil Richard Hale-Shaw's prophecy that it will become 'one of the most power-\nful visual development environments' (Hale-Shaw 1992). Comparisons are drawn in this\npaper between the KPWIN family of products and other authoring tools. The conclusion is\nthat KPWIN is worthy of being included in any courseware developer's tool set. Reasons for\npreferring a tool from the KnowledgePro family of products for courseware development over\nthree main competitors - Authorware, Toolbook and Visual Basic - are explained, and the\nmerits of KPWIN and KPWIN++ (a version that generates C++ code) are examined.\nIntroduction\nCourseware development is invariably a difficult and costly task. The quality of the end-\nproduct often depends critically on the types of tool used to develop it. Over the last decade, a\nwide variety of courseware and authoring tools has been produced (Barker 1989), and the\nrange continues to grow. Methods and reasons for selecting one particular tool in preference\nto another are therefore of considerable importance.\nThe introduction of courseware can affect changes which produce organizational, computa-\ntional, or motivational benefits. The effectiveness of courseware in an educational context is\nsolely dependent on its use (Kulik and Kulik 1991). And the more experimental the educa-\ntional objectives are, the more important it is for courseware to act as a reflexive tool rather\nthan as a rubric. For courseware to be accepted, its quality must justify its use in a course as a\nwhole, in supporting particular tasks and in helping learners how to learn. When substantial\nprojects or complex products are envisaged, the cost-to-quality ratio is smallest when the\nauthor's role is divided between a specialist subject expert, programmer, educationist, and\ngraphic artist\/photographer. Storing the work of each professional separately allows the most\nto be made of each team member.\nIt is as unfortunate for the programmer as for other team members that the information\navailable about software tools is distorted by the hidden third-party code of surreal demonstra-\n57\nMartin Reynolds KnowledgePro Windows: the order of merit?\ntions, the hidden agenda of marketing hype and the hidden naivety of the eager but inexperi-\nenced author. However, using the nature of costs, benefits and effects as a guide, the relative\nmerits of each product can be determined, and the effect that visual programming, object\norientation, integrated development environments, multimedia and hypermedia can have on\nthe quality of learners' environments can also be revealed.\nProgrammers have always used tools to help generate program code. This has been particu-\nlarly true for code that represents the human-computer interface and its screen elements such\nas windows, buttons and boxes. In order to improve the quality of communication between\nthe programmer and the other team members involved in the development of a product, this\nvisual dimension to programming has been extended in some products to encompass the\nparadigm of interaction as well as visual appearance. Visual programming tools provide the\nother team members with a structure with which to order the resources content. The program-\nmer shares this structure, and in building an interface for the user is restricted to the tools\nparadigm of conversing with the content. When the other team members' intentions for the\ninteraction match those imposed, the programmer will find that realizing the team members'\nwishes in code terms is straightforward. Conversely, when there is a mismatch in intention,\nthe programmer will find implementation difficult if not impossible. The more visual the tool,\nthe more matched the team members' intentions and the tools' capabilities for interaction will\nneed to be, and the fewer means the programmer has to specify the implementation. The\nimplicit assumptions that visual programming tools contain about team members' intentions\ntend to reflect the structure of the programming language underlying the tool.\nKnowledgePro and other products\nKnowledgePro began as a DOS product (KPDOS) in 1986. After establishing itself in an\nArtificial Intelligence market, a Windows version (KPWIN) was released in 1990 when it won\nPC Magazine's Best Product of 1990. In 1992, a capacity to generate C code was added\n(KPWIN++). Its three main competitors are now Authorware Professional, Toolbook and\nVisual Basic.\nAuthorware Professional (\u00a3800 educational) provides iconic flowcharting as the structure for\nauthoring. It constrains interaction to a single instance, a single window of fixed size, and a\nlinear pathway, and it represents its intentions by just 11 icons. It provides many variables that\ncan be set to alter the way the program operates but, paradoxically, this warns of its limited\nability to be programmed - if your intentions do not match one of the 11 icons, beware!\nUnlike the other products mentioned in this paper, it does not support all the standard Win-\ndows screen elements. It requires write access to the directory in which it resides when\nrunning, and does not provide file-pointers or database functions, but rather encourages the\nhard coding of data in an application. Iterative procedures are noticeably slow, and in not\nbeing able to act as DDE (Dynamic Data Exchange) server, halt while other applications run\nor parse more than 13 characters to other applications, Authorware exhibits a limited ability to\nconverse with other programs. A 3% royalty is payable on applications that are re-sold. This\nreflects the product's suitability for presentations or other passive applications whose produc-\ntion involves no team-work and no programmer, whose delivery involves no multitasking or\nnetworking, and whose future involves no maintenance (Daeche and Reynolds 1993).\nToolbook (\u00a3250 educational) adopts a form-filling approach to authoring which is especially\nsuited to the production of electronic books. Toolbook thus uses a book metaphor for its\n58\nALT-J VOLUME 2 NUMBER 1\nforms, though it would be misleading to suggest that this limits its use to linear presentations\nof passive text. The links between 'pages' can be displayed in iconic form and manipulated\nusing the mouse - one abstraction removed from Authorware's iconization of screen elements.\nEach Toolbook page has a foreground and a background. In the foreground, screen elements\nare placed and sized by selecting them from mouse-driven toolboxes. In the background,\nToolbook's event-driven Openscript language is used to define the reaction of screen ele-\nments. Although background scripts can be shared between pages or between books, this\nrepresents only a limited ability to inherit or export variables and code. Openscript has been\noptimized for the description of a user-interface rather than for the description of the conse-\nquences of a user's action. As if to underline this, Toolbook provides a routine to exchange\nWindows messages and Openscript messaging so that it can easily front code for processes\nstored as DLL (Dynamic Link Libraries) or running as hidden or secondary programs, typi-\ncally written with tools such as Turbo Pascal. Openscript is syntactically simpler than Basic\nbut similar in structure - it is reliant on event-driven equivalents of GOTOs and GOSUBs\nrather than function descriptions.\nVisual Basic (from \u00a390 educational) provides a visual environment not unlike that of\nToolbook, but for a version of Basic. For toolbox read custom control, although unlike\nToolbook there is no graphical way of connecting forms. Double-clicking on a screen element\nplaced on a Visual Basic form allows Basic code to be entered which describes the form's\nreaction to the user-interface. As with Toolbook and Authorware, much of the code that will\neventually make up the application - the code that represents the custom-controlled screen\nelements - remains unseen and uneditable. Since it belongs to the Basic family, Visual Basic\nis a typed language, and there are limitations on how code or data can be shared between\nforms. The assumption, as with Toolbook, is that different forms will represent different\ncontent or jobs. It becomes awkward if not contrived to code anything other than simple data-\ndriven applications. Although toolboxes invite the amateur programmer, Toolbook and Visual\nBasic are properly targeted at the professional who wants to get a quick prototype up and\nrunning and who wishes to take the advice of non-programming colleagues when it comes to\nscreen design.\nKnowledgePro (from \u00a3100 educational) uses a topic paradigm which, unlike the form or icon,\nis a definitive rather than a visual representation of the underlying KnowledgePro language.\nThere are tools provided to generate topics for screen elements, and definitives in the lan-\nguage aimed at fast prototyping. In function these are similar to Authorware's icons or\nToolbook's toolboxes, but they have the advantage of generating readable and editable code.\nThis makes KnowledgePro accessible to the amateur programmer, yet by not imposing a\nstructure, allows authors the freedom to define their own, typically by developing a shell for\ntheir courseware. The programmer can mix and match techniques to optimize the implemen-\ntation's performance. It is implicitly assumed that the programmer may wish to use object-\norientated programming, and artificial intelligences like backward chaining, neural networks\nand matched lists, yet is free not to do so. The limits of C on inheritance, persistence and\nencapsulation do not exist in KPWIN, yet one can write C in-line with KnowledgePro ++\ncode. However, KnowledgPro is typeless, and syntactically closer to LISP than to C.\nOOD (Object Orientated Design) has been found to aid the process of communication be-\ntween other team members and programmer more than other formal methods (Graham 1991).\nIt is particularly well suited to the evolutionary rather than revolutionary or revelationary\ndevelopment cycles. Work in the educational field is almost exclusively co-operative and\n. 59\nMartin Reynolds KnowledgePro Windows: the order of merit?\nevolutionary in nature, continual user-involvement refinement and maintenance being impor-\ntant factors. KPWIN clearly supports OOD, and in so doing maximizes the re-use of code and\nsimplifies the maintenance of code that represents many similar but different situations. Its\nstrength in evolutionary development is underlined by the KPWIN++ version's ability to\ngenerate C code integrally from the KPWIN 4GL, and use standard C compilers to make and\ncompile it. Visual Basic, Toolbook and Authorware are object-based rather than object-\norientated and better suited to revolutionary and revelationary developments, in which\nsubstantial re-coding is necessary when an author's requirements change or when the speed of\ncompiled rather than interpreted code is required (Winblad et al 1990). As an application's\ncomplexity grows so does the demand for effective communication between programmer and\nother team members. Concomitantly, the programmer will demand an increasing ability to\noptimize the code run.\nAt one time, programmers would first have to write a program's code using one tool, then\nmake it with another, link and run it with a third, and (if they were fortunate) debug it with a\nfourth. IDEs (Integrated Development Environments) bring all these tools together in one\ninterface and can vastly improve a programmer's productivity. As a corollary, costs can be\nreduced while the quality of code and the ease with which code can be maintained or changed\ncan be increased.\nKPWIN supplies an IDE familiar to most C-level programmers - one can trace or step through\ncode as it is run, access context-sensitive help, build libraries of functions defined in\nKnowledgePro to be re-used, and overload functions defined in KPWIN with personalized\nimplementations. Technical support is available in the UK via Knowledge Garden (Europe),\nand there is a UK user group. There are a number of code libraries available to extend the\ncore KPWIN language including dBase, Clipper, Q&E SQL and Archive. KPWIN source\ncode is provided for all the tools of the IDE as well as the shareware multimedia tool Textpro\nwhich exemplifies the replaying of digital video and animation.\nThe Toolbook and Visual Basic IDEs are extensible, but by the addition of custom controls or\ntoolboxes rather than code libraries per se. Toolboxes for standard screen elements, rudimen-\ntary graphics and text come as standard. Ones for audio and video elements are available.\nVisual Basic (Professional edition) comes with custom controls for deriving charts, graphs and\ntables from Microsoft Access databases or SQL servers. The breadth of functionality repre-\nsented in their third-party extensions is perhaps the greatest strength of Visual Basic and\nToolbook. Both products sport string-handling functions, online help and debugging tools. But\neven with Microsoft's support, Visual Basic cannot overcome the constraint of its underlying\nBasic-like language. Toolbook and Visual Basic seek to reconcile the difficulties in re-using\ncode defined in their own terms by making the inclusion of functions written in more primi-\ntive languages relatively straightforward.\nAuthorware can be extended only with functions built into lower-level languages like C or\nPascal. Consequently there are no comparable third-party libraries available. It has no\ndebugger and no online help, nor any UK technical support from its producers Macromedia.\nAuthorware does supply rudimentary tools to create simple graphics or animations, and icons\nto represent erase effects and video replay, though these encourage an amateurish approach to\nmultimedia. Successful multimedia avoids the pitfalls of inappropriate use by combining the\nexperience of film makers, photographers, graphic artists and animators with that of a behav-\niourist, and the quality sought by these professionals is more likely to be realized through the\ncustom controls available in Toolbook and Visual Basic or the functions in KPWIN which\n60\nALT-J VOLUME 2 NUMBER 1\ncreate elements and display those created by third-party applications (though it is worth\nmentioning that many multimedia applications remain undelivered because the cost of\ndelivery is unsustainable).\nAs for hypermedia, that subclass of multimedia which uses windows, icons and the mouse to\nlink one phrase in a text or region in an art form with another in order to bring out an author's\nview of their relationship, some form of conversation with the learner needs to be facilitated,\nand some form of mutual adaptation needs to take place, in order to transform the\n'hyperspace' into a useful learning environment (Harri-Augstein and Thomas, 1991). Al-\nthough Toolbook does have a hypertext toolbox, KPWIN has a unique ability to create\nhyperlinks on the fly as well as from files and from program code. And it has a specialized set\nof commands for dealing with the list, tree and network structures. These aid the implementa-\ntion of artificially intelligent or expert elements as adaptable models of learners' or teachers'\nmeaning. KPWIN's support for OOD can be a great advantage to programmers asked to\ndevelop groupware, a means for groups to model meaning (Baecker, 1993). OOD comple-\nments the record locking and data compression of KPWIN's dBase and Archive extensions by\naiding the implementation of programs which can run concurrently and across a network. In\nprogramming terms, KPWIN is an ideal vehicle for the illustration of various techniques\nwithout the encumbrance of learning the syntax and paradigms of languages as divergent as\nCLISP and C.\nConclusion\nThe only certainty about the use of newer technology is that it is more expensive than older\ntechnology. Educational effectiveness is dependent on use rather than its technological\nimplementation. The total total amount of time spent using any tool represents only about\n20% of the total time spent on a project, whatever the tool and however easy or complex the\nproject, so that the choice of tool does not have much bearing on cost. But tools differ in what\nthey allow one to do - each has its own specialities and limitations. The choice of tool can\ntherefore determine what one is able to produce, and so what benefit might be gained (Pedlar\nand Reynolds 1993). It is unlikely that any tool can replace the assistance of a specialist\nprogrammer unless the author's intention matches that of the tool exactly. The chance to buy\nadditional libraries or toolkits may make a match more likely than in the past, but if there is a\nmismatch between the tools and the author's intention, or if multifarious, large, complex or\ndistributed projects are contemplated, it is certain that KnowledgePro's flexibility and matu-\nrity as a language put it ahead of Toolbook, 'Visual Basic and Authorware, in an order of merit\nwhich values cost savings and benefits without compromise on performance or maintenance.\nReferences\nBaecker, R.M. (1993) (ed), Readings in Groupware and Computer Supported Co-operative\nWork, San Mateo CA, Morgan Kaufmann.\nBarker, P.G. (1989), 'KnowledgePro: a review and assessment', Engineering Applications of\nArtificial Intelligence, 2, 4, 325-338.\nDaeche, N. and Reynolds, M. (1993), Report on Authoring Tools for the Electronic Design\nEducation Consortium, unpublished report, August 1993.\nGraham, I. (1991), Object-Oriented Methods, Reading MA, Addison-Wesley.\n61\nMartin Reynolds KnowledgePro Windows: the order of merit?\nHale-Shaw, R. (1992), 'The visual development environment - more than just a pretty face?',\nPC Magazine, 1, 6, 195-237.\nHarri-Augstein, S. and Thomas, L. (1991), Learning Conversations, London, Routledge.\nKulik, C. and Kulik, J. (1991), 'Effectiveness of computer-based instruction - an updated\nanalysis', Computers in Human Behaviour, 7, 74-94.\nPedlar, J. and Reynolds, M. (1993), The National Oral Surgery Computer-Assisted Learning\nProgramme - Final Report, unpublished report, Nuffield Foundation, February 1993.\nReynolds, M. and Pedlar, J. (1993), 'Choosing an authoring tool for a national CAL pro-\ngramme', in Proceedings of CAL '93, London, Pergamon (in press).\nWinblad, A.L., Edwards, S.D. and King, D.R. (1990), Object-orientated Software, Reading\nMA, Addison-Wesley.\nAddresses\nKnowledge Garden Inc., 12-8 Technology Drive, Setauket, NY 11733, USA.\nKnowledge Garden (Europe) Ltd., Mount Batton House, Fairacres, Windsor, Berks,\nSL4 4LE.\nUrsula Hayes\nKnowledgePro User Group\nPEVEIT\nDepartment of Computer Science\nThe 'Victoria University of Manchester\nOxford Road\nManchester M13 9PL\n62\n"}