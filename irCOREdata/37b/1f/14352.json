{"doi":"10.1080\/0968776950030205","coreId":"14352","oai":"oai:generic.eprints.org:188\/core5","identifiers":["oai:generic.eprints.org:188\/core5","10.1080\/0968776950030205"],"title":"Dissertations and databases: The historian as software engineer","authors":["Phillips, Gervase"],"enrichments":{"references":[{"id":201157,"title":"24\/26 G.T.2052, 'Notes on the morale of British Troops in France as disclosed by the censorship,","authors":[],"date":"1917","doi":null,"raw":"Cab. 24\/26 G.T.2052, 'Notes on the morale of British Troops in France as disclosed by the censorship, 13th September, 1917'.","cites":null},{"id":201158,"title":"24\/36 G.T.3044, 'The British armies in France as gathered from censorship,","authors":[],"date":"1917","doi":null,"raw":"Cab. 24\/36 G.T.3044, 'The British armies in France as gathered from censorship, 12th December, 1917'.","cites":null},{"id":201159,"title":"A Quantitative Analysis Package for Historians,","authors":[],"date":"1992","doi":null,"raw":"Phillips, G. (1992), A Quantitative Analysis Package for Historians, M.Sc. Thesis, University College of Wales, Aberystwyth.","cites":null},{"id":201160,"title":"The Pursuit of History,","authors":[],"date":"1984","doi":"10.1017\/s0021853700037269","raw":"Tosh, J. (1984), The Pursuit of History, London, Longman.","cites":null},{"id":201156,"title":"Time On The Cross: The Economics of Negro Slavery,","authors":[],"date":"1974","doi":"10.2307\/40023297","raw":"Fogel R.W. and Engerman S.L. (1974), Time On The Cross: The Economics of Negro Slavery, London, Wildwood House.","cites":null}],"documentType":{"type":0.8888888889}},"contributors":[],"datePublished":"1995","abstract":"This article argues that historians have always been closer to programmers than has perhaps been recognized, and that historical software projects undertaken within the framework of the traditional third\u2010year dissertation are useful training not just for the potential historian, but also for the potential software engineer","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/14352.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/188\/1\/ALT_J_Vol3_No2_1995_Dissertations%20and%20databases_%20T.pdf","pdfHashValue":"c0002bd832f81b1c5a59b7c274e4471d57862848","publisher":"Universit of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:188<\/identifier><datestamp>\n      2011-04-04T09:25:11Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/188\/<\/dc:relation><dc:title>\n        Dissertations and databases: The historian as software engineer<\/dc:title><dc:creator>\n        Phillips, Gervase<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        This article argues that historians have always been closer to programmers than has perhaps been recognized, and that historical software projects undertaken within the framework of the traditional third\u2010year dissertation are useful training not just for the potential historian, but also for the potential software engineer.<\/dc:description><dc:publisher>\n        Universit of Wales Press<\/dc:publisher><dc:date>\n        1995<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        cc_by_nc_nd<\/dc:rights><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/188\/1\/ALT_J_Vol3_No2_1995_Dissertations%20and%20databases_%20T.pdf<\/dc:identifier><dc:identifier>\n          Phillips, Gervase  (1995) Dissertations and databases: The historian as software engineer.  Association for Learning Technology Journal, 3 (2).  pp. 48-52.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776950030205<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/188\/","10.1080\/0968776950030205"],"year":1995,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"Dissertations and databases:\nthe historian as software engineer\nGervase Phillips\nManchester Metropolitan University\nThis article argues that historians have always been closer to programmers than has perhaps been\nrecognized, and that historical software projects undertaken within the framework of the traditional\nthird-year dissertation are useful training not just for the potential historian, but also for the potential\nsoftware engineer.\nThe historian of tomorrow will be a programmer or he will be nothing.\n(Emmanuel Le Roy, Le Territoire de l'historien (Paris, 1973))\nThe final weeks of the summer term see the normal frantic rush of second-year students\nlooking for a suitable topic for a dissertation. Traditionally, the aim is to produce a piece\nof work from ten to fifteen thousand words, comprising a significant amount of original\nresearch, drawn from primary material, and demonstrating the ability to formulate and\nsustain a cogent argument, evaluate evidence and communicate original ideas. All this\nshould be within the conventional, scholarly framework, logically structured and\nscrupulously referenced.\nWith increased student numbers and strained traditional resources, one possible solution\nto the problem of finding a topic is a software project. This choice utilizes IT skills in a\nmanner which the student can immediately appreciate, and integrates IT into the\nmainstream of the history student's experience. There is no real reason why a software\nproject cannot be considered by the same criteria as a normal dissertation, and open to\nsimilar judgements: essentially historical judgements. But the tight methodological rules\nwhich have governed the writing of academic history can be of more than passing\nrelevance to the software engineering industry itself. As the use of IT becomes more\nwidespread in the teaching of history, and, as Le Roy predicted, more historians become\nprogrammers, it is important to avoid some of the pitfalls into which the burgeoning\nsoftware industry fell. Interestingly, those rigorous methodological rules insisted upon in\nthe production of history dissertations are not only good practice for potential historians,\nbut also for potential software engineers.\n48\nALT-] Volume 3 Number 2\nThe production of software was, and to some extent still is, bedevilled by the\nidiosyncrasies of individual programmers. Since there was very rarely a single right way of\nwriting a program, a single correct algorithm to solve a given problem, much code has\nbeen produced with features reflecting only the individual proclivities of the programmer.\nThere is a parallel here with the 'production' of history. Starting with the same problem\nand the same primary sources, different historians have produced widely differing\ninterpretations of the same events. Thus American historians, influenced by political\nbeliefs, sectional loyalty, or the social mores of the times in which they wrote, have given\na plethora of differing accounts of the outbreak of the American Civil War. The\ndifference, vis-a-vis the production of software, however, is that there is an established\nmethodological framework within which history is written. The conventions of historical\nwriting, such as footnoting and referencing, facilitate comprehension. The origins of\narguments, interpretations, and particular lines of thought can be traced back to their\nsources. New interpretations, revisions, and previously unknown original sources can all\nbe incorporated into the existing corpus of historical knowledge within the conventional\nmethodological framework.\nSoftware engineers, on the other hand, had no such framework or conventions. If a\nprogram needed to be revised, up-dated or debugged, the programmer was faced with a\nmass of code, possibly in a low-level language, where it could be very difficult to identify\nwhat any particular line was doing at any stage, making the amendment of the code\nimmensely problematic. Given a lapse of time, even the original authors of code could be\nunable to unravel their own work', and even greater problems ensued when different\nprogrammers had to struggle with other peoples' unannotated and undocumented code.\nKnowledge of a historian's sources makes it easier to 'debug' his or her work. What is\nrequired is precisely the kind of conscientious referencing that is (or should be) second\nnature to the historian. Code should be elucidated by textual comment in the manner of\ngood history. Object orientation will make this more plausible and more obvious: objects\nhave a history as well as formal parentage.\nAll this has interesting implications in teaching at undergraduate level. History students\nare likely to have a better grounding in documenting their work than their more\ntechnically gifted peers in the sciences. It is important that this aspect is not neglected in\nteaching the use of IT, and if the use of computers is taught as an intrinsic part of the\nhistorian's method of production, there is no reason why it should be. If IT is taught as a\nbolt-on unit, with little reference to the subject a student is reading, it may not be\nrecognized that some of the skills the student is taught as a historian remain relevant,\neven essential, when using computers. It may prove, ironically, that students who produce\nsubstantial and well-referenced text for history assessments come to regard the use of\ncomputers as so distinct from their normal work, that they, like many software engineers,\nfail to produce adequate documentation in that part of their studies. However, if the need\nto produce sound documentation is stressed, then the training that a degree in history\ngives students should potentially make them promising software engineers.\nConsider, for example, a database project. Databases are one of the most exciting and\nuseful IT applications for the historian, a mainstay of undergraduate history and\ncomputing courses. The nature of historical sources makes the creation of historical\ndatabases a challenging exercise for historian and programmer alike. All the standard\n49\nGervase Phillips Dissertations and databases: the historian as software engineer <\nhistorical problems arise and the standard historical criteria apply: the material included\nin a database must be subject to the same care and attention as any primary source\nmaterial. An obvious example is that the historian must ensure that any statistical\nevidence he or she is working with is reliable, comparable, representative and fruitfully\ncategorized. The programmer\/historian must address the motives of those who compiled\nthe figures and constructed the categories and must be aware that the definitions of\ncategorizations and classifications are themselves matters of history. Furthermore, the\nprogrammer\/historian must think carefully about the design of the database. Historical\ndatabases, resources for analysis rather than functionally analytical, may seem both\nobjective and empirical, yet the data stored in them is selective. The design of the\ndatabase, the names and data definition of fields, and the structure of tables in a\nrelational database, are essentially historical choices, judgements open to the criticism of\nother historians. Attempts were made to quantify the morale of the British Army in 1917\nby counting the occurrence of words indicative of good or bad morale in their letters\nhome during censoring (Cab. 24\/26 G.T.2052 and Cab. 24\/36 G.T.3044). Were the views\nexpressed in letters that men knew would be censored, to relatives they did not want to\ndistress, really likely to be representative of their thoughts? To follow this judgement in\ndatabase fields of 'good' and 'bad' would be to fail in historical analysis, just as would be\nthe suppression of the use of this contrast.\nThe programmer\/historian must justify a design (argue a case), select and interpret data\n(evaluate evidence), and present the data clearly in a format in which others may use it\n(communicate original ideas). In practice, this means that the construction of a working\ndatabase imposes further problems on the trainee historian, providing at least as great an\nintellectual challenge as a more conventional piece of research. All this must be done\nwithin a rigorous framework including annotated code, referenced sources and textual\nand technical explanations of design strategy. This is an exercise which addresses\nfundamental methodological questions concerning the academic discipline of history. The\napplication of computers to the study of history that has accompanied the shift in\nemphasis from the Great Men of the past to the masses, is well illustrated in a project\nbased around census returns. However, further issues are raised, particularly by the use of\nstatistics. Some American historians, the 'cliometricians' (most notably Robert W. Fogel\nand Stanley L. Engerman), have argued that there are areas of human behaviour best\nunderstood as a system in which both variables and their relationships can be quantified\n(Fogel and Engerman, 1974; Tosh, 1984, pp. 198-202). What could be a better basis for a\ndiscussion of their ideas than students using computers to formulate their own historical\nmodels and theories? And in the realms of more conventional history, a database project\ngives awareness of methodological debates. The selection and interpretation of historical\ndata raises questions about metahistory itself; if the building up of a source of empirical\nevidence is demonstrably subjective, what of the wider implications for the concept of\nhistorical objectivity and the existence of the historical fact? The value of this kind of\nexercise in history is readily apparent. The added boon is that such a project equips the\nstudents with transferable skills of a valuable nature, both in programming and in writing\ndocumentation. For such purposes, the documentation produced should be of com-\nparable length to a standard dissertation.\nAs an example of what I have in mind, the following notes are a brief suggested outline\n50\nAtrJ Volume 3 Number 2\nfor a third-year dissertation project. Databases are probably the most suitable exercise,\nbut there are alternatives. More experienced programmers might like to attempt\nsimulation programs to test some of the great What-ifs? of history, or interactive\neducational programs that quiz users (perhaps secondary-school pupils) on their\nhistorical knowledge and mark them appropriately. The possibilities are very wide.\nAn example outline for a third-year software project based around\nthe design and implementation of a historical database\nProgramming\nImplemented Paradox 4 database with data normalized to third Normal Form.\nDocumentation\nSee Sommerville (1989).\nRequirements specifications\nFunctional system requirements\nThese are the system services which are expected by the user of the system. Since the user\n(in this case a historian) is uninterested in the technical detail, technical implementation\nconcepts should be avoided in this document. In short, this document should be a\nstraight, plain-English statement of what the system is required to do.\nNon-functional requirements\nThese set out the constraints under which the system must operate, for example all input\nbeing expressible using the ASCII character set. These documents should be complete and\nconsistent: that is, they should contain all the requirements, and no contradictions.\nFormal specification\nThis is a technical analysis of requirements, expressing which Paradox functions will be\nutilized to meet the above specifications. This document may be finalized after a process\nof prototyping and requirements validation (see below).\nSystem design\nThis is a detailed explanation of the design of the database, the tables implemented,\nrelationships and key fields. The design strategy adopted for a database may be\nprototyping, where the designer experiments with different implementations to find the\nmost suitable technical approach, and the approach which best fulfils the specified\nrequirements. Put simply, this allows the programmer to implement a database, discuss\nany shortcomings with potential users, then adapt or re-design the database until it is\nsatisfactory. This is, perhaps, the most appropriate methodology for fledgeling\nprogrammers. After all, historical databases are not safety-critical. If at first students do\nnot succeed, they can try again, with no harm done. So long as the process is adequately\ndocumented, improvisations, experiments, and thinking on the feet is to be encouraged.\nTesting, validation and verification\nThis is a full account of the strategies adopted in the testing of the finished database and\nthe results of that testing. Particular attention should be paid to verification (does this\nsystem meet the requirements of the user?) and validation (is the technical implementation\nof the system correct?).\n51\nGervuse Philips Dissertations and databases: the historian as software engineer\nOperation and maintenance manual\nThis documentation should instruct the user, in how to operate the system and, if\nnecessary, make alterations and updates. Again, since the system is to be used by\nhistorians rather than computer scientists, it should be non-technical, as far as possible.\nReport\nThe final document should be a full evaluative report on the implementation of the\ndatabase. The student might like to take the following areas into consideration:\n\u2022 How successful was the implementation?\n\u2022 Are there alternative design\/implementation strategies which might produce a better\nsystem for the historian?\n\u2022 How useful are such databases to the historian?\n\u2022 What are the methodological problems associated with implementing databases of\nhistorical data?\nReferences\nFogel R.W. and Engerman S.L. (1974), Time On The Cross: The Economics of Negro\nSlavery, London, Wildwood House.\nCab. 24\/26 G.T.2052, 'Notes on the morale of British Troops in France as disclosed by\nthe censorship, 13th September, 1917'.\nCab. 24\/36 G.T.3044, 'The British armies in France as gathered from censorship, 12th\nDecember, 1917'.\nPhillips, G. (1992), A Quantitative Analysis Package for Historians, M.Sc. Thesis,\nUniversity College of Wales, Aberystwyth.\nSommerville, I. (1989), Software Engineering, London, Addison-Wesley.\nTosh, J. (1984), The Pursuit of History, London, Longman.\n52\n"}