{"doi":"10.1007\/978-3-540-30482-1_39","coreId":"65314","oai":"oai:dro.dur.ac.uk.OAI2:6234","identifiers":["oai:dro.dur.ac.uk.OAI2:6234","10.1007\/978-3-540-30482-1_39"],"title":"Timed patterns : TCOZ to timed automata.","authors":["Dong, J. S.","Hao, P.","Qin, S.","Sun, J.","Wang, Y."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":["Davies,  J.","Schulte,  W.","Barnett,  M."],"datePublished":"2004-01-01","abstract":"The integrated logic-based modeling language, Timed Communicating Object Z (TCOZ), is well suited for presenting complete and coherent requirement models for complex real-time systems. However, the challenge is how to verify the TCOZ models with tool support, especially for analyzing timing properties. Specialized graph-based modeling technique, Timed Automata (TA), has powerful mechanisms for designing real-time models using multiple clocks and has well developed automatic tool support. One weakness of TA is the lack of high level composable graphical patterns to support systematic designs for complex systems. The investigation of possible links between TCOZ and TA may benefit both techniques. For TCOZ, TAs tool support can be reused to check timing properties. For TA, a set of composable graphical patterns can be defined based on the semantics of the TCOZ constructs, so that those patterns can be re-used in a generic way. This paper firstly defines the composable TA graphical patterns, and then presents sound transformation rules and a tool for projecting TCOZ specifications into TA. A case study of a railroad crossing system is demonstrated","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65314.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6234\/1\/6234.pdf","pdfHashValue":"c6b45f2e40a2f1af124ca849007dbb1e5a49d0c1","publisher":"Springer","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6234<\/identifier><datestamp>\n      2015-03-31T11:51:38Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Timed patterns : TCOZ to timed automata.<\/dc:title><dc:creator>\n        Dong, J. S.<\/dc:creator><dc:creator>\n        Hao, P.<\/dc:creator><dc:creator>\n        Qin, S.<\/dc:creator><dc:creator>\n        Sun, J.<\/dc:creator><dc:creator>\n        Wang, Y.<\/dc:creator><dc:description>\n        The integrated logic-based modeling language, Timed Communicating Object Z (TCOZ), is well suited for presenting complete and coherent requirement models for complex real-time systems. However, the challenge is how to verify the TCOZ models with tool support, especially for analyzing timing properties. Specialized graph-based modeling technique, Timed Automata (TA), has powerful mechanisms for designing real-time models using multiple clocks and has well developed automatic tool support. One weakness of TA is the lack of high level composable graphical patterns to support systematic designs for complex systems. The investigation of possible links between TCOZ and TA may benefit both techniques. For TCOZ, TAs tool support can be reused to check timing properties. For TA, a set of composable graphical patterns can be defined based on the semantics of the TCOZ constructs, so that those patterns can be re-used in a generic way. This paper firstly defines the composable TA graphical patterns, and then presents sound transformation rules and a tool for projecting TCOZ specifications into TA. A case study of a railroad crossing system is demonstrated.<\/dc:description><dc:subject>\n        Modeling and specification formalisms.<\/dc:subject><dc:publisher>\n        Springer <\/dc:publisher><dc:source>\n        Davies,  J. & Schulte,  W. & Barnett,  M. (Eds.). (2004). Formal methods and software engineering : 6th International Conference on Formal Engineering Methods, ICFEM 2004, 8-12 November 2004, Seattle, WA, USA. ; proceedings. Berlin: Springer , pp. 483-498, Lecture notes in computer science(3308)<\/dc:source><dc:contributor>\n        Davies,  J.<\/dc:contributor><dc:contributor>\n        Schulte,  W.<\/dc:contributor><dc:contributor>\n        Barnett,  M.<\/dc:contributor><dc:date>\n        2004-01-01<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6234<\/dc:identifier><dc:identifier>\n        issn:0302-9743<\/dc:identifier><dc:identifier>\n        issn: 1611-3349<\/dc:identifier><dc:identifier>\n        doi:10.1007\/978-3-540-30482-1_39<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6234\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1007\/978-3-540-30482-1_39<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6234\/1\/6234.pdf<\/dc:identifier><dc:rights>\n        The final publication is available at Springer via http:\/\/dx.doi.org\/10.1007\/978-3-540-30482-1_39<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0302-9743"," 1611-3349","issn: 1611-3349","issn:0302-9743"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2004,"topics":["Modeling and specification formalisms."],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n10 December 2009\nVersion of attached file:\nAccepted Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nDong, J. S. and Hao, P. and Qin, S. and Sun, J. and Wang, Y. (2004) \u2019Timed patterns : TCOZ to timed\nautomata.\u2019, in Formal methods and software engineering : 6th International Conference on Formal\nEngineering Methods, ICFEM 2004, 8-12 November 2004, Seattle, WA, USA. ; proceedings. Berlin: Springer ,\npp. 483-498. Lecture notes in computer science. (3308).\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1007\/b102837\nPublisher\u2019s copyright statement:\nThe original publication is available at www.springerlink.com\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\n  \nDurham Research Online \n \nDeposited in DRO: \n10 December 2009 \n \nPeer-review status: \nPeer-reviewed \n \nPublication status: \nAccepted for publication version \n \nCitation for published item: \nDong, J. S. and Hao, P. and Qin, S. and Sun, J. and Wang, Y. (2004) 'Timed patterns : \nTCOZ to timed automata.', in Formal methods and software engineering : 6th International \nConference on Formal Engineering Methods, ICFEM 2004, 8-12 November 2004, Seattle, \nWA, USA. ; proceedings. Berlin: Springer , pp. 483-498. Lecture notes in computer science. \n(3308). \n \nFurther information on publishers website: \nhttp:\/\/dx.doi.org\/10.1007\/b102837 \n \nPublishers copyright statement: \nThe original publication is available at www.springerlink.com \n \n \n \n \n \n \n \n \n \n \nUse policy \n \nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior \npermission or charge, for personal research or study, educational, or not-for-profit purposes provided that : \n \n\uf0a7 a full bibliographic reference is made to the original source \n\uf0a7 a link is made to the metadata record in DRO \n\uf0a7 the full-text is not changed in any way \n \nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders. \n \nPlease consult the full DRO policy for further details. \n \nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom \nTel : +44 (0)191 334 2975 | Fax : +44 (0)191 334 2971 \nhttp:\/\/dro.dur.ac.uk \nTimed Patterns: TCOZ to Timed Automata\nJ.S. Dong1 P. Hao\u00011 S.C. Qin1 J. Sun1 W. Yi2\n1 National University of Singapore\n{dongjs,haoping,qinsc,sunj}@comp.nus.edu.sg\n2 Uppsala University, Sweden\nyi@docs.uu.se\nAbstract. The integrated logic-based modeling language, Timed Communicat-\ning Object Z (TCOZ), is well suited for presenting complete and coherent re-\nquirement models for complex real-time systems. However, the challenge is how\nto verify the TCOZ models with tool support, especially for analyzing timing\nproperties. Specialized graph-based modeling technique, Timed Automata (TA),\nhas powerful mechanisms for designing real-time models using multiple clocks\nand has well developed automatic tool support. One weakness of TA is the lack of\nhigh level composable graphical patterns to support systematic designs for com-\nplex systems. The investigation of possible links between TCOZ and TA may\nbenefit both techniques. For TCOZ, TA\u2019s tool support can be reused to check\ntiming properties. For TA, a set of composable graphical patterns can be defined\nbased on the semantics of the TCOZ constructs, so that those patterns can be\nre-used in a generic way. This paper firstly defines the composable TA graphi-\ncal patterns, and then presents sound transformation rules and a tool for project-\ning TCOZ specifications into TA. A case study of a railroad crossing system is\ndemonstrated.\nKeywords: Modeling and specification formalisms\n1 Introduction\nThe specification of complex real-time systems requires powerful mechanisms for mod-\neling state, concurrency and real-time behavior. Integrated formal methods (IFM) are\nwell suited for presenting complete and coherent requirement models for complex sys-\ntems. An important research agenda in IFM is the combination of Z\/Object-Z [6] with\nCSP\/TCSP [13] such as Timed Communicating Object Z (TCOZ) [9], Circus [16] and\nObject-Z + CSP [14]. However, the challenge is how to analyze and verify these mod-\nels with tool support. We believe one effective approach is to project the integrated\nrequirement models into multiple domains so that existing specialized tools in these\ncorresponding domains can be utilized to perform the checking and analyzing tasks.\nTCOZ is an integrated formal specification language which builds on the strengths\nof the Object-Z and TCSP notations for modeling both the state, process and timing\naspects of complex systems. Rather than to develop a single tool support for TCOZ\nfrom scratch, we believe a better approach is to reuse existing tools. The specialized\ngraph-based modeling technique, Timed Automata (TA) [1], is powerful in designing\n\u0001 author for correspondence: haoping@comp.nus.edu.sg\nreal-time models with multiple clocks and has well developed automatic tool support\ni.e., KRONOS [4] and UPPAAL [2]. However, one weakness of TA is the lack of high\nlevel composable graphical patterns to support systematic designs for complex real-time\nsystems. The investigation of possible links between TCOZ and TA may be beneficial\nto both techniques. For TCOZ, TA\u2019s tool support can be reused to check real-time con-\nstraints. For TA, a set of composable graphical patterns can be defined based on the\nsemantics of the TCOZ constructs so that those patterns can be used as a generic frame-\nwork for developing complex TA design models.\nThis paper is organized as follows. Section 2 introduces TCOZ and Timed Au-\ntomata. Section 3 presents a set of composable TA patterns with their formal definitions\n(specified in Z). Section 4 presents the transformation rules with their correctness proof\nand a Java tool for projecting TCOZ (in XML format) to TA (also in XML of UPPAAL).\nSection 5 conducts a case study of a railroad crossing system. The last section gives the\nconclusion.\n2 TCOZ and TA\n2.1 TCOZ\nTCOZ is essentially a blending of Object-Z with TCSP, for the most part preserv-\ning them as proper sub-languages of the blended notation. The essence of this blend-\ning is the identification of Object-Z operation specification schemas with terminating\nCSP [12] processes. Thus operation schemas and CSP processes occupy the same syn-\ntactic and semantic category; operation schema expressions can appear wherever pro-\ncesses appear in CSP and CSP process definitions can appear wherever operation defini-\ntions appear in Object-Z. In this section we briefly consider various aspects of TCOZ. A\ndetailed introduction to TCOZ and its TCSP and Object-Z features may be found else-\nwhere [9]. The formal semantics of TCOZ (presented in Z) is also documented [10].\nTiming and Channels: In TCOZ, all timing information is represented as real val-\nued measurements. TCOZ adopts all TCSP timing operators, for instance, timeout and\nwait. In order to describe the timing requirements of operations and sequences of op-\nerations, a deadline command has been introduced. If OP is an operation specification\n(defined through any combination of CSP process primitives and Object-Z operation\nschemas) then OP \u2022 DEADLINE t describes the process which has the same effect as\nOP, but is constrained to terminate no later than t (relative time). If it cannot terminate\nby time t, it deadlocks. The WAITUNTIL operator is a dual to the deadline operator.\nThe process OP \u2022 WAITUNTIL t performs OP, but will not terminate until at least time\nt. In this paper, when the term TCOZ timing constructs is mentioned, it means TCSP\nconstructs with extensions, i.e., DEADLINE and WAITUNTIL .\nCSP channels are given an independent, first class role in TCOZ. In order to support\nthe role of CSP channels, the state schema convention is extended to allow the declara-\ntion of communication channels. Contrary to the conventions adopted for internal state\nattributes, channels are viewed as shared (global) rather than as encapsulated entities.\nThis is an essential consequence of their role as communication interfaces between ob-\njects. The introduction of channels to TCOZ reduces the need to reference other classes\nin class definitions, thereby enhancing the modularity of system specifications.\nActive Objects and Semantics: Active objects have their own thread of control,\nwhile passive objects are controlled by other objects in a system. In TCOZ, an identifier\nMAIN (non-terminating process) is used to determine the behavior of active objects of\na given class.The MAIN operation is optional in a class definition. It only appears in\na class definition when the objects of that class are active objects. Classes for defining\npassive objects will not have the MAIN definition, but may contain CSP process con-\nstructors. If ob1 and ob2 are active objects of the class C, then the independent parallel\ncomposition behavior of the two objects can be represented as ob1 ||| ob2, which means\nob1.MAIN ||| ob2.MAIN.\nThe details of the blended state\/event process model forms the basis for the TCOZ\ndenotational semantics [10]. In brief, the semantic approach identifies the notions of\noperation and process by providing a process interpretation of the Z operation schema\nconstruct. Operation schemas are modeled by the collection of those sequences of up-\ndate events that achieve the state change described by the schema. This means that there\nis no semantic difference between a Z operation schema and a CSP process. It therefore\nmakes sense to also identify their syntactic classes.\nA Railroad Crossing Gate Example: The use of TCOZ is illustrated by a railroad\ncrossing gate class as following (later a case study on this system will be conducted).\nThe essential behaviors of this railroad crossing gate are to open and close itself ac-\ncording to its external commands (events) up and down. A free type GateS is used to\ncapture the status of a gate:\nGateS ::= ToUp | Up | ToDn | Down\nGate\nstatus : GateS\nup, down : chan\nLower\n\u2206(status)\nstatus\u2032 = ToDn\nDown\n\u2206(status)\nstatus\u2032 = Down\nInit\nstatus = Up\nRaise\n\u2206(status)\nstatus\u2032 = ToUp\nUp\n\u2206(status)\nstatus\u2032 = Up\nOpen =\u0302 up \u2192 (Raise \u2022 WAITUNTIL 1; Up) \u2022 DEADLINE 2\nClose =\u0302 down \u2192 Lower \u2022 DEADLINE 1; Down\nMAIN =\u0302 \u00b5 G \u2022 Close; Open; G\nThe interface of the gate class is defined through channels up and down. The DEADLINE\nand WAITUNTIL expressions are used here to capture its timing properties, which con-\nstrain that the gate takes less than 1 time unit to come down and between 1 and 2 time\nunits to come up.\n2.2 Timed Automata\nTimed Automata [1, 3] are finite state machines with clocks. It was introduced as a\nformal notation to model the behavior of real-time systems. Its definition provides a\ngeneral way to annotate state-transition graphs with timing constraints using finitely\nmany real-valued clock variables. The set of clock constraints \u03a6(X) is defined by the\nfollowing grammar:\n\u03d5 := x \u2264 c | c \u2264 x | x < c | c < x | \u03d51 \u2227 \u03d52\nA timed automaton A is a tuple (S, S0, \u03a3,X, I,E), where S is a finite set of states;\nS0 is a set of initial states and a subset of S; \u03a3 is a set of actions\/events; X is a finite\nset of clocks; I is a mapping that labels each location s in S with some clock constraint\nin \u03a6(X); E, a subset of S \u00d7 S \u00d7 \u03a3 \u00d7 2X \u00d7 \u03a6(X), is the set of switches. A switch\n\u3008s, s\u2032, a, \u03bb, \u03b4\u3009 represents a transition from state s to state s\u2032 on input symbol a. The set\n\u03bb gives the clocks to be reset with this transition, and \u03b4 is a clock constraint over X that\nspecifies when the switch is enabled.\nFor example, the railroad crossing gate can be designed in Figure 1. The gate is open\nin state Up and closed in state Down. It communicates with its controller through the\nevents up and down. The states ToUp and ToDown denote the opening and the closing\nof the gate. The gate responds to the event down by closing within 1 time unit, and\nresponds to the event up within 1 to 2 time units.\nFig. 1. The gate automaton\nUPPAAL UPPAAL [2] is a tool for modeling, simulation and verification of real-\ntime systems. It consists of three main parts: a system editor, a simulator and a model\nchecker. The system editor provides a graphical interface of the tool, to allow easier\nmaintenance. Its output is an XML representation of time automatons. The simulator is\na validation tool which enables examination of possible dynamic executions of a sys-\ntem during early design (or modeling) stages and thus provides an inexpensive mean of\nfault detection prior to verification by the model checker which covers the exhaustive\ndynamic behavior of the system. The model checker is to check invariant and bounded\nliveness properties by exploring the symbolic state space of a system. UPPAAL is ap-\npropriate for systems that can be modeled as a collection of non-deterministic processes\nwith finite control structure and real-valued clocks, communicating through channels or\nshared variables. Typical application areas include real-time controllers and communi-\ncation protocols in particular, those where timing aspects are critical.\n3 Composable TA Patterns\nHigh level real-time system requirements often need to state the system timing con-\nstraints in terms of deadline, timeout, waituntil and etc which can be regarded as com-\nmon timing constraint patterns. For example, \u201ctask A must complete within t time pe-\nriod\u201d is a typical one (deadline). TCOZ is a good candidate for specifying the require-\nments of complex real-time systems because it has the composable language constructs\nthat directly capture those common timing patterns. On the other hand, if TA is con-\nsidered to be used to capture real-time requirements, then one often need to manually\ncast those timing patterns into a set of clock variables with carefully calculated clock\nconstraints, which is a process that is very much towards design rather than specifica-\ntion. One interesting question is the following: Can we build a set of TA patterns that\ncorrespond to the TCOZ timing constructs? If such a set of TA patterns can be formu-\nlated, then not only the transformation from TCOZ to TA can be readily achieved (one\nobjective of this paper), but also TA can sysmatically capture high level requirements\nby utilizing those composable TA patterns.\nSince the current semantics of TCOZ [10] is specified in Z, we define a set of com-\nposable TA patterns also in the same meta notation Z. First of all, we give the definition\nof TA in Z as follows.\n[T, State, Event, Clock]\n\u03a6 ::= ( \u2264 )\u3008\u3008Clock \u00d7 T\u3009\u3009 | ( \u2265 )\u3008\u3008Clock \u00d7 T\u3009\u3009 |\n( < )\u3008\u3008Clock \u00d7 T\u3009\u3009 | ( > )\u3008\u3008Clock \u00d7 T\u3009\u3009 |\n( \u2227 )\u3008\u3008\u03a6\u00d7 \u03a6\u3009\u3009 | true\nTransition =\u0302 State\u00d7 Label\u00d7 State\nLabel =\u0302 P Event \u00d7 P Clock \u00d7 \u03a6\nSTA\nS : P State; i, e : State\nI : State \u0007\u2192 \u03a6\nT : P Transition\ni, e \u2208 S \u2227 dom I = S\n\u2200 s, s\u2032 : state; l : label \u2022 (s, l, s\u2032) \u2208 T \u21d2 s, s\u2032 \u2208 S\nThere are four basic types, i.e., T, State, Event, and Clock, in which T is the set of\npositive real numbers; \u03a6 defines the types of clock constraints, in which a true type is\nadded to represent the empty clock constraints; Label models transition conditions, in\nwhich P Event is a set of enabling events, and P Clock gives a set of clocks to be reset,\nand \u03a6 specifies clock constraints. STA defines a timed automaton, in which i and e rep-\nresent its initial states and terminal states respectively; I defines local clock invariants\non states; and T models transitions.\nSome TA patterns together with their formal definitions in Z are presented in Fig-\nure 2 - Figure 5, the rest can be found in the technical report [5]. In these graphical TA\npatterns, an automaton A is abstracted as a triangle, the left vertex of this triangle or a\ncircle attached to the left vertex represents the initial state of A, and the right edge rep-\nresents the terminal state of A. For example, Figure 2 demonstrates how two sequential\ntimed automatons A1, A2 can be composed together. By linking the terminal state of A1\nwith the initial state of A2, the resultant automaton passes control from A1 to A2 when\nA1 goes to its terminal state. Figure 3 shows one of the common timing constraint pat-\nterns \u2013 deadline. There is a single clock x. When the system switches to the automaton\nA, the clock x gets reset to 0. The local invariant x <= t covers each state of the timed\nautomaton A and specifies the requirement that a switch must occur before t time unit\nfor every state of A. Thus the timing constraint expressed by this automaton is that A\nshould terminate no later than t time units.\nA1 A2\nFig. 2. Sequential Composition\nseqcom : STA \u00d7 STA \u2192 STA\n\u2200A1, A2 : STA \u2022\nseqcom(A1, A2) = \u3008|\nS =\u0302 A1.S \u222a A2.S,\ni =\u0302 A1.i, e =\u0302 A2.e, I =\u0302 A1.I \u222a A2.I,\nT =\u0302 A1.T \u222a A2.T \u222a {(A1.e, (\u03c4, \u2205,\ntrue), A2.i)} |\u3009\nx :=0\nA\nx<=t\nFig. 3. Deadline\ndeadline : STA \u00d7 T \u2192 STA\n\u2200A : STA; t : T; \u2203 x : Clock; i0 : State \u2022\ndeadline(A, t) = \u3008|\nS =\u0302 A.S \u222a {i0}, i =\u0302 i0, e =\u0302 A.e,\nI =\u0302 {s : A.S \u2022 (s, x <= t \u2227 A.I(s))},\nT =\u0302 A.T \u222a {(i, (\u03c4, {x}, true), A.i)} |\u3009\nThese timed composable patterns can be seen as a reusable high level library that\nmay facilitate a systematic engineering process when TA is used to design the timed\nsystems. Furthermore, these patterns provide an interchange media for transforming\nTCOZ specifications into TA designs.\nComposing TA Patterns\nNew patterns can be composed from the existing ones. For example, given a specifica-\ntion \u201cTask A\u2032 is repeated every t0 time units provided that A\u2032 is guaranteed to terminate\nx :=0\nA\nx>=t\nFig. 4. Waituntil\nwaituntil : STA \u00d7 T \u2192 STA\n\u2200A : STA; t : T; \u2203 x : Clock; i0, e0 : State \u2022\nwaituntil(A, t) = \u3008|\nS =\u0302 A.S \u222a {i0, e0},\ni =\u0302 i0, e =\u0302 e0, I =\u0302 A.I,\nT =\u0302 A.T \u222a {(A.e, (\u03c4, \u2205, x >= t), e),\n(i, (\u03c4, {x}, true), A.i)} |\u3009\n0ss\nFig. 5. Recursion\nrecursion : STA \u00d7 State \u2192 STA\n\u2200A : STA; s0 : State | s0 \u2208 A.S \u2022\nrecursion(A, s0) = \u3008|\nS =\u0302 A.S, i =\u0302 A.i, e =\u0302 A.e, I =\u0302 A.I,\nT =\u0302 {s : State, l : Label | (s, l, s0) \u2208 A.T\n\u2022 (s, l, i)} \u222a A.T \u2212 {s : State,\nl : Label | (s, l, s0) \u2208 A.T \u2022 (s, l, s0)} |\u3009\nbefore t0 time unit\u201d, obviously, the TA model of this specification can be seen as a\nnew pattern which can be composed by three existing patterns - deadline, waituntil\nand recursion, as shown in Figure 6, in which clock x is used to give time constraints\nfor both the deadline pattern and the waituntil pattern, assuming A is the automaton\nequivalent to the TCOZ process A\u2032.\n0x>=t\nA\n e 0\n0i\nx:=0\nx<=t\nx>=t\n0\n0\nFig. 6. Periodic Repeat\nPeriodicRepeat : STA \u00d7 T \u2192 STA\n\u2200A, A0 : STA; t0 : T; e0 : State | e0 = A0.e\n\u2227 A0 = waituntil(deadline(A, t0), t0) \u2022\nPeriodicRepeat(A, t0) = recursion(waituntil\n(deadline(A, t0), t0), e0)\nAccording to the definition of deadline, waituntil and recursion patterns, the resul-\ntant automaton can be derived as follows:\nA(P) = PeriodicRepeat(A, t0) = \u3008|\nS =\u0302 A.S \u222a {i0, e0}, i =\u0302 i0, e =\u0302 e0,\nI =\u0302 {s : A.S \u2022 (s, x <= t0 \u2227 A.I(s))},\nT =\u0302 {(i, (\u03c4, {x}, true), A.i)} \u222a {A.e, (\u03c4, \u2205, x >= t0), i)} \u222a A.T \u2212 {A.e, (\u03c4, \u2205,\nx >= t0), e0)} |\u3009\n4 Transformation Rules, Correctness & Tool\nIn this section, we will define a set of rules for mapping TCOZ to Timed Automata\nand provide the correctness proof for this transformation. A Java tool to automate the\ntransformation process is implemented and illustrated.\n4.1 Mapping TCOZ Processes into TA Patterns\nSince the timed composable patterns are defined according to TCOZ process constructs,\nthe transformation rules are straightforward:\nDefinition 1. We define the mapping functionA from TCOZ processes to TA as follows.\n\u2013 If P = SKIP, then A(P) = \u3008| S =\u0302 {i0, e0}, i =\u0302 i0, e =\u0302 e0, I =\u0302 \u2205, T =\u0302 {(i, (\u03c4, \u2205, true),\ne)} |\u3009\n\u2013 If P = STOP, then A(P) = \u3008| S =\u0302 {i0, e0}, i =\u0302 i0, e =\u0302 e0, I =\u0302 \u2205, T =\u0302 \u2205 |\u3009\n\u2013 If P = a@t \u2192 P0, thenA(P) = tprefix(a, t,A(P0))\n\u2013 If P = P0 \u2022DEADLINE t, then A(P) = deadline(A(P0), t)\n\u2013 If P = P0 \u2022WAITUNTIL t, thenA(P)=waituntil(A(P0), t)\n\u2013 If P = WAIT t, thenA(P) = wait(t)\n\u2013 If P = P1\u0001{t}P2, thenA(P) = timeout(A(P1),A(P2), t)\n\u2013 If P = P1\u0001{t}P2, thenA(P)= tinterrupt(A(P1),A(P2), t)\n\u2013 If P = \u00b5 N \u2022 P(N), then A(P) = recursion(A(P(N)), N)\n\u2013 If P = P1; P2, thenA(P) = seqcom(A(P1),A(P2))\n\u2013 If P = P1 \r P2, thenA(P) = intchoice(A(P1),A(P2))\n\u2013 If P = P1 \u0002 P2, thenA(P) = extchoice(A(P1),A(P2))\n\u2013 If P = P1 |[X]| P2, then A(P) = A(P1) \u2016 A(P2)\nIn these mapping rules, channels, events and guards in a TCOZ model are viewed\nas triggers which cause the state transitions. They match the definition of actions and\ntimed constraints in Timed Automata, thus, they are directly projected as transition con-\nditions. Note that UPPAAL also adopts channels as its synchronization mechanism for\nthe interaction between automatons, which is equivalent to the approach taken in TCOZ.\nClock variables will be generated in the target automaton to guard its transition if the\nprocess of TCOZ to be translated has any timing constraints such as the DEADLINE.\nFor example, the translation rule on the DEADLINE primitive, P0 \u2022 DEADLINE t de-\nscribes the process which has the same effect as P0, but is constrained to terminate no\nlater than t.\nThe above rules apply to all the TCOZ time primitives and its basic composition\nof events, guards and processes, through which all the important dynamic information\nwith time constraints in TCOZ specification can be completely translated into timed\nautomata. The following provides the transformation rules for TCOZ classes\/objects:\n\u2013 In UPPAAL, every object is represented by an automaton. To fully represent be-\nhaviors of all the instances of a class, every instance (object) of a TCOZ class is\nprojected as a timed automaton.\n\u2013 The INIT schema in TCOZ class is used to appoint one of those identified states to\nbe an initial state. It will not be projected as a new state because it does not trigger\nany transition.\n\u2013 Each operation schema in a TCOZ class is projected as an atomic state in its asso-\nciated automaton instead of a triangle.\n4.2 Correctness\nThis subsection is devoted to the soundness proofs for our mapping rules from TCOZ\nprocesses to structuralized Timed Automata. We shall prove that any source process\nin TCOZ and its corresponding target Timed Automaton preserve the same semantics\nunder a bisimulation equivalence relation.\nThe operational semantics for TCOZ processes is captured by the labelled transition\nsystem (LTS)\nTS1TCOZ =\u0302 (C, \u03a3\u03c4 \u222a T,\u2212\u21921)\nwhere C =\u0302 P \u00d7 T is the set of configurations. A configuration c = \u3008P, t\u3009 comprising\nprocess P and time t denotes a state in the transition system. \u03a3\u03c4 is the set of possible\ncommunication events including the silent event \u03c4 . While \u2212\u21921\u2286 (C \u00d7 (\u03a3\u03c4 \u222a T)\u00d7 C) is\nthe set of transitions. The operational rules are given in our technical report [5].\nIn order to derive observable behaviors of TCOZ processes, we define a new abstract\ntransition system as follows:\nTS2TCOZ =\u0302 (C, \u03a3 \u222a T, =\u21d21)\nNote that the set of configurations remains the same as that in TS1TCOZ, but the transition\nrelation abstracts away from internal actions. That is, for any states c, c\u2032,\nc\na\n=\u21d21 c\u2032 =\u0302 \u2203 c1, c2 \u00b7 c\n\u03c4\n\u2212\u2192\u22171 c1 a\u2212\u21921 c2\n\u03c4\n\u2212\u2192\u22171 c\u2032\nc\n\u03b4\n=\u21d21 c\u2032 =\u0302 \u2203 c1, c2 \u00b7 c\n\u03c4\n\u2212\u2192\u22171 c1 \u03b4\u2212\u21921 c2\n\u03c4\n\u2212\u2192\u22171 c\u2032\nwhere the relation\n\u03c4\n\u2212\u2192\u22171 is the sequential composition of zero or finite number of \u03c4\u2212\u21921.\nNow we construct an abstract transition system for our target formalism, Timed\nAutomata. A \u201cnormal\u201d transition system associated with timed automata ([1, 3]) can be\nTS1TA =\u0302 (S, s0, \u03a3\u03c4 \u222a T,\u2212\u21922)\nNotice that S =\u0302 S\u00d7 V denotes all possible states of the transition system. Each state is\ncomposed of a state of the timed automaton and a clock valuation (interpretation). The\ninitial state s0 = \u3008i, v0\u3009 comprises the initial state i and a zero valuation v0. While the set\n\u2212\u21922 \u2286 S \u00d7 (\u03a3\u03c4 \u222a T)\u00d7 S comprises two kinds of transitions: a time passing move or\nan action move (Please refer to [5] for more details).\nBased on TS1TA, a new abstract transition system is defined as follows.\nTS2TA =\u0302 (S, s0, \u03a3 \u222a T,=\u21d22)\nThe only difference from TS1TA lies in the transition relation =\u21d22\u2286 S \u00d7 (\u03a3 \u222a T)\u00d7 S,\nwhich abstracts away from all internal (\u03c4 ) actions. That is, for states s, s\u2032,\ns\na\n=\u21d22 s\u2032 =\u0302 \u2203 s1, s2 \u00b7 s\n\u03c4\n\u2212\u2192\u22172 s1 a\u2212\u21922 s2\n\u03c4\n\u2212\u2192\u22172 s\u2032\ns\n\u03b4\n=\u21d22 s\u2032 =\u0302 \u2203 s1, s2 \u00b7 s\n\u03c4\n\u2212\u2192\u22172 s1 \u03b4\u2212\u21922 s2\n\u03c4\n\u2212\u2192\u22172 s\u2032\nNow we define a bisimular relation between TS2TCOZ and TS2TA as below:\nDefinition 2 (Bisimulation). The relation \u2248\u2286 C \u00d7 S between states of TS2TCOZ and\nstates of TS2TA is defined as follows, for any c \u2208 C and s \u2208 S, c \u2248 s if and only if the\nfollowing conditions hold:\n(1) c \u03b1=\u21d21 c\u2032 implies there exists s\u2032 such that s \u03b1=\u21d22 s\u2032, and c\u2032 \u2248 s\u2032;\n(2) s \u03b1=\u21d22 s\u2032 implies there exists c\u2032 such that c \u03b1=\u21d21 c\u2032, and c\u2032 \u2248 s\u2032.\nThe following theorem shows that our mapping rules preserve the bisimulation rela-\ntion between the source and target transition systems. Since the two transition systems\nemploy the same set of observable actions (events), the theorem thus demonstrates that\neach source TCOZ process and its corresponding target timed automaton are semanti-\ncally equivalent under the bisimulation relation.\nTheorem 1 (Correctness). For any TCOZ process P and its corresponding timed au-\ntomaton A(P), \u3008P, t\u3009 \u2248 \u3008i, v0\u3009 for some t, where i is the initial state of A(P), v0 is the\nzero valuation.\nProof By structural induction on process P.\n\u2013 P = SKIP, or P = STOP. The proof is trivial.\n\u2013 P = WAIT t0. We know A(P) = wait(t0). We show the condition (1) holds in\nDefinition 2. The condition (2) can be demonstrated similarly. The process P can\nperform a time passing move (\u03b4). The automaton wait(t0) can also advance a cor-\nresponding \u03b4-step.\nIf \u03b4 < t0, \u3008P, t\u3009 moves to \u3008WAIT(t0\u2212 \u03b4), t+ \u03b4\u3009, while \u3008i, v0\u3009 moves to \u3008w0, v0+ \u03b4\u3009.\nBy hypothesis, we know \u3008WAIT(t0 \u2212 \u03b4), t + \u03b4\u3009 \u2248 \u3008w0, v0 + \u03b4\u3009.\nIf \u03b4 = t0, both \u3008P, t\u3009 and \u3008i, v0\u3009 moves to their terminal states and preserve the\nbisimulation as well.\n\u2013 Other cases are presented in the report [5] due to space constraints. \u0001\n4.3 Implementation\nThe translation process can be automated by employing XML\/XSL technology. In our\nprevious work [15], the syntax of Z family languages, i.e., Z\/Object-Z\/TCOZ, has been\ndefined using XML Schema and supported by the ZML tool. As the UPPAAL tool can\nread an XML representation of Timed Automata, the automatic projection of the TCOZ\nmodel (in ZML) to TA model (in UPPAAL XML) can be developed as a tool in Java.\nThe tool takes in a TCOZ specification represented in XML, and outputs an XML\nrepresentation of a Timed Automata specification which has its own defined style file\nDTD by UPPAAL. The transformation is achieved firstly by implementing a ZML\nparser, which will take in a ZML specification and build a virtual model of the sys-\ntem in the memory. A TA interface is then built according to the UPPAAL document\nstructure, e.g. each TA document contains multiple templates and each template con-\ntains some states, their transitions and transition conditions. A transformation module\nis built to get information from the ZML parser, apply the right transformation rule and\nfeed the outcome of the transformation to the TA interface. Note that TCOZ process ex-\npression can be defined recursively, i.e, a process expression may contain one or more\nother process expressions, our transformation modules are built to take care of all valid\nTCOZ specifications and the transformation rules are applied recursively. The outcome\nof our transformation tool is UPPAAL\u2019s XML representation of TA, which is ready to\nbe taken as input for verification and simulation.\n5 Case Study : Railroad Crossing System\nIn this section, we will use a Railroad Crossing System (RCS) specified in TCOZ as\na driving example to illustrate our approach to model-checking TCOZ models of real-\ntime systems. The concept of the Railroad Crossing Problem was primarily evolved by\nHeitmeyer [7] and used as a case study in many formal systems. It is a system which\noperates a gate at a railroad crossing safely. Based on the above features, we define\nsome assumptions and constraints as follows:\n1. The train sends a signal to the controller at least 3 time units before it enters the\ncrossing, stays there no more than 2 time units and sends another signal to the\ncontroller upon exiting the crossing.\n2. The controller commands the gate to lower exactly 1 time unit after it has received\nthe approaching signal from the train and commands the gate to rise again no more\nthan 1 time unit after receiving the exiting signal.\n3. The gate takes less than 1 time unit to come down and between 1 and 2 time units\nto come up.\n5.1 TCOZ Model of RCS\nAccording to the requirement description, an RCS consists of three components: a cen-\ntral controller, a train, and a gate to control the traffic. The basic types for the status of\nthe train and controller are defined as follows:\nTrainS ::= ToIn | In | Out\nControllerS ::= TrIn | TrOut | GtClose | GtOpen\nThe TCOZ specification of Gate class has been presented in Section 2, the following\nprovides the formal specification of Train and Controller class.\nTrain: The basic behavior of the train component is to communicate with controller\nwith its passing information.\nTrain\nstatus : TrainS\nin, out : chan\nInit\nstatus = Out\nApproach\n\u2206(status)\nstatus\u2032 = ToIn\nPass\n\u2206(status)\nstatus\u2032 = In\nExit\n\u2206(status)\nstatus\u2032 = Out\nTrainin =\u0302 in \u2192 (Approach \u2022 WAITUNTIL 3; Pass) \u2022 DEADLINE 5\nTrainout =\u0302 out \u2192 Exit\nMAIN =\u0302 \u00b5 T \u2022 Trainin; Trainout; T\nCentral Controller: The central controller is the crucial part of the system, ac-\ntively communicating with the train, light and gate. The Controller class is modeled as\nfollows:\nController\nstatus : ControllerS\nup, down, in, out : chan\nINIT\nstatus = TrOut\nArrive\n\u2206(status)\nstatus\u2032 = TrIn\nLeave\n\u2206(status)\nstatus\u2032 = TrOut\nGateClose\n\u2206(status)\nstatus\u2032 = GtClose\nGateOpen\n\u2206(status)\nstatus\u2032 = GtOpen\nTrainin =\u0302 in \u2192 Arrive; Trainout =\u0302 out \u2192 Leave\nClose =\u0302 down \u2192 GateClose; Open =\u0302 up \u2192 GateOpen\nMAIN =\u0302 \u00b5 C \u2022 (Trainin \u2022 DEADLINE 1) \u2022 WAITUNTIL 1; Close; Trainout \u2022\nDEADLINE 1; Open; C\nThe attribute status keeps the records of the train\u2019s passing information in the sys-\ntem. When the train sends an in signal, the status of the controller changes from TrOut\nto TrIn. When the train has passed the crossing and sent an out signal to the controller,\nthe status of the controller changes from TrIn to TrOut. The main processes of the con-\ntroller are receiving the train passing information and manipulating the gate operations\nat the same time. If the gate is open then instructions on closing the gate will be sent to\nthe Gate. On the other hand, when the train has passed the gate, the controller will open\nthe gate.\nRCS Configuration: After specifying individual components, the next step is to\ncompose them into a whole system. The overall system is a composition of all the\ncommunicating components.\nRCSystem\nt : Train; g : Gate; c : Controller\nMAIN =\u0302 \u2016(t in,outff \u0002 c up,downff \u0002 g)\nTwo essential properties of RCS are: first, the gate is never closed at a stretch for more\nthan a stipulated time range (suppose 10 time units); second, the gate should be down\nwhenever a train is crossing. These properties can be formally expressed as:\nRCSystem \u2022 \u0002(g.status = ToDn \u2192 \u2666\u226410 g.status = Up)\nRCSystem \u2022 t.status = In \u21d2 g.status = Down\n5.2 Translation\nIn this section, we show how the given translation rules can be applied to map TCOZ\nspecification into Timed automatons.\nFirst of all, for the whole RCS system, three automatons can be identified in the\nTimed Automata model, i.e., gate, train and controller.\nWe use the gate class as an example to show the identification of the states, transi-\ntions, guards and synchronization mentioned above. According to the translation rules\nfor TCOZ classes\/objects, four states can be identified through the static view of Gate\nclass, it has four operation schema, each one is mapped into a state, namely, Up,\nToDown, Down, and ToUp as shown in Figure 1, among which Up is the initial state as\nindicated by the INIT schema in the Gate class. Synchronization and clock conditions\non the transitions are constructed by transforming the Open and Close process of Gate\nclass according to the translation rules on DEADLINE and WAITUNTIL primitives. A\nclock is generated to guard the atomic process Lower to be finished no later than 1 time\nunit, then it is reused to guard Raise and Up process to meet their timing constraints by\nresetting its value to 0. The initial and terminal states generated for every non-atomic\nprocess due to those translation rules, if they are linked by a transition with a \u03c4 event,\nare incorporated into one state to simplified the resultant automaton.\nThis gate automaton can be automatically generated by our translation tool and\nvisualized in UPPAAL as \u201cprocess gate\u201d in Figure 7. In the same way, we can get the\ntrain and controller automatons as \u201cprocess train\u201d and \u201cprocess controller\u201d.\nFig. 7. Simulation\n5.3 Model-checking RCS\nNow we can use the UPPAAL tool to simulate the system as well as to model-check\nsome invariants and real-time properties. In UPPAAL correctness criteria can be speci-\nfied as formulas of the timed temporal logic TCTL [8], for which UPPAAL implements\nmodel-checking algorithms.\nFrom a safety critical perspective, the key point of the RCS is to provide guaranteed\nsafety and efficient services. These properties can be formally interpreted from our\nmodel as:\n\u2013 safety properties - The properties state that whenever the train is in, the gate is\ndown. It can be translated into the TCTL formula in UPPAAL as follows:\nA[] train.s2 imply gate.s102\n\u2013 efficient service properties - the gate is never closed at a stretch for more than 10\ntime units. To verify this property, we add a clock x to record the time the gate takes\nto reopen itself:\ngate.s101 --> (gate.s100 and gate.x<=10)\nUPPAAL verified that these properties actually hold for this given model.\n6 Conclusion\nTCOZ and TA lie at each end of the spectrum of formal modeling techniques. TCOZ is\ngood at structurally specifying high level requirements for complex systems, while TA\nis good at designing timed models in simple clock constraints but with highly automatic\ntools support.\nThe investigation on the strengths and links between those two modeling techniques\nleads us to an interesting research result, i.e., timed composable patterns (reminiscence\nof \u2018design patterns\u2019 in object-oriented modeling). In this paper, these patterns are for-\nmally defined in Z and the process algebra-like compositional nature are preserved in\nthe graphical representations. These timed composable patterns\n\u2013 not only provide a proficient interchange media for transforming TCOZ specifica-\ntions into TA designs\n\u2013 but also provide a generic reusable framework for designing real-time systems in\nTA alone.\nOne possible future work would be to encode those timed patterns as icons in the\nmodel checker tool, such as UPPAAL, so that the complex timed models can be built\nsystematically in UPPAAL.\nSince TCOZ is a superset of TCSP, one consequence of this work is that a semantic\nlink and a practical translation tool from TCSP to TA has been achieved so that TA tools\ni.e. UPPAAL can also be used to check TCSP timing properties. In this context, this\nwork complements the recent pure theoretical investigation [11] on the expressiveness\nof TCSP and closed timed automata.\nAcknowledgements\nWe would like to thank Hugh Anderson, Sun Jing and Wang Hai for their helpful com-\nments on this work.\nReferences\n1. R. Alur and D. L. Dill. A theory of timed automata. Theoretical Computer Science, 126:183\u2013\n235, 1994.\n2. J. Bengtsson, K. G. Larsen, F. Larsson, and P. Pettersson avd Y. Wang. UPPAAL - a tool\nsuite for automatic verification of real-time systems. In Hybrid Systems III: Verification and\nControl, pages 232\u2013243. Springer, 1996.\n3. Albert M. K. Cheng. Real-time systems : scheduling, analysis, and verification. John Wiley\nand Sons, 2002.\n4. C. Daws, A. Olivero, S. Tripakis, and S. Yovine. The tool KRONOS. In Hybrid Systems III:\nVerification and Control, pages 208\u2013219. Springer, 1996.\n5. J. S. Dong, P. Hao, S. C. Qin, J. Sun, and W. Yi. TCOZ to Timed Automata. Technical\nReport TRC6\/03, School of Computing, National University of Singapore, 2003.\nhttp:\/\/nt-appn.comp.nus.edu.sg\/fm\/tcoz2ta\/tr.zip.\n6. R. Duke, G. Rose, and G. Smith. Object-Z: a Specification Language Advocated for the\nDescription of Standards. Computer Standards and Interfaces, 17:511\u2013533, 1995.\n7. C. L. Heitmeyer and N. Lynch. The Generalized Railroad Crossing: A Case Study in Formal\nVerification of Real-Time Systems. In Proceedings of RTSS\u201994, Reai-Time Systems Sym-\nposium, pages 120\u2013131, San Juan, Puerto Rico, December 1994. IEEE Computer Society\nPress.\n8. T. A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. Symbolic model checking for real-\ntime systems. Information and Computation, 111(2):193\u2013243, 1994.\n9. B. Mahony and J. S. Dong. Timed Communicating Object Z. IEEE Transactions on Software\nEngineering, 26(2):150\u2013177, February 2000.\n10. B. Mahony and J. S. Dong. Deep Semantic Links of TCSP and Object-Z: TCOZ Approach.\nFormal Aspects of Computing, 13(2):142\u2013160, 2002.\n11. J. Ouaknine and J. Worrell. Timed CSP = Closed Timed Automata. In Proceedings of\nEXPRESS 02, volume 38(2) of ENTCS, 2002.\n12. A. W. Roscoe. The Theory and Practice of Concurrency. Prentice-Hall, 1997.\n13. S. Schneider, J. Davies, D. M. Jackson, G. M. Reed, J. N. Reed, and A. W. Roscoe. Timed\nCSP: Theory and practice. In J. W. de Bakker, C. Huixing, W. P. de Roever, and G. Rozen-\nberg, editors, Real-Time: Theory in Practice, volume 600 of Lect. Notes in Comput. Sci.,\npages 640\u2013675. Springer-Verlag, 1992.\n14. G. Smith. An integration of real-time object-z and csp for specifying concurrent real-time\nsystems. In M. Butler, L. Petre, and K. Sere, editors, IFM 2002, page 267C285. Springer-\nVerlag, 2002.\n15. J. Sun, J. S. Dong, J. Liu, and H. Wang. A formal object approach to the design of zml.\nAnnals ol Software Engineering, 13:329\u2013356, 2002.\n16. J. Woodcock and A. Cavalcanti. The Semantics of Circus. In ZB 2002: Formal Specification\nand Development in Z and B, volume 2272 of Lecture Notes in Computer Science, pages\n184\u2013203. Springer-Verlag, 2002.\n"}