{"doi":"10.1109\/ENABL.2003.1231403","coreId":"57299","oai":"oai:eprints.lincoln.ac.uk:4","identifiers":["oai:eprints.lincoln.ac.uk:4","10.1109\/ENABL.2003.1231403"],"title":"Historical awareness support and its evaluation in collaborative software engineering","authors":["Nutter, David","Boldyreff, Cornelia"],"enrichments":{"references":[{"id":18433029,"title":"A framework for rolebased speci\ufb01cation and evaluation of awareness support in synchronous collaborative applications.","authors":[],"date":"2002","doi":"10.1109\/enabl.2002.1029981","raw":"J. Drury and M. G. Williams. A framework for rolebased speci\ufb01cation and evaluation of awareness support in synchronous collaborative applications. In Proceedings of the 11th International Workshops on Enabling Technologies for Collaborative Enterprises (WETICE02), pages 12\u201317, Carnegie Mellon University, Pittsburgh, June 2002. IEEE Computer Society Press.","cites":null},{"id":18433040,"title":"Architectural requirements for an Open Source Component and Artefact Repository System within GENESIS.","authors":[],"date":"2002","doi":null,"raw":"D. Nutter, S. Rank, and C. Boldyreff. Architectural requirements for an Open Source Component and Artefact Repository System within GENESIS. In Proc. of the Open Source Software Development Workshop, pages 176\u2013196. University Of Newcastle, February 2002.","cites":null},{"id":18433028,"title":"Awareness and coordination in shared workspaces.","authors":[],"date":"1992","doi":"10.1145\/143457.143468","raw":"P. Dourish and V. Belotti. Awareness and coordination in shared workspaces. In ACM Conference on Computer Supported Cooperative Work (CSCW\u201992), pages 107\u2013114, Toronto, Ontario, November 1992. ACM Press, New York City.","cites":null},{"id":18433025,"title":"Characteristics of group development of diagrams.","authors":[],"date":"2002","doi":"10.1109\/enabl.2002.1029984","raw":"J. D. Campbell. Characteristics of group development of diagrams. In Proc. of the Eleventh International Workshops on Enabling Technologies for Collaborative Enterprises (WETICE02), pages 29\u201334, Carnegie Mellon University, Pittsburgh, June 2002. IEEE Computer Society Press.","cites":null},{"id":18433023,"title":"Designing a distributed software development support system using a peer-to-peer architecture.","authors":[],"date":"2002","doi":"10.1109\/cmpsac.2002.1045154","raw":"S. Bowen and F. Maurer. Designing a distributed software development support system using a peer-to-peer architecture. In Workshop on Cooperative Supports for Distributed Software Engineering Processes (with COMPSAC 2002), pages 1087\u20131092, Oxford, England, August 2002. IEEE Computer Society Press.","cites":null},{"id":18433026,"title":"Evaluating multi-party multimodal systems.","authors":[],"date":"2000","doi":"10.1145\/633349.633365","raw":"L. E. Damianos, J. Drury, T. Fanderclai, L. Hirschmann, J. Kurtz, and B. Oshika. Evaluating multi-party multimodal systems. In Proc. Of the 2nd International Conference on Language Resources and Evaluation (LREC2000), Athens, MITRE Corporation, 202 Burlington Road, Bedford, MA01730 USA, May 2000.","cites":null},{"id":18433030,"title":"Evaluation of a publish\/subscribe system for collaborative and mobile working.","authors":[],"date":"2002","doi":"10.1109\/enabl.2002.1029983","raw":"P. Fenjam, E. Kirda, S. Dustdar, H. Gall, and G. Reif. Evaluation of a publish\/subscribe system for collaborative and mobile working. In Proc. of the Eleventh International Workshops on Enabling Technologies for Collaborative Enterprises (WETICE02), pages 23\u201328. IEEE Computer Society Press, June 2002.","cites":null},{"id":18433022,"title":"Flowmanager: a work\ufb02ow management system based on petri nets.","authors":[],"date":"2002","doi":"10.1109\/cmpsac.2002.1045148","raw":"L. Aversano, C. Aniello, P. Gallucci, and M. L. Villani. Flowmanager: a work\ufb02ow management system based on petri nets. In Proc. of the 26th Annual International Computer Software and Applications Conference, COMPSAC02, pages 1054\u20131059, Oxford, England, August 2002. IEEE Computer Press.","cites":null},{"id":18433031,"title":"Generalised environment for process management in cooperative software engineering.","authors":[],"date":"2002","doi":"10.1109\/cmpsac.2002.1045147","raw":"M. Gaeta and P. Ritrovato. Generalised environment for process management in cooperative software engineering. In Workshop on Cooperative Supports for Distributed Software Engineering Processes (with COMPSAC 2002), pages 1049\u20131053, Oxford, England, August 2002. IEEE Computer Society Press.","cites":null},{"id":18433035,"title":"History-enriched digital objects.","authors":[],"date":"1993","doi":"10.1080\/01972243.1994.9960164","raw":"W. C. Hill and J. D. Hollan. History-enriched digital objects. In Proc. of the ACM Conference on Computers, Freedom and Privacy CFP\u201993, pages 9.16\u20139.20. ACM Press, New York City, 1993.","cites":null},{"id":18433036,"title":"History-enriched source code.","authors":[],"date":"1993","doi":null,"raw":"W. C. Hill and J. D. Hollan. History-enriched source code. Unpublished manuscript, August 1993.","cites":null},{"id":18433032,"title":"Inconsistency management for multiple view software development environments.","authors":[],"date":"1998","doi":"10.1109\/32.730545","raw":"J. Grundy, J. Hosking, and W. B. Mugridge. Inconsistency management for multiple view software development environments. IEEE Transactions On Software Engineering, 24(11):960\u2013981, November 1998.","cites":null},{"id":18433039,"title":"Interlocus: Workspace con\ufb01guration mechanisms for activity awareness.","authors":[],"date":"1998","doi":"10.1145\/289444.289453","raw":"T. Nomura, K. Hayashi, T. Hazama, and S. Gudmundson. Interlocus: Workspace con\ufb01guration mechanisms for activity awareness. In Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW\u201998), pages 19\u2013 28. ACM Press, New York City, November 1998.","cites":null},{"id":18433042,"title":"Lost and found in software space.","authors":[],"date":"2001","doi":null,"raw":"T. Sch\u00a8 ummer. Lost and found in software space. In The 34th Annual Hawaii Internationl Confernece on System Sciences (HICSS01). GMD-IPSI, IEEE Computer Society Press, 2001.","cites":null},{"id":18433024,"title":"Virtual community presence awareness.","authors":[],"date":"1998","doi":"10.1145\/307736.307756","raw":"D. G. Boyer, M. Cortes, J. Herbsleb, and M. J. Handel. Virtual community presence awareness. ACM SIGGROUP Bulletin, 19(3):11\u201314, 1998.","cites":null},{"id":18433021,"title":"Virtual network computing.","authors":[],"date":null,"doi":"10.1007\/978-3-642-15672-4_2","raw":"Virtual network computing. [@:] http:\/\/www.realvnc.org.","cites":null},{"id":18433033,"title":"Workspace awareness for groupware.","authors":[],"date":"1996","doi":"10.1145\/257089.257284","raw":"C. Gutwin and S. Greenberg. Workspace awareness for groupware. In CHI Conference Companion, pages 208\u2013209, 1996.","cites":null},{"id":18433034,"title":"Workspace awareness support with radar views.","authors":[],"date":"1996","doi":"10.1145\/257089.257286","raw":"C. Gutwin, S. Greenberg, and M. Roseman. Workspace awareness support with radar views. In CHI Conference Companion, pages 210\u2013211, 1996.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2003-06-09","abstract":"The types of awareness relevant to collaborative soft-\\ud\nware engineering are identified and an additional type,\\ud\n\"historical awareness\" is proposed. This new type of\\ud\nawareness is the knowledge of how software artefacts re-\\ud\nsulting from collaboration have evolved in the course of\\ud\ntheir development.\\ud\n\\ud\n The types of awareness that different software engineer-\\ud\ning environment architectures can support are discussed. A\\ud\nway to add awareness support to our existing OSCAR sys-\\ud\ntem, a component of the GENESIS software engineering\\ud\nplatform, is proposed. Finally ways of instrumenting and\\ud\nevaluating the awareness support offered by the modified\\ud\nsystem are outlined","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/57299.pdf","fullTextIdentifier":"http:\/\/eprints.lincoln.ac.uk\/4\/1\/wetice03.pdf","pdfHashValue":"e8547c6cf9c432582a362bbcbff141471eaa222a","publisher":null,"rawRecordXml":"<record><header><identifier>\n  \n    \n    \n      oai:eprints.lincoln.ac.uk:4<\/identifier><datestamp>\n      2014-04-29T11:05:15Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D6A6163735F47:6A6163735F47363030<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.lincoln.ac.uk\/4\/<\/dc:relation><dc:title>\n        Historical awareness support and its evaluation in collaborative software engineering<\/dc:title><dc:creator>\n        Nutter, David<\/dc:creator><dc:creator>\n        Boldyreff, Cornelia<\/dc:creator><dc:subject>\n        G600 Software Engineering<\/dc:subject><dc:description>\n        The types of awareness relevant to collaborative soft-\\ud\nware engineering are identified and an additional type,\\ud\n\"historical awareness\" is proposed. This new type of\\ud\nawareness is the knowledge of how software artefacts re-\\ud\nsulting from collaboration have evolved in the course of\\ud\ntheir development.\\ud\n\\ud\n The types of awareness that different software engineer-\\ud\ning environment architectures can support are discussed. A\\ud\nway to add awareness support to our existing OSCAR sys-\\ud\ntem, a component of the GENESIS software engineering\\ud\nplatform, is proposed. Finally ways of instrumenting and\\ud\nevaluating the awareness support offered by the modified\\ud\nsystem are outlined.<\/dc:description><dc:date>\n        2003-06-09<\/dc:date><dc:type>\n        Conference or Workshop contribution<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/4\/1\/wetice03.pdf<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/eprints.lincoln.ac.uk\/4\/2\/wetice03-present.pdf<\/dc:identifier><dc:identifier>\n          Nutter, David and Boldyreff, Cornelia  (2003) Historical awareness support and its evaluation in collaborative software engineering.  In: WETICE 2003 - Evaluating Collaborative Information Systems and Support For Virtual Enterprises, 9-11 June 2003, Linz, Austria.  <\/dc:identifier><dc:relation>\n        http:\/\/doi.ieeecomputersociety.org\/10.1109\/ENABL.2003.1231403<\/dc:relation><dc:relation>\n        10.1109\/ENABL.2003.1231403<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.lincoln.ac.uk\/4\/","http:\/\/doi.ieeecomputersociety.org\/10.1109\/ENABL.2003.1231403","10.1109\/ENABL.2003.1231403"],"year":2003,"topics":["G600 Software Engineering"],"subject":["Conference or Workshop contribution","PeerReviewed"],"fullText":"Historical Awareness Support and Its Evaluation in Collaborative Software\nEngineering\nDavid Nutter and Cornelia Boldyreff\nDepartment Of Computer Science\nUniversity Of Durham\n{david.nutter,cornelia.boldyreff}@durham.ac.uk\nAbstract\nThe types of awareness relevant to collaborative soft-\nware engineering are identified and an additional type,\n\u201chistorical awareness\u201d is proposed. This new type of\nawareness is the knowledge of how software artefacts re-\nsulting from collaboration have evolved in the course of\ntheir development.\nThe types of awareness that different software engineer-\ning environment architectures can support are discussed. A\nway to add awareness support to our existing OSCAR sys-\ntem, a component of the GENESIS software engineering\nplatform, is proposed. Finally ways of instrumenting and\nevaluating the awareness support offered by the modified\nsystem are outlined.\nKeywords: Awareness, OSCAR, collaboration,\nworkspaces\n1 Introduction\nCollaborative software engineering environments re-\nquire awareness support to ensure users of the environments\nknow of the activities of others in order to coordinate their\nwork, identify potential problems and prevent conflict. One\ndefinition of awareness that is especially relevant in this do-\nmain is\n\u201cAn understanding of the activities of oth-\ners which provides a context for your own\nactivity\u201d.[8]\nWhere a number of software artefacts are being devel-\noped, often concurrently, one way to provide awareness is to\nbuild it into a common repository, such as the Open Source\nComponent Artefact Repository (OSCAR[18]), monitor\nchanges made to artefacts and use this data as the basis for\nawareness provision. However, care must be taken to ensure\nthat data collection and awareness provision do not disrupt\nactivities themselves.\nTo ease adoption by industry and the Open Source com-\nmunity, a key design goal in the development of OSCAR\nhas been non-invasiveness. OSCAR is process aware but\ndoes not require its adopters to change their existing work-\ning practices and tools, and it may be adopted on its own\nwithout the rest of of the Generalised Environment for\nProcess Management in Collaborative Software Engineer-\ning (GENESIS[11]) platform. Similarly awareness support\nwithin OSCAR must be non-invasive.\nBuilding awareness into OSCAR will provide minimally\ninvasive support for indirect coordination and communica-\ntion by alerting collaborators to the changes made to arte-\nfacts. In the longer term, analysis of the raw data that the\nawareness support uses will allow studies of development\nprojects using OSCAR; and through these, we shall evalu-\nate the support that OSCAR provides in order to build better\nsupport for collaborative software engineering in future.\nOur initial motivation to provide support for awareness\nis based on our experience and that of our partners in de-\nveloping the GENESIS platform. Top down, rigidly im-\nposed methods of collaboration largely failed when work-\ning on software artefacts consisting of many files (such as\ncode) though they succeeded with monolithic artefacts such\nas Word documents. As the project moves towards self-\nhosting its own development on GENESIS\/OSCAR, inte-\ngrated awareness support will allow us to collaborate dur-\ning the development of software artefacts without spending\nexcessive amounts of time reading change logs and e-mail\narchives all managed by separate tools to understand the\nhistory of a particular artefact.\nSection 2 describes the existing OSCAR system, sec-\ntion 3 describes related work, existing systems and com-\nmon architectures for awareness support, section 4 proposes\nthe addition of awareness support to OSCAR, section 5 dis-\ncusses the evaluation of our improved environment and sec-\ntion 6 identifies future work.\n1\n2 OSCAR\nOSCAR is a client\/server application designed to man-\nage and deliver XML based artefacts for both human users,\ni.e. software engineers, and programs which access OS-\nCAR via its API, i.e other components of the GENESIS\nplatform including work-flow[2] and resource management.\nFigure 1 is a simplified architecture diagram of a single\nOSCAR system. The StorageManager components may\nbe stub objects that call a remote OSCAR , allowing (ex-\nplicitly configured) federation. Each OSCAR installation\nhas a CVS repository to store the data component of arte-\nfacts and a relational database to store the meta-data compo-\nnent. Users see the two unified as XML documents or Java\nobjects, depending on their requirements. Interacting with\nartefacts on the server generates events which OSCAR can\neither ignore or propagate to interested parties, including\nother artefacts. This allows artefacts to respond \u201cactively\u201d\nto changes in related artefacts. All data stored in the system\nincluding source code, documents, user and project infor-\nmation is represented as artefacts with common meta-data\nsuch as creator, contributor, modification time etc.\nSTO\nRA\nG\nE\nM\nA\nN\nA\nG\nER\nEV\nEN\nT   M\nA\nN\nA\nG\nEM\nEN\nT\nARTEFACT COLLECTION\nREPOSITORY LAYER\n(CVS + RDBMS)\nTRANSFORMATION\nCLIENTS\nChange\nChange\nRequest\/Update\nArtefacts Notification\nArtefacts\nStore\nEVENT \nRESPONSE\nARTEFACT\nEVENT\nLAYER\nNetwork\nFigure 1. OSCAR architecture\nThe system is intended to support all software life cy-\ncle phases by storing artefacts produced either as the result\nof the GENESIS work-flow processes or by users directly\nwith their existing tools. The architecture relies on a plugin\nsystem which encourages integration with existing software\nsuch as SCM to allow minimally invasive system set-up.\nOSCAR does not require users to migrate wholesale from\ntheir existing software in order to benefit from OSCAR\u2019s\nfeatures.\n3 Related Work\nSeveral informal definitions of distinct awareness types\nhave been collected by Drury et al[9] from previous works.\nTable 1 describes the relevance of those types useful in an\nenvironment like OSCAR.1\nTable 1. Awareness Types and Purpose\nType Definition\ninformal\nawareness\n\u201cThe general sense of who is around and\nwhat others are up to\u201d\nThis is important as a prerequisite for\n\u201cgroup structural awareness\u201d and a base-\nline for informal collaboration.\nperipheral\nawareness(2)\n\u201cWhere people know what others are do-\ning\u201d\nFull direct awareness is not possible with\na system like OSCAR, so such sup-\nport is necessarily limited to interactions\nwith the OSCAR system rather than in-\nteractions with a tool. However, since\nthe point when changes will affect other\nusers of the OSCAR system are when\nchanges are sent to the central system,\nthis is sufficient.\nsocial aware-\nness(2)\n\u201cinformation about the presence and ac-\ntivities of people in a shared environ-\nment\u201d\nPresence information promotes collabo-\nration while activity based information\nprevents conflicts of interest over arte-\nfacts\ngroup struc-\ntural aware-\nness\n\u201cKnowledge of roles and responsibili-\nties, their positions on an issue and pro-\ncess information\u201d\nOSCAR\u2019s relationships model can pro-\nvide such information; such awareness\nwill be used to prevent conflicts of inter-\nest over certain artefacts.\nworkspace\nawareness(2)\n\u201cWho is working on what\u201d\nRelating the human and machine actors\nto specific software artefacts is an impor-\ntant function of OSCAR. As before, such\nknowledge will be used to prevent con-\nflicts of interest.\nSeveral kinds of awareness identified by Drury are im-\nportant, yet omitted from table 1. These are the synchronous\nawareness types that rely on timely propagation of informa-\ntion between users of systems such as Rear View Mirror[4].\n1Numbers in brackets indicate the definitions order in Drury et al\n2\nSince OSCAR\u2019s clients have limited integration with tools\nand are not permanently connected to OSCAR, supporting\nsynchronous awareness cannot be guaranteed. Additionally,\ntask and concept oriented awareness cannot be supported\nby OSCAR; however, the GENESIS platform\u2019s work-flow\nmanagement system can provide this support if desired.\nAwareness types that that fit with OSCAR\u2019s minimally-\ninvasive philosophy are largely asynchronous, informal and\nworkspace awareness(2) limited to operations on artefacts\nwithin OSCAR. Complete awareness for all OSCAR ses-\nsion participants is not a goal due to the large overhead in-\ncurred.\n3.1 Existing systems\nOne prerequisite for asynchronous awareness is ensuring\nthat each artefact possesses a rich history describing what\nhappened to it and when[15]. This information is the basis\nof retrospective awareness such as \u201csource code wear\u201d[16],\na visualisation of source code change history. This type of\nawareness is closely related to peripheral awareness.\nMITRE evaluated two multiple-participant collaboration\nsystems[7] focusing on synchronous collaboration (though\nreplay was possible). In contrast to the \u201cwear\u201d system\nthis experiment instrumented the collaboration tools along\nwith change tracking, providing a richer interaction record.\nSeveral different visualisations were employed such as a\ntime-line of data accesses during a session, providing full\nworkspace and social awareness.\nInterLocus[17] implements an interesting form of\nworkspace awareness, without needing shared workspaces.\nInstead a series of snapshots the user\u2019s files are taken and\nthe change details used to generate awareness information.\nThis approach allows the use of any tool but requires syn-\nchronously connected clients and fast communication links.\nA simpler approach to up-to-the-minute workspace aware-\nness is provided by Radar Views[14] which provide pres-\nence and simple action awareness (via telepointers) rather\nthan detailed knowledge of changes.\nSPE\/JViews-based environments[12] manage inconsis-\ntencies during software development, supporting round trip\nengineering, inconsistencies visualisation, peripheral, so-\ncial and workspace awareness using \u201cChange Objects\u201d.\nThe developers of SPE\/JViews discovered that their users\nliked uncluttered graphical awareness views but needed de-\ntailed text views too; much the same was said of Radar\nViews.\nShared editing environments are a special form of shared\nworkspace, relying on synchronous collaboration to pro-\nduce shared documents and diagrams. Lessons learned\nfrom ShrEdit[8] indicate that prior, static assignment of\nroles is not a successful way of providing group struc-\ntural awareness as roles change frequently. Awareness data\nmust be obtained at no cost to information providers as\notherwise the amount of awareness obtained will be min-\nimal. The ShrEdit system did not provide full workspace\nawareness; an acknowledged limitation. Shared diagram\ndevelopment[6] has divergent requirements to text edit-\ning and consequently different awareness needs. As with\nShrEdit, for small sessions social norms supported by in-\nformal awareness are good enough, but for more permanent\ndiagrams formal and enforced task\/concept awareness is re-\nquired.\nIn light of this work, we propose a new type of awareness\nfor collections of artefacts: \u201chistorical awareness\u201d. Like the\nretrospective awareness discussed earlier, historical action\ninformation is presented to the user but unlike retrospective\nawareness, historical awareness deals with a collection of\nheterogeneous artefacts allowing the user to view the com-\nplete context of an artefact\u2019s creation and change into its\npresent form rather than a contextless view of changes to a\nsingle artefact.\nHistorical awareness is superficially similar to changel-\nogs and history views provided by SCM systems but, un-\nlike these systems, provides information that has not been\nexplicitly requested by the user.\n3.2 Common architectures for awareness\nA simple architecture for awareness support is the \u201cre-\nflector\u201d model. Each client transmits activity details to the\nreflector, which distributes this information to other clients,\nallowing awareness displays on each one. Though simple\nand capable of providing a complete awareness picture, the\nnumber of clients is limited by the resources available to\nthe reflector system. Such systems include WhitePine CU-\nSeeMe and Microsoft Netmeeting.\nPeer-to-peer awareness architectures do not have a re-\nflector; instead each client knows of several peers with\nwhich it exchanges information[3]. Clients in a peer-to-peer\nawareness network cannot assume that they know of all ac-\ntivities as they may not be linked to all peers, nor that they\nare receiving timely information. The size of the network\nis limited by the capacity of communications links between\npeers and the presence or absence of a peer discovery sys-\ntem.\nAnother enabling technology for awareness is publish-\nsubscribe. Events are generated by the system and clients\nneed only receive those they are interested in. They indi-\ncate interesting event types by making a subscription. The\nMOTION[10] system uses publish\/subscribe to support mo-\nbile teamwork, awareness support. Two problems exist with\npublish\/subscribe:\n\u2022 finding the correct subscriptions to ensure a client re-\nceives all pertinent events and\n3\n\u2022 preventing information overload through over-zealous\nsubscription!\nComplex filtering regimes require fast communication\n(if implemented on the client) or can slow event delivery\n(if implemented on the server). Campailla et al[5] describe\na filtering system intended to deliver messages quickly to\nclients with complex subscriptions.\nFinally, \u201cshared view\u201d systems have enjoyed a renais-\nsance with tools such as Virtual Network Computing[1]\nused with awareness-capable tools such as shared editors\nwhich incorporate presence awareness and shared interac-\ntion with a single application.\n4 Adding awareness support to OSCAR\nTable 2 lists some activities OSCAR supports and the\ntypes of awareness they require. The first five are specific\nfeatures of OSCAR; the remaining are two example activi-\nties that OSCAR will be used for in the GENESIS project\nevaluation.\nActivity Awareness Types\nEdit artefact meta-data and\ndata\nSocial\/presence,\nworkspace\nJoint development of arte-\nfacts\ngroup structural,\nworkspace, historical\nRelate artefacts by project,\ncreator etc\ngroup structural, historical\nRe-using existing artefacts workspace, group struc-\ntural, historical\nAnnotation of artefacts informal, conversational\nSupport software testing task\/concept, workspace,\nconversational, group\nstructural\nDevelopment of web appli-\ncation\ntask\/concept, workspace,\ngroup structural\nTable 2. Activities supported by OSCAR\nThe most basic features of OSCAR are creating and edit-\ning the stored artefacts. The awareness types useful here are\nsimple: presence awareness so users know who is around\nand workspace awareness to describe what is happening to\nthe artefacts of interest. Joint development has additional\nrequirements as users must be aware of group information\nin order to collaborate, alongside the workspace awareness\nnecessary for preventing conflict. This group awareness in-\nformation can be derived from relationship meta-data asso-\nciated with each artefact, which includes information such\nas creator, contributors, any projects the artefact is related\nto etc.\nGroup structural awareness can also be used to discover\nwhich artefacts are used elsewhere by other users, indicat-\ning potential re-use candidates. Annotation artefacts exist\nto contain supplementary information (such as case stud-\nies, communication records etc.) and can provide a form\nof conversational awareness: \u201cwho is talking about which\nartefacts\u201d related to workspace awareness.\nBoth the evaluation tasks in the table rely on task\/concept\nawareness which cannot easily be supported by OSCAR\nwithout the GENESIS work-flow system. A discussion of\nsuch integration is beyond the scope of this paper. Both\ntasks rely on workspace and group structural awareness in-\ndicating that these types are the most useful for the GEN-\nESIS project evaluation. The evaluation of software testing\nwill also benefit from conversational awareness, indicating\nto users what others say about test-case results and the soft-\nware they test.\n4.1 Approach\nIn order to support awareness, another subsystem must\nbe added to OSCAR which keeps track of clients connected\nto OSCAR both directly or via any distribution mechanism.\nThe types of awareness those clients request will determine\nthe information sent to them; a simple way to avoid send-\ning all the information. Furthermore the event management\nsystem must be connected to an extensible awareness infor-\nmation generator to create the requested information. On\nthe client side, a generic container for the awareness dis-\nplay must be available to support multiple awareness views.\nThe revised architecture is shown in figure 2.\nSTO\nRA\nG\nE\nM\nA\nN\nA\nG\nER\nEV\nEN\nT   M\nA\nN\nA\nG\nEM\nEN\nT\nARTEFACT COLLECTION\nREPOSITORY LAYER\n(CVS + RDBMS)\nTRANSFORMATION\nCLIENTS\nChange\nChange\nRequest\/Update\nTransform\nArtefacts\nStore\nArtefacts\nNetwork\nAWARNESS\nINFO\nARTEFACT\nFILTERED\nAWARENESS EVENTS\nLAYER\nAWARENESS\nGENERATOR\nFigure 2. Revised OSCAR Architecture\nOSCAR\u2019s existing event management subsystem will be\nused to collect events containing useful information which\n4\nwill then be passed to an awareness information genera-\ntor where initial filtering and sorting of the events will take\nplace. The organised collections of events will then pass to\nthe transformation layer which shall perform final filtering\nand turn the events into a form that the clients can render.\nThe proposed prototype approach is oriented to timeline\nawareness display of artefact changes. Figure 3 shows an\nexample timeline including a key for the symbols shown.\nThe proximity of the lines indicates how close the system\nbelieves the two users\u2019 activities are to conflicting. Time-\nlines may be drawn for artefacts and the actions of users.\nThe conversion of raw OSCAR events into timeline infor-\nmation will take place in the existing transformation sub-\nsystem of OSCAR and the resulting output transmitted to\nthe clients for rendering. This approach has the advantage\nthat timelines can be applied to past versions of artefacts\nor applied in soft real time with variable granularity of the\ndisplayed events achieved by disregarding events deemed\nunimportant. This variation in granularity allows the aware-\nness display to cope when events are missing, merely result-\ning in a gap on the timeline instead of system failure.\n\u0000 \u0000 \u0000\n\u0000 \u0000 \u0000\n\u0000 \u0000 \u0000\n\u0001 \u0001 \u0001\n\u0001 \u0001 \u0001\n\u0001 \u0001 \u0001\n\u0002 \u0002 \u0002\n\u0002 \u0002 \u0002\n\u0002 \u0002 \u0002\n\u0003 \u0003 \u0003\n\u0003 \u0003 \u0003\n\u0003 \u0003 \u0003\nRESOLUTION\nAF32\nAF61\nAF32\nAF75AF75\nYOU\n\"BOB\"\nAF1234 Artefact ID\nWorkspace join\/leave\nConflict\nExamine\nUpdate\nArtefact Interaction\nAF75\nAF75\nFigure 3. Example Timeline\n4.2 Instrumentation\nThe presence of centralised event management and dis-\npatching in both forms of OSCAR\u2019s architecture allow sys-\ntem instrumentation by recording these events at the server\nside, irrespective of whether they are subsequently sent to\nthe clients. These events may then be used as a session\nrecord or to calculate metrics about OSCAR sessions, sup-\nporting the evaluation of OSCAR described in section 5.\nThough collecting all information from instrumented\nclients would yield more raw data, establishing the tempo-\nral order of events between clients would be difficult, also\nclients may lose information due to operator error. Since\nclient actions are only \u201cimportant\u201d in historical awareness\nterms when they can affect other artefacts, i.e when they\nact on artefacts held in OSCAR rather than local copies, a\nserver-only approach is sufficient for our needs. Addition-\nally, \u201cserver-only\u201d instrumentation is easier to deploy for\nproduction environment studies than multiple, potentially\ndistributed, clients which need to \u201cphone home\u201d on a regu-\nlar basis to return their event logs.\n5 Evaluation\nTo ensure that the support we are developing addresses\nthe motivating concerns outlined in section 1 we must eval-\nuate the awareness support provided by OSCAR. Since OS-\nCAR is intended for all phases of everyday software engi-\nneering, studying the actions of users by analysing event\ndata and session logs collected transparently will minimise\ninterference by the experiment with the user activities.\nFor example, to find out how our historical awareness\nand timeline views affects the incidence of conflicts be-\ntween users of OSCAR, two similar problems based on ex-\nisting collections of artefacts could be given to the users:\none problem to be solved with the assistance of the aware-\nness support and one without. Comparing the metrics out-\nput from the two sessions, and the types of artefacts created\nand modified to solve the problem will show how the addi-\ntion of awareness to OSCAR affects the users of the system\nand the quality of artefacts they develop. The intention is\nto compare code quality, both by simple automatic metrics\nsuch as defect level and by inspection of the finished sys-\ntems to obtain a qualitative judgement of their soundness.\nAs a second stage, the GENESIS project\u2019s industrial part-\nners will be asked to examine the awareness extensions for\napplication in their work.\n6 Summary, Open Issues, and Future Work\nAn approach to adding asynchronous workspace aware-\nness to an existing software artefact repository has been\nproposed. The elements of \u201cOSCAR Awareness\u201d from the\nWorkspace Awareness Framework[13] are Presence, Activ-\nity Level, Actions, Changes, Objects. The other elements\nof this framework rely either on exclusively synchronous\nshared workspace sessions or on process information which\nOSCAR does not directly support.\nMany existing \u201cworkspace awareness\u201d systems such as\nTUKAN[19], ShrEdit and SPE\/JViews, including the cur-\nrent prototype intended for OSCAR rely on the system de-\nsigners anticipating every way of changing the data and pro-\nviding for it. They do not cope well with deus-ex-machina\nchanges to the contents of the workspace. In OSCAR\u2019s\ncase, it is possible to manipulate the CVS repository di-\nrectly using a standard CVS client, potentially confusing\nthe OSCAR system which at present operates on the as-\nsumption that all actions on artefact data held in CVS will\n5\nbe performed by it alone. Addressing this requires two\nchanges, firstly that OSCAR itself can cope to a certain ex-\ntent with data modifications performed by other means and\nsecondly that awareness collection is not affected by unex-\npected data changes. \u201cInformal awareness\u201d systems like the\nRadar View do not have such issues as they do not deal in\nspecific actions. This flexibility must be balanced against\nthe loss of the complete \u201cawareness picture\u201d available in\nmore restrictive systems.\nA possible way of providing task\/concept awareness by\nusing the GENESIS platform\u2019s work-flow system was men-\ntioned above; however other approaches that do not rely on\nany external tool must be examined as a part of any future\nwork. One such awareness model is implemented in the\nTUKAN system which provides task awareness in the soft-\nware development domain with the intention of finding suit-\nable development partners to work with. Task awareness\nderived from a work-flow system will be limited to tasks di-\nrectly managed by that system and will not include aware-\nness about tasks taking place outside a predefined process\nor during deviations from a predefined process.\nAlongside the architectural changes proposed in the ap-\nproach discussion, we must find a suitable distribution\nmodel which supports awareness across a network of OS-\nCAR systems without excessive communications overhead\nor data loss.\nReferences\n[1] Virtual network computing. [@:] http:\/\/www.realvnc.org.\n[2] L. Aversano, C. Aniello, P. Gallucci, and M. L. Villani.\nFlowmanager: a workflow management system based on\npetri nets. In Proc. of the 26th Annual International Com-\nputer Software and Applications Conference, COMPSAC02,\npages 1054\u20131059, Oxford, England, August 2002. IEEE\nComputer Press.\n[3] S. Bowen and F. Maurer. Designing a distributed soft-\nware development support system using a peer-to-peer ar-\nchitecture. In Workshop on Cooperative Supports for Dis-\ntributed Software Engineering Processes (with COMPSAC\n2002), pages 1087\u20131092, Oxford, England, August 2002.\nIEEE Computer Society Press.\n[4] D. G. Boyer, M. Cortes, J. Herbsleb, and M. J. Handel. Vir-\ntual community presence awareness. ACM SIGGROUP Bul-\nletin, 19(3):11\u201314, 1998.\n[5] A. Campailla, S. Chaki, E. Clarke, S. Jha, and H. Veith. Effi-\ncient filtering in publish-subscribe system. In Proc. of the In-\nternational Conference on Software Engineering (ICSE01),\npages 443\u2013452. ACM Press, New York City, May 2001.\n[6] J. D. Campbell. Characteristics of group development of di-\nagrams. In Proc. of the Eleventh International Workshops on\nEnabling Technologies for Collaborative Enterprises (WET-\nICE02), pages 29\u201334, Carnegie Mellon University, Pitts-\nburgh, June 2002. IEEE Computer Society Press.\n[7] L. E. Damianos, J. Drury, T. Fanderclai, L. Hirschmann,\nJ. Kurtz, and B. Oshika. Evaluating multi-party multi-\nmodal systems. In Proc. Of the 2nd International Confer-\nence on Language Resources and Evaluation (LREC2000),\nAthens, MITRE Corporation, 202 Burlington Road, Bed-\nford, MA01730 USA, May 2000.\n[8] P. Dourish and V. Belotti. Awareness and coordination\nin shared workspaces. In ACM Conference on Computer\nSupported Cooperative Work (CSCW\u201992), pages 107\u2013114,\nToronto, Ontario, November 1992. ACM Press, New York\nCity.\n[9] J. Drury and M. G. Williams. A framework for role-\nbased specification and evaluation of awareness support in\nsynchronous collaborative applications. In Proceedings of\nthe 11th International Workshops on Enabling Technologies\nfor Collaborative Enterprises (WETICE02), pages 12\u201317,\nCarnegie Mellon University, Pittsburgh, June 2002. IEEE\nComputer Society Press.\n[10] P. Fenjam, E. Kirda, S. Dustdar, H. Gall, and G. Reif. Eval-\nuation of a publish\/subscribe system for collaborative and\nmobile working. In Proc. of the Eleventh International\nWorkshops on Enabling Technologies for Collaborative En-\nterprises (WETICE02), pages 23\u201328. IEEE Computer Soci-\nety Press, June 2002.\n[11] M. Gaeta and P. Ritrovato. Generalised environment for\nprocess management in cooperative software engineering.\nIn Workshop on Cooperative Supports for Distributed Soft-\nware Engineering Processes (with COMPSAC 2002), pages\n1049\u20131053, Oxford, England, August 2002. IEEE Com-\nputer Society Press.\n[12] J. Grundy, J. Hosking, and W. B. Mugridge. Inconsistency\nmanagement for multiple view software development en-\nvironments. IEEE Transactions On Software Engineering,\n24(11):960\u2013981, November 1998.\n[13] C. Gutwin and S. Greenberg. Workspace awareness for\ngroupware. In CHI Conference Companion, pages 208\u2013209,\n1996.\n[14] C. Gutwin, S. Greenberg, and M. Roseman. Workspace\nawareness support with radar views. In CHI Conference\nCompanion, pages 210\u2013211, 1996.\n[15] W. C. Hill and J. D. Hollan. History-enriched digital objects.\nIn Proc. of the ACM Conference on Computers, Freedom\nand Privacy CFP\u201993, pages 9.16\u20139.20. ACM Press, New\nYork City, 1993.\n[16] W. C. Hill and J. D. Hollan. History-enriched source code.\nUnpublished manuscript, August 1993.\n[17] T. Nomura, K. Hayashi, T. Hazama, and S. Gudmundson.\nInterlocus: Workspace configuration mechanisms for activ-\nity awareness. In Proc. of the ACM Conference on Com-\nputer Supported Cooperative Work (CSCW\u201998), pages 19\u2013\n28. ACM Press, New York City, November 1998.\n[18] D. Nutter, S. Rank, and C. Boldyreff. Architectural require-\nments for an Open Source Component and Artefact Reposi-\ntory System within GENESIS. In Proc. of the Open Source\nSoftware Development Workshop, pages 176\u2013196. Univer-\nsity Of Newcastle, February 2002.\n[19] T. Schu\u00a8mmer. Lost and found in software space. In\nThe 34th Annual Hawaii Internationl Confernece on Sys-\ntem Sciences (HICSS01). GMD-IPSI, IEEE Computer Soci-\nety Press, 2001.\n6\n"}