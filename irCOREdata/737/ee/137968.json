{"doi":"10.1243\/0954405021519898","coreId":"137968","oai":"oai:dspace.lib.cranfield.ac.uk:1826\/1048","identifiers":["oai:dspace.lib.cranfield.ac.uk:1826\/1048","10.1243\/0954405021519898"],"title":"A product data management integrated product configuration and assembly process planning environment.","authors":["Gao, James X.","Bowland, N. W."],"enrichments":{"references":[{"id":38116915,"title":"A system for automatic extraction of feature-based assembly information.","authors":[],"date":"1999","doi":"10.1243\/0954405991516705","raw":"Pham, D. T. and Dimov, S. S. A system for automatic extraction of feature-based assembly information. Proceedings of the Institute of Mechanical Engineers, Vol. 213, Part B (1999). 7  Wang, E. and Kim, Y. S. Feature-based assembly mating reasoning. Journal of Manufacturing Systems, Vol. 18, No. 3 (1999).","cites":null},{"id":38116910,"title":"Automated sequencing and subassembly detection in assembly planning.","authors":[],"date":"1992","doi":"10.1016\/s0007-8506(07)61140-8","raw":"G. Dini, G. and Santochi, M. Automated sequencing and subassembly detection in assembly planning. Annals of the CIRP, Vol. 41, No. 1 (1992).","cites":null},{"id":38116914,"title":"Automatic generation of mechanical assembly sequences.","authors":[],"date":"1988","doi":"10.1007\/978-1-4615-4038-0_7","raw":"Homem de Mello, L. S. and Sanderson, A. C. Automatic generation of mechanical assembly sequences. Technical report: Carnegie Mellon University (1988).","cites":null},{"id":38116911,"title":"Disassembly analysis for electromechanical products: a graph-based heuristic approach.","authors":[],"date":"2000","doi":"10.1080\/002075400188988","raw":"Kuo, T. C., Zhang, H. C. and Huang, S. H. Disassembly analysis for electromechanical products: a graph-based heuristic approach. International Journal of Production Research, Vol. 38, No. 5 (2000).","cites":null},{"id":38116913,"title":"Integrated knowledge-based assembly sequence planning.","authors":[],"date":"1998","doi":"10.1007\/bf01179417","raw":"Zha, X. F., Lim, S. Y. E. and Fok, S. C. Integrated knowledge-based assembly sequence planning.  International Journal of Advanced Manufacturing Technology, Vol. 14: 50-64 (1998).","cites":null},{"id":38116916,"title":"Product data management: the definition. Fourth Edition","authors":[],"date":"1996","doi":null,"raw":"CIMdata Incorporated. Product data management: the definition. Fourth Edition (1996).","cites":null},{"id":38116912,"title":"Representation and selection of assembly sequences in computer-aided assembly process planning.","authors":[],"date":"1997","doi":"10.1080\/002075497194183","raw":"R.B. Gottipolu, R. B. and Ghosh, K. Representation and selection of assembly sequences in computer-aided assembly process planning. International Journal of Production Research, Vol. 35, No. 12 (1997).","cites":null}],"documentType":{"type":0.8888888889}},"contributors":[],"datePublished":"2002-03","abstract":"This paper reports part of the results of a 3 year project carried out at Cranfield University in collaboration with companies in the automotive and aerospace industry, aiming to develop new methodologies for computer aided assembly process planning (CAAPP). CAAPP is not a mature technology, despite the managerial and technical advantages offered by its implementation. This paper describes the limiting factors in industrial acceptance of CAAPP and discusses methodologies by which these factors can be eliminated. This is done primarily by the integration of CAAPP functionality with a product data management (PDM) tool, providing a data control framework and a high-level data structure to form the basis of planning. The paper also details a system based on the described approach. The underlying object-oriented model developed to facilitate automated assembly process planning is described in detail. Data control methodologies are presented to aid retrieval, storage and creation. Methods for the definition of liaisons, mating features, are discussed. The methodologies used for constraint identification, process sequence generation and sequence representation within the system are described. Multiple sequences are represented by means of a tree structure, similar to the AND\/OR graph representation. The sequence is navigable and can be used for downstream sequence evaluation and simulation or to generate scheduling data","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/137968.pdf","fullTextIdentifier":"http:\/\/hdl.handle.net\/1826\/1048","pdfHashValue":"eb55b0d0bed93186f5f44d53c3b4fc9b5ed187c8","publisher":"Professional Engineering Publishing","rawRecordXml":"<record><header><identifier>\noai:dspace.lib.cranfield.ac.uk:1826\/1048<\/identifier><datestamp>2010-04-29T13:49:45Z<\/datestamp><setSpec>hdl_1826_24<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>A product data management integrated product configuration and assembly process planning environment.<\/dc:title><dc:creator>Gao, James X.<\/dc:creator><dc:creator>Bowland, N. W.<\/dc:creator><dc:description>This paper reports part of the results of a 3 year project carried out at Cranfield University in collaboration with companies in the automotive and aerospace industry, aiming to develop new methodologies for computer aided assembly process planning (CAAPP). CAAPP is not a mature technology, despite the managerial and technical advantages offered by its implementation. This paper describes the limiting factors in industrial acceptance of CAAPP and discusses methodologies by which these factors can be eliminated. This is done primarily by the integration of CAAPP functionality with a product data management (PDM) tool, providing a data control framework and a high-level data structure to form the basis of planning. The paper also details a system based on the described approach. The underlying object-oriented model developed to facilitate automated assembly process planning is described in detail. Data control methodologies are presented to aid retrieval, storage and creation. Methods for the definition of liaisons, mating features, are discussed. The methodologies used for constraint identification, process sequence generation and sequence representation within the system are described. Multiple sequences are represented by means of a tree structure, similar to the AND\/OR graph representation. The sequence is navigable and can be used for downstream sequence evaluation and simulation or to generate scheduling data.<\/dc:description><dc:publisher>Professional Engineering Publishing<\/dc:publisher><dc:date>2006-04-28T14:33:44Z<\/dc:date><dc:date>2006-04-28T14:33:44Z<\/dc:date><dc:date>2002-03<\/dc:date><dc:type>Article<\/dc:type><dc:format>168137 bytes<\/dc:format><dc:format>application\/pdf<\/dc:format><dc:identifier>Gao, J X; Bowland, N W; A product data management integrated product configuration and assembly process planning environment. Proceedings of the Institution of Mechanical Engineers Part B. Engineering Manufacture. Mar 2002, Vol. 216 Issue 3, p407-418.<\/dc:identifier><dc:identifier>0954-4054<\/dc:identifier><dc:identifier>http:\/\/hdl.handle.net\/1826\/1048<\/dc:identifier><dc:identifier>http:\/\/dx.doi.org\/10.1243\/0954405021519898<\/dc:identifier><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0954-4054","issn:0954-4054"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2002,"topics":[],"subject":["Article"],"fullText":"A Product Data Management Integrated Product Configuration and Assembly Process \nPlanning Environment \nJ.X. Gao and N.W. Bowland \nSchool of Industrial and Manufacturing Science \nCranfield University \nCranfield, Bedford, MK43 0AL \nEmail: james.gao@cranfield.ac.uk \n \nAbstract \n \nThis paper reports part of the results of a three year project carried out at Cranfield University in \ncollaboration with companies in the automotive and aerospace industry, aiming to develop new \nmethodologies for Computer-Aided Assembly Process Planning (CAAPP). CAAPP is not a mature \ntechnology, despite the managerial and technical advantages offered by its implementation. This \npaper describes the limiting factors in industrial acceptance of CAAPP and discusses \nmethodologies by which these factors can be eliminated. This is done primarily by the integration \nof CAAPP functionality with a Product Data Management (PDM) tool, providing a data control \nframework and a high-level data structure to form the basis of planning. The paper also details a \nsystem based on the described approach. The underlying object-oriented model developed to \nfacilitate automated assembly process planning is described in detail. Data control methodologies \nare presented to aid retrieval, storage and creation. Methods for the definition of liaisons, mating \nfeatures are discussed. The methodologies used for constraint identification, process sequence \ngeneration and sequence representation within the system are described. Multiple sequences are \nrepresented by means of a tree structure, similar to the AND\/OR graph representation. The \nsequence is navigable and can be used downstream sequence evaluation and simulation or to \ngenerate scheduling data. \n Keywords: Computer-aided assembly process planning, product data management, CAD\/CAM \nintegration \n \n1. Introduction \n1.1 Assembly planning problems \n \n \nDespite considerable research effort over the past two decades, Computer-Aided Assembly \nProcess Planning (CAAPP) has remained an immature technology. The authors suggest that this is \nin part due to certain management and technical barriers that are not addressed even by state-of-\nthe-art solutions to the CAAPP problem. Firstly, there is little opportunity for upstream or \ndownstream automation of clerical or technical tasks, such as data retrieval and plan rendition or \ndissemination. Previous assembly planning systems have been developed in isolation from other \nsoftware tools. This results in a highly unusable and ineffective solution for the industrial user. \nSecondly, there is no easy, intuitive method to manage the complexity of the planning problem. It \nis recognised that the assembly planning problem is extremely complex. Therefore, simplifications \nmust be made, whilst maintaining the usefulness of the system. The two most complex aspects of \nthe assembly planning problem can be seen as the generation of fully general vector trajectories \nand the simultaneous generation of all possible product configurations. This system, like many \nothers, considers only translations along and rotations about the positive and negative major axes. \nUnlike other systems, this one accepts a simplified product model, defined in an existing data \nmanagement tool, providing a powerful and consistent method of product sub-division. Thirdly, \nCAAPP systems are too sequence driven in that they do not consider process selection, a mainstay \nof manufacturing process planning. A simple, chronological list of components is at too low a \nlevel to be of any use to industrial users. It does not facilitate downstream analysis of the assembly \ntasks and, more importantly, does not allow process information to influence sequence generation. \nThese barriers have proven to be limiting factors in the industrial acceptance of CAAPP as a \nmature technology. This paper describes a methodology for furthering the state-of-the-art in \nassembly planning through various measures to tackle these issues. The implementation of a \nCAAPP system, entitled MAPS (Manufacturing Assembly Process Sequencer), based on the \ndeveloped methodology is also described. \n \n1.2 Assembly planning principles \n \nThis section describes both the works upon which the developed methodology is based and \ncontemporary developments from the field at large. The generation of feasible assembly sequences \nby the utilisation of Computer-Aided Design (CAD) data and a series of reasoning mechanisms \nhas been shown to be possible. A simplified principle based on considering only orthogonal \ntrajectories has emerged since the matrix representations introduced by Dini and Santochi [1]. \nThey described that the key aspect of the assembly planning problem was the representation of the \ngeometrical and technical relationships between the components in a manner easily managed by a \ncomputer. Thus, an assembly was modelled by means of three matrices, i.e., an interference \nmatrix, a contact matrix and a connection matrix. One of each of these matrices is used along the \nthree major axes, resulting in a total of nine matrices. Each matrix, for an n-component assembly, \nis a square matrix of order n, formed by n row and column elements, e1,e2,\u2026,en. Thus, the various \nrelationships between all the components can be encoded. Despite being superseded by more \nadvanced methods, this methodology is still used as a basis for CAAPP [2,3]. This methodology \nhas been extended [4] into a rather more compact, binary function form through combination with \nthe representation of Homem de Mello [5]. More importantly, the binary function values (used to \nindicate contact and interference etc.) where determined using CAD data and sequences \ndetermined by expert systems or heuristic methods. A binary representation is limited, as the \nassembly model requires extensive translation for human understanding. In response to this \nlimitation, feature-based representations were developed [6,7]. Models of this type are far more \nintuitive without losing computational efficiency. Furthermore, this representation integrates well \nwith both object-oriented software development and knowledge-based methods of reasoning. \nFeature-based modelling provides good opportunities for more efficient and effective constraint \nextraction, liaison validation, process selection, sequence evaluation and structure visualisation. \nThis work, therefore, proposes to use a combination of the matrix representation and a simplified \nfeature-based methodology, developed in an object-oriented fashion. \n \n1.3 PDM environment for assembly planning \n \nProduct Data Management (PDM) systems are tools that help engineers and others manage data \nand product lifecycle processes. PDM systems keep track of the huge amounts of information \nrequired for and generated during a product development lifecycle [8]. They ensure live data is up-\nto-date and old data is archived correctly, provide security measures and allow data to be properly \ntracked and audited. Workflow and process management allows an enterprise to define the ways in \nwhich changes may be made to product data, providing methods to automatically route data and \naudit approval decisions. Other benefits of PDM include product structure management, part \nclassification and widespread dissemination of data through translation or rendition. The \nintegration of CAAPP and data management technology can provide an excellent means of \nproviding solutions to some of the problems described above. PDM tools often provide methods \nby which other software systems may use their resources. This project utilises the Motiva \nDesignGroup, a mid-range, Windows-based PDM system to provide a data control framework on \nwhich the CAAPP system is based. The DesignGroup development kit consists of various ActiveX \ncontrols and type libraries that give developers access to the majority of the system\u2019s resources. \nThis type of component-based integration provides a quick and effective method of providing \nengineering software with high quality data with as little coding as possible. A PDM system can be \nused as a data portal. For engineering software to be useful and provide meaningful results, the \ndata it uses must be complete, correct and up-to-date. The collection of the relevant data is \nessentially a clerical task and is, therefore, wasted time for skilled engineers. Integration of \nCAAPP and PDM provides various methods to simplify the retrieval of relevant data, dramatically \ncutting down this wasted time. Primarily, this advantage is facilitated by the use of a powerful and \nconsistent interface to allow access to the data within the PDM system vault.  \n2. The Prototype Assembly Planning System MAPS \n \n2.1  Product configuration management using MAPS \n \nThis project differs from other CAAPP systems (most systems discussed above used complicated \ndata structures for assembly modelling) in that it accepts a simplified product model as its input. \nThe assembly model is built in the PDM system and is a hierarchical representation of a product. \nNote that the hierarchical representation means that inter-component relationships are not \ndescribed; the model encodes \u201cis-part-of\u201d relationships between a configuration and its members. \nAn assembly is considered as a configuration, consisting of components, fasteners and \nconfigurations at a lower-level (sub-assemblies). Each of these three entity types is characterised \nby a document type in the PDM system and referenced by the configuration to which they belong. \nFigure 1 shows an example of a simple product model (configuration) used to test the system in \nthe early stage of the project (real example is given in Section 3). Note that an entity is referenced \nonly once, irrespective of how many times it appears within the same level of configuration. The \ndivision of a product by this method allows MAPS to differentiate between entities in an assembly \nwithout any need to reason on geometrical attributes or other complex data. When assembly \nplanning data is checked-in or created in the PDM system, the user must assign the correct \ndocument type to the file. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n(a) \n \n \n \n \n(b) \n \n \n \nFigure 1: The product model structure (a) and a simple block assembly defined in the PDM system (b) \n \nEach of the entities used to classify an assembly has an associated file. A configuration document \nis, in fact, a relational database file. This is used to store the property values of the object model \nused during planning, meaning that the system supports incomplete structure definitions and \nmultiple planning sessions from a single configuration. The database itself consists of four tables; \nthese store data about components, links, mating features and, finally, any ancillary PDM \ndocuments associated with the configuration (such as a skinned solid model). A component \nAssembly \nModel \n(Configuration) \nFasteners \n(Document) \nComponent \n(Document) \nSub-Assembly \nModel \n(Configuration) \nIs-part-of \nDocument Type \nReference Type \nOthers \nAssociated File \nDocument Type \nReference Type \nOthers \nAssociated File \nComponent \n(ACIS solid file) \nLinks \nMating Features \nOthers \ndocument is a prepared ACIS solid model file representing the component geometry. The system \nprepares the geometry simply by scanning through the component and giving each face a unique \ntag. This is done by assigning attributes to face entities found in the geometry. This allows MAPS \nto find relevant faces without having to attach further data to the ACIS file. Once the file is \nsuitably prepared MAPS needs only to copy-out component documents on which it is to work, \nhelping to protect the integrity of working data. A fastener document is also a relational database \nfile. Many CAAPP systems in the past have applied geometrical reasoning techniques to fasteners \nas well as components. This is ineffective as fastener geometry is often complex, yet their function \nsimple, and they are normally standard parts. In this work a fastener is characterised by its \noperational parameters rather than its geometry. Both relational data and expert system rules are \nused in the handling of fasteners within the system. This data is external to the system itself and so \ncan be altered or extended by the user, yet is managed in the PDM system to ensure its quality. \n \nThe product model used as input to the CAAPP system provides an intuitive method of sub-\ndividing a product into smaller configurations. This can be utilised as a complexity management \ntool. Plans are generated for each configuration and merged at a later time to produce a full plan. \nAllowing engineers to divide the product into units defined by them reduces the problem of \ncombinatorial explosion by eliminating a large number of theoretical combinations that need not \nbe considered. Using the PDM system to define configurations is a good solution, as this kind of \nconfiguration management is common in that environment. The configuration of the document \ntypes and relationships (within the PDM system) can be simplified, to meet MAPS basic \nrequirements, or complex modelling the business rules and process standards used enterprise-wide. \nUsing MAPS on certain entities in the PDM system does not prevent them from being part of \nworkflow activities or other advanced data management techniques; thus, the system can be said to \nbe truly PDM-integrated. \n \n2.2 CAD Integration \n \nIn order to provide the user with high quality visualisation tools, MAPS has an integrated CAD \nviewer based on the ACIS solid modelling system. The ACIS kernel can now be obtained as a \ncomponent (BuildingBlox), providing excellent scope for quickly and effectively integrating solid \nmodelling technology into engineering software applications. MAPS uses this CAD technology for \na number of tasks. Firstly, users may preview the solid model file associated to a component \ndocument. If mating or constraint feature definitions exist for a specific component in a specific \nconfiguration these may also be viewed. Secondly, the user is expected to select contact surfaces \nfor parts in liaison. This project uses a simplified assembly feature representation to classify \nmating entities. A feature is defined as a component surface (or set of surfaces) that has some \nrelationship (contact, offset, etc.) to a surface (or set of surfaces) on another component, as shown \nat the bottom-right corner of figure 2. Surface data for the selected entities is extracted and used to \nidentify it against a collection of library features. During planning, MAPS derives the local \nfreedom of a component with respect to each of its related components. This is done by taking a \npair of related parts in their assembled configuration, subjecting one of the pair to a set of \ntranslations and rotations and conducting volumetric Boolean operations to reveal any component \ninterference. This technique, although exhaustive, does not take an unreasonable amount of time. \nThis gives the Local Freedom Matrix (LFM), F1,2, which encodes in binary form the freedom of \nthe two parts with respect to each other, holding component 1 in a fixed position and translating \ncomponent 2. Each element of F1,2 represents the freedom of component 2 under a translation \nalong (of user-defined magnitude d) or a rotation about (of user-defined angle \u03c9) a major axis. The \nform of F1,2 is as shown in equation 1. It can be seen that F2,1 can easily be obtained through a \nsimple transformation on F1,2. \n\u23a5\u23a5\n\u23a5\n\u23a6\n\u23a4\n\u23a2\u23a2\n\u23a2\n\u23a3\n\u23a1\n=\nzfzfdzfdzf\nyfyfdyfdyf\nxfxfdxfdxf\n\u03c9\u03c9\n\u03c9\u03c9\n\u03c9\u03c9\n1,21,21,21,2\n1,21,21,21,2\n1,21,21,21,2\n2,1F  [1] \nWhere f 2,1dx and f 2,1 dx  are the translation of component 2 with respect to component 1 along the \n+x direction and \u2013x direction respectively. And xf \u03c91,2  and xf \u03c91,2  are the rotation of component \n2 with respect to component 1 about the +x and \u2013x direction respectively. Other elements in \nequation 1 can be explained similarly. \n \nIt can be seen from equation 1 that a link can be assigned an LFM to describe the way in which it \neffects the local freedom of the components associated with it. The Resultant Local Freedom \nMatrix (RLFM) of a component, e.g., F1, based on all of its liaisons with other n components, can \nbe derived through conducting a Boolean \u201cand\u201d operation on each of its LFMs, as shown in \nequation 2. \nnba ,1,1,11 FFFF \u2227\u2227\u2227= K  [2] \nDuring planning, the RLFMs are recalculated each time the status of the structure changes, \nproviding a method of locating candidate components for removal at any stage of planning. This is \nthe backbone of the trajectory planning functionality of MAPS. Simple constraints, such as floor \ndefinitions and fixtures, are implemented as mating features that eliminate degrees-of-freedom in \nthe LFMs of constrained components. Therefore, to define the bottom surface of a component to \nbe on the floor, a mating feature is created that eliminates freedom for translations along the \u2013z \naxis. This can be extended to cover no translations in any direction except z and no rotations to \nmodel a base component that remains largely immovable during assembly. The user is free to \ndefine their own constraint features and store them for future use. These resources provide a \nnecessary and sufficient resource for modelling an assembly from which it is possible to devise \nmultiple disassembly sequences. From these disassembly sequences assembly sequences may be \nderived, so called \u201cassembly-by-disassembly\u201d. \n \n2.3 Other tools used in the prototype system \n \nAn assembly structure is often represented by a simple graph. MAPS uses this technique to both \ndisplay a structure definition and allow interaction with the underlying object-oriented \nrepresentation of the assembly. The liaison graph is of a typical form, i.e., a component is \nrepresented by a circular node and an arc linking two nodes represents a liaison between two \ncomponents. Fasteners are represented by a square node, midway along a rigid arc. Note that \nlower-level configurations are represented similarly to components but in an alternate colour. \nMAPS uses the diagramming component AddFlow to provide a dynamic method of representing \nan assembly structure. AddFlow provides creation, modification and analysis techniques for \nvarious types of diagram and was found to be an excellent solution to the problem of generating \nliaison graphs. Figure 2 shows the MAPS interface and its constituents, including a simple liaison \ngraph showing product structure at the left-hand side of the figure. The assembly structure can be \naltered through interaction with the liaison graph; adding (or deleting) nodes, links and fastener \ndetails immediately updates the object-oriented model used to represent an assembly in MAPS. \nAdding a node to the assembly graph directly corresponds to adding an object to the collection of \ncomponents. Adding a link, in turn, corresponds to adding an object to the collection of liaisons, \nand so on throughout the model. In fact, it is the objects themselves that know how to interact with \nthe outside-world, ensuring full homogeneity between the object model and the liaison graph. To \nfacilitate rule-based reasoning, the CLIPS expert system is embedded in MAPS. This allows the \nsystem to process rule files and retrieve the results. Figure 3 shows the configuration of tools used \nin the MAPS development project.  Getting and setting CLIPS variables and controlling expert \nprocesses is facilitated by an external Dynamic Link Library (DLL), containing CLIPS user-\ndefined functions and the code to initialise, run and return results from a knowledge-base.  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFigure 2. The MAPS interface and its components \n \nAs seen in figure 3, MAPS itself is implemented in Visual Basic and C, running under the \nWindows NT operating system. Motiva DesignGroup PDM System is used to handle product data \nand related documents. It interacts with Spatial Technology Building Blox (ACIS) to generate \nLiaison Graph: \n Preview component\/config. \n Add\/remove component\/link\/config. \n Define surfaces. \n Fasten link. \n Link properties. Toolbox: \n Preview component\/config\/fastener. \n Add component\/config. \nFasten link. \nCAD viewer: \nView component\/config. \nAdd\/remove\/view mating feature. \nView feature parameters.\nMating feature data: \nExtensive feature information \nextracted from ACIS solid \nsolid models for products and extract feature and constraint information as needed. The Lassalle \nTechnology AddFlow software is used to construct liaison graphs both manually and automatically \nby the algorithms developed or rules in the CLIPS expert system. \nMAPS\nCAAPP System\nMotiva DesignGroup\nPDM System:\nProduct Modelling\nData Handling\nDocument Management\nSpatial Technology\nBuildingBlox:\nSolid Modelling\nFeature Extraction\nConstraint Extraction\nLassalle Technology\nAddFlow:\nStructure Modelling\nSequence Rep.\nCLIPS\nExpert System:\nProcess Selection\nFeature Recognition\nVisual Basic:\nIntegration\nObject Modelling\nData\nConfiguration\n \n \nFigure 3. The tools used (and their purposes) in the MAPS development \n \n \n3. MAPS Operation \n \nThis section describes how the object-oriented representation of the assembly is built within \nMAPS during the planning process. Firstly, the user initiates a planning session by navigating the \nPDM data vault checking-out the required configuration document. MAPS then resolves the \nentities referenced to the configuration document and presents the user with the standard \nDesignGroup vault access dialogue box. This system dialogue provides tools to search a vault \n(document title, document type, document status, document property and document content \nvariants) and customise the dialogue itself (default settings and look-up locations etc.). Once the \nrequired configuration file has been located, checked-out and its relations resolved, another \nDesignGroup system dialogue box is displayed in which the user may choose which of the \nresolved references they wish to retrieve (i.e. copy-out to their local machine). Thus, MAPS can \nretrieve all of the required data (based on the PDM model) simply by the check-out of the \nconfiguration document under consideration. \n \n3.1 The configuration relation object model \n \nThe data retrieved is used to generate an object model, which represents the referenced entities. \nThis builds a link between the documents in the PDM system and other object models using a \nDesignGroup document identification string as a unique key throughout the system. The relation \nobject model is used to build a toolbox (see figure 2), containing all of the components, fasteners \nand lower-level configurations found for a configuration document. The toolbox\u2019s primary purpose \nis to expose an interface to the relation object model and, hence, the data pertaining to these \nentities. For example, the user may wish to preview a component or constituent configuration \ngeometry and defined mating features or view fastener parameters. Objects may also be added to \nthe assembly model by using the toolbox (but not removed). \n \nFigure 4 shows a diagram of an example configuration which is a door latch currently being \nproduced by the industrial collaborator ArvinMeritor coded as M2S. In this example, the retention \nand back plate assembly cells freed the main assembly cell with subassemblies. The main \nassembly cell feeds the cable and test assembly cell, where the product assembly is completed. As \ndiscussed earlier, the product level configuration document resides at the top level of the hierarchy. \nFigure 5 shows the main line subassembly featuring the retention plate subassembly and the \nconstituent components.  \n \n \n \n \n 3.2 The assembly object model \n \nThe user is then directed to build the assembly object model by adding toolbox objects and links to \nthe structure via the liaison graph. If previous structure definitions exist, the object model can be \nspawned from the data contained in the configuration document (and vice versa). The assembly \nobject model is comprised of four main class-and-object entities; the components, their links, the \nfasteners used and the active mating features. Other objects also exist to hold data about the \nconfiguration itself, to conduct various system tasks and to hold an intermediate plan sequence. As \ndescribed in earlier sections, components, links and fasteners are added to the object model using \nthe toolbox or the liaison graph. Mating features are selected using a CAD tool and written to the \nobject model. The various methods of interacting with the assembly model can be seen in figure 3.  \nFigure 6 shows the resulted liaison graph for the main line subassembly of the example in figure 4 \nand 5.  \n \nCable & Test\nAssembly\nConfiguration\nMain Assembly\nConfiguration\nM2S Latch\nProduct\nConfiguration\nBack Plate\nAssembly\nConfiguration\nRetention Plate\nAssembly\nConfiguration\nFigure 4: Example of configuration level product model \n \nConfiguration\/ Cell Constituent components \nRetention plate sub-assembly Pawl rivet \nClaw rivet \nClaw \nRetention plate \nMain Line Retention plate sub-assembly \nPawl \nPawl lifter \nOutside opening lever \n \n \n \nFigure 5: The main line subassembly featuring the retention plate subassembly and the constituent \ncomponents \n \n \n \n \n \n \n \n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n3.3 Plan generation \n \nDue to the nature of the system, the sequence generator can be run at anytime and will provide \naccurate results based on the current state of the object model. When the plan generator is initiated, \nMAPS batch processes component global freedom (i.e., the system assumes the structure is \ncompletely defined in its assembled state). Global freedom is defined by taking each component in \nturn and determining whether any blocking components lie in the path of a possible disassembly \ntrajectory. This is done by checking each associated link LFM, rather than RLFM, because \ntrajectories impossible in a fully assembled configuration are likely to become possible later. In \nfact, the Global Freedom Matrix (GFM), GFn, which determines all the directions which may be \nFigure 6: The liaison graph of the main line subassembly of the latch example \npossible from some intermediate configuration can be determined using simple Boolean algebra \n(see equation 3). The trajectories determined by the GFM for each component are checked and any \nblocking are recorded. This record can be consulted during sequence generation in order to \ndetermine global freedom. \nnbaG ,1,1,11 FFFF \u2228\u2228\u2228= K  [3] \nAnother batch process is initiated to attempt to derive a process type associated to the realisation of \neach link. This is done by considering the properties of the link and its associated component, \nmating feature and fastener objects. A link to the CLIPS expert system facilitates process selection \nby the activation of specified rule files, governed by the code in the CLIPS user-function DLL. \nCLIPS user-defined functions allow transfer of data from the object model to appropriate CLIPS \nvariables. The work of compiling effective knowledge-bases based on industrial experience is \nongoing. The model is now fully defined, containing local and global constraints, feature-based \ninformation, fastener details and some process information. The structure is recursively examined \nto find locally and globally free candidate components. If multiple candidates are found, the \nconfiguration is stored to allow back-tracking and the generation of multiple sequences. Process \nand fastener details can be used to force MAPS to exclusively consider or overlook links based on \nexpert system rules. Geometrical constraints are evaluated by accessing the object model \nalgorithmically. \n \nThe sequences are represented by a variant array, stored as a property of the plan object. Each \nelement contains a rendition of the state of the structure, information regarding the link (and its \nassociated mating features and fasteners) that has been removed to form that state and another \nvariant array representing the children of that state. This is a similar representation to the AND\/OR \n(i.e. nodes as configurations, arc as possible transitions) graph but is at a higher level. It is possible \nto draw an AND\/OR graph from this data structure and it contains data regarding process \nselection. The array is steadily filled with process sequences as the planner runs. As the assembled \nconfiguration part count can be managed by the PDM system it is possible to avoid the \ncombinatorial explosion often encountered at this stage. \n \nWhen the process sequences are completed (i.e. all permitted paths through configuration space \nhave been followed to full disassembly), MAPS creates a new DesignGroup document object for \nthe intermediate plan. This document object is associated to a relational database file that stores the \nvariant array in tabular form. The object model that controls the display of the intermediate plan \ncan be recreated at any time using the relational data stored in the plan document. Navigation of \nthe intermediate plan is supported within MAPS. A sequence analysis module can be used to view \nthe sequence tree and highlight the possible paths through it. The user can remove specific \nconfigurations at this stage should they wish. The user can view the process, fastener and \nassociated component properties of any particular state transition and apply a weight to them. This \nprovides an elementary method of sequence evaluation. Note that this approach is primarily \nconcerned with the acquisition of process sequences and their representation in such a way as to be \nsuitable for downstream analysis. The output is in a recurring format of 7 lines. These lines and the \nmeaning of the associated data is shown in figure 7.  \n \nLine No Text Remark \n1 Candidate\u2026 Remark line \n2 Sequence #: 1 Sequence of the component in the disassembly. \n3 Name: Retention Plate.sat Name of the component (SAT file) \n4 Key: :mz:goodwood:docsrvr2:003670175 Key of the SAT file in the PDM system \n5 Cell: Retention Plate Name of the assembly cell (in the \nconfiguration) \n6 Cell ID: \n:mz:goodwood:docsrvr2:003670145 \nKey of the assembly cell in the PDM system. \n0 0 0 \n0 0 0 \n0 0 0 \n7 \n1 0 0 \nLocal freedom matrix. \n \nFigure 7: Output of the MAPS for the retention plate of the latch example \n  \n \n \n \n \n \n \n \n \n \n \n \nThis pattern is repeated for each component in the assembly. It gives all the necessary information \nto realise the assembly\/disassembly sequence of the assembly. This output has not been formatted \nor stored in a database deliberately to allow easy viewing, editing and retrieval. In case the system \nis to link to any downstream system for more analysis then this output would have to be formatted \naccordingly. \n \nIn the later stage of the project an interactive planning module has been developed within the same \nenvironment and thus it is fully integrated with MAPS and shares the all the data managed by the \nPDM system. The interactive system can use the result of the automatic system (MAPS) as \nincomplete plans and generate complete assembly plans manually or with support of evaluation \nmethods which can be manually executed. The results of the complete plan using both the \nautomatic system and the interactive system for the latch example have satisfied the company\u2019s \nFigure 8: Format of the resultant assembly plan for the latch example generated using both MAPS \nrequirement and the format is shown in figure 8. In fact the authors do not intend to develop a \nsystem that can generate complete assembly plans automatically. \n \n \n4 Conclusions \n \nThe development of prototype modules has shown that the approach discussed in this paper is \npossible and effective. Initiating planning session takes a very short time and provides the system \nwith correct, up-to-date data without troubling the user. Interaction with the underlying object \nmodel through a liaison graph proved to be fast, intuitive and effective. The identification of local \nand global constraints proved to be fast and accurate (although the system current assumes perfect \ngeometry and does not support tolerance). The planning engine itself works well but the results \ndepend very strongly on the state of the object (i.e. its accuracy) and the quality of the knowledge-\nbased routines that it uses. A case study has been completed with ArvinMeritor for its assembly \nplanning of door latches for motor cars. Further developments are required in the sequence \nanalysis module to allow full interaction with the process sequence tree. Also, gradually refining \nthe object model (and the interface elements to it) as the development continues will increase the \nmodel accuracy and effectiveness with respect to issues such as component type, fastener and \nprocess\/resource modelling. The automatic planning system (i.e., MAPS) proves to be the ideal \ninput to the interactive planning module which will eventually produce the complete assembly \nplan for real application. The authors do not intend to, and indeed it is impossible to develop a \nfully automatic assembly system without human intervention. The main benefit of the research is \nthe proof of using the powerful product data management tool for assembly planning which has \nnot been tested by previous researchers. \n \nAcknowledgements \n \nThis research is supported in part by EPSRC Research Grant GR\/L66236. The support of Matra-\nBritish Aerospace Dynamics and Meritor Light Vehicle Systems is also greatly appreciated. \nProvision of Motiva DesignGroup by Photonic EDC is acknowledged with thanks. Individual \nthanks also go to Alan Crawford and Ray Muldoon of LSC Group, Andy Gordon of Photonic EDC \nand Patrick Ollerton of PTC. \n \nReferences \n \n1 G. Dini, G. and Santochi, M. Automated sequencing and subassembly detection in assembly \nplanning. Annals of the CIRP, Vol. 41, No. 1 (1992). \n2 Kuo, T. C., Zhang, H. C. and Huang, S. H. Disassembly analysis for electromechanical \nproducts: a graph-based heuristic approach. International Journal of Production Research, \nVol. 38, No. 5 (2000). \n3 R.B. Gottipolu, R. B. and Ghosh, K. Representation and selection of assembly sequences in \ncomputer-aided assembly process planning. International Journal of Production Research, \nVol. 35, No. 12 (1997). \n4 Zha, X. F., Lim, S. Y. E. and Fok, S. C. Integrated knowledge-based assembly sequence \nplanning. International Journal of Advanced Manufacturing Technology, Vol. 14: 50-64 \n(1998). \n5 Homem de Mello, L. S. and Sanderson, A. C. Automatic generation of mechanical \nassembly sequences. Technical report: Carnegie Mellon University (1988). \n6 Pham, D. T. and Dimov, S. S. A system for automatic extraction of feature-based assembly \ninformation. Proceedings of the Institute of Mechanical Engineers, Vol. 213, Part B (1999). \n7 Wang, E. and Kim, Y. S. Feature-based assembly mating reasoning. Journal of \nManufacturing Systems, Vol. 18, No. 3 (1999). \n8 CIMdata Incorporated. Product data management: the definition. Fourth Edition (1996). \n"}