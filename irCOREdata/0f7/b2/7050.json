{"doi":"10.1080\/0968776940020205","coreId":"7050","oai":"oai:generic.eprints.org:160\/core5","identifiers":["oai:generic.eprints.org:160\/core5","10.1080\/0968776940020205"],"title":"Natural\u2010language processing applied to an ITS interface","authors":["Fischetti, Enrico","Gisolfi, Antonio"],"enrichments":{"references":[{"id":193674,"title":"(anon.), INTELLECT reference manual,","authors":[],"date":"1986","doi":null,"raw":"AIC (1986) (anon.), INTELLECT reference manual, Waltham, Educational Technology Publications.","cites":null},{"id":193673,"title":"(anon.), Smalltalk\/V 286 tutorial and programming handbook,","authors":[],"date":"1988","doi":null,"raw":"Digitalk (1988) (anon.), Smalltalk\/V 286 tutorial and programming handbook, Los Angeles, Digitalk Inc.","cites":null},{"id":443528,"title":"A field evaluation of natural language for data retrieval',","authors":[],"date":"1985","doi":"10.1109\/tse.1985.231847","raw":"Jarke, M., Turner, J.A., Stohr, E.A., Vassiliou, Y., White, N.H. and Michielsen, K. (1985), 'A field evaluation of natural language for data retrieval', IEEE Transactions in Software Engineering, SE-II, 1, 97-113.","cites":null},{"id":443525,"title":"An ITS for the factorization of algebraic expressions in Smalltalk\/V',","authors":[],"date":"1990","doi":"10.1080\/1355800900270407","raw":"Gisolfi, A. and Moccaldi, G. (1990), 'An ITS for the factorization of algebraic expressions in Smalltalk\/V', Educational and Training Technology International, 27, 4, 406-13.","cites":null},{"id":443913,"title":"Cumers' requirements for natural language systems: results of an inquiry',","authors":[],"date":"1984","doi":"10.1016\/s0020-7373(84)80067-x","raw":"Morik, K. (1984), 'Cumers' requirements for natural language systems: results of an inquiry', International Journal of Man-Machine Studies, 21, 401-14.","cites":null},{"id":443524,"title":"Design and development of the student module of an ITS',","authors":[],"date":"1992","doi":null,"raw":"Fischetti, E. and Gisolfi, A. (1992), 'Design and development of the student module of an ITS', Interactive Learning International, 8, 201-11.","cites":null},{"id":443916,"title":"Foundations of Intelligent Tutoring Systems,","authors":[],"date":"1988","doi":null,"raw":"Poison, C.P. and Richardson, J.J. (eds) (1988), Foundations of Intelligent Tutoring Systems, Hillsdale, USA, Lawrence Erlbaum.","cites":null},{"id":443914,"title":"Implications of a cognitive model of database query: comparison of a natural language, formal language and direct manipulation interface,","authors":[],"date":"1986","doi":"10.1145\/15683.1044078","raw":"Ogden, W.C. (1986), 'Implications of a cognitive model of database query: comparison of a natural language, formal language and direct manipulation interface, SIGCHI Bulletin, 18, 2, 51-4.","cites":null},{"id":443917,"title":"Natural language understanding: how natural can it be?,","authors":[],"date":"1985","doi":null,"raw":"Rich, E. (1985), 'Natural language understanding: how natural can it be?, IEEE Conference on AI Applications, 372-7.","cites":null},{"id":443912,"title":"Object-Oriented Software Construction,","authors":[],"date":"1988","doi":"10.1016\/b978-155860687-6\/50005-0","raw":"Meyer, B. (1988), Object-Oriented Software Construction, Englewood Cliffs, USA, Prentice-Hall.","cites":null},{"id":443915,"title":"Probit: developing an intelligent tutor',","authors":[],"date":"1989","doi":null,"raw":"Or-Bach, R. and Bar-On, E. (1989), 'Probit: developing an intelligent tutor', Proceedings of the 4th International Conference on AI and Education, Amsterdam, 185-92.","cites":null},{"id":443522,"title":"Programming the User Interface - Principles and Examples,","authors":[],"date":"1989","doi":"10.1145\/101288.1047994","raw":"Brown, J.R. (1989), Programming the User Interface - Principles and Examples, Reading, MA, USA, Addison-Wesley.","cites":null},{"id":443919,"title":"Pygmalion at the interface'","authors":[],"date":"1986","doi":"10.1145\/6138.6141","raw":"Slator, B.M., Anderson, M.P. and Conley, W. (1986), 'Pygmalion at the interface' Comm. ACM, 29, 7, 599-604.","cites":null},{"id":443527,"title":"Second-level design of a knowledge-based educational advisor',","authors":[],"date":"1990","doi":"10.1080\/1355800900270209","raw":"Hobbs, D.J. (1990), 'Second-level design of a knowledge-based educational advisor', Educational and Training Technology International, 27, 2, 216-23.","cites":null},{"id":443918,"title":"Seven plus or minus two central issues in human computer interaction'","authors":[],"date":"1986","doi":"10.1145\/22627.22394","raw":"Shneiderman, B. (1986), 'Seven plus or minus two central issues in human computer interaction' in Mantel, M. and Orbeton, P. (eds), Human Factors in Computing Systems: CHI '86 Proceedings, 343-9.","cites":null},{"id":443529,"title":"Smalltalk as a vehicle for intelligent computer assisted learning',","authors":[],"date":"1988","doi":null,"raw":"Jones, A.C. and Thorne, M.P. (1988), 'Smalltalk as a vehicle for intelligent computer assisted learning', Proceedings of the 5th International Conference on Technology in Education, March 1988, London, CEP Consultants.","cites":null},{"id":443530,"title":"The Art of Human-Computer Interface Design,","authors":[],"date":"1990","doi":null,"raw":"Laurel, B. (ed) (1990), The Art of Human-Computer Interface Design, Reading, MA, USA, Addison-Wesley.","cites":null},{"id":193675,"title":"The Interactive Learning Revolution:","authors":[],"date":"1990","doi":null,"raw":"Barker, J. and Tucker, R.N. (eds) (1990), The Interactive Learning Revolution: Multimedia in Education and Training, London, Kogan Page.","cites":null},{"id":443526,"title":"The student module in POSITS, a tutor for the factorization of algebraic expressions',","authors":[],"date":"1992","doi":null,"raw":"Gisolfi, A. and Moccaldi, G. (1992), 'The student module in POSITS, a tutor for the factorization of algebraic expressions', Journal of Artificial Intelligence in Education, 3, 3, 347-58.","cites":null},{"id":443523,"title":"Using a natural language interface with casual users',","authors":[],"date":"1990","doi":"10.1016\/s0020-7373(08)80007-7","raw":"Capindale, R.A. and Crawford, R.G. (1990), 'Using a natural language interface with casual users', International Journal of Man-Machine Studies, 32, 341-62.","cites":null},{"id":443920,"title":"Using restricted natural language for data retrieval'","authors":[],"date":"1984","doi":"10.1109\/tse.1985.231847","raw":"Turner, J.A., Jarke, M., Stohr, E.A., Vassiliou, Y. and White, N. (1984), 'Using restricted natural language for data retrieval' in Vassiliou, Y. (ed.), Human Factors and Interactive Computer Systems, Norwood, USA, Ablex, 163-90.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1994","abstract":"The aim of this paper is to show that with a subset of a natural language, simple systems running on PCs can be developed that can nevertheless be an effective tool for interfacing purposes in the building of an Intelligent Tutoring System (ITS). After presenting the special characteristics of the Smalltalk\/V language, which provides an appropriate environment for the development of an interface, the overall architecture of the interface module is discussed. We then show how sentences are parsed by the interface, and how interaction takes place with the user. The knowledge\u2010acquisition phase is subsequently described. Finally, some excerpts from a tutoring session concerned with elementary geometry are discussed, and some of the problems and limitations of the approach are illustrated","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/7050.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/160\/1\/ALT_J_Vol2_No2_1994_Natural_language_processing_ap.pdf","pdfHashValue":"5bf3d458ab91a542d9513ca35de1107af39a5b81","publisher":"Universit of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:160<\/identifier><datestamp>\n      2011-04-04T08:48:54Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/160\/<\/dc:relation><dc:title>\n        Natural\u2010language processing applied to an ITS interface<\/dc:title><dc:creator>\n        Fischetti, Enrico<\/dc:creator><dc:creator>\n        Gisolfi, Antonio<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        The aim of this paper is to show that with a subset of a natural language, simple systems running on PCs can be developed that can nevertheless be an effective tool for interfacing purposes in the building of an Intelligent Tutoring System (ITS). After presenting the special characteristics of the Smalltalk\/V language, which provides an appropriate environment for the development of an interface, the overall architecture of the interface module is discussed. We then show how sentences are parsed by the interface, and how interaction takes place with the user. The knowledge\u2010acquisition phase is subsequently described. Finally, some excerpts from a tutoring session concerned with elementary geometry are discussed, and some of the problems and limitations of the approach are illustrated.<\/dc:description><dc:publisher>\n        Universit of Wales Press<\/dc:publisher><dc:date>\n        1994<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        cc_by_nc_nd<\/dc:rights><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/160\/1\/ALT_J_Vol2_No2_1994_Natural_language_processing_ap.pdf<\/dc:identifier><dc:identifier>\n          Fischetti, Enrico and Gisolfi, Antonio  (1994) Natural\u2010language processing applied to an ITS interface.  Association for Learning Technology Journal, 2 (2).  pp. 38-49.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776940020205<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/160\/","10.1080\/0968776940020205"],"year":1994,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"Natural-language processing applied to an\nITS interface\nEnrico Fischetti and Antonio Gisolfi\nDipartimento di Informatics, University of Salerno, Italy\nAbstract\nThe aim of this paper is to show that with a subset of a natural language, simple systems\nrunning on PCs can be developed that can nevertheless be an effective tool for interfacing\npurposes in the building of an Intelligent Tutoring System (ITS). After presenting the\nspecial characteristics of the Smalltalk\/V language, which provides an appropriate\nenvironment for the development of an interface, the overall architecture of the interface\nmodule is discussed. We then show how sentences are parsed by the interface, and how\ninteraction takes place with the user. The knowledge-acquisition phase is subsequently\ndescribed. Finally, some excerpts from a tutoring session concerned with elementary\ngeometry are discussed, and some of the problems and limitations of the approach are\nillustrated.\nIntroduction\nThis paper deals with the way in which users and computers can interact by means of\nnatural language. In particular, we focus our attention on the development of a restricted\nand simplified, but still potentially useful, natural-language interface for an Intelligent\nTutoring System (ITS).\nAlthough natural-language processing technology has become flexible enough to assist in\ncertain problem-solving activities, only powerful systems such as INTELLECT (AIC,\n1986) are currently able to tackle it effectively. Yet even such systems are subject to severe\nlimitations (e.g. distinguishing between nouns and verbs), and consequently the problem\narises of considering to what extent simple systems handling only a subset of a natural\nlanguage, and running on inexpensive machines, can be effectively used for interfacing\npurposes.\nSo far, many systems for understanding natural language have been developed, and their\nadvantages and disadvantages have been investigated for some time (see, for example,\n38\nALTJ VOLUME 2 NUMBER 2\nMorik, 1984; Rich, 1985; Ogden, 1986; Shneiderman, 1986). The most potent argument in\nsupport of the use of natural language is, of course, its flexibility and 'naturalness'. The\nmerits of natural-language interfaces are well documented as a result of a number of field\ntrials (Turner et al, 1984; Jarke et al, 1985; Capindale and Crawford, 1990; Slator et al,\n1986). But one should remember that 'normal* language is not always the best way of\ndescribing things. In fact, activities requiring mathematical skills (e.g. creating shapes or\nsolving equations) benefit from the use of a restricted formal language that allows the\navoidance of ambiguities inherent in natural languages. On the other hand, when\nquestion-answer tasks are to be tackled, natural-language interaction is clearly better\nsuited.\nIntelligent Tutoring Systems\nAlthough the goal of a system capable of entirely autonomous teaching is still very far\noff, recent advancements in both hardware and software technologies mean that systems\ncan now be developed that offer partial but nevertheless potentially effective solutions to\nproblems of flexibility, and that can act as reliable partners for human teachers. It is\napparent that the overall result of bringing together multimedia devices and Al\ntechnology will represent a significant improvement in the quality of interface systems\navailable for ITSs (Barker and Tucker, 1990).\nITSs originated during the 1970s, and have emerged, among other things, as tests for\nArtificial Intelligence (Al) concepts. Computer-Assisted Instruction (CAI) systems,\ndespite their success in certain environments, suffer from an inherent rigidity, being\nunable to adapt themselves to the characteristics of specific students. But Al techniques\ncan be profitably used to improve the performance of CAI systems. ITSs take into\nconsideration individual differences in students, and provide more individualized\ninstruction. This adaptation to individual students has been made possible through the\ndevelopment of certain modules within an ITS (Poison and Richardson, 1988; McFarland\nand Parker, 1990). The most generalized architecture includes four functionally distinct,\nthough linked, modules:\n\u2022 Database module, containing knowledge about the topic to be taught, and holding\nthe data created while the ITS is in operation;\n\u2022 Student module, implementing the student model, and tailoring the system\nbehaviour to the student's needs;\n\u2022 Teaching module, implementing adequate tutoring strategies according to the\ninformation obtained in the student module, and controlling the topic to be taught,\nand how and when it should present it;\n\u2022 Interface module, managing student interaction with the system, and supporting the\nbuilding phase of the knowledge base by the human expert.\nThe role of the interface module is of critical importance (see Brown, 1989; Laurel, 1990),\nsince it processes the information flow from the user to the system, and vice versa. Thus\nthe presentation of a topic will be made more or less understandable according to the\nquality of the interface.\nThe knowledge base is usually built by expert Al programmers, but an important issue is\nconstructing the knowledge base so that a teacher-expert in the field can modify it, even\n39\nEnrico Fischetti and Antonio Gisolji Natural-language processing\nthough he or she may lack programming experience. For this, our interface module\nmanages the knowledge acquisition phase so that the ITS is easily maintainable.\nThe Smalltalk\/V programming environment\nThe Object-Oriented Programming (OOP) paradigm allows systems to be modelled in\nterms that attempt to match human thinking and language, and considering that\ncomputer-based tutorial activity also attempts to simulate the way in which human beings\ntackle teaching and learning, the importance of the OOP approach with respect to ITS\nresearch is clear. The essence of the approach is that software systems are modelled in\nterms oi objects and actions on objects by means of messages. An object is essentially a set\nof data and methods (the procedures that act on this data). In defining a type of object, a\nclass is obtained whose elements share some characteristics. The classes are hierarchically\norganized so that their characteristics can be inherited by sub-classes.\nWe decided to implement our interface module in Smalltalk\/V, a dialect of Smalltalk\ndeveloped by Digitalk Inc. one of whose main advantages is that it runs on PCs. It also\noffers very rapid coding and testing, and provides a wide range of HCI (Human-\nComputer Interface) facilities. In particular, the graphical interface is very friendly, the\nuser interacting with the system mainly by means of windows and menus; friendly\ninterfaces combined with powerful facilities are an essential part of ITS development, as\nhas been shown many times (Or-Bach and Bar-On, 1989; Hobbs, 1990; Gisolfi and\nMoccaldi, 1990; Gisolfi and Moccaldi, 1992; Fischetti and Gisolfi, 1992). Moreover,\nemploying OOP in ITS development is useful for diagnosis. Each concept is implemented\nas an object, and objects are in turn hierarchically organized so that the attributes needed\nfor diagnosis can be inherited. Smalltalk\/V is very economical in code: an impressive\namount of activity results from a few lines of code, and one can re-use most lines of pre-\nwritten code. Further, editing and correcting errors is accomplished very easily. Of\ncourse, OOP systems are not disadvantage-free (see Jones and Thorne, 1988); for\ninstance, dynamic binding allows software rules to be compiled, linked and loaded\nincrementally, but requires complex structures for its implementation and additional time\nfor execution.\nWe can give here, in describing our work, only a vague feel for the unique features of\nSmalltalk that make it quite different from conventional languages. Newcomers to the\nlanguage may be helped by standard texts on the subject, e.g. Meyer (1988) and Digitalk\n(1988).\nThe architecture of the interface module\nOur interface module consists of two distinct sub-modules: Expert and User. The Expert\nsub-module manages knowledge acquisition and allows the human expert to build the\nknowledge base of the ITS so that it can subsequently be consulted by the student by\nmeans of the User sub-module. The hierarchical characteristics of the Smalltalk\/V\nlanguage are exploited: thus, we have defined a sub-class of the class Object, called\nModules, and have linked the classes Interface, Engine, Expert Interface and User\nInterface as depicted in Figure 1.\nAlthough the underlying principles of the interface are simple, their translation into\n40\nALT J VOLUME 2 NUMBER 2\nFigure 1: Hierarchical\nstructure of the interface\nsoftware brings with it several unavoidable technicalities that use the advanced features of\nSmalltalk\/V. It is not possible in an outline paper of this kind to go into the details of\nthese technicalities, and we confine ourselves here to some conceptual aspects.\nThe class Engine is implemented by means of the minimal functions of a database\nmodule, so that the knowledge base can be built fairly easily. In Smalltalk\/V terms, the\nknowledge base consists of a set of objects having an internal state, as defined by their\ncharacteristics (instance variables), and a set of specific methods, for example those\ndefined for the classes String, Dictionary and Set. The knowledge base evolves gradually\nas its elements are modified: after some initial conditions have been satisfied, changes in\nthe knowledge base are related to the inferences carried out by the database module.\nAs the interface has to process natural language, its dictionary plays a vital role. The non-\nspecific part of the dictionary is built-in: the human expert has only to add information\nspecifically related to the topic to be taught. The expert is guided in this activity by\nappropriate windows and menus present in the Smalltalk\/V environment. All the terms\ninserted by the expert are added to the basic dictionary. The subset of the English\nlanguage recognized by the interface incorporates nouns, verbs, adjectives, conjunctions,\narticles and prepositions. The first three of these (nouns, verbs, adjectives) contain objects\nto be considered as 'meaningful' (a semantic value is associated with each of them),\nwhereas the other three (conjunctions, articles and prepositions) are used to link together\nelements of the 'meaningful' classes. Building the knowledge base has the side-effect of\nadding to the interface all the elements it needs to carry out its function.\nOur prototype ITS is intended for a tutoring activity in elementary geometry. The human\nexpert has first to specify what objects are involved (triangles, rectangles, etc.), and then\nfor each object its syntactic features (singular, plural, gender in the case of Italian) and its\nsemantic ones (subclass of ...). Other information is also linked to each object, for\ninstance the number of sides, the perimeter, the area, and what operations are allowed for\nthe object. For example, operations such as 'area measurement' or 'verify the equivalence'\nare suitably linked to Smalltalk\/V methods, then saved in the appropriate class.\nThe goal of the interface is to associate a semantic value with the sentence typed by the\nuser, something which can be tackled only if the process is adequately supported by\n41\nEnrico Fischetti and Antonio Gisolfi Natural-language processing\nparsing algorithms able to check the syntactic and semantic validity of the sentence. The\nanalysis carried out by the user-interface, faced with the sentence X, can be summarized\nas follows:\n(a) Does X belong to the interface language?\n(b) What is the type of X?\n(c) What is the semantic value of X?\nThe following section shows how sentences are parsed and these questions answered.\nParsing sentences\nThe process which a sentence typed by the user undergoes can be briefly described as\nfollows:\nThe interface module first analyses the sentence to check whether all its elements belong\nto the dictionary. Each acceptable word is stored in the dictionary along with its\nsynonyms, allowing the maximum available flexibility, and therefore the maximum\navailable freedom for the user. Although the general structure of parsable sentences is\nsubject-verb-object, the interface can also cope with more complex sentences where there\nare verbs indicating requests. For example, given the sentence 'Rome is the capital of\nItaly', the interface recognizes the noun 'Rome' as the value of the instance variables\nCapital and Italy as instances of the class Nation. If the check is positive, the next step\ninvolves a diagnosis as to whether the sentence is the answer to a tutor question or a\nuser's question, and the dialogue state has to be changed accordingly. Now, the parsable\nsentences can be classified as one of:\n(a) Declarative\n(b) Direct interrogative\n(c) Indirect interrogative\nDirect interrogative sentences are recognized by the presence of the final question mark, a\ncrude but workable solution. User's answers are expressed by declarative sentences.\nIndirect interrogative sentences express an information request by the student. As their\nstructure is similar to that of declarative sentences, we have introduced into the dictionary\na set of typical expressions whose presence induces the interface to assign the sentence to\nthe indirect interrogative class. These expressions are, for example: Tell me, Show me,\nExplain, and so on. The interface manages user's questions by means of the Prompter, a\nbuilt-in Smalltalk\/V window. The sentence typed by the student is stored in the global\nvariable Line, and then the parsing process starts.\nA crucial problem to be tackled is the correct management of sudden changes in the\ndialogue state. A dialogue between two individuals may be composed of questions and\nanswers, but it is hardly realistic that the roles 'asking-answering' of individuals carrying\non a question-answer dialogue remain static, something which happens only in quiz-like\nsessions, and one has thus to consider that, for example, when the student is asked a\nquestion, instead of answering, s\/he might reply with another question. To cope with such\nsituations, the binary variable Dialogue-state is introduced, whose value changes\naccording to the circumstance that a question or an answer is expected from the student.\n42\nALT J VOLUME 2 NUMBER 2\nThus, if the Dialogue-state indicates that the student's answer is expected, and an\ninterrogative sentence is typed, the unanswered question is saved into a stack, the\nDialogue-state switched, the student's question answered, the tutor's question popped\nfrom the stack, and the Dialogue-state switched again.\nAssociating a semantic value with a sentence X has proven to be one of the most difficult\nproblems. We have tackled it by supposing that the student can ask five types of question,\nschematically classified as follows:\n(1) Tell me if...\n(2) Tell me how. . .\n(3) Tell me why. . .\n(4) Tell me which...\n(5) Tell me how many.. .\nThe keywords: if, how, why, which and how many are stored into Set instances, and are\ndeclared as global variables in the basic dictionary. It is worth noting that the\nperformance level of the interface is strictly related to the characteristics of the\nSmalltalk\/V environment. This carries with it some disadvantages, but on the positive\nside, this means that a hierarchy of classes can be developed, each linked to a type of\nobject. In this way, all the knowledge related to the object is contained in a unique class,\nincluding internal variables and methods, so that if a particular class is selected, one is not\nobliged to deal with the entire knowledge base: the methods of the selected class are used\nto investigate its internal variables and related instances. But one has also to remember\nthat the interface is not a module independent from the others making up an ITS: indeed,\nthere is no sharp dividing line between ITS modules, and managing questions requires\nsuitable interactions between the interface and the inference engine of the database\nmodule.\nThe first type of question ('if) is a confirmation request. Of course, it can also be\nexpressed, like other classes of sentences, by a direct question ('Is a triangle a polygon?').\nThe interface has simply to check that the relationship between the objects is present and,\nif this holds true, the student's hypothesis is confirmed.\nThe second type of question ('how') is concerned with requests for explanations about the\ncorrect way of executing a specific operation. In this case, the answer requires that the\nmethods introduced by the expert are suitably communicated to the student. For\nexample, the sentence 'Tell me how the perimeter of the triangle is measured' activates the\ninference engine to draw the symbolic code associated with the object 'triangle' and the\noperation 'measurement of perimeter'.\nThe third type of question ('why') is concerned with requests for explanations about the\nlogical steps that have led to the current state. For example, in the sentence: 'Why does\nthe measure of the area equal 70?', a Smalltalk\/V method will show the steps the current\nsituation depends upon.\nThe fourth type of question ('which') involves situations where the student wishes to\nknow which objects satisfy the constraints present in the question. If, after the preposition\n'of, we find the name of the class to be investigated, synonyms management allows the\nphrase 'surface of the triangle' to be recognized by the system as equivalent to 'area of the\n43\nEnrico Fischetti and Antonio Gisolfi Natural-language processing\ntriangle', and since 'area' is one of the instance variables of the class Triangles, the object\nTriangle is scrutinized to get information about area measurement. The reasoning can be\niterated, and a similar process investigates the structure of the more complex phrase:\n'measurement of the area of the triangle'. The basic structure of the system allows for\nseveral kinds of mistake to be detected. For example, it is easy to verify that the sentence\n'measure the area of the side' is incorrect because there is no instance variable associated\nwith area in the class Side.\nThe last type of question ('how many') can be managed in a similar way to the previous\none, but the system has additionally to look for all the objects that satisfy the conditions\nof the question.\nThus, in our architecture, the knowledge base can be regarded as a set of classes,\nhierarchically organized according to an expert's requirements. Each class is associated\nwith a class variable of type Set in order to contain the instances created during the\nprocessing phase. One can declare, for each class, a specific sub-class named Exercises,\nwhose instances are all the exercises concerning that class. The student model benefits\nfrom this approach as the analysis concerning student's knowledge can become more\nspecialized as lower hierarchical levels are attained. In this way, the interface becomes\nmore powerful because a sentence can be analysed semantically without using the\ninference engine. For example, diagnosing that the phrase 'area of the line' is meaningless\nwould be immediate, although the sentence is syntactically correct.\nOperating the knowledge-acquisition interface\nAs mentioned earlier, the dictionary required by the interface consists of a non-specific\npart which includes basic information (articles, prepositions, auxiliary verbs, request\nverbs, and so on), and a specific part consisting of information related to the particular\ntopic to be taught. Figure 2 depicts the general structure of the dictionary and its\nfunctional links.\nDICTIONARY\nINTERFACE\nOOO\nO b i e c t 8 I Expert\ndictionaryVerbs -\u2022\n| ENGINE |\nI KNOWLEDGE BASE\nCLASSES\ni\nMembership rules\nInstance variables\nSet of Instances\nExercises\nSmalltalk\nmethods\nSymbolic code\n(for each dass) Figure 2: Structure of\nthe dictionary and\nfunctional links\n44\nALTJ VOLUME 2 NUMBER 2\nThe structure of the first part of the dictionary is relatively simple. Instances of the class\nSet, declared as global variables, are used to contain articles, prepositions, conjunctions\nand a collection of typical terms that characterize interrogative sentences, such as 'Tell\nme' or 'Show me'. The second part of the dictionary is more complex because the\ninformation furnished by the human expert about the topic to be taught has to be\norganized in a suitable way. We have defined two basic classes - Things and Actions -\nthat represent the objects and the operations on them respectively. An instance of Things\nis characterized by the name (noun), its gender (in Italian), its plural and a set of\nassociated synonyms. In a similar way, an instance of Actions consists of the tenses of a\nverb and a set of synonyms. All the instances of Things are stored in a set called Objects;\nthe instances of Actions are stored in a set called Verbs. For example, as elementary\ngeometry is the topic to be taught, the class Things will include Triangle, Rectangle,\nCircle, Side, Area, and so on. In turn, in the class Actions, we have verbs such as\nCompute, Measure and Compare.\nThe knowledge acquisition phase can be sketched as follows. First, the expert is requested\nto specify the list of objects the topic consists of. Each topic requires several specifications\nbecause part of the information is required by the interface and another part by the\ninference engine. The expert has to define the syntactic features of the object, i.e. singular,\nplural, gender and synonyms. Consequently, the instance variables get their value, and\nthe resulting object is added to the set Objects. Subsequently, the relation 'is a' is\nconsidered, and in such a way classes get hierarchically organized. For instance, one has\n(the asterisk denotes that the class has no super-class):\nPerimeter *\nArea *\nPolygon *\nSquare Polygon\nTriangle Polygon\nRight-angled triangle Triangle\nFigure 3 depicts the hierarchical structure of the geometric classes.\nFigure 3: Hierarchical structure\nof the geometric classes\n45\nEnrico Fischetti and Antonio Gisolfi Natural-language processing\nIn order to define the classes, the expert has to specify the features of the objects, and these\ncharacteristics become the instance variables of the classes. For example, a polygon is\ncharacterized by the number of sides, formulas for evaluating area and perimeter, and so\non. More specifically, to manage the peculiar features of the objects, for example triangles\nand quadrilaterals, two global variables are defined: Features and Differences. In such a\nway, the expert specifies which features are shared by objects and which characteristics are\npeculiar to each object. In particular, the variable Differences contains a set of rules that\ncharacterize the objects belonging to that class. In other words, the values contained in\nsuch a variable represent the necessary and sufficient conditions for an object to belong to\nthat class: a polygon is a triangle if, and only if, three sides are present\nWhen the building phase is completed from the syntactic point of view (gender,\nsynonyms, singular, plural), the expert has to specify which operations are allowable for\nthese objects, and this happens by means of sentences having the general structure verb-\ncomplement. First, each sentence is analysed with respect to its compatibility with the\nobjects present in the dictionary, and if no discrepancy is recognized, the sentence is\nstored in the dictionary.\nThe activity of the interface is twofold: while the dictionary is suitably enlarged, the\nengine receives the necessary information to define the methods related to the instances of\nthe classes. This task is by no means trivial; for example, the complement typed by the\nexpert might be unknown to the dictionary, so that the operation will be utterly\nmeaningless. If this is not the case, and the complement is a known object, the verb is\nadded to the set Verbs, after having been declared as an instance of the class Actions, and\nits conjugation and synonyms having been specified. If the complement is unknown, the\nexpert is requested to re-type the name of the object, and if it is still unknown, the\ninterface asks whether the new object is to be added to the dictionary. If the answer is\nYes, the complement is added, through the above-mentioned procedure, to the set\nObjects, and the action to the set Verbs. Of course, the expert can alternatively express the\ncomplement in a different way if he or she does not want to introduce a new term.\nThe above-mentioned operations are carried out for each object declared as a class. When\nall the required information is collected, the interface prepares the Smalltalk\/V code\nrepresenting the methods that operate on the data.\nThus each class gets associated with a set of relevant information. For example, the class\nRight-angled triangles includes slots for several pieces of data: the names of the sides and\nvertices of the triangle, the lengths of its sides, and the measurement of its angles, features\nsuch as 'number of sides = 3' and 'one angle is 90\u00b0', the symbolic code for evaluating its\narea, perimeter, catheti and hypotenuse. At the end, the dictionary is ready to start the\nconsulting phase.\nOperating the user interface\nA student activates the ITS and starts interacting with the system. Suppose that the\nstudent types:\n'Tell me how the area of the triangle can be measured'\nThe words this sentence consists of are recognized by the interface, and thus the sentence\nis reduced to a standard form:\n46\nALTJ VOLUME 2 NUMBER 2\n'Tell me how area of Triangle is measured*\nThe system displays this to the student, and asks for confirmation. If the sentence is not\nconfirmed, the interface asks for a new formulation of the question. Otherwise, the\nmodule recognizes that this sentence expresses an information request thanks to the term\n'Tell me', while the presence of the adverb 'how' allows it to recognize that the student\nwants to know how a certain operation can be carried out. The operation is 'area\nmeasurement', and the presence of the phrase 'of triangle' allows the system to recognize\nthe relationship between the operation (measurement), the feature (area) and the class\n(triangle).\nAt this point, the interface is able to ask the engine to draw up the symbolic code\nassociated with the method 'area measurement' defined for the class Triangles. This looks\nas follows:\n[Engine new DrawFrom: Triangle CodOf: area measurement] Interface: Measurement of\narea of triangle: Base * Height \/ 2\nSuppose now that the student types:\n'Measure the area of the quadrilateral abed'\nAs the noun 'quadrilateral' is followed by another noun, the interface is able to recognize\nthat the request 'measure' refers to some instance of the class Quadrilateral. Thus the set\nof instances of this class is investigated to verify that 'abed' exists, then the data is fetched.\nIf 'abed' is not an instance, the interface asks the student whether it has to be defined. If\nthe answer is Yes, the interface calls the engine in order to declare a Quadrilateral. The\nrelated method gives the appropriate values to the instance variables, provided that the\nrules present in Differences are not contradicted, and finally the new instance is added to\nthe instance of Quadrilateral. Then the method specific for area measurement is activated:\n[Engine new Activate: Area measurement in: Quadrilateral for: abed].\nSuppose that the interface is faced with the following statement:\n'Tell me if ptr is a polygon'\nThis question is a request about a possible class membership. Suppose that 'ptr' is an\ninstance of Triangles but not of Polygons. The interface asks the engine to look for such\ninstance:\n[Engine new Search: ptr relay: is a]\nand starting from the circumstance that a triangle is a polygon, the question is answered\naffirmatively.\nFinally, to give an idea of how the system works in practice, here is an excerpt from a\ntypical student-interface dialogue:\nS: Tell me how the perimeter of the tide can be measured\nI: I don't understand \"tide\"\nS: Sorry, how do you measure the perimeter of the side?\nI: \"Measure perimeter\" is not defined for side.\n47\nEnrico Fischetti and Antonio Gisolfi Natural-language processing\nConcluding remarks\nWe are all too aware of the constraints of our interface, but it is apparent that language-\nprocessing capabilities which will be satisfactory in certain circumstances can be achieved\nby means of a simple conceptual architecture supported by a powerful programming\nenvironment. Field tests so far carried out show that users generally have a positive\nattitude towards the interface. Most errors made by users are directly related to\nrestrictions in the language, and when a mistake occurs, feedback helps the user to\nunderstand the language limitations of the interface, so that errors are subsequently\navoided. Of course, this kind of positive conclusion has to be drawn cautiously: far more\nextensive evaluation is required, and we are now actively engaged in testing, evaluating\nand improving the interface.\nReferences\nDigitalk (1988) (anon.), Smalltalk\/V 286 tutorial and programming handbook, Los\nAngeles, Digitalk Inc.\nAIC (1986) (anon.), INTELLECT reference manual, Waltham, Educational Technology\nPublications.\nBarker, J. and Tucker, R.N. (eds) (1990), The Interactive Learning Revolution: Multimedia\nin Education and Training, London, Kogan Page.\nBrown, J.R. (1989), Programming the User Interface - Principles and Examples, Reading,\nMA, USA, Addison-Wesley.\nCapindale, R.A. and Crawford, R.G. (1990), 'Using a natural language interface with\ncasual users', International Journal of Man-Machine Studies, 32, 341-62.\nFischetti, E. and Gisolfi, A. (1992), 'Design and development of the student module of an\nITS', Interactive Learning International, 8, 201-11.\nGisolfi, A. and Moccaldi, G. (1990), 'An ITS for the factorization of algebraic\nexpressions in Smalltalk\/V', Educational and Training Technology International, 27, 4,\n406-13.\nGisolfi, A. and Moccaldi, G. (1992), 'The student module in POSITS, a tutor for the\nfactorization of algebraic expressions', Journal of Artificial Intelligence in Education, 3, 3,\n347-58.\nHobbs, D.J. (1990), 'Second-level design of a knowledge-based educational advisor',\nEducational and Training Technology International, 27, 2, 216-23.\nJarke, M., Turner, J.A., Stohr, E.A., Vassiliou, Y., White, N.H. and Michielsen, K.\n(1985), 'A field evaluation of natural language for data retrieval', IEEE Transactions in\nSoftware Engineering, SE-II, 1, 97-113.\nJones, A.C. and Thorne, M.P. (1988), 'Smalltalk as a vehicle for intelligent computer\nassisted learning', Proceedings of the 5th International Conference on Technology in\nEducation, March 1988, London, CEP Consultants.\nLaurel, B. (ed) (1990), The Art of Human-Computer Interface Design, Reading, MA,\nUSA, Addison-Wesley.\n48\nALTJ VOLUME 2 NUMBER 2\nMcFarland, T. and Parker, R. (1990), Expert Systems in Education and Training,\nEnglewood Cliffs, USA, Educational Technology Publications.\nMeyer, B. (1988), Object-Oriented Software Construction, Englewood Cliffs, USA,\nPrentice-Hall.\nMorik, K. (1984), 'Cumers' requirements for natural language systems: results of an\ninquiry', International Journal of Man-Machine Studies, 21, 401-14.\nOgden, W.C. (1986), 'Implications of a cognitive model of database query: comparison of\na natural language, formal language and direct manipulation interface, SIGCHI Bulletin,\n18, 2, 51-4 .\nOr-Bach, R. and Bar-On, E. (1989), 'Probit: developing an intelligent tutor', Proceedings\nof the 4th International Conference on AI and Education, Amsterdam, 185-92.\nPoison, C.P. and Richardson, J.J. (eds) (1988), Foundations of Intelligent Tutoring\nSystems, Hillsdale, USA, Lawrence Erlbaum.\nRich, E. (1985), 'Natural language understanding: how natural can it be?, IEEE\nConference on AI Applications, 372-7.\nShneiderman, B. (1986), 'Seven plus or minus two central issues in human computer\ninteraction' in Mantel, M. and Orbeton, P. (eds), Human Factors in Computing Systems:\nCHI '86 Proceedings, 343-9.\nSlator, B.M., Anderson, M.P. and Conley, W. (1986), 'Pygmalion at the interface' Comm.\nACM, 29, 7, 599-604.\nTurner, J.A., Jarke, M., Stohr, E.A., Vassiliou, Y. and White, N. (1984), 'Using restricted\nnatural language for data retrieval' in Vassiliou, Y. (ed.), Human Factors and Interactive\nComputer Systems, Norwood, USA, Ablex, 163-90.\n49\n"}