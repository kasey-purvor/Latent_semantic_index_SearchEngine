{"doi":"10.1109\/ICMB.2005.39","coreId":"69730","oai":"oai:eprints.lancs.ac.uk:22935","identifiers":["oai:eprints.lancs.ac.uk:22935","10.1109\/ICMB.2005.39"],"title":"Evolution of 3D Games on Mobile Phones.","authors":["Chehimi, Fadi","Coulton, Paul","Edwards, Reuben"],"enrichments":{"references":[{"id":1025666,"title":"and the staff of","authors":[],"date":"2004","doi":null,"raw":null,"cites":null},{"id":1025795,"title":"Khronos and OpenGL","authors":[],"date":"2004","doi":"10.1145\/1037851.1037863","raw":null,"cites":null},{"id":1026833,"title":"Khronos News Release\u201d, proceedings of Khronos DevUniversity,","authors":[],"date":"2004","doi":"10.1145\/1037851.1037863","raw":null,"cites":null},{"id":1026570,"title":"Samsung Shows off Hard-dive Based Mobile\u201d,","authors":[],"date":"2004","doi":null,"raw":null,"cites":null},{"id":1025060,"title":"The Challenge of Migration: Desktop to Handheld\u201d, proceedings of Khronos DevUniversity,","authors":[],"date":"2004","doi":null,"raw":null,"cites":null},{"id":1026145,"title":"Time for an Assault on Batteries?\u201d,","authors":[],"date":"2004","doi":null,"raw":null,"cites":null},{"id":1025372,"title":"Wireless Game Development","authors":[],"date":"2003","doi":null,"raw":null,"cites":null},{"id":1024792,"title":"Worldwide share of Mobile Gaming Revenues to Shift\u201d, eMarketer Research,","authors":[],"date":"2004","doi":null,"raw":null,"cites":null},{"id":1026460,"title":"Xda Comparison Tool\u201d, http:\/\/www.my-xda.com\/ comp.html, accessed","authors":[],"date":"2005","doi":null,"raw":null,"cites":null}],"documentType":{"type":null}},"contributors":[],"datePublished":"2005-07","abstract":"While there is no doubt that their will be an increasing trend towards 3D games on mobile devices the resource constraints of the devices themselves and the highly variable nature of the environment present considerable challenges for games developers. In this paper we consider some of the current constraints together with current and, probable, future developments both in the software and hardware of mobile phones that will enable more sophisticated games to be developed. As part of this process we benchmark some of the latest and most prevalent software and devices to ascertain both the quality of the graphics produced and the effects on the battery life. Whilst we are certain that 3D games will play an important future in the success of future mobile services the current baseline for development is highly variable and presents difficulties for games programmers both in development and wide scale distribution","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.lancs.ac.uk:22935<\/identifier><datestamp>\n      2018-01-24T02:08:50Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413736<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Evolution of 3D Games on Mobile Phones.<\/dc:title><dc:creator>\n        Chehimi, Fadi<\/dc:creator><dc:creator>\n        Coulton, Paul<\/dc:creator><dc:creator>\n        Edwards, Reuben<\/dc:creator><dc:subject>\n        QA76 Computer software<\/dc:subject><dc:description>\n        While there is no doubt that their will be an increasing trend towards 3D games on mobile devices the resource constraints of the devices themselves and the highly variable nature of the environment present considerable challenges for games developers. In this paper we consider some of the current constraints together with current and, probable, future developments both in the software and hardware of mobile phones that will enable more sophisticated games to be developed. As part of this process we benchmark some of the latest and most prevalent software and devices to ascertain both the quality of the graphics produced and the effects on the battery life. Whilst we are certain that 3D games will play an important future in the success of future mobile services the current baseline for development is highly variable and presents difficulties for games programmers both in development and wide scale distribution.<\/dc:description><dc:publisher>\n        IEEE<\/dc:publisher><dc:date>\n        2005-07<\/dc:date><dc:type>\n        Contribution in Book\/Report\/Proceedings<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:relation>\n        http:\/\/dx.doi.org\/10.1109\/ICMB.2005.39<\/dc:relation><dc:identifier>\n        Chehimi, Fadi and Coulton, Paul and Edwards, Reuben (2005) Evolution of 3D Games on Mobile Phones. In: Mobile Business, 2005. ICMB 2005. International Conference on. IEEE, pp. 173-179. ISBN 0-7695-2367-6<\/dc:identifier><dc:relation>\n        http:\/\/eprints.lancs.ac.uk\/22935\/<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/dx.doi.org\/10.1109\/ICMB.2005.39","http:\/\/eprints.lancs.ac.uk\/22935\/"],"year":2005,"topics":["QA76 Computer software"],"subject":["Contribution in Book\/Report\/Proceedings","NonPeerReviewed"],"fullText":"1Evolution of 3D Games on Mobile Phones \nFadi Chehimi \nDepartment of \nCommunication Systems, \nLancaster University \nf.chehimi@lancaster.ac.uk \nPaul Coulton \nDepartment of \nCommunication Systems, \nLancaster University \np.coulton@lancaster.ac.uk \nReuben Edwards \nDepartment of \nCommunication Systems, \nLancaster University \nr.edwards@lancaster.ac.uk\nAbstract \nWhile there is no doubt that their will be an \nincreasing trend towards 3D games on mobile devices \nthe resource constraints of the devices themselves and \nthe highly variable nature of the environment present \nconsiderable challenges for games developers. In this \npaper we consider some of the current constraints \ntogether with current and, probable, future \ndevelopments both in the software and hardware of \nmobile phones that will enable more sophisticated \ngames to be developed. As part of this process we \nbenchmark some of the latest and most prevalent \nsoftware and devices to ascertain both the quality of \nthe graphics produced and the effects on the battery \nlife. Whilst we are certain that 3D games will play an \nimportant future in the success of future mobile \nservices the current baseline for development is highly \nvariable and presents difficulties for games \nprogrammers both in development and wide scale \ndistribution. \n1. Introduction: \n.\nMobile gaming is undoubtedly a hot topic for \nmobile operators, manufacturers, and developers alike \nas wireless gaming revenue in 2003 was estimated at \n$1.1 billion world wide [1]. Although, it should be \nnoted that over 75% of this revenue came from Japan \nand South Korea and Europe and the Americas have a \nlittle catching up to do.  \nThis market has been relatively unsophisticated, in \nterms of type and quality of applications. It is expected \nthat the mobile gaming market share will change \nconsiderably by 2008 [1] with the ongoing \ndevelopment of more standardized development \nplatforms such as the Binary Runtime Environment for \nWireless (BREW), Java 2 Micro Edition (J2ME) and \nSymbian OS.  \nMany of the games delivered on the mobile \nplatforms have until recently been restricted to 2 \nDimensional (2D) games, 3D-look-like games (not \ntrue 3D) or games with very poor 3D effects. This is \nsimply because implementing fully 3D-featured titles \non mobile phones has never been an easy task. In fact \nadvanced 3D graphics techniques are widespread in \nthe games market (PC and console) but the limitations \nare due to the major resource constraints of mobile \nphones. These constraints manifest themselves in such \nthings as small screen sizes, limited processing power, \nsmall memory footprints and critical power \nconsumption.  \nThe aim of this paper is to show how a new \ngeneration of true 3D games for mobile phones is \nbecoming possible due to an evolution taking place in \nboth devices and supporting software. In section 2 we \nwill discuss some of the key software and hardware \nsystems that have improved the development of 3D \ngames in the PC and console market current. Further, \nin section 3, we show how these systems have been \naffected by the limitations of the mobile environment. \nSection 4 identifies existing software techniques and \nsome new hardware platforms which can, and \nprobably will, be used to improve the development of \n3D games for mobile phones. Finally, in section 5 we \nconsider some future expectations for mobile 3D \ngaming before drawing our conclusions in section 6. \n2. General Requirements for 3D Games: \nAs it is well known, a computer game is one of the \nmost resource intensive computer applications that can \nbe developed by a programmer. 3D-based games in \nparticular often push both the limits of the hardware \nand skills of the programmer to their maximum.  \nA 3D computer game requires lots of calculations \nto perform functions such as objects rendering; \napplication of lightening, shading and reflection \neffects; and collisions detection, etc. For these tasks to \nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n2be accomplished systems have evolved were powerful \nprocessors, graphics processors, high bus bandwidths, \nand sufficient memory space, combine to achieve \nsmooth and acceptable 3D object manipulation.  \nFast computing processors and high performance \ngraphics processors allow for high rates of pixels per \nsecond, vertexes per polygon and triangles per second \nwhile rendering 3D objects. A fast bus system speed \non the other hand has a huge impact on the vertex per \npolygon count and fill rates. The higher the bus \nbandwidth, the faster object rendering will be \nperformed and the less data is sent from the CPU to \nthe graphics engine (either in software or hardware), \nthereby alleviating potential bottlenecks [2].  \nTo benefit from all these hardware features, and to \nmake it easier for programmers to talk and access the \nhardware, an efficient interface between the \napplications and that hardware has to exist.  There are \nmany development environments available with two \nof the most common being OpenGL and DirectX. \nThey all aim to produce a development environment \nthat eases programming and maximizes the use of the \nhardware. \nIt is important to note that both software and \nhardware development for 3D games has evolved over \na number of years and they have not formed part of the \nmobile device development as its principal function up \nuntil now has been as a communications device.  \n3. Main Limitations for 3D Games on \nMobile Phones: \nIn the previous section we discussed some general \ntechniques that have evolved for the facilitation of 3D \ngames. However, when moving from console or PC \nplatforms to the palm-size, or even smaller, devices \nlike mobile phones, these techniques are not generally \nimplemented or available. Developing computer \ngames for the mobile environment is highly affected \nby various limitations. The following denote the major \nconstraints. \n3.1. CPU\/GPU: \nMost mobile phones at the mean time run at \nrelatively slow clock speed between 100MHz and \n500MHz [3]. They also lack Graphics Processing \nUnits (GPU) meaning that a speed up in code must be \nobtained through software means. Add to this that \nCPUs in mobile phones have small caches [3]. \nSome specialists expect that mobile processors \nwith 1GHz speed are likely to appear in the next three \nyears [2]. However, for these processors to exist they \nwill have to overcome the non-trivial problems of \nbattery life and heat generation. \n3.2. Low Buss Bandwidth: \nData sent from the CPU to the graphics routines \ncould easily become bottlenecked because of the low \nbus bandwidth available on mobile phones. This \nbandwidth will affect the vertex per polygon count and \nframes per second rates in games. Graphics and \nmobile venders are trying to optimize this as much as \npossible, but developers have to be aware of this \nlimitation while programming their games by not \noverloading the data path [2]. \n3.3. Lack of Floating-point Arithmetic: \nAll processors currently available on mobile \nphones don\u2019t support floating-point arithmetic because \nof their excessive power consumption. If floating-\npoint data types are used on mobile applications they \nwill perform extremely slowly since they are \nimplemented in software emulation routines [2]. \nFloating point processors have yet to make their way \ninto standard mobile platforms although as we will see \nin Section 4.1 many manufactures have processors in \ndevelopment with floating point capabilities. \n3.4. Resolution: \nDisplays on mobile phones have limited and \ndifferent resolutions and color depths. The largest \ndisplay size available now is 240\u00d7320 pixels (O2 Xda \nseries), and the maximum color depth is 18-bit (256K \ncolors.) These differentiations affect massively the \nquality and type of games that can be implemented on \nmobile phones since developers have to always be \naware of the various resolutions and color ranges \navailable on the different phone models [2]. It is even \nharder when tackling 3D games since it is more \ncomplex to export 3D game objects to different screen \nsizes than a corresponding 2D object [4]. \n3.5. 3D Graphics APIs: \n Until recently, interfaces that enable 3D graphics on \nmobile phones were limited to personal \nimplementations of different APIs. No standards were \navailable and no common engines were used. Skilled \nprogrammers were required to write their own 3D \ngraphics APIs to facilitate 3D games manipulation. \n\u201cNude Engine\u201d by Robert Rose and \u201cNova3D\u201d by the \n7777-team are just two examples of such 3D graphics \nAPIs. \nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n3 This limitation has a direct correlation to the \nnumber and sophistication of games that can be \nproduced, and is at too low level to adequately meet \nmobile gamers\u2019 expectations. \n4. Overcoming the Limitations:\nPerformance limitations doesn\u2019t mean that it is \nimpossible to improve the quality of 3D games \ndelivered to mobile phones. On the contrary, this \ndifficulty is motivating many hardware and software \nmanufacturers to aim their research towards providing \nsolutions for these constrains. Different mobile 3D \ngraphics APIs, mobile operating systems and state-of-\nthe-art microprocessors are being introduced \noccasionally to facilitate 3D graphics acceleration on \nthe battery-constrained mobile phones.  \n4.1. New Microprocessors: \nVarious microprocessor vendors have started new \nproduct lines that will enable 3D graphics acceleration \non mobile phones. The main issue they are addressing \nis: \u201cmore triangle\/second, more pixel\/second, higher \nframe rates and less power consumption.\u201d NVIDIA\u00ae \nhas implemented GoForce\u2122 3D which offers the \nhosting devices a set of state-of-the-art 3D processing \nfeatures for immersive gaming with intelligent \npipelines that use the minimal power [5]. GoForce\u2122 \n3D integrates a 128KB of dedicated 128-bit wide \nSRAM memory onboard which enables on-chip \nprocessing of graphics without the need to access \nexternal memory and exhaust the bandwidth. This \nmeans that it can output displays at very low power \nand time consumptions [5].  \nNVIDIA\u00ae GoForce\u2122 3D is capable of rendering \n250 million pixels per second and 5 million triangles \nper second. It has a color depth of 16-bit with 65K \ncolors and it supports floating-point arithmetic [5].  \n  ARM implemented MBX 3D which is developed \nspecifically to meet the growing multimedia needs of \nlow power, low-cost system-on-chip (SoC) \napplications such as games on mobile phones. MBX \nenables the migration of complex 3D graphics \ncontents to such platform with enhancements to the \ntransformation and lightening, support for floating-\npoint math, and rendering capabilities of 360 million \npixel\/second and 2.5 million triangle\/second [2].  \nARM MBX 3D enables on-chip screen-tiling \ntechnology to reduce power consumption and pressure \noff the bandwidth to a level suitable for mobile \ndevices [6]. \nIMAGEON is another mobile processor that is \ncreated by ATI\u2122. It can render 1 million fully \nfeatured triangles per second while providing a fill rate \nup to 100 million pixels per second [2]. The 348KB \nSRAM and 2MB SDRAM embedded  in IMAGEON \nnarrow accessing the host\u2019s memory resources to save \ntime of transferring data over the small bus bandwidth. \nIt incorporates a caching engine that caches the \ngeometry used in games to help reduce the load on the \nbus. IMAGEON 2300 integrated architecture offers a \nhardware floating point pipeline which introduces less \nprecision errors [2]. \n4.2. Standard Mobile Operating Systems and   \nDevelopment Platforms: \nUntil the last few years, mobile phones were \nsimple terminals that did not require any complex \noperating system to manage their software and \nhardware. Therefore, mobile vendors used to design \ntheir own operating systems for their handsets [4]. \nThis scenario has changed recently by the rise of new \nuser demands that need to be met. All the evolutionary \nfeatures that users seek such as image capturing, \naudio\/video playing\/recording, internet browsing, and \nmobile gaming, made manufacturers stuck in a \nbottleneck when trying to comply them with their \nhouse-made operating systems. As a result, advanced \noperating systems had to be introduced to provide \nmore reliable and versatile platforms for third party \nsoftware. This is why standard operating systems such \nas Symbian OS, Microsoft Windows CE and Windows \nMobile, BREW, Linux for Mobile, SavaJe OS and \nJ2ME development environment were implemented. \nThe point of concentration in this paper is on the \nprinciple systems: Symbian, BREW and J2ME.  \nSymbian and BREW are both independent \noperating systems that lie on top of the phones\u2019 \nhardware. They have direct access to the device\u2019s \nresources and both are written mainly in C++ [7]. \nSymbian OS is an open-source, 32-bit preemptive \nmultitasking operating system [8]. It facilitates \ndeveloping applications for a wide range of devices \nwith different hardware designs. Each user interface \ndesign is categorized as a series in Symbian for \nexample Nokia Series 60, Series 80, Series 90, and \nSony Ericsson UIQ. \nBREW is an open standard and extendable \napplications execution platform for wireless devices. It \nis thinner, smaller and much more scaled-down than \nthe other application platforms or operating systems. It \nsits right on top of the chip system software enabling \nfast C\/C++ native applications and easy integration of \nbrowsers and virtual machines [9]. \nSymbian is the OS of choice for European mobile \nmanufacturers like Nokia, while BREW is more \nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n4common to the American manufacturers such as \nMotorola. \nJ2ME, on the other hand, is not an operating \nsystem. It is a cut-down version of Java 2 development \nplatform implemented on top of the operating system \nand serves as an interface between the OS and Java-\nbased applications [10]. J2ME works coherently on \nboth Symbian and BREW mobile phones. It is the \nmost widely deployed platform for third-party \napplications in mobile devices because of its vendor-\nneutral status, hardware independence, and built-in \nsecurity [4]. It was the only possible alternative to \ndevelop cross platform applications before introducing \nstandard operating systems [10].  \nStandard operating systems provide standard APIs \nfor different tasks, 3D graphics rendering and \nmanipulation is one example. With standard operating \nsystems, developers can now concentrate more on the \ncontents of their applications rather than wasting time \nwith system-related issues. \nThe next section shows what APIs Symbian, \nBREW and J2ME offer for 3D games deployment on \nmobile phones. \n4.3. Mobile 3D Graphics APIs: \n  All of the three platforms, Symbian, BREW and \nJ2ME, have recently incorporated 3D graphics APIs \nthat would empower 3D gaming on mobile phones. \nThese are OpenGL for Embedded Systems 1.0 \n(OpenGL ES 1.0) and Mobile 3D Graphics (M3G).  \n4.3.1. OpenGL ES 1.0: Although some commercial \n3D toolkits are available, OpenGL ES 1.0 is \nconsidered the first fully 3D-oriented, open standard \nAPI that enables true 3D graphics and effects on \nSymbian and BREW mobile phones, in addition to \nother platforms [2]. It provides a portable, cross-\nplatform abstract access to 3D pipelines in the targeted \ndevices. OpenGL ES is a well-defined subset of \ndesktop OpenGL that introduces to mobile phones \nsmall, footprint applications with advanced 3D \ncapabilities [11]. Its main differences to desktop \nOpenGL are 1) the removal of some APIs and classes \nthat are too expensive to mobile platforms, 2) the \nintroduction of smaller data types, and 3) the \nadditional support for fixed-point math [2]. With these \nchanges, OpenGL ES aims to remove many of the \ngraphics-related barriers that mobile developers used \nto face [12]. \nOpenGL ES 1.0 standard has received a wide-\nspread support from over 75 heavy-weight industries \n[11] including Ericsson, Motorola, Nokia, Qualcomm \n(the founder of BREW), and Sum Microsystems, as \nwell as cutting-edge industry influencers such as Tao \nGroup, Symbian and Fathammer [12]. All of these big \nnames are embraced under the umbrella of the \nKhronos Group who founded OpenGL ES.  \nThe newest versions of Symbian OS (v8.0) and \nBREW (v1.1 and above) has adopted OpenGL ES API \nin their architectures. This means that developers can \nwrite code in the native language of the OS (C\/C++) \nthat enjoy high performance in terms of speed and \nhardware access [4]. \n  Mobile vendors are incorporating hardware and \nsoftware support for OpenGL ES in their devices. \nNokia 6630 is the first mobile phone to ship running \nSymbian OS v8.0 and supporting OpenGL ES 1.0 in \nsoftware [13]. However, 3D applications developed to \nrun on such phone can run as well on others that don\u2019t \nsupport OpenGL ES but by using specific \nimplementations of the API like Hybrid Graphics\u2019 \nimplementation for Nokia 3650, 7650 and 6600. This \nmigration to non-supporting devices of course is \nfollowed by some performance defects. Futuremark\u2019s \nSPMark04 benchmarking software proves this when \ntested on different Nokia phones.  \n  The benchmark is a comprehensive OpenGL ES \n3D test suite that measures graphics performance on \nSymbian platforms. The test includes 2D and 3D \nsections [14]. The 3D part is an advanced gaming \nscene with theoretical tests for 3D performance \nmeasurement and it lasts for 110 seconds. The 2D \nsection features 2D content displaying and image \nmanipulation tests and lasts 30 seconds.  \n After testing the benchmark on different Nokia \nphones, N-Gage, 6600, and 6630, we concluded the \nperformance results listed in Table 1.  \nTable 1: SPMark04 testing results on Nokia phones \nN-Gage 6600 6630\nOS v. 6.1 7.0 8.0\nCPU (MHz) 104 104 220\nOGL ES support No No Yes\nFrame\/sec 8.15 7.79 14.59\nM texel\/s 1.80 1.67 3.2\nK triangle\/s 28.10 27.1 66.41\nRunning time  4h 10m 5h 28m 5h 42m \nIt is obvious that devices not supporting OpenGL \nES perform poorly when compared to those that do. \nThe performance of Nokia 6630 is approximately as \ntwice as the others\u2019. Note here that the CPU speed \nplays a great role in improving performance as well. \nOpenGL ES has reduced the power consumed to \nrender 3D graphics on mobile phones. This has been \nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n5tested by continuously running G-Unit, a 3D none-\ninteractive animated game featuring real-time software \nrendering [15], transformation, rotation, texturing, \nlightening, collision detection and simple models, \nwhich has been designed by Hybrid Graphics. From \nTable 1, the time the Nokia 6600 spent running G-\nUnit, until its battery died is 5 hours and 28 minutes, \nalthough this phone does not support OpenGL ES. \nInterestingly enough this running time is even longer \nthan the phone\u2019s estimated talking time (2-4 hours \n[4]). Nokia 6630, on the other hand, could run G-Unit \nfor 5 hours and 42 minutes, with an increase of 14 \nminutes. This increase is a result of the software \nsupport of OpenGL ES by the phone. When the API \ngets supported by hardware, the increase is expected to \nbe much more. \nWe would note that the battery life was much \ngreater than expected and as the demo did not include \nany user interaction or game play, it is likely to be \nconsiderably reduced when playing \u2018real\u2019 games. \n4.3.2. M3G: J2ME has provided games developers \nwith its JSR 184 3D graphics API, which is known as \nMobile 3D Graphics (M3G). M3G is a lightweight, \ninteractive 3D graphics interface which sits alongside \nMobile Information Device Profile (MIDP),  Figure 1. \nIt is flexible enough to implement a wide range of \napplications including games, animated messages, \nscreen savers, graphical user interfaces, product \nvisualization, and so on [10]. The API targets the \nConnected Limited Device Configuration (CLDC) \nclass devices that typically have very little processing \npower and memory, and no hardware support for 3D \ngraphics or floating-point math [10]. \nSome may ask why to implement a new 3D-\ndedicated API for Java with the presence of its Java3D \nAPI. The reason is referred to the size of Java3D \nwhich is hundred times larger than M3G and which of \ncourse doesn\u2019t fit the mobile platforms [4]. The API \nhas to be flexible and small to make code faster and \nsmaller. M3G applies in this context where it is \nimplemented in 150 kilobytes only [14]. \nFigure 1: Software\/hardware stack for mobile \nphones \nM3G offers similar 3D functionalities as those of \nOpenGL ES but notably with less performance. The \nreason for this can be relied to the nature of Java-\nbased applications that are expressed in hardware-\nindependent byte-codes that are executed by virtual \nmachines and then translated into native code. This \ntranslation process adds a delay time. OpenGL ES \ncode on the other hand is initially compiled into native \ncode that is executed directly by the hardware [4].  \nBy using JBenchmark3D benchmarking software, \nimplemented by JBenchmark, to test 3D graphics \nusing M3G on phones supporting J2ME, we could \nnotice the difference in performance between M3G \nand OpenGL ES. Unfortunately, this benchmark could \nrun only on the newest version of Symbian OS, v8.0, \nsince it is the only one available version supporting \nM3G API. Hence, it could not be used on the phones \ntested previously for OpenGL ES that run older \nversions of the operating system. In this case the test \nhere has been restricted only to Nokia 6630 where we \nconcluded that M3G gives approximately 74% of the \nperformance quality of OpenGL ES\u2019. Table 2 shows \nthese results.  \nTable 2: JBenchmark3D testing results on Nokia \nphones \nN-Gage 6600 6630\nM3G support No No Yes\nFrame\/sec - - 11.79\nM texel\/s - - 2.472\nK triangle\/s - - 48.608 \nRunning time - - N\/A \n4.4. Software Engineering Techniques for 3D    \n        Mobile Games Development: \n When moving to developing 3D games for the \nmobile platform, the developer has to keep his code as \nadequate as possible to fit the critical constraints of the \nenvironment. The following paradigms summarize \nmany useful tactics that can be adopted while writing a \nmobile 3D game. \nParadigm 1: Avoid using floating-point data type \nas much as possible even when supported by the \nhardware of the targeted device. Fixed-point math is \nalways quicker and less power hungry and is often \nsufficient for many purposes. OpenGL ES supports \nfixed-point values of 32-bit (s15.16 format), 16-bit, \nand 8-bit [2]. \n Paradigm 2: Always use small data types (short, \nbyte, unsigned, etc) when it is possible. Both the \nstorage size and memory requirements for your \nNative Apps \nJava Apps\nM3G MIDP\nOpenGL ES Java Virtual Machine\nGraphics \n Hardware Device Hardware\nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n6geometry will be decreased. Consequently, the \noverhead on the bandwidth will be reduced [2]. \n Paradigm 3: Do not pass data arrays in the array \nnotation (arr[]). Use pointers instead. When you pass \nan array you will reserve memory space that is \nequivalent to its total size, while in a pointer notation \nyou just reserve memory for the pointer type size.  \nParadigm 4: Avoid using the division and complex \nmultiplication operations. Most mobile hardware \ndoesn\u2019t support these operations very efficiently, if at \nall. Even when supported, performing division and \nmultiplication is time and power consuming. Use \ninstead the right and left shifting operators (<<, >>) \nfor multiplication and division respectively in powers \nof 2. \n Paradigm 5: When trigonometry (sin, cos, etc) is \nneeded implement look-up tables that store pre-\ncalculated values. Look-up tables will help boost up \nthe performance compared to applying standard \nlibrary functions [2]. (Look-up tables can also be used \nin the division and multiplication). \n Paradigm 6: Minimize the number of duplicate \nvertices sent to the transformation stage of the \ngraphics pipeline. This is done by either using indexed \ntriangle lists or triangle strips [2]. \n Paradigm 7: Reduce the polygon count of the \ngame geometry (game models) to a reasonable amount \nin order to have a smooth frame rate. This in tern will \nreduce the geometry data of the game [2]. \n Paradigm 8: Use very simple and primitive models \nfor your game. Skip too-specific details since you are \ndealing with small display resolutions. They will not \nbe visible. \n Paradigm 9: Scale down your game textures as \nmuch as possible. Textures usually take up most of the \nspace. Due to the small screen sizes on mobile \ndevices, textures can be rescaled to very small sizes \neasily without losing visual quality; even more, \nsimilar-looking textures can be removed [2]. \n Paradigm 10: Use compression tools to minimize \nthe size of images and geometrical data in your game. \nPNG is a recommended format for lossless image \ncompression and zip or lzw are great for generic data \nsuch as geometry [2].  \n5. Future Expectations: \n  Currently many software and hardware companies \nare investing and researching for new technologies to \nimprove 3D graphics experience on the mobile \nplatforms. This interest is expected to continue and \nincrease as the demand for 3D games on mobile \nphones is growing. However, to meet this demand, the \npreviously discussed limitations have to be overcome \nto enable 3D manipulation on the limited battery-\npowered devices. \nThe chief complaint among consumers remains the \nperceived short running time of mobile phones. With \nthe excessive calculation of 3D games, this time will \nbecome even shorter. The efforts to reduce energy \nconsumption by battery-powered devices, which \nstarted in the late 90\u2019s [16], have touched a relative \nsuccess on almost all portable electronic devices, \nincluding mobile phones, with an increase in \nefficiency of 10-20% every year, said Richard \nDoherty, an analyst at The Envisioneering Group. \nMaybe mobile processor manufacturer can benefit or \neven imitate Intel\u2019s Pentium M processor technology \nwhich powers down during lag time to save energy in \norder to push the consumption efficiency much further \n[16].\n  To continue to improve battery performance, \nmobile device makers may have to combine batteries \nwith other technologies such as superconductors and \nfuel cells [16]. This gives a promising insight of the \nfuture technologies for batteries on mobile phones. \n  In addition to the optimization of power \nconsumption, processing units with faster clock cycles \nwill appear in a short term. The fastest CPU available \nnow on mobile phone is Intel PXA272 with a clock \ncycle of 520MHz [17]. It is shipped in O2 Xda IIi, \nwhich is a dual purpose mobile phone and Personal \nDigital Assistant (PDA), without using any cooling \nmechanism. According to the device\u2019s specification, \nXda IIi can run up to 4 hours of talk-time and 170 \nhours of stand-by [17]. When it is compared to its \npredecessor, Xda, we notice an increase of half an \nhour in the talk-time and 20 hours in the stand-by time \nalthough the latter has a slower processor, 206MHz \n[17]. This leap proves that it is possible to reach faster \nclock cycles for processors on mobile phones while \ndecreasing their power consumption.  \n  Alongside CPUs, mobile phones dedicated for \ngaming purposes, such as the Nokia N-gage series, are \nexpected to incorporate in their hardware architecture \nGraphics Processing Units (GPU) to manage the \nexcessive calculation of 3D games. 3D graphics \nhardware isn\u2019t available at the mean time. However, \nby introducing it, more CPU resources will be \navailable for other things in games such as Artificial \nIntelligence (AI), physics, special effects and so on \n[2]. This will result on better playing experience. \n  Besides the processing power and the power \nconsumption of a mobile phone, relatively very large \nmemories (hard-disk drive or flash) will be introduced \ninto the global mobile market very soon. Samsung has \nalready unveiled a mobile phone with 1.5GB, 2.5cm \nhard-disk drive in South Korea [18]. Soon \u201chard-\ndrives phones will have even more storage capacities,\u201d \nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n7said Bertand Cambou, CEO of Spansion, the flash \nmemory joint venture between AMD and Fujitsu. \nAlso, 2GB storage flash memories will appear by the \nsecond quarter of 2005 [18]. \n  The shape, size and control-buttons of future \nhandset are considered a main theme in the hardware \nimprovement of mobile phone gaming decks. Mobile \nphones with larger display resolution reaching \n320\u00d7240 pixels as a standard are more likely to spread \namong mobile gamers. The small screens available \nnow don\u2019t satisfy gamers\u2019 love for futuristic 3D \ngames. However, larger displays will of course \nincrease the size of the device. Therefore, slim, \nsuitable and optimized designs have to be overtaken \nby manufacturers to overcome this trade-off. \n  To increase the interactivity with games, gamers \nneed to use lots of controls to have the full control of \nthe game. That\u2019s why future devices will incorporate \nmore controlling buttons (rocker and shoukler), better \njoysticks, stereo speakers and plug-and-play memory \nslots.     \n  Software wise, OpenGL ES is expected to be the \nstandard API for 3D graphics on almost all mobile \nphones. All mobile processor manufacturers will \nprovide hardware support for the standard. \u201cThe \nconsolidating force in PC games was OpenGL, and \nhistory will repeat itself with the introduction of \nOpenGL ES for handheld devices,\u201d said John Peddie, \npresident of John Peddiie Research. [19]. \n The Khronos Group is working hard to keep \nimproving the API. Recently, Khronos has released a \nnewer version of OpenGL ES, OpenGL ES 1.1, which \nemphasizes hardware acceleration, while OpenGL ES \n1.0 focuses on enabling software-only \nimplementations [11]. OpenGL ES 1.1 introduces \nenhanced power efficiency, flexibility and effects [11]. \nIn mid 2005, Khronos will release OpenGL ES 2.0 \nwhich will facilitate shader programming on mobile \ndevices [11].  \n OpenGL ES is likely to become the standard API \nfor mobile 3D gaming since most active companies in \nthis domain have joined the Khronos Group [11].  \n6. Conclusion: \n  Mobile games will be one of the most \ncommercially successful applications on mobile \nphones. With the relentless progress pace of both \nhardware and software on mobile phones, mobile \ngames that used to be restricted to text and primitive \nmonochrome-based graphics will move to a newer \nstage of equipping fully 3D featured contents into \nmobile games by doubling, if not more, their \nperformance. By having coherence between the \nsoftware and hardware worlds in the mobile devices, \nthe mobile gaming industry will grow rapidly as we \nprogress. \n The future trends for mobile devices not only will \nimprove performance of 3D games on mobile phones, \nbut also will open new doors for other innovative \nmobile applications. \n7. References:  \n[1] \u201cWorldwide share of Mobile Gaming Revenues to Shift\u201d,\neMarketer Research, November 10, 2004. \n[2] Dave Astle, and Dave Durnil, OpenGL ES Game \nDevelopment, Thomson Course Technology, 2004. \n[3] Phil Atkin, \u201cThe Challenge of Migration: Desktop to \nHandheld\u201d, proceedings of Khronos DevUniversity, \nLondon, United Kingdom, September 1, 2004. \n[4] http:\/\/www.nokia.com\/nokia\/, accessed February 13, \n2005. \n[5] http:\/\/www.nvidia.com, accessed November 21, 2004.  \n[6] http:\/\/www.arm.com, accessed November 21, 2004.  \n[7] Ralph Barbagallo, Wireless Game Development in \nC\/C++ with BREW, Wordware, 2003.  \n[8] Leigh Edwards, Richard Barker, and the staff of EMCC \nSoftware Ltd., Developing Series 60 Applications: A Guide \nfor Symbian OS C++ Developers, Addison Wesley, 2004. \n[9] \u201cAbout BREW\u201d, http:\/\/brew.qualcomm.com, accessed \nJanuary 22, 2004. \n[10] \u201cJSR 184: Mobile 3D Graphics API for J2ME\u201d,\nhttp:\/\/www.jcp.org\/en\/jsr\/detail?id=184, accessed February \n12, 2005. \n[11] Neil Trevett, \u201cKhronos and OpenGL ES\u201d, proceedings \nof Siggraph 04, Tokyo, Japan, 2004. \n[12] \u201cSmall and Beautiful\u201d, Feature, March 2004. \n[13] Jani Vaarala, \u201cOpenGL ES Development on Series60 \nand Symbian\u201d, proceedings of Khronos DevUniversity, \nLondon, United Kingdom, September 1, 2004. \n[14] \u201cThe Smartphone Benchmark\u201d, http:\/\/www. \nfuturemark.com\/products\/spmark04\/, accessed November 3, \n2004. \n[15] \u201cOpenGL ES Demos\u201d, http:\/\/www.hybrid.fi\/ main\/ \nesframework\/demos.php, accessed February 10, 2005. \n[16] Micheall Kanellos, \u201cTime for an Assault on \nBatteries?\u201d, CNET News.com, http:\/\/news.com.com, \nNovember 26, 2004.    \n[17] \u201cXda Comparison Tool\u201d, http:\/\/www.my-xda.com\/ \ncomp.html, accessed January 12, 2005. \n[18] Yong-Young Kim, and Micheall Kanellos, \u201cSamsung \nShows off Hard-dive Based Mobile\u201d, CNET News.com, \nhttp:\/\/news.com.com, December 7, 2004.   \n[19] \u201cKhronos News Release\u201d, proceedings of Khronos \nDevUniversity, London, United Kingdom, September 1, \n2004. \nProceedings of the International Conference on Mobile Business (ICMB\u201905) \n0-7695-2367-6\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: Lancaster University Library. Downloaded on January 7, 2009 at 09:12 from IEEE Xplore.  Restrictions apply.\n"}