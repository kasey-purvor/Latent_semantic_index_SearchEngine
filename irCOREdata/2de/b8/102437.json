{"doi":"10.1007\/b136154","coreId":"102437","oai":"oai:epubs.surrey.ac.uk:1897","identifiers":["oai:epubs.surrey.ac.uk:1897","10.1007\/b136154"],"title":"Verifying Security Protocols: An Application of CSP","authors":["Schneider, Steve","Delicata, Robert"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2005-05-04","abstract":"<p>The field of protocol analysis is one area in which CSP has proven particularly successful, and several techniques have been proposed that use CSP to reason about security properties such as confidentiality and authentication. In this paper we describe one such approach, based on theorem-proving, that uses the idea of a rank function to establish the correctness of protocols. This description is motivated by the consideration of a simple, but flawed, authentication protocol. We show how a rank function analysis can be used to locate this flaw and prove that a modified version of the protocol is correct.<\/p","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:epubs.surrey.ac.uk:1897<\/identifier><datestamp>\n      2017-10-31T14:03:34Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D626F6F6B5F73656374696F6E<\/setSpec><setSpec>\n      6469766973696F6E733D656E67616E64706879736963616C736369656E636573:436F6D707574696E67<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/epubs.surrey.ac.uk\/1897\/<\/dc:relation><dc:title>\n        Verifying Security Protocols: An Application of CSP<\/dc:title><dc:creator>\n        Schneider, Steve<\/dc:creator><dc:creator>\n        Delicata, Robert<\/dc:creator><dc:description>\n        <p>The field of protocol analysis is one area in which CSP has proven particularly successful, and several techniques have been proposed that use CSP to reason about security properties such as confidentiality and authentication. In this paper we describe one such approach, based on theorem-proving, that uses the idea of a rank function to establish the correctness of protocols. This description is motivated by the consideration of a simple, but flawed, authentication protocol. We show how a rank function analysis can be used to locate this flaw and prove that a modified version of the protocol is correct.<\/p><\/dc:description><dc:date>\n        2005-05-04<\/dc:date><dc:type>\n        Book Section<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/epubs.surrey.ac.uk\/1897\/1\/fulltext.pdf<\/dc:identifier><dc:identifier>\n          Schneider, Steve and Delicata, Robert  (2005) Verifying Security Protocols: An Application of CSP   In:  UNSPECIFIED    UNSPECIFIED, pp. 243-263.      <\/dc:identifier><dc:relation>\n        10.1007\/b136154<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"hu","id":19,"name":"Hungarian"},"relations":["http:\/\/epubs.surrey.ac.uk\/1897\/","10.1007\/b136154"],"year":2005,"topics":[],"subject":["Book Section","PeerReviewed"],"fullText":"Verifying Se\rurity Proto\rols:\nan appli\ration of CSP\nSteve S\rhneider and Rob Deli\rata\nDepartment of Computing, University of Surrey\nAbstra\rt. The \feld of proto\rol analysis is one area in whi\rh CSP has\nproven parti\rularly su\r\ressful, and several te\rhniques have been proposed\nthat use CSP to reason about se\rurity properties su\rh as \ron\fdentiality\nand authenti\ration. In this paper we des\rribe one su\rh approa\rh, based\non theorem-proving, that uses the idea of a rank fun\rtion to establish\nthe \rorre\rtness of proto\rols. This des\rription is motivated by the \ronsid-\neration of a simple, but \rawed, authenti\ration proto\rol. We show how a\nrank fun\rtion analysis \ran be used to lo\rate this \raw and prove that a\nmodi\fed version of the proto\rol is \rorre\rt.\n1 Introdu\rtion\nIn their seminal paper [NS78\u2104, Needham and S\rhroeder proposed a way of us-\ning \rryptographi\r me\rhanisms, su\rh as publi\r-key and shared-key en\rryption,\nin order to establish authenti\ration guarantees a\rross networks. Su\rh me\rha-\nnisms typi\rally involve an ex\rhange of messages between parti\ripants, and are\nknown as authenti\ration proto\rols. Parti\ripants \rarry out \rryptographi\r opera-\ntions parti\rular to them (su\rh as en\rrypting with a spe\ri\f\r se\rret key) whi\rh are\nintended to provide guarantees as to their identity. Su\rh proto\rols are designed\nto provide authenti\ration even in inse\rure environments, where other parties \ran\npotentially interfere with messages over the network in various ways. For exam-\nple, messages \ran be overheard, \ropied, blo\rked, replayed, diverted, dupli\rated,\nand spoofed.\nAs a motivating and running example, we will \ronsider the following ex\rhange\nof messages, whi\rh appears as a simple (\rawed) authenti\ration proto\rol in the\nHandbook of Applied Cryptography [MVV96\u2104:\nA! B : n\nA\nB ! A : fn\nA\n;n\nB\ng\nK\nAB\nA! B : n\nB\nThe aim of this proto\rol is for ea\rh of the parti\ripants to authenti\rate themselves\nto the other. In other words, ea\rh parti\ripant should know, by the end of the\nproto\rol, the identity of the other parti\ripant.\nThis proto\rol involves two parti\ripants, A and B , who share a symmetri\r\n\rryptographi\r key K\nAB\n(whi\rh \ran also be written K\nBA\n) whi\rh is used by ea\rh\nof A and B to en\rrypt and de\rrypt messages to and from the other. The proto\rol\nrelies on the assumption that no party other than A or B knows this key. The\nproto\rol begins withA, a\rting as initiator, who invents a new random number (or\nnon\re), n\nA\n, and transmits it to B . This non\re is sent unen\rrypted, so any other\nagent \rould potentially eavesdrop and learn its value, or spoof some arbitrary\nnon\re n\nI\nto B as if it \rame from A. (As a result, B 's re\reipt of the non\re does\nnot \rarry any assuran\re that it originated from A.)\nOn re\reipt of the non\re n\nA\n, B , as responder, performs a \rryptographi\r op-\neration that no other party \ran perform: by en\rrypting the non\re with K\nAB\n.\nThis message is then sent to A, who de\rrypts it using K\nAB\n. If this de\rryption\n\rontains the non\re n\nA\nthen this provides a guarantee that n\nA\nmust have been\nre\reived and en\rrypted by B , sin\re B is the only other party that knows K\nAB\n.\nThis results in the authenti\ration of B to A: A knows that she has been \rommu-\nni\rating with B , and not some mali\rious party pretending to be B . In order to\na\rhieve authenti\ration in the other dire\rtion (A to B), B also in\rludes a freshly\ngenerated non\re n\nB\nin the en\rryption of the se\rond message. A is able to de-\n\rrypt this non\re and send it ba\rk, unen\rrypted, to B . On re\reipt of n\nB\n, B has\nan assuran\re that it was A who re\reived and returned the non\re, and hen\re was\nthe other party involved in the proto\rol run.\nThe assuran\res are obtained by virtue of the fa\rt thatK\nAB\nis known only to A\nand B , and hen\re eviden\re of its use provides eviden\re that A or B were involved\nin \rarrying out the en\rryption or de\rryption. Indeed, if A and B are only ever\ninvolved in one proto\rol run, then the proto\rol does provide the authenti\ration\nrequired of it: A \rannot rea\rh the end of the run unless B is involved; and B\n\rannot rea\rh the end of the run unless A is involved.\nHowever, agents \ran generally be involved in multiple proto\rol runs, possibly\nsimultaneously, potentially with a variety of other parti\ripants, and in ea\rh \rase\nmay assume the role of either initiator or responder (or, indeed, both). Under\nsu\rh \rir\rumstan\res, the proto\rol is sus\reptible to an atta\rk: an ex\rhange of\nmessages after whi\rh one agent has rea\rhed a state where authenti\ration appears\nto have been established, and yet where the party supposedly authenti\rated has\nnot in fa\rt been involved.\nThe atta\rk (also given in [MVV96\u2104) involves two runs, where A assumes the\nrole of initiator in one run and responder in the other. In both runs A intends\nB to be the other party, but in fa\rt the messages are being pro\ressed by some\nother agent E (B), who A \ronsiders to be B . The runs, labelled \u000b and \f, are\ninterspersed as follows:\n\u000b : A! E (B) : n\nA\n\f : E (B)! A : n\nA\n\f : A! E (B) : fn\nA\n;n\n0\nA\ng\nK\nAB\n\u000b : E (B)! A : fn\nA\n;n\nA\ng\nK\nAB\n\u000b : A! E (B) : n\nA\nThe steps of the atta\rk are as follows:\n1. A initiates a run using non\re n\nA\n, apparently with B ; but the non\re is inter-\n\repted by E (B).\n2. E (B) initiates a separate run with A (who thus takes the role of responder),\napparently with B , using the same non\re n\nA\n.\n3. On re\reipt of the non\re n\nA\n, A invents a responder's non\re n\n0\nA\nand then\nreturns it, together with n\nA\n, en\rrypted under K\nAB\n.\n4. E (B) inter\repts this message and sends ba\rk exa\rtly the same message to A\nas the response to the original non\re \rhallenge n\nA\nof the \frst run. A a\r\repts\nthe non\re n\n0\nA\nas the non\re n\nB\nprovided by B .\n5. A responds with the non\re n\nA\njust re\reived.\nAfter this ex\rhange of messages, A has rea\rhed the end of the proto\rol run,\napparently with B , and hen\re the proto\rol is intended to provide an assuran\re\nthat B was indeed the other parti\ripant. However, B has not been involved at\nall. Hen\re the proto\rol does not provide the assuran\res required of it.\nHaving identi\fed the atta\rk, it is possible to suggest \rorre\rtions whi\rh will\nprevent it. In this example the atta\rk was possible be\rause the se\rond message\nis symmetri\r in terms of initiator and responder, and \rontains no information\nabout whi\rh parti\ripant \rreated it. This allowed a situation in whi\rhA generated\nsu\rh a message and was later persuaded to a\r\rept it as if it \rame from the other\nparty. Introdu\ring the name of the parti\ripant who en\rrypted the message would\nprevent the atta\rk above. This results in the revised proto\rol:\nA! B : n\nA\nB ! A : fB ;n\nA\n;n\nB\ng\nK\nAB\nA! B : n\nB\nHowever, \ran we be \ron\fdent that no other atta\rks are possible on the \rorre\rted\nproto\rol?\nIn order to obtain su\rh \ron\fden\re, it is ne\ressary \frst to \rlarify several issues\naround the proto\rol:\n{ What kind of environment is the proto\rol designed for? In other words, what\nare the kinds of atta\rks that the proto\rol is designed to be resistant to? For\nexample, on a broad\rast network an atta\rker may be able to overhear and\nspoof messages, but be unable to blo\rk them.\n{ What level of authenti\ration is the proto\rol designed to provide? For exam-\nple, is it simply intended to establish that the authenti\rated agent is present\n(e.g. that a server is up), or that the authenti\rated agent knows who he is\n\rommuni\rating with.\n{ Are the other parti\ripants assumed to be honest (i.e. atta\rks \ran only orig-\ninate from outside the \rolle\rtion of proto\rol parti\ripants) or \ran they be\ndishonest?\n{ Can parti\ripants run arbitrarily many \ron\rurrent proto\rol sessions, or are\nthere restri\rtions?\nThis kind of information should be in\rluded with any proto\rol des\rription:\nthe \rorre\rtness of a proto\rol \ronsists not only in the sequen\re of messages it\ndes\rribes, but also the environment it is designed for.\nThere have been a variety of approa\rhes proposed for analysing and verifying\nse\rurity proto\rols [Mea92,Mil95,THG99,Low98,Pau98,CDL\n+\n99b,AG98,DFG00\u2104.\nSu\rh approa\rhes do indeed in\rorporate su\rh information into the models that\nthey des\rribe and analyse.\nThis paper is \ron\rerned with the appli\ration of CSP [Hoa85,Ros97,S\rh99\u2104 to\nthe veri\f\ration of se\rurity proto\rols, and in parti\rular with the rank fun\rtion\napproa\rh. There has already been signi\f\rant experien\re of the appli\ration of\nCSP to \rommuni\rations proto\rols, and that experien\re provides a framework\nfor the appli\ration of CSP to authenti\ration proto\rols. Broadly speaking, there\nare three \romponents of the approa\rh:\n{ The requirements on the proto\rol are expressed either as a CSP pro\ress (to\nbe re\fned by the implementation), or as sat spe\ri\f\rations on the observable\nbehaviours of the overall system: tra\res, failures, divergen\res. Su\rh spe\ri\f-\n\rations des\rribe the appropriate behaviour, and provide a basis for judging\nwhether proto\rols exhibit \rorre\rt behaviour or not.\n{ A proto\rol, although initially des\rribed in terms of message ex\rhanges, is\n\raptured in CSP in terms of the behaviour of ea\rh parti\ripating agent, lead-\ning to an agent-oriented rather than amessage-oriented viewpoint. Ea\rh par-\nti\ripant in the proto\rol is des\rribed as a CSP pro\ress. This shift in viewpoint,\naway from message transmission and re\reption, and towards the individual\nagents \ronsidered in terms of their intera\rtions with the rest of the system, is\na key feature in the su\r\ress of the approa\rh when applied to authenti\ration\nproto\rols, sin\re it naturally fo\ruses on where atta\rks might \rome from and\nhen\re how they should be prevented.\n{ Finally, the environment is also des\rribed as a CSP pro\ress. In \rommuni-\n\rations proto\rols, this is generally an unreliable medium whi\rh might lose,\nreorder, or dupli\rate messages. The parti\rular behaviour \raptured within\nthe medium is pre\risely that behaviour that the proto\rol has been designed\nto over\rome. For example, the traditional alternating bit proto\rol (see e.g.\n[S\rh99\u2104) is designed to provide reliable \rommuni\ration over a medium whi\rh\n\ran lose messages, and so the analysis of the proto\rol in\rludes a CSP des\rrip-\ntion of exa\rtly su\rh a medium (whi\rh non-deterministi\rally either reliably\n\rommuni\rates a message or else loses it). In the \rase of se\rurity proto\rols,\nwe need to in\rlude the \rapabilities of possible atta\rkers.\nWhen all three \romponents are in pla\re: spe\ri\f\ration, environment, and proto\rol\ndes\rription, then the mature tools and te\rhniques that CSP has to o\u000ber \ran\nbe brought to bear on parti\rular proto\rols, and whether or not they meet a\nparti\rular spe\ri\f\ration.\nThis paper assumes a knowledge of CSP and, in parti\rular, the notations of\n[S\rh99\u2104.\nThe next se\rtion elaborates a theory for verifying authenti\ration proto\rols\nbased on this approa\rh.\n2 Verifying authenti\ration proto\rols in CSP\nAny authenti\ration proto\rol is intended to run over a network whi\rh \ran be\nsubje\rt to parti\rular kinds of atta\rk. We take the approa\rh of \ronsidering an\natta\rker (synonymous terms in\rlude `intruder', `enemy', `spy', and `penetrator')\nin terms of \rapabilities, su\rh as being able to inter\rept messages on the network,\n\rreate new messages for passing on the network, redire\rting messages, and so\non. We will assume a single atta\rker, though in fa\rt the atta\rker we will des\rribe\nhas the ability to behave as a \rolle\rtion of atta\rkers.\n2.1 The atta\rker\nSin\re the aim is to prove that proto\rols are \rorre\rt, we take a pessimisti\r point\nof view and assume an atta\rker with maximal \rapabilities. In the worst \rase, the\natta\rker has \romplete \rontrol over all the messages in the network. If a proto\rol is\nse\rure even in su\rh an environment, then it will be se\rure in any weaker, perhaps\nmore realisti\r, environment. The only \rapabilities the atta\rker should not have\nare the ability to en\rrypt or de\rrypt messages without the appropriate keys. As\na \ronsequen\re, we assume there is enough redundan\ry in the \rryptosystem so\nthat ea\rh \riphertext \ran be produ\red in exa\rtly one way. This restri\rtion has\nbe\rome known as the perfe\rt en\rryption assumption [PQ00\u2104.\nWe use the Dolev-Yao model, \frst proposed in [DY83\u2104, in whi\rh the atta\rker\nhas \romplete \rontrol of the network and, to all intents and purposes, repla\res\nthe network. Thus, messages that are sent are automati\rally inter\repted and\nheld by the atta\rker. Messages that are re\reived from the network must have\n\rome from the atta\rker. This simple model allows for the kinds of atta\rker be-\nhaviour des\rribed earlier. It allows for messages to be delivered normally, sin\re\none a\rtion the atta\rker \ran take is to deliver messages to the intended re\ripi-\nent unaltered. However, it also allows for messages to be misdire\rted, blo\rked,\nspoofed, reordered, and dupli\rated. Furthermore, the atta\rker \ran himself be in\npossession of some agent identities (names and asso\riated \rryptographi\r keys)\nand so appear to other agents on the network as a potential \rommuni\ration\npartner. In this way,\ndishonest agents are en\rapsulated within the model. Any message that \ran\nbe generated by the atta\rker, from what he has already observed and what he\noriginally knows, \ran potentially be delivered to any other agent on the network,\nas if it \rame from any other agent.\nThe details of the CSP des\rription of the atta\rker model will re\re\rt the kind\nof environment the proto\rol is designed for. For example, if the proto\rol is in-\ntended to operate between two known honest parti\ripants, then the atta\rker\nmight not itself \rontrol any agent identities. Furthermore, the pre\rise \rrypto-\ngraphi\r \rapabilities of the atta\rker will also be in\rorporated into the model, and\nthis might be proto\rol-spe\ri\f\r.\nThe overall network \ronsists of a number of users \ronne\rted to the \rommu-\nni\rations medium, whi\rh is under the \rontrol of the atta\rker. The users will be\nmodelled as CSP pro\resses USER\ni\n, where i is the agent's name. We will use a\nPairing\nS ` m\n1\nS ` m\n2\nS ` m\n1\n\u0001m\n2\nUnpairing\nS ` m\n1\n\u0001m\n2\nS ` m\n1\nS ` m\n2\nMember\nS ` m\n[m 2 S \u2104\nSubset\nS\n0\n` m\nS ` m\n[S\n0\n\u0012 S \u2104\nTransitive \rlosure\n8 s\n0\n2 S\n0\n:S ` s\n0\nS\n0\n` m\nS ` m\nEn\rryption\nS ` m S ` k\nS ` fmg\nk\nDe\rryption\nS ` fmg\nk\nS ` k\nS ` m\nFig. 1. Atta\rker inferen\re rules\n\rhannel trans :i for agent i to transmit messages intended for other users onto\nthe network. An event trans :i :j :m will \rorrespond to agent i sending messagem,\nintended for agent j . We will use a \rhannel re\r:j for agent j to re\reive messages\nfrom the network. An event re\r:j :i :m \rorresponds to agent j re\reiving message\nm from the network, apparently from i . All message ex\rhanges between proto\rol\nparti\ripants will use \rhannels and events of this form.\nWe also need to de\fne the kind of messages that \ran be passed around the\nnetwork. This will depend on the proto\rol under analysis, sin\re di\u000berent pro-\nto\rols use di\u000berent message \ronstru\rtions. For the example proto\rol introdu\red\nearlier, we will have three pairwise disjoint sets, USER, NONCE , KEY , whi\rh\ngive the agent identities, non\res, and keys respe\rtively. Furthermore, for ea\rh\npair of distin\rt users i and j , there will be a shared key k\nij\n= k\nji\nsu\rh that\ndi\u000berent pairs of agents have di\u000berent shared keys. We will use the following\nspa\re of messages, de\fned using BNF as the set MESSAGE :\nM\n1\n;M\n2\n::= messages\nI (2 USER) agent identities\nN (2 NONCE ) non\res\nK (2 KEY ) keys\nM\n1\n:M\n2\n\ron\ratenation of messages\nfM g\nK\nen\rryption of message M by key K\nFor this spa\re of messages, we \ran de\fne the atta\rker's \rapabilities in terms of\nthe generation of new messages from those already possessed. We introdu\re a\n`generates' relation `, whi\rh relates a set of messages S to a message m that\n\ran be generated from S . It is de\fned to be the least relation \rlosed under the\ninferen\re rules of Figure 2.1. We are now in a position to des\rribe the CSP model\nof the Dolev-Yao style atta\rker. It is given as the pro\ress ENEMY , de\fned as\nfollows:\nENEMY (S ) = trans?i?j ?m ! ENEMY (S [ fmg)\n2\n2i2USER\nj2USER\nmjS`m\nre\r!i !j !m ! ENEMY (S )\nThe pro\ress ENEMY (S ) des\rribes the possibilities available to an atta\rker in\npossession of the set of messages S . The \frst bran\rh of the \rhoi\re models the\nsituation that a new message m \ran always be transmitted from any user to\nany other user, and this will be inter\repted and added to the set of messages\npossessed by the atta\rker. The se\rond bran\rh of the \rhoi\re des\rribes that the\natta\rker \ran provide any message m that \ran be generated from S to any user\ni , as if it \rame from any other user j . In this \rase the atta\rker's store of known\nmessages S does not \rhange.\nThe enemy will have some initial knowledge, in\rluding some non\res he \ran\nuse, agents' identities, and \rryptographi\r keys of agents that he \rontrols. If the\ninitial knowledge is given as the set IK , then ENEMY | the environment that\nthe proto\rol runs over | is given by\nENEMY = ENEMY (IK )\n2.2 Spe\rifying authenti\ration\nWhen two parties engage in a proto\rol run aimed at authenti\rating one to the\nother, the intention is that \rompletion of the run by the authenti\rating party\nprovides a guarantee that the other party had also parti\ripated in the run. Sin\re\nspe\ri\f\rations in CSP are de\fned in terms of events, we will introdu\re spe\rial\nsignal events into the proto\rol runs at the points we wish to mark: \rompletion of a\nproto\rol run, and parti\ripation in a run. The approa\rh of introdu\ring mat\rhing\nsignals to spe\rify authenti\ration was introdu\red (not in the CSP \rontext) by\nWoo and Lam [WL93\u2104. These signals are introdu\red purely for the purposes\nof spe\ri\f\ration, to des\rribe stages that proto\rol parti\ripants have rea\rhed, and\nthey are used in the analysis and veri\f\ration of the proto\rol. They are not events\nthat the atta\rker \ran engage in.\nIn our example, we will introdu\re only two signals. Generally, others \rould\nbe introdu\red depending on the authenti\ration properties of interest.\nHere we \ronsider the property of the initiator authenti\rating the responder.\nThis \ran be spe\ri\fed by introdu\ring the following signals:\n{ initdone:i :j :n, whi\rh i performs after a proto\rol run as initiator involving j ,\nand using n as the non\re.\n{ respgo:j :i :n, whi\rh j performs during a proto\rol run as responder apparently\ninitiated by i with non\re n.\nThe set of all possible signals for this proto\rol and property is de\fned as follows:\nSIGNAL = finitdone:i :j :n j i 2 USER ^ j 2 USER ^ n 2 NONCEg\n[ frespgo:i :j :n j i 2 USER ^ j 2 USER ^ n 2 NONCEg\nThese signals will be inserted into the proto\rol runs. The intention is that\nan o\r\rurren\re of the signal initdone:A:B :n\nA\nguarantees that (elsewhere in the\ninitdone:A:B :n\nA\nrespgo:B :A:n\nA\nfB ; n\nA\n; n\nB\ng\nK\nAB\nn\nB\nn\nA\nA B\nFig. 2. Introdu\ring mat\rhing signals\nnetwork, at B 's lo\ration) the event respgo:B :A:n\nA\nhas previously o\r\rurred, at\nleast on\re. Thus the respgo signal must be inserted before the responder trans-\nmits his response to the \frst message, sin\re it must be pla\red \rausally prior to\nthe initdone message. The pla\ring of the signals into the proto\rol is illustrated\nin Figure 2.\nThe in\rlusion of a spe\ri\f\r non\re with the signal means that the agents must\nagree on the parti\rular proto\rol run: A does not only authenti\rate B 's presen\re,\nbut also that B was engaged in the same proto\rol run.\nThe use of signals enables authenti\ration to be expressed as a tra\re spe\ri\f\ra-\ntion: that any o\r\rurren\re of initdone:A:B :n\nA\nin any tra\re of the overall network\nmust be pre\reded by some o\r\rurren\re of respgo:B :A:n\nA\n. This \ran be de\fned\nformally on tra\res, as:\nrespgo:B :A:n\nA\npre\redes initdone:A:B :n\nA\nwhere\na pre\redes b b= tr \u0016 a = hi ) tr \u0016 b = hi\nObserve that this spe\ri\f\ration allows arbitrarily many b events in response to a\nsingle a event. This has been termed non-inje\rtive agreement [Low97\u2104.\nThe in\rlusion of di\u000berent information in the signals \ran give rise to di\u000berent\nauthenti\ration requirements. For example, the removal of the non\re from the\nsignals would allow intera\rtions in whi\rh A's run \rould \rorrespond to a di\u000berent\nrun from B (i.e. one with a di\u000berent non\re). However, there would still be a\nguarantee that B has been involved in some run apparently with A. An even\nweaker authenti\ration would simply allow the signal respgo:B , not even requiring\nthat B is engaged in a run apparently with A. This form of authenti\ration might\nbe appropriate if A simply requires some guarantee that B is alive. In pra\rti\re\ndi\u000berent notions of authenti\ration are appropriate to di\u000berent situations, and the\nuse of signals \rontaining appropriate levels of detail allow these di\u000beren\res to be\nexpressed. The various \ravours of authenti\ration are dis\russed in [S\rh98,Low97\u2104.\n2.3 Proto\rol parti\ripants\nThe proto\rol parti\ripants are also des\rribed as CSP pro\resses. Here we will\n\ronsider the modi\fed version of the proto\rol where the responder's identity is\nin\rluded in the en\rryption of the se\rond message. There are two possible roles\nin the proto\rol, and ea\rh of these will be des\rribed as a pro\ress.\nAn initiator run is parameterised by the identity of the initiating agent, the\nidentity of the agent she wishes to authenti\rate, and the non\re used in the run.\nThus we de\fne INIT\ni\n(j ;n) as a run of agent i using non\re n to authenti\rate j :\nINIT\ni\n(j ;n) = trans :i :j :n !\nre\r:j :i?fj :n:yg\nk\nij\n!\ntrans :i :j :y !\ninitdone:i :j :n ! Stop\nObserve the use of pattern mat\rhing in the input of the se\rond message: n, j ,\nand k\nij\nare already \fxed, and the input message must mat\rh these. However,\nany value for y \ran be a\r\repted.\nSimilarly, RESP\nj\n(n\n0\n) is a responder run for agent j , using non\re n\n0\nfor the\nnon\re that he generates. This is de\fned as follows:\nRESP\nj\n(n\n0\n) = re\r:j ?i?x !\nrespgo:j :i :x !\ntrans :j :i :fj :x :n\n0\ng\nk\nij\n!\nre\r:j :i :n\n0\n! Stop\nObserve that RESP\nj\n(n\n0\n) is ready to run the proto\rol with anyone who requests.\nIn the most general \rase, an agent will be prepared to parti\ripate in any\nnumber of \ron\rurrent proto\rol runs in either role, whi\rh is expressible as an\ninterleaving of runs. Our model must in\rorporate the fa\rt that ea\rh run uses a\ndi\u000berent non\re, so we will use a \rolle\rtion of pairwise disjoint sets of non\res: N\nI\nj\nwill be an in\fnite set of non\res that j \ran use on initiator runs; and N\nR\nj\nwill\nbe an in\fnite set of non\res that j \ran use on responder runs. A general agent is\nthen given as:\nUSER\nj\n= (\njjj\nn2N\nI\nj\n2\ni\nINIT\nj\n(i ;n))\nUSER\nA\nUSER\nC\nUSER\nB\ntrans:A\nre\r:A\ntrans:B\nre\r:B\ninitdone:A respgo:B\nUSER\nE\nENEMY\nFig. 3. The Dolev-Yao model in CSP\njjj\n(\njjj\nn2N\nR\nj\nRESP\nj\n(n))\nThe resulting system is given by\nSYSTEM = (\njjj\ni\nUSER\ni\n) j[ fj trans ; re\r jg \u2104jENEMY\nThis ar\rhite\rture is pi\rtured in Figure 3.\nTo show that the proto\rol ensures that A authenti\rates B , we aim to establish\nthat the following spe\ri\f\ration holds:\nSYSTEM sat respgo:B :A:n\nA\npre\redes initdone:A:B :n\nA\n3 A theorem for verifying authenti\ration\nWe will now introdu\re the rank fun\rtion approa\rh to verifying authenti\ration\nproto\rols. In this approa\rh we \ronsider a restri\rtion to the pro\ress SYSTEM\nwhi\rh prevents the o\r\rurren\re of respgo:B :A:n\nA\n, and then aim to establish that\ninitdone:A:B :n\nA\n\rannot o\r\rur. This approa\rh is valid be\rause\nSYSTEM sat respgo:B :A:n\nA\npre\redes initdone:A:B :n\nA\n, SYSTEM j[ respgo:B :A:n\nA\n\u2104jStop sat tr \u0016 finitdone:A:B :n\nA\ng = hi\nWe will asso\riate a value, or rank, with ea\rh message that might o\r\rur in\nthe restri\rted system, and aim to establish an invariant based on the message\nvalues: that only those with positive ranks \ran \rir\rulate in the restri\rted system.\nWe aim to de\fne a rank fun\rtion \u001a : MESSAGE [SIGNAL! Zwith properties\nthat enable us to do this.\nOur required result will follow if we \ran establish the following properties for\nthe rank fun\rtion:\n1. The atta\rker should not initially possess any messages of non-positive rank;\n2. If the atta\rker only possesses messages of positive rank, then any messages\nhe \ran generate should also be of positive rank;\n3. The signal initdone:A:B :n\nA\nhas non-positive rank;\n4. Any agent, when restri\rted on respgo:B :A:n\nA\n, does not introdu\re messages\nor signals of non-positive rank if it has not previously re\reived any su\rh\nmessages.\nThe \frst two \ronditions between them ensure that the atta\rker \rannot intro-\ndu\re any non-positive rank messages; and the fourth \rondition ensures that the\nproto\rol agents \rannot do this either. Together these \ronditions ensure that no\nmessage or signal of non-positive rank \ran o\r\rur in the restri\rted system. Sin\re\nthe third \rondition requires that the signal we are \ron\rerned about should have\nnon-positive rank, we \ran \ron\rlude that this signal indeed \rannot o\r\rur.\nThese \ronditions are formalised in the rank fun\rtion theorem, whi\rh is the\nheart of the approa\rh:\nTheorem 1. If \u001a : MESSAGE [ SIGNAL! Z is su\rh that:\n1. 8m 2 IK :\u001a(m) > 0\n2. 8S \u0012MESSAGE :(\u001a(S ) > 0 ^ S ` m)) \u001a(m) > 0\n3. \u001a(b) 6 0\n4. 8 i :(USER\ni\nj[ a \u2104jStop) sat \u001a(tr \u0016 re\r) > 0) \u001a(tr) > 0\nthen (\njjj\ni\nUSER\ni\n) j[ trans ; re\r \u2104jENEMY sat a pre\redes b.\nHere we have abused notation, and extended \u001a to apply not only to messages\nand signals, but also to events, tra\res, and sets:\n{ \u001a(\r:m) = \u001a(m)\n{ \u001a(tr) = minf\u001a(s) j s in trg\n{ \u001a(S ) = minf\u001a(s) j s 2 Sg\nThus, if we \ran \fnd a rank fun\rtion \u001a whi\rh meets the four \ronditions above,\nthen we will have established that the system as des\rribed meets the \rorrespond-\ning authenti\ration property expressed as a pre\redes b.\n3.1 Preserving rank\nThe \frst three \ronditions of the rank fun\rtion theorem \ran be \rhe\rked indepen-\ndently of any CSP proto\rol des\rription. However, the fourth \rondition requires\nveri\f\ration of CSP pro\resses against a spe\ri\f\ration. The bene\fts of using the\nInterleaving\n8 i :(P\ni\nsat maintains \u001a)\njjj\ni\nP\ni\nsat maintains \u001a\nExternal \rhoi\re\n8 i :(P\ni\nsat maintains \u001a)\n2\ni\nP\ni\nsat maintains \u001a\nPrefixing\nP sat maintains \u001a \u001a(e) > 0\ne ! P sat maintains \u001a\nStop\nStop sat maintains \u001a\nInput\n8 x :(\u001a(f (x )) > 0) P(x ) sat maintains \u001a)\nre\r:i?j ?f (x )! P(x ) sat maintains \u001a\nFig. 4. Composition rules for maintains \u001a\nCSP tra\res model is that a number of appli\ration-spe\ri\f\r rules \ran be identi-\n\fed, and applied in this parti\rular kind of veri\f\ration. We are interested in the\nproperty maintains \u001a:\nmaintains \u001a b= \u001a(tr \u0016 re\r) > 0) \u001a(tr) > 0\nFigure 4 identi\fes some \rompositional rules whi\rh are useful for establishing this\nproperty.\nThe last rule in this \fgure requires some explanation. It \ron\rerns input of\na message whi\rh mat\rhes a parti\rular pattern f (x ), with subsequent behaviour\nP(x ). If we \ran show that P(x ) sat maintains \u001a whenever the input has positive\nrank, then we \ran \ron\rlude that the inputting pro\ress re\r:i :j ?f (x )! P(x ) also\nmaintains positive rank. We are not \ron\rerned with P(x ) for whi\rh \u001a(f (x )) 6 0,\nsin\re in su\rh \rases the non-positive-rank message must have been introdu\red\nexternally to the pro\ress, and so we do not need to \ronsider whether P(x )\nmaintains positive rank.\n3.2 Verifying the modi\fed proto\rol\nWe aim to identify a rank fun\rtion whi\rh meets the four \ronditions of the rank\nfun\rtion theorem. In devising a rank fun\rtion it is helpful to \ronsider the sorts of\nmessages that \ran legitimately pass on the network. Furthermore, the nature of\nthe generates relation `, and the CSP proto\rol des\rriptions, impose \ronstraints\non any putative fun\rtion \u001a.\nFor the fourth \rondition, we are required to show, for an arbitrary user C ,\nthat:\nUSER\nC\nj[ respgo:B :A:n\nA\n\u2104jStop sat maintains \u001a\nWe have that:\nUSER\nC\nj[ respgo:B :A:n\nA\n\u2104jStop\n=\njjj\nn\n2\ni\n(INIT\nC\n(i ;n) j[ respgo:B :A:n\nA\n\u2104jStop)\njjj\njjj\nn\n(RESP\nC\n(n) j[ respgo:B :A:n\nA\n\u2104jStop)\nIn order to show that this \rombination satis\fes maintains \u001a, the inferen\re rules\nfor interleaving and \rhoi\re in Figure 4 mean that we have only to establish that\nea\rh \romponent separately maintains \u001a. In other words, for ea\rh C , i , and n,\nwe have to establish:\nINIT\nC\n(i ;n) j[ respgo:B :A:n\nA\n\u2104jStop sat maintains \u001a\nRESP\nC\n(n) j[ respgo:B :A:n\nA\n\u2104jStop sat maintains \u001a\nThere are a number of \rases to \ronsider:\nCase INIT\nC\n;C = A; i = B ; n = n\nA\nIn this \rase we have\nINIT\nA\n(B ;n\nA\n) j[ respgo:B :A:n\nA\n\u2104jStop =\ntrans :A:B :n\nA\n! re\r:A:B?fB :n\nA\n:yg\nK\nAB\n! trans :A:B :y ! initdone:A:B :n\nA\n! Stop\nWe know from \rondition 3 that initdone:A:B :n\nA\nmust have non-positive rank,\nsin\re this is the signal whose non-o\r\rurren\re we wish to establish. If we are to\napply the rules for pre\fxing to establish that this pro\ress satis\fes maintains \u001a,\nthen we require that the message input in step 2 of the proto\rol must have non-\npositive rank. This follows be\rause the behaviour following a positive rank input\nmust itself satisfy maintains \u001a|and this is not possible be\rause initdone:A:B :n\nA\n(ne\ressarily non-positive rank) is performed.\nThus we obtain a \ronstraint on the rank fun\rtion we are sear\rhing for to\nestablish \rorre\rtness: that any message of the form fB :n\nA\n:yg\nK\nAB\nmust have\nnon-positive rank.\nCase RESP\nB\nA se\rond \rase whi\rh is of interest is that of agent B as responder.\nIn this \rase we have that\nRESP\nB\n(y) j[ respgo:B :A:n\nA\n\u2104jStop =\nre\r:B?i?x !\n8\n<\n:\nrespgo:B :i :x ! trans :B :i :fB :x :yg\nK\nBi\n! re\r:B :i :y ! Stop if i 6= A or x 6= n\nA\nStop if i = A and x = n\nA\nThe parti\rular run with A and non\re n\nA\nis blo\rked, but all other runs are\nallowed.\nIf the input message x has positive rank, and the \frst bran\rh of the \rondition\nis followed, then we have that either i 6= A, or x 6= n\nA\n. In this \rase the trans-\nmitted message fB :x :yg\nK\nBi\nshould also have positive rank, sin\re this proto\rol\nrun should not introdu\re non-positive-rank messages.\n\u001a(i) = 1\n\u001a(n) = 1\n\u001a(k) =\n\u001a\n0 if k = k\nAB\n1 otherwise\n\u001a(m\n1\n:m\n2\n) = minf\u001a(m\n1\n):\u001a(m\n2\n)g\n\u001a(fmg\nk\n) =\n\u001a\n0 if m = B :n\nA\n:y and k = k\nAB\n\u001a(m) otherwise\n\u001a(sig) =\n\u001a\n0 if sig = initdone:A:B :n\nA\n1 otherwise\nFig. 5. A rank fun\rtion for authenti\ration\nA \randidate rank fun\rtion The \ronstraints arising from the two \rases above\ngive rise to the \frst attempt at a rank fun\rtion. This is given in Figure 5. In this\nrank fun\rtion, we give a rank of 0 to those messages and signals identi\fed above\nas requiring non-positive rank, and also the shared key K\nAB\n, whi\rh must remain\nout of the hands of the atta\rker to prevent him from \ronstru\rting messages that\nshould not \rir\rulate. Other atomi\rmessages (non\res, agent identities, other keys)\n\ran have rank 1. Other \rompound messages essentially have the ranks di\rtated\nby their \romponents: if a message's \rontent has rank 0, then any en\rryption or\n\ron\ratenation of that message will likewise have a rank of 0.\nIt is straightforward to \rhe\rk that \rondition 2 holds for this rank fun\rtion,\nand it is entirely reasonable to state that in the model the atta\rker does not\nstart with any message of rank 0, as required by \rondition 1.\nLastly, we are required to show that \rondition 4 holds for all other \rases.\nHowever, sin\re these \rases do not involve the important signals or proto\rol mes-\nsages their proofs are all straightforward:\n{ RESP\nA\n: only generates messages fA:x :ng\nK\nAi\n, whi\rh are of positive rank;\n{ INIT\nA\n(i ;n), where i 6= B or n 6= n\nA\n. In this \rase, the signal provided at the\nend of the run will have rank 1, so no message or signal of non-positive rank\nis produ\red;\n{ INIT\nB\n(i ;n): only produ\res messages and signals of positive rank;\n{ INIT\nC\n, RESP\nC\n(C 6= A;B): only produ\re messages and signals of positive\nrank.\nThus the rank fun\rtion is su\u00c6\rient to establish that the \rorre\rted proto\rol indeed\nprovides authenti\ration of B to A.\nIt is instru\rtive to see where this approa\rh fails on the original \rawed pro-\nto\rol. In that proto\rol there is no agent name in\rluded in the se\rond message.\nWhen \ronsidering the \rase INIT\nC\n;C = A; i = B ;n = n\nA\n, we will obtain the\nrequirement that fn\nA\n:yg\nK\nAB\nmust have non-positive rank for any y , sin\re it is\nthe input of su\rh a message that leads to the performan\re of the non-positive-\nrank signal initdone:A:B :n\nA\n1\n. However, \ronsideration of the \rase RESP\nA\n(n)\n\fnds that messages of the form fx :ng\nK\nAi\nare output, and so these will need to\nhave positive rank, for any x and i\n2\n. But now there is a \ron\ri\rt on the message\nfn\nA\n:ng\nK\nAB\n, whi\rh from the \frst \rase must have non-positive rank, but from the\nse\rond \rase must have positive rank. Hen\re there \ran be no rank fun\rtion for this\nversion of the proto\rol: the \ronstraints on any rank fun\rtion are \rontradi\rtory.\nThe \rontradi\rtion is avoided by introdu\ring the name of the agent generating\nthe message.\n4 Dis\russion\n4.1 Theorem-proving\nIn pra\rti\re, of \rourse, proto\rols tend to be more \rompli\rated than our running\nexample, in a variety of ways. For example: the messages used in the proto\rol\nmight be more \romplex, or simply mu\rh larger; there may be more messages\ninvolved in the proto\rol; the proto\rol \rould involve additional proto\rol agents,\nsu\rh as trusted third parties, or even entire groups of \rommuni\rating agents;\nmore \romplex \rombinations of \rryptographi\r me\rhanisms might be used. All\nof these possibilities make the CSP modelling of the proto\rol a more di\u00c6\rult\ntask, and the veri\f\ration of \randidate rank fun\rtions be\romes more intri\rate and\nerror-prone. Tool support is of great bene\ft in keeping tra\rk of the housekeeping\ninvolved in \ronsideration of numerous \rases, and in assisting in the \ronstru\rtion\nof rank fun\rtions.\nThe \ronstraints introdu\red by the rank fun\rtion theorem \ran generally be\nused to derive a \randidate rank fun\rtion. Firstly, every message in IK must have\npositive rank. Se\rondly, any message derivable from a set of positive rank mes-\nsages must also have positive rank. Thirdly, any output (message or signal) from\na proto\rol step whi\rh follows only positive rank inputs must also be of positive\nrank. These three \ronditions allow the identi\f\ration of a set S of messages and\nsignals whi\rh must have positive rank. However, the signal required in \rondi-\ntion 3 of the rank fun\rtion theorem is required to have non-positive rank. If that\nsignal is in the set S then no rank fun\rtion \ran exist. Otherwise the fun\rtion\n\u001a whi\rh gives a rank of 1 to all messages in S , and a rank of 0 to all other\nmessages, will be a suitable rank fun\rtion.\nThe RankAnalyser tool [HS00,Hea00,HS04\u2104 provides a way of \romputing this\nrank fun\rtion automati\rally for standard \rases (where the proto\rol uses publi\r-\nkey or shared-key \rryptography, non\res, agent names, and \ron\ratenation). The\n(in\fnite) message spa\re is partitioned to a \fnite set of equivalen\re \rlasses, and\nthe set of messages and signals of positive rank is obtained by repeatedly applying\nproto\rol steps and generates rules (on the equivalen\re \rlasses), starting from the\natta\rker's initial knowledge IK .\n1\nIn the proof of the \rorre\rt proto\rol, the \rorresponding requirement was that\nfB :n\nA\n:yg\nK\nAB\nmust have non-positive rank\n2\nPreviously, it was required that fA:x :ng\nK\nAB\nhad positive rank\nMore generally, the PVS theorem prover [OSR93\u2104 has also been used to sup-\nport rank fun\rtion proofs of proto\rol \rorre\rtness. Theorem provers su\rh as PVS\nare well-suited to keeping tra\rk of all the unavoidable detailed housekeeping in-\nvolved in the nuts and bolts of a proto\rol \rorre\rtness proof. The tra\res model for\nCSP has been embedded in PVS, together with mu\rh of the \ronsequent theory,\nin\rluding proof rules su\rh as those of Figure 4 and the rank fun\rtion theorem has\nbeen proved for this embedding [DS97\u2104. Spe\ri\f\r proto\rols \ran be modelled and\nveri\fed, for example the re\rursive authenti\ration proto\rol analysed in [BS97\u2104,\ndemonstrating that this approa\rh supports the full generality of an in\fnite mes-\nsage spa\re, and arbitrary numbers of runs and proto\rol agents. More re\rently\nthe CSP hierar\rhy of theories within PVS has been restru\rtured [Eva03,ES04\u2104 to\nmore easily allow extensions within the rank fun\rtion framework, su\rh as the in-\ntrodu\rtion of (dis\rrete) time [ES00\u2104, as well as \ronsideration of other properties\nsu\rh as non-repudiation [Eva03\u2104.\nThe rank fun\rtion approa\rh has also been extended in other ways. It is able to\nin\rorporate algebrai\r properties of the \rryptographi\r me\rhanisms into the anal-\nysis, provided they \ran be expressed appropriately within the model [S\rh02\u2104. For\nexample, if Vernam en\rryption (ex\rlusive-or) is used expli\ritly within a proto\rol,\nthen the algebrai\r properties of ex\rlusive-or should be taken into a\r\rount in the\nanalysis. This \ran be a\rhieved by giving the algebrai\r identities that en\rapsulate\nex\rlusive-or on the message spa\re, and \rhe\rking that whenever two messages are\nequivalent then they should have the same rank. This approa\rh is \rlearly limited\nsin\re only known algebrai\r properties \ran be in\rluded in the model. Nonetheless\ntheir in\rlusion allows the proto\rol analyser to reason about the properties whi\rh\na \rryptosystem must satisfy if the proto\rol is to be implemented \rorre\rtly.\nAnother extension \ron\rerns the veri\f\ration of se\rre\ry properties of proto\rols,\nparti\rularly in situations where keys \ran be leaked to an atta\rker without \rom-\npromising the se\rurity of past proto\rol runs. Su\rh keys are temporary se\rrets:\n\romponents of messages that are required to be unknown to the atta\rker at a\nparti\rular point of the proto\rol, but \ran be dis\rlosed later. The standard rank\nfun\rtion approa\rh \rannot handle temporary se\rrets, be\rause their rank should\nbe non-positive at the point they are used, but positive be\rause of the fa\rt that\nthe atta\rker learns them during the proto\rol run [DS04\u2104. Temporal rank fun\r-\ntions are a generalisation that take into a\r\rount the time at whi\rh a message \ran\n\frst be learned by the atta\rker, enabling a \fner way of analysing the relation-\nships between messages. Use of temporal rank fun\rtions requires a generalisation\nof the rank fun\rtion theorem, but they allow analysis of an additional \rlass of\nse\rre\ry properties not \rovered by the standard approa\rh.\n4.2 Model-\rhe\rking\nThe use of CSP to des\rribe and spe\rify proto\rols naturally enables the use of\nmodel-\rhe\rking for veri\f\ration, and there has been a signi\f\rant body of work\nusing FDR [For03\u2104 in this area whi\rh began a de\rade ago [Low95,Ros95,LR96\u2104.\nThe approa\rh \ronstru\rts a CSP des\rription of the proto\rol agents intera\rting\nover a Dolev-Yao style atta\rker as des\rribed earlier, and re\fnement-\rhe\rks it\nagainst authenti\ration and se\rre\ry properties expressed as CSP tra\re spe\ri\f\ra-\ntions in terms of the signal events whi\rh are inserted judi\riously into the proto\rol\nruns. If the re\fnement \rhe\rk fails then FDR produ\res a (minimal-length) \roun-\nterexample tra\re whi\rh \rorresponds to an atta\rk on the proto\rol: a sequen\re of\nmessages whi\rh lead to a failure of the authenti\ration or se\rre\ry property under\n\ronsideration.\nSin\re the \ronstru\rtion of the model of the proto\rol is routine from the\nmessage-passing proto\rol des\rription, Lowe has developed a tool, Casper [Low98\u2104,\nwhi\rh translates a high-level proto\rol des\rription into the \rorresponding CSP\nmodel, ready for FDR to analyse. The ease of use of this tool, together with\nthe speed of the FDR analysis, means that the model-\rhe\rking analysis should\ngenerally be the \frst to be \rarried out when \ronsidering a new proto\rol: simple\n\raws \ran be identi\fed and \rorre\rted qui\rkly, before too mu\rh e\u000bort is put into\n\rarrying out a rank fun\rtion proof.\nOf \rourse, any CSP model whi\rh \ran be \rompletely \rhe\rked by FDR must\nhave a \fnite number of states. This means that the number of proto\rol runs in the\nmodel, the number of agents, and the size of the message spa\re, must ne\ressarily\nbe \fnite. Re\fnement failures will always \rorrespond to atta\rks, but a su\r\ressful\nre\fnement \rhe\rk on a \fnite model does not guarantee \rorre\rtness in the presen\re\nof arbitrary \ron\rurrent runs|it may be that an atta\rk requires more possibilities\nthan have been in\rluded in the analysis. However, a \rolle\rtion of sophisti\rated\nte\rhniques have been developed for enabling more general \ron\rlusions to be\ndrawn from \fnite model-\rhe\rking. For example, Lowe [Low99\u2104 has presented,\nfor se\rre\ry spe\ri\f\rations, a list of \ronditions under whi\rh the \rorre\rtness of\njust a single run of a proto\rol is su\u00c6\rient to \ron\rlude the \rorre\rtness of an\nunbounded number of runs of the same proto\rol. Hui and Lowe have shown\nhow proto\rol messages in CSP models \ran be simpli\fed without losing atta\rks\n(fault-preserving transformations) [HL01\u2104, thus enabling \romplex proto\rols to be\nredu\red to a point where they \ran be analysed by FDR. Broadfoot and Ros\roe\nhave applied data independen\re te\rhniques [BR99,BR02\u2104 whi\rh allow results\nabout a \fnite number of runs to be lifted to arbitrary runs.\nAn extensive \roverage of the use of CSP for modelling proto\rols, and both\nthe model-\rhe\rking and the rank fun\rtion approa\rhes to proto\rol analysis, is\nprovided in [RSG\n+\n00\u2104.\n4.3 Related approa\rhes\nIn addition to the CSP approa\rhes dis\russed above, a wide variety of formal\nte\rhniques have been developed for proto\rol spe\ri\f\ration and analysis. These\nin\rlude approa\rhes based on graph theory, indu\rtion, multiset rewriting, type-\n\rhe\rking, and non-interferen\re. Here we give a \ravour of ea\rh.\nIn the strand spa\re approa\rh [THG99\u2104, a strand is a tra\re that represents\neither the exe\rution of a legitimate proto\rol parti\ripant (an `honest' strand) or\nthe a\rtion of an atta\rker (a `penetrator' strand). A strand spa\re is a \rolle\rtion\nof strands equipped with a graph stru\rture that represents both \ronse\rutive\noperations on the same strand (the behaviour of a single user) and the intera\rtion\nbetween strands (\rommuni\ration between users). Theorems have been developed\non strand spa\res whi\rh enable proofs that a proto\rol is \rorre\rt, and tool support\nfor the approa\rh has been provided by Athena [SBP01\u2104, a program that is part\nmodel-\rhe\rker and part theorem-prover. Some relationships have been identi\fed\n[Hea02\u2104 between the rank fun\rtions used to verify proto\rols, and the stru\rtures\n(ideals) used in the strand spa\res approa\rh, and there are some similarities in\nthe philosophies of the two approa\rhes.\nThe indu\rtive approa\rh [Pau98\u2104 uses the theorem-prover Isabelle\/HOL to\nsupport a theorem-proving approa\rh to proto\rol veri\f\ration. Proto\rols are \roded\ndire\rtly in terms of event tra\res and rules that parti\ripants apply to `re\reived'\nmessages in order to produ\re new messages. The possible a\rtions of a `Spy' are\nalso spe\ri\fed by rules. A theory \ron\rerning the possible tra\res of the overall\nsystem is developed and the proto\rol is veri\fed by establishing indu\rtively that\nno tra\re violating the spe\ri\f\ration \ran ever o\r\rur. A parti\rular a\rhievement of\nthis approa\rh is its use in the veri\f\ration of SET [Pau02\u2104, an ele\rtroni\r \rommer\re\nproto\rol whose des\rription runs to nearly 1000 pages.\nCervesato et al. [CDL\n+\n99a\u2104 have developed a way of spe\rifying proto\rols us-\ning \frst-order multiset rewriting. This has be\rome known as the MSR approa\rh.\nUsing MSR, proto\rols are spe\ri\fed by roles whi\rh represent the behaviour of\nproto\rol parti\ripants. Ea\rh role \ronstitutes a series of rewrite rules whi\rh rep-\nresent the a\rtions of that parti\rular user. The atta\rker, typi\rally in the style of\nDolev and Yao, is also de\fned via rewrite rules. Ea\rh rewrite rule that an at-\nta\rker \ran apply \rorresponds to a dedu\rtion of the form ` in the rank fun\rtion\napproa\rh. Re\rent work has sought to establish a \rorresponden\re between MSR\nand the strand spa\re [CDM\n+\n00\u2104 and pro\ress algebrai\r approa\rhes [BCLM03\u2104.\nAbadi and Gordon have proposed the spi-\ral\rulus [AG98\u2104 as an extension\nto the \u0019-\ral\rulus whi\rh in\rludes \rryptographi\r primitives. Proto\rols in the spi-\n\ral\rulus are modelled as pro\resses | but the similarity with CSP ends here. The\nfundamental di\u000beren\res between CSP and nominal \ral\ruli mean that, in the spi-\n\ral\rulus, \rommuni\ration of se\rrets between parties is a\rhieved via restri\rtion\nand s\rope extrusion, and the nature of testing equivalen\re removes the need for\nan expli\rit atta\rker pro\ress. However, proving \rorre\rtness via equivalen\re \ran\nbe di\u00c6\rult. Abadi [Aba97\u2104 and, more re\rently, Gordon and Je\u000brey [GJ01,GJ04\u2104\nhave therefore developed type-systems that enable authenti\ration properties |\nexpressed using signals | to be stati\rally \rhe\rked for a spi-\ral\rulus proto\rol\nmodel. The use of \rorresponden\re assertions (in the spirit of the initdone and\nrespgo events) suggests a similarity between this approa\rh and the rank fun\rtion\napproa\rh, and it is also interesting to \ronsider that the `trusted' and `untrusted'\nse\rre\ry types may be interpreted as non-positive and positive ranks, respe\rtively.\nThe \ron\rept of non-interferen\re has also formed the basis of proto\rol analysis\nte\rhniques. These approa\rhes generally impose a partition on proto\rol agents,\nwith a group of `high-level' privileged users distinguished from other `low-level'\nusers. Non-interferen\re is a\rhieved if the behaviour of a high-level user has no\ne\u000be\rt on what a low-level user \ran observe. For the purposes of proto\rol analysis\nthis \rorresponds to the inability of an atta\rker (a high-level user) to indu\re\nbad behaviour in the legitimate parti\ripants (the low-level users). A suite of\ntools have been developed that enable proto\rols to be reasoned about using\nnon-interferen\re. A high-level proto\rol des\rription \ran be translated into the\nnotation of the Se\rurity Pro\ress Algebra (SPA) using the CVS \rompiler [DFG00\u2104.\nThis SPA s\rript is then amenable for analysis using the CoSe\r tool [FG97\u2104 whi\rh\n\rhe\rks for the presen\re of non-interferen\re. Similarities between non-interferen\re\nand the \ron\rept of pro\ress equivalen\re in CSP have been established [RS00\u2104.\nThe above te\rhniques, along with the CSP-based approa\rhes, have mu\rh\nin \rommon, most notably their basi\r assumption about the \rapabilities of the\natta\rker. Indeed, in many \rases it will be feasible to reason about a proto\rol using\nany one of these methods, and the results obtained from ea\rh will be broadly\nsimilar. As alluded to above, there is a growing body of resear\rh whi\rh aims\nto demonstrate fundamental similarities between these di\u000berent approa\rhes. In\nthe end the \rhoi\re of whi\rh te\rhnique to use will be guided by the previous\nexperien\re of the proto\rol analyser. The advantage of applying CSP in this\ndomain lies in the simpli\rity of the notation and the transparen\ry with whi\rh\nproto\rols \ran be modelled. This transparen\ry is essential for a model to be shown\nas an appropriate abstra\rtion of a real proto\rol. Furthermore, the maturity of\nthe language ba\rks this up by allowing well-understood and powerful te\rhniques\nto be brought to bear on the problem of verifying whether a given proto\rol model\nmeets its intended goal.\nReferen\res\n[Aba97\u2104 M. Abadi. Se\rre\ry by typing in se\rurity proto\rols. In Pro\reedings of the\nThird International Symposium on Theorti\ral Aspe\rts on Computer Soft-\nware, number 1281 in Le\rture Notes in Computer S\rien\re, pages 611{638,\nSeptember 1997.\n[AG98\u2104 M. Abadi and A.D. Gordon. A \ral\rulus for \rryptographi\r proto\rols: the spi\n\ral\rulus. Information and Computation, 1998. also DEC Resear\rh Report\n149, 1998.\n[BCLM03\u2104 S. Bistarelli, I. Cervesato, G. Lenzini, and F. Martinelli. Relating pro\ress\nalgebras and multiset rewriting for se\rurity proto\rol analysis. In WITS\n'03: Workshop on Issues in the Theory of Se\rurity, 2003.\n[BR99\u2104 P.J. Broadfoot and A.W. Ros\roe. Proving se\rurity proto\rols with model\n\rhe\rkers by data independen\re te\rhniques. Journal of Computer Se\rurity,\n7(2\/3), 1999.\n[BR02\u2104 P.J. Broadfoot and A.W. Ros\roe. Capturing parallel atta\rks within the\ndata independen\re framework. In Pro\reedings of the 15th Computer Se\ru-\nrity Foundations Workshop. IEEE Computer So\riety Press, 2002.\n[BS97\u2104 J.W. Bryans and S.A. S\rhneider. CSP, PVS, and a re\rursive authenti\ration\nproto\rol. In DIMACS Workshop on Design and Formal Veri\f\ration of\nCrypto Proto\rols, 1997.\n[CDL\n+\n99a\u2104 I. Cervesato, N.A. Durgin, P. Lin\roln, J.C. Mit\rhell, and A. S\redrov. A\nmeta-notation for proto\rol analysis. In Pro\reedings of the 12th Computer\nSe\rurity Foundations Workshop. IEEE Computer So\riety Press, 1999.\n[CDL\n+\n99b\u2104 I. Cervesato, N.A. Durgin, P.D. Lin\roln, J.C. Mit\rhell, and A. S\redrov.\nA meta-notation for proto\rol analysis. In 12th IEEE Computer Se\rurity\nFoundations Workshop, 1999.\n[CDM\n+\n00\u2104 I. Cervesato, N. Durgin, J.C. Mit\rhell, P. Lin\roln, and A. S\redrov. Relating\nstrands and multiset rewriting for se\rurity proto\rol analysis. In Pro\reedings\nof The 13th Computer Se\rurity Foundations Workshop. IEEE Computer\nSo\riety Press, 2000.\n[DFG00\u2104 A. Durante, R. Fo\rardi, , and R. Gorrieri. A \rompiler for analyzing \rrypto-\ngraphi\r proto\rols using non-interferen\re. ACM Transa\rtions on Software\nEngineering and Methodology, 9(4), 2000.\n[DS97\u2104 B. Dutertre and S.A. S\rhneider. Embedding CSP in PVS: an appli\ration\nto authenti\ration proto\rols. In tpHOL, 1997.\n[DS04\u2104 R. Deli\rata and S.A. S\rhneider. Towards the rank fun\rtion veri\f\ration of\nproto\rols with temporary se\rrets. InWITS '04: Workshop on Issues in the\nTheory of Se\rurity, 2004.\n[DY83\u2104 D. Dolev and A.C. Yao. On the se\rurity of publi\r key proto\rols. IEEE\nTransa\rtions on Information Theory, 29(2), 1983.\n[ES00\u2104 N. Evans and S.A. S\rhneider. Analysing time dependent se\rurity properties\nin CSP using PVS. In ESORICS, volume 1895 of LNCS, 2000.\n[ES04\u2104 N. Evans and S.A. S\rhneider. Verifying se\rurity proto\rols with PVS:\nWidening the rank fun\rtion approa\rh. Journal of Logi\r and Algebrai\r Pro-\ngramming, in press\n[Eva03\u2104 N. Evans. Investigating Se\rurity Through proof. PhD thesis, Royal Hol-\nloway, University of London, 2003.\n[FG97\u2104 R. Fo\rardi, , and R. Gorrieri. The \rompositional se\rurity \rhe\rker: A tool for\nthe veri\f\ration of information \row se\rurity properties. IEEE Transa\rtions\non Software Engineering, 23(9), 1997.\n[For03\u2104 Formal Systems (Europe) Ltd. FDR2 user manual, 2003.\n[GJ01\u2104 A.D. Gordon and A. Je\u000brey. Authenti\rity by typing for se\rurity proto\rols.\nIn Pro\reedings of the 14th Computer Se\rurity Foundations Workshop. IEEE\nComputer So\riety Press, 2001.\n[GJ04\u2104 A.D. Gordon and A. Je\u000brey. Types and e\u000be\rts for asymmetri\r \rrypto-\ngraphi\r proto\rols. Journal of Computer Se\rurity, 12(3\/4), 2004. Also in\nPro\reedings of the 15th Computer Se\rurity Foundations Workshop. IEEE\nComputer So\riety Press, 2002.\n[Hea00\u2104 J.A. Heather. \\Oh! Is it really you?\"|Using rank fun\rtions to verify au-\nthenti\ration proto\rols. PhD thesis, Royal Holloway, University of London,\n2000.\n[Hea02\u2104 J.A. Heather. Strand spa\res and rank fun\rtions: More than distant \rousins.\nIn Pro\reedings of The 15th Computer Se\rurity Foundations Workshop.\nIEEE Computer So\riety Press, 2002.\n[HL01\u2104 M.L. Hui and G. Lowe. Fault-preserving simplifying transformations for\nse\rurity proto\rols. Journal of Computer Se\rurity, 9(1\/2), 2001.\n[Hoa85\u2104 C.A.R. Hoare. Communi\rating Sequential Pro\resses. Prenti\re-Hall, 1985.\n[HS00\u2104 J.A. Heather and S.A. S\rhneider. Towards automati\r veri\f\ration of au-\nthenti\ration proto\rols on unbounded networks. In Pro\reedings of the 13th\nComputer Se\rurity Foundations Workshop. IEEE Computer So\riety Press,\n2000.\n[HS04\u2104 J.A. Heather and S.A. S\rhneider. A de\rision pro\redure for the existen\re\nof a rank fun\rtion. Journal of Computer Se\rurity, in press\n[Low95\u2104 G. Lowe. An atta\rk on the Needham-S\rhroeder publi\r-key authenti\ration\nproto\rol. Information Pro\ressing Letters, 56,, 56, 1995.\n[Low97\u2104 G. Lowe. A hierar\rhy of authenti\ration spe\ri\f\rations. In Pro\reedings of the\n10th Computer Se\rurity Foundations Workshop. IEEE Computer So\riety\nPress, 1997.\n[Low98\u2104 G. Lowe. Casper: A \rompiler for the analysis of se\rurity proto\rols. Journal\nof Computer Se\rurity, 6(1\/2), 1998.\n[Low99\u2104 G. Lowe. Towards a \rompleteness result for model \rhe\rking of se\rurity\nproto\rols. Journal of Computer Se\rurity, 7(2\/3), 1999.\n[LR96\u2104 G. Lowe and A.W. Ros\roe. Using CSP to dete\rt errors in the TMN pro-\nto\rol. IEEE Transa\rtions on Software Engineering, 1996.\n[Mea92\u2104 C. Meadows. Applying formal methods to the analysis of a key management\nproto\rol. Journal of Computer Se\rurity, 1(1), 1992.\n[Mil95\u2104 J. Millen. The interrogator model. In IEEE Computer So\riety Symposium\non Resear\rh in Se\rurity and Priva\ry, 1995.\n[MVV96\u2104 A.J. Menezes, P.C. Van Oors\rhott, and S.A. Vanstone. Handbook of Applied\nCryptography. CRC Press, 1996.\n[NS78\u2104 R. Needham and M. S\rhroeder. Using en\rryption for authenti\ration in\nlarge networks of \romputers. Communi\rations of the ACM, 21(12), 1978.\n[OSR93\u2104 S. Owre, N. Shankar, and J. Rushby. The PVS spe\ri\f\ration language.\nTe\rhni\ral report, Computer S\rien\re Lab, SRI International, 1993.\n[Pau98\u2104 L.C. Paulson. The indu\rtive approa\rh to verifying \rryptographi\r proto\rols.\nJournal of Computer Se\rurity, 6(1\/2), 1998.\n[Pau02\u2104 L. Paulson. Verifying the SET proto\rol: Overview. In FASe\r 2002: Formal\nAspe\rts of Se\rurity, 2002.\n[PQ00\u2104 O. Pereira and J-J. Quisquater. On the perfe\rt en\rryption assumption. In\nWITS '00: Workshop on Issues in the Theory of Se\rurity, 2000.\n[Ros95\u2104 A.W. Ros\roe. Modeling and verifying key-ex\rhange proto\rols using CSP\nand FDR. In Pro\reedings of the 8th Computer Se\rurity Foundations Work-\nshop. IEEE Computer So\riety Press, 1995.\n[Ros97\u2104 A.W. Ros\roe. The Theory and Pra\rti\re of Con\rurren\ry. Prenti\re-Hall,\n1997.\n[RS00\u2104 P.Y.A. Ryan and S.A. S\rhneider. Pro\ress algebra and non-interferen\re.\nJournal of Computer Se\rurity, 9(1\/2), 2000. Also in Pro\reedings of the\n12th Computer Se\rurity Foundations Workshop. IEEE Computer So\riety\nPress, 1999.\n[RSG\n+\n00\u2104 P.Y.A. Ryan, S.A. S\rhneider, M.H. Goldsmith, G. Lowe, and A.W. Ros\roe.\nModelling and Analysis of Se\rurity Proto\rols. Addison-Wesley, 2000.\n[SBP01\u2104 D.X. Song, S. Berezin, and A. Perrig. Athena: A novel approa\rh to e\u00c6\rient\nautomati\r se\rurity proto\rol analysis. Journal of Computer Se\rurity, 9(1\/2),\n2001.\n[S\rh98\u2104 S.A. S\rhneider. Verifying authenti\ration proto\rols in CSP. IEEE Trans-\na\rtions on Software Engineering, 1998.\n[S\rh99\u2104 S.A. S\rhneider. Con\rurrent and Real-time Systems: the CSP Approa\rh.\nAddison-Wesley, 1999.\n[S\rh02\u2104 S.A. S\rhneider. Verifying se\rurity proto\rol implementations. In\nFMOODS'02: Formal Methods for Open Obje\rt-based Distributed Systems,\n2002.\n[THG99\u2104 F.J. Thayer F\u0013abrega, J.C. Herzog, and J.D. Guttman. Strand spa\res: prov-\ning se\rurity proto\rols \rorre\rt. Journal of Computer Se\rurity, 7(1), 1999.\n[WL93\u2104 T. Woo and S. Lam. A semanti\r model for authenti\ration proto\rols. In\nIEEE Computer So\riety Symposium on Resear\rh in Se\rurity and Priva\ry,\n1993.\n"}