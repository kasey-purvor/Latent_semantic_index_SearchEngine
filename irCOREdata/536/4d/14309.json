{"doi":"10.1080\/0968776970050306","coreId":"14309","oai":"oai:generic.eprints.org:251\/core5","identifiers":["oai:generic.eprints.org:251\/core5","10.1080\/0968776970050306"],"title":"Book reviews online","authors":["Barker, Philip"],"enrichments":{"references":[{"id":200317,"title":"BS-6154:1981 - Method of Defining Syntactic Meta-language,","authors":[],"date":"1981","doi":null,"raw":"BSI (1981), BS-6154:1981 - Method of Defining Syntactic Meta-language, Bracknell, Berks: British Standards Institution, Technical Standards Ltd.","cites":null},{"id":200318,"title":"CGI Programming on the World Wide Web,","authors":[],"date":"1996","doi":"10.1016\/s0898-1221(96)90221-7","raw":"Gundavaram, S. (1996), CGI Programming on the World Wide Web, Sebastopol CA, USA: O'Reilly.","cites":null},{"id":200316,"title":"Formally-based Tools and Techniques for Human-Computer Dialogues,","authors":[],"date":"1987","doi":"10.1016\/0920-5489(88)90027-x","raw":"Alexander, H. (1987), Formally-based Tools and Techniques for Human-Computer Dialogues, Chichester: Ellis Horwood.","cites":null},{"id":200319,"title":"Hypermedia Electronic Books, Draft PhD Thesis,","authors":[],"date":"1997","doi":null,"raw":"Tan, C.M. (1997), Hypermedia Electronic Books, Draft PhD Thesis, University of Teesside.","cites":null},{"id":200320,"title":"The Interactive Authoring and Display System (IADS)', downloaded from http:\/\/shodan.redstone.army.mil\/index.htm.","authors":[],"date":"1996","doi":null,"raw":"Templeton, R.S. (1996), 'The Interactive Authoring and Display System (IADS)', downloaded from http:\/\/shodan.redstone.army.mil\/index.htm.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1997","abstract":"As the number of new academic books published each year continues to rise, such that it becomes evermore difficult to keep abreast of them in one's discipline, the book\u2010review procedure takes on an increasing importance. This paper outlines the design and development of an automated system for handling book reviews. Descriptions are given of some prototypes that have been developed for use on an intranet server and\/or the Internet. These systems, based on SGML and HTML, are briefly discussed and compared","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/14309.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/251\/1\/ALT_J_Vol5_No3_1997_Book%20reviews%20online.pdf","pdfHashValue":"67628a57d5b3ebae29d0345b294fcf5bf9df3270","publisher":"University of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:251<\/identifier><datestamp>\n      2011-04-04T09:20:50Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/251\/<\/dc:relation><dc:title>\n        Book reviews online<\/dc:title><dc:creator>\n        Barker, Philip<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        As the number of new academic books published each year continues to rise, such that it becomes evermore difficult to keep abreast of them in one's discipline, the book\u2010review procedure takes on an increasing importance. This paper outlines the design and development of an automated system for handling book reviews. Descriptions are given of some prototypes that have been developed for use on an intranet server and\/or the Internet. These systems, based on SGML and HTML, are briefly discussed and compared.<\/dc:description><dc:publisher>\n        University of Wales Press<\/dc:publisher><dc:date>\n        1997<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        cc_by_nc_nd<\/dc:rights><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/251\/1\/ALT_J_Vol5_No3_1997_Book%20reviews%20online.pdf<\/dc:identifier><dc:identifier>\n          Barker, Philip  (1997) Book reviews online.  Association for Learning Technology Journal, 5 (3).  pp. 54-62.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776970050306<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/251\/","10.1080\/0968776970050306"],"year":1997,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"Book reviews online\nPhilip Barker1\nHuman-Computer Interaction Laboratory, University of Teesside\nAs the number of new academic books published each year continues to rise, such that it becomes ever-\nmore difficult to keep abreast of them in one's discipline, the book-review procedure takes on an\nincreasing importance. This paper outlines the design and development of an automated system for\nhandling book reviews. Descriptions are given of some prototypes that have been developed for use on an\nintranet server and\/or the Internet. These systems, based on SGML and HTML, are briefly discussed\nand compared\nIntroduction\nMany thousands of books are published each year, and even specialists find it difficult to\nkeep abreast of new books in their disciplines, learning technology being no exception -\nindeed, in our subject-area the situation is beginning to reach saturation point. The book-\nreview procedure facilitates selection: a good review will capture the essential content of a\nbook, and will comment on its quality, style, level of presentation, appropriateness, and\nperhaps value for money. Figure 1 shows the review process, its relationship to the\nproduction of books and learned journals, and the functional similarity between book\nreviews and abstracts of papers published in learned journals. Abstracts are often archived\nin online databases or on CD-ROM, in this way acting as an alerting and brief reference\nservice. Book reviews can be treated in the same way. This paper discusses the use of\nservers (Internet or intranet) as a means of making them available to a global population.\nIt also describes how such a facility could fit into a more general infrastructure for\nsoliciting potential reviewers and drawing their attention to publications available for\nreview.\nAnalysing book reviews\nIn order to describe a system and the relationships between its component parts, it is useful\nto employ some form of meta-language or meta-notation in which each of the components\nof the system is represented as a meta-variable (Alexander, 1987). The relationship between\nthe meta-variables that define the top-level moieties of the system is then expressed using a\nseries of meta-rules. The purpose of a meta-rule is to define a given meta-variable in terms\n54\nALT-J Volume 5 Number 3\nFigure I:The context of\nbook reviews\nI Observation I\nData and\nInformation\n1\nI Documentation |\nResearch\nPapers | Chapters [\n1\n| Learned Journals]\n| Abstracts V I\n| Publication Media |\nof more elementary units, or indeed the axiomatic entities of the system being described.\nSuppose, for example, one wished to describe the logical structure of a book using this\ntechnique. The first step would be to identify the book's building blocks. The second step\nwould involve formulating a series of meta-rules that specify the relationships between the\nbasic components identified. The structure of a text-book could thus be formulated in the\nfollowing way:\n<text-book> ::= <front-cover> <body> <back cover>\n<body> ::= <contents-pages> <chapters> <index-pages>\n<chapters> ::= ... <chapter>\n<chapter> ::= ... <page>\n<page> ::= ... <text-line>\n<text-line> ::= ... <word>\n<word> ::= object (X) : X isin dictionary (Y)\nIn this example, the meta-variables that identify the basic building blocks are each\ncontained within angle brackets (for example, <body>, <chapter>). Each line defines a\nmeta-rule, and within meta-rules various operators show how one meta-variable relates to\nothers. Three primitive operators have been used: the composite symbol ::= means 'is\ndefined to be'; the... operator means 'is a replication of one or more'; the: operator means\nss\nPhilip Barker . Book reviews online\n'such that'. Logical predicates are also used. A predicate takes a proposition about an object\nor relationship and determines its truth or falsity. In the book definition given above, two\npredicates have been used: 'object' and 'isin'. The 'object' predicate checks that a candidate\nobject, X, exists and that it is of the correct type (that is, a <word> object). The 'isin'\npredicate checks for membership of the instance X in the dictionary Y. If X is not found in\nthe dictionary, the rule fails and the object X is rejected as a valid instance of <word>. This\nmeta-notation is similar to that defined by the British Standards Institution (BSI, 1981).\nThe definition of <text-book> presented above is not complete: the meta-rule sequences that\ndefine the meta-variables <front-cover>, <back-cover>, <contents-pages> and <index-\npages> have been omitted. In a complete definition, these objects would need to be defined in\nterms of lower-level meta-variables or terminal (axiomatic) entities. But despite its\nincompleteness, the definition presented is sufficient to illustrate the basic principles involved.\nExpressed in plain English, the definition of <text-book> given above would read as follows:\nA text book is made up of a front cover, a back cover and an inside (or body). The body\nis made up of a collection of pages. The pages at the front of the book identify its\ncontents, those at the back make up the index, and those in the middle are organized\ninto a series of chapters. Each of the pages within a chapter is made up of a sequence of\nlines containing words. All the words used in any given line must exist within a\ndictionary whose name is Y.\nHow can this system be applied to the definition of a book review, which contains not only\nan assessment of the content and worth of a book, but also important items of\ninformation (attributes), such as the names of the author(s)\/editor(s), the publisher, the\nplace of publication, the series of which the book may form a part, its ISBN, its cost, the\nnumber of pages it contains, its format (hardback, paperback), and so on? The meta-\nnotation approach used for the definition of a text-book above can be used to express\nrelationships between these attributes, as follows:\n<book-review> ::= <book-detailsxkeywordsxreview-\nbodyxreviewer-details>\n<book-details> ::=<titlexauthor-listxpublisher-\ndetailsxother-details>\n<publisher-details> : := <publisherxplace-of-publication>\n<other-details> ::= <date><ISBNxbook-typexsize><cost>\n<book-type> ::= 'hardback' | 'softback'\n<keywords> ::= ... <keyword>\n<keyword> ::= isaword (X) & X isin dictionary (Y)\n<reviewer-body> ::= ... <paragraph>\n<paragraph> ::= ... <line>\n<line> ::= ... <word>\n<word> ::= isaword (X) & X isin dictionary (Z)\n<reviewer-details> ::= <reviewer-namexreviewer-affiliation>\n56\nALT-J Volume 5 Number 3\nThe process of specifying the structural units of a book review using a meta-notation paves\nthe way for tagging a document using a markup language such as SGML (Standard\nGeneralized Markup Language) or HTML (HyperText Markup Language). These\nmarkup tools form the basis for numerous online retrieval systems that can be made\navailable on servers.\nThe review process\nIn order to achieve the development of an automated system for handling book reviews, it\nis necessary to consider in more detail some of the ancillary processes relating to the review\nprocedure. A schematic representation of some of the more important supporting actors\nand processes involved in a reviewing operation, and their inter-relationships, is depicted in\nFigure 2.\nfigure 2: Principal actors and\nprocesses involved in book reviews\nPublisher\nConsumers I\n| Editors |\nSecondary\nAlerting\nServices Requests\n1\n| Publication | <- \u2022 | Review |\nMost journals have a person responsible for handling review material - the reviews editor -\nwho is usually chooses and acquires review copies of books. Sometimes these copies arrive\nunsolicited from publishers. More often, review editors have to ask to be supplied with\ncopies of books relevant to their journals. Review editors can build up a buffer stock of\nbooks for review, and reviewers have to be found for these and matched to appropriate\nbooks. This process can be initiated, for example, by listing titles available for review in the\nreviews section of the journal in question, or by sending out a printed supplement as an\ninsert to that journal. Alternatively, various electronic alerting mechanisms can be used,\nsuch as an email facility linked to a listserver. This is the case with ALT-J, where a database\nlist of the books received from publishers for review is built up and emailed to potential\n57\nPhilip Barker Book reviews online\nreviewers whose names are held in a listserver. People interested in reviewing books on the\nlist then reply (by email) using appropriate code words to identify the book(s) they want to\nreview. Invariably, many bids are emailed back, and a selection mechanism, based on the\njudgement of the reviews editor, is then used to allocate a title to a particular bidder.\nAnother electronic alerting\/awareness facility we have been exploring is based on the use of\nthe Web. A list of books available for review is maintained on a Web server which potential\nreviewers can access. Details of bidders and the books they select are automatically\nemailed back to the reviews editor. The user-interface also enables reviewers to make\nsuggestions about other books that should be included in the list, and to make offers to\nreview new books they are aware of. The main problem with this Web-based approach is\nthat someone has to be responsible for maintaining the online list of books for review. We\nare investigating ways of automating the process. One advantage of using the Web for\nelectronically processing book reviews is that the reviews can also subsequently be made\navailable online to all those interested.\nTowards an online review system\nIn order to explore the possibility of creating an online database of book reviews which\ncould be accessed via Web, we created three prototype systems, one developed using\nSGML, the other two using HTML. The structure for <book-review> (see above) formed\nthe foundation for each of the online implementations. It served as a basis for identifying\nsearch keys, stimulating thinking about system organization and screen layout; and\nspecifying the display styles to be employed. The other main purpose of the meta-linguistic\nrepresentation of <book-review> was as a means of identifying the various elements and\nentities that were subsequently to be used in the formulation of the SGML Document\nType Definition (DTD). For example, meta-variables such as <title>, <author>, <review-\nbody> and <paragraph> mapped directly across to corresponding SGML tags, namely\n<\/title>, <\/author>, and so on. The importance of the DTD lies in the fact that it forms\nthe underlying basis for consistency-checking when marked-up instances of <book-\nreview> are admitted into an electronic library-cataloguing system.\nDuring the initial stages of the project, three perspectives were identified as being\nimportant to the design process. First, that of system administrators who would need to set\nup and maintain an instance of the system at any given site. Second, that of book reviewers\nwho might use it to gain indirect access to material for review purposes. Third, that of\nreaders who would access the reviews. The ways in which these different perspectives\ninfluenced the system design and the functionality embedded in the user-interface are\ndiscussed below.\nBasic system design\nAs a result of surveying various potential users from each of the three categories identified\nabove, we found that typical users of the system would wish to be able to retrieve a review\nfrom the database, do a library search to see if a book of interest was available in a local\nlibrary, request a book either for purchase or using an inter-library loan service, see a list of\nbook titles waiting to be reviewed, and perform system-maintenance operations.\nObviously, the detailed system implementation instigated at any given site would depend\non the overall context in which a given instance of the system was to be used and the\n58\nALT-J Volume 5 Number 3\npopulation it was intended to serve. It was therefore imperative that the design and\nimplementation should lead to a flexible approach.\nOne of the most important design tasks was choosing the search mechanisms to be used for\nretrieving reviews. From a needs analysis, we found that typical users would most likely want\nto search for a review based on a specification of relevant keywords. In a review, these might\noccur in the title of the book, in the body of the review, or as part of its <keyword> section\nif one has been used (we do not use one for ALT-J, although we may do in future). In\naddition, some users suggested that retrieval by ISBN and\/or author(s) might also be useful.\nImplementation\nThree implementations of our online book-reviews system were undertaken, referred to\nhereasPl,P2andP3.\nPI was implemented using an integrated SGML development and display system called\nIADS (Interactive Authoring and Display System) produced by the Automated\nPublications Division of the Integrated Material Management Centre of the US Army\n(Templeton, 1996). The system consists of three facilities: (1) a visual interactive editing\nsystem for authoring SGML documents; (2) a style sheet for specifying the visual\nappearance of documents; (3) reading and navigation tools (hyperlinks). We used this\nsystem to create an electronic library of book reviews and, in so doing were able to assess\nthe merits of SGML for this type of application. Our findings are briefly discussed later in\nthis paper.\nP2 was created using HotMetal Pro (Version 2), a low-cost HTML editing system. It was\nimplemented on a notebook computer as a proof-of-principle experiment, the main\npurpose of the prototype being to explore the potential of HTML markup techniques for\nthis type of application. It was also used as a demonstrator to show potential users the\nkinds of facility a full implementation of the system would make available, and it provided\nthe opportunity to obtain some valuable feedback from users. The implementation used\nsimple HTML hyperlinking techniques in order to create a three-level menu-driven\nstructure. The top level contained an introductory page which gave basic instructions and\nlisted the search options available, and which embedded hotlinks to three second-level\npages that were responsible for handling retrieval by author, title and keyword. The\nhotlinks embedded in the second-level HTML modules pointed directly to entries at the\nthird level - the book reviews themselves (which were all marked up in HTML). This\nprototype had a number of inherent limitations (see below) and a third prototype, P3, was\ndeveloped in order to overcome them.\nP3 also used HTML but with more sophisticated techniques involving the use of the\nCommon Gateway Interface (CGI) standard (Gundavaram, 1996). The design approach\nunderlying the creation of this prototype was driven by the need to realize four basic\nobjectives: (1) to avoid any requirement for editorial users to have any knowledge of\nmarkup languages; (2) to provide an easy-to-use system; (3) to add a search engine; (4) to\nproduce a system that was easy to maintain. A series of CGI scripts and Perl (search-\nengine) programs were mounted on a Unix-based intranet server. The suite of programs\nhad to perform the following processing tasks: (1) extract a series of keywords entered (by\nthe user) by means of an online HTML form running on a client computer; (2) search a\ntextual database of book reviews (held on the server) for instances of the keywords (using\n_\nPhilip Barker Book reviews online\nAND or OR logic); (3) build a list of reviews containing the keywords entered as search\nterms; (4) deliver the list of candidate reviews to the client computer for perusal by the\nuser; (5) allow users to look at individual reviews in their hit-list.\nAs a result of the formative evaluation that was undertaken using prototype P2, a number\nof other facilities were identified as possible additional requirements for the P3 system.\nThese included the provision of an online help facility, making available mechanisms for\nsearching the University's online book catalogue (to check for the availability of books),\nand the provision of facilities to enable the electronic submission of inter-library loans and\nbook-purchasing. Each of the five primary functions mentioned above that users might\nwish to perform was represented by a iconic button embedded in the user-interface.\nVarious levels and types of help were available, depending on the type of user requesting it\n(editor, administrator, reviewer or reader) and his\/her level of experience. In order to\ncontrol the basic search process, users could enter a list of keywords into a text-entry box.\nThe interface controls also allowed users to set various search parameters (such as case\nsensitivity and search logic) by choosing options from pop-down selection boxes. Once all\nthe search values had been set, a submit button transmitted the query to the server for\nprocessing. The hit-list resulting from a search was subsequently shown in a dynamically\ncreated HTML page which acted as a menu providing access to the reviews associated with\nthe entries in the current hit-list. Because P3, like P2, was a prototype, its interface also\ncontained a feedback button, allowing users the option of sending back comments.\nThroughout this project we were conscious of the need for evaluation of what was being\ndeveloped. Different methods were employed in order to undertake both formative and\nsummative assessments of the P3 system including the ease-of-use, look and feel of the\nuser-interface, the responsiveness of the system, and users' attitudes and perceptions about\nthe potential utility of book reviews as an online information retrieval facility. The\nfeedback button generated some simple questions relating to ease of use, levels of\nsatisfaction with the search results and search time, and general usefulness of the system.\nThe responses were aggregated in order to produce a cumulative response file that could be\nused to create dynamic histograms representing the views of those users who chose to\nsubmit some feedback. Details of the evaluation have been documented in two student\ndissertations (Bouvier, 1997; Tan, 1997).\nDiscussion\nThe results obtained from the evaluation, and our own experience of all three prototypes,\nallowed us to see a number of their shortcomings.\nSGML is undoubtedly a very powerful markup facility, but in contrast to HTML, we did\nnot find it at all easy to use. Furthermore, we found that we could not transport the\n<book-review> DTD (associated with the IADS system) to other SGML browsers such as\nSoftQuad's Panorama Pro. We also experienced substantial difficulties during our attempts\nto set up the types of search facility we wanted to use.\nP2 was rejected because it was a very simple implementation that did not contain any\nsearch mechanism, and all reviews had to be retrieved by menu selection. It was also\nawkward to maintain, and would undoubtedly have become cumbersome to use when a\nsubstantial number of book reviews were made available.\n60\nAa-] Volume 5 Number 3\nThere were three main shortcomings associated with prototype P3. First, the book reviews\nheld in the online database were stored as plain text files, so lacked any attractive layout\nattributes. Second, the underlying search engine that was used to retrieve reviews had to\nsearch all the files sequentially in the database for occurrences of the keywords associated\nwith a query. We did not find this prohibitive in terms of search time, but with a very large\ndatabase it is an issue which we may need to address. Third, the system made extensive use\nof server-side processing involving a considerable number of data transfers between the\nserver and the clients it serviced: the response time to queries could be subject to delays\ncaused by other traffic on the network.\nAlthough the use of a proprietary database system (such as Oracle or dBase) might have\nbeen a way to proceed, we decided against the use of such packages, primarily because we\nwanted to generate implementations that were very easy to operate and install without\nbeing dependent on the availability of commercial software.\nFuture possibilities\nAs we gain more experience with our online book reviews system and expose it to a greater\nnumber of potential users, so we begin to perceive more ways in which it could be used. We\nalso begin to realize some of its current limitations, and foresee the need to review its\ndesign and implementation.\nIt is anticipated that as larger numbers of book reviews need to be handled, we may have to\nredesign the search engine. A related issue will be the provision of mechanisms to enable\nusers to handle large hit-lists. It is possible that this could be achieved by allowing users to\nspecify how many hits they want to see, and\/or by providing a range of selection\nalgorithms (from which users can choose) that can be used to determine membership of\nthe hit-list. For example, a user might wish to see only five reviews and that the hit-list\nshould be based (say) on selecting those reviews which have been most often referenced by\nother users.\nAn important overall future development of our system will be its integration into both the\nnew digital library infrastructure at Teesside, and our existing conventional library system.\nWith this in mind, we intend to make three ancillary support services available: (1)\nmechanisms to search online catalogues in order to assess the availability of books; (2)\nfacilities for the electronic submission of inter-library loans; and (3) methods to enable\nusers to submit electronic library-purchase orders.\nOther future development work we hope to undertake will include a re-assessment of the\npotential of SGML in environments other than that provided by IADS, and an\ninvestigation of the potential role of Java for the implementation of applets that will\nembed some of the system functionality described above.\nConclusion\nBecause of their importance as an information storage, dissemination and retrieval\nmechanism, it is all but unthinkable that books will become obsolete in the foreseeable\nfuture, even though, with the advent of low-cost electronic publishing mechanisms\n(particularly the Internet), it is likely that some changes in their form, appearance and\n61\nPhilip Barker Book reviews online\nproperties will take place (electronic books, for example, are now starting to become more\nwidely available). Given the richness of books as an information\/knowledge resource,\neffective mechanisms are needed in order to retrieve details of them. Although much more\nevaluation work remains to be undertaken, the initial studies outlined in this paper suggest\nthat an online book-reviews system could form an effective mechanism for handling book-\nbased material. It would of course also be feasible to apply the concept to other types of\npublication such as sound recordings, films, videos, and multimedia productions.\nNote\n1. Professor Philip Barker is ALT-J Reviews Editor.\nReferences\nAlexander, H. (1987), Formally-based Tools and Techniques for Human-Computer\nDialogues, Chichester: Ellis Horwood.\nBouvier, E. (1997), Book Reviews Online, Final-year BSc Computer Science Dissertation,\nUniversity of Teesside.\nBSI (1981), BS-6154:1981 - Method of Defining Syntactic Meta-language, Bracknell,\nBerks: British Standards Institution, Technical Standards Ltd.\nGundavaram, S. (1996), CGI Programming on the World Wide Web, Sebastopol CA, USA:\nO'Reilly.\nTan, C.M. (1997), Hypermedia Electronic Books, Draft PhD Thesis, University of Teesside.\nTempleton, R.S. (1996), 'The Interactive Authoring and Display System (IADS)',\ndownloaded from http:\/\/shodan.redstone.army.mil\/index.htm.\n62\n"}