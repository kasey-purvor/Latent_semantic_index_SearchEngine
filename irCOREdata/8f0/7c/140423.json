{"doi":"10.1243\/09544100JAERO565","coreId":"140423","oai":"oai:dspace.lib.cranfield.ac.uk:1826\/5792","identifiers":["oai:dspace.lib.cranfield.ac.uk:1826\/5792","10.1243\/09544100JAERO565"],"title":"A dynamic convergence control scheme for the solution of the radial equilibrium\nequation in through-flow analyses","authors":["Pachidis, Vassilios","Templalexis, I.","Pilidis, Pericles","Kotsiopoulos, P."],"enrichments":{"references":[{"id":37939373,"title":"A Comparison of Component Zooming Simulation Strategies Using Streamline Curvature\u201d,","authors":[],"date":"2007","doi":"10.1243\/09544100jaero147","raw":"Pachidis, V., Pilidis, P., Texeira, J., and Templalexis, I. A Comparison of Component Zooming Simulation Strategies Using Streamline Curvature\u201d, Proceedings of the IMechE, Journal of Aerospace Engineering, JAERO147, Vol. 221, Part G, p. 1, 2007.","cites":null},{"id":37939358,"title":"A General Through-Flow Theory Of ThreeDimensioanl Flow In Subsonic And Supersonic Turbomachines Of Axial-, Radial-, And Mixed-Flow Types, NASA TN2604,","authors":[],"date":"1952","doi":null,"raw":"Wu,  C.  H. A  General  Through-Flow Theory Of ThreeDimensioanl  Flow  In  Subsonic  And  Supersonic Turbomachines  Of  Axial-,  Radial-,  And  Mixed-Flow Types, NASA TN2604, 1952.","cites":null},{"id":37939359,"title":"A Streamline Curvature Computer Program For Axial Compressor Performance Prediction,","authors":[],"date":"1987","doi":null,"raw":"Barbosa,  J.  R.  A  Streamline  Curvature  Computer Program  For Axial  Compressor  Performance Prediction, Ph.D  Thesis,  Vol.  1,  Cranfield  Institute  of  Technology, School of Mechanical Engineering, 1987.","cites":null},{"id":37939362,"title":"A Streamline Curvature Through-Flow Computer Program for Analysing the Flow Through Axial-Flow Turbomachines, Aeronautical Research Council,","authors":[],"date":"1972","doi":null,"raw":"Frost,  D.  H.  A  Streamline  Curvature  Through-Flow Computer  Program  for  Analysing  the  Flow  Through Axial-Flow  Turbomachines,  Aeronautical  Research Council, R&M 3687, 1972.","cites":null},{"id":37939371,"title":"Advanced Engineering Mathematics, 6th Edition, New-York:","authors":[],"date":"1988","doi":"10.1126\/science.139.3560.1196-a","raw":"Kreyszig,  E.  Advanced  Engineering  Mathematics,  6th Edition, New-York: John Wiley & Sons, 1988.","cites":null},{"id":37939360,"title":"An Improved Streamline Curvature Approach for Off Design Analysis of Transonic Compression Systems, Ph.D Thesis,","authors":[],"date":"2001","doi":"10.1115\/1.1565085","raw":"Boyer,  K.  M.  An  Improved  Streamline  Curvature Approach  for  Off  Design  Analysis  of  Transonic Compression Systems, Ph.D Thesis, Virginia Polytechnic Institute and State University, 2001.","cites":null},{"id":37939375,"title":"An Iterative Method for Blade Profile Loss Model Adaptation Using Streamline Curvature, Transactions of the ASME,","authors":[],"date":"2007","doi":"10.1115\/gt2007-27402","raw":"Pachidis, V., Pilidis, P., Templalexis, I., and Marinai, L. An  Iterative  Method  for  Blade  Profile  Loss  Model Adaptation Using Streamline Curvature, Transactions of the ASME,  Journal  of  Engineering  for  Gas  Turbines  and Power,  GTP-07-1072,  Vol.130,  Iss.1,  December  2007. ASME Cycle Innovations Committee Best Paper Award for","cites":null},{"id":37939347,"title":"Analysis of Numerical Methods,","authors":[],"date":"1973","doi":"10.2307\/3614614","raw":"Isaacson,  E.  and  Keller,  H.  B. Analysis  of  Numerical Methods, New-York: Wiley, 1973.","cites":null},{"id":37939354,"title":"Applied Thermal Engineering,","authors":[],"date":"2005","doi":"10.1016\/s1359-4311(05)00257-7","raw":", Applied Thermal Engineering, 2005.","cites":null},{"id":37939343,"title":"Computational Methods of Linear Algebra,","authors":[],"date":null,"doi":"10.2307\/2003785","raw":"Faddeev,  D.  K.  and  Faddeeva,  V.  N.  Computational Methods  of  Linear  Algebra,  San  Francisco:  Freeman,","cites":null},{"id":37939366,"title":"Convergence and Accuracy of","authors":[],"date":null,"doi":"10.1017\/cbo9780511791253.009","raw":"Wilkinson, D. H. Stability, Convergence and Accuracy of","cites":null},{"id":37939367,"title":"Curvature Methods Using QuasiOrthogonals,","authors":[],"date":null,"doi":null,"raw":"-D  Streamline  Curvature  Methods  Using  QuasiOrthogonals,  Proc.  of  the  Institution  of  Mechanical Engineers, Vol. 184, 1969-70.","cites":null},{"id":37939357,"title":"Development of A 2D Compressor Streamline Curvature Code,","authors":[],"date":"2007","doi":"10.1115\/gt2006-90867","raw":"Templalexis, I., Pilidis, P., Pachidis, V. and Kotsiopoulos, P. Development of A 2D Compressor Streamline Curvature Code,  Transactions  of  the  ASME,  Journal  of Turbomachinery,  TURBO-06-1178,  Vol.  129,  Issue  4, October  2007.  ASME  Education  Committee  Best  Paper Award for 2006.","cites":null},{"id":37939350,"title":"Fundamentals of Computer Algorithms,","authors":[],"date":null,"doi":null,"raw":"Horowitz,  E. and Sahni,  S. Fundamentals of Computer Algorithms,  Rockville,  MD:  Computer  Science  Press,","cites":null},{"id":37939349,"title":"Introduction to Computability,","authors":[],"date":"1977","doi":null,"raw":"Hennie, F. Introduction to Computability, Reading, MA: Addison-Wesley, 1977.","cites":null},{"id":37939344,"title":"Introduction to Numerical Analysis, 2 nd Edition,","authors":[],"date":"1974","doi":null,"raw":"Hildebrand, F. B. Introduction to Numerical Analysis, 2 nd Edition, New-York: McGraw-Hill, 1974.","cites":null},{"id":37939346,"title":"Numerical Methods,","authors":[],"date":"1974","doi":"10.1137\/1.9780898717785","raw":"Dahlquist,  G.  and  Bj\u00f6rck,  A.  Numerical  Methods, Englewood Cliffs, NJ: Prentice-Hall, 1974.","cites":null},{"id":37939351,"title":"Numerical Solution of Partial Differential Equations, London:","authors":[],"date":"1974","doi":"10.1007\/978-94-010-2672-7","raw":"Smith,  G.  D.  Numerical  Solution  of Partial  Differential Equations, London: Oxford University Press, 1974.","cites":null},{"id":37939353,"title":"Optimal design of compact recuperators for microturbine application,","authors":[],"date":null,"doi":"10.1016\/j.applthermaleng.2005.01.015","raw":"Traverso,  A.  and  Massardo,  A.  F.  Optimal  design  of compact  recuperators  for  microturbine  application,","cites":null},{"id":37939376,"title":"Performance Of Two-Stage Fan Having Low-Aspect-Ratio, First Stage Rotor Blading,","authors":[],"date":null,"doi":null,"raw":"Urasek,  D.  C.,  Gorell,  W.  T.  and  Cunnan,  W.  S. Performance Of Two-Stage Fan Having Low-Aspect-Ratio, First Stage Rotor Blading, NASA Technical Paper 1493,","cites":null},{"id":37939372,"title":"Prediction of Engine Performance Under Compressor Inlet Flow Distortion Using Streamline Curvature,","authors":[],"date":"2007","doi":"10.1115\/gt2006-90806","raw":"Pachidis, V., Pilidis, P., Templalexis, I., Alexander, T. and Kotsiopoulos, P. Prediction of Engine Performance Under Compressor  Inlet  Flow  Distortion  Using  Streamline Curvature,  Transactions  of  the  ASME,  Journal  of Engineering  for  Gas Turbines and Power, GTP-05-1192, Vol. 129, p. 97, January 2007.","cites":null},{"id":37939364,"title":"Streamline Curvature Computing Procedures For Fluid-Flow Problems,","authors":[],"date":null,"doi":"10.1115\/1.3616716","raw":"Novak,  R.  A.  Streamline  Curvature  Computing Procedures For Fluid-Flow Problems, Transactions of the ASME, Journal of Engineering for Power, Vol. 89, p. 478-","cites":null},{"id":37939345,"title":"Survey of Numerical Analysis,","authors":[],"date":"1962","doi":"10.1017\/s0013091500014929","raw":"Todd,  J.  Survey  of  Numerical  Analysis,  New-York: McGraw-Hill, 1962.","cites":null},{"id":37939365,"title":"The Effect of Blade Lean on the Solution of the Radial Equilibrium Equation, GT2008-50259, ASME Turbo Expo, Power For Land, Sea and Air,","authors":[],"date":"2008","doi":"10.1115\/gt2008-50259","raw":"Templalexis,  I.,  Pachidis,  V.,  Pilidis,  P.,  and Kotsiopoulos, P.  The Effect of Blade Lean on the Solution of  the  Radial  Equilibrium  Equation,  GT2008-50259, ASME Turbo Expo, Power For Land, Sea and Air, Berlin, Germany, June 2008.","cites":null},{"id":37939352,"title":"The Numerical Treatment of Differential Equations, 3 rd Edition,","authors":[],"date":"1966","doi":"10.1007\/978-3-642-88434-4","raw":"Collatz,  L.  The  Numerical  Treatment  of  Differential Equations, 3 rd Edition, New York: Springer, 1966.","cites":null},{"id":37939363,"title":"The Quazi-ThreeDimensional Turbomachinery Blade Design System, Part I: Throughflow Analysis, Part II: Computerized System,","authors":[],"date":"1985","doi":"10.1115\/1.3239715","raw":"Jennions,  I.  K.  and  Stow,  P.  The  Quazi-ThreeDimensional Turbomachinery Blade Design System, Part I: Throughflow Analysis, Part II: Computerized  System, Transactions of the ASME, Journal of Engineering for Gas Turbines and Power Vol.  107, p. 308-16, 1985.","cites":null},{"id":37939356,"title":"The Radial Equilibrium Equation of Turbomachinery,","authors":[],"date":"1966","doi":"10.1115\/1.3678471","raw":"Smith,  L.  H.  The  Radial  Equilibrium  Equation  of Turbomachinery, Trans. A.S.M.E., Series A, Vol 88, 1966.","cites":null},{"id":37939370,"title":"The use of numerical methods for the investigation of the flow in water pump impellers,","authors":[],"date":null,"doi":"10.1243\/pime_proc_1966_181_063_02","raw":"Wood, M. D. and Marlow, A. V. The use of numerical methods for the investigation of the flow in water pump impellers, Proc. Institution of Mechanical Engineers, Vol.","cites":null},{"id":37939348,"title":"Theory and Problems of Numerical Analysis,","authors":[],"date":"1968","doi":null,"raw":"Scheid, F. Theory and Problems of Numerical Analysis, New York: McGraw-Hill, 1968.","cites":null},{"id":37939355,"title":"Thermoeconomic analysis of gas turbine based cycles,","authors":[],"date":"2000","doi":"10.1115\/99-gt-312","raw":"Massardo,  A.  F.  and  Scialo,  M.  Thermoeconomic analysis  of  gas  turbine  based  cycles,  Journal  of Engineering for Gas Turbines and Power, 2000.","cites":null},{"id":37939361,"title":"Through-flow Calculations For Transonic Axial Flow Turbines,","authors":[],"date":"1978","doi":"10.1115\/1.3446336","raw":"Denton, J. D. Through-flow Calculations For Transonic Axial Flow Turbines, Transactions of the ASME, Journal of Engineering for Power, Vol. 100, p. 212-18, 1978.","cites":null},{"id":37939374,"title":"Towards a Full Two Dimensional Gas Turbine Performance Simulation,","authors":[],"date":"2007","doi":"10.1115\/gt2007-27284","raw":"Pachidis, V., Pilidis, P., Marinai, L., and Templalexis, I. Towards a Full Two Dimensional Gas Turbine Performance Simulation, Proceedings  of the RASoc, The Aeronautical Journal, AJ-3127, June 2007.","cites":null},{"id":37939368,"title":"Use Of Arbitrary Quasi-Orthogonals for Calculating Flow Distribution in the Meridional Plane of a Turbomachine,","authors":[],"date":"1964","doi":"10.1115\/1.3678504","raw":"Katsanis,  T.  Use  Of  Arbitrary  Quasi-Orthogonals  for Calculating Flow Distribution in the Meridional Plane of a Turbomachine, NASA Technical Note D-2546, 1964.","cites":null},{"id":37939369,"title":"Use Of Arbitrary Quasi-Orthogonals for Calculating Flow Distribution on a Blade-To-Blade Surface in a Turbomachine,","authors":[],"date":null,"doi":"10.1115\/1.3678504","raw":"Katsanis,  T.  Use  Of  Arbitrary  Quasi-Orthogonals  for Calculating  Flow  Distribution  on  a  Blade-To-Blade Surface  in  a  Turbomachine,  NASA  Technical  Note  D-","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2010-01-31T00:00:00Z","abstract":"One of the most frequently encountered numerical problems in scientific analyses\nis the solution of non-linear equations. Often the analysis of complex phenomena\nfalls beyond the range of applicability of the numerical methods available in\nthe public domain, and demands the design of dedicated algorithms that will\napproximate, to a specified precision, the mathematical solution of specific\nproblems. These algorithms can be developed from scratch or through the\namalgamation of existing techniques. The accurate solution of the full radial\nequilibrium equation (REE) in streamline curvature (SLC) through-flow analyses\npresents such a case. This article discusses the development, validation, and\napplication of an 'intelligent' dynamic convergence control (DCC) algorithm for\nthe fast, accurate, and robust numerical solution of the non-linear equations of\nmotion for two-dimensional flow fields. The algorithm was developed to eliminate\nthe large extent of user intervention, usually required by standard numerical\nmethods. The DCC algorithm was integrated into a turbomachinery design and\nperformance simulation software tool and was tested rigorously, particularly at\ncompressor operating regimes traditionally exhibiting convergence difficulties\n(i.e. far off-design conditions). Typical error histories and comparisons of\nsimulated results against experimental are presented in this article for a\nparticular case study. For all case studies examined, it was found that the\nalgorithm could successfully 'guide' the solution down to the specified error\ntolerance, at the expense of a slightly slower iteration process (compared to a\nconventional Newton-Raphson scheme). This hybrid DCC algorithm can also find use\nin many other engineering and scientific applications that require the robust\nsolution of mathematical problems by numerical instead of analytical means","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/140423.pdf","fullTextIdentifier":"http:\/\/dx.doi.org\/10.1243\/09544100JAERO565","pdfHashValue":"7c0c58fec08e2d4b6e1e1203dda27c50ec4159b8","publisher":"Professional Engineering Publishing","rawRecordXml":"<record><header><identifier>\noai:dspace.lib.cranfield.ac.uk:1826\/5792<\/identifier><datestamp>2012-07-31T15:42:19Z<\/datestamp><setSpec>hdl_1826_19<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>A dynamic convergence control scheme for the solution of the radial equilibrium\nequation in through-flow analyses<\/dc:title><dc:creator>Pachidis, Vassilios<\/dc:creator><dc:creator>Templalexis, I.<\/dc:creator><dc:creator>Pilidis, Pericles<\/dc:creator><dc:creator>Kotsiopoulos, P.<\/dc:creator><dc:subject>numerical analysis dynamic convergence control streamline curvature radial\nequilibrium equation streamline curvature<\/dc:subject><dc:description>One of the most frequently encountered numerical problems in scientific analyses\nis the solution of non-linear equations. Often the analysis of complex phenomena\nfalls beyond the range of applicability of the numerical methods available in\nthe public domain, and demands the design of dedicated algorithms that will\napproximate, to a specified precision, the mathematical solution of specific\nproblems. These algorithms can be developed from scratch or through the\namalgamation of existing techniques. The accurate solution of the full radial\nequilibrium equation (REE) in streamline curvature (SLC) through-flow analyses\npresents such a case. This article discusses the development, validation, and\napplication of an 'intelligent' dynamic convergence control (DCC) algorithm for\nthe fast, accurate, and robust numerical solution of the non-linear equations of\nmotion for two-dimensional flow fields. The algorithm was developed to eliminate\nthe large extent of user intervention, usually required by standard numerical\nmethods. The DCC algorithm was integrated into a turbomachinery design and\nperformance simulation software tool and was tested rigorously, particularly at\ncompressor operating regimes traditionally exhibiting convergence difficulties\n(i.e. far off-design conditions). Typical error histories and comparisons of\nsimulated results against experimental are presented in this article for a\nparticular case study. For all case studies examined, it was found that the\nalgorithm could successfully 'guide' the solution down to the specified error\ntolerance, at the expense of a slightly slower iteration process (compared to a\nconventional Newton-Raphson scheme). This hybrid DCC algorithm can also find use\nin many other engineering and scientific applications that require the robust\nsolution of mathematical problems by numerical instead of analytical means.<\/dc:description><dc:publisher>Professional Engineering Publishing<\/dc:publisher><dc:date>2012-07-10T23:01:05Z<\/dc:date><dc:date>2012-07-10T23:01:05Z<\/dc:date><dc:date>2010-01-31T00:00:00Z<\/dc:date><dc:type>Article<\/dc:type><dc:identifier>V Pachidis, I Templalexis, P Pilidis, and P Kotsiopoulos. A dynamic convergence control scheme for the solution of the radial equilibrium\nequation in through-flow analyses. Proceedings of the Institution of Mechanical Engineers, Part G: Journal of Aerospace Engineering, July 1, 2010, Volume 224, Number 7, Pages 803-815<\/dc:identifier><dc:identifier>0954-4100<\/dc:identifier><dc:identifier>http:\/\/dx.doi.org\/10.1243\/09544100JAERO565<\/dc:identifier><dc:identifier>http:\/\/dspace.lib.cranfield.ac.uk\/handle\/1826\/5792<\/dc:identifier><dc:language>en_UK<\/dc:language><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["0954-4100","issn:0954-4100"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2010,"topics":["numerical analysis dynamic convergence control streamline curvature radial\nequilibrium equation streamline curvature"],"subject":["Article"],"fullText":"   \n1 \n \nA dynamic convergence control scheme for the solution of the radial \nequilibrium equation in through-flow analyses \nV Pachidis1*, I Templalexis2, P Pilidis1, and P Kotsiopoulos2 \n1Cranfield University, School of Engineering, Department of Power and Propulsion, Gas Turbine Engineering   \nGroup, Cranfield, Bedfordshire, MK43 0AL, England \n2Hellenic Air Force Academy, Section of Thermodynamics, Power and Propulsion Systems, Hellenic Air Force, \nDekeleia Air Base, Greece \n \n \n \n \n \n \nAbstract: One of the most frequently encountered numerical problems in scientific analyses is the solution of non-\nlinear equations. Often the analysis of complex phenomena falls beyond the range of applicability of the numerical \nmethods available in the public domain, and demands the design of dedicated algorithms that will approximate, to \na specified precision, the mathematical solution of specific problems. These algorithms can be developed from \nscratch or through the amalgamation of existing techniques. The accurate solution of the full Radial Equilibrium \nEquation (REE) in Streamline Curvature (SLC) through-flow analyses presents such a case. This manuscript \ndiscusses the development, validation and application of an \u2018intelligent\u2019 Dynamic Convergence Control (DCC) \nalgorithm for the fast, accurate and robust numerical solution of the non-linear equations of motion for two-\ndimensional flow fields. The algorithm was developed to eliminate the large user intervention, usually required by \nstandard numerical methods. The DCC algorithm was integrated into a turbomachinery design and performance \nsimulation software tool and was tested rigorously, particularly at compressor operating regimes traditionally \nexhibiting convergence difficulties (i.e. far off-design conditions). Typical error histories and comparisons of \nsimulated results against experimental are presented in this manuscript for a particular case-study. For all case-\nstudies examined, it was found that the algorithm could successfully \u2018guide\u2019 the solution down to the specified \nerror tolerance, at the expense of a slightly slower iteration process (compared to a conventional Newton-Raphson \nscheme). This hybrid DCC algorithm can also find use in many other engineering and scientific applications that \nrequire the robust solution of mathematical problems by numerical, instead of analytical means. \n \nKeywords: Numerical Analysis, Dynamic Convergence Control, Streamline Curvature, Radial Equilibrium \nEquation  \n \n \n \n \n \n \n \n1   INTRODUCTION \n \nNumerical methods are usually based on calculating an \napproximation to the true value of a root of the equation \n\uf028 \uf029 0\uf03dxf  and then successively refining this approximation \nuntil further refining would achieve no useful purpose [1]. \nAlso included in this type of problem is the determination of \nthe points of intersection of two curves.  \n------------------------------------------------------------------------------------------------ \n* Corresponding author: Dep. Director of the Cranfield Rolls-Royce UTC in \nPerformance Engineering, Department of Power and Propulsion, Gas Turbine \nEngineering Group, Cranfield, Bedfordshire MK43 0AL, UK. email: \nv.pachidis@cranfield.ac.uk  \nIf the curves are represented by functions \uf028 \uf029xf  and \uf028 \uf029xg  \nrespectively, the intersection points correspond to the roots of \nthe function \uf028 \uf029 \uf028 \uf029 \uf028 \uf029xgxfxF \uf02d\uf03d . The vast majority of the \nroot-solving techniques available today is of this iterative \nnature. An initial guess for the root is specified, or an interval \nthat is known to contain a root, and the various numerical \nschemes will return an improved guess or a more limited \ninterval. The same procedure is then repeated using the new \nvalues until a root of desired accuracy is obtained or until the \nmethod encounters difficulties and fails. Although some of the \nschemes are guaranteed to find a root eventually, they may take \nconsiderable computer time to arrive at the answer. On the \n   \n2 \nother hand, faster schemes may be able to converge to a root \nquicker, but tend to be susceptible to problems of divergence \n[2].  \nThe physical characteristics of the computational platform \nused, as well as the nature itself of the problem being solved, \ncan impose major limitations on the numerical scheme \napplied, and ultimately determine its success or failure. The \neffects of these constraints need to be both predictable and \ncontrollable. An excellent introduction to the theory of \nnumerical analysis is given in references [3, 4]. References [5-\n7] cover the detailed aspects of more involved computational \ntechniques, their range of applicability and their limitations. \nThe practical application of numerical analyses by means of \ncomputer algorithms is covered well in [8-10]. To facilitate the \nsolution of specific mathematical problems, e.g. the solution of \nthe full REE in through-flow analyses, computer algorithms \nsuch as those described in [11-15] for numerical integration, or \nthe solution of partial differential equations, can provide useful \ninspiration for the development of more advanced, hybrid \ncomputational techniques. \n \n \n1.1   Solution of the REE in Through-Flow Analyses  \n \nThe SLC through-flow method basically considers the \nflow within the compressor as axi-symmetric, compressible \nand inviscid. It solves the discrete equations of continuity, \nmotion, energy and state in a form that incorporates the full \nthree-dimensional compressor geometry and on a \ncomputational grid which is constructed in the meridional \nplane. After the transformation of the discrete equations and \nthe solution of a system of equations, the result is a non-linear \npartial differential equation known as the REE [16]. This \nequation represents the gradient of the meridional velocity in \nthe span-wise direction and needs to be solved by a finite \ndifference approximation via an iterative approach.  \nEquation 1 represents the most general form of the REE \n[17] for the case of axi-symmetric inviscid flow, and can be \nused to describe the flow both into and out of stator and rotor \nblade rows with minor alterations (i.e. for stators relative \nvelocity terms are replaced by the absolute velocity terms, the \nrelative angle \u03b2 is replaced by the absolute angle \u03b1 and the \nrotational speed is set to zero). \n \n\uf028 \uf029 \uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf0f7\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02d\uf02d\n\uf02b\uf02d\uf02b\n\uf02b\uf02d\uf02d\n\uf02b\n\uf02b\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf02b\n\uf02b\n\uf02b\n\uf02b\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02b\n\uf02b\uf02d\uf02d\n\uf02d\n\uf02d\n\uf02d\n\uf02d\n\uf02b\n\uf02d\n\uf02d\n\uf02d\uf02b\uf02d\n\uf03d\n\uf062\uf062\uf06c\n\uf062\uf067\uf065\n\uf067\uf077\n\uf06c\uf065\uf077\n\uf06c\n\uf067\uf065\n\uf067\uf065\n\uf072\n\uf072\n\uf067\uf065\uf065\n\uf067\uf065\n\uf067\uf065\uf065\n\uf065\n\uf067\uf065\uf067\uf065\ncossintan\ncossin\ncos2\ntansin2\n1tan\ncos\nsin1\nsinsin\ncos\nsin\ntansin\n2\n2\ndm\ndST\nds\ndST\nds\ndI\nW\nds\nrWd\nr\nW\nrdm\nrWd\nV\nr\ndm\nd\nr\nds\nd\ndm\nd\nV\nds\ndVV\nw\nww\nw\nm\nc\nm\nm\nm\n                         (1)              \n \nEquation 1 is a second order differential equation that can be \nbroken down into the following terms: \n \n\uf028 \uf029 \uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029\n\uf028 \uf029 \uf028 \uf029 \uf0f7\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02b\uf02d\uf02d\n\uf02d\n\uf02d\n\uf02b\n\uf02d\n\uf02d\n\uf02d\uf02b\uf02d\n\uf03d\ncrdm\nd\nrds\nd\ndm\nd\nA\n\uf067\uf065\n\uf067\uf065\n\uf072\n\uf072\n\uf067\uf065\uf065\n\uf067\uf065\n\uf067\uf065\uf065\n\uf065\n\uf067\uf065\uf067\uf065\ncossin1\nsinsin\ncos\nsin\ntansin\n              (2) \n \n\uf028 \uf029\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e8\n\uf0e6 \uf02b\uf03d \uf06c\uf065\uf077\uf06c tansin21tan\nrdm\nrWdB w               (3) \n \n\uf028 \uf029\n\uf028 \uf029\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf0f7\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02d\uf02d\n\uf02b\uf02d\uf02b\n\uf02b\uf02d\uf02d\n\uf03d\n\uf062\uf062\uf06c\n\uf062\uf067\uf065\n\uf067\uf077\ncossintan\ncossin\ncos2\n2\ndm\ndST\nds\ndST\nds\ndI\nW\nds\nrWd\nr\nW\nC\nw\nww\n               (4) \n \nSubstituting, Equation 1 can be reduced to: \n \nCBVAV\nds\ndVV mmmm \uf02b\uf02b\uf03d\n2                 (5) \n \n \n \n \n \n \n   \n3 \nIn this case the solution of the equation has as follows: \n \n\uf028 \uf029\ncs\nBAC\nBAV\nBACA\nB\nA\nCBVAV\nm\nmm\n\uf02b\uf03d\uf0f7\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02b\n\uf02d\n\uf02d\n\uf02d\n\uf02b\uf02b\n\uf02d\n2\n1\n2\n2\n4\n2tan\n4\n2\nln\n             (6) \n \nThe constant of integration c can be calculated by applying \nequation 6 for two consecutive stream-lines as below:  \n \njj\njm\njm\njmjm\njmjm\nss\nBAC\nBAV\nBAC\nBAV\nBACA\nB\nCBVAV\nCBVAV\nA\n\uf02d\uf03d\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf0f7\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02b\n\uf02d\n\uf02d\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf0f7\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\uf0e7\n\uf0e8\n\uf0e6\n\uf02d\n\uf02b\n\uf02d\n\uf02d\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf0f7\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e7\n\uf0e8\n\uf0e6\n\uf02b\uf02b\n\uf02b\uf02b\n\uf02b\n\uf02d\n\uf02b\uf02d\n\uf02b\uf02b\n12\n.1\n2\n1.1\n2\n,\n2\n,\n1,\n2\n1,\n4\n2\ntan\n4\n2\ntan\n4\nln\n2\n1\n             (7) \n \nThe terms A, B and C contain, apart from certain flow \nparameters, derivatives along the s  and m  directions. In order \nto specify an initial value for the derivative terms, a flow \npattern including all the related parameters has to be assumed \nthroughout the compressor. Moreover, the derivatives along the \ns  direction at certain streamline locations can only be updated \nonce the meridional velocity profile is obtained at the \ncorresponding plane (this can be the leading or the trailing \nedge of a blade). On the other hand, in order for the \nmeridional derivatives to be updated, the meridional velocity \nprofile of the entire compressor needs to be determined first.  \nIn order to start the iteration, computation nodes can be \ndefined for example at the intersections of the streamlines and \nthe blade edges. Obviously, at the beginning, node coordinates \nare unknown since the streamline positions have not been \ndetermined yet. A certain radial position for the streamlines is \nassumed throughout the compressor\u2019s effective flow area, as \nwell as a certain meridional velocity distribution. Then, a \nmeridional velocity profile is defined along every compressor \nblade leading and trailing edge, such as to satisfy both the REE \nand the mass flow continuity. In order to achieve this double \nconvergence, a meridional velocity profile is determined first, \nbased on an arbitrary value of meridional velocity at a certain \ncompressor height and then it is successively recalculated until \nall the streamtube mass flows are satisfied. The REE basically \nreflects the equation of the pressure forces to the inertial \nforces. Stream-tubes that contain a fixed amount of mass, as \nthey are confined between two streamlines, are successively \nrefined regarding their radial position in order for the REE to \nbe satisfied.  \nThe overall solution process is obviously not a straight \nforward one and is largely based on a trial and error approach, \ninvolving usually a large number of iterative loops, both nested \nand crossing over. The whole iterative scheme is by default \nvery complicated and potentially troublesome, especially as far \nas specifying initial conditions and maintaining a stable and \nrobust convergence is concerned. \nDuring the forty years approximately of the existence of \nthe SLC method, numerous authors have proposed several \nvariations of the SLC calculation scheme [18-24]. All these \ndifferent schemes were mainly influenced by the type of the \nturbomachine the method was applied to (radial or axial), the \nnature of the flow being considered (subsonic or supersonic) \nand the level up to which the flow viscosity and \ncircumferential in-homogeneities were taken into account. In \nmany cases, the various calculation schemes were also \ninfluenced by the particular characteristics of the cascade, such \nas hub to tip ratio, or lean and sweep angle distributions [25]. \nNevertheless, in all these publications very little is usually \nmentioned as to the actual numerical scheme or algorithm \nbeing used to facilitate convergence. Perhaps, some more \nuseful information can be obtained from [26-29], but again not \nsufficient in its own merit for a wider application in a more \ngeneric context. \nThe authors of this manuscript have included the next two \nsections (Section 1.2 and Section 1.3) in order to capture in a \nsynopsis the reasons behind this work and make this document \neasier to follow.  \n \n \n1.2   Newton\u2019s Method - Background and Overview \n \nNewton\u2019s (or the Newton-Raphson) method can usually be \nrelied upon to find a solution quickly and accurately [30]. It is \nused routinely in the solution of complex engineering and \nscientific problems, as well as in through-flow calculations. In \nits pure form, it derives from the Taylor series for the \nfunction \uf028 \uf029xf . \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029 \uf028 \uf029 ...\n!2\n1 2\n02\n2\n00\n00\n\uf02b\uf02d\uf02b\uf02d\uf02b\uf03d\n\uf03d\uf03d\nxx\ndx\nfdxx\ndx\ndfxfxf\nxxxx\n             (8) \nIf 0xx \uf02d  is small enough, only a few terms in the above \nseries need to be retained. To find a root of the function, an x  \nneeds to be identified such that \uf028 \uf029 0\uf03dxf  or : \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029 \uf028 \uf029 ...\n!2\n10 202\n2\n00\n00\n\uf02b\uf02d\uf02b\uf02d\uf02b\uf03d\uf03d xx\ndx\nfdxx\ndx\ndfxfxf\nxx\n             (9) \nIf it is assumed that the desired root x  is near the value 0x , \nthen: \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf02900\n0\n0 xx\ndx\ndfxfxf\nx\n\uf02d\uf02b\uf040\uf03d              (10) \nIf x  is not near 0x  this may not even be approximately true. \nIn the last equation everything except x  (the root) is known \nand so we can solve for x  considering that dxdff \/\uf03d\uf0a2 . The \nlast equation then becomes: \n   \n4 \n\uf028 \uf029\n\uf028 \uf0290\n0\n0 xf\nxfxx\n\uf0a2\n\uf02d\uf03d               (11) \nIf 0xx \uf02d  is indeed small, then the last equation will be a good \nestimate of the actual root of the function. But if 0xx \uf02d  is not \nsmall, then the solution will lie far from the actual root of the \nfunction. Replacing the function \uf028 \uf029xf  by the first two terms in \nits Taylor series approximates the function by a straight line \nthrough the point ( 0x , \uf028 \uf0290xf ), which has the same slope as \nthe tangent to the curve at that point (Fig. 1). Then setting this \napproximation to \uf028 \uf029xf  = 0, gives the point where the line \nintersects the axis. Although the value generated is closer to \nthe actual root than was the starting point 0x , this procedure \nwill not in general give the actual root of \uf028 \uf029xf  in one \niteration. Newton\u2019s method simply consists of repeating this \nprocess. That is, starting from an initial guess for the root of \n\uf028 \uf029xf , say 0x , calculate an improved guess 1x , and then use \nthe improved value 1x  for the root in the next cycle to \ncalculate a new improvement on the root. \n \n \nFig. 1 The Newton-Raphson iteration scheme \n \n \n1.3   Newton\u2019s Method - Limitations \n \nNewton\u2019s method attempts to find a root of a function \n\uf028 \uf029xf  by repeatedly approximating the function by straight \nlines. Compared to other numerical schemes, this method \nincorporates a lot of information about the behaviour of the \nfunction into the root-solving algorithm. Specifically, the \nmethod monitors at each step not only the value of the function \nbut also its slope (the derivative of the function). It is this \nparticular feature that results in a dramatic improvement in the \nrate of convergence. However, Newton\u2019s method differs from \nother procedures in that it does not guarantee that a root will \nbe found in all cases, and hence, it will often tend to diverge or \ncompletely fail, especially when applied to complex functions \nhaving an unpredictable behaviour. There are a few potential \nproblems that can cause the method to fail. These are \nexplained and also graphically illustrated in the following \nfigures (Figs. 2-5). First of all, if the slope of the function is \nnearly horizontal and the initial guess of 0x is so poor that \n\uf028 \uf0290xf \uf0a2  is very small, the first iteration may be thrown out of \nthe region of interest and the solution would then diverge (Fig. \n2). Also, the method will likely fail if the initial guess is in a \nregion where the function has a local minimum but no root \n(Fig. 3). \n \n \nFig. 2 A horizontal slope may cause a failure \n \nMoreover, the method will not be able to find a root \nwhenever the derivative at the root is infinite (Fig. 4). The \nmethod would also have difficulties with multiple roots, as \nFigure 5 illustrates. At the position of a multiple root, both \n\uf028 \uf029xf  and \uf028 \uf0290xf \uf0a2  become nearly zero and therefore the \nalgorithm would exhibit a very slow convergence and \nultimately fail when attempting to divide zero by zero. \n \n   \n5 \n \nFig. 3 A local minimum may cause a failure \n \n \nFig. 4 A vertical slope near a root may cause a failure \n \n \nFig. 5 A multiple root may cause a failure \n \n2   THE HYBRID DCC ALGORITHM \n \nIn all numerical schemes potential computational \ndifficulties of any nature can be avoided by gathering as much \ninformation as possible in the initial choice of the method used \nand the accompanying initial guess. Also a rough \nunderstanding of the behavior of the function itself should be \nobtained (analytically or graphically) before root solving is \nattempted. In practice however, the exact nature of the function \nis usually unknown. In these cases, Newton\u2019s method in its \noriginal form as described previously, can not work and a \ndifferent method, or combination of methods, requiring less \ninitial information about the nature of the function being \nsolved, needs to be implemented. Moreover, a method of \nmonitoring the function needs to be utilized to arrive at some \nunderstanding of how the function is behaving during \ncomputation.  \nThis is the general approach taken by the work reported \nhere. The hybrid DCC algorithm is largely based on Newton\u2019s \nmethod but addresses effectively the inherent limitations of the \nmethod described in Section 1.3. It also combines the speed of \nexecution of the method with a slower, but more robust \nnumerical scheme which is only employed while the solution is \nclose to the true root and when numerical instabilities are \nencountered. Furthermore, the algorithm includes a \nmonitoring facility that can track the evolution of errors \ngenerated during successive iterations and take appropriate \nintervening action during run-time. More specifically the \nalgorithm: \n\uf0b7 Dynamically monitors the convergence history of the \nvarious iterative processes during code execution \n\uf0b7 Automatically detects the nature of the convergence mode \nthat the solution has fallen into (i.e. stable convergence, \ndivergence, various types of numerical oscillations etc.) \n\uf0b7 Dynamically changes the numerical scheme employed and \nalso the rate of convergence according to the detected \nmode \n\uf0b7 Traps diverging iterations and attempts to return the \nsolution to steady convergence, hence preventing it from \ndiverging any further \n\uf0b7 Prevents the software from crashing due to numerical \ninstabilities \n\uf0b7 Dynamically \u2018drives\u2019 the solution down to the specified \nerror tolerance by intervening appropriately throughout \n\uf0b7 Informs the user when a particular solution has steadily \nconverged above the specified error tolerance and prompts \nfor action \n\uf0b7 When a particular iteration converges below the specified \nerror tolerance, it automatically resets all initial settings \nback to their default values for the monitoring of the next \niterative process  \nMore details are given in the following section.  \n \n   \n6 \n \n \n2.1   Algorithm Inner-Workings \n \nAs discussed previously, Newton\u2019s method requires the \nvalues of the function itself, as well as the values of the first \nderivative of the function. Calculating the derivative of \nEquation 1 or Equation 7 can be extremely computationally \nexpensive (if not impossible). Finding the solution of this \nfunction is also only an incidental part of a much larger \nproblem and not the sole objective of a through-flow \ncomputation.  \nWe could therefore adopt an easier strategy and replace \nthe derivative with an estimate, obtained numerically from the \nslope of the line joining the last two iterates. The point where \nthis line, called the \u2018secant\u2019 (hence the name of this method), \ncuts the x-axis is taken to be the next iterate. This approach \nrequires two values of x  to start the iteration. These two \nvalues of x  can be closely spaced together and need not to be \nbracketing the root. In other words, specifying these two initial \nguesses should not be difficult at all. An approximate \nexpression of the derivative can be obtained, for example, from \nthe first backward difference as follows: \n \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029\nx\nxxfxf\nxf\n\uf044\n\uf044\uf02d\uf02d\n\uf03d\uf0a2 000              (12) \n \nUsing Equation 12, Equation 11 can then be modified \naccordingly. \nSince the \u2018secant\u2019 method is based on Newton\u2019s method it \nwill exhibit similar vulnerabilities and tendency to fail in those \ncases discussed in Section 1.3. First of all, the slow \nconvergence rate at multiple roots can be addressed as follows. \nNewton\u2019s method will fail at a multiple root because of the \noperation of dividing zero by zero, a forbidden operation on \nany computer. In mathematics however, the operation 0\/0 is \nnot forbidden; it is simply an undetermined form (neither 0 nor \ninfinity). It has no numerical value until it is defined to be a \nspecific value in a particular problem [30]. In addition to \nsuffering from a slow convergence rate for multiple roots, \nNewton\u2019s method may yield a result that is invalidated by \nround-off errors caused when both the value of the function \nand its derivative are extremely small. \nAmending the previous procedure, if we consider for \nexample the following simple function \uf028 \uf029xf  that has a \nmultiple root of multiplicity m  at rx \uf03d , we can write:   \n \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029xgrxxf m\uf02d\uf03d               (13) \n \nSince the value of r is yet unknown, \uf028 \uf029xg  is likewise \nunknown. We can, however, assume that \uf028 \uf029xg  is not zero (or \nextremely small) at rx \uf03d . Then applying Newton\u2019s method \nwith an initial guess of 0x  near r , we have: \n \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029000 xgrxxf\nm\uf02d\uf03d               (14) \n \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029 \uf028 \uf029 \uf028 \uf029000\n1\n00 xgrxxgrxmxf\nmm \uf0a2\uf02d\uf02b\uf02d\uf03d\uf0a2 \uf02d  = \n\uf028 \uf029 \uf028 \uf029 \uf028 \uf029\n\uf028 \uf029 \uf0fa\uf0fb\n\uf0f9\n\uf0ea\n\uf0eb\n\uf0e9 \uf0a2\n\uf02b\n\uf02d\n\uf02d\uf03d\n0\n0\n0\n00 xg\nxg\nrx\nmxgrx m   =  \n\uf028 \uf029 \uf028 \uf029\n\uf028 \uf029 \uf0fa\uf0fb\n\uf0f9\n\uf0ea\n\uf0eb\n\uf0e9 \uf0a2\n\uf02b\n\uf02d\n\uf03d\n0\n0\n0\n0 xg\nxg\nrx\nmxf              (15) \n \nThe assumptions made regarding 0x  and \uf028 \uf029xg  ensure that the \nfirst term in the brackets in the last equation is much larger \nthan the second. Thus we can approximate this equation as:  \n \n\uf028 \uf029 \uf028 \uf029\nrx\nmxfxf\n\uf02d\n\uf040\uf0a2\n0\n00\n             (16) \nSolving this for the root r , we obtain: \n \n\uf028 \uf029\n\uf028 \uf0290\n0\n0 xf\nxfmxr\n\uf0a2\n\uf02d\uf03d                 (17) \n \nThis is almost the same as the original Newton algorithm, with \nthe replacement \uf028 \uf029ffxx \uf0a2\uf02d\uf0ae \/  becoming \uf028 \uf029ffmxx \uf0a2\uf02d\uf0ae \/  \nfor a function with a root of multiplicity m . With this simple \namendment to Newton\u2019s method the desired convergence rate \nis restored. \nAs mentioned previously, the other inherent limitations of \nNewton\u2019s method have been addressed through the \nimplementation of an error monitoring facility and a more \nrobust numerical scheme. This additional numerical scheme, \nbeing somewhat slower, is employed only towards the last \nstages of convergence, when a solution is found to orbit \ndangerously around a root, and when numerical instabilities \nare encountered. More specifically, at the beginning of an \niteration, generated errors are stored in a memory register. \nAfter a specified number of loops this error history is \nexamined by the algorithm and unless the convergence process \nis stable, the Newton-Raphson\/Secant numerical scheme \nswitches to: \n \n\uf028 \uf029\n\uf028 \uf029 \uf0f7\uf0f8\n\uf0f6\n\uf0e7\n\uf0e8\n\uf0e6\n\uf0f7\n\uf0f8\n\uf0f6\n\uf0e7\n\uf0e8\n\uf0e6 \uf02d\n\uf02d\uf03d\n0\n0\n01 1 xf\nfxf\nfxx rootrelax             (18) \n \nWhere relaxf  is a relaxation factor and rootf  is the target \nsolution. For example, when applying this scheme for the \nsolution of the REE, rootf  becomes a particular s\uf044 (or s  \ncoordinate) in the tangential direction along the blade span, \n   \n7 \nand 1x becomes a meridional velocity value that can satisfy the \nREE at that particular coordinate. \nWhen the iteration does not reach convergence after a \nspecified number of loops, relaxf needs to be reduced. \nSimilarly, if successive iterates are found to oscillate around a \nsolution, relaxf  is reduced again to help meet the error \ntolerance requirements. When the solution is diverging, \nrelaxf is reduced and its sign is reversed in order to trap the \nsolution and re-attempt convergence, starting however from a \ndifferent set of initial conditions this time.  \nPractical application has shown that the ideal starting \nvalue of the relaxation factor depends on the nature of the \niteration conducted. Recommended values may range from 0.1 \nto 0.001. Experience has also shown that subsequent \nreductions of relaxf , of the order of 2, when numerical \ninstabilities are encountered, can facilitate successful \nconvergence to error tolerances as low as 1.0E-7 at reasonable \nconvergence rates. Equation 18 and the fairly straightforward \nmathematical manipulation of relaxf , facilitates control over \nthe actual convergence process and its rate, maximizing the \nchances for reaching the correct solution without being \nhindered by the limitations of the numerical scheme employed. \nThe following section discusses in more detail the practical \napplication of the hybrid DCC algorithm.    \n \n \n2.2   Testing and Validation of the DCC Algorithm \n \nThe hybrid DCC algorithm is a versatile tool that can have \nmany applications. Nevertheless, it was mainly developed in \nthe context of this work to meet the requirements imposed by \nSLC-type of through-flow analyses in turbomachinery \ncomponents. It was therefore fully integrated into SOCRATES \n(Synthesis Of Correlations for the Rapid Analysis of Turbomachine Engine \nSystems), a turbomachinery design and performance simulation \ntool developed by researchers at Cranfield University [25, 31-\n34] (Fig. 6). The hybrid DCC algorithm was called by the code \nduring run-time to handle the execution of several different \niterative loops. For example it handled the solution of the REE \nat hundreds of computation nodes, the stream-tube and overall \nmass flow convergence processes, the change in streamline \nradii, the calculation of static temperature, Cp and \uf067  from \nMach number etc.  \n \n \n      \n \nFig. 6 Example of SOCRATES\u2019 turbomachinery design \nenvironment \u2013 single stage fan with cone  \n \nFigure 7 illustrates the complete error history of several \niterative processes, as evolved during a typical code execution \nfor the performance analysis of a 2-stage compressor (its \nperformance is discussed in more detail in Section 3). By \nzooming in closer to the x-axis in the above figure, Figures 8 \nto 12 provide typical samples of the operation of the DCC \nalgorithm. For example in the first case (Fig. 8), after the rapid \nconvergence to a moderate error tolerance using Newton\u2019s \nmethod, the controller detects the diverging solution and \nintervenes accordingly, so that a steady converged solution is \nachieved at a smaller tolerance value after a few iterations. \nSimilarly, Figures 9 and 10 illustrate converged cases where \nthe solution was finally driven by the dynamic controller to \nlower absolute values of error tolerance.    \n \nDynamic Convergence Control - Error Tolerance History\n-1.0E-02\n-8.0E-03\n-6.0E-03\n-4.0E-03\n-2.0E-03\n0.0E+00\n2.0E-03\n4.0E-03\n6.0E-03\n8.0E-03\n1.0E-02\n0 5000 10000 15000 20000 25000 30000\nNo of Iterations\nEr\nro\nr T\nol\ner\nan\nce\n \nFig. 7 Typical overall convergence history during code \nexecution for the performance analysis of a 2-stage \ncompressor  \n \nFigure 11 illustrates an example of successful convergence \nwithout DCC intervention, and Figure 12 again demonstrates \nthe ability of the algorithm to help achieve really small error \ntolerances even after a diverging solution.  \n \n   \n8 \nDynamic Convergence Control - Error Tolerance History\n0.0E+00\n5.0E-04\n1.0E-03\n1.5E-03\n2.0E-03\n2.5E-03\n3.0E-03\n3.5E-03\n4.0E-03\n4.5E-03\n5.0E-03\n1 21 41 61 81 101 121 141\nNo of Iterations\nEr\nro\nr T\nol\ner\nan\nce\nInitial error tolerance\nFast convergence to a \ntolerance of 1.37E-05 \nSolution diverging\nDynamic convergence \ncontroler intervention\nSteady convergence to \na tolerance of 4.08E-08 \n \nFig. 8 Typical convergence history with DCC algorithm \nintervention after a divergent solution \n \nTesting rigorously the performance of the hybrid DCC \nalgorithm over a wide range of compressor operating \nconditions, even far off-design, led to the conclusion that \ndynamic convergence control can be a very versatile and \nvaluable asset in the toolkit of an SLC software, improving \nsignificantly its capabilities and overall robustness. Actual \nnumerical results, compared against experimental data are \npresented in the next section in support of this conclusion. \n \nDynamic Convergence Control - Error Tolerance History\n0.0E+00\n2.0E-06\n4.0E-06\n6.0E-06\n8.0E-06\n1.0E-05\n1.2E-05\n1.4E-05\n1.6E-05\n1.8E-05\n2.0E-05\n650 660 670 680 690 700 710 720 730\nNo of Iterations\nEr\nro\nr T\nol\ner\nan\nce\nDynamic convergence \ncontroler intervention\nSteady convergence to \na tolerance of 6.09E-07 \n \nFig. 9 Typical convergence history with DCC algorithm \nintervention to achieve an even smaller error \ntolerance (absolute value) \n \nDynamic Convergence Control - Error Tolerance History\n-5.0E-05\n-4.5E-05\n-4.0E-05\n-3.5E-05\n-3.0E-05\n-2.5E-05\n-2.0E-05\n-1.5E-05\n-1.0E-05\n-5.0E-06\n0.0E+00\n1800 1820 1840 1860 1880 1900 1920 1940 1960\nNo of Iterations\nEr\nro\nr T\nol\ner\nan\nce\nDynamic convergence \ncontroler intervention\nSteady convergence to a \ntolerance of -9.93E-07 \n \nFig. 10 Typical convergence history with DCC algorithm \nintervention to achieve an even smaller error \ntolerance (absolute value) \n \nDynamic Convergence Control - Error Tolerance History\n0.0E+00\n1.0E-03\n2.0E-03\n3.0E-03\n4.0E-03\n5.0E-03\n6.0E-03\n7.0E-03\n8.0E-03\n9.0E-03\n1.0E-02\n5200 5220 5240 5260 5280 5300 5320 5340\nNo of Iterations\nEr\nro\nr T\nol\ner\nan\nce\nSteady convergence to a \ntolerance of 6.98E-07 \nwithout intervention \n \nFig. 11 Typical convergence history using Newton\u2019s method \nwith no DCC algorithm intervention \n \nDynamic Convergence Control - Error Tolerance History\n-7.0E-05\n-6.0E-05\n-5.0E-05\n-4.0E-05\n-3.0E-05\n-2.0E-05\n-1.0E-05\n0.0E+00\n7200 7220 7240 7260 7280 7300 7320 7340 7360 7380 7400\nNo of Iterations\nEr\nro\nr T\nol\ner\nan\nce\nSolution diverging\nDynamic convergence \ncontroler intervention\nSteady convergence to a \ntolerance of -8.55E-07 \n \nFig. 12 Typical convergence history with DCC algorithm \nintervention after a divergent solution \n \n \n \n \n \n   \n9 \n3   APPLICATION IN SOCRATES \n \nThe SOCRATES turbomachinery design and performance \nanalysis tool is equipped with several different numerical \nschemes largely from the public domain. These numerical \nschemes, having a different range of applicability and different \nlimitations, have to be \u2018mixed and matched\u2019 by the user, \naccording to the needs of the case being studied. This can turn \ninto a fairly laborious, \u2018trial and error\u2019 exercise, requiring \nunnecessarily in the process the user to become familiar with \nthe inner-workings of the various schemes available.  \nThe integration of the DCC algorithm into SOCRATES \nresulted in an enhanced version of the code which was \nsubsequently tested at far off-design conditions, traditionally \nexhibiting convergence challenges. The analysis of compressor \nperformance at rotational speeds away from the design point, \nwhere the flow field can be approximated reasonably well, \ntypically presents convergence difficulties, since any initial \nguessed variables may have to be \u2018initialized\u2019 away from their \ntrue values. \n The objectives of this exercise were mainly to i) to assess \nthe stability and robustness of the new iteration scheme, \nparticularly at extreme conditions, and ii) to validate the \nresults against experimental data. The comparison against \nexperimental results was carried out based on [35]. This \ntechnical report provides a very detailed description of \nmeasured flow field data for a NASA experimental two-stage \ncompressor, from hub to tip and for a number of different \ncompressor operating conditions (Table 1). \n \nPressure  Ratio 2.399 \nTemperature Ratio 1.334 \nIsentropic Efficiency 0.849 \nCorrected Mass Flow               [kg\/s] 33.248 \nrpm 16042.800 \nInlet Hub to Tip Ratio 0.375 \n1st Rotor Tip Speed                  [m\/s] 428.896 \n2nd Rotor Tip Speed                 [m\/s] 405.341 \n \nTable 1 NASA two-stage compressor design overall \nparameters \n \n \n \nFig. 13 3D model of the NASA two-stage compressor in \nSOCRATES \n \nA two-stage compressor model (Fig. 13) was constructed \nin SOCRATES according to the detailed geometric data \npublished in [35]. It is worth pointing out that SOCRATES is \nbased on an inviscid flow analysis that is coupled with various \nloss, deviation and boundary layer models. Previous \npublications by the same authors [25, 31-34] reported \nthoroughly on the synthesis of the various viscous and loss \nmodels that have been included in this particular software over \nthe years. For the analysis reported here, loss and deviation \ndata were used from [35].  \nUsing the new version of the software tool, 2D profiles of \nvarious flow properties for all four blade rows were calculated \nand compared against the measured performance data provided \nin the aforementioned report. Figures 14 and 15 present the \ncomparison between the measured (NASA) and simulated \n(SLC) meridional velocity variation, at the inlet and outlet of \nall four blade rows and at 50% design rotational speed. The \nspan-wise meridional velocity variation is obviously the direct \noutcome of the iterative solution of the REE. Similarly, Figures \n16 and 17 present comparisons of the absolute velocity span-\nwise distribution at the same power setting.      \n \nSpan-wise Inlet Meridional Velocity Variation\n50% DP Rotational Speed\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n50 70 90 110 130 150 170 190\nINLET MERIDIONAL VELOCITY [m\/sec]\nR\nA\nD\nII \n[m\n]\nR1 SLC\nS1 SLC\nR2 SLC\nS2 SLC\nR1 NASA\nS1 NASA\nR2 NASA\nS2 NASA\n \nFig. 14 Inlet meridional velocity variation from hub to tip at \n50% DP rotational speed \n   \n10 \n \nSpan-wise Outlet Meridional Velocity Variation\n50% DP Rotational Speed\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n50 70 90 110 130 150 170 190\nOUTLET MERIDIONAL VELOCITY [m\/sec]\nR\nA\nD\nII \n[m\n]\nR1 SLC\nS1 SLC\nR2 SLC\nS2 SLC\nR1 NASA\nS1 NASA\nR2 NASA\nS2 NASA\n \nFig. 15 Outlet meridional velocity variation from hub to tip at \n50% DP rotational speed \n \nSpan-wise Inlet Absolute Velocity Variation\n50% DP Rotational Speed\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n50 70 90 110 130 150 170 190\nINLET ABSOLUTE VELOCITY [m\/sec]\nR\nA\nD\nII \n[m\n]\nR1 SLC\nS1 SLC\nR2 SLC\nS2 SLC\nR1 NASA\nS1 NASA\nR2 NASA\nS2 NASA\n \nFig. 16 Inlet absolute velocity variation from hub to tip at \n50% DP rotational speed \n \nSpan-wise Outlet Absolute Velocity Variation\n50% DP Rotational Speed\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n50 70 90 110 130 150 170 190\nOUTLET ABSOLUTE VELOCITY [m\/sec]\nR\nA\nD\nII \n[m\n]\nR1 SLC\nS1 SLC\nR2 SLC\nS2 SLC\nR1 NASA\nS1 NASA\nR2 NASA\nS2 NASA\nc15\n \nFig. 17 Outlet absolute velocity variation from hub to tip at \n50% DP rotational speed \n \nIn all cases examined, the incorporation of the DCC \nalgorithm enabled a fast and faultless convergence, without \nrequiring any manual intervention. More importantly, even at \npart-speed operation, the comparison of the calculated \ncompressor performance against experimental data revealed \nthat reasonable results can be obtained, meaning that the \nalgorithm is not just converging randomly on unrealistic \nsolutions. Actually, the calculated flow properties were found \nto be in a very good overall qualitative and quantitative \nagreement with the experimental measurements, as illustrated \nabove.  \n \n4   MAIN CONCLUSIONS \n \nThis manuscript discusses the development, validation and \ndeployment of an \u2018intelligent\u2019 DCC algorithm for the fast, \naccurate and robust numerical solution of the non-linear \nequations of motion for two-dimensional flow fields. The \nalgorithm was specifically developed to address the \ncomputational challenges presented by SLC-type of analyses, \nand in particular the fast and accurate solution of the full REE.  \nThis hybrid DCC algorithm is largely based on Newton\u2019s \nmethod but addresses effectively the inherent limitations of the \nmethod. It also combines the speed of execution of the method \nwith a slower, but more robust numerical scheme introduced by \nthe authors. This is only employed while the solution is very \nclose to the true root and when numerical instabilities are \nencountered. Furthermore, the algorithm includes a \nmonitoring facility that can track the evolution of errors \ngenerated during successive iterations and take appropriate \nintervening action during run-time, thus eliminating the large \nuser intervention, usually required by standard numerical \nmethods.  \nThe DCC algorithm was subsequently integrated into a \nturbomachinery design and performance analysis tool and was \ntested rigorously, particularly at compressor operating regimes \ntraditionally exhibiting convergence difficulties (i.e. part-speed \nperformance). For all case-studies examined, the DCC \nalgorithm enabled a fast and crash-free convergence, \u2018guiding\u2019 \nsuccessfully the solution down to the specified error tolerance, \nat the expense of a slightly slower iteration process (compared \nto a conventional Newton-Raphson scheme). Even at part-\nspeed operation, the comparison of the calculated compressor \nperformance against experimental data revealed a very good \nqualitative and quantitative agreement. \nOverall, the hybrid DCC algorithm, developed in the \ncontext of this work, was found to provide considerably \nenhanced convergence stability and robustness features. It was \nproven to be a versatile and valuable asset in the toolkit of \nthrough-flow analysis software but it can also find other \napplications in engineering as well, particularly wherever \ncomplex numerical analyses need to be carried out. \n \n \nREFERENCES \n \n   \n11 \n1 Faddeev, D. K. and Faddeeva, V. N. Computational \nMethods of Linear Algebra, San Francisco: Freeman, \n1963. \n2 Todd, J. Basic Numerical Mathematics, 2 vols, New-York: \nAcademic Press, 1978-1980. \n3 Hildebrand, F. B. Introduction to Numerical Analysis, 2nd \nEdition, New-York: McGraw-Hill, 1974. \n4 Todd, J. Survey of Numerical Analysis, New-York: \nMcGraw-Hill, 1962. \n5 Dahlquist, G. and Bj\u00f6rck, A. Numerical Methods, \nEnglewood Cliffs, NJ: Prentice-Hall, 1974.  \n6 Isaacson, E. and Keller, H. B. Analysis of Numerical \nMethods, New-York: Wiley, 1973. \n7 Scheid, F. Theory and Problems of Numerical Analysis, \nNew York: McGraw-Hill, 1968. \n8 Forsythe, G. E., Malcolm, M. A. and Moler, C. B. \nComputer Methods for Mathematical Computations, \nEnglewood Cliffs, NJ: Prentice-Hall, 1977. \n9 Hennie, F. Introduction to Computability, Reading, MA: \nAddison-Wesley, 1977. \n10 Horowitz, E. and Sahni, S. Fundamentals of Computer \nAlgorithms, Rockville, MD: Computer Science Press, \n1985. \n11 Smith, G. D. Numerical Solution of Partial Differential \nEquations, London: Oxford University Press, 1974. \n12 Collatz, L. The Numerical Treatment of Differential \nEquations, 3rd Edition, New York: Springer, 1966. \n13 Davis, P. and Rabinowitz, P. Methods of Numerical \nIntegration, 2nd Edition, New York: Academic Press, 1984. \n14 Traverso, A. and Massardo, A. F. Optimal design of \ncompact recuperators for microturbine application, \n13594311, Applied Thermal Engineering, 2005. \n15 Massardo, A. F. and Scialo, M. Thermoeconomic \nanalysis of gas turbine based cycles, Journal of \nEngineering for Gas Turbines and Power, 2000. \n16 Smith, L. H. The Radial Equilibrium Equation of \nTurbomachinery, Trans. A.S.M.E., Series A, Vol 88, 1966. \n17 Templalexis, I., Pilidis, P., Pachidis, V. and Kotsiopoulos, \nP. Development of A 2D Compressor Streamline Curvature \nCode, Transactions of the ASME, Journal of \nTurbomachinery, TURBO-06-1178, Vol. 129, Issue 4, \nOctober 2007. ASME Education Committee Best Paper \nAward for 2006. \n18 Wu, C. H. A General Through-Flow Theory Of Three-\nDimensioanl Flow In Subsonic And Supersonic \nTurbomachines Of Axial-, Radial-, And Mixed-Flow \nTypes, NASA TN2604, 1952. \n19 Barbosa, J. R. A Streamline Curvature Computer \nProgram For Axial Compressor Performance Prediction, \nPh.D Thesis, Vol. 1, Cranfield Institute of Technology, \nSchool of Mechanical Engineering, 1987.  \n20 Boyer, K. M. An Improved Streamline Curvature \nApproach for Off Design Analysis of Transonic \nCompression Systems, Ph.D Thesis, Virginia Polytechnic \nInstitute and State University, 2001. \n21 Denton, J. D. Through-flow Calculations For Transonic \nAxial Flow Turbines, Transactions of the ASME, Journal \nof Engineering for Power, Vol. 100, p. 212-18, 1978. \n22 Frost, D. H. A Streamline Curvature Through-Flow \nComputer Program for Analysing the Flow Through \nAxial-Flow Turbomachines, Aeronautical Research \nCouncil, R&M 3687, 1972. \n23 Jennions, I. K. and Stow, P. The Quazi-Three-\nDimensional Turbomachinery Blade Design System, Part \nI: Throughflow Analysis, Part II: Computerized System, \nTransactions of the ASME, Journal of Engineering for Gas \nTurbines and Power Vol.  107, p. 308-16, 1985. \n24 Novak, R. A. Streamline Curvature Computing \nProcedures For Fluid-Flow Problems, Transactions of the \nASME, Journal of Engineering for Power, Vol. 89, p. 478-\n490, 1967. \n25 Templalexis, I., Pachidis, V., Pilidis, P., and \nKotsiopoulos, P.  The Effect of Blade Lean on the Solution \nof the Radial Equilibrium Equation, GT2008-50259, \nASME Turbo Expo, Power For Land, Sea and Air, Berlin, \nGermany, June 2008. \n26 Wilkinson, D. H. Stability, Convergence and Accuracy of \n2-D Streamline Curvature Methods Using Quasi-\nOrthogonals, Proc. of the Institution of Mechanical \nEngineers, Vol. 184, 1969-70. \n27 Katsanis, T. Use Of Arbitrary Quasi-Orthogonals for \nCalculating Flow Distribution in the Meridional Plane of a \nTurbomachine, NASA Technical Note D-2546, 1964. \n28 Katsanis, T. Use Of Arbitrary Quasi-Orthogonals for \nCalculating Flow Distribution on a Blade-To-Blade \nSurface in a Turbomachine, NASA Technical Note D-\n2809, 1965. \n29 Wood, M. D. and Marlow, A. V. The use of numerical \nmethods for the investigation of the flow in water pump \nimpellers, Proc. Institution of Mechanical Engineers, Vol. \n181, Part 1, 1966-1967. \n30 Kreyszig, E. Advanced Engineering Mathematics, 6th \nEdition, New-York: John Wiley & Sons, 1988. \n31 Pachidis, V., Pilidis, P., Templalexis, I., Alexander, T. and \nKotsiopoulos, P. Prediction of Engine Performance Under \nCompressor Inlet Flow Distortion Using Streamline \nCurvature, Transactions of the ASME, Journal of \nEngineering for Gas Turbines and Power, GTP-05-1192, \nVol. 129, p. 97, January 2007. \n32 Pachidis, V., Pilidis, P., Texeira, J., and Templalexis, I. A \nComparison of Component Zooming Simulation Strategies \nUsing Streamline Curvature\u201d, Proceedings of the IMechE, \nJournal of Aerospace Engineering, JAERO147, Vol. 221, \nPart G, p. 1, 2007. \n33 Pachidis, V., Pilidis, P., Marinai, L., and Templalexis, I. \nTowards a Full Two Dimensional Gas Turbine Performance \n   \n12 \nSimulation, Proceedings of the RASoc, The Aeronautical \nJournal, AJ-3127, June 2007. \n34 Pachidis, V., Pilidis, P., Templalexis, I., and Marinai, L. \nAn Iterative Method for Blade Profile Loss Model \nAdaptation Using Streamline Curvature, Transactions of the \nASME, Journal of Engineering for Gas Turbines and \nPower, GTP-07-1072, Vol.130, Iss.1, December 2007. \nASME Cycle Innovations Committee Best Paper Award for \n2007. \n35 Urasek, D. C., Gorell, W. T. and Cunnan, W. S. \nPerformance Of Two-Stage Fan Having Low-Aspect-Ratio, \nFirst Stage Rotor Blading, NASA Technical Paper 1493, \n1979.  \n \nLIST OF FIGURES \n \nFig. 1 The Newton-Raphson iteration scheme \nFig. 2 A horizontal slope may cause a failure \nFig. 3 A local minimum may cause a failure \nFig. 4 A vertical slope near a root may cause a failure \nFig. 5 A multiple root may cause a failure \nFig. 6 Example of SOCRATES\u2019 turbomachine design \nenvironment \u2013 single stage fan with cone  \nFig. 7 Typical overall convergence history during code \nexecution for the performance analysis of a 2-stage \ncompressor  \nFig. 8 Typical convergence history with DCC algorithm \nintervention after a divergent solution \nFig. 9 Typical convergence history with DCC algorithm \nintervention to achieve an even smaller error \ntolerance (absolute value) \nFig. 10 Typical convergence history with DCC algorithm \nintervention to achieve an even smaller error \ntolerance (absolute value) \nFig. 11 Typical convergence history using Newton\u2019s method \nwith no DCC algorithm intervention  \nFig. 12 Typical convergence history with DCC algorithm \nintervention after a divergent solution \nFig. 13 3D model of the NASA two-stage compressor in \nSOCRATES \nFig. 14 Inlet meridional velocity variation from hub to tip at \n50% DP rotational speed \nFig. 15 Outlet meridional velocity variation from hub to tip at \n50% DP rotational speed \nFig. 16 Inlet absolute velocity variation from hub to tip at \n50% DP rotational speed \nFig. 17 Outlet absolute velocity variation from hub to tip at \n50% DP rotational speed \n \n \nLIST OF TABLES \n \nTable 1 NASA two-stage compressor design overall \nparameters \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n   \n13 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nAPPENDIX 1 - NOMENCLATURE \n \nAbbreviations \n \nDP  Design Point \nREE Radial Equilibrium Equation \nSLC Streamline Curvature \n2D  Two-Dimensional \n \nSymbols \n \nA, B, C Differential equation terms \nF  Force \nH  Enthalpy \nI  Rothalpy \nP  Pressure \nS  Entropy \nT  Temperature \nV  Absolute air velocity \nW  Relative velocity \nc  Constant of integration \nf  Function, factor \ni,j,k  Unit vectors \nm  Meridional direction \nr  Radius, radial direction, root \nrc  Radius of curvature \ns  Tangential along the blade edge direction \nz  Axial direction \n \nGreek Symbols \n \n\u03b1  Absolute flow angle \n\u03b2  Relative flow angle \n\u03b3  Sweep angle \n\u03b5  streamline slope angle \n\u03bb  Lean angle \n\u03c1  Density \n\u03c9  Angular speed \n \nSubscripts \n \nD  Drag \nP  Pressure \nj  Streamline counter \nm  Meridional direction \nn  Normal direction \nr  Radial direction \nrelax Relaxation \nroot  The solution of a function \nw  Whirl direction \nz  Axial direction \n \n"}