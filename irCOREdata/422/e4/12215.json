{"doi":null,"coreId":"12215","oai":"oai:wrap.warwick.ac.uk:34644","identifiers":["oai:wrap.warwick.ac.uk:34644",null],"title":"On the generation and analysis of program transformations","authors":["Warburton, Richard"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":null,"abstract":"This thesis discusses the idea of using domain specific languages for program transformation, and the application, implementation and analysis of one such domain specific\\ud\nlanguage that combines rewrite rules for transformation and uses temporal logic to express its side conditions. We have conducted three investigations.\\ud\n- An efficient implementation is described that is able to generate compiler optimizations from temporal logic specifications. Its description is accompanied by an\\ud\nempirical study of its performance.\\ud\n- We extend the fundamental ideas of this language to source code in order to write\\ud\nbug fixing transformations. Example transformations are given that fix common\\ud\nbugs within Java programs. The adaptations to the transformation language are\\ud\ndescribed and a sample implementation which can apply these transformations is\\ud\nprovided.\\ud\n- We describe an approach to the formal analysis of compiler optimizations that\\ud\nproves that the optimizations do not change the semantics of the program that\\ud\nthey are optimizing. Some example proofs are included.\\ud\nThe result of these combined investigations is greater than the sum of their parts.\\ud\nBy demonstrating that a declarative language may be efficiently applied and formally reasoned about satisfies both theoretical and practical concerns, whilst our extension\\ud\ntowards bug fixing shows more varied uses are possible","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:wrap.warwick.ac.uk:34644<\/identifier><datestamp>\n      2013-09-11T06:11:51Z<\/datestamp><setSpec>\n      7374617475733D756E707562<\/setSpec><setSpec>\n      7375626A656374733D51:5141:51413736<\/setSpec><setSpec>\n      74797065733D746865736973<\/setSpec><setSpec>\n      636F6C6C656374696F6E3D77726170<\/setSpec><\/header><metadata><rioxx xmlns=\"http:\/\/www.rioxx.net\/schema\/v2.0\/rioxx\/\" xmlns:ali=\"http:\/\/ali.niso.org\/2014\/ali\/1.0\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:dcterms=\"http:\/\/purl.org\/dc\/terms\/\" xmlns:rioxxterms=\"http:\/\/docs.rioxx.net\/schema\/v2.0\/rioxxterms\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.rioxx.net\/schema\/v2.0\/rioxx\/ http:\/\/www.rioxx.net\/schema\/v2.0\/rioxx\/rioxx.xsd\" ><ali:free_to_read>\n    \n      <\/ali:free_to_read><dc:description>This thesis discusses the idea of using domain specific languages for program transformation, and the application, implementation and analysis of one such domain specific\\ud\nlanguage that combines rewrite rules for transformation and uses temporal logic to express its side conditions. We have conducted three investigations.\\ud\n- An efficient implementation is described that is able to generate compiler optimizations from temporal logic specifications. Its description is accompanied by an\\ud\nempirical study of its performance.\\ud\n- We extend the fundamental ideas of this language to source code in order to write\\ud\nbug fixing transformations. Example transformations are given that fix common\\ud\nbugs within Java programs. The adaptations to the transformation language are\\ud\ndescribed and a sample implementation which can apply these transformations is\\ud\nprovided.\\ud\n- We describe an approach to the formal analysis of compiler optimizations that\\ud\nproves that the optimizations do not change the semantics of the program that\\ud\nthey are optimizing. Some example proofs are included.\\ud\nThe result of these combined investigations is greater than the sum of their parts.\\ud\nBy demonstrating that a declarative language may be efficiently applied and formally reasoned about satisfies both theoretical and practical concerns, whilst our extension\\ud\ntowards bug fixing shows more varied uses are possible.<\/dc:description><dc:format>application\/pdf<\/dc:format><dc:identifier>http:\/\/wrap.warwick.ac.uk\/34644\/1\/WRAP_THESIS_Warburton_2010.pdf<\/dc:identifier><dc:language>en<\/dc:language><dc:subject>QA76<\/dc:subject><dc:title>On the generation and analysis of program transformations<\/dc:title><rioxxterms:author>Warburton, Richard<\/rioxxterms:author><rioxxterms:type>Thesis<\/rioxxterms:type><rioxxterms:version>NA<\/rioxxterms:version><\/rioxx><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":null,"topics":["QA76"],"subject":["QA76"],"fullText":""}