{"doi":"10.3233\/978-1-60750-619-5-379","coreId":"177347","oai":"oai:aura.abdn.ac.uk:2164\/2150","identifiers":["oai:aura.abdn.ac.uk:2164\/2150","10.3233\/978-1-60750-619-5-379"],"title":"Moving between Argumentation Frameworks","authors":["Oren, Nir","Luck, Michael","Reed, Chris"],"enrichments":{"references":[{"id":4039,"title":"A generalization of Dung\u2019s abstract framework for argumentation: Arguing with sets of attacking arguments.","authors":[],"date":"2006","doi":"10.1007\/978-3-540-75526-5_4","raw":null,"cites":null},{"id":6018955,"title":"AgeneralizationofDung\u2019sabstractframeworkforargumentation:Arguing with sets of attacking arguments.","authors":[],"date":"2006","doi":null,"raw":"S.H.NielsenandS.Parsons. AgeneralizationofDung\u2019sabstractframeworkforargumentation:Arguing with sets of attacking arguments. In Proceedings of the Third International Workshop on Argumentation in Multi-Agent Systems, pages 7\u201319, Hakodate, Japan, 2006.","cites":null},{"id":4037,"title":"An abstract theory of argumentation that accommodates defeasible reasoning about preferences.","authors":[],"date":"2007","doi":"10.1016\/j.artint.2009.02.001","raw":"S. Modgil. An abstract theory of argumentation that accommodates defeasible reasoning about preferences. In ECSQARU \u201907: Proceedings of the 9th European Conference on Symbolic and Quantitative Approaches to Reasoning with Uncertainty, pages 648\u2013659, Berlin, Heidelberg, 2007. Springer-Verlag.","cites":null},{"id":4042,"title":"Araucaria: Software for argument analysis, diagramming and representation.","authors":[],"date":"2004","doi":"10.1142\/S0218213004001922","raw":"C. A. Reed and G. W. A. Rowe. Araucaria: Software for argument analysis, diagramming and representation. Int. Journal of AI Tools, 14(3-4), 2004.","cites":null},{"id":4033,"title":"Bipolar Abstract Argumentation Systems.","authors":[],"date":"2009","doi":"10.1002\/int.20389","raw":"C. Cayrol and M.-C. Lagasquie-Schiex. Bipolar Abstract Argumentation Systems. In I. Rahwan and G. Simari, editors, Argumentation in Arti\ufb01cial Intelligence, chapter 4, pages 65\u201384. Springer, http:\/\/www.springerlink.com, 2009.","cites":null},{"id":4029,"title":"Integrating preference orderings into argument-based reasoning.","authors":[],"date":"1997","doi":"10.1007\/bfb0035620","raw":"L. Amgoud and C. Cayrol. Integrating preference orderings into argument-based reasoning. In ECSQARU\/FAPR \u201997: Proceedings of the First International Joint Conference on Qualitative and Quantitative Practical Reasoning, pages 159\u2013170, London, UK, 1997. Springer-Verlag.","cites":null},{"id":4041,"title":"Laying the foundations for a world wide argument web.","authors":[],"date":"2007","doi":"10.1016\/j.artint.2007.04.015","raw":"I. Rahwan, F. Zablith, and C. Reed. Laying the foundations for a world wide argument web. Artif. Intell., 171(10-15):897\u2013921, 2007.","cites":null},{"id":4035,"title":"On the acceptability of arguments and its fundamental role in nonmonotonic reasoning, logic programming and n-person games.","authors":[],"date":"1995","doi":"10.1016\/0004-3702(94)00041-X","raw":"P. M. Dung. On the acceptability of arguments and its fundamental role in nonmonotonic reasoning, logic programming and n-person games. Arti\ufb01cial Intelligence, 77(2):321\u2013357, 1995.","cites":null},{"id":4032,"title":"On the acceptability of arguments in bipolar argumentation frameworks.","authors":[],"date":"2005","doi":"10.1002\/int.20389","raw":"C. Cayrol and M.-C. Lagasquie-Schiex. On the acceptability of arguments in bipolar argumentation frameworks. In Pro. of the Eighth European Conference on Symbolic and Quantitative Approaches to Reasoning With Uncertainty, volume 3571 of LNAI, pages 378\u2013389. Springer-Verlag, 2005.","cites":null},{"id":4030,"title":"On the bipolarity in argumentation frameworks.","authors":[],"date":"2004","doi":"10.1002\/int.20307","raw":"L. Amgoud, C. Cayrol, and M.-C. Lagasquie-Schiex. On the bipolarity in argumentation frameworks. In Proceedings of the 10th International Workshop on Non-monotonic Reasoning, pages 1\u20139, Whistler, Canada, 2004.","cites":null},{"id":4036,"title":"Progressive defeat paths in abstract argumentation frameworks.","authors":[],"date":"2006","doi":"10.1007\/11766247_21","raw":"D. C. Mart\u00b4 \u0131nez, A. J. Garc\u00b4 \u0131a, and G. R. Simari. Progressive defeat paths in abstract argumentation frameworks. In Canadian Conference on AI, pages 242\u2013253, Qu\u00b4 ebec, Canada, 2006.","cites":null},{"id":4038,"title":"Reasoning about preferences in argumentation frameworks.","authors":[],"date":"2009","doi":"10.1016\/j.artint.2009.02.001","raw":"S. Modgil. Reasoning about preferences in argumentation frameworks. Arti\ufb01cial Intelligence, 173(9\u2013 10):901\u2013934, 2009.","cites":null},{"id":4040,"title":"Semantics for evidence-based argumentation.","authors":[],"date":"2008","doi":null,"raw":"N. Oren and T. J. Norman. Semantics for evidence-based argumentation. In Computational Models of Argument: Proceedings of COMMA 2008, pages 276\u2013284, Toulouse, France, 2008.","cites":null},{"id":4034,"title":"Towards an argument interchange format.","authors":[],"date":"2006","doi":"10.1017\/S0269888906001044","raw":"C. Ches\u02dc nevar, J. McGinnis, S. Modgil, I. Rahwan, C. Reed, G. Simari, M. South, G. Vreeswijk, and S. Willmott. Towards an argument interchange format. Knowl. Eng. Rev., 21(4):293\u2013316, 2006.","cites":null},{"id":4031,"title":"Value based argumentation frameworks.","authors":[],"date":"2002","doi":"10.1093\/logcom\/13.3.429","raw":"T. Bench-Capon. Value based argumentation frameworks. In Proceedings of the 9th International Workshop on Nonmonotonic Reasoning, pages 444\u2013453, Toulouse, France, 2002.","cites":null}],"documentType":{"type":1}},"contributors":["University of Aberdeen, Natural & Computing Sciences, Computing Science"],"datePublished":"2010","abstract":"Postprin","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"IOS Press","rawRecordXml":"<record><header><identifier>\n        \n            \n                oai:aura.abdn.ac.uk:2164\/2150<\/identifier><datestamp>\n                2018-01-02T00:54:52Z<\/datestamp><setSpec>\n                com_2164_673<\/setSpec><setSpec>\n                com_2164_370<\/setSpec><setSpec>\n                com_2164_331<\/setSpec><setSpec>\n                com_2164_705<\/setSpec><setSpec>\n                col_2164_674<\/setSpec><setSpec>\n                col_2164_706<\/setSpec>\n            <\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:doc=\"http:\/\/www.lyncode.com\/xoai\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n            \nMoving between Argumentation Frameworks<\/dc:title><dc:creator>\nOren, Nir<\/dc:creator><dc:creator>\nLuck, Michael<\/dc:creator><dc:creator>\nReed, Chris<\/dc:creator><dc:contributor>\nUniversity of Aberdeen, Natural & Computing Sciences, Computing Science<\/dc:contributor><dc:subject>\nArgumentation<\/dc:subject><dc:subject>\nAbstract Argument Frameworks<\/dc:subject><dc:subject>\nSemantics<\/dc:subject><dc:subject>\nQA76 Computer software<\/dc:subject><dc:subject>\nQA76<\/dc:subject><dc:description>\nPostprint<\/dc:description><dc:date>\n2011-10-24T11:25:02Z<\/dc:date><dc:date>\n2011-10-24T11:25:02Z<\/dc:date><dc:date>\n2010<\/dc:date><dc:type>\nConference item<\/dc:type><dc:identifier>\nOren , N , Luck , M & Reed , C 2010 , Moving between Argumentation Frameworks . in Proceedings of the 2010 International Conference on Computational Models of Argument : COMMA 2010 . Frontiers in Artificial Intelligence and Applications , vol. 216 , IOS Press , pp. 379-390 . DOI: 10.3233\/978-1-60750-619-5-379<\/dc:identifier><dc:identifier>\n9781607506188<\/dc:identifier><dc:identifier>\n0922-6389<\/dc:identifier><dc:identifier>\nPURE: 3757930<\/dc:identifier><dc:identifier>\nPURE UUID: e8af2fd2-60a0-4eab-980c-ca82fb2b539c<\/dc:identifier><dc:identifier>\nScopus: 78049264031<\/dc:identifier><dc:identifier>\nhttp:\/\/hdl.handle.net\/2164\/2150<\/dc:identifier><dc:identifier>\nhttp:\/\/dx.doi.org\/10.3233\/978-1-60750-619-5-379<\/dc:identifier><dc:language>\neng<\/dc:language><dc:relation>\nProceedings of the 2010 International Conference on Computational Models of Argument<\/dc:relation><dc:relation>\nFrontiers in Artificial Intelligence and Applications<\/dc:relation><dc:format>\n12<\/dc:format><dc:publisher>\nIOS Press<\/dc:publisher>\n<\/oai_dc:dc>\n<\/metadata>\n        <\/record>","journals":[{"title":null,"identifiers":["issn:0922-6389","0922-6389"]}],"language":{"code":"en","id":9,"name":"English"},"relations":["Proceedings of the 2010 International Conference on Computational Models of Argument","Frontiers in Artificial Intelligence and Applications"],"year":2010,"topics":["Argumentation","Abstract Argument Frameworks","Semantics","QA76 Computer software","QA76"],"subject":["Conference item"],"fullText":"Moving Between Argumentation\nFrameworks\nNir OREN a,1, Chris REED b and Michael LUCK a\naDept. of Computer Science, King\u2019s College London, UK\nbDept. of Computer Science, University of Dundee, Scotland\nAbstract. Abstract argument frameworks have been used for various applications\nwithin multi-agent systems, including reasoning and negotiation. Different argu-\nment frameworks make use of different inter-argument relations and semantics to\nidentify some subset of arguments as coherent, yet there is no easy way to map be-\ntween these frameworks; most commonly, this is done manually according to hu-\nman intuition. In response, in this paper, we show how a set of arguments described\nusing Dung\u2019s or Nielsen\u2019s argument frameworks can be mapped from and to an\nargument framework that includes both attack and support relations. This mapping\npreserves the framework\u2019s semantics in the sense that an argument deemed coher-\nent in one framework is coherent in the other under a related semantics. Interest-\ningly, this translation is not unique, with one set of arguments in the support based\nframework mapping to multiple argument sets within the attack only framework.\nAdditionally, we show how EAF can be mapped into a subset of the argument inter-\nchange format (AIF). By using this mapping, any other argument framework using\nthis subset of AIF can be translated into a DAF while preserving its semantics.\nKeywords. Argumentation, Abstract Argument Frameworks, Semantics\n1. Introduction\nTypical applications of argumentation theory represent background knowledge and facts\nabout the world as arguments, and reach some decision (e.g. what price to name in a ne-\ngotiation) based on the interactions between these arguments. In many cases, reaching a\ndecision depends on identifying which subsets of the entire set of arguments are, in some\nsense, coherent. Abstract argument frameworks model sets of arguments as atomic enti-\nties, ignoring their inner structure, and concerning themselves only with the interactions\nbetween arguments. Such argument frameworks then identify a coherent set of arguments\naccording to some semantics, based on the interactions between the arguments.\nFor example, Dung\u2019s argument framework [7] makes use of the notion of an attack\nbetween arguments, and identifies a set of arguments as coherent if a sceptical reasoner\nwould believe they are coherent (in the case of the grounded extension). Within the ar-\ngumentation literature, a plethora of argument frameworks have been proposed, capable\nof modelling not only attacks between arguments, but also support [2,12] and prefer-\n1Corresponding Author: Dept. of Computer Science, King\u2019s College London, UK; E-mail:\nnir.oren@kcl.ac.uk\nence and value orderings [1,3]. Each argument framework, and its associated semantics,\nclaims to capture some novel aspect of argument interaction that other frameworks do\nnot. However, little attention has been paid to the possibility of translating between argu-\nment frameworks at the semantic level. Yet such translation is critical in an open system\nwhere agents make use of argumentation; by translating, entities making use of different\nunderlying argumentation frameworks can agree on the status of an argument, justifying\nwhy some decision was taken.\nIn this paper, we begin addressing this translation problem by describing how argu-\nments represented using Oren et al\u2019s Evidential Argument Framework [12] can be trans-\nlated into Dung\u2019s abstract argument framework [7], and vice-versa. This translation is\ndesigned to be semantics preserving. That is, given some set of arguments deemed coher-\nent in one framework under some specific semantics, the same set of arguments should\nbe deemed consistent in the other framework under a similar semantics. As an added\nbenefit, this translation procedure allows us to trivially translate from Nielsen\u2019s frame-\nwork [11] to the other two frameworks (Translating from Dung\u2019s semantics to Nielsen\u2019s\nis trivial, and we may thus freely translate between the three frameworks).\nAs an example of the use of translation, we consider the AIF standard [6], which\nwas created in order to allow for the interchange of arguments between different sys-\ntems, each of which may use a different internal argument representation, and a different\nframework for reasoning. AIF is RDF based, and is purely representational, therefore not\nyielding to standard acceptability semantics, and has no defined operational semantics.\nHowever, it is capable of representing concepts found in many different frameworks, in-\ncluding attacks, supports and preference, as well as more complex notions such as argu-\nment schemes.Evidential argument frameworks (EAFs) provide an intuitively appealing\nrepresentation of a subset of AIF, and our work thus provides the tantalising suggestion\nof translating from some argumentation framework into AIF, then from AIF into EAFs,\nand finally from EAFs into Dung\u2019s framework. This translation thus allows for linkages\nbetween many different frameworks.\nThe main contribution of this paper lies in identifying a mapping between Oren\u2019s,\nDung\u2019s and Nielsen\u2019s frameworks, and providing an operationalisation of this mapping.\nAs an application of this mapping, we show how EAFs may be represented as a subset\nof AIF, allowing any other argument framework described using this AIF subset to be\nmapped into Dung and Nielsen\u2019s frameworks.\nIn the next section, we provide an overview of the frameworks we examine in depth\nin this paper, namely Dung\u2019s argument framework, Nielsen\u2019s extensions to it, and Oren\u2019s\nevidential argument framework. Section 3 then describes a simple algorithm to translate\nbetween the frameworks, following which refinements to the basic algorithm are intro-\nduced. Finally, we show how a mapping from AIF to Oren\u2019s framework may be created,\nafter which we discuss related work, and possible paths for future research.\n2. Background\nAbstract argument frameworks do not concern themselves with the internal structure of\nan argument, instead focusing on the interactions between sets of arguments. Thus, for\nexample, an argument \u201cNixon should not invade Vietnam because it would start a war\nhe could never win\u201d, could be represented by the argument a. Dung\u2019s seminal argument\nframework consists of a set of arguments, and one possible type of interaction between\nthem, namely by attacking each other.\nDefinition 1 (Dung Argument Framework) A Dung argument framework (DAF) is a\ntuple DAF = (Args,Attacks) where Args is a set of arguments, and Attacks :\nArgs\u00d7Args is a binary relation.\nAn argument a is said to attack another argument b if (a, b) \u2208 Attacks. From this\nsimple representation, we may define a number of notions:\nDefinition 2 (Auxiliary Notions for DAFs) Given a DAF (Args,Attacks), a set of ar-\nguments S \u2286 Args is conflict free iff \u2200a, b \u2208 S, (a, b) \/\u2208 Attacks.\nAn argument a \u2208 Args is acceptable with respect to a set of arguments S \u2286 Args iff\n\u2200b \u2208 Args such that (b, a) \u2208 Attacks, \u2203c \u2208 S such that c attacks b.\nA conflict free set of arguments S is admissible iff all its elements are acceptable w.r.t S.\nDefinition 3 (Semantics for DAFs) Given a DAF, a set of arguments is said to be a\npreferred extension if it is a maximal (w.r.t. set inclusion) admissible set of arguments.\nA set of arguments S is a stable extension iff S = {a|a \u2208 Args and a is not attacked by S}.\nA set of arguments S is a grounded extension if it is the least fixed point of the function\nFAF (S) = {a|a is acceptable with respect to S}.\nNielsen [11] popularised a simple, but important extension to DAFs. Instead of at-\ntacks operating between single arguments, an attack may require a set of arguments to\ntake place. While it has been claimed (but not proved) that DAFs can model such cases,\nNielsen\u2019s framework allows these situations to be represented more compactly, and with-\nout the need to introduce additional, virtual arguments into the system.\nDefinition 4 (Nielsen\u2019s Argument Framework) An argument framework in Nielsen\u2019s\nextension to DAF, denoted a NAF, is a tuple NAF = (Args,NAttacks) where Args is\na set of arguments, and NAttacks : 2Args \u00d7Args is the attacks relation.\nConcepts such as acceptability, conflict freeness and admissibility, originally defined\non DAFs are directly translatable to NAFs. By translating these concepts, extensions can\nbe defined on NAFs which are analogous to DAF extensions.\nOren\u2019s[12] evidential argument framework (EAF) is another framework based on\nDung\u2019s work, which also makes use of Nielsen\u2019s extensions to DAFs. Like a DAF, an\nEAF consists of a graph containing nodes representing arguments. An EAF also con-\ntains an additional, special argument \u03b7, which represents a default, or some form of un-\nquestionable evidence. Unlike a DAF, two types of edges exist between nodes, the first\nassociated with the attack relation, while the second represents support between argu-\nments (one interpretation of a support edge from \u03b7 to an argument is that the supported\nargument is true by default, or that some unassailable evidence for the argument exists.\nSupport between other arguments can imply that an inferential link exists between them).\nDefinition 5 (Evidential Argumentation Systems)\nAn evidential argumentation system is a tuple (A, Ra, Re) where A is a set of ar-\nguments, Ra and Re are relations of the form (2A \\ \u2205) \u00d7 A, and that within the argu-\nmentation system, @x \u2208 2A, y \u2208 A such that xRay and xRey. We assume the existence\nof a \u201cspecial\u201d argument \u03b7 \u2208 A, such that @(x, y) \u2208 Ra where \u03b7 \u2208 x; and @x where\n(x, \u03b7) \u2208 Ra or (x, \u03b7) \u2208 Re.\nThe introduction of the support relation means that concepts such as a successful\nattack between arguments, acceptability and admissibility, are computed in a different\nmanner to a DAF.\nA necessary condition for an argument to appear in an extension is that it is directly,\nor indirectly supported by some evidence; that is, there is a path from \u03b7 to the argument,\naccording to the edges of the Re relation.\nDefinition 6 (Evidential Support) An argument a has evidential support from a set S iff\neither SRea where S = {\u03b7} or\n\u2203T \u2282 S such that TRea and \u2200x \u2208 T , x has evidential support from S \\ {x}.\nS is a minimum support for a if a has evidential support from S and there is no\nT \u2282 S such that a is supported by T .\nIf a has evidential support from S, we may say that S e-supports a, or that a is e-\nsupported by S. Where obvious, we abbreviate e-support to support. The notion of attack\nrequires the attacking argument to be supported.\nDefinition 7 (Evidence Supported Attack) A set S carries out an evidence supported\nattack on an argument a ifXRaa whereX \u2286 S, and, all elements x \u2208 X are supported\nby S.\nAn evidence supported attack by a set S on a is minimal iff S carries out an evidence\nsupported attack on a, and there is no T \u2282 S such that T carries out an evidence\nsupported attack on a.\nFrom these basic concepts, we can define a number of auxiliary notions\nDefinition 8 (Auxiliary Notions for EAFs) An argument a is acceptable with respect\nto a set S iff S e-supports a, and for any minimal evidence-supported attack by a set\nX \u2286 2A against a, \u2203T \u2286 S such that TRax, where x \u2208 X so thatX \\ {x} is no longer\nan evidence-supported attack on a.\nA set of arguments S is conflict free iff \u2200y \u2208 S, 6 \u2203X \u2286 Ssuch that XRay.\nA set of arguments S is self supporting iff \u2200x \u2208 S, S e-supports x.\nAs in DAFs, a set of arguments is admissible if it acceptable and conflict free. We\ncan then define semantics for EAFs in an identical manner as for DAFs. For example, a\nmaximal admissible set of arguments is a member of the e-preferred extension.\nHaving provided a brief survey of DAFs, NAFs and EAFs, we proceed to show how\na set of arguments can be converted from one framework to another, with arguments\nfound in an extension in the original framework contained in an analogous extension in\nthe new framework.\n3. Converting Between Argument Frameworks\nIn this section, we show how sets of arguments may be represented in different argument\nframeworks. We show how DAFs may be converted to NAFs, and from there to an EAF,\nand then show how an EAF may be converted to a DAF.\nab\nc\u03b7 a\nb\nc\u03b7\nd\n\u03b7,a,c\n\u03b7,b\n\u03b7,a,c\n\u03b7,b,d\nFigure 1. Some possible mappings from an EAF (left) to an equivalent DAF (right). Solid lines represent\nsupport between arguments, dashed lines indicate attacks.\n3.1. Converting a DAF\/NAF to an EAF\nConverting an argument system from a DAF to a NAF is trivial, with the source argument\nset in the attack relation in the NAF containing only the source attacking argument in the\nDAF. For example, an attack on b by a in a DAF would be mapped to an attack on b from\n{a} in the analogous NAF.\nTo convert from a NAF to an EAF is also easy. The EAF contains all arguments and\nattacks from the NAF, together with argument \u03b7. \u03b7 then supports all other arguments in\nthe NAF. Intuitively, this transformation is possible due to the fact that without any extra\ninformation (which cannot be encoded into a NAF), we must assume that all arguments\nin the original argument system are either true by default, or have some evidence to\nsupport them (otherwise, the argument would not have appeared in the original NAF).\nConversion from a DAF to an EAF can then take place by first converting the DAF to a\nNAF, and then converting the NAF to an EAF.\nClearly, any argument attacked in the original argument framework is evidence sup-\nport attacked in the EAF. Also, if an argument is acceptable in the original framework\nwith respect to a set S, it is acceptable in the EAF with respect to the set S \u222a \u03b7. Sim-\nilarly, the notion of conflict free remains the same, implying that any argument admis-\nsible in the DAF or NAF is also admissible in the EAF. Given this, any argument in a\npreferred\/stable\/grounded extension is in the e-preferred\/e-stable\/e-grounded extension,\nand any argument not in a DAF or NAF extension is not in the EAF extension.\n3.2. Converting an EAF to a DAF\nThe notion of support, as well as the ability of multiple arguments to attack or support a\nsingle argument, makes mapping from EAFs and DAFs\/NAFs more difficult than map-\nping from DAFs\/NAFs to EAFs. In this section, we show a many to one mapping be-\ntween EAFs and DAFs. This mapping is many to one in the sense that many different\nEAFs can be converted to a DAF with identical graph structure. The goal of this con-\nversion is to preserve the EAF\u2019s semantics. That is, any argument that is within some\nextension within the EAF should be in an analogous extension with the DAF.\nOur approach centres around the mapping of a set of related arguments\u2014 informally\narguments taken together with their supporting arguments, recursively back to \u03b7 \u2014 into\na single DAF argument2. Consider, for example, the EAF and DAF shown on the left of\nFigure 1. Intuitively, This EAF can be converted into the DAF shown to the right of it3;\narguments \u03b7, a, c from the EAF are grouped into one argument within the DAF, while\n2If viewed as an argument\/subargument relationship, then the ideas of [8] are highly applicable.\n3When drawing EAFs and DAFs, arguments in the DAF are enclosed within ellipses. We omit set notation in\nthe source of support and attack relations in the EAF if the source of the support or attack is a single argument.\nAlgorithm 1 A simple algorithm to create a DAF with the same semantics as the EAF.\nRequire: An EAF (Args,Ra, Re)\n1: DARGS = {} %DAF arguments\n2: DATT = {} %DAF attacks\n3: for all A \u2208 2Args do\n4: if A is self supporting then\n5: Add A toDARGS\n6: end if\n7: end for\n8: for all (X, a) such thatXRaa do\n9: for allD \u2208 DARGS such thatX \u2286 D and A \u2208 DARGS such that a \u2208 A do\n10: Add (D,A) toDATT\n11: end for\n12: end for\n13: return (DARGS,DATT)\n\u03b7, b are grouped into another. This means that if \u03b7, b are found in some extension of the\nEAF, they also appear in an equivalent extension of the DAF, and vice-versa. The same\nholds for the remaining arguments, and thus, in the DAF, we have a single argument\n\u03b7, a, c composed of the EAF arguments \u03b7, a and c. The right hand EAF shown in Figure 1\nmaps to a DAF with the same structure as the left hand EAF in that figure. Thus, multiple\nEAFs can be represented as a DAF with identical graph structure.\nWe begin by describing a simple approach to performing the conversion between\nEAFs and DAFs. We then examine the properties of this conversion, to show that the\nsemantics of the EAF are preserved when transformed into a DAF. In Section 4, we\ndescribe refinements to this simple approach.\nAlgorithm 1 details the basic approach. This algorithm operates by generating all\npossible self supporting argument sets (SSAS), and utilises these SSASs as the resultant\nDAF\u2019s atomic arguments. Attacks in the DAF are generated according to whether an\nattack exists between elements of the two SSASs (Lines 8\u201312).\nWe can show two simple, but important properties for the algorithm, namely that\nattacks carry over between the EAF and DAF, and that admissibility also carries over.\nLemma 1 If an argument is e-support attacked in the original EAF, any SSAS containing\nthe argument is still attacked in the resultant DAF.\nProof: An e-supported attack must be part of a SSAS; since only self supporting sets of\narguments are copied into the DAF, all such e-supported attacks are copied (Line 5).\nOf course, if the attacked argument is not part of a SSAS, the attack against it are not\nbe copied, but in this case, there is no possibility that the argument is acceptable as\nacceptability within the EAF requires support. \u0003\nLemma 2 Given an EAF and the DAF derived from it according to Algorithm 1, a set\nof SSASs S\u2032 is admissible within the DAF if and only if all arguments found within\n\u22c3\nS\u2032\n(i.e. all arguments found in the set of SSASs) are admissible within the EAF.\nProof: If: Clearly, since S is admissible, there is some set of SSASs S\u2032 within the DAF\nmade up of subsets of S. Since S is conflict free, S\u2032is also conflict free. Thus, to show\nS\u2032 is admissible, we must show that it is acceptable. In other words, given a SSAS that\nattacks some s\u2032 \u2208 S\u2032, we must show that there is some SSAS s\u2032\u2032, made up of subsets of\nS, that attacks s\u2032.\nNow, within the EAF, for any attack XRas where X \u2286 Y and Y is a minimal self\nsupported set, for s to be acceptable w.r.t S, there must be some T \u2286 S that (e-support)\nattacks an element ofX , or (e-support) attacks an element of Y , thus causing the original\nattack to no longer be e-supported.\nSince, within the EAF, all attacks against s \u2208 S are e-supported, there are sets of\nSSASs Y1 . . . Yn within the DAF attacking all SSASs containing s.\nSince s is acceptable with respect to S, and S is self supporting, there must be some\nsubsets of arguments Ti \u2286 S that carry out an e-supported attack against Yj for all\nj = 1 . . . n.\nThus, if a set S is admissible within an EAF, there is a set of SSASs consisting of\nsubsets of S that are admissible within the DAF.\nOnly if clearly, S is self supporting. Furthermore, since S\u2032 is conflict free, there\nare no attacks between its elements, and S is thus also conflict free. Finally, since S\u2032 is\nadmissible, any attack against its members, say by a SSAS T , is attacked by a member\nof S\u2032. Since T is self supporting, the attack against T must either directly attack an\nargument that attacked an argument of S, or render T not self-supporting. Thus, each\nmember of S is acceptable with respect to S, and S is thus admissible. \u0003\nThis result means that any semantics based on admissibility (such as the grounded\nand preferred semantics) are preserved by Algorithm 1 when moving from an EAF to a\nDAF. The carry over of attacks also means that the stable semantics is preserved by the\ntranslation process.\n4. Eliminating Redundant Sets of Arguments\nGiven an EAF containing a minimal self supporting set of n arguments with no attacks\nagainst it, it is clear that on the order of 2n SSASs can be formed when using the simple\nalgorithm described above. All of these 2n SSASs would not be attacked in the resultant\nDAF, and if so all appear in the admissible set, with all of their component arguments\nbeing admissible in the original EAF. The removal of all but the maximal SSAS (with\nrespect to set inclusion) from the DAF has no impact on the arguments in the final group\nof admissible sets within the DAF, and thus, no information is lost if all non-maximal\nSSASs are removed from the DAF. In this section, we examine which SSASs must be\nkept so as to convey the information found in the original EAF.\nConsider a self supporting set of arguments {\u03b7, a, b} found as part of an EAF. If no\nattacks exist against this argument set, then, when converted into a DAF, it forms part of\nthe (for example) preferred extension, as do the SSASs {\u03b7, a} and {\u03b7}. The latter two\nSSASs are thus, in a sense, redundant. In fact, the only time a subset of the maximal\nSSAS can be found in an extension while the maximal SSAS may not be is when an\nargument within the maximal SSAS is attacked. Now instead, consider the argument set\n{\u03b7, a, b, c}, and assume that a, which is supported by \u03b7, supports bwhich in turn supports\nc. Now assume that an attack exists against argument b. In such a situation only two\nargument SSASs need be considered, namely the full SSAS (containing \u03b7, a, b and c)\nand the SSAS {a, \u03b7}. If the full SSAS is not in the extension, but the latter SSAS is, then\n{\u03b7} is also in the extension, while {\u03b7, a, b} will not be present. More formally (where by\nstatus, we mean whether the SSAS is admissible or not):\nAlgorithm 2 An algorithm for converting from an EAF to a DAF.\nRequire: An EAF (Args,Ra, Re)\n1: AC={all maximal self supporting argument sets of the EAF},Att={}\n2: for all (S, t) \u2208 Ra do\n3: Let TEAF = (Args\\{t}, Ra, Re)\n4: Add all maximal self supporting chains of TEAF to AC\n5: end for\n6: for all C \u2208 AC do\n7: for allD \u2208 AC do\n8: if (S, t) \u2208 Ra such that S \u2286 C, t \u2208 D then\n9: Add (c, d) to Att\n10: end if\n11: end for\n12: end for\n13: return (AC,Att)\na\nb\nc\u03b7 \u03b7,a,b,c\n\u03b7,b\na\nb\nc\u03b7 \u03b7,a,c\n\u03b7,b\nFigure 2. The EAF and the DAF that results from applying Algorithm 2 (left) and Algorithm 3 (right).\nLemma 3 Given a SSAS AS = {a1, . . . , an} and an attack against ai,\n1. All self supporting subsets that can be formed from AS\\{ai} have the same\nstatus (we label these subsets Si\u22121).\n2. All subsets of AS\\Si\u22121 have the same status.\nProof: The admissibility of a SSAS depends on whether it is attacked or not. Since Si\u22121\nare not attacked, their status is identical. Similarly, since all subsets of AC\\Si\u22121 are\nattacked, their status is identical. \u0003\nThus, a DAF containing only maximal SSASs, as well as subsets of the maximal\nSSASs, up to the point in which the set is attacked, is sufficient to represent the original\nEAF system. This result allows us to propose Algorithm 2 for converting from an EAF\nto a DAF. This algorithm, as with the algorithms proposed later, runs in polynomial\ntime. While correct in the sense that identical arguments appear in admissible sets within\nboth the EAF and DAF, This algorithm does yield some unintuitive results. Consider, for\nexample, the following EAF system:\n({\u03b7, a, b, c}, {(\u03b7, a), (\u03b7, b), (a, c)}, {(b, a)}) (1)\nAs shown on the left of Figure 2, applying this algorithm results in the DAF\n({\u03b1, \u03b2}, {(\u03b1, \u03b2), (\u03b2, \u03b2)}). Here, \u03b1 = {\u03b7, b} and \u03b2 = {\u03b7, a, b, c}. As expected, \u03b7 and b\nare admissible in both the DAF and EAF. However, as shown on the right of Figure 2, if\n\u03b2 = {\u03b7, a, c}, we obtain the same set of admissible arguments, and this representation\nof the interactions between arguments more closely agrees with our intuitions.\nThe fact that there is initially one maximal argument set, starting at \u03b7, is the source\nof this problem. In order to overcome this issue, we must adapt the manner in which we\nab\nc\u03b7 \u03b7,a,b,c,d\n\u03b7,b,dd\na\nb\nc\u03b7 \u03b7,a,c\n\u03b7,b,dd\n\u03b7,a,d\nFigure 3. The EAF and the DAF that results from applying Algorithm 3 (left) and Algorithm 5 (right).\nAlgorithm 3 An algorithm for computing maximal argument sets.\nRequire: AF = (Args,Ra, Re)\n1: MaximalChains = {}\n2: for all a \u2208 Args do\n3: maxChain = computeMaxSupportedSet(a, {\u03b7}, AF )\n4: ifmaxChain \u222a {\u03b7} is a self supporting chain then\n5: MaximalChains = MaximalChains \u222amaxChain \u222a {\u03b7}\n6: end if\n7: end for\n8: return MaximalChains\nmake use of \u03b7. For example, we could allow (conceptually) different versions of \u03b7 to sup-\nport different arguments, which in turn would allow for distinct sets of maximal SSASs\nto appear. In such a situation, each support relation from \u03b7 to another argument could\nbe replaced by a support from some new, unique, non-attacked, argument to the other\nargument. To achieve this, we change Lines 1 and 4 of Algorithm 2 to make use of Al-\ngorithm 3 when computing the SSASs. Constructing a maximal SSAS according to this\nalgorithm \u201cignores\u201d \u03b7 when forming argument sets. However, this is in fact equivalent to\nmaking use of a unique \u03b7 for each SSAS.\nWhen evaluated using the modified form of Algorithm 2, The EAF from Equation\n1 results in the DAF ({\u03b1, \u03b2}, {(\u03b1, \u03b2)}). Now, \u03b1 = {\u03b7, b} and \u03b2 = {\u03b7, a, c} (as shown\non the right of Figure 2), agreeing with our intuition. However, this algorithm still yields\ncounter-intuitive results in some situations. For example, given the EAF\n({a, b, c, d}, {(\u03b7, a), (\u03b7, b), (a, d), (a, c), (b, d)}, {(b, a)}) (2)\nthis algorithm would result in a DAF containing SSASs {\u03b7, a, b, c, d} and {\u03b7, b, d}, with\nattacks between the latter and former, and the first node attacking itself (shown on the\nleft of Figure 3). The independence of support between a, c and a, d means that a, c and\na, b, d should appear as separate nodes within the SSAS.\nBy assuming that a SSAS has a single argument as its conclusion, i.e. that a SSAS\nultimately provides support for only a single argument, we can use Algorithm 5 to cre-\nate a DAF from an EAF in a more intuitive manner. This algorithm computes (using\nthe computeBackSet() described in Algorithm 6) all possible SSASs that have some\nargument a as their single conclusion, for all arguments in the system. Any SSAS not\ncontaining \u03b7 is removed. Finally, any SSAS that is a subset of another SSAS is removed,\nleaving maximal SSASs, which can then be used in Lines 1 and 4 of Algorithm 2.\nAlgorithm 5 returns a DAF containing the SSASs {\u03b7, a, c}, {\u03b7, a, d} and {\u03b7, b, d} as\narguments when evaluated on the EAF from Equation 2. This, together with the attacks\nfound in the DAF, is illustrated on the right of Figure 3.\nAlgorithm 4 computeMaxSupportedSet(a,Visited ,AF )\nRequire: An argument a, a set of nodes V isited \u2286 Args, an EAF AF = (Args,Ra, Re)\n1: Answer = {a}, T oV isit = {}, V isited = V isited \u222a {a}\n2: for all B \u2286 Args such that (B, a) \u2208 Re do\n3: ToV isit = ToV isit \u222aB\n4: end for\n5: for all c \u2208 Args such that ({. . . , a, . . .}, c) \u2208 Re do\n6: ToV isit = ToV isit \u222a c\n7: end for\n8: for all d \u2208 ToV isit\\V isited do\n9: Answer = Answer \u222a computeMaxSupportedSet(d, V isited,AF )\n10: end for\n11: return Answer\nAlgorithm 5 Algorithm to generate a DAF from an EAF.\nRequire: An EAF AF = (Args,Ra, Re)\n1: for all a \u2208 Args do\n2: Answer = Answer \u222a computeBackSet(a, {}, AF )\n3: end for\n4: for all AS \u2208 Answer do\n5: if \u03b7 \/\u2208 AS then\n6: Answer = Answer\\{AS}\n7: end if\n8: if \u2203AS\u2032 \u2208 Answer such that AS \u2286 AS\u2032 then\n9: Answer = Answer\\{AS}\n10: end if\n11: end for\n12: return Answer\nAlgorithm 6 computeBackSet(a, V isited,AF )\nRequire: An argument a, a set of visited edges V isited \u2286 Re, an EAF AF = (Args,Ra, Re)\n1: for all (X, a) \u2208 Re such that (X, a) \/\u2208 V isited do\n2: B = \u00d7xicomputeBackSet(xi, V isited \u222a {(X, a)}, AF ) for xi \u2208 X\n3: for all b \u2208 B do\n4: b = b \u222a {a}\n5: end for\n6: Ans = Ans \u222aB\n7: end for\n8: return Ans\n5. From AIF to EAF\nHaving described how translation between DAFs, NAFs and EAFs is possible, we now\nexamine the argument interchange format (AIF), a RDF based ontology for the repre-\nsentation of argument related concepts. As discussed below, a simple mapping exists\nbetween a subset of AIF and EAF. By utilising this mapping, we can translate between\nany argument system using this subset of AIF, and the three argumentation frameworks\ndescribed in this paper. We begin this section by providing a brief introduction to AIF,\nfollowing which we show how translations between EAFs and AIFs can take place.\nAIF assumes that arguments can be represented as nodes in a directed graph, and\nmakes use of two types of nodes: I-nodes, which hold data, and S-nodes, which represent\n\u201cthe inferential passage associated with an argumentative statement\u201d [13]. S-nodes fall\ninto one of three categories: RA-nodes, which represent the application of a rule of infer-\nence; PA-nodes, which represent some preference ordering; and CA-nodes, which rep-\nresent conflict between information. I-Nodes may not have edges linking them to other\nI-Nodes, while S-Nodes may link to any node. In this paper, we examine a subset of\nAIF, considering only RA and CA nodes, and assume that S-Nodes are linked only to\nI-Nodes. While this restriction appears severe, many natural language oriented argument\nsystems, such as Araucaria [14] make use of such simplified AIF graphs.\nFrom the foregoing discussion, it should be clear that there are strong similarities\nbetween RA-nodes and support in an EAF, and CA-nodes and the notion of an attack.\nMoving between an AIF representation of an argument system and an EAF is thus sim-\nple: let the set of arguments be the set of I-Nodes (together with the additional argument\n\u03b7); add an element ({a1, . . . , an}, b) into Ra if there is a set of edges from a1, . . . , an to\na CA-Node c, and another edge from c to b; and add an element ({a1, . . . , an}, b) into\nRs if there is a set of edges from a1, . . . , an to a RA-Node c, and another edge from c\nto b. Finally, add an edge from \u03b7 to any I-Node which does not have an edge leading to\nit that originates at an RA-Node. This last step makes the assumption that the I-Node is\neither true by default, or has some support from unassailable evidence. If the AIF graph\nencodes such evidential notions, then this last step is not necessary.\nSimilarly, it is trivial to represent an EAF in AIF; the set of I-Nodes is derived from\nthe set Args; for every element of (A, b) \u2208 Ra, create an CA-Node with edges going\nto the CA-Node from all elements of A, and an edge from the CA-Node to b. Finally, a\nsimilar operation can be performed when creating RA-Nodes. Any argument framework\nthat may be mapped to the subset of AIF used here can be mapped to an EAF, and thus\nto a DAF\/NAF, and vice-versa.\n6. Discussion and Conclusions\nIn this paper, we have described semantics preserving translations between DAFs, NAFs\nand EAFs. We also presented a number of algorithms for performing these translations.\nDifferent algorithms made different assumptions about the nature of groups of argu-\nments, and yielding different, but equivalent DAFs. The fact that multiple EAFs may be\nrepresented as a single DAF is interesting; this result indicates that the notion of support\nadds information to an argument system which cannot be captured in a DAF alone, due\nto the DAF\u2019s more abstract nature.\nIn this work, we focused on the preferred, stable and grounded semantics, due to\ntheir widespread use. These semantics are based on the notion of admissibility, and since\nour results show the equivalence of admissibility between different frameworks, our work\nis applicable to any other admissibility based semantics. We intend to investigate the\neffects of translation on additional semantics as part of our future work.\nWe also intend to extend the translation process to preference and value based ar-\ngument frameworks [1,3]. Apart from EAFs, bipolar argument frameworks (BAFs) are\nanother approach to including support into abstract argument frameworks [2]. While [5]\ndiscusses how EAFs can be translated into BAFs, we hope to investigate how a BAF\nmay be translated into an EAF. Other work that deals with translating between disparate\nargument frameworks includes [10], which shows how preference type argument frame-\nworks can be represented within his extended argument framework [9]. Finally, in [4], the\nauthors show how a DAF can be directly translated into a bipolar argument framework.\nWe showed how EAF can be mapped into a subset of AIF. The ability to map an\nAIF argument structure into an EAF, and then move from there into other frameworks\nallows translation between many disparate frameworks while preserving the semantics\nof the argument set. Two related pieces of future work that we intend to investigate\ninvolve examining translations between additional frameworks and EAF, and extending\nthe subset of AIF that we can map into an EAF.\nAdditionally, we intend to examine additional algorithms for performing translation\nbetween different systems. As seen here, different approaches make sense when different\nassumptions are made, and additional algorithms with pleasing intuitive properties may\nexist for the EAF to DAF case. We would like to see if such algorithms can be identified.\nReferences\n[1] L. Amgoud and C. Cayrol. Integrating preference orderings into argument-based reasoning. In EC-\nSQARU\/FAPR \u201997: Proceedings of the First International Joint Conference on Qualitative and Quanti-\ntative Practical Reasoning, pages 159\u2013170, London, UK, 1997. Springer-Verlag.\n[2] L. Amgoud, C. Cayrol, and M.-C. Lagasquie-Schiex. On the bipolarity in argumentation frameworks.\nIn Proceedings of the 10th International Workshop on Non-monotonic Reasoning, pages 1\u20139, Whistler,\nCanada, 2004.\n[3] T. Bench-Capon. Value based argumentation frameworks. In Proceedings of the 9th International\nWorkshop on Nonmonotonic Reasoning, pages 444\u2013453, Toulouse, France, 2002.\n[4] C. Cayrol and M.-C. Lagasquie-Schiex. On the acceptability of arguments in bipolar argumentation\nframeworks. In Pro. of the Eighth European Conference on Symbolic and Quantitative Approaches to\nReasoning With Uncertainty, volume 3571 of LNAI, pages 378\u2013389. Springer-Verlag, 2005.\n[5] C. Cayrol and M.-C. Lagasquie-Schiex. Bipolar Abstract Argumentation Systems. In I. Rahwan\nand G. Simari, editors, Argumentation in Artificial Intelligence, chapter 4, pages 65\u201384. Springer,\nhttp:\/\/www.springerlink.com, 2009.\n[6] C. Chesn\u02dcevar, J. McGinnis, S. Modgil, I. Rahwan, C. Reed, G. Simari, M. South, G. Vreeswijk, and\nS. Willmott. Towards an argument interchange format. Knowl. Eng. Rev., 21(4):293\u2013316, 2006.\n[7] P. M. Dung. On the acceptability of arguments and its fundamental role in nonmonotonic reasoning,\nlogic programming and n-person games. Artificial Intelligence, 77(2):321\u2013357, 1995.\n[8] D. C. Mart\u0131\u00b4nez, A. J. Garc\u0131\u00b4a, and G. R. Simari. Progressive defeat paths in abstract argumentation\nframeworks. In Canadian Conference on AI, pages 242\u2013253, Que\u00b4bec, Canada, 2006.\n[9] S. Modgil. An abstract theory of argumentation that accommodates defeasible reasoning about prefer-\nences. In ECSQARU \u201907: Proceedings of the 9th European Conference on Symbolic and Quantitative\nApproaches to Reasoning with Uncertainty, pages 648\u2013659, Berlin, Heidelberg, 2007. Springer-Verlag.\n[10] S. Modgil. Reasoning about preferences in argumentation frameworks. Artificial Intelligence, 173(9\u2013\n10):901\u2013934, 2009.\n[11] S. H. Nielsen and S. Parsons. A generalization of Dung\u2019s abstract framework for argumentation: Arguing\nwith sets of attacking arguments. In Proceedings of the Third International Workshop on Argumentation\nin Multi-Agent Systems, pages 7\u201319, Hakodate, Japan, 2006.\n[12] N. Oren and T. J. Norman. Semantics for evidence-based argumentation. In Computational Models of\nArgument: Proceedings of COMMA 2008, pages 276\u2013284, Toulouse, France, 2008.\n[13] I. Rahwan, F. Zablith, and C. Reed. Laying the foundations for a world wide argument web. Artif. Intell.,\n171(10-15):897\u2013921, 2007.\n[14] C. A. Reed and G. W. A. Rowe. Araucaria: Software for argument analysis, diagramming and represen-\ntation. Int. Journal of AI Tools, 14(3-4), 2004.\n"}