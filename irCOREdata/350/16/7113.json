{"doi":"10.1080\/0968776930010206","coreId":"7113","oai":"oai:generic.eprints.org:144\/core5","identifiers":["oai:generic.eprints.org:144\/core5","10.1080\/0968776930010206"],"title":"Early experiences of computer\u2010aided assessment and administration when teaching computer programming","authors":["Benford, Steve","Burke, Edmund","Foxley, Eric","Gutteridge, Neil","Zin, Abdullah"],"enrichments":{"references":[{"id":193807,"title":"Academics' use of courseware materials: a survey',","authors":[],"date":"1993","doi":"10.3402\/rlt.v1i1.9462","raw":"Laurillard, D., Swift, B. and Darby, J. (1993), 'Academics' use of courseware materials: a survey', Association for Learning Technology Journal, 1,1.","cites":null},{"id":193808,"title":"Automatic Program Quality Assessment System',","authors":[],"date":"1991","doi":null,"raw":"Zin, A.M. and Foxley, F. (1991), 'Automatic Program Quality Assessment System', Proceedings of the IFIP Conference on Software Quality, S P University, Vidyanagar, India (March).","cites":null},{"id":193806,"title":"Learning to construct quality software with the Ceilidh system',","authors":[],"date":"1993","doi":"10.1007\/bf00402268","raw":"Benford, S., Burke, E. and Foxley, E. (1993), 'Learning to construct quality software with the Ceilidh system', The Software Quality Journal.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"1993","abstract":"This paper describes early experiences with the Ceilidh system currently being piloted at over 30 institutions of higher education. Ceilidh is a course\u2010management system for teaching computer programming whose core is an auto\u2010assessment facility. This facility automatically marks students programs from a range of perspectives, and may be used in an iterative manner, enabling students to work towards a target level of attainment. Ceilidh also includes extensive course\u2010administration and progress\u2010monitoring facilities, as well as support for other forms of assessment including short\u2010answer marking and the collation of essays for later hand\u2010marking. The paper discusses the motivation for developing Ceilidh, outlines its major facilities, then summarizes experiences of developing and actually using it at the coal\u2010face over three years of teaching","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/7113.pdf","fullTextIdentifier":"http:\/\/repository.alt.ac.uk\/144\/1\/ALT_J_Vol1_No2_1993_Early_experiences_of_computer_.pdf","pdfHashValue":"8d1b0afb44ab597f8147fa88dd2e6a524a624f8d","publisher":"Universit of Wales Press","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:generic.eprints.org:144<\/identifier><datestamp>\n      2011-04-04T09:27:35Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D4C:4C42<\/setSpec><setSpec>\n      7375626A656374733D4C:4C43:4C4331303232<\/setSpec><setSpec>\n      74797065733D61727469636C65<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/repository.alt.ac.uk\/144\/<\/dc:relation><dc:title>\n        Early experiences of computer\u2010aided assessment and administration when teaching computer programming<\/dc:title><dc:creator>\n        Benford, Steve<\/dc:creator><dc:creator>\n        Burke, Edmund<\/dc:creator><dc:creator>\n        Foxley, Eric<\/dc:creator><dc:creator>\n        Gutteridge, Neil<\/dc:creator><dc:creator>\n        Zin, Abdullah<\/dc:creator><dc:subject>\n        LB Theory and practice of education<\/dc:subject><dc:subject>\n        LC1022 - 1022.25 Computer-assisted Education<\/dc:subject><dc:description>\n        This paper describes early experiences with the Ceilidh system currently being piloted at over 30 institutions of higher education. Ceilidh is a course\u2010management system for teaching computer programming whose core is an auto\u2010assessment facility. This facility automatically marks students programs from a range of perspectives, and may be used in an iterative manner, enabling students to work towards a target level of attainment. Ceilidh also includes extensive course\u2010administration and progress\u2010monitoring facilities, as well as support for other forms of assessment including short\u2010answer marking and the collation of essays for later hand\u2010marking. The paper discusses the motivation for developing Ceilidh, outlines its major facilities, then summarizes experiences of developing and actually using it at the coal\u2010face over three years of teaching.<\/dc:description><dc:publisher>\n        Universit of Wales Press<\/dc:publisher><dc:date>\n        1993<\/dc:date><dc:type>\n        Article<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        application\/pdf<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/repository.alt.ac.uk\/144\/1\/ALT_J_Vol1_No2_1993_Early_experiences_of_computer_.pdf<\/dc:identifier><dc:identifier>\n          Benford, Steve and Burke, Edmund and Foxley, Eric and Gutteridge, Neil and Zin, Abdullah  (1993) Early experiences of computer\u2010aided assessment and administration when teaching computer programming.  Association for Learning Technology Journal, 1 (2).  pp. 55-70.  ISSN 0968-7769     <\/dc:identifier><dc:relation>\n        10.1080\/0968776930010206<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/repository.alt.ac.uk\/144\/","10.1080\/0968776930010206"],"year":1993,"topics":["LB Theory and practice of education","LC1022 - 1022.25 Computer-assisted Education"],"subject":["Article","PeerReviewed"],"fullText":"Early experiences of computer-aided assessment\nand administration when teaching computer\nprogramming\nSteve Benford, Edmund Burke, Eric Foxley, Neil Gutteridge\nand Abdullah Mohd Zin\nDepartment of Computer Science, University of Nottingham, University Park,\nNottingham NG7 2RD\nAbstract\nThis paper describes early experiences with the Ceilidh system currently being\npiloted at over 30 institutions of higher education. Ceilidh is a course-management\nsystem for teaching computer programming whose core is an auto-assessment\nfacility. This facility automatically marks students programs from a range of\nperspectives, and may be used in an iterative manner, enabling students to work\ntowards a target level of attainment. Ceilidh also includes extensive course-\nadministration and progress-monitoring facilities, as well as support for other forms\nof assessment including short-answer marking and the collation of essays for later\nhand-marking. The paper discusses the motivation for developing Ceilidh, outlines\nits major facilities, then summarizes experiences of developing and actually using it\nat the coal-face over three years of teaching.\nIntroduction\nAssessment and feedback are key aspects of the educational process. This is particularly true\nwhen learning practical skills where hands-on experience is of critical importance. Computer\nprogramming is one such skill. Indeed, like riding a bicycle or playing the piano, it is not\npossible to learn to program a computer without extensive practical experience. However,\ncomputer programs are also notoriously difficult to assess by traditional methods such as\nhand-marking printed output. Firstly, it is virtually impossible to tell by visual inspection of a\nprogram source whether it will run at all, let alone whether it will run as required. Detailed\nassessment using print-outs is simply out of the question. Secondly, program development is\nan iterative process, often involving many cycles of development and testing. Hand-marking is\ntoo slow to help in this process. These problems are exacerbated by increasing student\n55\nSteve Benford et ah Computer-aided assessment and administration\nnumbers, particularly on first-year programming courses where class sizes in excess of a\nhundred are common. A dedicated lecturer teaching such a course would be hard pressed to\nmanage one iteration of one exercise a week, even if he or she had little else to do. One\npossible solution to this problem may be for a group of people (for example, postgraduate\nassistants) to mark the solutions. However, this often leads to inconsistencies in the level of\nmarks awarded, and drastically increases the administrative burden.\nOf course, such problems are not confined to the realm of computer programming, and there\nare a number of more general problems with hand-marking paper scripts. Scripts can easily\nget lost, detached or damaged. Marking on paper is inappropriate for most computer-based\nlearning (not just for programming). Administration of assessment is a time-consuming\nprocess, made more difficult by having to deal with large quantities of paper. Finally, there is\nincreasing pressure to save paper. Our solution to these problems has been to explore the role\nof the computer in directly assessing students' programs. To this end, we have constructed a\nsystem called Ceilidh based on an automatic assessment mechanism which tests programs\nfrom several perspectives, including dynamic correctness (i.e. do they work?) and\nprogramming style and complexity (i.e. are they elegant solutions?). Ceilidh also supports\ncourse administration by providing facilities for setting exercises, handing in all types of work\nonline, handing out solutions, dealing with questions, and tracking and summarizing progress.\nThe idea of automatically assessing computer programs has direct parallels in industry where\nautomated test-harnesses and software quality-control environments are becoming increasingly\ncommon. Thus, Ceilidh provides students with valuable experience of working in a quality\ncontrolled environment. Ceilidh also aims to support the administration and assessment of a\nrange of courses beyond programming. To this end, we have begun experimenting with other\ncomplementary assessment techniques, including multiple-choice and short-answer marking.\nThe first version of Ceilidh was developed in 1988 and used to support a C programming\ncourse. The second phase of development was funded through Nottingham University's\nEnterprise in Higher Education (EHE) initiative, and resulted in Ceilidh being used to support\na C++ course for a class of 160 in the 1991\/92 session. At present, Ceilidh is at the centre of\na UFC Teaching and Learning Technology Programme (TLTP) project - Courseware for the\nAutomatic Assessment of Programming - which aims to pilot the system at over 30\ndepartments of Computer Science throughout the UK in the next three years. Ceilidh has also\nbeen installed at sites in North America, Australia, Belgium, India, Malaysia, New Zealand,\nPortugal, Russia and Spain. Beyond this, Ceilidh should be of interest within the many other\ndisciplines involved in teaching computer programming (particularly in engineering and\nscience) and also computer centres which are often heavily involved in service teaching. The\nadministrative side of Ceilidh might also interest a much broader range of people.\nOverview of Ceilidh\nLet us begin with an overview of the functionality of the Ceilidh system, starting with a\nhigh-level summary of the functions available, and moving on to a more detailed examination\nof the steps involved in setting up, completing and marking a programming exercise. The\nlogical structure of the Ceilidh system is summarized in Figure 1.\nCeilidh can support a number of on-going courses. Each course is divided into units\nrepresenting different chapters or topics. Each unit may include a number of exercises which\nmay be programming exercises, short-answer questions or essay questions. Of these,\n56\nALT-J VOLUME 1 NUMBER 2\nCEILIDH\nCourse Course Course\nUnit Unit Unit\nStaff,\nstudent\ntutor,\nlists\nCourse\nsummary Weights\nExercise Exercise Exercise Notes\nSolutions Questions Model\nsolutions Tests\n1\n1\u2014\u2022\u20141\nAnswer\nMarks\nFigure 1: The Ceilidh information structure\nprogramming and short-answer exercises are supported by automated assessment facilities.\nEssay-style exercises include facilities for online collection of work for later paper\nhand-marking.\nThe overall functionality of Ceilidh is categorized according to four different classes of user:\nstudents, tutors, teachers and course developers. Students use the system to obtain, complete\nand mark work, and to access course resources such as notes, work and lecture schedules and\neven the teachers. Tutors represent teaching assistants, and are provided with additional\n57\nSteve Benford et ah Computer-aided assessment and administration\nfacilities to inspect work and to summarize the progress of individuals or groups of students.\nTeachers are provided with facilities to administer entire courses. Course developers can\namend the course information including notes, exercises and test data. We now consider each\nclass of user in turn.\nStudent facilities\nCeilidh provides the following key facilities to students:\n(i) It allows students to view general temporal course information such as hand-in times\nfor coursework and more permanent information such as lecture notes. This information\ncan be viewed on-line or to be printed.\n(ii) It provides access to the questions set in exercises.\n(iii) It offers outline program source (skeleton programs to be completed by students),\nand associated modules and header files for exercises where appropriate, to assist in the\nsolution of programming exercises. For an essay exercise, an outline of the main\nsections\/heading expected in the essay may be given.\n(iv) It allows students to edit, compile and test-run their computer programs. The extent\nto which compilation details are hidden from the student is determined by the teacher.\n(v) The students can submit their work to the system. If the exercise is programming, the\nsystem will mark their program. A summary of the marks is made available to the\nstudents to help them assess their program quality (and a copy of the program and of the\nmarks awarded is retained centrally for later reference). Marking can take place many\ntimes providing an iterative process of development and assessment. If the exercise is an\nessay, the system simply stores a copy of the solution.\n(vi) It allows them to view a model solution, to run this solution, to view test data and to\nrun both their own solution and the model solution against the test data. The model\nsolution can be seen only after the deadline for submission has passed.\n(vii) It allows them to comment on a specific exercise or on the system as a whole.\nComments are stored for later browsing by teachers.\n(viii) It offers help facilities, including an overview of the marking metrics employed by\nthe system and a good programming style guide.\nTutor facilities\nCeilidh provides tutors with the following additional facilities:\n(i) List details of the work submitted by all of the tutor's students, or by any named\nstudent. For each item of coursework, the listing gives a summary of the marks awarded \u2022\nand the tune at which it was submitted, including whether it was early or late. Details of\nthe work, such as the program source code and a more detailed breakdown of the marks,\ncan be inspected if requested.\n(ii) List the names of students who have not submitted work, or who have submitted late.\n(iii) List the marks awarded to students for a particular exercise.\n(iv) Summarize the average marks across all the exercises on a given course.\n58\nALT-J VOLUME 1 NUMBER 2\nTeacher facilities\nCeilidh provides teachers with the following additional facilities:\n(i) Declare certain exercises to be open. These are the exercises on which the student will\nbe expected to work.\n(ii) Declare certain previously opened exercises to be late. Students submitting after this\ndate will be warned that their work is late. For each exercise made late, the teacher will\nbe invited to request plagiarism tests, and overall class software metrics. The latter is\nparticularly important to enable the teacher to keep in close touch with the class progress,\nand its strengths and weaknesses.\n(iii) Declare certain exercises to be dosed. Students will no longer be able to submit\nwork for these exercises.\n(iv) Teachers can browse and respond to the students' comments.\n(v) Set weighting and scaling factors so as to calculate final assessments from marked\nexercises in any desired way.\nCourse developer facilities\nCeilidh provides course developers with the following additional facilities:\n(i) Create new coursework, or amend existing coursework. The system prompts the user\nto ensure that all the necessary data items have been input (see below).\nSelect \u00abode of operation:\nFor fill Student*\nFor All Tutees\nFor Haaed student\nJEdlt Course HOTD ) |Vien Registerc:Introduction to Programing In C {Eric Fox\ncua:Co*>utar Use and Applications {Steve Benford)\nlcp:Introduction to C++ programing (Dr PR Eduards): the nuts and bolts\n\u2022c;lntroductlon to Programing In C <Erlc Foxley, Haths\npe*:Pe\u00bbc*l Programing {by Royal Hollouay College)\nprl;Introductlon to C++ programing (Eric Fox ley ) : the nuts and bolts\nprZ:C+* programing part 2 (Steve Benford); Programing In the large\nlc testing\n[Edit Course Sumanj] [Edit Register\n: Introduction to UNIX (Eric Fox ley): T\nFigure 2: Ceilidh X-Windows interface\n59\nSteve Benford et al Computer-aided assessment and administration\n(ii) Set up new courses and manage registers of tutors and students. The various different\nroles within the Ceilidh system are illustrated in the screen dump of the X-Windows\ninterface in Figure 2.\nCompleting exercises\nLet us consider in more detail the steps involved when a student completes a specific exercise.\nWe will consider programming exercises as these currently form the core of Ceilidh's work.\nThe student selects the exercise to be tackled (a default is usually set by the teacher) and reads\nthe specification (the programming term for the question). Specifications form a reasonably\ncomplete description of the problem to be tackled, and may vary greatly in complexity and\ndifficulty. Figure 3 shows a student viewing an early C++ exercise, and the skeleton file\nprovided.\nLater in the course, specifications may run to several pages, including descriptions of C++\nclass definitions to be implemented or used, and details of exception states. The goal at this\nstage is to develop the students' ability to work to specification. More advanced tasks might\ntypically involve implementing a C++ class to work with a given interface program, writing a\nprogram to use a given class, or writing a program which combines several given classes. For\nexample, the following specification might be given later on in our C++ course:\nA telephone book consists of an arbitrarily long collection of entries where each entry\ncontains a name and a number. Users can add new entries, delete entries, look up a\nnumber belonging to a specific name, and produce an alphabetical listing of the whole\ntelephone book. A telephone book can be represented by a 'Phonebook' Abstract Data\nType which could be implemented in C++ as a 'Phonebook' class.\nThe following is an outline class definition for a simplified 'Phonebook' class.\nOutline C++ class definition here\nThe following details should be carefully noted:\n* A number of status codes are defined to be returned by Phonebook methods.\n* Each person is limited to having a maximum of one entry (meaning that a person's\nname can only appear in one entry).\n* A name cannot be the empty string.\n* A phone number must consist of digits in the range 0-9 inclusive, and must be exactly\nNUMBER_LENGTH digits long.\n* The overloaded < operator produces a list of all entries currently in the Phonebook.\nThis list should be alphabetically ordered by name.\nThe status codes have the following meanings:\nOK - operation completed successfully.\nBAD_NAME - the supplied name has the wrong format.\nBAD_NUMBER - the supplied number has the wrong format.\nALREADY_EXISTS - an entry for this person already exists.\nDOES_NOT_EXIST - there is no entry for this person.\n60\nALT-J VOLUME 1 NUMBER 2\nFrom this example, one can deduce that the current emphasis of Ceilidh is on encouraging\nstudents to produce correct programs from existing specifications. Ceilidh may offer students\nvarying levels of support for developing their programs including skeleton implementation\nfiles which provide common definitions and outline code, invocation of editors, automatic\ncompilation and linking and even automatic running of their program against test data. The\nlevel of support provided can be tailored by the teacher throughout the course. Thus, at one\nextreme, Ceilidh can provide a fully integrated implementation environment which completely\nshields the student from the details of the operating system, and at the other the student can be\nexposed to all the details of compiling and linking (in our case at the Unix operating-system\nlevel). A half-way house is also possible where Ceilidh invokes the necessary operating-\nsystem commands but also echoes them back to the student. At any stage throughout\ndevelopment, students can request the system to mark their program. A variety of standard\nsoftware metrics are used, combining dynamic and static analysis techniques - these are more\nfully described in Zin (1991) and Benford (1993).\nPROOWHING CXERCISE\/EXflHPLE\nJ {View Solution] |Te\u00bbt I\nk Sobitt) [Copa Solution! 1 Opt It\n|Help|\nJQutt\nCOURSE : p r l\n|S\u00abl\u00abCt C [Solact Unit I\n[Unit\n|Select Exarcl\u00aba 1\n|vi\u00abw Question\nSelect E\u00bb<rclw\nof * circle\n2:Seconds to hoc*-*, plnutes \u00abnd \u00abecond\u00ab\n3;Use of \"slzeoF\"\nCalslue\n6:CantiMtrM to feet end Inches\n7;ftdd tiMes together\n\/ \/ Convert feet and inches to centinetres\n' Written by EF 1988\nconst Int INSPERFT \u00ab 12;\nconst float O1SPERIN \u2022 2.54;\nfloat cms, ins;\nInt ft;\ncout \u00ab \"Type feet and Inches: \";\ncln \u00bb f t \u00bb Ins;\nlUlllllllllllllllllllllllllllllllllllllll\n\/ \/ Put ycx\u00bb* progran Instructions here\n'\/llllllllllllllllllll\/lli\/llllllllllllllll\ncout \u00ab ft \u00ab \" feet \" \u00ab Ins \u00ab \" IrchBS Is \" \u00ab ctis \u00ab} \/ \/ End rain i\\n\";\nWrite \u00ab proeran to read a nurber of feet (Inteser) and inches (float)\nand print the equivalent nurtaer of centimetres (float).\nAssune 2.54 eentlratrss per Inch.\nIf you want to be clever, add the fol lowing features:\nNegative quantities of InchBs are not permitted,\nInches greater than or equal to twelve are not permitted,\nprint a nessage containing the word \"error\" If this rule Is broken.\nNegative numbers of feet are assuned to negate the whole result.\nPrint your output in thB fom\n12 feet 9.5 Inches is 3S9.89 ens\nFigure 3: Student viewing a question and skeleton program\nA summary of the marks is made available to the students to help them assess their program's\nquality, and a common question concerns how the system helps students to identify the\nproblems with their program given the relatively terse summary of marks. The answer is that\nCeilidh does not try to identify what a problem is in detail - it only reports that there is one\nand roughly what it is. The student is then expected to go back to his or her program and\nfigure out what is going on, usually by more extensive testing on his or her own. This seems\nquite satisfactory, since the goal of the system is to aid the learning process, not to provide an\ninstant solution. However, we recognize that determining an appropriate level of feedback is a\n61\nSteve Benford et al Computer-aided assessment and administration\ndifficult issue, particularly in relation to the tightness of the specification and the generality of\nthe test data. Ceilidh leaves all these factors configurable to some degree.\nA key feature of Ceilidh is that students can re-mark their work as many times as they like,\nalthough a teacher may optionally impose a minimum time-delay between markings. The\nsystem maintains a record of the full mark history for each piece of work, including the date\nand time of submission. A copy of the current program is also held for later analysis. On\nsubmission, the system notes whether the coursework is late and, if it is, asks the student if he\nor she still wishes to go ahead with submission. It also asks if he or she wishes to comment\non the mark. Short-answer exercises are different in that the student is presented with an\non-line test in the form of a set of short questions. Ceilidh then reads simple answers in the\nform of words, phrases or maybe whole sentences, and matches them against keywords\nsupplied by the teacher. Marks are recorded by the system.\nEssay exercises involve the student reading the question and perhaps being given a skeleton\nessay to complete which can be submitted back to the system when ready. The teacher may\nthen hand-mark the essays and enter the marks back into Ceilidh for subsequent processing.\nSetting up exercises\nIn order to set up an exercise, the course developer needs to provide a number of files:\n(i) A question\/specification.\n(ii) A working model solution or model answer.\n(iii) A file of test data for each of the dynamic tests to be carried out in programming\nexercises. Test data may either take the form of raw data to be input to the program, or\nmay take the form of a Unix shell script which can be used to drive the program in a\nmore flexible way.\n(iv) A file of 'keywords' for each test. These are matched against the program output for\nprogramming exercises and against the students' responses for short-answer exercises.\nThe keywords are actually Unix regular expressions to be matched against the program's\noutput. The use of regular expressions offers a high degree of flexibility in making this\ncomparison. For example, the expressions:\nft|feet\nins|inches\n[Ee]rror\nmight appear in the keywords for a distance conversion problem. Once again we can see that\nthe teacher needs to strike a careful balance between tightness of specification and flexibility\nof testing.\nFinally, the teacher needs to provide a mark-weighting file which assigns a name and relative\nmark-weighting to each test involved. Such a file for a simple distance problem might be:\n15 Simple test\n15 Simple test\n20 Check \"feet\" \" ins\"\n62\nALT-J VOLUME! NUMBER 2\n25 Inches > 12\n25 Negative inches\nThe teacher may also configure the relative weighting of style and complexity tests if\nrequired, and may even alter the relative weightings of the various software metrics used.\nMonitoring progress\nBoth teachers and tutors have the ability to track the progress of individuals or groups of\nstudents. This is supported by a statistical summary package within Ceilidh. Three kinds of\nsummary can be produced.\n(i) A student summary shows the progress of an individual student over a given course.\nThis includes displaying his or her mark for each exercise along with the class average. It\nalso includes the number of submission attempts per exercise, thus providing some\nindication of how hard the student found the exercise.\n(ii) An exercise summary displays the distribution of student marks for a given exercise,\nincluding the number of submission attempts per student.\n(iii) A course summary displays the average marks across the whole course, as well as\nthe average number of submissions across the whole course.\nThese facilities are available to tutors and teachers. Students are encouraged to obtain a\nstripped-down personal summary of their own progress across a course. Summaries may be\npresented as tables or as graphs which may appear on-screen or be printed. Facilities are also\nH Gnuplot\nPercentage\n100\n80\n60\n40\n20\ni\nStudent zvc Harks and Group\n\u2022-*\n\"]\"J \u2022-1 \u2014 \\ ._,\nL.I 1.2 2.5 2.6 2.7 3.2 3.6 3.7 4.3 4.4 4.5 5.1 5.2\nUnit.Exercise\nm\nAverages\n\u2022-1 -I\n5.5 6.1 6.4 6.6 7.1 7.5 7.6 8.2 8.3\nFigure 4: Student summary - mark (solid) against class average (dashed) for all\nexercises\n63\nSteve Benford et al Computer-aided assessment and administration\nprovided to batch-print summaries for each student on the course. For example, at\nNottingham, we have established the practice of mailing summaries to all tutors on a\nfortnightly basis. Figure 4 shows a typical student summary.\nThe plagiarism detection tool provides a quite different kind of summary. This facility takes\nall the solutions for a given exercise and compares them, looking for similarities. It reports\nboth near-misses and what it believes to be exact matches. The facility is quite sophisticated\nin that it first removes all personalized aspects of each program (for example, comments and\nidentifier names) in order to arrive at a core structure before making the comparison.\nFinal assessment\nThe marking described so far is used to provide instantaneous feedback to students and staff,\nbut several additional issues have to be considered if the system is to be used for formal\nassessment. First comes that of weighting. When computing a final mark for a course, it may\nnot be sensible to give all exercises the same value (for example, early exercises are often\nworth less than later ones). Secondly, the use of Ceilidh tends to result in high marks, often\nabove 80%. It is therefore necessary to scale marks to arrive at a final assessment in order to\ncomply with institutional marking conventions (for example, a 60% average in Ceilidh may\nrepresent a basic pass on the course). Finally, there is the issue of deadlines for exercises and\nthe problems of dealing with late work. Ceilidh deals with these issues by letting the course\nteacher set up two files, the weights and scale files. The weights file lists each exercise along\nwith an indication of its relative weighting and also its current status. The status may be open\nso that work can be submitted; late so that work can be submitted but is noted as late; or\nclosed so that nothing can be submitted. The weights are used to automatically calculate a\nweighted average course mark for each student. Teachers are provided with menu options to\nset the weights and alter the status of exercises. A separate scale file allows a teacher to\ndefine a scale mapping between raw marks obtained and marks on some final scale of\nassessment.\nImplementation\nIn this section we very briefly touch on some implementation issues. The current version of\nCeilidh runs, under Unix and several of its derivatives. It provides three styles of user\ninterface:\n(i) A line interface for dumb terminals,\n(ii) An X-Windows interface.\n(iii) A command interface, where each Ceilidh facility is available as a Unix command.\nThis allows people to build their own interfaces on top of Ceilidh, and to integrate it with\nother applications.\nWork is also currently underway to port Ceilidh to a networked PC environment and to\nprovide a PC Microsoft Windows interface.\nExperiences with Ceilidh\nCeilidh was initially conceived and constructed not as a research project but out of the\nnecessity of having to teach programming to large first-year classes. Consequently, Ceilidh\nhas always been used to support real programming courses, and has evolved to meet the needs\n64\nALTJ VOLUME 1 NUMBER 2\nof these courses. The fact that Ceilidh was constructed while in actual use gave rise to many\ndifficulties, particularly in the area of managing rapid updates to a live system. However, the\ngreat benefit of this approach is that instead of being an experimental prototype briefly\ndemonstrated in the research laboratory, Ceilidh is a fully working system that meets a real\nneed and that has evolved to meet the needs of teachers and students.\nSources of feedback\nHere we summarize our experiences of building and using Ceilidh. This summary does not\nrepresent the results of a formal statistical\/experimental evaluation of the effects of the system\non the educational process. Instead, it encapsulates several years of feedback, observation and\nopinion from a wide range of sources. These include:\n(i) Our own subjective view as teachers and implementors.\n(ii) Analysis of user-questionnaires. Ceilidh contains questionnaires about the system and\nthe courses supported, and these are made available online at the end of each course.\n(iii) Archives of the many student comments and questions submitted through the online\ncomment facility.\n(iv) The marks obtained across three years of use.\n(v) Experiences of discussing Ceilidh in examiners' meetings.\n(vi) Feedback from other members of staff passing on student comments from tutorials.\n(vii) Feedback from other organizations involved in piloting the system worldwide.\n(viii) Student essays discussing their opinions of the system. More specifically over 100\nstudents recently answered the following essay question:\nDoes the Ceilidh system for teaching C++ produce good programmers who can write\nhigh-quality, thoroughly tested and stylistically correct programs, or does it merely\nproduce students who have learned how to 'play the system' and who effectively rely on\nit to solve their problems for them?\nImpact on students\nWe begin this section with observations on the ways in which Ceilidh has affected different\nkinds of student:\n(i) The system has acted as a confidence builder for novice programmers who benefit\ngreatly from the kind of positive early feedback that arises from the early simple\nexercises. One particular aspect of this has been building the confidence of female\nstudents who may often initially feel intimidated by the 'macho' image associated with\nprogramming.\n(ii) The system has enabled us to spot the really weak students early on, enabling us to\nfocus effort on helping them.\n(iii) Nearly all the critical feedback has come from experienced students, particularly\nover the marks assigned. The notion of good programming style was a particularly\ncontentious issue, and we had several discussions on the issues of style and\n65\nSteve Benford et al Computer-aided assessment and administration\nstandardization of layout. This turned out to be beneficial as it is the self-taught 'experts'\nwho often need the most help in this area (even if they think they do not).\nThis last observation is of key importance. One of the most surprising and pleasing aspects of\nCeilidh was its role in consciousness-raising. The provision of immediate feedback by a\nmachine produced much more discussion of programming correctness and style than did\nprevious hand-marking. Ceilidh's online comment facility played a key role in this discussion,\nand one of the early extensions to the system was to offer the students the opportunity to\ncomment on each mark when given. Consequently, our experience of automatic assessment is\nthat far from reducing contact with students, the quantity and quality of discussion is\nincreased. Looking back, we suspect that this effect stems from a number of factors. Firstly,\nimmediate feedback means that marks are received while the problem is uppermost in a\nstudent's mind. Secondly, students may be happier to argue with a machine than with a\nteacher. Thirdly, the marking process is generally more open to inspection than with\nhand-marking (for example, style rules are published and are applied consistently). As a\nfurther comment, hand-marking of any form of coursework can lead to a student being treated\nless fairly than others. For instance, coursework marked by more than one person will lead to\ninconsistencies in marks awarded due to differing ideas of what the correct answer should be.\nThis coupled with other problems such as racism, sexism and favouritism can lead to certain\nstudents achieving poorer or better marks than they deserve. We believe that such explicit\ndiscrimination is reduced, if not eliminated, by the use of the Ceilidh system, since it marks\neach solution consistently. However, we recognize that implicit discrimination through\ninappropriately chosen questions must still be guarded against.\nOf course, the introduction of Ceilidh was not without its problems and we did observe a\nnumber of more negative reactions to the system. One problem-group came to be known as\nthe Perfectionists. These students seemed unable to stop working on an exercise even when a\nsatisfactory mark had been obtained. A second problem-group was that of Gamblers: students\nwho iterated around the marking cycle many times, tweaking their programs in an attempt to\npick up extra marks without necessarily thinking through the problem at hand. Perfectionists\nand Gamblers resulted in our making two further extensions to the system. The first was to\nintroduce a minimum time-delay between markings during which time a student could not\nre-mark his or her program. This delay is tailorable by the teacher, and may range from a few\nseconds to several days. A more general advantage of this extension is that it allows Ceilidh\nmarking to be used in a once-only fashion if the teacher wishes. The second extension was to\nstretch the progress-monitoring facilities to spot the problem-students. This involved three\nnew facilities:\n(i) Producing graphs of number of marking attempts per student across an exercise or\ncourse.\n(ii) Producing graphs of the 'development profile' for each student completing an\nexercise. The development profile charts the mark obtained against each marking attempt\nand so visually shows progress across an exercise.\n(iii) Calculating and producing graphs of a 'development ratio' for each student and\nexercise, a numerical measure that indicates whether the student has been making\nprogress.\n66\nALT-J VOLUME 1 NUMBER 2\nThe development ratio is calculated as the ratio of the number of times a student's mark\nincreases minus the number of times it decreases divided by the total number of marking\nattempts. This results in a scaled numerical measure in the range +1 to -1 which shows\ngeneral progress across an exercise. At the extremes, +1 indicates the student's mark always\nincreased on each successive re-marking, and -1 that it always decreased. A development ratio\nof 0 would indicate that no progress was made, and one close to 0 that little progress was\nmade. Ceilidh automatically calculates these ratios for all students and exercises, and can\ndisplay them graphically. As an example, Figure 5 shows the development profile (i.e. mark\nawarded plotted against the submission attempt) for an individual doing a single exercise. In\nthis case, we see a steady improvement in the mark awarded with each attempt until nearly\n100% is reached.\nMark Profile for Student kin. Unit 8 Exe 3\nFigure 5: Example graph of progress on an exercise\nWe emphasize that the development profile and ratio provide only a rough general guide to\nprogress, not a certain measure. Furthermore, graphs have been used by staff to spot potential\nproblems and have not counted towards final marks. Graphs provide teachers with a rough\nguide to potential problem-students (for example, Perfectionists or Gamblers) who might need\nadditional teaching support. Teachers might then encourage these students to change their\nworking method, either by learning better to manage their work according to sensible quality\ntargets, or to think more about the problem at hand before changing their program. In more\ngeneral terms, the cases of Perfectionists and Gamblers both highlight Ceilidh's role in\n67\nSteve Benford et al Computer-aided assessment and administration\nencouraging students to manage their own work in an effective way. We believe that this is\npossible because Ceilidh devolves greater responsibility to students for determining final\nmarks, and therefore for managing their work load.\nBefore passing on, we should briefly mention one hidden problem. Ceilidh requires that\nstudents hand in their work in electronic format. Indeed, at Nottingham we currently insist\nthat nearly 75% of all core first-year work is handed in online (not just programs). This makes\nit difficult for students to work with pen and paper in their own residences. Of course, many\nstudents own their own computers and are able to transfer their work across to our system.\nHowever, we fear that those who do not may be disadvantaged. We believe that the solution\nto this problem quite simply (in technical if not financial terms) lies in the provision of a\nbetter computing infrastructure. In particular, we would like to see all our students armed with\npersonal or notebook computers within the next few years.\nImpact on teachers and tutors\nSo far, we have considered Ceilidh's effect on the students. We also need to consider its\neffect on the staff. The clear and simple benefit to teachers has been a massive reduction in\ntime spent marking students' programs. Ceilidh has also helped with more efficient\nadministration of courses. Collection and collation of work has been trivial, deadlines are\npublished in advance and are stuck to, and marks are returned to examiners on time. Ceilidh\nalso helps with the trivial, but often annoying, aspects of coursework such as making sure that\nwork is clearly labelled and legible. This was particularly noticeable where the collection and\ncollation of essays was concerned. Clearly some of these issues extend to courses other than\nprogramming.\nThe general progress monitoring facilities within Ceilidh have been of benefit to both tutors\nand teachers and have allowed us to keep track of our students. As an example, some tutors\nactually hand out progress charts to students during tutorials to confirm progress on the\ncourse. Interestingly, far from viewing this as a Draconian regime, as some people feared,\nmany students seem to appreciate regular confirmation of satisfactory progress.\nUse in formal assessment\nCeilidh is used both to give feedback to students and for formal course assessment. The\ncurrent first semester programming course at Nottingham is entirely coursework-assessed and\nthe second is 50% coursework-assessed with the other 50% being a formal written\nexamination. This dual use of Ceilidh has given rise to several interesting issues. Not only\ndoes the iterative use of auto-assessment tend to result in very high raw marks (with marks\naround 80% and 90% being common) but also the marks tend to be far more tightly grouped\n(often the case in continuous assessment). Even with the scaling facilities mentioned\npreviously, it may be difficult to categorize the students according to an 'expected' normal\ndistribution. This raises the issue of the relation between feedback and assessment. Indeed, it\nis obvious that Ceilidh, by providing interactive feedback, is increasing the likelihood of\nobtaining high marks. One solution is to re-mark the students' work at the end of the course\nusing different criteria (for example, using different and harder tests and more rigorous style\nchecking). However, we then encounter the problem that students feel cheated because the\nsystem has been reporting excellent progress which may not match their final mark. In\ngeneral, this issue relates to whether we are seeking normative or criterion assessment of\nstudents. So far we have used Ceilidh on first-year foundation courses where criterion\n68\nALT-J VOLUME 1 NUMBER 2\nassessment is a sensible approach (i.e. if you can demonstrate the necessary skills, you can\npass the course). The role of Ceilidh, and indeed of any iterative auto-assessment technique,\nmay be limited where normative assessment is required (i.e. on courses in later years).\nThe issue of students feeling cheated is also an interesting one. There is a danger that Ceilidh\nmight encourage students in the belief that the ability to pass a few tests makes their programs\ncertifiably correct. Of course, this is not true, and it is recognized that testing, no matter how\nthorough, does not prove program correctness. It is therefore important that teachers carefully\nintroduce the notion of program correctness and its relation to testing, particularly with respect\nto other approaches such as the use of formal methods in program verification.\nUse at other sites\nSo far, Ceilidh has been installed at 25 sites outside Nottingham and has been used to teach\ncourses in at least five of these. Styles of use have been quite diverse. More than one site has\ninformed us that they installed the system and ran our course directly as given, even using our\nslides for lecturing. Other sites found it more difficult to accept the given course structure but\nwere happy to use the exercises to form their own course. At the other extreme, one site used\nthe Ceilidh system as an envelope to write an entirely new course for a different programming\nlanguage (Pascal). This also necessitated slotting their own auto-assessment module into the\nCeilidh framework. This course has now been re-installed at Nottingham and will soon be\ndistributed to other pilot sites.\nOne key point to emerge from early piloting has been the importance of providing an open\nand extensible framework for Ceilidh. Not only should staff be able to build their own\nexercises, units and courses, but should also be able to bolt in their own marking modules for\nother programming languages or even for other kinds of assessment (we know of at least one\nother site where automated essay marking is being researched). In particular, there should be a\nseparation between Ceilidh's general course administration framework and different marking\ntechniques, with the latter ranging from completely automated marking though semi-\nautomation to hand-marking. Although our current experience would broadly agree with\nLaurillard et al (1993) in that 'the Not Invented Here syndrome is not a major influence on\nacademics considering the use of CBL', we would also stress that courseware should aim to\nprovide as modular a framework as possible so as to allow teachers to mix and match\nresources, blending them into their own courses with individually tailored structures.\nMulti-site use also requires support for the ability to transfer resources across networks for\ninstallation in local systems. In turn, this requires the development of adequate standards for\ncourse and resource structure (for example, is our current course-unit-exercise hierarchy\ngeneral enough?). It also requires integration with more general information dissemination\ntechnologies including email, file transfer, directory services and network information\nretrieval systems (for example, Gopher, WAIS, Archie and World Wide Web).\nWe are hoping that our current pilot project will help develop the necessary standards and\nundertake the necessary integration to achieve this.\nFuture work\nFuture developments of Ceilidh fall into two categories. Those that are scheduled to take\nplace during the TLTP pilot project, and more general developments.\n69\nSteve Benford et at Computer-aided assessment and administration\nDuring the TLTP pilot project, the following developments are scheduled:\n(i) Porting Ceilidh to a networked PC environment.\n(ii) Supporting additional programming languages. The working set should at least\ninclude C++, C, Pascal, Modula-2, ADA and ML.\n(iii) Providing an extended statistics-gathering and progress-monitoring facility.\n(iv) Integrating the current crude facility for reading course notes with common authoring\nand hypertext systems (key candidates include Authorware and Guide)\n(v) Developing full X-Windows and Microsoft Windows interfaces.\n(vi) Extending the current 'comment' facility towards a fully-fledged Help Desk with\nsupport for rostering queries between a team of advisers working across a computer\nnetwork.\n(vii) Extending facilities for exchanging course resources (e.g. notes and exercises)\nbetween sites, perhaps via integration with emerging network information retrieval\nsystems.\nA further goal for the near future is to conduct a more formal evaluation of the Ceilidh\nsystem. Some limited funding has recently been obtained towards this end, and we hope to\ncompare student performance under Ceilidh with other indicators such as examination results\nand A-level entry grades. We also aim to cany out some marking experiments comparing\nautomatic and human marking of the same scripts.\nWe plan a number of longer-term Ceilidh developments. Firstly, we will try to integrate the\nsystem with other local administration facilities, including Nottingham University's\nexaminations and timetabling databases. We also aim to provide greater support for\nco-operative working. We plan experimental integration of conference facilities (both audio\nand text) to support discussion between students and staff, and also inclusion of bulletin board\nfacilities. Our target here is a kind of networked programming laboratory distributed across\nseveral sites.\nA final word: we would like to stress that Ceilidh is a fully working system and available\nfrom the authors.\nReferences\nBenford, S., Burke, E. and Foxley, E. (1993), 'Learning to construct quality software with the\nCeilidh system', The Software Quality Journal.\nLaurillard, D., Swift, B. and Darby, J. (1993), 'Academics' use of courseware materials: a\nsurvey', Association for Learning Technology Journal, 1,1.\nZin, A.M. and Foxley, F. (1991), 'Automatic Program Quality Assessment System',\nProceedings of the IFIP Conference on Software Quality, S P University, Vidyanagar, India\n(March).\n70\n"}