{"doi":"10.1109\/ISCC.2005.84","coreId":"102392","oai":"oai:epubs.surrey.ac.uk:1851","identifiers":["oai:epubs.surrey.ac.uk:1851","10.1109\/ISCC.2005.84"],"title":"Improving survivability through traffic engineering in MPLS networks","authors":["Amin, M","Pavlou, G","Howarth, MP","Ho, KH"],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2005-08-15","abstract":"The volume of higher priority Internet applications is increasing as the Internet continues to evolve. Customers require quality of service (QoS) guarantees with not only guaranteed bandwidth and delay but also with high availability. Our objective is for each estimated traffic flow to find a primary path with improved availability and minimum failure impact while satisfying bandwidth constraints and also minimizing network resource consumption. We devise a heuristic algorithm with four different cost functions to achieve our objective. Our approach can enhance availability of primary paths, reduce the effect of failure and also reduce the total resource consumption for both primary and backup paths","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":null,"rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:epubs.surrey.ac.uk:1851<\/identifier><datestamp>\n      2017-10-31T14:03:22Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><setSpec>\n      6469766973696F6E733D656E67616E64706879736963616C736369656E636573:656C656374726F6E6963656E67696E656572696E67:63637372<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/epubs.surrey.ac.uk\/1851\/<\/dc:relation><dc:title>\n        Improving survivability through traffic engineering in MPLS networks<\/dc:title><dc:creator>\n        Amin, M<\/dc:creator><dc:creator>\n        Pavlou, G<\/dc:creator><dc:creator>\n        Howarth, MP<\/dc:creator><dc:creator>\n        Ho, KH<\/dc:creator><dc:description>\n        The volume of higher priority Internet applications is increasing as the Internet continues to evolve. Customers require quality of service (QoS) guarantees with not only guaranteed bandwidth and delay but also with high availability. Our objective is for each estimated traffic flow to find a primary path with improved availability and minimum failure impact while satisfying bandwidth constraints and also minimizing network resource consumption. We devise a heuristic algorithm with four different cost functions to achieve our objective. Our approach can enhance availability of primary paths, reduce the effect of failure and also reduce the total resource consumption for both primary and backup paths.<\/dc:description><dc:date>\n        2005-08-15<\/dc:date><dc:type>\n        Conference or Workshop Item<\/dc:type><dc:type>\n        NonPeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:identifier>\n        http:\/\/epubs.surrey.ac.uk\/1851\/1\/fulltext.pdf<\/dc:identifier><dc:identifier>\n          Amin, M, Pavlou, G, Howarth, MP and Ho, KH  (2005) Improving survivability through traffic engineering in MPLS networks  In: IEEE Symposium on Computers and Communications, 2005-06-27 - 2005-06-30, Cartagena.     <\/dc:identifier><dc:relation>\n        10.1109\/ISCC.2005.84<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/epubs.surrey.ac.uk\/1851\/","10.1109\/ISCC.2005.84"],"year":2005,"topics":[],"subject":["Conference or Workshop Item","NonPeerReviewed"],"fullText":"Improving Survivability through Traffic Engineering in MPLS Networks \nMina Amin, Kin-Hon Ho, George Pavlou, and Michael Howarth  \nCentre for Communication Systems Research, University of Surrey, UK \nEmail:{M.Amin, K.Ho, G.Pavlou, M.Howarth}@eim.surrey.ac.uk \nAbstract \nThe volume of higher priority Internet applications \nis increasing as the Internet continues to evolve. \nCustomers require Quality of Service (QoS) \nguarantees with not only guaranteed bandwidth and \ndelay but also with high availability.  Our objective is \nfor each estimated traffic flow to find a primary path \nwith improved availability and minimum failure impact \nwhile satisfying bandwidth constraints and also \nminimizing network resource consumption. We devise \na heuristic algorithm with four different cost functions \nto achieve our objective. Our approach can enhance \navailability of primary paths, reduce the effect of \nfailure and also reduce the total resource consumption \nfor both primary and backup paths. \n1. Introduction \nThe steady growth in the use of computer networks \nfor higher priority Internet applications encourages \nservice providers to offer new services that depend on a \ncommitted Quality of Service (QoS); these services \nrequire continuous network availability in the presence \nof various failure scenarios. Hence, network \nsurvivability, which refers to the ability of a network to \nmaintain uninterrupted service regardless of the scale, \nmagnitude, duration and type of failures, is an \nimportant issue. We investigate survivability in Multi-\nProtocol Label Switching (MPLS) networks. Many \nMPLS survivability methods have been proposed [1-2]. \nA fundamental consideration in the design of an MPLS \nsurvivable network is the creation of backup paths to \nprotect the primary paths from failure while preserving \nthe required QoS as has been considered in proposals \n[1-2]. However, other existing MPLS-based \nsurvivability methods [3] take into consideration \naspects such as availability of network components and \nfailure impact parameters during the computation of the \nprimary path.  \nPoor routing of primary paths might route traffic \nthrough low availability links, leading to higher \nprobability of failure occurrence and as a result more \nfailure consequences such as recovery time and packet \nloss. Therefore, we address an Offline Traffic \nEngineering Survivability Design (OTESD) problem \nthat takes into account the network component \navailability and failure impact parameters in order to \nprovision a survivable network. Our goal is \nsummarised as follows: given a physical topology, \naggregate estimated traffic flows and estimated link \navailability, for each traffic flow find a primary path \nwith enhanced availability and minimum failure impact \nwhile preserving the flow\u2019s bandwidth requirement and \noptimising the use of network resources. To solve the \nOTESD problem, we adopt a dual approach in which \nwe first find primary paths with improved availability \nand low failure impact. We subsequently provide \nbackup paths for those traffic flows where a sufficiently \nhigh availability primary path cannot be found. \nTherefore our approach is a kind of protection scheme. \nOur work is motivated by the survivability method \nproposed in [3], however [3] is based on online routing \nwhile we consider offline Traffic Engineering (TE) for \nnetwork provisioning in order to achieve considerable \nimprovement in survivability performance and better \nresource utilization. Building a survivable network \nthrough offline TE has also been investigated in [7], in \nwhich an algorithm to set link weights was proposed \nfor IP backbone networks so as to mitigate the effects \nof failure. However, the OTESD problem has not yet \nbeen addressed in MPLS networks and is therefore the \nsubject of this paper. We believe no previous work has \ntaken into account availability parameters when solving \nsurvivability design problem through offline TE. \n2. Background \n   Survivability methods [1-2] can be divided into two \nbasic approaches. The first approach, called protection, \nis a pre-determined failure recovery scheme in which at \nthe same time as the primary path is routed between the \nsource and the destination, the backup path is also \nprovisioned to forward the traffic if the primary path \nfails. In the second approach, called restoration, first a \nprimary path is set-up between the source and the \nProceedings of the 10th IEEE Symposium on Computers and Communications (ISCC 2005)\n1530-1346\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 15,2010 at 08:35:15 UTC from IEEE Xplore.  Restrictions apply. \ndestination; and then, after failure occurs, a backup \npath is discovered dynamically to restore the traffic. In \nthis paper we use protection to achieve our objective.  \nBackup path types depend on which router along the \nprimary path takes the rerouting decision, and this is \ncalled recovery scope [2]. In the global scope, the \ningress node always takes responsibility for fault \nrecovery when a Fault Indication Signal (FIS) arrives \n(any message sent to indicate that failure has occurred \nis called a FIS). The advantages of this scope are firstly \nthat the backup path can be selected from links \nanywhere in the entire network, so the network spare \nresources are used efficiently, and secondly that only \none backup path needs to be set up per primary path. \nHowever, since a FIS has to be propagated all the way \nback to the ingress node, this method has high recovery \ntime and packet loss. In the local scope, the Label \nSwitch Router (LSR) at the head of the failed link \nswitches the traffic from the broken link to the backup \npath. Since a FIS is not needed, this scope has a faster \nrecovery time and reduced packet loss in comparison to \nglobal scope. On the other hand, creation and \nmaintenance of multiple backup segments is required, \nresulting in inefficient utilization of resources and \nincreased complexity [3]. \n   The effects of network failure can be evaluated in \nterms of recovery time and packet loss. The recovery \ntime (TREC) is defined as the period of time between \nfault detection and the traffic restoration to the \ncorresponding backup path. Recovery time consists of \na number of phases as follows [3]. a) Detection Time: \nthe time required for fault detection. b) Hold off time: \nthe waiting time before triggering the fault recovery \nprocess in case lower layers can overcome the fault \nfaster. c) Notification Time: the time required to \nconvey fault information to the node responsible for \nrerouting the traffic (for example, by transmitting a \nFIS). d) Switchover Time: the time required to redirect \nthe traffic from the primary path to the backup path. \n   All these phases are followed by a global scope \nprotection scheme; a local scope scheme does not have \na notification phase.  \nPacket loss (PLS) is defined as the total number of \npackets lost during TREC . Since packet loss depends on \nthe recovery time, a longer recovery time leads to more \npacket loss. Hence, in order to reduce the failure \nimpact, we only need to reduce the recovery time.  \nSurvivability provisioning by establishing backup \npaths has a number of limitations. Firstly, it may \noveruse network resources for establishing these paths \nif the network is not well provisioned. Secondly, it \nrequires signalling overhead for backup path \nestablishment, failure detection and notification. \nFinally, it requires traffic switching from primary path \nto backup path and then from backup path to primary \npath, which may cause network oscillation. These \nsurvivability methods thus lead to high overall \noverhead. Our dual approach, described below, \nattempts to minimize the aforementioned limitations. \n3. Network availability analysis \n   The availability of a component i (Ai) is the fraction \nof time the component is operational (\u201cup\u201d) during the \nentire service time [4]. A network component\u2019s \navailability is a relatively static value. Typical data on \nnetwork components (transmitter, receiver, fiber link) \nfailure rate and repair times can be found in [9]. In \naddition, the availability of a component can be \ncalculated by reliability prediction models such as \nTelcordia [8].  \n   If the traffic flow t is carried by a single path, its \navailability, denoted by t\u03b1 , is equal to the availability \nof the path the flow traverses. If we denote path \navailability by Apath, we have: \n                                 t pathA\u03b1 =                                    (1) \nApath can be calculated based on the known \navailabilities of the network components along its route \n[4]. Suppose the path is composed of n links, then the \nend-to-end path availability is calculated as follows: \n       1 2\n1\n...\nn\npath n l\nl\nA A A A A\n=\n= \u00d7 \u00d7 \u00d7 =\u008f                (2) \nwhere Al is the availability of link l.\n4. The OTESD problem  \n   Definition 1: We distinguish between low and high \navailability links. In this paper, we define low \navailability links as 0.9999lA < and high availability \nlinks as 0.9999lA \u2265 . Definition 2: we define the Link \nProtection Requirement (LPR) as a binary value for \neach link to indicate whether the link should be \nprotected or not. For low availability links we set \nLPR=1 and for high availability links LPR=0.\nDefinition 3: We distinguish between low and high \navailability paths. In this paper, we define low \navailability path as 0.9998pathA < and high availability \npath as 0.9998pathA \u2265 respectively. \n4.1. Dual approach \n   Our approach consists of two phases: (1) a preventive \nphase, and (2) an impact minimisation phase.  \n   In the preventive phase, TE is used to map the \nestimated traffic flows onto the existing physical \nProceedings of the 10th IEEE Symposium on Computers and Communications (ISCC 2005)\n1530-1346\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 15,2010 at 08:35:15 UTC from IEEE Xplore.  Restrictions apply. \nnetwork topology in the most effective way to improve \nnetwork survivability while optimising resource \nutilization. In order to improve the availability of the \nprimary path our TE routes the traffic mostly through \nthe high availability links by taking into account the \nlink availability parameter during the computation of \nprimary routes. This objective is achieved by using the \nlink availability parameter in different ways in the cost \nfunction of the Shortest Distance routing algorithm [5] \nas explained in section 5. However, it is not always \npossible to avoid using the low availability links. In \nfact, in some cases traffic may be routed through \nprimary paths with low availability links. In this case, \nwe perform the impact minimization phase. Recovery \ntime is minimized by reducing the time needed for each \nphase of the recovery as follows. Detection and \nswitchover time depend on the technology used and \ncannot be easily modified. Hold off time depends on \nthe lower layers recovery scheme and can be set up \nbetween (0-50ms). Therefore, the notification time \nseems to be the key factor for minimizing the recovery \ntime. The notification time depends on the propagation \ntime of a FIS per link and on the Notification Distance \n(ND) [3].  ND is defined as the number of links \nbetween the node that detects the failure and the node \nthat reroutes the traffic. Since the propagation time \ndepends only on the link transmission rate, notification \ntime can only be decreased by reducing the ND. In \nlocal scope the distance is zero, so it is the optimal \ncase. But as we discussed in section 2, the global scope \nis more efficient and more scalable. However, in the \nglobal scope the distance is not known in advance \nbecause obviously it is not known which link will fail. \nTherefore in the impact minimization phase, we use the \nlink availability parameter to estimate the distance in a \nprobabilistic manner. Moreover, if we cannot find a \nsufficiently high availability primary path for the traffic \nflow, we provide a global link-disjoint backup path for \nthe corresponding primary path. \n 4.2. The OTESD Problem Formulation \nWe formulate the OTESD problem as a multi-\nobjective optimisation problem. A solution of OTESD \ncomputes a primary path for each traffic flow, which \nyields the best value for one or more objective \nfunctions.  The following assumptions are given: \n1. G=(V,E,A,C), the physical network topology where  \nV is the set of nodes, E is the set of links, \n: (0,1)A E \u2192 is the availability of each link (where \n(0,1) denotes the set of real numbers between 0 and 1), \n:C E Z +\u2192 specifies the total physical capacity on each \nlink. 2. ( , , )tT t s d B= = , the traffic matrix, which is a \nset of estimated traffic flows, where s is the source , d\nis the destination , and Bt is the Bandwidth requirement \nof the traffic flow t. We assume that aggregate \nestimated traffic flows have a constant bit rate pattern \ndue to statistical multiplexing. The traffic matrix can be \nmeasured or estimated.   \nWe consider the following objectives: (1) Improve \nthe primary paths\u2019 availability, (2) Minimise failure \nimpact and (3) Minimise the total Resource \nConsumption. These objectives are optimised subject \nto the solution satisfying the link capacity constraints. \n4.3. A heuristic algorithm \nTo implement our approach, we use the following \nheuristic algorithm.  \nPrimary path provisioning procedure: \nStep 1: sort the traffic flows in descending order based \non their bandwidth requirements and choose one at a \ntime in that order. Step 2: remove the links with the \nresidual bandwidth less than the traffic flow bandwidth \nrequirement to ensure that the remaining links can \nguarantee the bandwidth requirement. Step 3: compute \nthe primary path, using the cost functions proposed in \nsection 5. Step 4: once the primary path is found, \nallocate the requested bandwidth on the path. Step 5:\nconsider the next traffic flow and repeat step 2 to 5 \nuntil all the traffic flows have been considered. \nBackup path provisioning procedure: \nStep 1 is the same as step 1 of the primary path \nprovisioning procedure. Step 2: compute the primary \npath availability of the corresponding traffic flow \naccording to equation (2), if it is a low availability \nprimary path go to the next step, otherwise go to step 5. \nStep 3: remove the links with the residual bandwidth \nless than the traffic flow bandwidth requirement. Step\n4: compute a global link disjoint backup path according \nto the Shortest Distance cost function (3) by using the \nDijkstra routing algorithm and allocate the requested \nbandwidth on the path. Step 5: consider the next traffic \nflow and repeat step 2 to 5 until all traffic flows have \nbeen considered. \n5. Proposed cost functions \n   The Shortest Distance (SD) algorithm is a shortest-\npath algorithm with the cost function defined as: \n                     \n1 1\n1( )\nn n\nl\nll l\nC p c\nR\n= =\n= =\u00a6 \u00a6                         (3)           \nWhere cl is the link cost and Rl is the residual \nbandwidth of link l (1 l n\u2264 \u2264 ). The shortest path can be \nProceedings of the 10th IEEE Symposium on Computers and Communications (ISCC 2005)\n1530-1346\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 15,2010 at 08:35:15 UTC from IEEE Xplore.  Restrictions apply. \nfound by the Dijkstra routing algorithm using the \ncorresponding cost function. The shortest path is the \npath with minimum path cost denoted by C(p). The \nabove cost function balances the objectives of \nminimising resource consumption and improving load \nbalancing. However, the SD cost function does not \nconsider the objective of improving path availability. \nHence, it may result in using low availability primary \npaths. Hence, we propose several extensions of the SD\ncost function to achieve our dual approach objectives. \nOur proposals use the link availability parameter in the \nfollowing two ways.  \nA. Using link availability as a threshold: \n   1) Availability Threshold 1 (AT1): The cost function \n(3) is modified by including a hop count penalty, 2l ,\nfor the low availability links. For the high availability \nlinks the cost function remains the same as SD (3). (We \nexperimented the hop count penalty with values other \nthan 2 and we observed no significant changes in the \nresults). In this approach, higher costs are assigned to \nlow availability links than the high availability ones. \nMoreover, the low availability links which are far away \nfrom the ingress node are penalized more in order to \nreduce the failure impact as explained in section 4.1. In \nthis way the failure notification distance (ND) is \ndecreased which results in reduced recovery time \n(TREC) and, therefore, reduced packet loss (PLS). Our \nAT1 cost function is defined as:  \n        ( )\n1\n1 0 .9 9 9 9\n2\no t h e rw i s e\nl\nn l\nl\nl\nl\ni f A\nR\nC p\nR\n=\n\u00ad \u2265\u00b0\n\u00b0\n= \u00ae\n\u00b0\n\u00b0\u00af\n\u00a6\n              (4) \n   2) Availability Threshold 2 (AT2): Our second cost \nfunction, AT2, is defined as follows. \n         ( )\n1\n1\n1\n2 0 .9 9 9 9\n2\no t h e r w is e\nl\nln\nl\nl\nl\nl\ni f A\nR\nC p\nR\n\u03b2\n\u2212\n\u2212\n=\n\u00ad\n\u2265\u00b0\n\u00b0\n= \u00ae\n\u00b0\n\u00b0\n\u00af\n\u00a6\n           (5)                      \n   In comparison to SD (3), a hop count penalty, 12l\u2212 ,\nis applied both to high availability and low availability \nlinks in order to assign higher cost to the links located \nfar from the ingress node. This gives lower costs to \nshorter paths. A constant, \u03b2 , is associated with the \nresidual bandwidth of high availability links. We set \u03b2\nto 2, which experiments show that has sufficient impact \non the cost function. By squaring the residual \nbandwidth of the high availability links less cost is \nassigned to them in comparison to the low availability \nones.  \nB. Using link availability in the cost function: \n   1) K-SD-AD: First of all, K-Shortest-Distance (K-\nSD) paths are computed by modifying the algorithm \nproposed in [6] and using cost function (3). Then \namong the K paths, the path with the minimum cost \nfunction according to (6) is selected as the final path. \nWe associate a hop count penalty, 12l\u2212 , with each link \nin addition to its link availability function. Low \navailability links located far away from the ingress \nnode are therefore penalized more. As a result, this cost \nfunction combines the objectives of improving primary \npath availability with minimising failure impact. \n                 \n1\n1\n( ) 2 ( log )\nn\nl\nl\nl\nC p A\u2212\n=\n= \u00d7 \u2212\u00a6                        (6) \n   According to the order of the cost functions used in \nthis case, the path selected here first optimises the \nresource consumption and load balancing objectives \nand then optimises the path availability and failure \nimpact objectives. \n   2) K-AD-SD: First of all, K-shortest (K-AD) paths \nare computed by modifying the algorithm proposed in \n[6] and using cost function (6). Then among the K \npaths, the path with minimum cost function according \nto (3) is selected as the final path. In fact, the cost \nfunction used in this approach is the same as K-SD-AD\nbut in the opposite order. Hence, the path selected in \nthis case optimizes the objectives in the opposite order. \n6. Performance evaluation \n   We evaluate our heuristic algorithm with the four \nproposed cost functions through simulation using the \nfollowing four performance metrics.  \n1. Network Protection Degree (NPD):  \n                 \n( | )t t\nt T\nt\nt T\nB\nNPD\nB\nB F\n\u0089\n\u0089\np\n=\n\u009c\n\u009c\n                      (7) \nwhere T is the total number of traffic flows,  bandwidth \nis denoted by Bt and F =0.9998 in this paper. If a cost \nfunction results in a high NPD value it implies that the \ncost function performs better regarding improving the \nprimary path availability which is the first objective. \n2. Failure Impact Degree (FID):  \n                       \n( | 1)t t\nt T\nt\nt T\nB ND\nFID\nB\n\u0089\n\u0089\n>\n=\n\u009c\n\u009c\n                 (8) \n   If a cost function results in a low FID value it implies \nthat it performs better regarding minimising the effects \nof failure which is the second objective. \n3. Number of Links to be Protected (NLP):  \n               \n1 1\n( )\npnT\nt\nl l\nt l\nLPR x\nNLP\nT\n= =\n\u00d7\n=\n\u009c\u009c\n                   (9)              \n    \nProceedings of the 10th IEEE Symposium on Computers and Communications (ISCC 2005)\n1530-1346\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 15,2010 at 08:35:15 UTC from IEEE Xplore.  Restrictions apply. \nwhere xtl=1 if traffic flow t has been assigned to link l;\notherwise xtl=0. Also, np is the number of links on the \nprimary path and LPR is the parameter defined in \ndefinition 2 (in section 4). If a cost function results in a \nlow NLP value, it reduces resource consumption by \nonly establishing local backup paths for low \navailability links, which is the third objective. \n4. Resource Consumption (RC):   \n                \n1\nT\nt t\nt\nRC n B\n=\n= \u00d7\u00a6                            (10)                                                                      \nwhere nt is the number of links on the traffic flow\u2019s \npath and Bt is the bandwidth required for each traffic \nflow. We compute the RC for two cases. In the first \ncase, we only compute the resources consumed by the \nprimary paths. Therefore, if we denote the number of \nlinks on a single traffic flow\u2019s primary path by np, then \nfor this first case nt=np. In the second case, we provide \na pre-established, pre-allocated global link-disjoint \nbackup path for each low availability primary path to \nattempt to maximize availability for 100% of the traffic \nflows. We assume that the required bandwidth is \ndedicated to each backup link and no resource sharing \nis considered. In this way we can evaluate the total RC\n(consisting of high and low availability primary paths \nand backup paths for low availability primary paths). \nTherefore, if we denote by nb the number of links on \nthe traffic flow\u2019s backup path provided for the low \navailability primary paths, then for the second case \nnt=np+nb. If a cost function provides low total RC\nvalue it performs better regarding minimising the total \nRC by establishing global backup paths (if necessary) \nfor protecting the low availability primary paths, which \nis the third objective. \n6.1. Simulation results \n   Simulation results are based on the network topology \nused in [3]. In the topology, 7 nodes are identified as \ntraffic ingress and egress nodes (nodes 1, 2, 4,5, 9, 13 \nand 15). The capacity of the links is 1200 (normal \nlines) and 4800 (bold lines) units, and each link is bi-\ndirectional. The availability of each link is a pre-\nassigned value randomly generated between 0.9992 \nand 1. Each point in the simulation graphs is the \naverage of 10 independent trials. Each trial uses an \nindependent set of traffic flows. The bandwidth of each \nflow is uniformly distributed between 70 and 125 \n(unitless) and randomly assigned to ingress-egress node \npairs. Note that, in our simulation we consider K=5 for \nK-SD-AD and K-AD-SD, since this value is adequate \nfor this small network.  \n   Figures 1(a)-(c) present the NPD, FID and NLP\nperformance of the heuristic algorithm with the \nproposed cost functions as a function of total number \nof traffic flows. In these three figures we set the total \npercentage of low availability links to 30%. Figure 1(a) \nshows that AT2 has the best NPD. This is due to the \nfact that for AT2, in most of the cases the costs \nassociated to the high availability links are less than the \nlow availability links. The other cost functions have \nlower NPD values but are still significantly better than \nSD which does not consider the link availability values \nat all and has the lowest NPD values. Figure 1(b) \nshows that K-AD-SD has the best FID. This is due to \nthe fact that in K-AD-SD, penalizing the low \navailability links which are far away from the ingress \nrouter is considered directly as its first objective in the \ncost function. The other cost functions have higher FID\nvalues but are still significantly better than SD, which \ndoes not consider the failure impact at all. Figure 1(c) \nshows that AT2 has the best NLP which means that \nfewer links needed to be protected and as a result less \nresources need be consumed by local backup paths for \nthe same reasons as described for figure 1(a). Other \ncost functions have higher NLP values but are still \nsignificantly better than SD. Figures 1(a)-(c) show that \namong the four proposed cost functions K-SD-AD has \nthe worse performance regarding NPD,FID,NLP. The \nreason is that this approach first finds K number of \nshortest paths according SD cost function and then as \nits second objective considers the availability and \nfailure impact parameters to choose the final path. \nHence, its availability performance is less than other \nproposed cost functions but still performs better than \nSD.\n   Figure 2(a) shows the primary path resource \nconsumption of the proposed cost functions. The \nresults show that in all of the proposed cost functions, \nthe resources consumed by primary paths are more than \nthose by SD. In fact, there is a trade off between the \navailability performance of the proposed cost functions \nand their primary path resource consumption. For \nexample, since AT2 has the best availability \nperformance regarding NPD and NLP, it consumes \n54% more resources than the SD on average. In \ncomparison, K-SD-AD consumes only 6% more \nresources on average in comparison to that of SD since \nit provides the least availability among the four \nproposed cost functions. However, the resource \nconsumption figures are markedly different when we \ninclude backup path resources, as shown in Figure 2(b). \nThis shows that SD consumes the most resources in \ncomparison to all the other proposed cost functions. \nThis is due to the fact that most of its primary paths \nhave low availability and backup paths need to be \nprovisioned for them. However, our proposed cost \nProceedings of the 10th IEEE Symposium on Computers and Communications (ISCC 2005)\n1530-1346\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 15,2010 at 08:35:15 UTC from IEEE Xplore.  Restrictions apply. \n                    2(a)                                              2(b) \nFigure 2. Resource consumption for (a) Primary paths \nand (b) Total paths\nfunctions require fewer backup paths to achieve overall \npath availability. Since our approach improves network \npath availability while reducing total network resource \nconsumption, it can be an alternative to the existing \napproaches to achieve high availability and minimum \ncost network provisioning. \n   We summarise the performance of the proposed cost \nfunctions as follows. AT1 has the best performance \nregarding total resource consumption. AT2 has the best \nperformance regarding NPD and NLP. K-SD-AD has \nthe best performance regarding primary path RC after \nSD. K-AD-SD has the best performance regarding FID.\n             \n                                \n    \n                                           1(a) \n                                   1(b) \n                                   1(c) \nFigure 1. Effects of number of traffic flows on (a) NPD, (b) \nFID and (c) NLP  \n7. Conclusion \n   We have formulated the offline TE survivability \ndesign (OTESD) problem. The objective is to find for \neach traffic flow a primary path with improved \navailability and minimum failure impact that satisfies \nthe bandwidth requirement while optimising resource \nconsumption. We have proposed a heuristic algorithm \nwith four various cost functions to solve the problem. \n   Simulation results show that our proposed heuristic \nalgorithm increases the network protection, which                   \nmeans high availability primary paths can be provided \nfor most of the traffic flows and so less failure \ndetection, notification and traffic switching are \nrequired. Also, it decreases resource consumption for \nestablishing local backup paths (if necessary). Finally, \nit can improve the resource efficiency by saving some \namount of resources. In summary, this work allows \nISPs to apply better TE and QoS routing strategies to \nincrease service availability for their customers.   \n8. References \n[1] C. Huang et al., \u201cBuilding Reliable MPLS Networks \nusing a path protection mechanism\u201d, IEEE \nCommunication Magazine, vol. 40, no. 3, March 2002.  \n[2] J.L. Marzo et al., \u201cAdding QoS Protection in order to \nEnhance MPLS QoS Routing\u201d, IEEE International \nConference on Communications, vol. 3, 2003, pp. 1973-\n1977.\n[3] E. Calle et al., \u201cProtection Performance Components in \nMPLS Networks\u201d, Computer Communications Journal,\nvol. 27, no. 12, July 2004, pp. 1220-1228. \n[4] J. Zhang et al., \u201cA New Provisioning Framework to \nProvide Availability-Guaranteed Service in WDM Mesh \nNetworks\u201d, IEEE International Conference on \nCommunications, vol. 2, 2003, pp.1484-1488. \n[5] Q. Ma et al., \u201cOn Path Selection for Traffic with \nBandwidth Guarantees\u201d, IEEE International Conference \non Network Protocols, 1997, pp.191-202.\n[6]  D. Eppstein, \u201cFinding the k Shortest Paths\u201d, 35th IEEE \nSymposium on Foundations of Computer Science, 1994, \npp.154-165. \n[7] A. Nucci et al., \u201cIGP Link Weight Assignment for \nTransit Link Failures\u201d, Elsevier ITC18 2003, Berlin, \nGermany. \n[8] Telcordia document \u201cReliability Prediction Procedure \nfor Electronic Equipment\u201d (document number SR-332, \nIssue 1), AT&T Bell Labs 1999. \n[9] M. To et al., \u201cUnavailability analysis of long-haul \nnetworks\u201d, IEEE Journal on Selected Areas in \nCommunications, vol. 12, 1994, pp. 100-109. \n10 15 20 25 30 35 40\n40\n50\n60\n70\n80\n90\n100\nNumber of Traffic Requests\nNe\ntw\nor\nk \nPr\not\nec\ntio\nn \nDe\ngr\nee\nSD\nAT1\nAT2\nK\u2212SD\u2212AD\nK\u2212AD\u2212SD\n10 15 20 25 30 35 40\n0\n5\n10\n15\n20\n25\n30\n35\n40\n45\nNumber of Traffic Requests\nFa\nilu\nre\n Im\npa\nct\n D\neg\nre\ne SDAT1\nAT2\nK\u2212SD\u2212AD\nK\u2212AD\u2212SD\n10 15 20 25 30 35 40\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\nNumber of Traffic Requests\nN\nLP\n p\ner\n L\nSP\nSD\nAT1\nAT2\nK\u2212SD\u2212AD\nK\u2212AD\u2212SD\nSD K\u2212SD\u2212AD AT1 K\u2212AD\u2212SD AT2\n0\n5000\n10000\n15000\nP\nri\nm\nar\ny \nP\nat\nh \nR\nes\nou\nrc\ne \nC\non\nsu\nm\npt\nio\nn\nCost Functions\nAT1 K\u2212SD\u2212AD K\u2212AD\u2212SD AT2 SD\n0\n2000\n4000\n6000\n8000\n10000\n12000\n14000\n16000\n18000\nTo\nta\nl R\nes\nou\nrc\ne \nC\non\nsu\nm\npt\nio\nn\nCost Functions\nProceedings of the 10th IEEE Symposium on Computers and Communications (ISCC 2005)\n1530-1346\/05 $20.00 \u00a9 2005 IEEE\nAuthorized licensed use limited to: University of Surrey. Downloaded on April 15,2010 at 08:35:15 UTC from IEEE Xplore.  Restrictions apply. \n"}