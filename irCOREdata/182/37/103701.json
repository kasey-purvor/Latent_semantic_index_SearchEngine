{"doi":"10.1109\/VLHCC.2008.4639066","coreId":"103701","oai":"oai:eprints.brighton.ac.uk:7059","identifiers":["oai:eprints.brighton.ac.uk:7059","10.1109\/VLHCC.2008.4639066"],"title":"EulerView: article organisation within the ACM","authors":["De Chiara, Rosario","Fish, Andrew"],"enrichments":{"references":[{"id":1011660,"title":"A unified classification system for research in the computing disciplines.","authors":[],"date":"2005","doi":"10.1016\/j.infsof.2004.08.006","raw":"Iris Vessey, Venkataraman Ramesh, and Robert L. Glass. A unified classification system for research in the computing disciplines. Information & Software Technology, 47(4):245\u2013255, 2005.","cites":null},{"id":1007318,"title":"Classification and categorization: a difference that makes a difference.","authors":[],"date":"2004","doi":null,"raw":"Elin K. Jacob. Classification and categorization: a difference that makes a difference. Library Trends, 52(3):515\u2013540, 2004.","cites":null},{"id":1008784,"title":"Creating semantic web contents with prote\u00b4ge\u00b4-2000.","authors":[],"date":"2001","doi":"10.1109\/5254.920601","raw":"Natalya F. Noy, Michael Sintek, Stefan Decker, Monica Crube\u00b4zy, Ray W. Fergerson, and Mark A. Musen. Creating semantic web contents with prote\u00b4ge\u00b4-2000. IEEE Intelligent Systems, 16(2):60\u201371, 2001.","cites":null},{"id":1005066,"title":"eul.icio.us: Euler diagrams for del.icio.us.","authors":[],"date":"2008","doi":null,"raw":"Rosario De Chiara and Andrew Fish. eul.icio.us: Euler diagrams for del.icio.us. In 12th International Conference Information Visualisation (to appear). IEEE Computer Society, 2008.","cites":null},{"id":1004321,"title":"Eulerview with projections: non hierarchical visualisation.","authors":[],"date":"2008","doi":"10.1109\/vlhcc.2007.42","raw":"Rosario De Chiara and Andrew Fish. Eulerview with projections: non hierarchical visualisation. In 6th Eurographics Italian Chapter Conference (to appear). The Eurographics Association, 2008.","cites":null},{"id":1003687,"title":"Eulerview: a non-hierarchical visualization component.","authors":[],"date":"2007","doi":"10.1109\/vlhcc.2007.42","raw":"Rosario De Chiara and Andrew Fish. Eulerview: a non-hierarchical visualization component. In VLHCC \u201907: Proceedings of the IEEE Symposium on Visual Languages and Human-Centric Computing (VL\/HCC 2007), pages 145\u2013152, Washington, DC, USA, 2007. IEEE Computer Society.","cites":null},{"id":1005838,"title":"Eulr: a novel resource tagging facility integrated with Flickr.","authors":[],"date":"2008","doi":"10.1145\/1385569.1385624","raw":"Rosario De Chiara, Andrew Fish, and Salvatore Ruocco. Eulr: a novel resource tagging facility integrated with Flickr. In Proceedings of the AVI 2008 Advanced Visual Interfaces Conference, pages 326\u2013330. ACM Press, 2008.","cites":null},{"id":1006528,"title":"Exploring the computing literature with visualization and stepping stones & pathways.","authors":[],"date":"2006","doi":"10.1145\/1121949.1121982","raw":"E. Fox, F. Neves, X. Yu, R. Shan, S. Kim, and W. Fan. Exploring the computing literature with visualization and stepping stones & pathways. Communications of the ACM, (4):53\u201358, 2006.","cites":null},{"id":1010162,"title":"Facetmap: A scalable search and browse visualization.","authors":[],"date":"2006","doi":"10.1109\/TVCG.2006.142","raw":"Greg Smith, Mary Czerwinski, Brian Meyers, Daniel Robbins, George Robertson, and Desney S. Tan. Facetmap: A scalable search and browse visualization. IEEE Transactions on Visualization and Computer Graphics, 12(5):797\u2013804, 2006.","cites":null},{"id":1001610,"title":"Flickr: Organize your photos.","authors":[],"date":null,"doi":null,"raw":"Flickr: Organize your photos. http:\/\/flickr.com\/photos\/organize.","cites":null},{"id":1010944,"title":"How do people organize their desks?: Implications for the design of office information systems.","authors":[],"date":"1983","doi":"10.1145\/357423.357430","raw":"Thomas W. Malone. How do people organize their desks?: Implications for the design of office information systems. ACM Trans. Inf. Syst., 1(1):99\u2013112, 1983.","cites":null},{"id":1002332,"title":"Ordered and quantum treemaps: Making effective use of 2d space to display hierarchies.","authors":[],"date":"2002","doi":"10.1145\/571647.571649","raw":"Benjamin B. Bederson, Ben Shneiderman, and Martin Wattenberg. Ordered and quantum treemaps: Making effective use of 2d space to display hierarchies. ACM Trans. Graph., 21(4):833\u2013854, 2002.","cites":null},{"id":1009584,"title":"Polyarchy visualization: visualizing multiple intersecting hierarchies.","authors":[],"date":"2002","doi":"10.1145\/503376.503452","raw":"George Robertson, Kim Cameron, Mary Czerwinski, and Daniel Robbins. Polyarchy visualization: visualizing multiple intersecting hierarchies. In Proceedings of the SIGCHI conference on Human factors in computing systems, pages 423\u2013430. ACM Press, 2002.","cites":null},{"id":1008058,"title":"Swoop: A web ontology editing browser.","authors":[],"date":"2006","doi":"10.1007\/11762256_15","raw":"Aditya Kalyanpur, Bijan Parsia, Evren Sirin, Bernardo Cuenca Grau, and Bijan Parsia. Swoop: A web ontology editing browser. Journal of Web Semantics, 4(2):144\u2013153, 2006.","cites":null},{"id":1003016,"title":"The bookmark and the compass: orientation tools for hypertext users.","authors":[],"date":"1988","doi":"10.1145\/51640.51645","raw":"Mark Bernstein. The bookmark and the compass: orientation tools for hypertext users. SIGOIS Bull., 9(4):34\u201345, 1988.","cites":null}],"documentType":{"type":1}},"contributors":[],"datePublished":"2008-01-01","abstract":"EulerView is a resource management tool which sup- ports operations, such as intersection, on categories. We relate EulerView displays to sets of paths in the transitive closure of the directed dual graph of an Euler diagram, and provide methods for transforming hierarchies with symbolic links into an EulerView display. Linking the display directly to the file system enabled the export of both the directory structure and resource placement which enables users to build small manageable views of their categorisation structure within which to place resources and then export this onto the larger file system. Using the transformation methods developed, we consider the importation of ACM classification into EulerView, enabling users to categorise and store resources such as articles within the imported ACM classification. EulerView is tailored to be appropriate for the ACM CCS application, and new techniques for focus and navigation within EulerView are developed","downloadUrl":"","fullTextIdentifier":null,"pdfHashValue":null,"publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n    \n    \n      oai:eprints.brighton.ac.uk:7059<\/identifier><datestamp>\n      2015-04-14T12:57:33Z<\/datestamp><setSpec>\n      7374617475733D707562<\/setSpec><setSpec>\n      7375626A656374733D47303030:47343030<\/setSpec><setSpec>\n      74797065733D636F6E666572656E63655F6974656D<\/setSpec><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:relation>\n    \n      \n        http:\/\/eprints.brighton.ac.uk\/7059\/<\/dc:relation><dc:title>\n        EulerView: article organisation within the ACM<\/dc:title><dc:creator>\n        De Chiara, Rosario<\/dc:creator><dc:creator>\n        Fish, Andrew<\/dc:creator><dc:subject>\n        G400 Computing<\/dc:subject><dc:description>\n        EulerView is a resource management tool which sup- ports operations, such as intersection, on categories. We relate EulerView displays to sets of paths in the transitive closure of the directed dual graph of an Euler diagram, and provide methods for transforming hierarchies with symbolic links into an EulerView display. Linking the display directly to the file system enabled the export of both the directory structure and resource placement which enables users to build small manageable views of their categorisation structure within which to place resources and then export this onto the larger file system. Using the transformation methods developed, we consider the importation of ACM classification into EulerView, enabling users to categorise and store resources such as articles within the imported ACM classification. EulerView is tailored to be appropriate for the ACM CCS application, and new techniques for focus and navigation within EulerView are developed.<\/dc:description><dc:publisher>\n        IEEE<\/dc:publisher><dc:date>\n        2008-01-01<\/dc:date><dc:type>\n        Contribution to conference proceedings in the public domain<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:format>\n        text<\/dc:format><dc:language>\n        en<\/dc:language><dc:rights>\n        <\/dc:rights><dc:identifier>\n        http:\/\/eprints.brighton.ac.uk\/7059\/1\/VLHCC08.pdf<\/dc:identifier><dc:identifier>\n          De Chiara, Rosario and Fish, Andrew  (2008) EulerView: article organisation within the ACM  In: IEEE Symposium on Visual Languages and Human-Centric Computing 2008, Herrsching am Ammersee, Germany, 5-19 September, 2008.     <\/dc:identifier><dc:relation>\n        http:\/\/ieeexplore.ieee.org\/xpl\/articleDetails.jsp?arnumber=4639066<\/dc:relation><dc:relation>\n        10.1109\/VLHCC.2008.4639066<\/dc:relation><\/oai_dc:dc><\/metadata><\/record>","journals":null,"language":{"code":"en","id":9,"name":"English"},"relations":["http:\/\/eprints.brighton.ac.uk\/7059\/","http:\/\/ieeexplore.ieee.org\/xpl\/articleDetails.jsp?arnumber=4639066","10.1109\/VLHCC.2008.4639066"],"year":2008,"topics":["G400 Computing"],"subject":["Contribution to conference proceedings in the public domain","PeerReviewed"],"fullText":"EulerView: article organisation within the ACM Classification\nRosario De Chiara\nISISLab - Dipartimento di Informatica\ned Applicazioni \u201cR.M. Capocelli\u201d\nUniversita` di Salerno - ITALY\ndechiara@dia.unisa.it\nAndrew Fish\u2217\nSchool of Computing, Mathematical\nand Information Sciences,\nUniversity of Brighton - UK\nAndrew.Fish@brighton.ac.uk\nAbstract\nEulerView is a resource management tool which sup-\nports operations, such as intersection, on categories. We\nrelate EulerView displays to sets of paths in the transitive\nclosure of the directed dual graph of an Euler diagram, and\nprovide methods for transforming hierarchies with symbolic\nlinks into an EulerView display. Linking the display directly\nto the file system enabled the export of both the directory\nstructure and resource placement which enables users to\nbuild small manageable views of their categorisation struc-\nture within which to place resources and then export this\nonto the larger file system. Using the transformation meth-\nods developed, we consider the importation of ACM clas-\nsification into EulerView, enabling users to categorise and\nstore resources such as articles within the imported ACM\nclassification. EulerView is tailored to be appropriate for\nthe ACM CCS application, and new techniques for focus\nand navigation within EulerView are developed.\n1 Introduction and Background\nIn [7], EulerView was proposed as a means to enable\nthe common user to easily capture the naturally non hi-\nerarchical organization of website bookmarking. We pro-\npose the extension of this idea, importing existing (non-\nhierarchical) classifications into EulerView. This will en-\nable user to place their resources within an existing classifi-\ncations structure using EulerView. Furthermore, it enables\nthem to manipulate the classification structure within the\nEulerView representation, allowing them flexibility of rep-\nresentation according to their preferences. This will help\nto address the need for a common method of viewing and\ninteracting with a range of different classification systems\n(or ontologies). From a resource management perspective,\n\u2217Funded by UK EPSRC grant EP\/E011160: Visualisation with Euler\nDiagrams.\nwe are enabling the ability to place resources within exist-\ning classification structure, to enable user manipulation of\nsuch structures, and to facilitate user searching and brows-\ning of resources placed within these structures. Allowing\nthe export of resource placement with EulerView to the file\nsystem addresses the dual needs of users in classifying re-\nsources within a classification system as well as in con-\nstructing a part of the file-system structure that captures the\nsystem.\nWe investigate the use of such techniques for the ACM\nComputing Classification System (ACM CCS) [1] of re-\nsearch articles. A useful, detailed description of the ACM\nCCS can be found at [19]. Authors are required to find the\nappropriate place within the ACM classification structure\nto classify it. Individual authors may wish to be able to\nstore and retrieve their own papers (or all papers that are\ndeemed relevant to their interests) according to this clas-\nsification, or a local part of this classification. Similarly,\nresearch group leaders or administrators, research depart-\nments or institutions might want to keep track of larger sets\nof relevant articles. The ACM CCS is an important classifi-\ncation system, but there are other potentially useful classi-\nfication systems in this area. In [19], they propose a unified\nclassification system for papers related to three computing\ndisciplines: computer science, software engineering and in-\nformation systems. The rationale behind their research is\nthat \u201cthe three disciplines share substantial bodies of knowl-\nedge and . . . existing classifications do not adequately ad-\ndress their combined needs.\u201d\n1.1 Categorisation and Classification\nRecall the following distinction between categorization\nand classification [13]: \u201cCategorization divides the world of\nexperience into groups or categories whose members share\nsome perceptible similarity within a given context\u201d, where\ncategory composition depends on the context and on the\nuser of the organization; \u201cclassification involves the orderly\nand systematic assignment of each entity to one and only\none class within a system of mutually exclusive and non-\noverlapping classes\u201d, where classification usually refers to\nthe assignment of a resource (e.g. a document, URL or\nphoto) to a single class, among classes, often hierarchically\norganized making clear the complete relationships amongst\nclasses (see [4] for a typical biological example).\nThe process of categorisation is generally perceived as\nbeing less precise than classification: the placement of\nan item within a classification structure indicates precise\nglobal information about that item, whereas placement of\nan item within a categorisation structure may represent\npartial information about the item, which is to be inter-\npreted locally, or within a given context. Since hierarchi-\ncal classification structures are often not sufficient for user-\nclassification needs (and this is even felt to be the case in a\nreal office setting [18]), one can consider non-hierarchical\nclassification structures, such as polyarchies [16] or Eu-\nlerView [7]. Non hierarchical classifications fit into the\nclassification definition given above if one thinks of two\noverlapping classes as three classes: two non-overlapping\nclasses together with another class for the intersection (see\nsection 2). It also fits with the notion of categorisation:\nitems in the intersection of categories share some prop-\nerty. So, non-hierarchical classifications could be thought\nas living somewhere in the middle of this Categorisation-\nClassification spectrum, allowing the overlap of categories\nbut with a formal underlying model.\nIn general, strict classification system interfaces are es-\npecially useful for storage and retrieval of information, but\nare often thought to be too restrictive for users, since: they\nmay be time consuming to use, they may get very large and\nthe visualisations unmanageable very quickly, and changes\nin the classification structure over time may require the up-\ndate of all existing resources that are already classified \u2013\nwhich may be a difficult chore. On the other hand, categori-\nsation systems such as free-form tagging are much easier\nand quicker to use, but they lack structure and they require\nthe use of different representations, such as tag clouds [11],\nto browse through existing resources, requiring a change of\nrepresentation system from their input.\nWe advocate a \u201cbest of both worlds approach\u201d, by keep-\ning an underlying (non-hierarchical) classification system,\nbut presenting to the user interactive views of that data in\nthe form of a simple categorisation structure which may\nbe user-created and easily manipulated. This will bring the\nbenefits of a classification structure, especially in terms of\ninformation retrieval, but with the flexibility associated to a\ncategorisation structure.\n1.2 Related techniques\nFaceted classification is a well-known paradigm that en-\nables a user to navigate a hierarchy of items which are\nsorted by their facets (certain classifiable characteristics).\nThe idea is to let the user refine a particular visit in the hier-\narchy by iteratively specify the desired value for each facet\n[17]. EulerView shares with the facet classification system\nthe idea of providing a means to customize the visualisa-\ntion of a set of items according to the user\u2019s needs. A major\ndifference between faceted classification systems and Eu-\nlerView is that EulerView uses the concept of overlapping\ncategories, which is not available in any hierarchical visual-\nisation techniques; it might be worth investigating integrat-\ning the ideas of EulerView related to overlapping categories\nwith faceted browsing. Treemaps [5] are common method\nfor visualising hierarchical categorisation structures. They\nwere designed for the purpose of representing large datasets\nof documents via a suitable space subdivision method, pro-\nviding in one image an impression of the distribution of a\ncertain property amongst these documents (e.g. the size of\nevery document). The current version of EulerView does\nnot support the use of numerical values together with the\nclassification, although this might be worthwhile. More im-\nportantly the main ideas of using multiple labels and reify-\ning non-hierarchical classifications does not need to be lim-\nited to TreeView (as with EulerView) but could be used\nwith other hierarchical visualisation techniques where the\nlabelling can be integrated.\n2 Reifying non-hierarchical models\nThe EulerView display [7] was designed, with user in-\nteraction in mind, to be more flexible than than a strict\nclassification system and to have an appearance similar to\nTreeview to aid in accessibility due to its familiarity. The\nmain idea was that each category vertex corresponds to a\nset of tags with which a resource can be tagged easily, but\nthat a user may construct multiple paths to the view of the\nsame virtual folder (which stores links to the resources).\nEach category vertex can have multiple labels so that non-\nhierarchical structures can be displayed as a tree-structure.\nA formal description of an EulerView display can be found\nat [9]; they also provide the formal description of the stor-\nage model but we do not utilise this here. In this section we\ndescribe a method for converting Euler diagrams into Eu-\nlerView displays. To elucidate on the concept of EulerView\nwe indicate the relationship between EulerView and Euler\ndiagrams. The Euler diagram model is a common non-\nhierarchical representation, which traditionally uses curves\nin plane to represent sets (or categories) and uses the spa-\ntial properties of containment, intersection and disjointness\nto represent set containment, intersection and disjointness.\nFor example, the Euler diagram on the left of Figure 1 de-\npicts that E is a subcategory of D, that C is a subcategory\nof A\u2212B and that D is disjoint from A\u222aB. Now, within the\nFigure 1. (A): A traditional concrete Euler diagram with 5 categories and 7 zones; (B): A nonstandard,\nmodified Euler Diagram part-way between the two extremes \u2013 it has no intersections but utilises the\ncontainment relationship; (C): A depiction of the list of zones, or the abstract Euler diagram.\nFigure 2. An example of EulerView categorizing papers within the ACM. (a) A modified Euler diagram\nmatching the EulerView (b) a traditional Euler diagram of the same model.\ncontext of the diagram, a resource placed in a zone indicates\nthe tags associated with that resource. So for instance, if a\nresource r is placed within the zone A&B (i.e. the region\nwhich is inside both A and B only) in Figure 1 then it will\nhave tags A and B but not tags C,D or E.\nWhen formally dealing with Euler diagrams, the abstract\ndiagram is used, which is essentially just a list of zones in\nthe diagram. The abstract diagram for this example, with\na slight abuse of notation to improve readability, can be\nwritten as: {U,A,B,D,A&B,A&C,D&E}, where each\nstring indicates the set of curves that the region is con-\ntained within and U indicates that the zone outside all of the\ncurves. A visualisation of an abstract diagram, albeit not a\nvery useful one, is shown at the right of Figure 1, where\neach curve represents a single zone (and so these curves are\ndisjoint). The important distinction here is the label repre-\nsentation: the interior of the curve A will represent the set\nof resources that are tagged by A only, whereas on the left\nof the figure, in the traditional Euler diagram, the curve A\nrepresents the set of resources tagged by A as well as those\nin A&B and in A&C.\nThe middle diagram in Figure 1 is a modified Euler dia-\ngram which depicts a representation that is partway between\nthe two extremes, with the intersections of categories being\nviewed using zone based descriptions: the intersection cat-\negory A&B in the left diagram has been replaced with a\ncurve labelled A&B in the middle diagram. Notice that if\nwe deleted the curve labelled by A&B from the middle di-\nagram then we would obtain a traditional hierarchical view\nindicated by the containment relation.\nHierarchies are commonly captured by a tree structure and\nan Euler Diagram model can be compressed into a tree-\nlike view by keeping the hierarchical part of the model and\nreifiying the overlapping category part so that we can dis-\nplay it as a hierarchical view. This provides us with a rep-\nresentation that is partway between the two extremes, with\nthe category intersections being viewed as zone based de-\nscriptions.\nThis construction of a modified Euler diagram via the\ndecomposition of intersections gives one canonical decom-\nposition of an Euler diagram. Allowing the use of multiple\nlabels on tree nodes (which indicates the intersections of\ncategories) enables us to display this representation within\na tree structure. For example, from right to left, Figure 2\ndisplays: a traditional Euler diagram, a modified Euler di-\nagram, and the corresponding EulerView representation.\nHere, the EulerView display used in Figure 2 was actually\na user-constructed view and the Euler diagram was con-\nstructed from it. One can construct smaller views from the\nEuler diagram, and it is important to realise that it is only\nnecessary to display a set of zones which are required as the\nset of tags of a resource; that is, we do not need to display\nany more zones (as category vertices), unless the user wants\nto. The usual meaning of the placement of a resource within\nthe EulerView is simply that it has that set of tags within its\nlocal context. The user can manipulate the local context to\nshow different views of the underlying structure.\nNow, for a traditional Euler diagram one can consider its\ndirected dual graph. As the size of the underlying diagram\nincreases, this structure may become large, but for a modi-\nfied Euler diagram there is only one path to each vertex in\nthis dual graph. The EulerView representation called the in-\ntersection view is obtained by taking the directed dual graph\nof the modified Euler diagram. In general, any set of paths\nin the transitive closure of the directed dual graph of the\noriginal Euler diagram gives rise to an EulerView display.\nFor example, in Figure 3, the top three diagrams show\ntwo categories A and B together with their intersection\nA&B. Overlaid is a selection of paths in the transitive clo-\nsure of their directed dual graphs; they are directed from\nthe vertex outside all of the contours inwards. That is, if\nlevel n denotes a region which is inside n contours then\nconsecutive nodes in each path increase in level. Taking the\ntransitive closure allows us to \u201cjump\u201d between vertices with\na difference in level of more than one (e.g. we can traverse\nfrom U to A&B in one step in the top left of the figure,\npassing over two contours rather than one). The middle and\nbottom rows of the figure show the corresponding modified\nEuler diagrams and EulerViews respectively. The left hand\nside shows the intersection view, whilst the other two cor-\nrespond to different sets of paths called the projection view\n(middle) and the combined view (right). In section 3 we pro-\nvide schema for the automatic generation of these different\nEulerView displays within the ACM CCS application.\n3 ACM classification system in EulerView\nWe provide a small excerpt of the ACM CCS, together\nwith a simple schema indicating the translation into possi-\nble alternate EulerView representations. In the ACM CCS\nwe have the main hierarchy utilising the isComposedBy\nrelationship and this maps naturally to a normal Treeview.\nTable 1. Basic Schema for the EulerView dis-\nplay options.\nACM CCS EulerView EulerView EulerView\nRelationship Relationship Relationship Relationship\nisComposedBy Containment Containment Containment\nisRelatedTo Projection Intersection Both\nThe relationships isRelatedTo are effectively symbolic\nlinks across the original hierarchy. As such we must de-\ncide what to map them to in our EulerView display. Table 1\nshows a simple schema which can be used to translate the\nACM CCS into the three different EulerView displays: us-\ning projections (which can be used to directly simulate the\nsymbolic links), intersections (using multiple category ver-\ntex labelling) or both, as is shown in Figure 4. The contain-\nment relationship in Table 1 indicates the use of the main\nhierarchical tree structure.\nFigure 4 shows the process of passing from the ACM\nCCS (a) to the combined EulerView (c) via a suitable XML\ntranslation (b) of the original ACM CCS XML code. For\nthis combined view, we translate a \u201crelated to\u201d tag in the\nACM CCS to a projection node in the corresponding po-\nsition of the EulerView XML together with an intersection\nnode in the next available place at the same level of the hi-\nerarchy as the projection node. The highlighted region in\nFigure 4(a) shows a symbolic link between two categories\nindicated by the \u201crelated to\u201d relationship. Figure 4(b) shows\nthe translation of the excerpt to the XML used by EulerView\nwhere the symbolic link is translated to both an intersection\nand a projection, and Figure 4(c) shows the combined Eu-\nlerView representing the excerpt. Note that in the transla-\ntion we have extended the id system of the ACM CCS to\nnumber the subject descriptors.\nArticle placement. We allow an article to be placed in\nany category and we allow multiple copies of an item to be\nplaced in different categories. This enables a user to be able\nto place an item in separate categories rather than having\nto create the complete intersection category. To assist the\nuser in finding all of the categories associated with an item\nwe allow the user to cycle between the different placements\nof the items. For deletion of an item, there is an option to\ndelete that particular placement of the item or to delete all\nplacements.\nThis version of EulerView differs from say, Eulr [10], used\nfor photo tagging where the set of all tags in the path back\nto the root node are assigned to the placement of a photo,\nsince here we wish to only associate the most specific set\nof identifers (ids) in the ACM CCS to an article. That is,\nwe wish to associate the set of most specific ids in the path\nback to the root (one could do this by post processing, as-\nFigure 3. Top: paths in the transitive closure of the dual graph of Euler diagrams; Middle: modified\nEuler diagrams which have no intersections; Bottom: the corresponding EulerViews, termed the\nintersection view, the projection view and the combined view.\nsociating all of the ids and then removing the unnecessary\nones).\nFocussing techniques. To assist users in article placement,\nor searching or browsing tasks, especially using large Eu-\nlerViews we attempt to reduce the amount of information\ndisplayed according to a user setting of context. Bread-\ncrumbs [6] is a well known technique that is used to convey\nto the user their location within a website structure by dis-\nplaying a trail of crumbs from the homepage to the current\npage (this is one possible path from the root-node within\nthe website graph). As was already present in [7] we show\na \u201ctrail of categories\u201d which is the context that the currently\nselected node of EulerView refers to. Further simple aids\nhave recently been incorporated into EulerView such as a\nzoomable universe: a user can zoom in on a category vertex\nof the EulerView display, displaying that vertex in the place\nof the Universe vertex, thereby setting that node to be the lo-\ncal context. Whilst zooming the user is aware of the context\nvia the breadcrumbs which always refer to the Universe-\nrooted display. We also allow simple text searches, auto-\nmatically zooming in on the next category matching the\nstring, cycling through occurrences of the string upon re-\npeating the search.\nA novel focussing technique is that of branch compression 1\nwhich allows users to compress a path in the EulerView dis-\nplay to a single vertex, restricting the amount of information\nin one view. This is a natural option in EulerView since we\nalready allow multiple labels associated to a single vertex.\nThe display on the compressed branches shows the nodes\nin the compressed branch separated by colons to indicate\nthe path for normal category nodes and an ampersand for\nprojection nodes. This distinction is made here because in\nthe ACM classification setting we are only really interested\nin the most specific id of the node in each branch of the\nACM CCS. So, the placement of an article in a compressed\nbranch node should only be placed at the most specific po-\nsitions upon decompression. For tagging settings where a\nresource would be tagged by all labels in path back to root,\nsuch as for tagging photos in Flickr using Eulr ([10]) we\ncould simply display the conjunction of all node labels in-\nstead.\nIn Figure 5, we show the effects of branch compression:\nthe branch from Information Systems to Graphical User\n1branch compression is a new technique but it is also briefly mentioned\nin the survey at [8], as is the zoomable universe.\nFigure 4. (a) an excerpt from ACM CCS, (b) translation to XML and (c) an EulerView representing the\nexcerpt, showing the combined view.\nFigure 5. Branches of the EulerView can be compressed to simplify the view\nInterfaces shown in the top of the figure is compressed\nto the single vertex whose label is the compression of\nthe labels in this path. The breadcrumbs for the selected\nnode Graphical User Interface(GUI) can also\nbe seen at the top of the figure.\nThe idea of branch compression in EulerView is to provide\nthe users with more power to alter the focus of the display.\nFor instance, if they are particularly interested in only a few\nparticular categories and not in related paths, they can sim-\nply compress the relevant branches and organise them ac-\ncordingly. Within the ACM classification this sort of facil-\nity might help with a user wishing to keep track of his own\nset of research articles if they are contained within a fairly\nsmall number of classifications. For instance, if the user\nhas several commonly used classifications, then storing the\nrelevant compressed branches near each other could make\nfuture classification and navigation simpler. One downside\nto the current implementation is that when using compres-\nsion and intersection operations, the labels can become long\nand a means of dealing with this would be useful to be in-\ncorporated.\nMore generally, we imagine the branch compression is\nlikely to be beneficial for classifications with deep trees,\nassisting in shortening the length of the left-to-right paths.\nNow, the ACM classification has only a fairly small depth\n(in terms of the number of vertices that can appear on any\npath), but when considering the possibility of displaying\nbranches beneath projection nodes this structure deepens.\nAs usual, user testing would be useful for examine the ac-\ntual advantages and disadvantages of branch compression.\nNavigational features. A projection node brings the extra\nnavigational features of symbolic links. We also allow the\nuser to cycle through the nodes with exactly the same label\nwhich is effectively a symbolic link. Here we really mean\nthe id of the node and not just the label, which we have\nhidden from the label in Figure 4, since it is not strictly nec-\nessary for the task of article placement or retrieval, but this\ninformation is stored and could be displayed if desired. The\nreason for using the id and not the label is that the same\nlabel (e.g. the label \u201cGeneral\u201d is repeated in many places\nover the ACM CCS and does not refer to the same categori-\nsation, but the id of those nodes does distinguish them).\nWe also allow the option of cycling through nodes with the\nsame total label set (the set of all labels on nodes back to\nthe root) to allow a user to navigate to all nodes representing\nthe same category. This makes the current display option of\nhaving items only appear where they are placed reasonable\nsince the user can find the other items in this category fairly\nquickly, whereas otherwise they might not be aware of other\nplacements.\nChoices of constructed views. The imported ACM in a\nprojection view in EulerView could simply be used as a\nTreeView with symbolic links. The intersection view cre-\nates intersection categories of related nodes, thereby en-\nabling the user to both classify an article with multiple clas-\nsifications in one go and to enter the structure at such an in-\ntersection, but has the drawback that it is necessary to scroll\nvertically through a larger number of categories and if one\npath is used to find a relevant placement of an article then\nwe have lost the related links. The combined view (creating\nboth of the intersection and the projection nodes) enables\nthe benefits of both. One reason that the use of EulerView\u2019s\nintersection and projection nodes may be useful is because\nif the categories are related in the ACM CCS then there is a\nreasonable chance that a user might want to classify using\nboth of the related categories.\nNow the use of projection nodes can be extended to allow\nthe placement of articles beneath them which adds the fea-\nture of being able to multiply classifying an article by these\nrelated categories in one go. However, some of the \u201cre-\nlated to\u201d links in the ACM CCS do not point to the most\nspecific nodes of the classification and a user might really\nwant to not to use the intersection of more specific cate-\ngories at a lower level. One could display the whole branch\ncorresponding to the projection node, but in general, if the\n\u201crelated to\u201d relationship contained any cycles then one must\nimpose a constraint to stop the repetition of nodes with the\nsame id in the same branch, for instance. Adding these\nbranches from the projection node would allow the user to\nnavigate horizontally and to use this as a multiple classifi-\ncation facility rather than needing to jump via the symbolic\nlinks. The branch compression facility may then be more\nuseful due to the longer paths being displayed.\n4 Conclusion\nWe have indicated a method for turning a non-\nhierarchical model (Euler diagrams) into an EulerView\nwhich has a tree structure, via sets of paths in the transitive\nclosure of the directed dual graph of the Euler diagram. Al-\nthough EulerView allows users to construct multiple paths\nof their own choice to resources, we can present the user\nwith some automatically generated EulerView displays. We\nhave provided a sample of three such options: the projection\nview, the intersection view and the combined view. These\ncan be used to transform a hierarchical structure with sym-\nbolic links into an EulerView. Linking to the file system\nenables the user to export the directory structure and re-\nsource placement directly to the file system; so a user can\nbuild small manageable views of their categorisation struc-\nture within which to place resources and then export this\nonto the larger file system if they wish.\nWe have investigated the potential for larger scale usage by\nimporting the ACM CCS into EulerView enabling the user\nto place and store articles within the imported classifica-\ntion structure. EulerView has been tailored to deal with the\nACM CCS, enabling multiple placement of articles together\nwith facilities to aid navigation and user focussing. Without\nEulerView a user who wishes to classify an article might\nnavigate through the ACM website structure to find the cor-\nrect classification, or perhaps they might just search for an\narticle on a similar topic appearing in the same conference\nseries, say, and use those keywords. Utilising EulerView\ncould aid the user in looking at their own previously clas-\nsified articles to help with categorisation as well as to con-\nsider nearby classifications. The ability to store articles in\nthe file system using the ACM classification might be useful\nfor a research administrator of a computer science depart-\nment, for instance, where they wish to investigate the spread\nof the recent work of the members of the department.\nWe have implemented features such as a zoomable universe\nand branch compression which should provide some assis-\ntance in narrowing the field of focus for the user as the size\nof imported classifications grows. The new branch com-\npression feature is unique to EulerView, taking advantage\nof the fact that we are allowing multiple labels on a single\ncategory vertex in the EulerView display. Integrating the\nideas of EulerView such as the use of multiple labels and\nbranch compression with other common hierarchical visu-\nalisations, effectively making them non-hierarchical, may\nprove beneficial, especially if these visualisation are more\nsuited to some particular task.\nIn the future we intend to perform user evaluation of the\nEulerView, especially with regard to their usage in larger\nscale systems. To date, user studies have provided very pos-\nitive feedback about user\u2019s perception of the features of Eu-\nlerView, but quantitative measurements have not yet been\nobtained. Some questions within EulerView that we would\nlike to address are: whether or not the alteration of the views\nto allow intersection categories assists or hinders users in\ntheir tasks, especially on a larger scale; and whether the ex-\ntra features of branch compression and zoomable universes\nreally do assist the user in focussing. Comparison with\nother tagging methods, such as free form tagging would be\nuseful to help investigate in which situations either method\nhas advantages.\nThere are many avenues of ongoing and future work such\nas the integration of EulerView with tools such as Flickr [3,\n10], del.icio.us [2, 9] and citeulike for resource manage-\nment, or even potentially with ontology management and\nsemantic web technologies [14, 15]. The importation of\nother classification systems, such as the one developed\nin [19] which presents a unified classification system for the\ncomputing fields of computer science, software engineering\nand information systems, would broaden the scope of use of\nEulerView. The extension of the EulerView representation\nto explicitly incorporate other boolean operators, enabling\nthe display of structured queries is in progress; the use of\nnotions of stepping stones and pathways in [12] which fa-\ncilitates the breaking up of queries into sub-queries will also\nbe investigated. Another avenue is the integration with Eu-\nler diagram generation techniques for small selections of\ncategories; this will facilitate use of diagrammatic compo-\nnents tied in with the EulerView thereby allowing users a\nchoice of format for interactivity.\nReferences\n[1] ACM CCS: ACM Computing Classification System\n[1998 version]. www.acm.org\/class\/1998.\n[2] del.icio.us. http:\/\/del.icio.us.\n[3] Flickr: Organize your photos.\nhttp:\/\/flickr.com\/photos\/organize.\n[4] Wikipedia: Taxonomy.\nhttp:\/\/en.wikipedia.org\/wiki\/Linnaean taxonomy.\n[5] Benjamin B. Bederson, Ben Shneiderman, and Martin\nWattenberg. Ordered and quantum treemaps: Making\neffective use of 2d space to display hierarchies. ACM\nTrans. Graph., 21(4):833\u2013854, 2002.\n[6] Mark Bernstein. The bookmark and the compass:\norientation tools for hypertext users. SIGOIS Bull.,\n9(4):34\u201345, 1988.\n[7] Rosario De Chiara and Andrew Fish. Eulerview: a\nnon-hierarchical visualization component. In VLHCC\n\u201907: Proceedings of the IEEE Symposium on Visual\nLanguages and Human-Centric Computing (VL\/HCC\n2007), pages 145\u2013152, Washington, DC, USA, 2007.\nIEEE Computer Society.\n[8] Rosario De Chiara and Andrew Fish. Eulerview with\nprojections: non hierarchical visualisation. In 6th Eu-\nrographics Italian Chapter Conference (to appear).\nThe Eurographics Association, 2008.\n[9] Rosario De Chiara and Andrew Fish. eul.icio.us: Eu-\nler diagrams for del.icio.us. In 12th International Con-\nference Information Visualisation (to appear). IEEE\nComputer Society, 2008.\n[10] Rosario De Chiara, Andrew Fish, and Salvatore\nRuocco. Eulr: a novel resource tagging facility inte-\ngrated with Flickr. In Proceedings of the AVI 2008 Ad-\nvanced Visual Interfaces Conference, pages 326\u2013330.\nACM Press, 2008.\n[11] Douglas Coupland. Microserfs. Harper Collins, 1995.\n[12] E. Fox, F. Neves, X. Yu, R. Shan, S. Kim, and W. Fan.\nExploring the computing literature with visualization\nand stepping stones & pathways. Communications of\nthe ACM, (4):53\u201358, 2006.\n[13] Elin K. Jacob. Classification and categorization: a\ndifference that makes a difference. Library Trends,\n52(3):515\u2013540, 2004.\n[14] Aditya Kalyanpur, Bijan Parsia, Evren Sirin, Bernardo\nCuenca Grau, and Bijan Parsia. Swoop: A web on-\ntology editing browser. Journal of Web Semantics,\n4(2):144\u2013153, 2006.\n[15] Natalya F. Noy, Michael Sintek, Stefan Decker, Mon-\nica Crube\u00b4zy, Ray W. Fergerson, and Mark A. Musen.\nCreating semantic web contents with prote\u00b4ge\u00b4-2000.\nIEEE Intelligent Systems, 16(2):60\u201371, 2001.\n[16] George Robertson, Kim Cameron, Mary Czerwinski,\nand Daniel Robbins. Polyarchy visualization: visual-\nizing multiple intersecting hierarchies. In Proceedings\nof the SIGCHI conference on Human factors in com-\nputing systems, pages 423\u2013430. ACM Press, 2002.\n[17] Greg Smith, Mary Czerwinski, Brian Meyers, Daniel\nRobbins, George Robertson, and Desney S. Tan.\nFacetmap: A scalable search and browse visualiza-\ntion. IEEE Transactions on Visualization and Com-\nputer Graphics, 12(5):797\u2013804, 2006.\n[18] Thomas W. Malone. How do people organize their\ndesks?: Implications for the design of office infor-\nmation systems. ACM Trans. Inf. Syst., 1(1):99\u2013112,\n1983.\n[19] Iris Vessey, Venkataraman Ramesh, and Robert L.\nGlass. A unified classification system for research\nin the computing disciplines. Information & Software\nTechnology, 47(4):245\u2013255, 2005.\n"}