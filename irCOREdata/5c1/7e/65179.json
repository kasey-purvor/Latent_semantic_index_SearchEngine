{"doi":"10.1109\/LICS.2008.19","coreId":"65179","oai":"oai:dro.dur.ac.uk.OAI2:6679","identifiers":["oai:dro.dur.ac.uk.OAI2:6679","10.1109\/LICS.2008.19"],"title":"Caterpillar duality for constraint satisfaction problems.","authors":["Carvalho, C.","Dalmau, V.","Krokhin, A."],"enrichments":{"references":[],"documentType":{"type":1}},"contributors":[],"datePublished":"2008-06-01","abstract":"The study of constraint satisfaction problems definable in various fragments of Datalog has recently gained considerable importance. We consider constraint satisfaction problems that are definable in the smallest natural recursive fragment of Datalog - monadic linear Datalog with at most one EDB per rule. We give combinatorial and algebraic characterisations of such problems, in terms of caterpillar dualities and lattice operations, respectively. We then apply our results to study graph H-colouring problems.\\u","downloadUrl":"https:\/\/core.ac.uk\/download\/pdf\/65179.pdf","fullTextIdentifier":"http:\/\/dro.dur.ac.uk\/6679\/1\/6679.pdf","pdfHashValue":"8ab38fb02121265694a5182b2af5777492b3f550","publisher":"IEEE","rawRecordXml":"<record><header><identifier>\n  \n    \n      oai:dro.dur.ac.uk.OAI2:6679<\/identifier><datestamp>\n      2016-08-05T12:27:19Z<\/datestamp><\/header><metadata><oai_dc:dc xmlns:oai_dc=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/\" xmlns:dc=\"http:\/\/purl.org\/dc\/elements\/1.1\/\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc\/ http:\/\/www.openarchives.org\/OAI\/2.0\/oai_dc.xsd\" ><dc:title>\n    \n      \n        Caterpillar duality for constraint satisfaction problems.<\/dc:title><dc:creator>\n        Carvalho, C. <\/dc:creator><dc:creator>\n        Dalmau, V.<\/dc:creator><dc:creator>\n        Krokhin, A.<\/dc:creator><dc:description>\n        The study of constraint satisfaction problems definable in various fragments of Datalog has recently gained considerable importance. We consider constraint satisfaction problems that are definable in the smallest natural recursive fragment of Datalog - monadic linear Datalog with at most one EDB per rule. We give combinatorial and algebraic characterisations of such problems, in terms of caterpillar dualities and lattice operations, respectively. We then apply our results to study graph H-colouring problems.\\ud\n<\/dc:description><dc:subject>\n        Constraint satisfaction problem<\/dc:subject><dc:subject>\n         Homomorphism<\/dc:subject><dc:subject>\n         Duality<\/dc:subject><dc:subject>\n         Caterpillar structures<\/dc:subject><dc:subject>\n         Datalog.<\/dc:subject><dc:publisher>\n        IEEE<\/dc:publisher><dc:source>\n        (2008). Twenty-third Annual IEEE Symposium on Logic in Computer Science, 24-27 June 2008, Pittsburgh, PA ; proceedings. Los Alamitos, CA: IEEE, pp. 307 -316 <\/dc:source><dc:date>\n        2008-06-01<\/dc:date><dc:type>\n        Book chapter<\/dc:type><dc:type>\n        PeerReviewed<\/dc:type><dc:identifier>\n        dro:6679<\/dc:identifier><dc:identifier>\n        issn:1043-6871<\/dc:identifier><dc:identifier>\n        doi:10.1109\/LICS.2008.19<\/dc:identifier><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6679\/<\/dc:identifier><dc:identifier>\n        http:\/\/dx.doi.org\/10.1109\/LICS.2008.19<\/dc:identifier><dc:format>\n        application\/pdf<\/dc:format><dc:identifier>\n        http:\/\/dro.dur.ac.uk\/6679\/1\/6679.pdf<\/dc:identifier><dc:rights>\n        \u00a9 2008 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\\ud\n<\/dc:rights><dc:accessRights>\n        info:en-repo\/semantics\/openAccess<\/dc:accessRights><\/oai_dc:dc><\/metadata><\/record>","journals":[{"title":null,"identifiers":["1043-6871","issn:1043-6871"]}],"language":{"code":"en","id":9,"name":"English"},"relations":[],"year":2008,"topics":["Constraint satisfaction problem","Homomorphism","Duality","Caterpillar structures","Datalog."],"subject":["Book chapter","PeerReviewed"],"fullText":"Durham Research Online\nDeposited in DRO:\n08 November 2010\nVersion of attached file:\nPublished Version\nPeer-review status of attached file:\nPeer-reviewed\nCitation for published item:\nCarvalho, C. and Dalmau, V. and Krokhin, A. (2008) \u2019Caterpillar duality for constraint satisfaction\nproblems.\u2019, in Logic in computer science : 23rd Annual IEEE Symposium, LICS 2008, 24-27 June 2008,\nPittsburgh, PA ; proceedings. Washington D.C.: IEEE, 307 -316 .\nFurther information on publisher\u2019s website:\nhttp:\/\/dx.doi.org\/10.1109\/LICS.2008.19\nPublisher\u2019s copyright statement:\n2008 IEEE. Personal use of this material is permitted. However, permission to reprint\/republish this material for\nadvertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists,\nor to reuse any copyrighted component of this work in other works must be obtained from the IEEE.\nAdditional information:\nUse policy\nThe full-text may be used and\/or reproduced, and given to third parties in any format or medium, without prior permission or charge, for\npersonal research or study, educational, or not-for-profit purposes provided that:\n\u2022 a full bibliographic reference is made to the original source\n\u2022 a link is made to the metadata record in DRO\n\u2022 the full-text is not changed in any way\nThe full-text must not be sold in any format or medium without the formal permission of the copyright holders.\nPlease consult the full DRO policy for further details.\nDurham University Library, Stockton Road, Durham DH1 3LY, United Kingdom\nTel : +44 (0)191 334 3042 \u2014 Fax : +44 (0)191 334 2971\nhttp:\/\/dro.dur.ac.uk\nCaterpillar duality for constraint satisfaction problems\nCatarina Carvalho\nDurham University\nDurham, DH1 3LE, UK\nc.a.carvalho@durham.ac.uk\nV\u0131\u00b4ctor Dalmau\nUniversity Pompeu Fabra\nBarcelona, 08003 Spain\nvictor.dalmau@upf.edu\nAndrei Krokhin\nDurham University\nDurham, DH1 3LE, UK\nandrei.krokhin@durham.ac.uk\nAbstract\nThe study of constraint satisfaction problems definable\nin various fragments of Datalog has recently gained con-\nsiderable importance. We consider constraint satisfaction\nproblems that are definable in the smallest natural recursive\nfragment of Datalog - monadic linear Datalog with at most\none EDB per rule. We give combinatorial and algebraic\ncharacterisations of such problems, in terms of caterpillar\ndualities and lattice operations, respectively. We then apply\nour results to study graph H-colouring problems.\n1 Introduction\nThe constraint satisfaction problem (CSP) provides a\nframework in which it is possible to express, in a natural\nway, many combinatorial problems encountered in artificial\nintelligence and computer science. A constraint satisfaction\nproblem is represented by a set of variables, a domain of\nvalues for each variable, and a set of constraints between\nvariables. The aim in a constraint satisfaction problem is\nthen to find an assignment of values to the variables that\nsatisfies the constraints.\nIt is well known (see, e.g., [5, 11, 21]) that the constraint\nsatisfaction problem can be recast as the following funda-\nmental problem: given two finite relational structuresA and\nB, is there a homomorphism from A to B? The CSP is NP-\ncomplete in general, and the identifying of its subproblems\nthat have lower complexity has been a very active research\ndirection in the last decade (see, e.g., [5, 11, 13, 21, 23]).\nOne of the most studied restrictions on the CSP is when\nthe structure B is fixed, and only A is part of the input.\nThe obtained problem is denoted by CSP(B). Examples\nof such problems include k-SAT, GRAPH H -COLOURING,\nand SYSTEMS OF EQUATIONS (e.g., linear equations).\nA variety of mathematical approaches to study prob-\nlems CSP(B) has been recently suggested. The most ad-\nvanced approaches use logic, combinatorics, universal al-\ngebra, and their combinations (see [4, 5, 20, 21]). The logic\nprogramming language Datalog and its fragments are ar-\nguably some of the most important tools for solving CSPs.\nIn fact, all problems CSP(B) that are known to be tractable\ncan be solved via Datalog, or via the \u201cfew subpowers prop-\nerty\u201d [18], or via a combination of the two. Furthermore,\nfor every problem CSP(B) that is currently known to be-\nlong to NL or to LOGSPACE, the complement of CSP(B)\ncan be defined in linear Datalog and symmetric Datalog,\nrespectively (see [4, 6, 9]). The algebraic approach to the\nCSP was recently linked with non-definability in the above\nfragments of Datalog [23].\nThe definability of CSP(B) in Datalog and its fragments\nis very closely related with homomorphism dualities (see,\ne.g., [4]) that were much studied in the context of graph ho-\nmomorphisms (see [15]). Roughly, a structure B has dual-\nity (of some type) if the non-existence of a homomorphism\nfrom a given structure A to B can always be explained by\nthe existence of a simple enough obstruction structure (i.e.,\none that homomorphically maps to A but not to B). The\ntypes of dualities correspond to interpretations of the phrase\n\u201csimple enough\u201d. The most important duality is probably\nbounded treewidth duality which is equivalent to definabil-\nity in Datalog (see [4]). However, structures with this prop-\nerty are not (yet) characterised, and this property is not even\nknown to be decidable. More success has been obtained\nfor some particular cases of bounded treewidth duality such\nas finite duality [22, 25] and tree duality [7, 11]. Both of\nthese properties are known to be decidable, and have nice\nlogical, combinatorial, and algebraic characterisations (see\nthe above papers or [4]). For example, they correspond to\ndefinability in first-order logic and in monadic Datalog, re-\nspectively. The simplest of trees are paths, and the concept\nof path duality was also much used to study graph homo-\nmorphism (see [16, 17]), and in this paper we argue that, in\nthe setting of general relational structures, a slightly more\ngeneral notion of caterpillar duality is more natural, and\nwe give concise logical, combinatorial, and algebraic char-\nacterisations of structures having this form of duality (see\nSection 3).\nThe problems CSP(B) with B being a digraph H are\n23rd Annual IEEE Symposium on Logic in Computer Science\n1043-6871\/08 $25.00 \u00a9 2008 IEEE\nDOI 10.1109\/LICS.2008.19\n307\nactively studied in graph theory under the name of H-\ncolouring [15]. Recently, algebraic and logical approaches\nto the CSP were applied to solve well-known open prob-\nlems (or to give short proofs of known results) about H-\ncolouring (see, e.g., [1, 2, 3]). We also apply our findings to\nobtain new results about H-colouring in Section 4.\n2 Preliminaries\n2.1 Basic definitions\nA vocabulary is a finite set of relation symbols or predi-\ncates. In what follows, \u03c4 always denotes a vocabulary. Ev-\nery relation symbol R in \u03c4 has an arity r = \u03c1(R) > 0\nassociated to it. We also say that R is an r-ary relation sym-\nbol. A \u03c4 -structure A consists of a set A, called the universe\nof A, and a relation RA \u2286 Ar for every relation symbol\nR \u2208 \u03c4 where r is the arity of R. All structures in this paper\nare assumed to be finite, i.e., structures with a finite uni-\nverse. Throughout the paper we use the same boldface and\nslanted capital letters to denote a structure and its universe,\nrespectively.\nA homomorphism from a \u03c4 -structure A to a \u03c4 -structure\nB is a mapping h : A \u2192 B such that for every r-\nary R \u2208 \u03c4 and every (a1, . . . , ar) \u2208 RA, we have\n(h(a1), . . . , h(ar)) \u2208 RB. We denote this by h : A \u2192 B.\nWe also say that A homomorphically maps to B, and write\nA \u2192 B if there is a homomorphism from A to B and\nA \u0005\u2192 B if there is no homomorphism. Now CSP(B) can be\ndefined to be the class of all structures A such that A\u2192 B.\nThe class of all structures A such that A \u0005\u2192 B will be\ndenoted by co-CSP(B). A number of examples of combi-\nnatorial problems representable as CSP(B) or co-CSP(B)\nfor a suitable structure B can be found in [4, 5, 21].\nA retract of a structure B is an induced substructure B\u2032\nof B such that there is a homomorphism h : B \u2192 B\u2032 sat-\nisfying h(b) = b for all b \u2208 B\u2032. A structure is a core if it\nhas no proper retracts, and a core of a structure is its retract\nthat is a core. It is well known that all cores of a structure\nare isomorphic, so we will call any structure isomorphic to\na core of B the core (of B), denoted core(B). Obviously,\nthe problems CSP(B) and CSP(core(B)) coincide.\nWe will now define structures that play an important role\nin this paper - trees and caterpillars, which are natural gen-\neralisations of the corresponding notions from graph theory.\nLetA be a \u03c4 -structure. As in [25], the incidence multigraph\nofA, denoted Inc(A), is defined as the bipartite multigraph\nwith parts A and Block(A), where Block(A) consists of\nall pairs (R, a) such thatR \u2208 \u03c4 and a \u2208 RA, and with edges\nea,i,Z joining a \u2208 A toZ = (R, (a1, . . . , ar)) \u2208 Block(A)\nwhen ai = a. A structure A is said to be a \u03c4 -tree (or sim-\nply a tree) if its incidence multigraph is a tree (in particular,\nit has no multiple edges). For a \u03c4 -tree A, we say that an\nelement of A is a leaf if it is incident to exactly one block\nin Inc(A). A block of A (i.e., a member of Block(A)) is\nsaid to be pendant if it is incident to at most one non-leaf\nelement, and it is said to be non-pendant otherwise. For\nexample, any block with a unary relation is always pendant.\nIn graph theory, a caterpillar is a tree which becomes a\npath after all its leaves are removed. Following [24], we\nsay that a \u03c4 -tree is a \u03c4 -caterpillar (or simply a caterpil-\nlar) if each of its blocks is incident to at most two non-\nleaf elements, and each element is incident to at most\ntwo non-pendant blocks. Informally, a \u03c4 -caterpillar has a\nbody consisting of a chain of elements a1, . . . , an+1 with\nblocks B1, . . . , Bn where Bi is incident to ai and ai+1\n(i = 1, . . . , n), and legs of two types: (i) pendant blocks in-\ncident to exactly one of the elements a1, . . . , an+1, together\nwith some leaf elements incident to such blocks, and (ii)\nleaf elements incident to exactly one the blocksB1, . . . , Bn.\nExample 1. (i) If \u03c4 is the signature of digraphs then the \u03c4 -\ncaterpillars are the oriented caterpillars, i.e., digraphs ob-\ntained from caterpillar graphs by orienting each edge in\nsome way.\n(ii) Let B be a structure with B = {1, 2, . . . , 6},\none unary relation R1 = {2, 3}, one binary relation\nR2 = {(1, 2), (2, 3), (3, 6)} and one ternary relation R3 =\n{(3, 4, 5)}. The graph Inc(B) is shown on Fig. 1. The el-\nements 2 and 3 are the non-leaves, and (R2, (2, 3)) is the\nonly non-pendant block. In particular, B is a caterpillar.\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n(R1,2)\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n(R1,3)\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t5\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t1 \u0002\u0003\u0004\u0005\u0006\u0007\b\t\n(R2,(1,2))\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t2 \u0002\u0003\u0004\u0005\u0006\u0007\b\t\n(R2,(2,3))\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t3 \u0002\u0003\u0004\u0005\u0006\u0007\b\t\n(R3,(3,4,5))\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t4\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n(R2,(3,6))\n\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n6\nFigure 1. A caterpillar.\n2.2 Datalog\nWe now briefly describe the basics of Datalog (for more\ndetails, see, e.g., [8, 19]). Fix a vocabulary \u03c4 . A Datalog\nprogram is a finite set of rules of the form t0 : \u2212 t1, . . . , tn\nwhere each ti is an atomic formula R(xi1 , . . . , xik). Then\nt0 is called the head of the rule, and the sequence t1, . . . , tn\nthe body of the rule. The intended meaning of such a rule\nis that the conjunction of the predicates in the body im-\nplies the predicate in the head, with all variables not ap-\npearing in the head existentially quantified. The predicates\noccurring in the heads of the rules are not from \u03c4 and are\ncalled IDBs (from \u201cintensional database predicates\u201d), while\nall other predicates come from \u03c4 and are called EDBs (from\n308\n\u201cextensional database predicates\u201d). One of the IDBs, which\nis usually 0-ary in our case, is designated as the goal predi-\ncate of the program. Since the IDBs may occur in the bodies\nof rules, each Datalog program is a recursive specification\nof the IDBs, with semantics obtained via least fixed-points\nof monotone operators. The goal predicate is assumed to\nbe initially set to false, and we say that a Datalog pro-\ngram accepts a \u03c4 -structure A if its goal predicate evaluates\nto true on A. In this case we also say that the program de-\nrives the goal predicate on A. It is easy to see that the class\nof structures accepted by any Datalog program is closed un-\nder homomorphism (i.e., if A\u2192 B and A is accepted then\nB is also accepted).\nA Datalog program is called linear if each of its rules\nhas at most one occurrence of an IDB in its body, and it is\ncalled monadic if each IDB in it is at most unary.\nWhen using Datalog to study CSP(B), one speaks of\nthe definability of co-CSP(B) in Datalog (or its fragments).\nExamples of Datalog programs defining classes of the form\nco-CSP(B) can be found in [4, 6, 20].\n2.3 Polymorphisms\nLet f be an n-ary operation on B, and R a relation on\nB. We say that f is a polymorphism of R if, for any tuples,\na\u00af1, . . . , a\u00afn \u2208 R, the tuple obtained by applying f compo-\nnentwise to a\u00af1, . . . , a\u00afn also belongs to R. In this case we\nalso say that R is invariant under f .\nWe say that f is a polymorphism of B if it is a polymor-\nphism of each relation in B. It is easy to check that the n-\nary polymorphisms of B are precisely the homomorphisms\nfrom the n-th direct power Bn to B. It is well known and\neasy to verify that composition of polymorphisms of B is\nagain a polymorphism of B (see, e.g., [5]).\nThe notion of a polymorphism plays the key role in\nthe algebraic approach to the CSP. The polymorphisms of\na (core) structure are known to determine the complexity\nof CSP(B) as well as definability of (the complement of)\nCSP(B) in Datalog and the following fragments: monadic,\nlinear, symmetric (see [4, 23]). Many algebraic sufficient\nconditions for definability of co-CSP(B) in various frag-\nments of Datalog are known (see [4]).\nLet us now define several types of operations that will\nbe used in this paper. An n-ary operation f on B is called\nidempotent if it satisfies the identity f(x, . . . , x) = x, and it\nis called conservative if f(x1, . . . , xn) \u2208 {x1, . . . , xn} for\nall x1, . . . , xn \u2208 B.\nAn n-ary operation f is called totally symmetric if\nf(x1, . . . , xn) = f(y1, . . . , yn) whenever {x1, . . . , xn} =\n{y1, . . . , yn}.\nA ternary operation f is called a majority operation if it\nsatisfies f(x, x, y) = f(x, y, x) = f(y, x, x) = x for all\nx, y.\nA binary associative commutative idempotent operation\nis called a semilattice operation. We will say that two binary\noperations f and g on B are lattice operations if each of\nthem is a semilattice operation and, in addition, they satisfy\nthe absorption identities: f(x, g(x, y)) = g(x, f(x, y)) =\nx. It is well known (see, e.g., [12]) that semilattice op-\nerations are in one-to-one correspondence with partial or-\nders in which every two elements have a greatest lower\nbound (which is the result of applying the operation). Sim-\nilarly, lattice operations are in one-to-one correspondence\nwith partial orders in which every two elements have both\na greatest lower bound and a least upper bound. The sim-\nplest example of lattice operations are the operations min\nand max with respect to any fixed linear order on B.\n2.4 Dualities\nA comprehensive treatment of dualities for the CSP can\nbe found in the survey [4].\nDefinition 2. A set O of \u03c4 -structures is called an\nobstruction set for B if, for any \u03c4 -structure A,\nA\u2192 B if and only if A\u2032 \u0005\u2192 A for all A\u2032 \u2208 O.\nIf the set O can be chosen to consist of nicely behaved\nstructures such as paths, caterpillars, trees, or structures of\nbounded pathwidth or of bounded treewidth, then B is said\nto have path (caterpillar, tree, bounded pathwidth, bounded\ntreewidth, respectively) duality. A structure with a finite\nobstruction set is said to have finite duality.\nIt is known (see [4]) that a structure B has one of the\nfollowing forms of duality: finite, tree, bounded pathwidth,\nbounded treewidth if and only if co-CSP(B) is definable in\nthe following fragments of Datalog, respectively: recursion-\nfree, monadic, linear, full.\nStructures with tree duality were characterised in sev-\neral equivalent ways in [11]. To state the result, we need\nthe following construction: for a \u03c4 -structure B, define a \u03c4 -\nstructure U(B) whose elements are the non-empty subsets\nof B, and, for each r-ary R \u2208 \u03c4 , we have (A1, . . . , Ar) \u2208\nRU(B) if and only if, for each j = 1, . . . , r and each\na \u2208 Aj , there exists (a1, . . . , ar) \u2208 RB such that aj = a.\nTheorem 3. [11, 7] Let B be a structure. The following\nconditions are equivalent:\n1. B has tree duality;\n2. co-CSP(B) is definable by a monadic Datalog pro-\ngram with at most one EDB per rule;\n3. U(B) admits a homomorphism to B;\n4. for every n \u2265 1, B has an n-ary totally symmetric\npolymorphism.\n309\nIf B is a core then the above conditions are equivalent to\nthe following:\n5. B is the core of a structure with a semilattice polymor-\nphism.\nIt is known that any structure with finite duality has a fi-\nnite obstruction set consisting of trees [25]; such structures\nare charactersied in many equivalent ways in [22]. The sit-\nuation when these trees can be chosen to be caterpillars was\nconsidered in [24].\nTheorem 4 ([24]). Let B be a core structure with finite\nduality. Then B has an obstruction set consisting of cater-\npillars if and only if B has a majority polymorphism.\n3 Caterpillar duality\n3.1 A characterisation\nThe main result of this paper is a characterisation of\nstructures with caterpillar duality in the spirit of Theorem 3.\nFirst, we need to give some definitions.\nLet k, n be positive integers. We call a (kn)-ary opera-\ntion f on B k-block symmetric if it satisfies the following\ncondition:\nf(x11, . . . , x1k, . . . , xn1, . . . , xnk) =\n= f(y11, . . . , y1k, . . . , yn1, . . . , ynk)\nwhenever {S1, . . . , Sn} = {T1, . . . , Tn} where, for all i,\nSi = {xi1, . . . , xik} and Ti = {yi1, . . . , yik}. Note that if\nk = 1 or n = 1 then f is totally symmetric.\nWe will often use the following notation for\nk-block symmetric operations. For (not neces-\nsarily distinct) subsets S1, . . . , Sn of B, with\nat most k elements each, let f(S1, S2, . . . , Sn)\ndenote f(x11, . . . , x1k, . . . , xn1, . . . , xnk) where\nSi = {xi1, . . . , xik} for all i. Also, for l \u2264 n, let\nf(S1, . . . , Sl) denote f(S1, . . . , Sl, . . . , Sl). It is clear\nthat f(S1, . . . , Sl) is well defined and depends neither on\nthe order of the sets Si nor on the number of repetitions\nof those sets. Therefore, we will also write f(S) for a\nfamily of non-empty subsets S = {S1, . . . , Sl} to denote\nf(S1, . . . , Sl).\nIf a k-block symmetric operation f satisfies\nf(S1, S2, . . . , Sl) = f(S2, S2, S3, . . . , Sl) whenever\nS2 \u2286 S1, we call it an absorptive k-block symmetric\noperation (or k-ABS operation, for short). The most typical\nexample of such an operation is as follows.\nExample 5. (i) It is easy to check that, for any fixed linear\norder on B and any positive integers k, n, the operation\nf(x11, . . . , x1k, . . . , xn1, . . . , xnk) =\n= min(max(x11, . . . , x1k), . . . ,max(xn1, . . . , xnk)).\nis a k-ABS operation.\n(ii) More generally, if (B,\b,unionsq) is a lattice (i.e., \b,unionsq are\nlattice operations in infix notation) then it is easy to check\nthat, for any k, n, the operation\nf(x11, . . . , x1k, . . . , xn1, . . . , xnk) =\n= (x11 unionsq . . . unionsq x1k) \b . . . \b (xn1 unionsq . . . unionsq xnk).\nis a k-ABS operation.\nFor an r-ary relation R on B and a number 1 \u2264 m \u2264 r,\nlet prm(R) = {am | (a1, . . . , am, . . . , ar) \u2208 R}.\nLet B be a \u03c4 -structure. We construct a structure C(B)\nas follows: the elements of C(B) are the families of non-\nempty subsets of B; for each r-ary relation RB, we have\n(S1, S2, . . . , Sr) \u2208 RC(B) if, for all j,m = 1, . . . , r, we\nhave\n1. prm(RB) \u2208 Sm, and\n2. prm(RB\u2229(Bj\u22121\u00d7S\u00d7Br\u2212j)) \u2208 Sm for each S \u2208 Sj .\nNote that the empty family belongs to the universe ofC(B),\nbut it never appears in any tuple in a relation in this struc-\nture.\nTheorem 6. Let B be a structure. The following conditions\nare equivalent:\n1. B has caterpillar duality;\n2. co-CSP(B) is definable by a linear monadic Datalog\nprogram with at most one EDB per rule;\n3. C(B) admits a homomorphism to B;\n4. for every k, n \u2265 1, B has a kn-ary k-ABS polymor-\nphism.\nIf B is a core then the above conditions are equivalent to\nthe following:\n5. B is the core of a structure with lattice polymorphisms.\nThe proof of Theorem 6 will follow from subsequent\nlemmas in this section.\nFor the sake of brevity, we will say that a linear monadic\nDatalog program with at most one EDB per rule is a cater-\npillar program. For a given structure B and a given frag-\nment of Datalog, there is a standard way of constructing the\ncanonical program for B in the given fragment of Datalog\n(see, e.g., [4, 11]). The canonical caterpillar program for\na structure B is constructed as follows: let S0, S1, . . . , Sp\nbe an enumeration of unary relations on B (i.e., subsets\nof B) that can be expressed by a first-order \u2203\u2227-formula\nover B. Assume that S0 is the empty relation. For each\nSi, introduce a unary IDB Ii. Then the canonical caterpil-\nlar program for B involves the IDBs I0, . . . , Ip and EDBs\n310\nR1, . . . , Rn, and contains all the rules (whose body contains\nat most one EDB and at most one IDB) with the following\nproperty: if every Ii in the rule is replaced by Si and ev-\nery Rs by RBs , then every assignment of elements of B to\nthe variables that satisfies the conjunction of atomic formu-\nlas in the body must also satisfy the atomic formula in the\nhead. Finally, include the goal predicate G along with the\nrule G : \u2212 I0(x).\nNote that B is not accepted by the canonical program\n(for itself). Indeed, by construction, a derivation of G on B\ncould be translated into a chain of valid implications which\nstarts from an atomic formula and finishes with the empty\n(i.e. false) predicate, which is impossible. This implies the\nfollowing fact.\nFact 7. If the canonical caterpillar program for B accepts\na structure A then A \u0005\u2192 B.\nWe now relate caterpillar duality with caterpillar Datalog\nprograms.\nLemma 8. For any structures A and B, if there exists a\ncaterpillar C such that C \u2192 A and C \u0005\u2192 B then the\ncanonical program for B accepts A.\nProof. Since the class of structures accepted by any Dat-\nalog program is closed under homomorphism, it suffices to\nshow that C is accepted by the program. Clearly, this is the\ncase when Inc(C) has no non-leaves (i.e., the total num-\nber of tuples in relations in C is 1) because we must have\nRB = \u2205, where RC is the only non-empty relation in C,\nand then the program has the rule I0(x1) : \u2212R(x1, . . . , xr).\nNow let D be an arbitrary caterpillar with a total of at\nleast two tuples in its relations, and let a be a non-leaf in\nInc(D) which has at most one other non-leaf at distance\ntwo from it. Informally, this means that a is at one of the\ntwo extremes of the body of the caterpillar D. We claim\nthat the canonical program can derive (on D) the fact Ij(a)\nwhere Ij is the IDB corresponding to a set Sj = {h(a) |\nh : D \u2192 B}. This claim implies the lemma, since I0\ncorresponds to the empty set.\nWe prove the claim by induction on the total number of\ntuples in relations in D. If this number is two then Inc(D)\nhas two blocks Z1 = (Ri, a\u00af1) and Z2 = (Rt, a\u00af1) where\ni and t may coincide and tuples a\u00af1 and a\u00af2 share exactly\none element \u2013 the non-leaf a. Assume without loss of\ngenerality that a appears in the first coordinate in a\u00af1 and\nin the second coordinate in a\u00af2, and let S1 = pr1(RBi ),\nS2 = pr2(RBt ), and S3 = S1 \u2229 S2. Then the canoni-\ncal program has the rules I1(x1) : \u2212Ri(x1, x2, . . . , xri)\nand I3(x2) : \u2212Rt(x1, x2, . . . , xrt), I1(x2). It is clear that\nS3 = {h(a) | h : D \u2192 B}, and that I3(a) is derived on D\nif and only if D\u2192 B. This proves the base of induction.\nAssume now that the claim holds for all caterpillars in\nwhich the total number of tuples is less than that in D. Fix\na non-leaf a satisfying the assumptions of the claim. Then\nwe can choose a pendant block Z1 = (Ri, a\u00af1) such that a\nis the only non-leaf in a\u00af. Without loss of generality assume\nthat a appears in the first component in a\u00af1. Let D\u2032 be the\ncaterpillar obtained from D by removing a\u00af1 from RDi (and\nall leaves in a\u00af1 from D). We consider two cases depending\non whether or not a becomes a leaf in D\u2032.\nIf a is still a non-leaf in D\u2032 (that is, Z1 was not the only\npendant block incident to a in Inc(D)) then, by the induc-\ntion hypothesis, the canonical program can derive (on D\u2032)\nthe fact Ip(a) where Ip is the IDB corresponding to a set\nSp = {h(a) | h : D\u2032 \u2192 B}. Let Sj = Sp \u2229 pr1(RBi ).\nIt is clear that Sj = {h(a) | h : D \u2192 B}, while\nthe canonical program derives (on D) Ij(a) via the rule\nIj(x1) : \u2212Ri(x1, x2, . . . , xri), Ip(x1).\nConsider the case when a becomes a leaf in D\u2032. This\nmeans that Z1 was the only pendant block incident to a\nin Inc(D). Let Z2 = (Rt, a\u00af2) be the (only) other block\nincident to a (both in Inc(D) and Inc(D\u2032)). Note that\nthis block was non-pendant in D, but becomes pendant in\nD\u2032. Assume without loss of generality that a appears in\nthe first coordinate in a\u00af2, while the single non-leaf in a\u00af2\n(in D\u2032), say a\u2032, appears in the second component in a\u00af2.\nBy the induction hypothesis, the canonical program can\nderive (on D\u2032) the fact Ip(a\u2032) where Ip is the IDB cor-\nresponding to the set Sp = {h(a\u2032) | h : D\u2032 \u2192 B}.\nLet Sq = pr1(RBt \u2229 (B \u00d7 Sp \u00d7 Brt\u22122)) and Sj =\nSq \u2229 pr1(RBi ). It is easy to check that Sj = {h(a) |\nh : D \u2192 B}, while the program derives (on D) Ij(a)\nvia the rules Iq(x1) : \u2212Rt(x1, x2, . . . , xrt), Ip(x2), and\nIj(x1) : \u2212Ri(x1, x2, . . . , xri), Iq(x1).\nLemma 9. A structure B has caterpillar duality if and only\nif co-CSP(B) can be defined by a caterpillar program.\nProof. Suppose that co-CSP(B) is defined by a caterpillar\nprogram. This means that a structure A satisfies A \u0005\u2192 B if\nand only if A is accepted by the program.\nIf A \u0005\u2192 B then the program derives the goal predicate\non A. Reading the derivation from the end to the beginning\nwe obtain\nG : \u2212 I0(a0)\nI0(a0) : \u2212 Ri1(. . . , a0, . . . , ai, . . .), Ij1(ai)\nIj1(ai) : \u2212 Ri2(. . . , ai, . . . , aj , . . .), Ij2(aj)\n...\nIj(l\u22121)(ap) : \u2212 Ril(. . . , ap, . . . , aq, . . .), Ijl(aq)\nIjl(aq) : \u2212 Ril+1(. . . , aq, . . .).\nConsider a substructure A\u2032 of A such that, for any R \u2208 \u03c4\nand any a\u00af, we have a\u00af \u2208 RA\u2032 if and only if R(a\u00af) appears in\nthe above derivation. Now modify the structure A\u2032 by giv-\ning new names to the occurrences of each element in such a\nway that in the obtained structure we have the following:\n311\n\u2022 there is no repetition of elements in any tuple in any\nrelation, and\n\u2022 if two tuples (possibly in different relations) share an\nelement then this element appears in the heads of all\nrules between the rules corresponding to the two tu-\nples.\nCall the obtained structure C. It is clear that C is a caterpil-\nlar. We also have that C homomorphically maps to A\u2032 (via\nreverse renaming) and hence to A, but not to B because the\nprogram still derives the goal predicate on C. Hence, B has\ncaterpillar duality.\nConversely assume that B has caterpillar duality, i.e. for\nany structure A we have A \u2192 B if and only if all cater-\npillars that homomorphically map to A also map to B. We\nclaim that the canonical caterpillar program for B defines\nco-CSP(B). By Fact 7, the canonical program never ac-\ncepts a structure that homomorphically maps to B. Now\nlet A \u2208 co-CSP(B) be arbitrary. By assumption, there is\na caterpillar C such that C \u2192 A and C \u0005\u2192 B. It follows\nfrom Lemma 8 that the program accepts A.\nCorollary 10. If co-CSP(B) is definable by some caterpil-\nlar program then it is definable by the canonical one.\nLemma 11. A structure A is not accepted by the canonical\ncaterpillar program for B if and only if A\u2192 C(B).\nProof. Assume first that A \u2192 C(B) and show that A is\nnot accepted by the canonical program. Since the class of\nstructures accepted by any Datalog program is closed un-\nder homomorphism, it suffices to show that C(B) is not\naccepted by the canonical program. We will show by in-\nduction on the length of derivation that whenever the fact\nIj(S) is derived by the program, we have Sj \u2208 S where Sj\nis the subset of B corresponding to Ij .\nAssume first that Ij(S) is derived by an introductory rule\n(i.e., one whose body contains no IDB and R \u2208 \u03c4 is the\nEDB in the rule), that is, we have Ij(S) : \u2212R(. . . , S, . . .)\nwhere S appears in the m-th component in the tuple on the\nright. Note that this tuple belongs to RC(B). Then, by the\ndefinition of the canonical program Ij corresponds to the\nsubset prm(RB) of B, which must be contained in S by the\ndefinition of C(B).\nAssume now that Ij(S) is derived by a rule Ij(S) :\n\u2212R(. . . , S, . . . ,T, . . .), Il(T). Assume without loss of gen-\nerality that Sj is the smallest set such that Ij can be in\nthe head of this rule. By the induction hypothesis, we\nhave Sl \u2208 T. Assume that S appears in the m-th com-\nponent and T in the k-th component in the EDB of the\nrule. Again, by the definition of the program, we have\nSj = prm(RB \u2229 (Bk\u22121 \u00d7 Sl \u00d7 Br\u2212k)) where r is the\narity of R. Then we must have Sj \u2208 S by the definition of\nC(B).\nAssume now thatC(B) is accepted by the canonical pro-\ngram. Then the program can derive I0(S) for some S. Then,\nas we just proved, the empty set S0 belongs to S which is\nimpossible by the definition of C(B).\nConversely, assume A is not accepted by the program.\nHence the program stabilizes without deriving the goal\npredicate. Recall that every IDB Ij in the canonical pro-\ngram corresponds to a subset Sj of B. For every element\na \u2208 A, consider the family Sa = {Sj | Ij(a) is derived }\nof subsets of B. It is easy to see that the family is non-\nempty for any a that appears in a tuple in a relation in A.\nMoreover, since the goal predicate is not derived, I0(a) is\nnot derived either, and so each subset in a non-empty Sa is\nnon-empty. It is straightforward to check that the mapping\nh : A \u2192 C(B) given by h(a) = Sa is a homomorphism\nfrom A to C(B).\nLemma 12. For any structure B, co-CSP(B) is definable\nby a caterpillar program if and only if C(B) admits a ho-\nmomorphism to B.\nProof. Suppose that co-CSP(B) is definable by a caterpil-\nlar program. Then it is definable by the canonical one, by\nCorollary 10. By Lemma 11, C(B) is not accepted by the\ncanonical program, and hence C(B) \u2192 B.\nConversely, suppose that C(B) \u2192 B. By Fact 7, each\nstructure from CSP(B) is not accepted by the canonical\ncaterpillar program for B. On the other hand, if a structure\nA is not accepted by the program then we have A\u2192 C(B)\nby Lemma 11, and so A\u2192 B. Hence, co-CSP(B) is defin-\nable by the canonical caterpillar program for B.\nLemma 13. The relations in C(B) are invariant under lat-\ntice operations.\nProof. We show that every relation in C(B) is in-\nvariant under set intersection and set union operations,\nwhich are easily seen to be lattice operations. Let RC(B)\nbe an r-ary relation in C(B) and take arbitrary tuples\n(S1, . . . , Sr), (T1, . . . ,Tr) \u2208 RC(B).\nIt follows directly from the definition of C(B) that for\nall j,m = 1, . . . , r we have\n1. prm(RB) \u2208 Sm \u2229 Tm, and\n2. prm(RB \u2229 (Bj\u22121 \u00d7 S \u00d7Br\u2212j)) \u2208 Sm \u2229 Tm for each\nS \u2208 Sj \u2229 Tj .\nIt follows that (S1 \u2229 T1, . . . , Sr \u2229 Tr) \u2208 RC(B). The fact\nthat (S1\u222aT1, . . . , Sr\u222aTr) \u2208 RC(B) can be verified equally\neasily.\nLemma 14. A structure B has a kn-ary k-ABS polymor-\nphism for all k, n if and only if C(B) \u2192 B.\n312\nProof. Let h : C(B) \u2192 B be a homomorphism. By\nLemma 13, the structure C(B) has polymorphisms which\nare set-theoretic union and intersection operations. Since\ncomposition of polymorphisms is again a polymorphism, it\nfollows that C(B) also has the k-ABS polymorphisms\nfk,n(X1, . . . , Xn) = (\n\u22c2\nX1) \u222a (\n\u22c2\nX2) \u222a . . . \u222a (\n\u22c2\nXn),\nwhere Xi = {xi1, . . . , xik}. By Lemma 11, there exists\na homomorphism g : B \u2192 C(B). It is straightforward\nto check that the operations h(fk,n(g(x1), . . . , g(xkn))) are\nk-ABS polymorphisms of B.\nConversely, let f be a kn-ary k-ABS polymorphism of\nB with k = \u03c1 \u00b7 |B| and n = \u03c1(2|B| \u2212 1), where \u03c1 is\nthe maximum of the arities of the relations in B. Define\na map h : C(B) \u2192 B by the rule h(S) = f(S) for non-\nempty S and set h(\u2205) arbitrarily. Let us now show that h\nis a homomorphism. By the properties of f , h is clearly a\nwell-defined function. Take an arbitrary (say, r-ary) rela-\ntion R \u2208 \u03c4 and fix (S1, . . . , Sr) \u2208 RC(B). We need to show\nthat (h(S1), . . . , h(Sr)) \u2208 RB.\nLet S\u02c6i = {X \u2229 pri RB | X \u2208 Si}. It immediately fol-\nlows from the definition of the structure C(B) that we have\nS\u02c6i \u2286 Si for all 1 \u2264 i \u2264 r, and also that (S\u02c61, . . . , S\u02c6r) \u2208\nRC(B). Since f is absorptive, we have f(S\u02c6i) = f(Si).\nTherefore, we can without loss of generality assume that\neach Si contains only subsets of pri RB.\nFor a set S \u2208 Si, construct a (k \u00d7 r)-matrix M iS whose\nentries are elements from B and such that\n1. each row of M iS is an element of R\nB, and\n2. for any 1 \u2264 m \u2264 r, the set of entries in the m-th\ncolumn is prm(RB \u2229 (Bi\u22121 \u00d7 S \u00d7Br\u2212i)).\nLet us show that this is possible. Recall that S \u2286 pri(RB).\nDivide the matrix into r submatrices of |B| consecutive\nrows. For 1 \u2264 m \u2264 r, the rows of the m-th submatrix are\ntuples (from RB) whose i-th coordinate belongs to S and\nwhose m-th coordinates cover all of prm(RB \u2229 (Bi\u22121 \u00d7\nS \u00d7Br\u2212i)).\nNow construct a matrix M with kn rows and r columns,\nas follows. It is divided into n layers of k consecutive rows,\neach layer is a matrix M iS for some 1 \u2264 i \u2264 r and some\nS \u2208 Si, and each matrix of this form appears as a layer. By\nthe choice of n, this is possible.\nIt remains to notice that the operation f applied to the\ni-th column of M gives the value f(Si), and, since f\nis a polymorphism of B and every row of M is in RB,\nwe have (f(S1), . . . , f(Sr)) \u2208 RB, as required. Thus\n(h(S1), h(S2), . . . , h(Sr)) \u2208 RB. We conclude that h :\nC(B) \u2192 B.\nRemark 15. If a structure B has kn-ary k-ABS poly-\nmorhism for k = \u03c1 \u00b7 |B| and n = \u03c1(2|B| \u2212 1), where \u03c1\nis the maximum of the arities of the relations in B, then, for\nany k, B has k-ABS polymorphisms of all arities divisible\nby k.\nProof. (of Theorem 6).\n(1)\u21d4 (2) follows from Lemma 9.\n(2)\u21d4 (3) follows from Lemma 12.\n(3)\u21d4 (4) follows from Lemma 14.\nAssume now that that B is a core. If condition (3) holds\nthen we have homomorphisms B\u2192 C(B) (by Lemma 11)\nand C(B) \u2192 B implying, since B is a core, that B is the\ncore of C(B). The structure C(B) has lattice polymor-\nphisms by Lemma 13, so (3) implies (5). On the other hand,\n(5) implies (4) because any structure with lattice polymor-\nphisms has the required k-ABS polymorphisms (see Ex-\nample 5) which can be transferred to B as in the proof of\nLemma 14.\nTheorem 16. The problem of checking whether a given\nstructure has caterpillar duality is decidable, but NP-hard.\nProof. Decidability of the problem immediately follows\nfrom condition (3) of Theorem 6. We now prove, by reduc-\ntion from 3-SAT, that the problem is NP-hard even when\nrestricted to digraphs. Let Tn be the transitive tournament\non n vertices. It is shown in the proof of Theorem 6.1\nof [22] that, given an instance I of 3-SAT, one can con-\nstruct in polynomial time a digraph H such that (i) Tn is\nthe core of H if and only if I is satisfiable, and (ii) either\nTn is the core of H or else H does not have tree duality. It\nremains to say that the directed path on n+1 vertices forms\nan obstruction set forTn [15], soTn has caterpillar duality.\n3.2 Caterpillar duality vs. path duality\nOne can define \u03c4 -paths as \u03c4 -caterpillars with at most two\npendant blocks. Say, if \u03c4 is the signature of digraphs then \u03c4 -\npaths are oriented paths (i.e., digraphs obtained from paths\nby orienting each edge in some way). One can also define\npath dualities in a natural way, and obtain a characterisa-\ntion similar to conditions (1)-(3) of Theorem 6. However,\nthe fragment of Datalog arising from this connection is not\nvery natural and it does not seem to have a natural equiv-\nalent algebraic condition such as conditions (4) and (5) of\nTheorem 6. Since paths and caterpillars are very close struc-\nturally, it is natural to ask whether caterpillar duality and\npath duality are equivalent properties.\nProposition 17. There exist digraphs that have caterpillar\nduality, but not path duality.\n313\nProof. Let C be an arbitrary core digraph that is an ori-\nented caterpillar, but not a path. By results of [25], there\nexists a structure B such that C is the obstruction set for B,\nthat is, for any digraph G, we have either C \u2192 G or else\nG \u2192 B. Clearly, B has caterpillar duality. We claim that\nit does not have path duality. Suppose, for a contradiction,\nthat it does. Then, sinceC \u0005\u2192 B, there is an oriented pathP\nsuch that P \u2192 C and P \u0005\u2192 B. The latter property implies\nthat C\u2192 P, in which case C must be the core of P, which\nis impossible.\n4 Applications to listH-colouring\nIn the list H-colouring problem for a fixed (di)graph H,\none is given a (di)graph G, and, for each vertex v of G,\na list Lv of possible target vertices in H. The question is\nwhether there is a homomorphism h : G \u2192 H such that\nh(v) \u2208 Lv for each vertex v of G. It is well known (and\neasy to see) that this problem is exactly CSP(Hu) where\nHu is the structure obtained by expanding the (di)graph H\nwith unary relations U where U runs through all non-empty\nsubsets of H . It is easy to see that the polymorphisms of\nHu are exactly the conservative polymorphisms of H.\nRecall that a (di)graph is called reflexive it contains all\nloops, and irreflexive if it contains no loop.\n4.1 List H-colouring for undirected graphs\nAll graphs in this subsection are undirected. It was\nshown in [10] that, for a reflexive graph H, the list H-\ncolouring problem is solvable in polynomial time if H is\nan interval graph and NP-complete otherwise. Recall that\na (reflexive) graph is called an interval graph if its vertices\ncan be represented by intervals (on the real line) in such a\nway that two vertices are adjacent if and only if the corre-\nsponding intervals intersect.\nAssume now that H = (H,E) is a reflexive interval\ngraph. By modifying the proof in [10], it is possible to show\ndirectly that the structure Hu (as above) has caterpillar du-\nality. We give a short proof of this fact using Theorem 6.\nTheorem 18. For every k and n, the graph H has a con-\nservative k-ABS polymorphism of arity kn.\nProof. Fix an interval representation ofH. We can without\nloss of generality assume that the endpoints of the intervals\nrepresenting vertices of H are pairwise distinct [10]. Given\nan interval u \u2208 V , we denote by l(u) and r(u) the left and\nright endpoints of u, respectively.\nLet k, n \u2265 1 be arbitrary. Define two functions on H ,\nMinl and Maxr, as follows:\nMinl(u1, . . . , un) = ui such that l(ui) = min\nj\nl(uj),\nMaxr(u1, . . . , uk) = ui such that r(ui) = max\nj\nr(uj).\nNote that the functions are well defined because the in-\ntervals in H cannot have the same endpoints.\nLet S1, S2, . . . , Sn be sets of vertices of H (i.e., sets\nof intervals) with at most k elements each. We obtain\nfrom them a new sequence of sets, as follows: for each\nj = 1, . . . , n such that Sj properly contains some set Si,\nchoose Si so that Si is minimal with this property and re-\nplace Sj by Si. Break ties arbitrarily. Call the obtained sets\nS\u20321, S\n\u2032\n2, . . . , S\n\u2032\nn.\nDefine an operation h : Hnk \u2192 H as follows:\nh(x11, . . . , x1k, . . . , xn1, . . . , xnk) =\n= Minl(Maxr(S\u20321), . . . ,Maxr(S\n\u2032\nn))\nwhere, for 1 \u2264 i \u2264 n, Si = {xi1, . . . , xik}, and S\u2032i is\nobtained as described above. Note that the set {S\u20321, . . . , S\u2032n}\ndepends only on {S1, . . . , Sn}. This and the (obvious) fact\nthat the operations Maxr and Minl are totally symmetric\nimplies that the operation h is well defined and also that it\nis a k-block symmetric operation.\nLet us show that h is absorptive. We now can use nota-\ntion h(S1, S2, . . . , Sn) since h is k-block symmetric. As-\nsume that S2 \u2282 S1. Then S\u20321 = Si for some i > 1. Note\nthat, by construction, we have S\u2032i = Si. Assume without\nloss of generality that i = 3. Then we have\nh(S1, S2, . . . , Sn) =\n= Minl(Maxr(S\u20323),Maxr(S\n\u2032\n2), . . . ,Maxr(S\n\u2032\nn)),\nand\nh(S2, S2, S3, . . . , Sn) =\n= Minl(Maxr(S\u20322),Maxr(S\n\u2032\n2), . . . ,Maxr(S\n\u2032\nn)).\nThe right-hand sides of the above equations are the same\n(since Minl is totally symmetric), so the left-hand sides are\nequal as well, as required.\nIt is obvious that h is conservative. It remains to show\nthat it is a polymorphism of H. For all 1 \u2264 i \u2264 n and\n1 \u2264 l \u2264 k, let sil and til be intervals in V that intersect\n(i.e., adjacent in H). Also let Si = {si1, . . . , sik} and Ti =\n{ti1, . . . , tik} for 1 \u2264 i \u2264 n. We need to show that the\nintervals s = h(S1, . . . , Sn) and t = h(T1, . . . , Tn) also\nintersect.\nWe have s = Minl(Maxr(S\u20321), . . . ,Maxr(S\n\u2032\nn)) and t =\nMinl(Maxr(T \u20321), . . . ,Maxr(T\n\u2032\nn)). Hence, s = Maxr(S\n\u2032\ni)\nfor some i and t = Maxr(T \u2032j) for some j. It is easy to see\nthat i and j can be chosen so that Si = S\u2032i and Tj = T\n\u2032\nj .\nSince Si = S\u2032i, and T\n\u2032\ni \u2286 Ti we know that every interval in\nT \u2032i intersects some interval in S\n\u2032\ni. Similarly, every interval\nin S\u2032j intersects some interval in T\n\u2032\nj .\nSuppose, for a contradiction, that s \u2229 t = \u2205. As-\nsume first that t precedes s, i.e. r(t) < l(s). Since\n314\ns = Minl(Maxr(S\u20321), . . . ,Maxr(S\n\u2032\nn)), we have l(s) \u2264\nl(Maxr(S\u2032j)). Since Maxl(S\n\u2032\nj) \u2208 S\u2032j , it intersects some\ninterval tj \u2208 T \u2032j . In particular, we have l(Maxr(Sj)) <\nr(tj). By combining the three above inequalities, we obtain\nr(t) < l(s) \u2264 l(Maxr(Sj)) < r(tj), which contradicts the\nfact t = Maxr(T \u2032j). If r(s) < l(t) then the argument is\nsymmetric.\nThus h is a polymorphism and the theorem is proved.\nCorollary 19. For a reflexive graph H, either Hu has\ncaterpillar duality or CSP(Hu) is NP-complete.\nRemark 20. If H is the reflexive claw (i.e., the complete\nbipartite graph K1,3 with loops) then it is easy to check that\nHu does not have lattice polymorphisms, even though it is\nthe core of a structure with such polymorphisms (by Theo-\nrem 6).\nRemark 21. By using results from [22], one can show that,\nfor a reflexive graph H, Hu does not have finite duality\nunless the graph H is complete.\n4.2 List H-colouring for directed graphs\nAll graphs in this subsection are directed and, unless\nspecified otherwise, irreflexive (i.e., loopless). It was shown\nin [17] that every oriented path has path duality (that is it\nhas an obstruction set consisting of oriented paths). Since\nevery oriented path is a caterpillar, every oriented path has\ncaterpillar duality. We will show how to generalise this re-\nsult to a much wider class of digraphs which, in particular,\nincludes all oriented caterpillars. A directed acyclic graph\n(DAG) G is called layered (or balanced) if each vertex u of\nG can be assigned a positive integer l(u), the level of u, so\nthat every arc (u, v) of G satisfies l(u) + 1 = l(v). Every\nlayered DAG can be embedded into the plane in such a way\nthat each vertex u lies on the horizontal line y = l(u), and\nthe arcs are straight lines. If, in addition, the embedding\ncan be arranged in such a way that the arcs never cross each\nother then the graph is called a planar layered DAG. It is\neasy to see that every oriented caterpillar is a planar layered\nDAG.\nTheorem 22. If H is a planar layered DAG then Hu has\ncaterpillar duality.\nProof. Fix a planar layered embedding of H into the plane\nsuch that the vertices lie on horizontal lines (as described\nabove) and consider the following total order on H: u < v\nif and only if either (i) l(u) < l(v) or else (ii) l(u) = l(v)\nand u is to the left of v.\nLet min and max be the lattice operations with respect\nto the above order. We now show that they are poly-\nmorphisms of H. Let (a1, b1) and (a2, b2) be arcs in\nH. We need to show that (min(a1, a2),min(b1, b2)) and\n(max(a1, a2),max(b1, b2)) are also arcs in H. We con-\nsider the former case, the latter is similar. Assume without\nloss of generality that min(a1, a2) = a1. If l(a1) < l(a2)\nthen l(b1) < l(b2) so min(b1, b2) = b1 and we are done.\nIf l(a1) = l(a2) then l(b1) = l(b2) and we again have\nmin(b1, b2) = b1 because otherwise the arcs (a1, b1) and\n(a2, b2) would cross. By Example 5 and Theorem 6, we are\ndone.\nReflexive digraphs that admit polymorphisms min and\nmax with respect to some linear ordering of the vertices\nwere characterised in [14]. Obviously, if H is such a di-\ngraph then Hu has caterpillar duality.\nNow let H be a reflexive digraph, and let Hc denote the\nstructure obtained from H by adding all unary relations of\nthe form {a}, a \u2208 H . The problem CSP(Hc) is known\nin graph theory as one-or-all list H-homomorphism prob-\nlem, and it is equivalent to the so-called H-retraction prob-\nlem [10, 15]. It is easy to see that the polymorphisms of Hc\nare the idempotent polymorphisms of H. Note that if \u03c4 is\nthe signature of Hc then a \u03c4 -path is an oriented path each\nof whose ends may belong to a unary relation.\nTheorem 23. For any reflexive digraph H , the following\nare equivalent:\n1. Hc has caterpillar duality;\n2. Hc has tree duality and a majority polymorphism;\n3. Hc has path duality.\nProof. Clearly, (3) implies (1). Let us show that (1) im-\nplies (2). Caterpillar duality trivially implies tree duality.\nBy Theorem 6, Hc has a 6-ary 2-ABS polymorphism f . It\nis easy to check that f(x, y, z, x, y, z) is a majority poly-\nmorphism of Hc. Finally, let us show that (2) implies (3).\nLet \u03c4 be the signature of Hc (i.e. one binary and |H| unary\nrelations). Let A a \u03c4 -structure such that A \u0005\u2192 Hc. By\nthe tree duality of Hc, there exists a \u03c4 -tree T that is ho-\nmomorphic to A, but not to Hc. Take T to be minimal,\nthat is, any proper substructure of T is homomorphic to\nHc. Then, since Hc has a majority polymorphism, Theo-\nrem 1.17 of [26] implies that at most two elements of T are\nin unary relations in T. This, the fact that H is reflexive,\nand the minimality of T imply that T is in fact a path.\nReferences\n[1] A. Atserias. On digraph coloring problems and treewidth\nduality. European Journal of Combinatorics, 2008. to ap-\npear.\n315\n[2] L. Barto, M. Kozik, and T. Niven. Graphs, polymor-\nphisms and the complexity of homomorphism problems. In\nSTOC\u201908, 2008. to appear.\n[3] A. Bulatov. H-coloring dichotomy revisited. Theoretical\nComputer Science, 349(1):31\u201339, 2005.\n[4] A. Bulatov, A. Krokhin, and B. Larose. Dualities for con-\nstraint satisfaction problems. In Surveys on Complexity of\nConstraints. 2008. (to appear).\n[5] D. Cohen and P. Jeavons. The complexity of constraint lan-\nguages. In F. Rossi, P. van Beek, and T. Walsh, editors,\nHandbook of Constraint Programming, chapter 8. Elsevier,\n2006.\n[6] V. Dalmau. Linear Datalog and bounded path duality for\nrelational structures. Logical Methods in Computer Science,\n1(1), 2005. (electronic).\n[7] V. Dalmau and J. Pearson. Set functions and width 1 prob-\nlems. In CP\u201999, volume 1713 of LNCS, pages 159\u2013173,\n1999.\n[8] H.-D. Ebbinghaus and J. Flum. Finite Model Theory.\nSpringer-Verlag, 1999.\n[9] L. Egri, B. Larose, and P. Tesson. Symmetric Datalog and\nconstraint satisfaction problems in Logspace. In LICS\u201907,\npages 193\u2013202, 2007.\n[10] T. Feder and P. Hell. List homomorphisms to reflexive\ngraphs. Journal of Combinatorial Theory, Ser.B, 72:236\u2013\n250, 1998.\n[11] T. Feder and M. Vardi. The computational structure of\nmonotone monadic SNP and constraint satisfaction: A study\nthrough Datalog and group theory. SIAM Journal on Com-\nputing, 28:57\u2013104, 1998.\n[12] G. Gra\u00a8tzer. General Lattice Theory. Birkha\u00a8user, 2nd edition,\n2002.\n[13] M. Grohe. The structure of tractable constraint satisfaction\nproblems. In MFCS\u201906, volume 4162 of LNCS, pages 58\u2013\n72, 2006.\n[14] A. Gupta, P. Hell, M. Karimi, and A. Rafiey. Minimum cost\nhomomorphisms to reflexive digraphs. In LATIN\u201908, volume\n4957 of LNCS, 2008. to appear.\n[15] P. Hell and J. Nes\u02c7etr\u02c7il. Graphs and Homomorphisms. Ox-\nford University Press, 2004.\n[16] P. Hell, J. Nes\u02c7etr\u02c7il, and X. Zhu. Duality of graph homo-\nmorphisms. In Combinatorics, Paul Erdo\u00a8s is Eighty (Vol.2),\nvolume 2 of Bolyai Soc. Math. Stud., pages 271\u2013282. Ja\u00b4nos\nBolyai Math. Soc., 1996.\n[17] P. Hell and X. Zhu. Homomorphisms to oriented paths. Dis-\ncrete Mathematics, 132:107\u2013114, 1994.\n[18] P. Idziak, P. Markovic, R. McKenzie, M. Valeriote, and\nR. Willard. Tractability and learnability arising from alge-\nbras with few subpowers. In LICS\u201907, pages 213\u2013222, 2007.\n[19] P. Kolaitis. On the expressive power of logics on finite mod-\nels. In Finite Model Theory and its Applications, EATCS Se-\nries: Texts in Theoretical Computer Science. Springer, 2007.\n[20] P. Kolaitis and M. Vardi. A logical approach to constraint\nsatisfaction. In Finite Model Theory and its Applications,\nEATCS Series: Texts in Theoretical Computer Science.\nSpringer, 2007.\n[21] A. Krokhin, A. Bulatov, and P. Jeavons. The complexity of\nconstraint satisfaction: an algebraic approach. In Structural\nTheory of Automata, Semigroups, and Universal Algebra,\nvolume 207 of NATO Science Series II: Math., Phys., Chem.,\npages 181\u2013213. Springer Verlag, 2005.\n[22] B. Larose, C. Loten, and C. Tardif. A characterisation of\nfirst-order constraint satisfaction problems. Logical Methods\nin Computer Science, 3(4), 2007. (electronic).\n[23] B. Larose and P. Tesson. Universal algebra and hardness\nresults for constraint satisfaction problems. In ICALP\u201907,\nvolume 4596 of LNCS, pages 267\u2013278, 2007.\n[24] C. Loten and C. Tardif. Majority functions on structures with\nfinite duality. European Journal of Combinatorics, 2008. to\nappear.\n[25] J. Nes\u02c7etr\u02c7il and C. Tardif. Duality theorems for finite struc-\ntures (characterising gaps and good characterisations). Jour-\nnal of Combinatorial Theory, Ser.B, 80:80\u201397, 2000.\n[26] L. Za\u00b4dori. Relational sets and categorical equivalence for al-\ngebras. International Journal of Algebra and Computation,\n7(5):561\u2013576, 1997.\n316\n"}